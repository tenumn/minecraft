/**
* @javaClass dev.latvian.mods.kubejs.bindings.BlockWrapper
*/
declare class Block {
    static getMaterial(): Internal.Map<string, Internal.MaterialJS>;
    static getTaggedIds(tag: ResourceLocation_): Internal.List<ResourceLocation>;
    static getBlock(id: ResourceLocation_): Internal.Block;
    static custom(predicate: Internal.BlockPredicate_): Internal.BlockPredicate;
    static getTypeList(): Internal.List<string>;
    static getFacing(): Internal.Map<string, Internal.Direction>;
    static id(id: ResourceLocation_, properties: Internal.Map_<string, any>): Internal.BlockIDPredicate;
    static id(id: ResourceLocation_): Internal.BlockIDPredicate;
    static entity(id: ResourceLocation_): Internal.BlockEntityPredicate;
    get material(): Internal.Map<string, Internal.MaterialJS>;
    get typeList(): Internal.List<string>;
    get facing(): Internal.Map<string, Internal.Direction>;
    constructor();
}
type Block_ = Block;
/**
* @javaClass dev.latvian.mods.rhino.mod.wrapper.UUIDWrapper
*/
declare interface UUID {
    digits(sb: Internal.StringBuilder_, val: number, digits: number): void;
    toString(id: Internal.UUID_): string;
    fromString(o: any): Internal.UUID;
}
type UUID_ = UUID;
declare const UUID: UUID;
/**
* @javaClass net.minecraft.core.BlockPos
*/
declare class BlockPos extends Vec3i {
    constructor(arg0: Vec3i);
    constructor(arg0: Internal.Position);
    constructor(arg0: Vec3);
    constructor(arg0: number, arg1: number, arg2: number);
    constructor(arg0: number, arg1: number, arg2: number);
}
type BlockPos_ = BlockPos;
/**
* @javaClass dev.latvian.mods.kubejs.bindings.UtilsWrapper
*/
declare interface Utils {
    getSystemTime(): number;
    getRegistries(): typeof Internal.KubeJSRegistries;
    getRegistry(id: ResourceLocation_): Internal.Registrar<any>;
    listOrSelf(o: any): Internal.ListJS;
    getStat(id: ResourceLocation_): Internal.Stat<ResourceLocation>;
    parseDouble(object: any, def: number): number;
    emptyList<T>(): Internal.List<T>;
    getRandom(): Internal.Random;
    randomOf(random: Internal.Random_, objects: Internal.Collection_<any>): any;
    emptyMap<K, V>(): Internal.Map<K, V>;
    copy(o: any): any;
    id(namespace: string, path: string): ResourceLocation;
    id(id: ResourceLocation_): ResourceLocation;
    listOf(o: any): Internal.ListJS;
    rollChestLoot(id: ResourceLocation_, entity: Internal.EntityJS_): Internal.ListJS;
    rollChestLoot(id: ResourceLocation_): Internal.ListJS;
    getServer(): Internal.ServerJS;
    newCountingMap(): Internal.CountingMap;
    createConsole(name: string): Internal.ConsoleJS;
    newMap(): Internal.MapJS;
    newList(): Internal.ListJS;
    getClientLevel(): Internal.LevelJS;
    getRegistryIds(id: ResourceLocation_): Internal.Collection<ResourceLocation>;
    parseInt(object: any, def: number): number;
    getLevel(level: Internal.Level_): Internal.LevelJS;
    isWrapped(o: any): boolean;
    regex(pattern: string, flags: number): Internal.Pattern;
    regex(s: any): Internal.Pattern;
    newRandom(seed: number): Internal.Random;
    queueIO(runnable: Internal.Runnable_): void;
    toTitleCase(s: string): string;
    mapOf(o: any): Internal.MapJS;
    getSound(id: ResourceLocation_): Internal.SoundEvent;
}
type Utils_ = Utils;
declare const Utils: Utils;
/**
* @javaClass dev.latvian.mods.kubejs.block.state.BlockStatePredicate
*/
declare interface BlockStatePredicate {
    test(arg0: Internal.BlockState_): boolean;
    getBlockStates(): Internal.Collection<Internal.BlockState>;
    /**
    */
    of(o: BlockStatePredicate_): this;
    getBlocks(): Internal.Collection<Internal.Block>;
    fromString(s: string): this;
    check(targetStates: Internal.List_<Internal.OreConfiguration$TargetBlockState_>): boolean;
    getBlockIds(): Internal.Set<ResourceLocation>;
    asRuleTest(): Internal.RuleTest;
    ruleTestOf(o: any): Internal.RuleTest;
    readonly "AIR_ID" : ResourceLocation;
}
/**
*/
type BlockStatePredicate_ = BlockStatePredicate_[] | {or?: BlockStatePredicate_, not?: BlockStatePredicate_} | Internal.Block_ | Internal.BlockState_ | `#${Special.BlockTag}` | RegExp | ((arg0: Internal.BlockState) => boolean) | BlockStatePredicate;
declare const BlockStatePredicate: BlockStatePredicate;
/**
* @javaClass net.minecraft.world.entity.EquipmentSlot
*/
declare class EquipmentSlot extends Internal.Enum<EquipmentSlot> {
    static valueOf(arg0: string): this;
    static values(): EquipmentSlot[];
    static readonly "CHEST" : EquipmentSlot;
    static readonly "HEAD" : EquipmentSlot;
    static readonly "OFFHAND" : EquipmentSlot;
    static readonly "MAINHAND" : EquipmentSlot;
    static readonly "LEGS" : EquipmentSlot;
    static readonly "FEET" : EquipmentSlot;
}
type EquipmentSlot_ = "mainhand" | "head" | "feet" | "chest" | "legs" | "offhand" | EquipmentSlot;
/**
* @javaClass net.minecraft.world.level.levelgen.GenerationStep$Carving
*/
declare class CarvingGenerationStep extends Internal.Enum<CarvingGenerationStep> implements Internal.StringRepresentable {
    static valueOf(arg0: string): this;
    static values(): CarvingGenerationStep[];
    static readonly "LIQUID" : CarvingGenerationStep;
    static readonly "AIR" : CarvingGenerationStep;
}
type CarvingGenerationStep_ = "liquid" | "air" | CarvingGenerationStep;
/**
* @javaClass dev.latvian.mods.kubejs.util.NBTIOWrapper
*/
declare interface NBTIO {
    read(path: Internal.Path_): Internal.CompoundTag;
    write(path: Internal.Path_, nbt: Internal.CompoundTag_): void;
}
type NBTIO_ = NBTIO;
declare const NBTIO: NBTIO;
/**
* @javaClass dev.latvian.mods.kubejs.bindings.ItemWrapper
*/
declare class Item {
    static clearListCache(): void;
    static getList(): Internal.ListJS;
    static getEmpty(): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS_, count: number, nbt: Internal.CompoundTag_): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS_, tag: Internal.CompoundTag_): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS_, count: number): Internal.ItemStackJS;
    static of(in_: Internal.ItemStackJS_): Internal.ItemStackJS;
    static getTypeList(): Internal.ListJS;
    static findGroup(id: string): Internal.CreativeModeTab;
    static isItem(o: any): boolean;
    static getItem(id: ResourceLocation_): Internal.Item;
    static exists(id: ResourceLocation_): boolean;
    static withChance(in_: Internal.ItemStackJS_, c: number): Internal.ItemStackJS;
    static fireworks(properties: Internal.Map_<string, any>): Internal.FireworksJS;
    static withNBT(in_: Internal.ItemStackJS_, nbt: Internal.CompoundTag_): Internal.ItemStackJS;
    get typeList(): Internal.ListJS;
    get list(): Internal.ListJS;
    get empty(): Internal.ItemStackJS;
    constructor();
}
type Item_ = Item;
/**
* @javaClass net.minecraft.world.item.Rarity
*/
declare class Rarity extends Internal.Enum<Rarity> implements Internal.IExtensibleEnum {
    static valueOf(arg0: string): this;
    static values(): Rarity[];
    static create(arg0: string, arg1: Internal.UnaryOperator_<Internal.Style_>): this;
    static create(arg0: string, arg1: Internal.ChatFormatting_): this;
    getStyleModifier(): Internal.UnaryOperator<Internal.Style>;
    static readonly "RARE" : Rarity;
    static readonly "EPIC" : Rarity;
    static readonly "UNCOMMON" : Rarity;
    static readonly "COMMON" : Rarity;
    get styleModifier(): Internal.UnaryOperator<Internal.Style>;
}
type Rarity_ = "uncommon" | "common" | "rare" | "epic" | Rarity;
/**
* @javaClass dev.latvian.mods.rhino.mod.util.NBTUtils
*/
declare interface NBT {
    byteArrayTag(v: number[]): Internal.Tag;
    fromTag(t: Internal.Tag_): any;
    toTagCompound(v: any): Internal.CompoundTag;
    listTag(list: Internal.List_<any>): Internal.Tag;
    listTag(): Internal.Tag;
    compoundTag(): Internal.Tag;
    compoundTag(map: Internal.Map_<any, any>): Internal.Tag;
    isTagCompound(o: any): boolean;
    toTag(v: any): Internal.Tag;
    floatTag(v: number): Internal.Tag;
    quoteAndEscapeForJS(stringBuilder: Internal.StringBuilder_, string: string): void;
    toTagList(list: any): Internal.ListTag;
    ia(v: number[]): Internal.Tag;
    intTag(v: number): Internal.Tag;
    byteTag(v: number): Internal.Tag;
    longArrayTag(v: number[]): Internal.Tag;
    b(v: number): Internal.Tag;
    read(buf: Internal.FriendlyByteBuf_): Internal.OrderedCompoundTag;
    d(v: number): Internal.Tag;
    f(v: number): Internal.Tag;
    convertType(tagType: Internal.TagType_<any>): Internal.TagType<any>;
    i(v: number): Internal.Tag;
    shortTag(v: number): Internal.Tag;
    l(v: number): Internal.Tag;
    toTagCollection(c: Internal.Collection_<any>): Internal.CollectionTag<any>;
    toTagCollection(v: any): Internal.CollectionTag<any>;
    s(v: number): Internal.Tag;
    la(v: number[]): Internal.Tag;
    longTag(v: number): Internal.Tag;
    isTagCollection(o: any): boolean;
    intArrayTag(v: number[]): Internal.Tag;
    doubleTag(v: number): Internal.Tag;
    stringTag(v: string): Internal.Tag;
    accessTagMap(tag: Internal.CompoundTag_): Internal.Map<string, Internal.Tag>;
    ba(v: number[]): Internal.Tag;
    readonly "COMPOUND_TYPE" : Internal.TagType<Internal.OrderedCompoundTag>;
    readonly "VALUE_UNWRAPPER" : ((arg0: Internal.Scriptable, arg1: any) => any);
    readonly "LIST_TYPE" : Internal.TagType<Internal.ListTag>;
}
type NBT_ = NBT;
declare const NBT: NBT;
/**
* @javaClass dev.latvian.mods.rhino.mod.wrapper.DirectionWrapper
*/
declare interface Facing {
    readonly "ALL" : {"east":Internal.Direction,"south":Internal.Direction,"north":Internal.Direction,"west":Internal.Direction,"up":Internal.Direction,"down":Internal.Direction};
    readonly "DOWN" : Internal.Direction;
    readonly "south" : Internal.Direction;
    readonly "north" : Internal.Direction;
    readonly "WEST" : Internal.Direction;
    readonly "down" : Internal.Direction;
    readonly "east" : Internal.Direction;
    readonly "NORTH" : Internal.Direction;
    readonly "west" : Internal.Direction;
    readonly "up" : Internal.Direction;
    readonly "UP" : Internal.Direction;
    readonly "SOUTH" : Internal.Direction;
    readonly "EAST" : Internal.Direction;
}
type Facing_ = Facing;
declare const Facing: Facing;
/**
* @javaClass dev.latvian.mods.rhino.mod.wrapper.ColorWrapper
*/
declare interface Color {
    rgba(r: number, g: number, b: number, a: number): dev.latvian.mods.rhino.mod.util.color.Color;
    of(o: any): dev.latvian.mods.rhino.mod.util.color.Color;
    createMapped(o: any, ... names: string[]): dev.latvian.mods.rhino.mod.util.color.Color;
    readonly "BLUE_DYE" : (() => number);
    readonly "GOLD" : (() => number);
    readonly "GRAY" : (() => number);
    readonly "MAGENTA_DYE" : (() => number);
    readonly "BLUE" : (() => number);
    readonly "DARK_AQUA" : (() => number);
    readonly "TEXT" : {"dark_red":Internal.ChatFormatting,"green":Internal.ChatFormatting,"underline":Internal.ChatFormatting,"dark_green":Internal.ChatFormatting,"black":Internal.ChatFormatting,"yellow":Internal.ChatFormatting,"bold":Internal.ChatFormatting,"italic":Internal.ChatFormatting,"dark_blue":Internal.ChatFormatting,"dark_purple":Internal.ChatFormatting,"gold":Internal.ChatFormatting,"red":Internal.ChatFormatting,"aqua":Internal.ChatFormatting,"gray":Internal.ChatFormatting,"light_purple":Internal.ChatFormatting,"blue":Internal.ChatFormatting,"white":Internal.ChatFormatting,"dark_aqua":Internal.ChatFormatting,"dark_gray":Internal.ChatFormatting,"reset":Internal.ChatFormatting,"strikethrough":Internal.ChatFormatting,"obfuscated":Internal.ChatFormatting};
    readonly "DYE" : {"magenta":Internal.DyeColor,"pink":Internal.DyeColor,"green":Internal.DyeColor,"lime":Internal.DyeColor,"light_gray":Internal.DyeColor,"yellow":Internal.DyeColor,"black":Internal.DyeColor,"light_blue":Internal.DyeColor,"brown":Internal.DyeColor,"cyan":Internal.DyeColor,"orange":Internal.DyeColor,"red":Internal.DyeColor,"gray":Internal.DyeColor,"white":Internal.DyeColor,"blue":Internal.DyeColor,"purple":Internal.DyeColor};
    readonly "WHITE_DYE" : (() => number);
    readonly "DARK_RED" : (() => number);
    readonly "LIGHT_PURPLE" : (() => number);
    readonly "BROWN_DYE" : (() => number);
    readonly "BLACK" : (() => number);
    readonly "GRAY_DYE" : (() => number);
    readonly "NONE" : (() => number);
    readonly "LIGHT_BLUE_DYE" : (() => number);
    readonly "AQUA" : (() => number);
    readonly "WHITE" : (() => number);
    readonly "LIGHT_GRAY_DYE" : (() => number);
    readonly "BLACK_DYE" : (() => number);
    readonly "RED_DYE" : (() => number);
    readonly "PURPLE_DYE" : (() => number);
    readonly "GREEN_DYE" : (() => number);
    readonly "PINK_DYE" : (() => number);
    readonly "DARK_BLUE" : (() => number);
    readonly "GREEN" : (() => number);
    readonly "CYAN_DYE" : (() => number);
    readonly "RED" : (() => number);
    readonly "DARK_PURPLE" : (() => number);
    readonly "ORANGE_DYE" : (() => number);
    readonly "YELLOW_DYE" : (() => number);
    readonly "DARK_GREEN" : (() => number);
    readonly "YELLOW" : (() => number);
    readonly "LIME_DYE" : (() => number);
    readonly "DARK_GRAY" : (() => number);
    readonly "MAP" : {"":Internal.NoColor,"light_blue_dye":Internal.DyeColor,"BLUE_DYE":Internal.DyeColor,"purple_dye":Internal.DyeColor,"dark_red":Internal.ChatFormatting,"lightGrayDye":Internal.DyeColor,"DARK_AQUA":Internal.ChatFormatting,"none":Internal.NoColor,"green_dye":Internal.DyeColor,"blackDye":Internal.DyeColor,"dark_blue":Internal.ChatFormatting,"red":Internal.ChatFormatting,"pink_dye":Internal.DyeColor,"aqua":Internal.ChatFormatting,"white":Internal.ChatFormatting,"WHITE_DYE":Internal.DyeColor,"dark_gray":Internal.ChatFormatting,"LIGHT_PURPLE":Internal.ChatFormatting,"BROWN_DYE":Internal.DyeColor,"BLACK":Internal.ChatFormatting,"darkPurple":Internal.ChatFormatting,"NONE":Internal.NoColor,"LIGHT_BLUE_DYE":Internal.DyeColor,"AQUA":Internal.ChatFormatting,"lightBlueDye":Internal.DyeColor,"limeDye":Internal.DyeColor,"PURPLE_DYE":Internal.DyeColor,"GREEN_DYE":Internal.DyeColor,"magenta_dye":Internal.DyeColor,"-":Internal.NoColor,"lime_dye":Internal.DyeColor,"yellowDye":Internal.DyeColor,"grayDye":Internal.DyeColor,"purpleDye":Internal.DyeColor,"DARK_PURPLE":Internal.ChatFormatting,"ORANGE_DYE":Internal.DyeColor,"darkGray":Internal.ChatFormatting,"brownDye":Internal.DyeColor,"YELLOW":Internal.ChatFormatting,"LIME_DYE":Internal.DyeColor,"blueDye":Internal.DyeColor,"white_dye":Internal.DyeColor,"pinkDye":Internal.DyeColor,"blue_dye":Internal.DyeColor,"cyanDye":Internal.DyeColor,"GOLD":Internal.ChatFormatting,"GRAY":Internal.ChatFormatting,"MAGENTA_DYE":Internal.DyeColor,"BLUE":Internal.ChatFormatting,"yellow":Internal.ChatFormatting,"darkBlue":Internal.ChatFormatting,"transparent":Internal.NoColor,"orange_dye":Internal.DyeColor,"red_dye":Internal.DyeColor,"dark_purple":Internal.ChatFormatting,"gold":Internal.ChatFormatting,"gray":Internal.ChatFormatting,"light_purple":Internal.ChatFormatting,"darkRed":Internal.ChatFormatting,"greenDye":Internal.DyeColor,"DARK_RED":Internal.ChatFormatting,"redDye":Internal.DyeColor,"GRAY_DYE":Internal.DyeColor,"orangeDye":Internal.DyeColor,"yellow_dye":Internal.DyeColor,"black_dye":Internal.DyeColor,"magentaDye":Internal.DyeColor,"WHITE":Internal.ChatFormatting,"green":Internal.ChatFormatting,"LIGHT_GRAY_DYE":Internal.DyeColor,"BLACK_DYE":Internal.DyeColor,"darkGreen":Internal.ChatFormatting,"RED_DYE":Internal.DyeColor,"dark_green":Internal.ChatFormatting,"black":Internal.ChatFormatting,"lightPurple":Internal.ChatFormatting,"PINK_DYE":Internal.DyeColor,"DARK_BLUE":Internal.ChatFormatting,"GREEN":Internal.ChatFormatting,"darkAqua":Internal.ChatFormatting,"gray_dye":Internal.DyeColor,"CYAN_DYE":Internal.DyeColor,"RED":Internal.ChatFormatting,"brown_dye":Internal.DyeColor,"cyan_dye":Internal.DyeColor,"blue":Internal.ChatFormatting,"whiteDye":Internal.DyeColor,"dark_aqua":Internal.ChatFormatting,"YELLOW_DYE":Internal.DyeColor,"DARK_GREEN":Internal.ChatFormatting,"DARK_GRAY":Internal.ChatFormatting};
}
type Color_ = Color;
declare const Color: Color;
/**
* @javaClass dev.latvian.mods.kubejs.util.JsonIO
*/
declare class JsonIO {
    static writeJsonHash(stream: Internal.DataOutputStream_, element: Internal.JsonElement_): void;
    static toPrimitive(element: Internal.JsonElement_): any;
    static read(path: Internal.Path_): Internal.MapJS;
    static getJsonHashBytes(json: Internal.JsonElement_): number[];
    static parse(string: string): any;
    static primitiveOf(o: any): Internal.JsonPrimitive;
    static of(o: any): Internal.JsonElement;
    static toArray(element: Internal.JsonElement_): Internal.JsonArray;
    static toPrettyString(json: Internal.JsonElement_): string;
    static parseRaw(string: string): Internal.JsonElement;
    static toString(json: Internal.JsonElement_): string;
    static toObject(json: Internal.JsonElement_): any;
    static copy(element: Internal.JsonElement_): Internal.JsonElement;
    static write(path: Internal.Path_, json: Internal.JsonElement_): void;
    constructor();
}
type JsonIO_ = JsonIO;
/**
* @javaClass net.minecraft.resources.ResourceLocation
*/
declare class ResourceLocation implements Internal.Comparable<ResourceLocation>, Internal.SpecialEquality {
    hashCode(): number;
    compareNamespaced(arg0: ResourceLocation_): number;
    equals(arg0: any): boolean;
    toString(): string;
    compareTo(arg0: ResourceLocation_): number;
    specialEquals(o: any, shallow: boolean): boolean;
    constructor(arg0: string, arg1: string);
    constructor(arg0: string);
}
/**
*/
type ResourceLocation_ = string | ResourceLocation;
/**
* @javaClass net.minecraft.world.level.levelgen.GenerationStep$Decoration
*/
declare class DecorationGenerationStep extends Internal.Enum<DecorationGenerationStep> {
    static valueOf(arg0: string): this;
    static values(): DecorationGenerationStep[];
    static readonly "RAW_GENERATION" : DecorationGenerationStep;
    static readonly "UNDERGROUND_STRUCTURES" : DecorationGenerationStep;
    static readonly "LOCAL_MODIFICATIONS" : DecorationGenerationStep;
    static readonly "TOP_LAYER_MODIFICATION" : DecorationGenerationStep;
    static readonly "UNDERGROUND_DECORATION" : DecorationGenerationStep;
    static readonly "LAKES" : DecorationGenerationStep;
    static readonly "SURFACE_STRUCTURES" : DecorationGenerationStep;
    static readonly "STRONGHOLDS" : DecorationGenerationStep;
    static readonly "FLUID_SPRINGS" : DecorationGenerationStep;
    static readonly "VEGETAL_DECORATION" : DecorationGenerationStep;
    static readonly "UNDERGROUND_ORES" : DecorationGenerationStep;
}
type DecorationGenerationStep_ = "strongholds" | "underground_ores" | "underground_structures" | "top_layer_modification" | "fluid_springs" | "underground_decoration" | "raw_generation" | "lakes" | "vegetal_decoration" | "local_modifications" | "surface_structures" | DecorationGenerationStep;
/**
* @javaClass dev.latvian.mods.kubejs.level.gen.forge.BiomeDictionaryWrapper
*/
declare class BiomeDictionary {
    static printTags(biome: ResourceLocation_): void;
    static getBiomeType(o: any): Internal.BiomeDictionary$Type;
    static printBiomes(type: Internal.BiomeDictionary$Type_): void;
    static addTypes(biomes: ResourceLocation_[], tags: Internal.BiomeDictionary$Type_[]): void;
    constructor();
}
type BiomeDictionary_ = BiomeDictionary;
/**
* @javaClass dev.latvian.mods.kubejs.bindings.IngredientWrapper
*/
declare class Ingredient {
    static customNBT(in_: Internal.IngredientJS_, predicate: Internal.Predicate_<Internal.CompoundTag_>): Internal.IngredientJS;
    static getAll(): Internal.IngredientJS;
    static matchAny(objects: any): Internal.IngredientJS;
    static isIngredient(o: any): boolean;
    static custom(in_: Internal.IngredientJS_, predicate: Internal.Predicate_<Internal.ItemStackJS_>): Internal.IngredientJS;
    static custom(predicate: Internal.Predicate_<Internal.ItemStackJS_>): Internal.IngredientJS;
    /**
    */
    static of(object: Internal.IngredientJS_, count: number): Internal.IngredientJS;
    /**
    */
    static of(object: Internal.IngredientJS_): Internal.IngredientJS;
    static registerCustomIngredientAction(id: string, callback: Internal.CustomIngredientActionCallback_): void;
    static getNone(): Internal.IngredientJS;
    get all(): Internal.IngredientJS;
    get none(): Internal.IngredientJS;
    constructor();
}
/**
*/
type Ingredient_ = Ingredient;
/**
* @javaClass net.minecraft.world.phys.Vec3
*/
declare class Vec3 implements Internal.Position {
    hashCode(): number;
    equals(arg0: any): boolean;
    toString(): string;
    constructor(arg0: Internal.Vector3f);
    constructor(arg0: number, arg1: number, arg2: number);
}
type Vec3_ = Vec3;
/**
* @javaClass net.minecraft.core.Vec3i
*/
declare class Vec3i implements Internal.Comparable<Vec3i> {
    hashCode(): number;
    equals(arg0: any): boolean;
    toString(): string;
    compareTo(arg0: Vec3i_): number;
    constructor(arg0: number, arg1: number, arg2: number);
    constructor(arg0: number, arg1: number, arg2: number);
}
type Vec3i_ = Vec3i;
/**
* @javaClass net.minecraft.world.InteractionHand
*/
declare class Hand extends Internal.Enum<Hand> {
    static valueOf(arg0: string): this;
    static values(): Hand[];
    static readonly "MAIN_HAND" : Hand;
    static readonly "OFF_HAND" : Hand;
}
type Hand_ = "main_hand" | "off_hand" | Hand;
/**
* @javaClass java.lang.Math
*/
declare class JavaMath {
    static multiplyFull(arg0: number, arg1: number): number;
    static copySign(arg0: number, arg1: number): number;
    static log1p(arg0: number): number;
    static expm1(arg0: number): number;
    static cos(arg0: number): number;
    static rint(arg0: number): number;
    static atan(arg0: number): number;
    static ceilDiv(arg0: number, arg1: number): number;
    static nextUp(arg0: number): number;
    static sqrt(arg0: number): number;
    static ceilDivExact(arg0: number, arg1: number): number;
    static decrementExact(arg0: number): number;
    static absExact(arg0: number): number;
    static exp(arg0: number): number;
    static atan2(arg0: number, arg1: number): number;
    static signum(arg0: number): number;
    static tan(arg0: number): number;
    static floorDivExact(arg0: number, arg1: number): number;
    static sinh(arg0: number): number;
    static toDegrees(arg0: number): number;
    static acos(arg0: number): number;
    static ceil(arg0: number): number;
    static divideExact(arg0: number, arg1: number): number;
    static getExponent(arg0: number): number;
    static addExact(arg0: number, arg1: number): number;
    static multiplyHigh(arg0: number, arg1: number): number;
    static ulp(arg0: number): number;
    static scalb(arg0: number, arg1: number): number;
    static floorMod(arg0: number, arg1: number): number;
    static log(arg0: number): number;
    static log10(arg0: number): number;
    static nextAfter(arg0: number, arg1: number): number;
    static multiplyExact(arg0: number, arg1: number): number;
    static cbrt(arg0: number): number;
    static random(): number;
    static tanh(arg0: number): number;
    static min(arg0: number, arg1: number): number;
    static negateExact(arg0: number): number;
    static hypot(arg0: number, arg1: number): number;
    static pow(arg0: number, arg1: number): number;
    static sin(arg0: number): number;
    static unsignedMultiplyHigh(arg0: number, arg1: number): number;
    static floor(arg0: number): number;
    static subtractExact(arg0: number, arg1: number): number;
    static ceilMod(arg0: number, arg1: number): number;
    static max(arg0: number, arg1: number): number;
    static toIntExact(arg0: number): number;
    static nextDown(arg0: number): number;
    static toRadians(arg0: number): number;
    static cosh(arg0: number): number;
    static IEEEremainder(arg0: number, arg1: number): number;
    static abs(arg0: number): number;
    static round(arg0: number): number;
    static floorDiv(arg0: number, arg1: number): number;
    static incrementExact(arg0: number): number;
    static asin(arg0: number): number;
    static fma(arg0: number, arg1: number, arg2: number): number;
    static readonly "E" : 2.718281828459045;
    static readonly "PI" : 3.141592653589793;
}
type JavaMath_ = JavaMath;
/**
* @javaClass dev.latvian.mods.kubejs.fluid.FluidWrapper
*/
declare class Fluid {
    static lava(amount: number): Internal.FluidStackJS;
    static lava(): Internal.FluidStackJS;
    static getType(id: ResourceLocation_): Internal.Fluid;
    static getEmpty(): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS_): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS_, amount: number, nbt: Internal.CompoundTag_): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS_, nbt: Internal.CompoundTag_): Internal.FluidStackJS;
    static of(o: Internal.FluidStackJS_, amount: number): Internal.FluidStackJS;
    static exists(id: ResourceLocation_): boolean;
    static getTypes(): Internal.List<string>;
    static water(): Internal.FluidStackJS;
    static water(amount: number): Internal.FluidStackJS;
    static readonly "LAVA_ID" : ResourceLocation;
    static readonly "WATER_ID" : ResourceLocation;
    get types(): Internal.List<string>;
    get empty(): Internal.FluidStackJS;
    constructor();
}
type Fluid_ = Fluid;
/**
* @javaClass dev.latvian.mods.kubejs.bindings.ComponentWrapper
*/
declare class Component {
    static green(text: any): Internal.MutableComponent;
    static prettyPrintNbt(tag: Internal.Tag_): net.minecraft.network.chat.Component;
    static string(text: string): Internal.MutableComponent;
    static darkGreen(text: any): Internal.MutableComponent;
    static clickEventOf(o: any): Internal.ClickEvent;
    static black(text: any): Internal.MutableComponent;
    static yellow(text: any): Internal.MutableComponent;
    static lightPurple(text: any): Internal.MutableComponent;
    static darkBlue(text: any): Internal.MutableComponent;
    /**
    */
    static translate(key: Special.LangKey, ... objects: any[]): Internal.MutableComponent;
    /**
    */
    static translate(key: Special.LangKey): Internal.MutableComponent;
    static darkAqua(text: any): Internal.MutableComponent;
    static gold(text: any): Internal.MutableComponent;
    static red(text: any): Internal.MutableComponent;
    static aqua(text: any): Internal.MutableComponent;
    static gray(text: any): Internal.MutableComponent;
    static blue(text: any): Internal.MutableComponent;
    static white(text: any): Internal.MutableComponent;
    static darkRed(text: any): Internal.MutableComponent;
    static keybind(keybind: string): Internal.MutableComponent;
    static of(o: any): Internal.MutableComponent;
    static darkGray(text: any): Internal.MutableComponent;
    static darkPurple(text: any): Internal.MutableComponent;
    static join(separator: Internal.MutableComponent_, texts: Internal.Iterable_<net.minecraft.network.chat.Component_>): Internal.MutableComponent;
    constructor();
}
/**
*/
type Component_ = Component;
/**
* @javaClass dev.latvian.mods.kubejs.script.PlatformWrapper
*/
declare class Platform {
    static isDevelopmentEnvironment(): boolean;
    static isClientEnvironment(): boolean;
    static getName(): string;
    static getInfo(modID: string): Internal.PlatformWrapper$ModInfo;
    static getMods(): Internal.Map<string, Internal.PlatformWrapper$ModInfo>;
    static getList(): Internal.Set<string>;
    static isForge(): boolean;
    static getModVersion(): string;
    static isLoaded(modId: string): boolean;
    static getMcVersion(): string;
    static isFabric(): boolean;
    get mods(): Internal.Map<string, Internal.PlatformWrapper$ModInfo>;
    get modVersion(): string;
    get developmentEnvironment(): boolean;
    get forge(): boolean;
    get fabric(): boolean;
    get mcVersion(): string;
    get clientEnvironment(): boolean;
    get name(): string;
    get list(): Internal.Set<string>;
    constructor();
}
type Platform_ = Platform;
/**
* @javaClass dev.latvian.mods.rhino.mod.wrapper.AABBWrapper
*/
declare interface AABB {
    ofBlock(pos: BlockPos_): Internal.AABB;
    ofSize(x: number, y: number, z: number): Internal.AABB;
    ofSize(vec3: Vec3_, x: number, y: number, z: number): Internal.AABB;
    of(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): Internal.AABB;
    wrap(o: any): Internal.AABB;
    ofBlocks(pos1: BlockPos_, pos2: BlockPos_): Internal.AABB;
    readonly "CUBE" : Internal.AABB;
    readonly "EMPTY" : Internal.AABB;
}
type AABB_ = AABB;
declare const AABB: AABB;
declare namespace com.simibubi.create.foundation.mixin.accessor {
    /**
    * @javaClass com.simibubi.create.foundation.mixin.accessor.ServerLevelAccessor
    */
    interface ServerLevelAccessor {
        create$getEntityTickList(): Internal.EntityTickList;
    }
    type ServerLevelAccessor_ = (() => Internal.EntityTickList) | ServerLevelAccessor;
}
declare namespace dev.architectury.event {
    /**
    * @javaClass dev.architectury.event.Event
    */
    interface Event <T> {
        unregister(arg0: T): void;
        isRegistered(arg0: T): boolean;
        invoker(): T;
        clearListeners(): void;
        register(arg0: T): void;
    }
    type Event_<T> = Event<T>;
}
declare namespace com.mojang.blaze3d.platform {
    /**
    * @javaClass com.mojang.blaze3d.platform.Window
    */
    class Window implements Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Window_ = Window;
}
declare namespace org.apache.maven.repository {
    /**
    * @javaClass org.apache.maven.repository.Proxy
    */
    class Proxy {
        setHost(arg0: string): void;
        setPassword(arg0: string): void;
        setNtlmHost(arg0: string): void;
        setNonProxyHosts(arg0: string): void;
        setProtocol(arg0: string): void;
        getProtocol(): string;
        getNonProxyHosts(): string;
        setPort(arg0: number): void;
        getNtlmDomain(): string;
        getPassword(): string;
        getPort(): number;
        setUserName(arg0: string): void;
        getNtlmHost(): string;
        setNtlmDomain(arg0: string): void;
        getUserName(): string;
        getHost(): string;
        static readonly "PROXY_HTTP" : "HTTP";
        static readonly "PROXY_SOCKS4" : "SOCKS4";
        static readonly "PROXY_SOCKS5" : "SOCKS_5";
        get protocol(): string;
        get nonProxyHosts(): string;
        get password(): string;
        get ntlmDomain(): string;
        get port(): number;
        get host(): string;
        get userName(): string;
        get ntlmHost(): string;
        set protocol(arg0: string);
        set nonProxyHosts(arg0: string);
        set password(arg0: string);
        set ntlmDomain(arg0: string);
        set port(arg0: number);
        set host(arg0: string);
        set userName(arg0: string);
        set ntlmHost(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Proxy_ = Proxy;
}
declare namespace Internal {
    /**
    * @javaClass net.minecraftforge.common.IPlantable
    */
    interface IPlantable {
        getPlantType(arg0: Internal.BlockGetter_, arg1: BlockPos_): Internal.PlantType;
        getPlant(arg0: Internal.BlockGetter_, arg1: BlockPos_): Internal.BlockState;
    }
    type IPlantable_ = ((arg0: Internal.BlockGetter, arg1: BlockPos) => Internal.BlockState) | IPlantable;
    /**
    * Fired on an entity is spawned.
    * @javaClass dev.latvian.mods.kubejs.entity.EntitySpawnedEventJS
    */
    class EntitySpawnedEventJS extends Internal.EntityEventJS {
        getLevel(): Internal.LevelJS;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get level(): Internal.LevelJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired on an entity is spawned.
    */
    type EntitySpawnedEventJS_ = EntitySpawnedEventJS;
    /**
    * @javaClass java.util.IntSummaryStatistics
    */
    class IntSummaryStatistics implements Internal.IntConsumer {
        getMin(): number;
        getMax(): number;
        toString(): string;
        getAverage(): number;
        getSum(): number;
        getCount(): number;
        combine(arg0: Internal.IntSummaryStatistics_): void;
        accept(arg0: number): void;
        get average(): number;
        get min(): number;
        get max(): number;
        get count(): number;
        get sum(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IntSummaryStatistics_ = IntSummaryStatistics;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.LootEventJS
    */
    abstract class LootEventJS extends Internal.EventJS {
        modify(id: ResourceLocation_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        removeAll(): void;
        getType(): string;
        getDirectory(): string;
        addJson(id: ResourceLocation_, json: Internal.JsonObject_): void;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootEventJS_ = LootEventJS;
    /**
    * @javaClass com.prunoideae.recipe.TerraPlateRecipeJS
    */
    class TerraPlateRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TerraPlateRecipeJS_ = TerraPlateRecipeJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.SoundRegistryEventJS
    */
    class SoundRegistryEventJS extends Internal.StartupEventJS {
        register(r: ResourceLocation_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundRegistryEventJS_ = SoundRegistryEventJS;
    /**
    * @javaClass java.nio.channels.Channel
    */
    interface Channel extends Internal.Closeable {
        isOpen(): boolean;
        close(): void;
    }
    type Channel_ = Channel;
    /**
    * @javaClass mezz.jei.api.gui.drawable.IDrawableAnimated$StartDirection
    */
    class IDrawableAnimated$StartDirection extends Internal.Enum<Internal.IDrawableAnimated$StartDirection> {
        static valueOf(arg0: string): this;
        static values(): Internal.IDrawableAnimated$StartDirection[];
        static readonly "TOP" : Internal.IDrawableAnimated$StartDirection;
        static readonly "LEFT" : Internal.IDrawableAnimated$StartDirection;
        static readonly "RIGHT" : Internal.IDrawableAnimated$StartDirection;
        static readonly "BOTTOM" : Internal.IDrawableAnimated$StartDirection;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IDrawableAnimated$StartDirection_ = "top" | "left" | "bottom" | "right" | IDrawableAnimated$StartDirection;
    /**
    * @javaClass io.netty.channel.RecvByteBufAllocator$Handle
    */
    interface RecvByteBufAllocator$Handle {
        continueReading(): boolean;
        incMessagesRead(arg0: number): void;
        allocate(arg0: Internal.ByteBufAllocator_): Internal.ByteBuf;
        guess(): number;
        reset(arg0: Internal.ChannelConfig_): void;
        readComplete(): void;
        attemptedBytesRead(): number;
        attemptedBytesRead(arg0: number): void;
        lastBytesRead(): number;
        lastBytesRead(arg0: number): void;
    }
    type RecvByteBufAllocator$Handle_ = RecvByteBufAllocator$Handle;
    /**
    * @javaClass com.google.common.collect.SetMultimap
    */
    interface SetMultimap <K, V> extends Internal.Multimap<K, V> {
        removeAll(arg0: any): Internal.Set<V>;
        entries(): Internal.Set<Internal.Map$Entry<K, V>>;
        asMap(): Internal.Map<K, Internal.Collection<V>>;
        equals(arg0: any): boolean;
        get(arg0: K): Internal.Set<V>;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.Set<V>;
    }
    type SetMultimap_<K, V> = SetMultimap<K, V>;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.QuestObject
    */
    abstract class QuestObject extends Internal.QuestObjectBase {
        getProgressColor(data: Internal.TeamData_): Internal.Color4I;
        getProgressColor(data: Internal.TeamData_, dim: boolean): Internal.Color4I;
        readData(nbt: Internal.CompoundTag_): void;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        isVisible(data: Internal.TeamData_): boolean;
        writeData(nbt: Internal.CompoundTag_): void;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        forceProgress(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        getChildren(): Internal.Collection<Internal.QuestObject>;
        isCompletedRaw(data: Internal.TeamData_): boolean;
        onStarted(data: Internal.QuestProgressEventData_<any>): void;
        static getRelativeProgressFromChildren(progressSum: number, count: number): number;
        getRelativeProgressFromChildren(arg0: Internal.TeamData_): number;
        hasUnclaimedRewardsRaw(teamData: Internal.TeamData_, player: Internal.UUID_): boolean;
        cacheProgress(): boolean;
        "disableToast" : boolean;
        get children(): Internal.Collection<Internal.QuestObject>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestObject_ = QuestObject;
    /**
    * @javaClass io.netty.buffer.CompositeByteBuf
    */
    class CompositeByteBuf extends Internal.AbstractReferenceCountedByteBuf implements Internal.Iterable<Internal.ByteBuf> {
        markReaderIndex(): this;
        getByte(arg0: number): number;
        readerIndex(arg0: number): this;
        writeZero(arg0: number): this;
        addComponent(arg0: Internal.ByteBuf_): this;
        addComponent(arg0: number, arg1: Internal.ByteBuf_): this;
        addComponent(arg0: boolean, arg1: Internal.ByteBuf_): this;
        addComponent(arg0: boolean, arg1: number, arg2: Internal.ByteBuf_): this;
        setShort(arg0: number, arg1: number): this;
        resetReaderIndex(): this;
        writeFloat(arg0: number): this;
        getBytes(arg0: number, arg1: Internal.OutputStream_, arg2: number): this;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): this;
        getBytes(arg0: number, arg1: number[]): this;
        getBytes(arg0: number, arg1: Internal.ByteBuf_): this;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        getBytes(arg0: number, arg1: Internal.ByteBuffer_): this;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): this;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel_, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): this;
        setChar(arg0: number, arg1: number): this;
        addComponents(... arg0: Internal.ByteBuf_[]): this;
        addComponents(arg0: number, arg1: Internal.Iterable_<Internal.ByteBuf_>): this;
        addComponents(arg0: boolean, ... arg1: Internal.ByteBuf_[]): this;
        addComponents(arg0: boolean, arg1: Internal.Iterable_<Internal.ByteBuf_>): this;
        addComponents(arg0: number, ... arg1: Internal.ByteBuf_[]): this;
        addComponents(arg0: Internal.Iterable_<Internal.ByteBuf_>): this;
        iterator(): Internal.Iterator<Internal.ByteBuf>;
        toByteIndex(arg0: number): number;
        order(): Internal.ByteOrder;
        writeMedium(arg0: number): this;
        writeByte(arg0: number): this;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        resetWriterIndex(): this;
        touch(): this;
        touch(arg0: any): this;
        discardSomeReadBytes(): this;
        internalComponentAtOffset(arg0: number): Internal.ByteBuf;
        writerIndex(arg0: number): this;
        nioBufferCount(): number;
        discardReadComponents(): this;
        setInt(arg0: number, arg1: number): this;
        removeComponent(arg0: number): this;
        setLong(arg0: number, arg1: number): this;
        componentAtOffset(arg0: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number): this;
        writeBytes(arg0: Internal.ByteBuffer_): this;
        writeBytes(arg0: number[]): this;
        writeBytes(arg0: number[], arg1: number, arg2: number): this;
        writeBytes(arg0: Internal.ByteBuf_): this;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): this;
        setIndex(arg0: number, arg1: number): this;
        markWriterIndex(): this;
        writeShort(arg0: number): this;
        alloc(): Internal.ByteBufAllocator;
        removeComponents(arg0: number, arg1: number): this;
        writeBoolean(arg0: boolean): this;
        addFlattenedComponents(arg0: boolean, arg1: Internal.ByteBuf_): this;
        numComponents(): number;
        setByte(arg0: number, arg1: number): this;
        toComponentIndex(arg0: number): number;
        retain(): this;
        retain(arg0: number): this;
        decompose(arg0: number, arg1: number): Internal.List<Internal.ByteBuf>;
        hasMemoryAddress(): boolean;
        capacity(arg0: number): this;
        capacity(): number;
        writeLong(arg0: number): this;
        array(): number[];
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        internalComponent(arg0: number): Internal.ByteBuf;
        arrayOffset(): number;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        writeDouble(arg0: number): this;
        maxNumComponents(): number;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): this;
        setBytes(arg0: number, arg1: Internal.ByteBuffer_): this;
        setBytes(arg0: number, arg1: number[]): this;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): this;
        setBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuf_): this;
        setBytes(arg0: number, arg1: Internal.InputStream_, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel_, arg2: number): number;
        ensureWritable(arg0: number): this;
        writeInt(arg0: number): this;
        setFloat(arg0: number, arg1: number): this;
        hasArray(): boolean;
        memoryAddress(): number;
        consolidate(arg0: number, arg1: number): this;
        consolidate(): this;
        clear(): this;
        discardReadBytes(): this;
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        nioBuffers(): Internal.ByteBuffer[];
        skipBytes(arg0: number): this;
        writeChar(arg0: number): this;
        component(arg0: number): Internal.ByteBuf;
        setZero(arg0: number, arg1: number): this;
        readBytes(arg0: Internal.OutputStream_, arg1: number): this;
        readBytes(arg0: Internal.ByteBuf_, arg1: number): this;
        readBytes(arg0: Internal.ByteBuffer_): this;
        readBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): this;
        readBytes(arg0: Internal.ByteBuf_): this;
        readBytes(arg0: number[]): this;
        readBytes(arg0: number[], arg1: number, arg2: number): this;
        toString(): string;
        setMedium(arg0: number, arg1: number): this;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): this;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CompositeByteBuf_ = CompositeByteBuf;
    /**
    * @javaClass dev.latvian.mods.rhino.ContinuationPending
    */
    class ContinuationPending extends Internal.RuntimeException {
        getContinuation(): any;
        setApplicationState(applicationState: any): void;
        getApplicationState(): any;
        setContinuation(continuation: Internal.NativeContinuation_): void;
        get applicationState(): any;
        get continuation(): any;
        set applicationState(applicationState: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContinuationPending_ = ContinuationPending;
    /**
    * @javaClass dev.latvian.mods.rhino.GeneratedClassLoader
    */
    interface GeneratedClassLoader {
        defineClass(arg0: string, arg1: number[]): typeof any;
        linkClass(arg0: Internal.Class_<any>): void;
    }
    type GeneratedClassLoader_ = GeneratedClassLoader;
    /**
    * @javaClass net.minecraftforge.event.entity.item.ItemEvent
    */
    class ItemEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getEntityItem(): Internal.ItemEntity;
        get entityItem(): Internal.ItemEntity;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemEvent_ = ItemEvent;
    /**
    * @javaClass net.minecraft.client.model.EntityModel
    */
    abstract class EntityModel <T> extends Internal.Model {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityModel_<T> = EntityModel<T>;
    /**
    * @javaClass net.minecraft.world.item.CreativeModeTab
    */
    abstract class CreativeModeTab {
        getLabelColor(): number;
        setBackgroundImage(arg0: ResourceLocation_): this;
        getSearchbarWidth(): number;
        getBackgroundImage(): ResourceLocation;
        getSlotColor(): number;
        static getGroupCountSafe(): number;
        getTabsImage(): ResourceLocation;
        getTabPage(): number;
        hasSearchBar(): boolean;
        get tabsImage(): ResourceLocation;
        get slotColor(): number;
        get backgroundImage(): ResourceLocation;
        get tabPage(): number;
        get searchbarWidth(): number;
        get groupCountSafe(): number;
        get labelColor(): number;
        set backgroundImage(arg0: ResourceLocation_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CreativeModeTab_ = CreativeModeTab;
    /**
    * @javaClass net.minecraft.commands.CommandSource
    */
    interface CommandSource {
    }
    type CommandSource_ = CommandSource;
    /**
    * @javaClass java.awt.Window
    */
    class Window extends Internal.Container implements Internal.Accessible {
        isOpaque(): boolean;
        setModalExclusionType(arg0: Internal.Dialog$ModalExclusionType_): void;
        setIconImage(arg0: Internal.Image_): void;
        paint(arg0: Internal.Graphics_): void;
        removeWindowListener(arg0: Internal.WindowListener_): void;
        getOwner(): this;
        isActive(): boolean;
        getFocusTraversalKeys(arg0: number): Internal.Set<Internal.AWTKeyStroke>;
        getInputContext(): Internal.InputContext;
        getOpacity(): number;
        isShowing(): boolean;
        setIconImages(arg0: Internal.List_<Internal.Image_>): void;
        getWindowStateListeners(): Internal.WindowStateListener[];
        isLocationByPlatform(): boolean;
        setAutoRequestFocus(arg0: boolean): void;
        setVisible(arg0: boolean): void;
        toFront(): void;
        setFocusableWindowState(arg0: boolean): void;
        setFocusCycleRoot(arg0: boolean): void;
        getMostRecentFocusOwner(): Internal.Component;
        reshape(arg0: number, arg1: number, arg2: number, arg3: number): void;
        isFocused(): boolean;
        pack(): void;
        toBack(): void;
        setLocationByPlatform(arg0: boolean): void;
        postEvent(arg0: Internal.Event_): boolean;
        createBufferStrategy(arg0: number, arg1: Internal.BufferCapabilities_): void;
        createBufferStrategy(arg0: number): void;
        removeWindowStateListener(arg0: Internal.WindowStateListener_): void;
        getType(): Internal.Window$Type;
        removeNotify(): void;
        setCursor(arg0: Internal.Cursor_): void;
        dispose(): void;
        getWarningString(): string;
        getModalExclusionType(): Internal.Dialog$ModalExclusionType;
        setMinimumSize(arg0: Internal.Dimension_): void;
        static getOwnerlessWindows(): Internal.Window[];
        getListeners<T>(arg0: Internal.Class_<T>): T[];
        isAlwaysOnTop(): boolean;
        show(): void;
        getShape(): Internal.Shape;
        isFocusCycleRoot(): boolean;
        setBackground(arg0: Internal.Color_): void;
        removeWindowFocusListener(arg0: Internal.WindowFocusListener_): void;
        getToolkit(): Internal.Toolkit;
        addWindowListener(arg0: Internal.WindowListener_): void;
        setSize(arg0: Internal.Dimension_): void;
        setSize(arg0: number, arg1: number): void;
        setLocation(arg0: Internal.Point_): void;
        setLocation(arg0: number, arg1: number): void;
        addPropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        addPropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        getWindowListeners(): Internal.WindowListener[];
        isAlwaysOnTopSupported(): boolean;
        addWindowStateListener(arg0: Internal.WindowStateListener_): void;
        getOwnedWindows(): Internal.Window[];
        getIconImages(): Internal.List<Internal.Image>;
        getFocusableWindowState(): boolean;
        applyResourceBundle(arg0: string): void;
        applyResourceBundle(arg0: Internal.ResourceBundle_): void;
        getWindowFocusListeners(): Internal.WindowFocusListener[];
        setType(arg0: Internal.Window$Type_): void;
        getBufferStrategy(): Internal.BufferStrategy;
        getAccessibleContext(): Internal.AccessibleContext;
        setBounds(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setBounds(arg0: Internal.Rectangle_): void;
        setShape(arg0: Internal.Shape_): void;
        static getWindows(): Internal.Window[];
        isValidateRoot(): boolean;
        hide(): void;
        addNotify(): void;
        isFocusableWindow(): boolean;
        isAutoRequestFocus(): boolean;
        setAlwaysOnTop(arg0: boolean): void;
        getFocusCycleRootAncestor(): Internal.Container;
        getFocusOwner(): Internal.Component;
        getBackground(): Internal.Color;
        getLocale(): Internal.Locale;
        addWindowFocusListener(arg0: Internal.WindowFocusListener_): void;
        setLocationRelativeTo(arg0: Internal.Component_): void;
        setOpacity(arg0: number): void;
        get accessibleContext(): Internal.AccessibleContext;
        get warningString(): string;
        get inputContext(): Internal.InputContext;
        get mostRecentFocusOwner(): Internal.Component;
        get alwaysOnTop(): boolean;
        get modalExclusionType(): Internal.Dialog$ModalExclusionType;
        get windowFocusListeners(): Internal.WindowFocusListener[];
        get type(): Internal.Window$Type;
        get locale(): Internal.Locale;
        get ownerlessWindows(): Internal.Window[];
        get focusableWindowState(): boolean;
        get locationByPlatform(): boolean;
        get windowStateListeners(): Internal.WindowStateListener[];
        get bufferStrategy(): Internal.BufferStrategy;
        get ownedWindows(): Internal.Window[];
        get owner(): this;
        get opaque(): boolean;
        get shape(): Internal.Shape;
        get active(): boolean;
        get validateRoot(): boolean;
        get autoRequestFocus(): boolean;
        get windows(): Internal.Window[];
        get windowListeners(): Internal.WindowListener[];
        get focusOwner(): Internal.Component;
        get iconImages(): Internal.List<Internal.Image>;
        get toolkit(): Internal.Toolkit;
        get focusCycleRoot(): boolean;
        get focusCycleRootAncestor(): Internal.Container;
        get background(): Internal.Color;
        get focused(): boolean;
        get focusableWindow(): boolean;
        get opacity(): number;
        get showing(): boolean;
        get alwaysOnTopSupported(): boolean;
        set cursor(arg0: Internal.Cursor_);
        set visible(arg0: boolean);
        set shape(arg0: Internal.Shape_);
        set iconImage(arg0: Internal.Image_);
        set locationRelativeTo(arg0: Internal.Component_);
        set alwaysOnTop(arg0: boolean);
        set modalExclusionType(arg0: Internal.Dialog$ModalExclusionType_);
        set autoRequestFocus(arg0: boolean);
        set type(arg0: Internal.Window$Type_);
        set size(arg0: Internal.Dimension_);
        set iconImages(arg0: Internal.List_<Internal.Image_>);
        set background(arg0: Internal.Color_);
        set focusCycleRoot(arg0: boolean);
        set minimumSize(arg0: Internal.Dimension_);
        set focusableWindowState(arg0: boolean);
        set bounds(arg0: Internal.Rectangle_);
        set locationByPlatform(arg0: boolean);
        set location(arg0: Internal.Point_);
        set opacity(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Window_ = Window;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent$CropGrowEvent$Pre
    */
    class BlockEvent$CropGrowEvent$Pre extends Internal.BlockEvent$CropGrowEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent$CropGrowEvent$Pre_ = BlockEvent$CropGrowEvent$Pre;
    /**
    * @javaClass com.mojang.datafixers.Products$P7
    */
    class Products$P7 <F, T1, T2, T3, T4, T5, T6, T7> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        t6(): Internal.App<F, T6>;
        t7(): Internal.App<F, T7>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function7_<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function7_<T1, T2, T3, T4, T5, T6, T7, R>): Internal.App<F, R>;
        and<T8>(arg0: Internal.App_<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P7_<F, T1, T2, T3, T4, T5, T6, T7> = Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.TeamProperty
    */
    abstract class TeamProperty <T> {
        readValue(buf: Internal.FriendlyByteBuf_): T;
        toNBT(value: T): Internal.Tag;
        fromNBT(tag: Internal.Tag_): Internal.Optional<T>;
        getType(): Internal.TeamPropertyType<T>;
        hashCode(): number;
        equals(o: any): boolean;
        toString(value: T): string;
        toString(): string;
        fromString(arg0: string): Internal.Optional<T>;
        writeValue(buf: Internal.FriendlyByteBuf_, value: T): void;
        config(config: Internal.ConfigGroup_, value: Internal.TeamPropertyValue_<T>): void;
        write(arg0: Internal.FriendlyByteBuf_): void;
        readonly "defaultValue" : T;
        readonly "id" : ResourceLocation;
        get type(): Internal.TeamPropertyType<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamProperty_<T> = TeamProperty<T>;
    /**
    * @javaClass net.minecraft.client.gui.components.Widget
    */
    interface Widget {
    }
    type Widget_ = Widget;
    /**
    * @javaClass net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket
    */
    class ClientboundBlockEntityDataPacket implements Internal.Packet<any> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientboundBlockEntityDataPacket_ = ClientboundBlockEntityDataPacket;
    /**
    * @javaClass net.minecraft.client.resources.sounds.SoundInstance
    */
    interface SoundInstance {
        getStream(arg0: Internal.SoundBufferLibrary_, arg1: Internal.Sound_, arg2: boolean): Internal.CompletableFuture<Internal.AudioStream>;
    }
    type SoundInstance_ = SoundInstance;
    /**
    * @javaClass java.net.NetworkInterface
    */
    class NetworkInterface {
        getInterfaceAddresses(): Internal.List<Internal.InterfaceAddress>;
        getParent(): this;
        getName(): string;
        getIndex(): number;
        supportsMulticast(): boolean;
        getSubInterfaces(): Internal.Enumeration<Internal.NetworkInterface>;
        static getByIndex(arg0: number): this;
        inetAddresses(): Internal.Stream<Internal.InetAddress>;
        static getByInetAddress(arg0: Internal.InetAddress_): this;
        isPointToPoint(): boolean;
        getMTU(): number;
        static networkInterfaces(): Internal.Stream<Internal.NetworkInterface>;
        isUp(): boolean;
        getDisplayName(): string;
        hashCode(): number;
        equals(arg0: any): boolean;
        static getByName(arg0: string): this;
        getHardwareAddress(): number[];
        isLoopback(): boolean;
        subInterfaces(): Internal.Stream<Internal.NetworkInterface>;
        toString(): string;
        isVirtual(): boolean;
        static getNetworkInterfaces(): Internal.Enumeration<Internal.NetworkInterface>;
        getInetAddresses(): Internal.Enumeration<Internal.InetAddress>;
        get parent(): this;
        get hardwareAddress(): number[];
        get virtual(): boolean;
        get displayName(): string;
        get pointToPoint(): boolean;
        get interfaceAddresses(): Internal.List<Internal.InterfaceAddress>;
        get name(): string;
        get index(): number;
        get up(): boolean;
        get mTU(): number;
        get loopback(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NetworkInterface_ = NetworkInterface;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent
    */
    class ScreenEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getScreen(): Internal.Screen;
        get listenerList(): Internal.ListenerList;
        get screen(): Internal.Screen;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent_ = ScreenEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.MultipartBlockStateGenerator$Part
    */
    class MultipartBlockStateGenerator$Part {
        toJson(): Internal.JsonObject;
        model(s: string): Internal.VariantBlockStateGenerator$Model;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MultipartBlockStateGenerator$Part_ = MultipartBlockStateGenerator$Part;
    /**
    * @javaClass net.minecraftforge.fluids.capability.IFluidHandler$FluidAction
    */
    class IFluidHandler$FluidAction extends Internal.Enum<Internal.IFluidHandler$FluidAction> {
        static valueOf(arg0: string): this;
        static values(): Internal.IFluidHandler$FluidAction[];
        simulate(): boolean;
        execute(): boolean;
        static readonly "EXECUTE" : Internal.IFluidHandler$FluidAction;
        static readonly "SIMULATE" : Internal.IFluidHandler$FluidAction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IFluidHandler$FluidAction_ = "execute" | "simulate" | IFluidHandler$FluidAction;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.FenceGateBlockBuilder
    */
    class FenceGateBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FenceGateBlockBuilder_ = FenceGateBlockBuilder;
    /**
    * @javaClass net.minecraft.world.entity.projectile.Projectile
    */
    abstract class Projectile extends Internal.Entity {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Projectile_ = Projectile;
    /**
    * @javaClass com.mojang.authlib.properties.PropertyMap
    */
    class PropertyMap extends Internal.ForwardingMultimap<string, any> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PropertyMap_ = PropertyMap;
    /**
    * @javaClass io.netty.util.AttributeMap
    */
    interface AttributeMap {
        hasAttr<T>(arg0: Internal.AttributeKey_<T>): boolean;
        attr<T>(arg0: Internal.AttributeKey_<T>): io.netty.util.Attribute<T>;
    }
    type AttributeMap_ = AttributeMap;
    /**
    * @javaClass java.awt.event.MouseWheelListener
    */
    interface MouseWheelListener extends Internal.EventListener {
        mouseWheelMoved(arg0: Internal.MouseWheelEvent_): void;
    }
    type MouseWheelListener_ = ((arg0: Internal.MouseWheelEvent) => void) | MouseWheelListener;
    /**
    * @javaClass com.mojang.datafixers.util.Function10
    */
    interface Function10 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function<T10, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function3<T8, T9, T10, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.BiFunction<T9, T10, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function5<T6, T7, T8, T9, T10, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function4<T7, T8, T9, T10, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function7<T4, T5, T6, T7, T8, T9, T10, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function6<T5, T6, T7, T8, T9, T10, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function8<T3, T4, T5, T6, T7, T8, T9, T10, R>>;
        curry(): Internal.Function<T1, Internal.Function9<T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>;
    }
    type Function10_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10) => R) | Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>;
    /**
    * @javaClass java.util.stream.LongStream$Builder
    */
    interface LongStream$Builder extends Internal.LongConsumer {
        add(arg0: number): this;
        build(): Internal.LongStream;
        accept(arg0: number): void;
    }
    type LongStream$Builder_ = LongStream$Builder;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2BooleanFunction
    */
    interface Float2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.DoublePredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Float2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2BooleanFunction;
    }
    type Float2BooleanFunction_ = ((arg0: number) => boolean) | Float2BooleanFunction;
    /**
    * @javaClass com.electronwill.nightconfig.core.io.ConfigWriter
    */
    interface ConfigWriter {
        writeToString(arg0: Internal.UnmodifiableConfig_): string;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Path_, arg2: Internal.WritingMode_, arg3: Internal.Charset_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.File_, arg2: Internal.WritingMode_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.File_, arg2: Internal.WritingMode_, arg3: Internal.Charset_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.URL_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Writer_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.OutputStream_, arg2: Internal.Charset_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.OutputStream_): void;
        write(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Path_, arg2: Internal.WritingMode_): void;
    }
    type ConfigWriter_ = ((arg0: Internal.UnmodifiableConfig, arg1: Internal.Writer) => void) | ConfigWriter;
    /**
    * @javaClass net.minecraft.commands.SharedSuggestionProvider
    */
    interface SharedSuggestionProvider {
    }
    type SharedSuggestionProvider_ = SharedSuggestionProvider;
    /**
    * @javaClass net.minecraft.world.effect.MobEffectInstance
    */
    class MobEffectInstance implements Internal.Comparable<Internal.MobEffectInstance>, Internal.IForgeMobEffectInstance {
        setCurativeItems(arg0: Internal.List_<Internal.ItemStack_>): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        compareTo(arg0: Internal.MobEffectInstance_): number;
        getCurativeItems(): Internal.List<Internal.ItemStack>;
        get curativeItems(): Internal.List<Internal.ItemStack>;
        set curativeItems(arg0: Internal.List_<Internal.ItemStack_>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobEffectInstance_ = MobEffectInstance;
    /**
    * @javaClass java.awt.ComponentOrientation
    */
    class ComponentOrientation implements Internal.Serializable {
        isLeftToRight(): boolean;
        static getOrientation(arg0: Internal.ResourceBundle_): this;
        static getOrientation(arg0: Internal.Locale_): this;
        isHorizontal(): boolean;
        static readonly "RIGHT_TO_LEFT" : Internal.ComponentOrientation;
        static readonly "UNKNOWN" : Internal.ComponentOrientation;
        static readonly "LEFT_TO_RIGHT" : Internal.ComponentOrientation;
        get leftToRight(): boolean;
        get horizontal(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ComponentOrientation_ = ComponentOrientation;
    /**
    * @javaClass java.util.LongSummaryStatistics
    */
    class LongSummaryStatistics implements Internal.LongConsumer, Internal.IntConsumer {
        getMin(): number;
        getMax(): number;
        toString(): string;
        getAverage(): number;
        getSum(): number;
        getCount(): number;
        combine(arg0: Internal.LongSummaryStatistics_): void;
        accept(arg0: number): void;
        get average(): number;
        get min(): number;
        get max(): number;
        get count(): number;
        get sum(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LongSummaryStatistics_ = LongSummaryStatistics;
    /**
    * @javaClass javax.security.auth.Subject
    */
    class Subject implements Internal.Serializable {
        static getSubject(arg0: Internal.AccessControlContext_): this;
        getPrivateCredentials(): Internal.Set<any>;
        getPrivateCredentials<T>(arg0: Internal.Class_<T>): Internal.Set<T>;
        static callAs<T>(arg0: Internal.Subject_, arg1: Internal.Callable_<T>): T;
        getPrincipals(): Internal.Set<Internal.Principal>;
        getPrincipals<T>(arg0: Internal.Class_<T>): Internal.Set<T>;
        getPublicCredentials<T>(arg0: Internal.Class_<T>): Internal.Set<T>;
        getPublicCredentials(): Internal.Set<any>;
        static doAsPrivileged<T>(arg0: Internal.Subject_, arg1: Internal.PrivilegedExceptionAction_<T>, arg2: Internal.AccessControlContext_): T;
        static doAsPrivileged<T>(arg0: Internal.Subject_, arg1: Internal.PrivilegedAction_<T>, arg2: Internal.AccessControlContext_): T;
        static doAs<T>(arg0: Internal.Subject_, arg1: Internal.PrivilegedAction_<T>): T;
        static doAs<T>(arg0: Internal.Subject_, arg1: Internal.PrivilegedExceptionAction_<T>): T;
        static current(): this;
        isReadOnly(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        setReadOnly(): void;
        get privateCredentials(): Internal.Set<any>;
        get principals(): Internal.Set<Internal.Principal>;
        get readOnly(): boolean;
        get publicCredentials(): Internal.Set<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Subject_ = Subject;
    /**
    * @javaClass vazkii.patchouli.mixin.client.AccessorScreen
    */
    interface AccessorScreen {
        getRenderables(): Internal.List<Internal.Widget>;
        getNarratables(): Internal.List<Internal.NarratableEntry>;
    }
    type AccessorScreen_ = AccessorScreen;
    /**
    * @javaClass java.lang.invoke.TypeDescriptor$OfMethod
    */
    interface TypeDescriptor$OfMethod <F, M> extends Internal.TypeDescriptor {
        parameterType(arg0: number): F;
        parameterArray(): F[];
        dropParameterTypes(arg0: number, arg1: number): M;
        parameterCount(): number;
        changeReturnType(arg0: F): M;
        parameterList(): Internal.List<F>;
        insertParameterTypes(arg0: number, ... arg1: F[]): M;
        returnType(): F;
        changeParameterType(arg0: number, arg1: F): M;
    }
    type TypeDescriptor$OfMethod_<F, M> = TypeDescriptor$OfMethod<F, M>;
    /**
    * @javaClass java.lang.ModuleLayer$Controller
    */
    class ModuleLayer$Controller {
        addReads(arg0: Internal.Module_, arg1: Internal.Module_): this;
        addExports(arg0: Internal.Module_, arg1: string, arg2: Internal.Module_): this;
        addOpens(arg0: Internal.Module_, arg1: string, arg2: Internal.Module_): this;
        layer(): Internal.ModuleLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleLayer$Controller_ = ModuleLayer$Controller;
    /**
    * @javaClass com.google.common.collect.ImmutableMap$Builder
    */
    class ImmutableMap$Builder <K, V> {
        buildOrThrow(): Internal.ImmutableMap<K, V>;
        build(): Internal.ImmutableMap<K, V>;
        putAll(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableMap$Builder<K, V>;
        putAll(arg0: Internal.Map_<K, V>): Internal.ImmutableMap$Builder<K, V>;
        orderEntriesByValue(arg0: Internal.Comparator_<V>): Internal.ImmutableMap$Builder<K, V>;
        put(arg0: K, arg1: V): Internal.ImmutableMap$Builder<K, V>;
        put(arg0: Internal.Map$Entry_<K, V>): Internal.ImmutableMap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMap$Builder_<K, V> = ImmutableMap$Builder<K, V>;
    /**
    * @javaClass net.minecraft.world.level.biome.AmbientAdditionsSettings
    */
    class AmbientAdditionsSettings {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AmbientAdditionsSettings_ = AmbientAdditionsSettings;
    /**
    * @javaClass com.mojang.datafixers.Products$P12
    */
    class Products$P12 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function12_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function12_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P12_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> = Products$P12<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptSource
    */
    interface ScriptSource {
        createStream(arg0: Internal.ScriptFileInfo_): Internal.InputStream;
    }
    type ScriptSource_ = ((arg0: Internal.ScriptFileInfo) => Internal.InputStream) | ScriptSource;
    /**
    * @javaClass java.awt.image.BufferStrategy
    */
    abstract class BufferStrategy {
        contentsRestored(): boolean;
        contentsLost(): boolean;
        getDrawGraphics(): Internal.Graphics;
        show(): void;
        dispose(): void;
        getCapabilities(): Internal.BufferCapabilities;
        get capabilities(): Internal.BufferCapabilities;
        get drawGraphics(): Internal.Graphics;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferStrategy_ = BufferStrategy;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.EntityJS
    */
    class EntityJS implements Internal.MessageSender, Internal.WrappedJS {
        setY(y: number): void;
        setX(x: number): void;
        isOnScoreboardTeam(teamID: string): boolean;
        isLiving(): boolean;
        isSprinting(): boolean;
        getItem(): Internal.ItemStackJS;
        getTags(): Internal.Set<string>;
        setGlowing(glowing: boolean): void;
        setZ(z: number): void;
        setInvisible(invisible: boolean): void;
        getHasCustomName(): boolean;
        runCommandSilent(command: string): number;
        getDistanceSq(x: number, y: number, z: number): number;
        getDistanceSq(pos: BlockPos_): number;
        isBoss(): boolean;
        isGlowing(): boolean;
        getHorizontalFacing(): Internal.Direction;
        getServer(): Internal.ServerJS;
        setMotion(x: number, y: number, z: number): void;
        getProfile(): Internal.GameProfile;
        setRotation(yaw: number, pitch: number): void;
        isOnSameTeam(e: Internal.EntityJS_): boolean;
        isAnimal(): boolean;
        getDisplayName(): net.minecraft.network.chat.Component;
        getType(): string;
        setCustomNameAlwaysVisible(b: boolean): void;
        addMotion(x: number, y: number, z: number): void;
        isInvisible(): boolean;
        isUnderWater(): boolean;
        getEyeHeight(): number;
        getFallDistance(): number;
        setOnFire(seconds: number): void;
        removePassengers(): void;
        attack(hp: number): void;
        attack(source: string, hp: number): void;
        playSound(id: Internal.SoundEvent_): void;
        playSound(id: Internal.SoundEvent_, volume: number, pitch: number): void;
        getDistance(x: number, y: number, z: number): number;
        getDistance(pos: BlockPos_): number;
        isSwimming(): boolean;
        getCustomName(): net.minecraft.network.chat.Component;
        getStepHeight(): number;
        mergeFullNBT(tag: Internal.CompoundTag_): this;
        kill(): void;
        getRidingEntity(): this;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        getLevel(): Internal.LevelJS;
        getPitch(): number;
        getPassengers(): Internal.EntityArrayList;
        isMonster(): boolean;
        setPitch(pitch: number): void;
        isOnGround(): boolean;
        getFacing(): Internal.Direction;
        toString(): string;
        isSilent(): boolean;
        isPassenger(e: Internal.EntityJS_): boolean;
        getPlayer(): Internal.PlayerJS<any>;
        getRecursivePassengers(): Internal.EntityArrayList;
        getNbt(): Internal.CompoundTag;
        setFallDistance(fallDistance: number): void;
        getName(): net.minecraft.network.chat.Component;
        setCustomName(name: net.minecraft.network.chat.Component_): void;
        setStepHeight(stepHeight: number): void;
        tell(message: net.minecraft.network.chat.Component_): void;
        getTeamId(): string;
        isWaterCreature(): boolean;
        teleportTo(dimension: ResourceLocation_, x: number, y: number, z: number, yaw: number, pitch: number): void;
        setNoClip(noClip: boolean): void;
        setPosition(x: number, y: number, z: number): void;
        setPosition(block: Internal.BlockContainerJS_): void;
        extinguish(): void;
        setInvulnerable(invulnerable: boolean): void;
        setFullNBT(nbt: Internal.CompoundTag_): void;
        getFullNBT(): Internal.CompoundTag;
        getNoClip(): boolean;
        setYaw(yaw: number): void;
        getYaw(): number;
        isAlive(): boolean;
        setNoGravity(noGravity: boolean): void;
        isPlayer(): boolean;
        isCrouching(): boolean;
        getId(): Internal.UUID;
        getPersistentData(): Internal.CompoundTag;
        getTicksExisted(): number;
        remove(): void;
        setSilent(isSilent: boolean): void;
        isFrame(): boolean;
        startRiding(e: Internal.EntityJS_, force: boolean): boolean;
        runCommand(command: string): number;
        getCustomNameAlwaysVisible(): boolean;
        setMotionZ(z: number): void;
        setMotionY(y: number): void;
        getBlock(): Internal.BlockContainerJS;
        setMotionX(x: number): void;
        isInWater(): boolean;
        dismountRidingEntity(): void;
        isAmbientCreature(): boolean;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        isInvulnerable(): boolean;
        getX(): number;
        getMinecraftEntity(): Internal.Entity;
        getY(): number;
        spawn(): void;
        getZ(): number;
        isPeacefulCreature(): boolean;
        getMotionZ(): number;
        getMotionX(): number;
        getMotionY(): number;
        getNoGravity(): boolean;
        get invisible(): boolean;
        get customNameAlwaysVisible(): boolean;
        get type(): string;
        get hasCustomName(): boolean;
        get minecraftEntity(): Internal.Entity;
        get block(): Internal.BlockContainerJS;
        get pitch(): number;
        get id(): Internal.UUID;
        get item(): Internal.ItemStackJS;
        get passengers(): Internal.EntityArrayList;
        get level(): Internal.LevelJS;
        get profile(): Internal.GameProfile;
        get customName(): net.minecraft.network.chat.Component;
        get horizontalFacing(): Internal.Direction;
        get tags(): Internal.Set<string>;
        get sprinting(): boolean;
        get crouching(): boolean;
        get noGravity(): boolean;
        get fullNBT(): Internal.CompoundTag;
        get name(): net.minecraft.network.chat.Component;
        get animal(): boolean;
        get peacefulCreature(): boolean;
        get stepHeight(): number;
        get frame(): boolean;
        get noClip(): boolean;
        get server(): Internal.ServerJS;
        get nbt(): Internal.CompoundTag;
        get boss(): boolean;
        get alive(): boolean;
        get ticksExisted(): number;
        get displayName(): net.minecraft.network.chat.Component;
        get fallDistance(): number;
        get facing(): Internal.Direction;
        get ambientCreature(): boolean;
        get swimming(): boolean;
        get waterCreature(): boolean;
        get invulnerable(): boolean;
        get eyeHeight(): number;
        get underWater(): boolean;
        get player(): boolean;
        get motionZ(): number;
        get silent(): boolean;
        get living(): boolean;
        get persistentData(): Internal.CompoundTag;
        get motionY(): number;
        get motionX(): number;
        get ridingEntity(): this;
        get inWater(): boolean;
        get recursivePassengers(): Internal.EntityArrayList;
        get yaw(): number;
        get monster(): boolean;
        get glowing(): boolean;
        get onGround(): boolean;
        get teamId(): string;
        get x(): number;
        get y(): number;
        get z(): number;
        set noClip(noClip: boolean);
        set motionZ(z: number);
        set silent(isSilent: boolean);
        set motionY(y: number);
        set fallDistance(fallDistance: number);
        set motionX(x: number);
        set invisible(invisible: boolean);
        set customName(name: net.minecraft.network.chat.Component_);
        set customNameAlwaysVisible(b: boolean);
        set onFire(seconds: number);
        set yaw(yaw: number);
        set invulnerable(invulnerable: boolean);
        set glowing(glowing: boolean);
        set noGravity(noGravity: boolean);
        set fullNBT(nbt: Internal.CompoundTag_);
        set x(x: number);
        set y(y: number);
        set z(z: number);
        set position(block: Internal.BlockContainerJS_);
        set pitch(pitch: number);
        set stepHeight(stepHeight: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityJS_ = EntityJS;
    /**
    * @javaClass dev.latvian.mods.unit.UnitContext
    */
    class UnitContext {
        getFunctionFactory(name: string): Internal.FunctionFactory;
        addConstant(s: string, u: Internal.Unit_): void;
        isDebug(): boolean;
        popDebug(): void;
        sub(): this;
        addFunction(factory: Internal.FunctionFactory_): void;
        pushDebug(): void;
        createStream(input: string): Internal.UnitTokenStream;
        debugInfo(s: string): void;
        debugInfo(s: string, values: Internal.Collection_<any>): void;
        parse(input: string): Internal.Unit;
        readonly "constants" : Internal.Map<string, Internal.Unit>;
        static readonly "DEFAULT" : Internal.UnitContext;
        get debug(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnitContext_ = UnitContext;
    /**
    * @javaClass net.minecraft.world.level.ItemLike
    */
    interface ItemLike {
    }
    type ItemLike_ = ItemLike;
    /**
    * @javaClass java.util.function.DoubleUnaryOperator
    */
    interface DoubleUnaryOperator {
        applyAsDouble(arg0: number): number;
        compose(arg0: Internal.DoubleUnaryOperator_): this;
        identity(): this;
        andThen(arg0: Internal.DoubleUnaryOperator_): this;
    }
    type DoubleUnaryOperator_ = ((arg0: number) => number) | DoubleUnaryOperator;
    /**
    * @javaClass net.minecraftforge.event.TagsUpdatedEvent$UpdateCause
    */
    class TagsUpdatedEvent$UpdateCause extends Internal.Enum<Internal.TagsUpdatedEvent$UpdateCause> {
        static valueOf(arg0: string): this;
        static values(): Internal.TagsUpdatedEvent$UpdateCause[];
        static readonly "SERVER_DATA_LOAD" : Internal.TagsUpdatedEvent$UpdateCause;
        static readonly "CLIENT_PACKET_RECEIVED" : Internal.TagsUpdatedEvent$UpdateCause;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TagsUpdatedEvent$UpdateCause_ = "client_packet_received" | "server_data_load" | TagsUpdatedEvent$UpdateCause;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemModelPropertiesEventJS
    */
    class ItemModelPropertiesEventJS extends Internal.StartupEventJS {
        registerAll(overwriteId: string, callback: Internal.ItemModelPropertiesEventJS$ItemPropertiesCallback_): void;
        register(ingredient: Internal.IngredientJS_, overwriteId: string, callback: Internal.ItemModelPropertiesEventJS$ItemPropertiesCallback_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemModelPropertiesEventJS_ = ItemModelPropertiesEventJS;
    /**
    * @javaClass net.minecraft.client.renderer.ShaderInstance
    */
    class ShaderInstance implements Internal.Shader, Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShaderInstance_ = ShaderInstance;
    /**
    * @javaClass com.simibubi.create.content.contraptions.fluids.OpenEndedPipe$IEffectHandler
    */
    interface OpenEndedPipe$IEffectHandler {
        applyEffects(arg0: Internal.OpenEndedPipe_, arg1: Internal.FluidStack_): void;
        canApplyEffects(arg0: Internal.OpenEndedPipe_, arg1: Internal.FluidStack_): boolean;
    }
    type OpenEndedPipe$IEffectHandler_ = OpenEndedPipe$IEffectHandler;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseScrollEvent
    */
    abstract class ScreenEvent$MouseScrollEvent extends Internal.ScreenEvent$MouseInputEvent {
        getListenerList(): Internal.ListenerList;
        getScrollDelta(): number;
        get scrollDelta(): number;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseScrollEvent_ = ScreenEvent$MouseScrollEvent;
    /**
    * @javaClass net.minecraft.server.ReloadableServerResources
    */
    class ReloadableServerResources {
        handler$zzf000$updateRegistryTags(registryAccess: Internal.RegistryAccess_, ci: Internal.CallbackInfo_): void;
        getConditionContext(): Internal.ICondition$IContext;
        get conditionContext(): Internal.ICondition$IContext;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ReloadableServerResources_ = ReloadableServerResources;
    /**
    * @javaClass java.lang.constant.MethodTypeDesc
    */
    interface MethodTypeDesc extends Internal.ConstantDesc, Internal.TypeDescriptor$OfMethod<Internal.ClassDesc, Internal.MethodTypeDesc> {
        parameterType(arg0: number): Internal.ClassDesc;
        dropParameterTypes(arg0: number, arg1: number): this;
        parameterCount(): number;
        changeReturnType(arg0: Internal.ClassDesc_): this;
        descriptorString(): string;
        insertParameterTypes(arg0: number, ... arg1: Internal.ClassDesc_[]): this;
        changeParameterType(arg0: number, arg1: Internal.ClassDesc_): this;
        parameterArray(): Internal.ClassDesc[];
        of(arg0: Internal.ClassDesc_, ... arg1: Internal.ClassDesc_[]): this;
        equals(arg0: any): boolean;
        parameterList(): Internal.List<Internal.ClassDesc>;
        ofDescriptor(arg0: string): this;
        displayDescriptor(): string;
        returnType(): Internal.ClassDesc;
    }
    type MethodTypeDesc_ = MethodTypeDesc;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ItemStackConfig
    */
    class ItemStackConfig extends Internal.ConfigValue<Internal.ItemStack> {
        getStringForGUI(v: Internal.ItemStack_): net.minecraft.network.chat.Component;
        onClicked(button: Internal.MouseButton_, callback: Internal.ConfigCallback_): void;
        copy(value: Internal.ItemStack_): Internal.ItemStack;
        readonly "allowEmpty" : boolean;
        readonly "singleItemOnly" : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemStackConfig_ = ItemStackConfig;
    /**
    * @javaClass com.mojang.datafixers.util.Function8
    */
    interface Function8 <T1, T2, T3, T4, T5, T6, T7, T8, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function<T8, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function3<T6, T7, T8, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.BiFunction<T7, T8, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function5<T4, T5, T6, T7, T8, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function4<T5, T6, T7, T8, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function6<T3, T4, T5, T6, T7, T8, R>>;
        curry(): Internal.Function<T1, Internal.Function7<T2, T3, T4, T5, T6, T7, T8, R>>;
    }
    type Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8) => R) | Function8<T1, T2, T3, T4, T5, T6, T7, T8, R>;
    /**
    * @javaClass com.mojang.blaze3d.platform.InputConstants$Key
    */
    class InputConstants$Key {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputConstants$Key_ = InputConstants$Key;
    /**
    * @javaClass dev.architectury.hooks.level.biome.SpawnProperties
    */
    interface SpawnProperties {
        getSpawners(): Internal.Map<Internal.MobCategory, Internal.List<Internal.MobSpawnSettings$SpawnerData>>;
        getMobSpawnCosts(): Internal.Map<Internal.EntityType<any>, Internal.MobSpawnSettings$MobSpawnCost>;
        getCreatureProbability(): number;
    }
    type SpawnProperties_ = SpawnProperties;
    /**
    * @javaClass java.util.stream.Collector$Characteristics
    */
    class Collector$Characteristics extends Internal.Enum<Internal.Collector$Characteristics> {
        static valueOf(arg0: string): this;
        static values(): Internal.Collector$Characteristics[];
        static readonly "IDENTITY_FINISH" : Internal.Collector$Characteristics;
        static readonly "UNORDERED" : Internal.Collector$Characteristics;
        static readonly "CONCURRENT" : Internal.Collector$Characteristics;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Collector$Characteristics_ = "unordered" | "identity_finish" | "concurrent" | Collector$Characteristics;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$LoadFromFile
    */
    class PlayerEvent$LoadFromFile extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getPlayerFile(arg0: string): Internal.File;
        getPlayerDirectory(): Internal.File;
        getPlayerUUID(): string;
        get playerUUID(): string;
        get playerDirectory(): Internal.File;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$LoadFromFile_ = PlayerEvent$LoadFromFile;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2IntFunction
    */
    interface Int2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2IntFunction;
    }
    type Int2IntFunction_ = ((arg0: number) => number) | Int2IntFunction;
    /**
    * @javaClass javax.accessibility.AccessibleBundle
    */
    abstract class AccessibleBundle {
        toDisplayString(): string;
        toDisplayString(arg0: Internal.Locale_): string;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleBundle_ = AccessibleBundle;
    /**
    * @javaClass com.mojang.blaze3d.shaders.FogShape
    */
    class FogShape extends Internal.Enum<Internal.FogShape> {
        static valueOf(arg0: string): this;
        static values(): Internal.FogShape[];
        static readonly "CYLINDER" : Internal.FogShape;
        static readonly "SPHERE" : Internal.FogShape;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FogShape_ = "sphere" | "cylinder" | FogShape;
    /**
    * @javaClass java.lang.RuntimeException
    */
    class RuntimeException extends Internal.Exception {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RuntimeException_ = RuntimeException;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeFriendlyByteBuf
    */
    interface IForgeFriendlyByteBuf {
        readRegistryIdSafe<T>(arg0: Internal.Class_<T>): T;
        readRegistryId<T>(): T;
        readFluidStack(): Internal.FluidStack;
        writeRegistryId<T>(arg0: T): void;
        readRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry_<T>): T;
        writeFluidStack(arg0: Internal.FluidStack_): void;
        writeRegistryIdUnsafe(arg0: Internal.IForgeRegistry_<any>, arg1: ResourceLocation_): void;
        writeRegistryIdUnsafe<T>(arg0: Internal.IForgeRegistry_<T>, arg1: T): void;
    }
    type IForgeFriendlyByteBuf_ = IForgeFriendlyByteBuf;
    /**
    * @javaClass java.util.Spliterator$OfInt
    */
    interface Spliterator$OfInt extends Internal.Spliterator$OfPrimitive<number, Internal.IntConsumer, Internal.Spliterator$OfInt> {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: Internal.IntConsumer_): boolean;
        forEachRemaining(arg0: Internal.IntConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type Spliterator$OfInt_ = Spliterator$OfInt;
    /**
    * @javaClass java.awt.Component
    */
    abstract class Component implements Internal.ImageObserver, Internal.MenuContainer, Internal.Serializable {
        getHierarchyBoundsListeners(): Internal.HierarchyBoundsListener[];
        requestFocusInWindow(): boolean;
        requestFocusInWindow(arg0: Internal.FocusEvent$Cause_): boolean;
        getLocation(arg0: Internal.Point_): Internal.Point;
        getLocation(): Internal.Point;
        isOpaque(): boolean;
        paint(arg0: Internal.Graphics_): void;
        getInputMethodListeners(): Internal.InputMethodListener[];
        mouseDown(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        getInputMethodRequests(): Internal.InputMethodRequests;
        getBounds(): Internal.Rectangle;
        getBounds(arg0: Internal.Rectangle_): Internal.Rectangle;
        setPreferredSize(arg0: Internal.Dimension_): void;
        addHierarchyBoundsListener(arg0: Internal.HierarchyBoundsListener_): void;
        enable(): void;
        enable(arg0: boolean): void;
        getMinimumSize(): Internal.Dimension;
        getMousePosition(): Internal.Point;
        getAlignmentY(): number;
        action(arg0: Internal.Event_, arg1: any): boolean;
        getAlignmentX(): number;
        dispatchEvent(arg0: Internal.AWTEvent_): void;
        firePropertyChange(arg0: string, arg1: number, arg2: number): void;
        firePropertyChange(arg0: string, arg1: string, arg2: string): void;
        addMouseMotionListener(arg0: Internal.MouseMotionListener_): void;
        getComponentOrientation(): Internal.ComponentOrientation;
        setFocusable(arg0: boolean): void;
        getTreeLock(): any;
        isBackgroundSet(): boolean;
        addHierarchyListener(arg0: Internal.HierarchyListener_): void;
        reshape(arg0: number, arg1: number, arg2: number, arg3: number): void;
        postEvent(arg0: Internal.Event_): boolean;
        setEnabled(arg0: boolean): void;
        isLightweight(): boolean;
        contains(arg0: number, arg1: number): boolean;
        contains(arg0: Internal.Point_): boolean;
        size(): Internal.Dimension;
        enableInputMethods(arg0: boolean): void;
        mouseUp(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        minimumSize(): Internal.Dimension;
        isEnabled(): boolean;
        bounds(): Internal.Rectangle;
        addComponentListener(arg0: Internal.ComponentListener_): void;
        repaint(arg0: number, arg1: number, arg2: number, arg3: number): void;
        repaint(arg0: number): void;
        repaint(): void;
        repaint(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): void;
        getMouseMotionListeners(): Internal.MouseMotionListener[];
        setMinimumSize(arg0: Internal.Dimension_): void;
        transferFocus(): void;
        getListeners<T>(arg0: Internal.Class_<T>): T[];
        setName(arg0: string): void;
        removeInputMethodListener(arg0: Internal.InputMethodListener_): void;
        getMaximumSize(): Internal.Dimension;
        removeHierarchyListener(arg0: Internal.HierarchyListener_): void;
        getLocationOnScreen(): Internal.Point;
        keyUp(arg0: Internal.Event_, arg1: number): boolean;
        getWidth(): number;
        getFontMetrics(arg0: Internal.Font_): Internal.FontMetrics;
        getHeight(): number;
        paintAll(arg0: Internal.Graphics_): void;
        setFocusTraversalKeys(arg0: number, arg1: Internal.Set_<Internal.AWTKeyStroke_>): void;
        getIgnoreRepaint(): boolean;
        getBaselineResizeBehavior(): Internal.Component$BaselineResizeBehavior;
        removeMouseWheelListener(arg0: Internal.MouseWheelListener_): void;
        hasFocus(): boolean;
        isPreferredSizeSet(): boolean;
        applyComponentOrientation(arg0: Internal.ComponentOrientation_): void;
        validate(): void;
        isDoubleBuffered(): boolean;
        getParent(): Internal.Container;
        getPropertyChangeListeners(): Internal.PropertyChangeListener[];
        getPropertyChangeListeners(arg0: string): Internal.PropertyChangeListener[];
        getColorModel(): Internal.ColorModel;
        isMinimumSizeSet(): boolean;
        setComponentOrientation(arg0: Internal.ComponentOrientation_): void;
        isValid(): boolean;
        getFocusTraversalKeysEnabled(): boolean;
        setBounds(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setBounds(arg0: Internal.Rectangle_): void;
        hide(): void;
        getPreferredSize(): Internal.Dimension;
        addNotify(): void;
        disable(): void;
        addInputMethodListener(arg0: Internal.InputMethodListener_): void;
        prepareImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.ImageObserver_): boolean;
        prepareImage(arg0: Internal.Image_, arg1: Internal.ImageObserver_): boolean;
        getFocusCycleRootAncestor(): Internal.Container;
        toString(): string;
        isFocusable(): boolean;
        getName(): string;
        isFocusTraversable(): boolean;
        setMixingCutoutShape(arg0: Internal.Shape_): void;
        inside(arg0: number, arg1: number): boolean;
        nextFocus(): void;
        mouseExit(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        getFocusTraversalKeys(arg0: number): Internal.Set<Internal.AWTKeyStroke>;
        getInputContext(): Internal.InputContext;
        getHierarchyListeners(): Internal.HierarchyListener[];
        isCursorSet(): boolean;
        isShowing(): boolean;
        mouseEnter(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        mouseDrag(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        getMouseWheelListeners(): Internal.MouseWheelListener[];
        preferredSize(): Internal.Dimension;
        getMouseListeners(): Internal.MouseListener[];
        setFont(arg0: Internal.Font_): void;
        removeMouseMotionListener(arg0: Internal.MouseMotionListener_): void;
        doLayout(): void;
        setVisible(arg0: boolean): void;
        add(arg0: Internal.PopupMenu_): void;
        removeKeyListener(arg0: Internal.KeyListener_): void;
        isVisible(): boolean;
        setDropTarget(arg0: Internal.DropTarget_): void;
        removePropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        removePropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        list(arg0: Internal.PrintStream_): void;
        list(): void;
        list(arg0: Internal.PrintWriter_, arg1: number): void;
        list(arg0: Internal.PrintWriter_): void;
        list(arg0: Internal.PrintStream_, arg1: number): void;
        deliverEvent(arg0: Internal.Event_): void;
        getForeground(): Internal.Color;
        revalidate(): void;
        removeNotify(): void;
        getFont(): Internal.Font;
        setCursor(arg0: Internal.Cursor_): void;
        isDisplayable(): boolean;
        getGraphicsConfiguration(): Internal.GraphicsConfiguration;
        setLocale(arg0: Internal.Locale_): void;
        removeComponentListener(arg0: Internal.ComponentListener_): void;
        gotFocus(arg0: Internal.Event_, arg1: any): boolean;
        requestFocus(arg0: Internal.FocusEvent$Cause_): void;
        requestFocus(): void;
        locate(arg0: number, arg1: number): this;
        addFocusListener(arg0: Internal.FocusListener_): void;
        handleEvent(arg0: Internal.Event_): boolean;
        isForegroundSet(): boolean;
        getComponentAt(arg0: Internal.Point_): this;
        getComponentAt(arg0: number, arg1: number): this;
        show(): void;
        show(arg0: boolean): void;
        update(arg0: Internal.Graphics_): void;
        setMaximumSize(arg0: Internal.Dimension_): void;
        isFocusCycleRoot(arg0: Internal.Container_): boolean;
        setFocusTraversalKeysEnabled(arg0: boolean): void;
        setBackground(arg0: Internal.Color_): void;
        printAll(arg0: Internal.Graphics_): void;
        remove(arg0: Internal.MenuComponent_): void;
        imageUpdate(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
        addMouseWheelListener(arg0: Internal.MouseWheelListener_): void;
        getToolkit(): Internal.Toolkit;
        transferFocusUpCycle(): void;
        checkImage(arg0: Internal.Image_, arg1: Internal.ImageObserver_): number;
        checkImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.ImageObserver_): number;
        isFontSet(): boolean;
        setSize(arg0: Internal.Dimension_): void;
        setSize(arg0: number, arg1: number): void;
        addKeyListener(arg0: Internal.KeyListener_): void;
        setLocation(arg0: Internal.Point_): void;
        setLocation(arg0: number, arg1: number): void;
        getComponentListeners(): Internal.ComponentListener[];
        getGraphics(): Internal.Graphics;
        isMaximumSizeSet(): boolean;
        addPropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        addPropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        removeFocusListener(arg0: Internal.FocusListener_): void;
        setIgnoreRepaint(arg0: boolean): void;
        transferFocusBackward(): void;
        getCursor(): Internal.Cursor;
        move(arg0: number, arg1: number): void;
        createImage(arg0: Internal.ImageProducer_): Internal.Image;
        createImage(arg0: number, arg1: number): Internal.Image;
        mouseMove(arg0: Internal.Event_, arg1: number, arg2: number): boolean;
        areFocusTraversalKeysSet(arg0: number): boolean;
        getKeyListeners(): Internal.KeyListener[];
        setForeground(arg0: Internal.Color_): void;
        invalidate(): void;
        getAccessibleContext(): Internal.AccessibleContext;
        isFocusOwner(): boolean;
        layout(): void;
        getBaseline(arg0: number, arg1: number): number;
        getX(): number;
        getSize(): Internal.Dimension;
        getSize(arg0: Internal.Dimension_): Internal.Dimension;
        print(arg0: Internal.Graphics_): void;
        removeHierarchyBoundsListener(arg0: Internal.HierarchyBoundsListener_): void;
        getY(): number;
        getFocusListeners(): Internal.FocusListener[];
        createVolatileImage(arg0: number, arg1: number, arg2: Internal.ImageCapabilities_): Internal.VolatileImage;
        createVolatileImage(arg0: number, arg1: number): Internal.VolatileImage;
        resize(arg0: number, arg1: number): void;
        resize(arg0: Internal.Dimension_): void;
        lostFocus(arg0: Internal.Event_, arg1: any): boolean;
        location(): Internal.Point;
        removeMouseListener(arg0: Internal.MouseListener_): void;
        getDropTarget(): Internal.DropTarget;
        keyDown(arg0: Internal.Event_, arg1: number): boolean;
        getBackground(): Internal.Color;
        getLocale(): Internal.Locale;
        addMouseListener(arg0: Internal.MouseListener_): void;
        static readonly "CENTER_ALIGNMENT" : 0.5;
        static readonly "LEFT_ALIGNMENT" : 0.0;
        static readonly "BOTTOM_ALIGNMENT" : 1.0;
        static readonly "RIGHT_ALIGNMENT" : 1.0;
        static readonly "TOP_ALIGNMENT" : 0.0;
        get parent(): Internal.Container;
        get inputContext(): Internal.InputContext;
        get graphicsConfiguration(): Internal.GraphicsConfiguration;
        get dropTarget(): Internal.DropTarget;
        get foreground(): Internal.Color;
        get graphics(): Internal.Graphics;
        get baselineResizeBehavior(): Internal.Component$BaselineResizeBehavior;
        get foregroundSet(): boolean;
        get mouseWheelListeners(): Internal.MouseWheelListener[];
        get propertyChangeListeners(): Internal.PropertyChangeListener[];
        get doubleBuffered(): boolean;
        get height(): number;
        get visible(): boolean;
        get displayable(): boolean;
        get focusable(): boolean;
        get maximumSizeSet(): boolean;
        get mousePosition(): Internal.Point;
        get focusTraversalKeysEnabled(): boolean;
        get focusOwner(): boolean;
        get toolkit(): Internal.Toolkit;
        get focusCycleRootAncestor(): Internal.Container;
        get background(): Internal.Color;
        get name(): string;
        get focusTraversable(): boolean;
        get maximumSize(): Internal.Dimension;
        get hierarchyListeners(): Internal.HierarchyListener[];
        get minimumSizeSet(): boolean;
        get cursor(): Internal.Cursor;
        get accessibleContext(): Internal.AccessibleContext;
        get alignmentX(): number;
        get alignmentY(): number;
        get componentOrientation(): Internal.ComponentOrientation;
        get locale(): Internal.Locale;
        get ignoreRepaint(): boolean;
        get enabled(): boolean;
        get lightweight(): boolean;
        get valid(): boolean;
        get componentListeners(): Internal.ComponentListener[];
        get locationOnScreen(): Internal.Point;
        get colorModel(): Internal.ColorModel;
        get cursorSet(): boolean;
        get keyListeners(): Internal.KeyListener[];
        get inputMethodListeners(): Internal.InputMethodListener[];
        get opaque(): boolean;
        get mouseListeners(): Internal.MouseListener[];
        get hierarchyBoundsListeners(): Internal.HierarchyBoundsListener[];
        get inputMethodRequests(): Internal.InputMethodRequests;
        get preferredSizeSet(): boolean;
        get treeLock(): any;
        get backgroundSet(): boolean;
        get focusListeners(): Internal.FocusListener[];
        get width(): number;
        get x(): number;
        get y(): number;
        get fontSet(): boolean;
        get showing(): boolean;
        get mouseMotionListeners(): Internal.MouseMotionListener[];
        get font(): Internal.Font;
        set cursor(arg0: Internal.Cursor_);
        set visible(arg0: boolean);
        set componentOrientation(arg0: Internal.ComponentOrientation_);
        set dropTarget(arg0: Internal.DropTarget_);
        set focusable(arg0: boolean);
        set foreground(arg0: Internal.Color_);
        set locale(arg0: Internal.Locale_);
        set ignoreRepaint(arg0: boolean);
        set enabled(arg0: boolean);
        set focusTraversalKeysEnabled(arg0: boolean);
        set mixingCutoutShape(arg0: Internal.Shape_);
        set background(arg0: Internal.Color_);
        set name(arg0: string);
        set maximumSize(arg0: Internal.Dimension_);
        set font(arg0: Internal.Font_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Component_ = Component;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEvent$LivingJumpEvent
    */
    class LivingEvent$LivingJumpEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEvent$LivingJumpEvent_ = LivingEvent$LivingJumpEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2DoubleFunction
    */
    interface Reference2DoubleFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Reference2ShortFunction<K>;
        getDouble(arg0: any): number;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Reference2FloatFunction<K>;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2DoubleFunction<T>;
        removeDouble(arg0: any): number;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2DoubleFunction;
    }
    type Reference2DoubleFunction_<K> = ((arg0: any) => number) | Reference2DoubleFunction<K>;
    /**
    * @javaClass com.mojang.brigadier.RedirectModifier
    */
    interface RedirectModifier <S> {
        apply(arg0: Internal.CommandContext_<S>): Internal.Collection<S>;
    }
    type RedirectModifier_<S> = ((arg0: Internal.CommandContext<S>) => Internal.Collection<S>) | RedirectModifier<S>;
    /**
    * @javaClass java.util.concurrent.Future
    */
    interface Future <V> {
        cancel(arg0: boolean): boolean;
        isCancelled(): boolean;
        get(arg0: number, arg1: Internal.TimeUnit_): V;
        get(): V;
        isDone(): boolean;
    }
    type Future_<V> = Future<V>;
    /**
    * @javaClass java.util.function.BooleanSupplier
    */
    interface BooleanSupplier {
        getAsBoolean(): boolean;
    }
    type BooleanSupplier_ = (() => boolean) | BooleanSupplier;
    /**
    * @javaClass net.minecraft.server.packs.resources.PreparableReloadListener
    */
    interface PreparableReloadListener {
    }
    type PreparableReloadListener_ = PreparableReloadListener;
    /**
    * @javaClass io.netty.util.AttributeKey
    */
    class AttributeKey <T> extends Internal.AbstractConstant<Internal.AttributeKey<T>> {
        static valueOf<T>(arg0: string): Internal.AttributeKey<T>;
        static valueOf<T>(arg0: Internal.Class_<any>, arg1: string): Internal.AttributeKey<T>;
        static exists(arg0: string): boolean;
        static newInstance<T>(arg0: string): Internal.AttributeKey<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttributeKey_<T> = AttributeKey<T>;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$DrawScreenEvent
    */
    class ScreenEvent$DrawScreenEvent extends Internal.ScreenEvent {
        getMouseY(): number;
        getListenerList(): Internal.ListenerList;
        getMouseX(): number;
        getPartialTicks(): number;
        getPoseStack(): Internal.PoseStack;
        get mouseX(): number;
        get listenerList(): Internal.ListenerList;
        get mouseY(): number;
        get poseStack(): Internal.PoseStack;
        get partialTicks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$DrawScreenEvent_ = ScreenEvent$DrawScreenEvent;
    /**
    * @javaClass java.awt.CompositeContext
    */
    interface CompositeContext {
        compose(arg0: Internal.Raster_, arg1: Internal.Raster_, arg2: Internal.WritableRaster_): void;
        dispose(): void;
    }
    type CompositeContext_ = CompositeContext;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent$CropGrowEvent$Post
    */
    class BlockEvent$CropGrowEvent$Post extends Internal.BlockEvent$CropGrowEvent {
        getListenerList(): Internal.ListenerList;
        getOriginalState(): Internal.BlockState;
        get listenerList(): Internal.ListenerList;
        get originalState(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent$CropGrowEvent$Post_ = BlockEvent$CropGrowEvent$Post;
    /**
    * @javaClass java.util.HashMap
    */
    class HashMap <K, V> extends Internal.AbstractMap<K, V> implements Internal.Map<K, V>, Internal.Cloneable, Internal.Serializable {
        getOrDefault(arg0: any, arg1: V): V;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        computeIfAbsent(arg0: K, arg1: Internal.Function_<K, V>): V;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        isEmpty(): boolean;
        clear(): void;
        replaceAll(arg0: Internal.BiFunction_<K, V, V>): void;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any, arg1: any): boolean;
        remove(arg0: any): V;
        compute(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        computeIfPresent(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        size(): number;
        putAll(arg0: Internal.Map_<K, V>): void;
        merge(arg0: K, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        get(arg0: any): V;
        clone(): any;
        keySet(): Internal.Set<K>;
        putIfAbsent(arg0: K, arg1: V): V;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HashMap_<K, V> = HashMap<K, V>;
    /**
    * @javaClass io.netty.channel.WriteBufferWaterMark
    */
    class WriteBufferWaterMark {
        high(): number;
        low(): number;
        toString(): string;
        static readonly "DEFAULT" : Internal.WriteBufferWaterMark;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WriteBufferWaterMark_ = WriteBufferWaterMark;
    /**
    * @javaClass mezz.jei.common.runtime.JeiRuntime
    */
    class JeiRuntime implements Internal.IJeiRuntime {
        getRecipeManager(): Internal.IRecipeManager;
        getIngredientListOverlay(): Internal.IIngredientListOverlay;
        getBookmarkOverlay(): Internal.IBookmarkOverlay;
        getRecipesGui(): Internal.IRecipesGui;
        getJeiHelpers(): Internal.IJeiHelpers;
        getIngredientFilter(): Internal.IIngredientFilter;
        getIngredientVisibility(): Internal.IIngredientVisibility;
        createTypedIngredient<T>(arg0: Internal.IIngredientType_<T>, arg1: T): Internal.ITypedIngredient<T>;
        getIngredientManager(): Internal.IIngredientManager;
        createFocus<T>(arg0: Internal.RecipeIngredientRole_, arg1: Internal.IIngredientType_<T>, arg2: T): Internal.IFocus<T>;
        get jeiHelpers(): Internal.IJeiHelpers;
        get ingredientFilter(): Internal.IIngredientFilter;
        get ingredientVisibility(): Internal.IIngredientVisibility;
        get recipeManager(): Internal.IRecipeManager;
        get bookmarkOverlay(): Internal.IBookmarkOverlay;
        get recipesGui(): Internal.IRecipesGui;
        get ingredientListOverlay(): Internal.IIngredientListOverlay;
        get ingredientManager(): Internal.IIngredientManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JeiRuntime_ = JeiRuntime;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.ServerLevelJS
    */
    class ServerLevelJS extends Internal.LevelJS {
        getServer(): Internal.ServerJS;
        getSeed(): number;
        getPlayerData(player: Internal.Player_): Internal.ServerPlayerDataJS;
        getSide(): Internal.ScriptType;
        getEntities(): Internal.EntityArrayList;
        getEntities(filter: string): Internal.EntityArrayList;
        toString(): string;
        setLocalTime(time: number): void;
        getMinecraftLevel(): Internal.ServerLevel;
        setTime(time: number): void;
        readonly "persistentData" : Internal.CompoundTag;
        get server(): Internal.ServerJS;
        get side(): Internal.ScriptType;
        get seed(): number;
        get entities(): Internal.EntityArrayList;
        get minecraftLevel(): Internal.ServerLevel;
        set localTime(time: number);
        set time(time: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerLevelJS_ = ServerLevelJS;
    /**
    * @javaClass net.minecraft.world.effect.MobEffectCategory
    */
    class MobEffectCategory extends Internal.Enum<Internal.MobEffectCategory> {
        static valueOf(arg0: string): this;
        static values(): Internal.MobEffectCategory[];
        static readonly "HARMFUL" : Internal.MobEffectCategory;
        static readonly "BENEFICIAL" : Internal.MobEffectCategory;
        static readonly "NEUTRAL" : Internal.MobEffectCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobEffectCategory_ = "beneficial" | "neutral" | "harmful" | MobEffectCategory;
    /**
    * @javaClass com.mojang.serialization.Decoder$Terminal
    */
    interface Decoder$Terminal <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<A>;
    }
    type Decoder$Terminal_<A> = ((arg0: Internal.DynamicOps<T>, arg1: any) => Internal.DataResult<A>) | Decoder$Terminal<A>;
    /**
    * @javaClass net.minecraftforge.client.event.ClientChatEvent
    */
    class ClientChatEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getMessage(): string;
        isCancelable(): boolean;
        getOriginalMessage(): string;
        setMessage(arg0: string): void;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get message(): string;
        get originalMessage(): string;
        set message(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientChatEvent_ = ClientChatEvent;
    /**
    * @javaClass io.netty.channel.ChannelProgressiveFuture
    */
    interface ChannelProgressiveFuture extends Internal.ChannelFuture, Internal.ProgressiveFuture<void> {
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        syncUninterruptibly(): this;
        await(): this;
        awaitUninterruptibly(): this;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        sync(): this;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
    }
    type ChannelProgressiveFuture_ = ChannelProgressiveFuture;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerFlyableFallEvent
    */
    class PlayerFlyableFallEvent extends Internal.PlayerEvent {
        getDistance(): number;
        getListenerList(): Internal.ListenerList;
        setDistance(arg0: number): void;
        setMultiplier(arg0: number): void;
        getMultiplier(): number;
        get distance(): number;
        get listenerList(): Internal.ListenerList;
        get multiplier(): number;
        set distance(arg0: number);
        set multiplier(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerFlyableFallEvent_ = PlayerFlyableFallEvent;
    /**
    * @javaClass java.lang.constant.Constable
    */
    interface Constable {
        describeConstable(): Internal.Optional<Internal.ConstantDesc>;
    }
    type Constable_ = (() => Internal.Optional<Internal.ConstantDesc>) | Constable;
    /**
    * @javaClass com.mojang.brigadier.arguments.ArgumentType
    */
    interface ArgumentType <T> {
        listSuggestions<S>(arg0: Internal.CommandContext_<S>, arg1: Internal.SuggestionsBuilder_): Internal.CompletableFuture<Internal.Suggestions>;
        getExamples(): Internal.Collection<string>;
        parse(arg0: Internal.StringReader_): T;
    }
    type ArgumentType_<T> = ((arg0: Internal.StringReader) => T) | ArgumentType<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.ModifyRecipeResultCallback
    */
    interface ModifyRecipeResultCallback {
        modify(arg0: Internal.ModifyRecipeCraftingGrid_, arg1: Internal.ItemStackJS_): Internal.ItemStackJS;
    }
    type ModifyRecipeResultCallback_ = ((arg0: Internal.ModifyRecipeCraftingGrid, arg1: Internal.ItemStackJS) => Internal.ItemStackJS) | ModifyRecipeResultCallback;
    /**
    * @javaClass net.minecraft.world.level.portal.PortalInfo
    */
    class PortalInfo {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PortalInfo_ = PortalInfo;
    /**
    * @javaClass com.google.common.collect.ImmutableSet$Builder
    */
    class ImmutableSet$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: E): Internal.ImmutableSet$Builder<E>;
        add(... arg0: E[]): Internal.ImmutableSet$Builder<E>;
        build(): Internal.ImmutableSet<E>;
        addAll(arg0: Internal.Iterator_<E>): Internal.ImmutableSet$Builder<E>;
        addAll(arg0: Internal.Iterable_<E>): Internal.ImmutableSet$Builder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableSet$Builder_<E> = ImmutableSet$Builder<E>;
    /**
    * @javaClass java.nio.MappedByteBuffer
    */
    abstract class MappedByteBuffer extends Internal.ByteBuffer {
        compact(): this;
        clear(): this;
        duplicate(): this;
        isLoaded(): boolean;
        rewind(): this;
        load(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        limit(arg0: number): this;
        reset(): this;
        force(): this;
        force(arg0: number, arg1: number): this;
        position(arg0: number): this;
        flip(): this;
        mark(): this;
        get loaded(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MappedByteBuffer_ = MappedByteBuffer;
    /**
    * @javaClass com.google.gson.JsonPrimitive
    */
    class JsonPrimitive extends Internal.JsonElement {
        getAsFloat(): number;
        getAsBigInteger(): Internal.BigInteger;
        getAsByte(): number;
        getAsBigDecimal(): Internal.BigDecimal;
        getAsNumber(): Internal.Number;
        getAsCharacter(): string;
        getAsString(): string;
        getAsDouble(): number;
        getAsInt(): number;
        deepCopy(): this;
        isBoolean(): boolean;
        getAsLong(): number;
        isNumber(): boolean;
        getAsBoolean(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        isString(): boolean;
        getAsShort(): number;
        get asByte(): number;
        get asBigInteger(): Internal.BigInteger;
        get asCharacter(): string;
        get string(): boolean;
        get asNumber(): Internal.Number;
        get asBigDecimal(): Internal.BigDecimal;
        get asFloat(): number;
        get asLong(): number;
        get asInt(): number;
        get number(): boolean;
        get boolean(): boolean;
        get asShort(): number;
        get asDouble(): number;
        get asString(): string;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonPrimitive_ = JsonPrimitive;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.Copyable
    */
    interface Copyable {
        copy(): this;
    }
    type Copyable_ = (() => Internal.Copyable) | Copyable;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Start
    */
    class LivingEntityUseItemEvent$Start extends Internal.LivingEntityUseItemEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityUseItemEvent$Start_ = LivingEntityUseItemEvent$Start;
    /**
    * @javaClass java.util.function.BiConsumer
    */
    interface BiConsumer <T, U> {
        andThen(arg0: Internal.BiConsumer_<T, U>): Internal.BiConsumer<T, U>;
        accept(arg0: T, arg1: U): void;
    }
    type BiConsumer_<T, U> = ((arg0: T, arg1: U) => void) | BiConsumer<T, U>;
    /**
    * @javaClass cpw.mods.jarhandling.JarMetadata
    */
    interface JarMetadata {
        name(): string;
        from(arg0: Internal.SecureJar_, ... arg1: Internal.Path_[]): this;
        fromFileName(arg0: Internal.Path_, arg1: Internal.Set_<string>, arg2: Internal.List_<Internal.SecureJar$Provider_>): Internal.SimpleJarMetadata;
        descriptor(): Internal.ModuleDescriptor;
        version(): string;
    }
    type JarMetadata_ = JarMetadata;
    /**
    * @javaClass com.mojang.serialization.MapEncoder
    */
    interface MapEncoder <A> extends Internal.Keyable {
        encode<T>(arg0: A, arg1: Internal.DynamicOps_<T>, arg2: Internal.RecordBuilder_<T>): Internal.RecordBuilder<T>;
        flatComap<B>(arg0: Internal.Function_<B, Internal.DataResult_<A>>): Internal.MapEncoder<B>;
        compressedBuilder<T>(arg0: Internal.DynamicOps_<T>): Internal.RecordBuilder<T>;
        comap<B>(arg0: Internal.Function_<B, A>): Internal.MapEncoder<B>;
        makeCompressedBuilder<T>(arg0: Internal.DynamicOps_<T>, arg1: Internal.KeyCompressor_<T>): Internal.RecordBuilder<T>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.MapEncoder<A>;
        encoder(): Internal.Encoder<A>;
        compressor<T>(arg0: Internal.DynamicOps_<T>): Internal.KeyCompressor<T>;
    }
    type MapEncoder_<A> = MapEncoder<A>;
    /**
    * @javaClass org.spongepowered.asm.mixin.injection.callback.CallbackInfo
    */
    class CallbackInfo implements Internal.Cancellable {
        cancel(): void;
        static getCallInfoClassName(arg0: org.objectweb.asm.Type_): string;
        isCancelled(): boolean;
        isCancellable(): boolean;
        getId(): string;
        toString(): string;
        get cancelled(): boolean;
        get id(): string;
        get cancellable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CallbackInfo_ = CallbackInfo;
    /**
    * @javaClass net.minecraft.nbt.Tag
    */
    interface Tag {
        toString(): string;
    }
    type Tag_ = (() => string) | Tag;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.ScheduledEvent
    */
    class ScheduledEvent {
        reschedule(): void;
        reschedule(timer: number): this;
        getServer(): Internal.ServerJS;
        getEndTime(): number;
        isUsingTicks(): boolean;
        getTimer(): number;
        getTimerDuration(): number;
        getData(): any;
        get server(): Internal.ServerJS;
        get timer(): number;
        get timerDuration(): number;
        get data(): any;
        get usingTicks(): boolean;
        get endTime(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScheduledEvent_ = ScheduledEvent;
    /**
    * @javaClass java.awt.image.Raster
    */
    class Raster {
        createChild(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number[]): this;
        getSampleFloat(arg0: number, arg1: number, arg2: number): number;
        createTranslatedChild(arg0: number, arg1: number): this;
        getNumDataElements(): number;
        getNumBands(): number;
        getWidth(): number;
        static createWritableRaster(arg0: Internal.SampleModel_, arg1: Internal.Point_): Internal.WritableRaster;
        static createWritableRaster(arg0: Internal.SampleModel_, arg1: Internal.DataBuffer_, arg2: Internal.Point_): Internal.WritableRaster;
        getBounds(): Internal.Rectangle;
        getSampleModel(): Internal.SampleModel;
        getHeight(): number;
        static createRaster(arg0: Internal.SampleModel_, arg1: Internal.DataBuffer_, arg2: Internal.Point_): this;
        getTransferType(): number;
        getPixels(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[]): number[];
        getSampleDouble(arg0: number, arg1: number, arg2: number): number;
        getParent(): this;
        static createBandedRaster(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: number[], arg6: Internal.Point_): Internal.WritableRaster;
        static createBandedRaster(arg0: Internal.DataBuffer_, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: number[], arg6: Internal.Point_): Internal.WritableRaster;
        static createBandedRaster(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.Point_): Internal.WritableRaster;
        getDataBuffer(): Internal.DataBuffer;
        getSamples(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): number[];
        getPixel(arg0: number, arg1: number, arg2: number[]): number[];
        createCompatibleWritableRaster(arg0: number, arg1: number, arg2: number, arg3: number): Internal.WritableRaster;
        createCompatibleWritableRaster(): Internal.WritableRaster;
        createCompatibleWritableRaster(arg0: number, arg1: number): Internal.WritableRaster;
        createCompatibleWritableRaster(arg0: Internal.Rectangle_): Internal.WritableRaster;
        static createPackedRaster(arg0: Internal.DataBuffer_, arg1: number, arg2: number, arg3: number, arg4: Internal.Point_): Internal.WritableRaster;
        static createPackedRaster(arg0: Internal.DataBuffer_, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: Internal.Point_): Internal.WritableRaster;
        static createPackedRaster(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: Internal.Point_): Internal.WritableRaster;
        static createPackedRaster(arg0: number, arg1: number, arg2: number, arg3: number[], arg4: Internal.Point_): Internal.WritableRaster;
        getSampleModelTranslateX(): number;
        getSampleModelTranslateY(): number;
        getDataElements(arg0: number, arg1: number, arg2: number, arg3: number, arg4: any): any;
        getDataElements(arg0: number, arg1: number, arg2: any): any;
        static createInterleavedRaster(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.Point_): Internal.WritableRaster;
        static createInterleavedRaster(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[], arg6: Internal.Point_): Internal.WritableRaster;
        static createInterleavedRaster(arg0: Internal.DataBuffer_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[], arg6: Internal.Point_): Internal.WritableRaster;
        getMinX(): number;
        getSample(arg0: number, arg1: number, arg2: number): number;
        getMinY(): number;
        get parent(): this;
        get dataBuffer(): Internal.DataBuffer;
        get numDataElements(): number;
        get numBands(): number;
        get minY(): number;
        get minX(): number;
        get width(): number;
        get bounds(): Internal.Rectangle;
        get transferType(): number;
        get sampleModelTranslateX(): number;
        get sampleModel(): Internal.SampleModel;
        get height(): number;
        get sampleModelTranslateY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Raster_ = Raster;
    /**
    * @javaClass dev.latvian.mods.rhino.util.wrap.TypeWrapperFactory
    */
    interface TypeWrapperFactory <T> {
        wrap(arg0: any): T;
    }
    type TypeWrapperFactory_<T> = ((arg0: any) => T) | TypeWrapperFactory<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.LevelJS
    */
    abstract class LevelJS implements Internal.WithAttachedData {
        getPlayer(entity: Internal.Entity_): Internal.PlayerJS<any>;
        getEntitiesWithin(aabb: Internal.AABB_): Internal.EntityArrayList;
        getPlayerData(arg0: Internal.Player_): Internal.PlayerDataJS<any, any>;
        spawnFireworks(x: number, y: number, z: number, f: Internal.FireworksJS_): void;
        getTime(): number;
        getSide(): Internal.ScriptType;
        getGameRules(): Internal.GameRulesJS;
        setRainStrength(strength: number): void;
        getDimension(): ResourceLocation;
        isDaytime(): boolean;
        createEntityList(entities: Internal.Collection_<Internal.Entity_>): Internal.EntityArrayList;
        getPlayers(): Internal.EntityArrayList;
        getData(): Internal.AttachedData;
        getMinecraftLevel(): Internal.Level;
        getServer(): Internal.ServerJS;
        getLivingEntity(entity: Internal.Entity_): Internal.LivingEntityJS;
        getBlock(x: number, y: number, z: number): Internal.BlockContainerJS;
        getBlock(pos: BlockPos_): Internal.BlockContainerJS;
        getBlock(blockEntity: Internal.BlockEntity_): Internal.BlockContainerJS;
        isOverworld(): boolean;
        createExplosion(x: number, y: number, z: number): Internal.ExplosionJS;
        getEntity(e: Internal.Entity_): Internal.EntityJS;
        createEntity(id: ResourceLocation_): Internal.EntityJS;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean, player: Internal.EntityJS_): void;
        spawnLightning(x: number, y: number, z: number, effectOnly: boolean): void;
        getLocalTime(): number;
        isThundering(): boolean;
        getEntities(): Internal.EntityArrayList;
        isRaining(): boolean;
        readonly "minecraftLevel" : Internal.Level;
        get server(): Internal.ServerJS;
        get side(): Internal.ScriptType;
        get data(): Internal.AttachedData;
        get players(): Internal.EntityArrayList;
        get raining(): boolean;
        get thundering(): boolean;
        get overworld(): boolean;
        get gameRules(): Internal.GameRulesJS;
        get localTime(): number;
        get entities(): Internal.EntityArrayList;
        get time(): number;
        get dimension(): ResourceLocation;
        get daytime(): boolean;
        set rainStrength(strength: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LevelJS_ = LevelJS;
    /**
    * @javaClass mezz.jei.api.helpers.IPlatformFluidHelper
    */
    interface IPlatformFluidHelper <T> {
        getFluidIngredientType(): Internal.IIngredientTypeWithSubtypes<Internal.Fluid, T>;
        bucketVolume(): number;
        create(arg0: Internal.Fluid_, arg1: number): T;
        create(arg0: Internal.Fluid_, arg1: number, arg2: Internal.CompoundTag_): T;
    }
    type IPlatformFluidHelper_<T> = IPlatformFluidHelper<T>;
    /**
    * @javaClass javax.accessibility.AccessibleRole
    */
    class AccessibleRole extends Internal.AccessibleBundle {
        static readonly "DATE_EDITOR" : Internal.AccessibleRole;
        static readonly "PARAGRAPH" : Internal.AccessibleRole;
        static readonly "TEXT" : Internal.AccessibleRole;
        static readonly "ALERT" : Internal.AccessibleRole;
        static readonly "FONT_CHOOSER" : Internal.AccessibleRole;
        static readonly "GROUP_BOX" : Internal.AccessibleRole;
        static readonly "ROOT_PANE" : Internal.AccessibleRole;
        static readonly "TABLE" : Internal.AccessibleRole;
        static readonly "COMBO_BOX" : Internal.AccessibleRole;
        static readonly "SLIDER" : Internal.AccessibleRole;
        static readonly "PROGRESS_MONITOR" : Internal.AccessibleRole;
        static readonly "HYPERLINK" : Internal.AccessibleRole;
        static readonly "LABEL" : Internal.AccessibleRole;
        static readonly "PROGRESS_BAR" : Internal.AccessibleRole;
        static readonly "DESKTOP_ICON" : Internal.AccessibleRole;
        static readonly "SEPARATOR" : Internal.AccessibleRole;
        static readonly "MENU_ITEM" : Internal.AccessibleRole;
        static readonly "SCROLL_PANE" : Internal.AccessibleRole;
        static readonly "AWT_COMPONENT" : Internal.AccessibleRole;
        static readonly "MENU_BAR" : Internal.AccessibleRole;
        static readonly "PUSH_BUTTON" : Internal.AccessibleRole;
        static readonly "PAGE_TAB" : Internal.AccessibleRole;
        static readonly "CHECK_BOX" : Internal.AccessibleRole;
        static readonly "TREE" : Internal.AccessibleRole;
        static readonly "PASSWORD_TEXT" : Internal.AccessibleRole;
        static readonly "LIST" : Internal.AccessibleRole;
        static readonly "HTML_CONTAINER" : Internal.AccessibleRole;
        static readonly "OPTION_PANE" : Internal.AccessibleRole;
        static readonly "DESKTOP_PANE" : Internal.AccessibleRole;
        static readonly "HEADER" : Internal.AccessibleRole;
        static readonly "FRAME" : Internal.AccessibleRole;
        static readonly "TOOL_TIP" : Internal.AccessibleRole;
        static readonly "ROW_HEADER" : Internal.AccessibleRole;
        static readonly "SPIN_BOX" : Internal.AccessibleRole;
        static readonly "CANVAS" : Internal.AccessibleRole;
        static readonly "TOOL_BAR" : Internal.AccessibleRole;
        static readonly "INTERNAL_FRAME" : Internal.AccessibleRole;
        static readonly "LAYERED_PANE" : Internal.AccessibleRole;
        static readonly "PAGE_TAB_LIST" : Internal.AccessibleRole;
        static readonly "COLUMN_HEADER" : Internal.AccessibleRole;
        static readonly "ICON" : Internal.AccessibleRole;
        static readonly "COLOR_CHOOSER" : Internal.AccessibleRole;
        static readonly "VIEWPORT" : Internal.AccessibleRole;
        static readonly "PANEL" : Internal.AccessibleRole;
        static readonly "DIRECTORY_PANE" : Internal.AccessibleRole;
        static readonly "STATUS_BAR" : Internal.AccessibleRole;
        static readonly "DIALOG" : Internal.AccessibleRole;
        static readonly "SPLIT_PANE" : Internal.AccessibleRole;
        static readonly "GLASS_PANE" : Internal.AccessibleRole;
        static readonly "SWING_COMPONENT" : Internal.AccessibleRole;
        static readonly "FOOTER" : Internal.AccessibleRole;
        static readonly "EDITBAR" : Internal.AccessibleRole;
        static readonly "FILLER" : Internal.AccessibleRole;
        static readonly "WINDOW" : Internal.AccessibleRole;
        static readonly "FILE_CHOOSER" : Internal.AccessibleRole;
        static readonly "POPUP_MENU" : Internal.AccessibleRole;
        static readonly "SCROLL_BAR" : Internal.AccessibleRole;
        static readonly "LIST_ITEM" : Internal.AccessibleRole;
        static readonly "RADIO_BUTTON" : Internal.AccessibleRole;
        static readonly "MENU" : Internal.AccessibleRole;
        static readonly "UNKNOWN" : Internal.AccessibleRole;
        static readonly "RULER" : Internal.AccessibleRole;
        static readonly "TOGGLE_BUTTON" : Internal.AccessibleRole;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleRole_ = AccessibleRole;
    /**
    * @javaClass dev.latvian.mods.kubejs.fluid.FluidBucketItemBuilder
    */
    class FluidBucketItemBuilder extends Internal.ItemBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        clientRegistry(minecraft: Internal.Supplier_<Internal.Minecraft_>): void;
        createObject(): Internal.BucketItem;
        readonly "fluidBuilder" : Internal.FluidBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidBucketItemBuilder_ = FluidBucketItemBuilder;
    /**
    * @javaClass net.minecraft.world.entity.ai.village.poi.PoiType
    */
    class PoiType extends Internal.ForgeRegistryEntry<Internal.PoiType> {
        getBlockStates(): Internal.ImmutableSet<Internal.BlockState>;
        toString(): string;
        get blockStates(): Internal.ImmutableSet<Internal.BlockState>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PoiType_ = Special.PoiType | PoiType;
    /**
    * @javaClass net.minecraft.world.level.biome.MobSpawnSettings$SpawnerData
    */
    class MobSpawnSettings$SpawnerData extends Internal.WeightedEntry$IntrusiveBase {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobSpawnSettings$SpawnerData_ = MobSpawnSettings$SpawnerData;
    /**
    * @javaClass java.beans.PropertyChangeListener
    */
    interface PropertyChangeListener extends Internal.EventListener {
        propertyChange(arg0: Internal.PropertyChangeEvent_): void;
    }
    type PropertyChangeListener_ = ((arg0: Internal.PropertyChangeEvent) => void) | PropertyChangeListener;
    /**
    * @javaClass net.minecraft.world.entity.ai.attributes.Attribute
    */
    class Attribute extends Internal.ForgeRegistryEntry<Internal.Attribute> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Attribute_ = Special.Attribute | Attribute;
    /**
    * @javaClass dev.latvian.mods.itemfilters.item.InventoryFilterItem$FilterSlot
    */
    class InventoryFilterItem$FilterSlot {
        readonly "x" : number;
        readonly "y" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InventoryFilterItem$FilterSlot_ = InventoryFilterItem$FilterSlot;
    /**
    * @javaClass mezz.jei.api.ingredients.IIngredientTypeWithSubtypes
    */
    interface IIngredientTypeWithSubtypes <B, I> extends Internal.IIngredientType<I> {
        getIngredientBaseClass(): typeof B;
        getIngredientClass(): typeof I;
        getBase(arg0: I): B;
    }
    type IIngredientTypeWithSubtypes_<B, I> = IIngredientTypeWithSubtypes<B, I>;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.properties.AddOreProperties
    */
    class AddOreProperties {
        belowTop(y: number): Internal.VerticalAnchor;
        chance(c: number): this;
        addTarget(ruleTest: Internal.RuleTest_, targetState: BlockStatePredicate_): void;
        top(): Internal.VerticalAnchor;
        size(s: number): this;
        uniformHeight(absolute: Internal.VerticalAnchor_, absolute1: Internal.VerticalAnchor_): this;
        uniformHeight(min: number, max: number): this;
        bottom(): Internal.VerticalAnchor;
        count(min: number, max: number): this;
        count(c: Internal.IntProvider_): this;
        count(c: number): this;
        squared(): this;
        triangleHeight(absolute: Internal.VerticalAnchor_, absolute1: Internal.VerticalAnchor_): this;
        triangleHeight(min: number, max: number): this;
        aboveBottom(y: number): Internal.VerticalAnchor;
        "noSurface" : number;
        "biomes" : ((arg0: Internal.BiomeModifications$BiomeContext) => boolean);
        "retrogen" : number;
        "id" : ResourceLocation;
        "targets" : Internal.List<Internal.OreConfiguration$TargetBlockState>;
        "worldgenLayer" : DecorationGenerationStep;
        "height" : Internal.HeightRangePlacement;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AddOreProperties_ = AddOreProperties;
    /**
    * @javaClass java.nio.channels.SeekableByteChannel
    */
    interface SeekableByteChannel extends Internal.ByteChannel {
        read(arg0: Internal.ByteBuffer_): number;
        truncate(arg0: number): this;
        size(): number;
        position(): number;
        position(arg0: number): this;
        write(arg0: Internal.ByteBuffer_): number;
    }
    type SeekableByteChannel_ = SeekableByteChannel;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.properties.AddSpawnProperties
    */
    class AddSpawnProperties {
        setCategory(s: string): void;
        setEntity(s: string): void;
        "biomes" : ((arg0: Internal.BiomeModifications$BiomeContext) => boolean);
        "weight" : number;
        "_category" : Internal.MobCategory;
        "minCount" : number;
        "maxCount" : number;
        "_entity" : Internal.EntityType<any>;
        set category(s: string);
        set entity(s: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AddSpawnProperties_ = AddSpawnProperties;
    /**
    * @javaClass net.minecraft.world.item.DispensibleContainerItem
    */
    interface DispensibleContainerItem {
    }
    type DispensibleContainerItem_ = DispensibleContainerItem;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.WithAttachedData
    */
    interface WithAttachedData {
        getData(): Internal.AttachedData;
    }
    type WithAttachedData_ = (() => Internal.AttachedData) | WithAttachedData;
    /**
    * @javaClass com.mojang.datafixers.kinds.App
    */
    interface App <F, A> {
    }
    type App_<F, A> = App<F, A>;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.events.SpecialFluidHandlerEvent
    */
    class SpecialFluidHandlerEvent extends Internal.EventJS {
        addFluidHandler(fluidStack: any, handler: Internal.BiConsumer_<Internal.OpenEndedPipe_, Internal.FluidStackJS_>): void;
        static readonly "ID" : "create.pipe.fluid_effect";
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SpecialFluidHandlerEvent_ = SpecialFluidHandlerEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.player.SleepingLocationCheckEvent
    */
    class SleepingLocationCheckEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        getSleepingLocation(): BlockPos;
        get sleepingLocation(): BlockPos;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SleepingLocationCheckEvent_ = SleepingLocationCheckEvent;
    /**
    * @javaClass net.minecraft.world.item.Item$Properties
    */
    class Item$Properties {
        setNoRepair(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Item$Properties_ = Item$Properties;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IRecipeSlotView
    */
    interface IRecipeSlotView {
        getDisplayedIngredient(): Internal.Optional<Internal.ITypedIngredient<any>>;
        getDisplayedIngredient<T>(arg0: Internal.IIngredientType_<T>): Internal.Optional<T>;
        getDisplayedItemStack(): Internal.Optional<Internal.ItemStack>;
        getItemStacks(): Internal.Stream<Internal.ItemStack>;
        getRole(): Internal.RecipeIngredientRole;
        getAllIngredients(): Internal.Stream<Internal.ITypedIngredient<any>>;
        isEmpty(): boolean;
        getSlotName(): Internal.Optional<string>;
        drawHighlight(arg0: Internal.PoseStack_, arg1: number): void;
        getIngredients<T>(arg0: Internal.IIngredientType_<T>): Internal.Stream<T>;
    }
    type IRecipeSlotView_ = IRecipeSlotView;
    /**
    * @javaClass io.netty.channel.SimpleChannelInboundHandler
    */
    abstract class SimpleChannelInboundHandler <I> extends Internal.ChannelInboundHandlerAdapter {
        channelRead(arg0: Internal.ChannelHandlerContext_, arg1: any): void;
        acceptInboundMessage(arg0: any): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimpleChannelInboundHandler_<I> = SimpleChannelInboundHandler<I>;
    /**
    * @javaClass java.util.LinkedHashMap
    */
    class LinkedHashMap <K, V> extends Internal.HashMap<K, V> implements Internal.Map<K, V> {
        getOrDefault(arg0: any, arg1: V): V;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        values(): Internal.Collection<V>;
        get(arg0: any): V;
        clear(): void;
        keySet(): Internal.Set<K>;
        replaceAll(arg0: Internal.BiFunction_<K, V, V>): void;
        containsValue(arg0: any): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LinkedHashMap_<K, V> = LinkedHashMap<K, V>;
    /**
    * @javaClass javax.swing.text.AttributeSet
    */
    interface AttributeSet {
        getResolveParent(): this;
        getAttribute(arg0: any): any;
        containsAttributes(arg0: Internal.AttributeSet_): boolean;
        getAttributeNames(): Internal.Enumeration<any>;
        isEqual(arg0: Internal.AttributeSet_): boolean;
        isDefined(arg0: any): boolean;
        containsAttribute(arg0: any, arg1: any): boolean;
        copyAttributes(): this;
        getAttributeCount(): number;
    }
    type AttributeSet_ = AttributeSet;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongSet
    */
    interface LongSet extends Internal.LongCollection, Internal.Set<number> {
        add(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.LongIterator;
        spliterator(): Internal.LongSpliterator;
        of(arg0: number, arg1: number): this;
        of(): this;
        of(... arg0: number[]): this;
        of(arg0: number): this;
        of(arg0: number, arg1: number, arg2: number): this;
        rem(arg0: number): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
    }
    type LongSet_ = LongSet;
    /**
    * @javaClass net.minecraftforge.registries.IRegistryDelegate
    */
    interface IRegistryDelegate <T> extends Internal.Supplier<T> {
        get(): T;
        name(): ResourceLocation;
        type(): typeof T;
    }
    type IRegistryDelegate_<T> = IRegistryDelegate<T>;
    /**
    * @javaClass net.minecraftforge.eventbus.ListenerList
    */
    class ListenerList {
        getListeners(arg0: number): Internal.IEventListener[];
        static clearBusID(arg0: number): void;
        unregister(arg0: number, arg1: Internal.IEventListener_): void;
        static unregisterAll(arg0: number, arg1: Internal.IEventListener_): void;
        register(arg0: number, arg1: Internal.EventPriority_, arg2: Internal.IEventListener_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ListenerList_ = ListenerList;
    /**
    * @javaClass mezz.jei.api.gui.ITickTimer
    */
    interface ITickTimer {
        getValue(): number;
        getMaxValue(): number;
    }
    type ITickTimer_ = ITickTimer;
    /**
    * @javaClass java.awt.image.SampleModel
    */
    abstract class SampleModel {
        setSamples(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[], arg6: Internal.DataBuffer_): void;
        createSubsetSampleModel(arg0: number[]): this;
        setPixel(arg0: number, arg1: number, arg2: number[], arg3: Internal.DataBuffer_): void;
        setPixels(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: Internal.DataBuffer_): void;
        getSamples(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[], arg6: Internal.DataBuffer_): number[];
        getDataType(): number;
        getSampleFloat(arg0: number, arg1: number, arg2: number, arg3: Internal.DataBuffer_): number;
        getSampleSize(arg0: number): number;
        getSampleSize(): number[];
        getNumDataElements(): number;
        getPixel(arg0: number, arg1: number, arg2: number[], arg3: Internal.DataBuffer_): number[];
        getNumBands(): number;
        getWidth(): number;
        getHeight(): number;
        getTransferType(): number;
        createDataBuffer(): Internal.DataBuffer;
        createCompatibleSampleModel(arg0: number, arg1: number): this;
        getPixels(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: Internal.DataBuffer_): number[];
        getDataElements(arg0: number, arg1: number, arg2: any, arg3: Internal.DataBuffer_): any;
        getDataElements(arg0: number, arg1: number, arg2: number, arg3: number, arg4: any, arg5: Internal.DataBuffer_): any;
        setDataElements(arg0: number, arg1: number, arg2: any, arg3: Internal.DataBuffer_): void;
        setDataElements(arg0: number, arg1: number, arg2: number, arg3: number, arg4: any, arg5: Internal.DataBuffer_): void;
        getSample(arg0: number, arg1: number, arg2: number, arg3: Internal.DataBuffer_): number;
        getSampleDouble(arg0: number, arg1: number, arg2: number, arg3: Internal.DataBuffer_): number;
        setSample(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.DataBuffer_): void;
        get numDataElements(): number;
        get numBands(): number;
        get dataType(): number;
        get width(): number;
        get transferType(): number;
        get sampleSize(): number[];
        get height(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SampleModel_ = SampleModel;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2LongFunction
    */
    interface Float2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Float2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Float2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2LongFunction;
    }
    type Float2LongFunction_ = ((arg0: number) => number) | Float2LongFunction;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2ReferenceFunction
    */
    interface Char2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<string, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: string, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: string, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: string): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: string): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Char2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: string): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Char2ReferenceFunction_<V> = ((arg0: string) => V) | Char2ReferenceFunction<V>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.SwordItemBuilder
    */
    class SwordItemBuilder extends Internal.HandheldItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SwordItemBuilder_ = SwordItemBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.AbstractLongSet
    */
    abstract class AbstractLongSet extends Internal.AbstractLongCollection implements Internal.Cloneable, Internal.LongSet {
        iterator(): Internal.LongIterator;
        hashCode(): number;
        equals(arg0: any): boolean;
        rem(arg0: number): boolean;
        remove(arg0: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractLongSet_ = AbstractLongSet;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingDamageEvent
    */
    class LivingDamageEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getSource(): Internal.DamageSource;
        isCancelable(): boolean;
        setAmount(arg0: number): void;
        getAmount(): number;
        get amount(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get source(): Internal.DamageSource;
        set amount(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingDamageEvent_ = LivingDamageEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.FunctionContainer
    */
    interface FunctionContainer {
        lootingEnchant(count: Internal.NumberProvider_, limit: number): this;
        damage(damage: Internal.NumberProvider_): this;
        enchantWithLevels(levels: Internal.NumberProvider_, treasure: boolean): this;
        nbt(tag: Internal.CompoundTag_): this;
        lootTable(table: ResourceLocation_, seed: number): this;
        copyName(source: Internal.CopyNameFunction$NameSource_): this;
        addFunction(arg0: Internal.JsonObject_): this;
        count(count: Internal.NumberProvider_): this;
        name(name: net.minecraft.network.chat.Component_, entity: Internal.LootContext$EntityTarget_): this;
        name(name: net.minecraft.network.chat.Component_): this;
        furnaceSmelt(): this;
        addConditionalFunction(func: Internal.Consumer_<Internal.ConditionalFunction_>): this;
        enchantRandomly(enchantments: ResourceLocation_[]): this;
    }
    type FunctionContainer_ = ((arg0: Internal.JsonObject) => Internal.FunctionContainer) | FunctionContainer;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingSpawnEvent
    */
    class LivingSpawnEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.LevelAccessor;
        getX(): number;
        getY(): number;
        getZ(): number;
        get world(): Internal.LevelAccessor;
        get listenerList(): Internal.ListenerList;
        get x(): number;
        get y(): number;
        get z(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingSpawnEvent_ = LivingSpawnEvent;
    /**
    * @javaClass com.mojang.brigadier.context.CommandContextBuilder
    */
    class CommandContextBuilder <S> {
        withChild(arg0: Internal.CommandContextBuilder_<S>): Internal.CommandContextBuilder<S>;
        withNode(arg0: Internal.CommandNode_<S>, arg1: Internal.StringRange_): Internal.CommandContextBuilder<S>;
        getNodes(): Internal.List<Internal.ParsedCommandNode<S>>;
        getCommand(): Internal.Command<S>;
        getDispatcher(): Internal.CommandDispatcher<S>;
        getChild(): Internal.CommandContextBuilder<S>;
        withArgument(arg0: string, arg1: Internal.ParsedArgument_<S, any>): Internal.CommandContextBuilder<S>;
        withCommand(arg0: Internal.Command_<S>): Internal.CommandContextBuilder<S>;
        getLastChild(): Internal.CommandContextBuilder<S>;
        findSuggestionContext(arg0: number): Internal.SuggestionContext<S>;
        build(arg0: string): Internal.CommandContext<S>;
        getRange(): Internal.StringRange;
        getSource(): S;
        getArguments(): Internal.Map<string, Internal.ParsedArgument<S, any>>;
        withSource(arg0: S): Internal.CommandContextBuilder<S>;
        copy(): Internal.CommandContextBuilder<S>;
        getRootNode(): Internal.CommandNode<S>;
        get nodes(): Internal.List<Internal.ParsedCommandNode<S>>;
        get lastChild(): Internal.CommandContextBuilder<S>;
        get range(): Internal.StringRange;
        get arguments(): Internal.Map<string, Internal.ParsedArgument<S, any>>;
        get source(): S;
        get dispatcher(): Internal.CommandDispatcher<S>;
        get command(): Internal.Command<S>;
        get child(): Internal.CommandContextBuilder<S>;
        get rootNode(): Internal.CommandNode<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandContextBuilder_<S> = CommandContextBuilder<S>;
    /**
    * @javaClass dev.latvian.mods.rhino.util.ValueUnwrapper
    */
    interface ValueUnwrapper {
        unwrap(arg0: Internal.Scriptable_, arg1: any): any;
    }
    type ValueUnwrapper_ = ((arg0: Internal.Scriptable, arg1: any) => any) | ValueUnwrapper;
    /**
    * @javaClass com.simibubi.create.content.contraptions.fluids.FlowSource
    */
    abstract class FlowSource {
        isEndpoint(): boolean;
        keepAlive(): void;
        manageSource(arg0: Internal.Level_): void;
        provideFluid(arg0: Internal.Predicate_<Internal.FluidStack_>): Internal.FluidStack;
        whileFlowPresent(arg0: Internal.Level_, arg1: boolean): void;
        provideHandler(): Internal.LazyOptional<Internal.IFluidHandler>;
        get endpoint(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FlowSource_ = FlowSource;
    /**
    * @javaClass com.jozufozu.flywheel.mixin.PausedPartialTickAccessor
    */
    interface PausedPartialTickAccessor {
        flywheel$getPartialTicksPaused(): number;
    }
    type PausedPartialTickAccessor_ = (() => number) | PausedPartialTickAccessor;
    /**
    * @javaClass dev.latvian.mods.rhino.util.CustomJavaToJsWrapper
    */
    interface CustomJavaToJsWrapper {
        convertJavaToJs(arg0: Internal.Context_, arg1: Internal.Scriptable_, arg2: Internal.Class_<any>): Internal.Scriptable;
    }
    type CustomJavaToJsWrapper_ = ((arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Class<any>) => Internal.Scriptable) | CustomJavaToJsWrapper;
    /**
    * Represents an Ingredient, which can match one or multiple ItemStacks.
    *
    * Can be casted from several object, which has different usages.
    *
    * If you want to specify nbt to check in ItemStack, use either Item.of() or {type: "forge:nbt"}.
    *
    * Using {item: ItemStackJS} will NOT preserve NBT in any form.
    * @javaClass dev.latvian.mods.kubejs.item.ingredient.IngredientJS
    */
    interface IngredientJS extends Internal.JsonSerializable, Internal.WrappedJS, Internal.Copyable {
        getItemIds(): Internal.Set<string>;
        anyStackMatches(ingredient: Internal.IngredientJS_): boolean;
        testVanillaItem(item: Internal.Item_): boolean;
        test(arg0: Internal.ItemStackJS_): boolean;
        getStacks(): Internal.Set<Internal.ItemStackJS>;
        getVanillaItems(): Internal.Set<Internal.Item>;
        ingredientFromRecipeJson(json: Internal.JsonElement_): this;
        isEmpty(): boolean;
        isInvalidRecipeIngredient(): boolean;
        asIngredientStack(): Internal.IngredientStackJS;
        getVanillaPredicate(): Internal.Predicate<Internal.ItemStack>;
        filter(filter: Internal.IngredientJS_): this;
        createVanillaIngredient(): Internal.Ingredient;
        toJson(): Internal.JsonElement;
        not(): this;
        withCount(count: number): this;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        getFirst(): Internal.ItemStackJS;
        testVanilla(stack: Internal.ItemStack_): boolean;
        of(o: any): this;
        x(c: number): this;
        copy(): this;
        getCount(): number;
    }
    /**
    * Represents an Ingredient, which can match one or multiple ItemStacks.
    *
    * Can be casted from several object, which has different usages.
    *
    * If you want to specify nbt to check in ItemStack, use either Item.of() or {type: "forge:nbt"}.
    *
    * Using {item: ItemStackJS} will NOT preserve NBT in any form.
    */
    type IngredientJS_ = `#${Special.ItemTag}` | Internal.ItemStackJS_ | Internal.FluidStackJS_ | "*" | `@${Special.Mod}` | `%${string}` | RegExp | Internal.Ingredient_ | Internal.IngredientJS_[] | {type: Special.Ingredient} | {item: Internal.ItemStackJS_, count?: number} | {fluid: Internal.FluidStackJS_} | {value: object} | {ingredient: object} | ((arg0: Internal.ItemStackJS) => boolean) | IngredientJS;
    /**
    * @javaClass com.electronwill.nightconfig.core.UnmodifiableConfig$Entry
    */
    interface UnmodifiableConfig$Entry {
        getShortOrElse(arg0: number): number;
        getKey(): string;
        getByte(): number;
        getShort(): number;
        getRawValue<T>(): T;
        getOptionalInt(): Internal.OptionalInt;
        getCharOrElse(arg0: string): string;
        getLongOrElse(arg0: number): number;
        getByteOrElse(arg0: number): number;
        getLong(): number;
        getValue<T>(): T;
        getInt(): number;
        getChar(): string;
        getOptional<T>(): Internal.Optional<T>;
        isNull(): boolean;
        getOrElse<T>(arg0: T): T;
        getIntOrElse(arg0: number): number;
        getOptionalLong(): Internal.OptionalLong;
    }
    type UnmodifiableConfig$Entry_ = UnmodifiableConfig$Entry;
    /**
    * @javaClass java.awt.event.FocusEvent
    */
    class FocusEvent extends Internal.ComponentEvent {
        paramString(): string;
        isTemporary(): boolean;
        getOppositeComponent(): Internal.Component;
        getCause(): Internal.FocusEvent$Cause;
        static readonly "FOCUS_GAINED" : 1004;
        static readonly "FOCUS_FIRST" : 1004;
        static readonly "FOCUS_LAST" : 1005;
        static readonly "FOCUS_LOST" : 1005;
        get temporary(): boolean;
        get oppositeComponent(): Internal.Component;
        get cause(): Internal.FocusEvent$Cause;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FocusEvent_ = FocusEvent;
    /**
    * @javaClass mezz.jei.api.recipe.IFocusGroup
    */
    interface IFocusGroup {
        getAllFocuses(): Internal.List<Internal.IFocus<any>>;
        isEmpty(): boolean;
        getItemStackFocuses(arg0: Internal.RecipeIngredientRole_): Internal.Stream<Internal.IFocus<Internal.ItemStack>>;
        getItemStackFocuses(): Internal.Stream<Internal.IFocus<Internal.ItemStack>>;
        getFocuses<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.RecipeIngredientRole_): Internal.Stream<Internal.IFocus<T>>;
        getFocuses(arg0: Internal.RecipeIngredientRole_): Internal.Stream<Internal.IFocus<any>>;
        getFocuses<T>(arg0: Internal.IIngredientType_<T>): Internal.Stream<Internal.IFocus<T>>;
    }
    type IFocusGroup_ = IFocusGroup;
    /**
    * @javaClass net.minecraftforge.client.extensions.IForgeTransformation
    */
    interface IForgeTransformation {
        blockCornerToCenter(): Internal.Transformation;
        applyOrigin(arg0: Internal.Vector3f_): Internal.Transformation;
        rotateTransform(arg0: Internal.Direction_): Internal.Direction;
        isIdentity(): boolean;
        transformPosition(arg0: Internal.Vector4f_): void;
        transformNormal(arg0: Internal.Vector3f_): void;
        push(arg0: Internal.PoseStack_): void;
        blockCenterToCorner(): Internal.Transformation;
    }
    type IForgeTransformation_ = IForgeTransformation;
    /**
    * @javaClass java.text.Format
    */
    abstract class Format implements Internal.Serializable, Internal.Cloneable {
        formatToCharacterIterator(arg0: any): Internal.AttributedCharacterIterator;
        format(arg0: any, arg1: Internal.StringBuffer_, arg2: Internal.FieldPosition_): Internal.StringBuffer;
        format(arg0: any): string;
        clone(): any;
        parseObject(arg0: string): any;
        parseObject(arg0: string, arg1: Internal.ParsePosition_): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Format_ = Format;
    /**
    * @javaClass java.awt.geom.PathIterator
    */
    interface PathIterator {
        next(): void;
        getWindingRule(): number;
        currentSegment(arg0: number[]): number;
        isDone(): boolean;
    }
    type PathIterator_ = PathIterator;
    /**
    * @javaClass java.util.EventListener
    */
    interface EventListener {
    }
    type EventListener_ = EventListener;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorModelBakery
    */
    interface AccessorModelBakery {
        getSpriteAtlasManager(): Internal.AtlasSet;
    }
    type AccessorModelBakery_ = (() => Internal.AtlasSet) | AccessorModelBakery;
    /**
    * @javaClass java.awt.Rectangle
    */
    class Rectangle extends Internal.Rectangle2D implements Internal.Shape, Internal.Serializable {
        getLocation(): Internal.Point;
        intersects(arg0: Internal.Rectangle_): boolean;
        getWidth(): number;
        inside(arg0: number, arg1: number): boolean;
        translate(arg0: number, arg1: number): void;
        getBounds(): this;
        getHeight(): number;
        setSize(arg0: number, arg1: number): void;
        setSize(arg0: Internal.Dimension_): void;
        setLocation(arg0: Internal.Point_): void;
        setLocation(arg0: number, arg1: number): void;
        intersection(arg0: Internal.Rectangle_): this;
        add(arg0: Internal.Rectangle_): void;
        add(arg0: Internal.Point_): void;
        add(arg0: number, arg1: number): void;
        move(arg0: number, arg1: number): void;
        grow(arg0: number, arg1: number): void;
        isEmpty(): boolean;
        setRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        reshape(arg0: number, arg1: number, arg2: number, arg3: number): void;
        union(arg0: Internal.Rectangle_): this;
        setBounds(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setBounds(arg0: Internal.Rectangle_): void;
        getX(): number;
        getSize(): Internal.Dimension;
        contains(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: Internal.Rectangle_): boolean;
        contains(arg0: Internal.Point_): boolean;
        contains(arg0: number, arg1: number): boolean;
        getY(): number;
        createUnion(arg0: Internal.Rectangle2D_): Internal.Rectangle2D;
        outcode(arg0: number, arg1: number): number;
        equals(arg0: any): boolean;
        getBounds2D(): Internal.Rectangle2D;
        resize(arg0: number, arg1: number): void;
        toString(): string;
        createIntersection(arg0: Internal.Rectangle2D_): Internal.Rectangle2D;
        "x" : number;
        "width" : number;
        "y" : number;
        "height" : number;
        get size(): Internal.Dimension;
        get bounds(): this;
        get location(): Internal.Point;
        get bounds2D(): Internal.Rectangle2D;
        get empty(): boolean;
        set size(arg0: Internal.Dimension_);
        set bounds(arg0: Internal.Rectangle_);
        set location(arg0: Internal.Point_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Rectangle_ = Rectangle;
    /**
    * @javaClass vazkii.botania.forge.mixin.ForgeAccessorRegistry
    */
    interface ForgeAccessorRegistry {
    }
    type ForgeAccessorRegistry_ = ForgeAccessorRegistry;
    /**
    * @javaClass net.minecraftforge.eventbus.api.IGenericEvent
    */
    interface IGenericEvent <T> {
        getGenericType(): Internal.Type;
    }
    type IGenericEvent_<T> = (() => Internal.Type) | IGenericEvent<T>;
    /**
    * @javaClass net.minecraft.server.level.BlockDestructionProgress
    */
    class BlockDestructionProgress implements Internal.Comparable<Internal.BlockDestructionProgress> {
        hashCode(): number;
        equals(arg0: any): boolean;
        compareTo(arg0: Internal.BlockDestructionProgress_): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockDestructionProgress_ = BlockDestructionProgress;
    /**
    * @javaClass net.minecraft.world.phys.AABB
    */
    class AABB {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AABB_ = AABB;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.special.SpecialRecipeSerializerManager
    */
    class SpecialRecipeSerializerManager extends Internal.EventJS {
        ignoreSpecialFlag(id: ResourceLocation_): void;
        isSpecial(recipe: Internal.Recipe_<any>): boolean;
        reset(): void;
        addSpecialFlag(id: ResourceLocation_): void;
        ignoreSpecialMod(modid: string): void;
        addSpecialMod(modid: string): void;
        static readonly "INSTANCE" : Internal.SpecialRecipeSerializerManager;
        static readonly "EVENT" : dev.architectury.event.Event<(() => void)>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SpecialRecipeSerializerManager_ = SpecialRecipeSerializerManager;
    /**
    * @javaClass net.minecraft.client.Camera
    */
    class Camera {
        modify$zgd000$modifyCameraOffset(arg0: number): number;
        setAnglesInternal(arg0: number, arg1: number): void;
        getBlockAtCamera(): Internal.BlockState;
        get blockAtCamera(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Camera_ = Camera;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2IntFunction
    */
    interface Reference2IntFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        removeInt(arg0: any): number;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Reference2CharFunction<K>;
        getInt(arg0: any): number;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2IntFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2IntFunction;
    }
    type Reference2IntFunction_<K> = ((arg0: any) => number) | Reference2IntFunction<K>;
    /**
    * @javaClass net.minecraft.client.sounds.Weighted
    */
    interface Weighted <T> {
    }
    type Weighted_<T> = Weighted<T>;
    /**
    * @javaClass com.simibubi.create.foundation.mixin.accessor.AgeableListModelAccessor
    */
    interface AgeableListModelAccessor {
        create$callHeadParts(): Internal.Iterable<Internal.ModelPart>;
        create$callBodyParts(): Internal.Iterable<Internal.ModelPart>;
    }
    type AgeableListModelAccessor_ = AgeableListModelAccessor;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongOpenHashSet
    */
    class LongOpenHashSet extends Internal.AbstractLongSet implements Internal.Serializable, Internal.Cloneable, Internal.Hash {
        add(arg0: number): boolean;
        spliterator(): Internal.LongSpliterator;
        forEach(arg0: Internal.LongConsumer_): void;
        isEmpty(): boolean;
        clear(): void;
        static toSetWithExpectedSize(arg0: Internal.LongStream_, arg1: number): this;
        remove(arg0: number): boolean;
        static toSet(arg0: Internal.LongStream_): this;
        contains(arg0: number): boolean;
        iterator(): Internal.LongIterator;
        trim(): boolean;
        trim(arg0: number): boolean;
        size(): number;
        addAll(arg0: Internal.LongCollection_): boolean;
        addAll(arg0: Internal.Collection_<number>): boolean;
        hashCode(): number;
        static of(): this;
        static of(arg0: number): this;
        static of(arg0: number, arg1: number): this;
        static of(... arg0: number[]): this;
        static of(arg0: number, arg1: number, arg2: number): this;
        clone(): this;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LongOpenHashSet_ = LongOpenHashSet;
    /**
    * @javaClass dev.latvian.mods.rhino.ScriptableObject
    */
    abstract class ScriptableObject implements Internal.Scriptable, Internal.SymbolScriptable, Internal.Serializable, Internal.ConstProperties {
        isSealed(): boolean;
        setParentScope(m: Internal.Scriptable_): void;
        static redefineProperty(obj: Internal.Scriptable_, name: string, isConst: boolean): void;
        putConst(name: string, start: Internal.Scriptable_, value: any): void;
        static getTypedProperty<T>(s: Internal.Scriptable_, name: string, type: Internal.Class_<T>): T;
        static getTypedProperty<T>(s: Internal.Scriptable_, index: number, type: Internal.Class_<T>): T;
        getIds(): any[];
        static getArrayPrototype(scope: Internal.Scriptable_): Internal.Scriptable;
        getAllIds(): any[];
        put(key: Internal.Symbol_, start: Internal.Scriptable_, value: any): void;
        put(index: number, start: Internal.Scriptable_, value: any): void;
        put(name: string, start: Internal.Scriptable_, value: any): void;
        static getDefaultValue(object: Internal.Scriptable_, typeHint: Internal.Class_<any>): any;
        getDefaultValue(typeHint: Internal.Class_<any>): any;
        defineProperty(propertyName: string, delegateTo: any, getter: Internal.Method_, setter: Internal.Method_, attributes: number): void;
        defineProperty(propertyName: string, clazz: Internal.Class_<any>, attributes: number): void;
        defineProperty(key: Internal.Symbol_, value: any, attributes: number): void;
        defineProperty(propertyName: string, value: any, attributes: number): void;
        static defineProperty(destination: Internal.Scriptable_, propertyName: string, value: any, attributes: number): void;
        defineOwnProperties(cx: Internal.Context_, props: Internal.ScriptableObject_): void;
        setGetterOrSetter(name: string, index: number, getterOrSetter: dev.latvian.mods.rhino.Callable_, isSetter: boolean): void;
        avoidObjectDetection(): boolean;
        has(name: string, start: Internal.Scriptable_): boolean;
        has(key: Internal.Symbol_, start: Internal.Scriptable_): boolean;
        has(index: number, start: Internal.Scriptable_): boolean;
        getExternalArrayLength(): any;
        getAttributes(index: number): number;
        getAttributes(name: string): number;
        getAttributes(sym: Internal.Symbol_): number;
        hasInstance(instance: Internal.Scriptable_): boolean;
        getAssociatedValue(key: any): any;
        static getPropertyIds(obj: Internal.Scriptable_): any[];
        static hasProperty(obj: Internal.Scriptable_, name: string): boolean;
        static hasProperty(obj: Internal.Scriptable_, index: number): boolean;
        static hasProperty(obj: Internal.Scriptable_, key: Internal.Symbol_): boolean;
        getExternalArrayData(): Internal.ExternalArrayData;
        size(): number;
        defineOwnProperty(cx: Internal.Context_, id: any, desc: Internal.ScriptableObject_): void;
        static getFunctionPrototype(scope: Internal.Scriptable_): Internal.Scriptable;
        getClassName(): string;
        getParentScope(): Internal.Scriptable;
        preventExtensions(): void;
        setExternalArrayData(array: Internal.ExternalArrayData_): void;
        static callMethod(obj: Internal.Scriptable_, methodName: string, args: any[]): any;
        static callMethod(cx: Internal.Context_, obj: Internal.Scriptable_, methodName: string, args: any[]): any;
        getTypeOf(): Internal.MemberType;
        static getTopScopeValue(scope: Internal.Scriptable_, key: any): any;
        sealObject(): void;
        setAttributes(key: Internal.Symbol_, attributes: number): void;
        setAttributes(index: number, attributes: number): void;
        setAttributes(name: string, attributes: number): void;
        static putProperty(obj: Internal.Scriptable_, key: Internal.Symbol_, value: any): void;
        static putProperty(obj: Internal.Scriptable_, index: number, value: any): void;
        static putProperty(obj: Internal.Scriptable_, name: string, value: any): void;
        delete(index: number): void;
        delete(name: string): void;
        delete(key: Internal.Symbol_): void;
        static deleteProperty(obj: Internal.Scriptable_, name: string): boolean;
        static deleteProperty(obj: Internal.Scriptable_, index: number): boolean;
        associateValue(key: any, value: any): any;
        getPrototype(): Internal.Scriptable;
        static getObjectPrototype(scope: Internal.Scriptable_): Internal.Scriptable;
        isExtensible(): boolean;
        isConst(name: string): boolean;
        get(key: Internal.Symbol_, start: Internal.Scriptable_): any;
        get(index: number, start: Internal.Scriptable_): any;
        get(name: string, start: Internal.Scriptable_): any;
        get(key: any): any;
        static putConstProperty(obj: Internal.Scriptable_, name: string, value: any): void;
        getGetterOrSetter(name: string, index: number, isSetter: boolean): any;
        static getTopLevelScope(obj: Internal.Scriptable_): Internal.Scriptable;
        static getProperty(obj: Internal.Scriptable_, index: number): any;
        static getProperty(obj: Internal.Scriptable_, key: Internal.Symbol_): any;
        static getProperty(obj: Internal.Scriptable_, name: string): any;
        static defineClass<T>(scope: Internal.Scriptable_, clazz: Internal.Class_<T>): void;
        static defineClass<T>(scope: Internal.Scriptable_, clazz: Internal.Class_<T>, sealed: boolean, mapInheritance: boolean): string;
        static defineClass<T>(scope: Internal.Scriptable_, clazz: Internal.Class_<T>, sealed: boolean): void;
        isEmpty(): boolean;
        defineFunctionProperties(names: string[], clazz: Internal.Class_<any>, attributes: number): void;
        static getClassPrototype(scope: Internal.Scriptable_, className: string): Internal.Scriptable;
        setPrototype(m: Internal.Scriptable_): void;
        defineConst(name: string, start: Internal.Scriptable_): void;
        static defineConstProperty(destination: Internal.Scriptable_, propertyName: string): void;
        static getGeneratorFunctionPrototype(scope: Internal.Scriptable_): Internal.Scriptable;
        static readonly "DONTENUM" : 2;
        static readonly "CONST" : 13;
        static readonly "UNINITIALIZED_CONST" : 8;
        static readonly "EMPTY" : 0;
        static readonly "READONLY" : 1;
        static readonly "PERMANENT" : 4;
        get sealed(): boolean;
        get externalArrayData(): Internal.ExternalArrayData;
        get parentScope(): Internal.Scriptable;
        get ids(): any[];
        get className(): string;
        get externalArrayLength(): any;
        get allIds(): any[];
        get prototype(): Internal.Scriptable;
        get extensible(): boolean;
        get typeOf(): Internal.MemberType;
        get empty(): boolean;
        set externalArrayData(array: Internal.ExternalArrayData_);
        set parentScope(m: Internal.Scriptable_);
        set prototype(m: Internal.Scriptable_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptableObject_ = ScriptableObject;
    /**
    * @javaClass net.minecraftforge.client.event.RenderTooltipEvent$Color
    */
    class RenderTooltipEvent$Color extends Internal.RenderTooltipEvent {
        setBorderStart(arg0: number): void;
        setBackgroundStart(arg0: number): void;
        getOriginalBackgroundStart(): number;
        getBackgroundStart(): number;
        getOriginalBorderStart(): number;
        getBorderEnd(): number;
        setBorderEnd(arg0: number): void;
        setBackground(arg0: number): void;
        getBorderStart(): number;
        getListenerList(): Internal.ListenerList;
        getOriginalBackgroundEnd(): number;
        getBackgroundEnd(): number;
        setBackgroundEnd(arg0: number): void;
        getOriginalBorderEnd(): number;
        get listenerList(): Internal.ListenerList;
        get originalBackgroundEnd(): number;
        get borderEnd(): number;
        get backgroundEnd(): number;
        get originalBackgroundStart(): number;
        get originalBorderStart(): number;
        get originalBorderEnd(): number;
        get backgroundStart(): number;
        get borderStart(): number;
        set background(arg0: number);
        set borderEnd(arg0: number);
        set backgroundEnd(arg0: number);
        set backgroundStart(arg0: number);
        set borderStart(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderTooltipEvent$Color_ = RenderTooltipEvent$Color;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2IntFunction
    */
    interface Long2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2IntFunction;
    }
    type Long2IntFunction_ = ((arg0: number) => number) | Long2IntFunction;
    /**
    * @javaClass com.google.gson.JsonNull
    */
    class JsonNull extends Internal.JsonElement {
        hashCode(): number;
        equals(arg0: any): boolean;
        deepCopy(): this;
        static readonly "INSTANCE" : Internal.JsonNull;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonNull_ = JsonNull;
    /**
    * @javaClass com.mojang.blaze3d.vertex.Tesselator
    */
    class Tesselator {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Tesselator_ = Tesselator;
    /**
    * @javaClass java.time.InstantSource
    */
    interface InstantSource {
        withZone(arg0: Internal.ZoneId_): Internal.Clock;
        system(): this;
        offset(arg0: Internal.InstantSource_, arg1: Internal.Duration_): this;
        fixed(arg0: Internal.Instant_): this;
        tick(arg0: Internal.InstantSource_, arg1: Internal.Duration_): this;
        millis(): number;
        instant(): Internal.Instant;
    }
    type InstantSource_ = (() => Internal.Instant) | InstantSource;
    /**
    * @javaClass com.electronwill.nightconfig.core.utils.WriterSupplier
    */
    interface WriterSupplier {
        get(): Internal.Writer;
    }
    type WriterSupplier_ = (() => Internal.Writer) | WriterSupplier;
    /**
    * @javaClass java.awt.Dialog$ModalityType
    */
    class Dialog$ModalityType extends Internal.Enum<Internal.Dialog$ModalityType> {
        static valueOf(arg0: string): this;
        static values(): Internal.Dialog$ModalityType[];
        static readonly "TOOLKIT_MODAL" : Internal.Dialog$ModalityType;
        static readonly "APPLICATION_MODAL" : Internal.Dialog$ModalityType;
        static readonly "MODELESS" : Internal.Dialog$ModalityType;
        static readonly "DOCUMENT_MODAL" : Internal.Dialog$ModalityType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dialog$ModalityType_ = "application_modal" | "modeless" | "document_modal" | "toolkit_modal" | Dialog$ModalityType;
    /**
    * @javaClass dev.latvian.mods.kubejs.fluid.FluidBuilder
    */
    class FluidBuilder extends Internal.BuilderBase<Internal.FlowingFluid> {
        noBlock(): this;
        thinTexture(color: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        density(density: number): this;
        bucketColor(c: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        color(c: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        displayName(name: string): Internal.BuilderBase<Internal.FlowingFluid>;
        thickTexture(color: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        gaseous(): this;
        createAdditionalObjects(): void;
        createAttributes(): Internal.ArchitecturyFluidAttributes;
        createObject(): Internal.FlowingFluid;
        builtinTextures(): this;
        stillTexture(id: ResourceLocation_): this;
        viscosity(viscosity: number): this;
        flowingTexture(id: ResourceLocation_): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Fluid>;
        temperature(temperature: number): this;
        luminosity(luminosity: number): this;
        rarity(rarity: Rarity_): this;
        noBucket(): this;
        "flowingFluid" : Internal.FlowingFluidBuilder;
        "attributes" : Internal.ArchitecturyFluidAttributes;
        "block" : Internal.FluidBlockBuilder;
        "bucketItem" : Internal.FluidBucketItemBuilder;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Fluid>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidBuilder_ = FluidBuilder;
    /**
    * @javaClass java.util.function.LongToIntFunction
    */
    interface LongToIntFunction {
        applyAsInt(arg0: number): number;
    }
    type LongToIntFunction_ = ((arg0: number) => number) | LongToIntFunction;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedItemExtension
    */
    interface InjectedItemExtension extends Internal.InjectedRegistryEntryExtension<Internal.Item> {
        arch$holder(): Internal.Holder<Internal.Item>;
    }
    type InjectedItemExtension_ = InjectedItemExtension;
    /**
    * @javaClass dev.latvian.mods.rhino.classdata.ClassDataCache
    */
    class ClassDataCache {
        of(c: Internal.Class_<any>): Internal.ClassData;
        readonly "context" : Internal.Context;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClassDataCache_ = ClassDataCache;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent$MissingMappings$Mapping
    */
    class RegistryEvent$MissingMappings$Mapping <T> implements Internal.Comparable<Internal.RegistryEvent$MissingMappings$Mapping<T>> {
        warn(): void;
        fail(): void;
        getTarget(): T;
        ignore(): void;
        getAction(): Internal.RegistryEvent$MissingMappings$Action;
        compareTo(arg0: Internal.RegistryEvent$MissingMappings$Mapping_<T>): number;
        remap(arg0: T): void;
        readonly "registry" : Internal.IForgeRegistry<T>;
        readonly "id" : number;
        readonly "key" : ResourceLocation;
        get action(): Internal.RegistryEvent$MissingMappings$Action;
        get target(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent$MissingMappings$Mapping_<T> = RegistryEvent$MissingMappings$Mapping<T>;
    /**
    * @javaClass com.google.common.collect.ImmutableCollection$Builder
    */
    abstract class ImmutableCollection$Builder <E> {
        add(arg0: E): Internal.ImmutableCollection$Builder<E>;
        add(... arg0: E[]): Internal.ImmutableCollection$Builder<E>;
        build(): Internal.ImmutableCollection<E>;
        addAll(arg0: Internal.Iterator_<E>): Internal.ImmutableCollection$Builder<E>;
        addAll(arg0: Internal.Iterable_<E>): Internal.ImmutableCollection$Builder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableCollection$Builder_<E> = ImmutableCollection$Builder<E>;
    /**
    * @javaClass java.util.Spliterator$OfDouble
    */
    interface Spliterator$OfDouble extends Internal.Spliterator$OfPrimitive<number, Internal.DoubleConsumer, Internal.Spliterator$OfDouble> {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: Internal.DoubleConsumer_): boolean;
        forEachRemaining(arg0: Internal.DoubleConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type Spliterator$OfDouble_ = Spliterator$OfDouble;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2ByteFunction
    */
    interface Boolean2ByteFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2ByteFunction;
    }
    type Boolean2ByteFunction_ = ((arg0: boolean) => number) | Boolean2ByteFunction;
    /**
    * @javaClass net.minecraft.client.searchtree.SearchRegistry
    */
    class SearchRegistry implements Internal.ResourceManagerReloadListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SearchRegistry_ = SearchRegistry;
    /**
    * @javaClass net.minecraftforge.eventbus.api.Event$Result
    */
    class Event$Result extends Internal.Enum<Internal.Event$Result> {
        static valueOf(arg0: string): this;
        static values(): Internal.Event$Result[];
        static readonly "DENY" : Internal.Event$Result;
        static readonly "DEFAULT" : Internal.Event$Result;
        static readonly "ALLOW" : Internal.Event$Result;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Event$Result_ = "allow" | "deny" | "default" | Event$Result;
    /**
    * @javaClass net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase
    */
    abstract class BlockBehaviour$BlockStateBase extends Internal.StateHolder<Internal.Block, Internal.BlockState> implements Internal.BlockStateKJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockBehaviour$BlockStateBase_ = BlockBehaviour$BlockStateBase;
    /**
    * @javaClass net.minecraftforge.fml.event.IModBusEvent
    */
    interface IModBusEvent {
    }
    type IModBusEvent_ = IModBusEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.ContextFactory$Listener
    */
    interface ContextFactory$Listener {
        contextReleased(arg0: Internal.Context_): void;
        contextCreated(arg0: Internal.Context_): void;
    }
    type ContextFactory$Listener_ = ContextFactory$Listener;
    /**
    * @javaClass dev.latvian.mods.kubejs.mixin.forge.RecipeManagerAccessor
    */
    interface RecipeManagerAccessor {
        getContext(): Internal.ICondition$IContext;
    }
    type RecipeManagerAccessor_ = (() => Internal.ICondition$IContext) | RecipeManagerAccessor;
    /**
    * @javaClass com.prunoideae.recipe.PureDaisyRecipeJS
    */
    class PureDaisyRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        "output" : Internal.Block;
        "input" : Internal.Block;
        "time" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PureDaisyRecipeJS_ = PureDaisyRecipeJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2ObjectFunction
    */
    interface Float2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Float2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2FloatFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Float2ObjectFunction_<V> = ((arg0: number) => V) | Float2ObjectFunction<V>;
    /**
    * @javaClass java.util.ResourceBundle
    */
    abstract class ResourceBundle {
        getObject(arg0: string): any;
        getBaseBundleName(): string;
        containsKey(arg0: string): boolean;
        getStringArray(arg0: string): string[];
        static clearCache(): void;
        static clearCache(arg0: Internal.ClassLoader_): void;
        getKeys(): Internal.Enumeration<string>;
        getString(arg0: string): string;
        getLocale(): Internal.Locale;
        keySet(): Internal.Set<string>;
        static getBundle(arg0: string, arg1: Internal.Locale_): this;
        static getBundle(arg0: string, arg1: Internal.ResourceBundle$Control_): this;
        static getBundle(arg0: string): this;
        static getBundle(arg0: string, arg1: Internal.Locale_, arg2: Internal.ClassLoader_): this;
        static getBundle(arg0: string, arg1: Internal.Locale_, arg2: Internal.ClassLoader_, arg3: Internal.ResourceBundle$Control_): this;
        static getBundle(arg0: string, arg1: Internal.Locale_, arg2: Internal.ResourceBundle$Control_): this;
        static getBundle(arg0: string, arg1: Internal.Locale_, arg2: Internal.Module_): this;
        static getBundle(arg0: string, arg1: Internal.Module_): this;
        get baseBundleName(): string;
        get keys(): Internal.Enumeration<string>;
        get locale(): Internal.Locale;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ResourceBundle_ = ResourceBundle;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingFallEvent
    */
    class LivingFallEvent extends Internal.LivingEvent {
        getDistance(): number;
        getListenerList(): Internal.ListenerList;
        setDistance(arg0: number): void;
        setDamageMultiplier(arg0: number): void;
        isCancelable(): boolean;
        getDamageMultiplier(): number;
        get cancelable(): boolean;
        get distance(): number;
        get listenerList(): Internal.ListenerList;
        get damageMultiplier(): number;
        set distance(arg0: number);
        set damageMultiplier(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingFallEvent_ = LivingFallEvent;
    /**
    * @javaClass net.minecraftforge.event.AttachCapabilitiesEvent
    */
    class AttachCapabilitiesEvent <T> extends Internal.GenericEvent<T> {
        getListeners(): Internal.List<Internal.Runnable>;
        getListenerList(): Internal.ListenerList;
        addCapability(arg0: ResourceLocation_, arg1: Internal.ICapabilityProvider_): void;
        getObject(): T;
        getCapabilities(): Internal.Map<ResourceLocation, Internal.ICapabilityProvider>;
        addListener(arg0: Internal.Runnable_): void;
        get capabilities(): Internal.Map<ResourceLocation, Internal.ICapabilityProvider>;
        get listeners(): Internal.List<Internal.Runnable>;
        get listenerList(): Internal.ListenerList;
        get object(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttachCapabilitiesEvent_<T> = AttachCapabilitiesEvent<T>;
    /**
    * @javaClass vazkii.botania.mixin.AccessorIngredient
    */
    interface AccessorIngredient {
    }
    type AccessorIngredient_ = AccessorIngredient;
    /**
    * @javaClass java.awt.datatransfer.FlavorMap
    */
    interface FlavorMap {
        getNativesForFlavors(arg0: Internal.DataFlavor_[]): Internal.Map<Internal.DataFlavor, string>;
        getFlavorsForNatives(arg0: string[]): Internal.Map<string, Internal.DataFlavor>;
    }
    type FlavorMap_ = FlavorMap;
    /**
    * @javaClass dev.architectury.registry.registries.DeferredRegister
    */
    class DeferredRegister <T> implements Internal.Iterable<Internal.RegistrySupplier<T>> {
        getRegistrar(): Internal.Registrar<T>;
        getRegistries(): Internal.Registries;
        iterator(): Internal.Iterator<Internal.RegistrySupplier<T>>;
        static create<T>(modId: string, key: Internal.ResourceKey_<Internal.Registry_<T>>): Internal.DeferredRegister<T>;
        register<R>(id: ResourceLocation_, supplier: Internal.Supplier_<R>): Internal.RegistrySupplier<R>;
        register(): void;
        register<R>(id: string, supplier: Internal.Supplier_<R>): Internal.RegistrySupplier<R>;
        get registrar(): Internal.Registrar<T>;
        get registries(): Internal.Registries;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DeferredRegister_<T> = DeferredRegister<T>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.TeamMessage
    */
    class TeamMessage {
        write(now: number, buffer: Internal.FriendlyByteBuf_): void;
        readonly "date" : number;
        readonly "sender" : Internal.UUID;
        readonly "text" : net.minecraft.network.chat.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamMessage_ = TeamMessage;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntSet
    */
    interface IntSet extends Internal.IntCollection, Internal.Set<number> {
        add(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.IntIterator;
        spliterator(): Internal.IntSpliterator;
        of(arg0: number, arg1: number): this;
        of(): this;
        of(... arg0: number[]): this;
        of(arg0: number): this;
        of(arg0: number, arg1: number, arg2: number): this;
        rem(arg0: number): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
    }
    type IntSet_ = IntSet;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseInputEvent
    */
    abstract class ScreenEvent$MouseInputEvent extends Internal.ScreenEvent {
        getMouseY(): number;
        getListenerList(): Internal.ListenerList;
        getMouseX(): number;
        get mouseX(): number;
        get listenerList(): Internal.ListenerList;
        get mouseY(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseInputEvent_ = ScreenEvent$MouseInputEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2ByteFunction
    */
    interface Object2ByteFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        getByte(arg0: any): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2ByteFunction;
        removeByte(arg0: any): number;
        andThenByte(arg0: Internal.Byte2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2ByteFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2ByteFunction;
    }
    type Object2ByteFunction_<K> = ((arg0: any) => number) | Object2ByteFunction<K>;
    /**
    * @javaClass java.util.function.ToDoubleFunction
    */
    interface ToDoubleFunction <T> {
        applyAsDouble(arg0: T): number;
    }
    type ToDoubleFunction_<T> = ((arg0: T) => number) | ToDoubleFunction<T>;
    /**
    * @javaClass java.nio.file.attribute.GroupPrincipal
    */
    interface GroupPrincipal extends Internal.UserPrincipal {
    }
    type GroupPrincipal_ = GroupPrincipal;
    /**
    * @javaClass java.time.temporal.TemporalAmount
    */
    interface TemporalAmount {
        subtractFrom(arg0: Internal.Temporal_): Internal.Temporal;
        get(arg0: Internal.TemporalUnit_): number;
        getUnits(): Internal.List<Internal.TemporalUnit>;
        addTo(arg0: Internal.Temporal_): Internal.Temporal;
    }
    type TemporalAmount_ = TemporalAmount;
    /**
    * @javaClass java.security.Permission
    */
    abstract class Permission implements Internal.Guard, Internal.Serializable {
        getName(): string;
        checkGuard(arg0: any): void;
        newPermissionCollection(): Internal.PermissionCollection;
        hashCode(): number;
        equals(arg0: any): boolean;
        getActions(): string;
        toString(): string;
        implies(arg0: Internal.Permission_): boolean;
        get name(): string;
        get actions(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Permission_ = Permission;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.DrawBuffer
    */
    class DrawBuffer {
        hasVertices(): boolean;
        reset(): void;
        inject(arg0: Internal.BufferBuilderExtension_): void;
        begin(arg0: number): Internal.DirectVertexConsumer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DrawBuffer_ = DrawBuffer;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.MultipartBlockStateGenerator
    */
    class MultipartBlockStateGenerator {
        toJson(): Internal.JsonObject;
        part(when: string, model: string): void;
        part(when: string, consumer: Internal.Consumer_<Internal.MultipartBlockStateGenerator$Part_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MultipartBlockStateGenerator_ = MultipartBlockStateGenerator;
    /**
    * @javaClass java.util.concurrent.Delayed
    */
    interface Delayed extends Internal.Comparable<Internal.Delayed> {
        getDelay(arg0: Internal.TimeUnit_): number;
    }
    type Delayed_ = ((arg0: Internal.TimeUnit) => number) | Delayed;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.RenderTypeExtension
    */
    interface RenderTypeExtension {
        flywheel$getDrawBuffer(): Internal.DrawBuffer;
        getDrawBuffer(arg0: Internal.RenderType_): Internal.DrawBuffer;
    }
    type RenderTypeExtension_ = (() => Internal.DrawBuffer) | RenderTypeExtension;
    /**
    * @javaClass com.mojang.datafixers.util.Function6
    */
    interface Function6 <T1, T2, T3, T4, T5, T6, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6): R;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function<T6, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function3<T4, T5, T6, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.BiFunction<T5, T6, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function4<T3, T4, T5, T6, R>>;
        curry(): Internal.Function<T1, Internal.Function5<T2, T3, T4, T5, T6, R>>;
    }
    type Function6_<T1, T2, T3, T4, T5, T6, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6) => R) | Function6<T1, T2, T3, T4, T5, T6, R>;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseDragEvent$Pre
    */
    class ScreenEvent$MouseDragEvent$Pre extends Internal.ScreenEvent$MouseDragEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseDragEvent$Pre_ = ScreenEvent$MouseDragEvent$Pre;
    /**
    * @javaClass dev.latvian.mods.unit.UnitVariables
    */
    interface UnitVariables {
        getVariables(): Internal.VariableSet;
    }
    type UnitVariables_ = (() => Internal.VariableSet) | UnitVariables;
    /**
    * Fired by different tag when the client is:
    * - logged in
    * - logged out
    * @javaClass dev.latvian.mods.kubejs.client.ClientLoggedInEventJS
    */
    class ClientLoggedInEventJS extends Internal.ClientEventJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired by different tag when the client is:
    * - logged in
    * - logged out
    */
    type ClientLoggedInEventJS_ = ClientLoggedInEventJS;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkDataEvent
    */
    class ChunkDataEvent extends Internal.ChunkEvent {
        getListenerList(): Internal.ListenerList;
        getData(): Internal.CompoundTag;
        get data(): Internal.CompoundTag;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkDataEvent_ = ChunkDataEvent;
    /**
    * @javaClass dev.architectury.registry.registries.Registrar
    */
    interface Registrar <T> extends Internal.Iterable<T> {
        getKey(arg0: T): Internal.Optional<Internal.ResourceKey<T>>;
        byRawId(arg0: number): T;
        entrySet(): Internal.Set<Internal.Map$Entry<Internal.ResourceKey<T>, T>>;
        getIds(): Internal.Set<ResourceLocation>;
        getId(arg0: T): ResourceLocation;
        containsValue(arg0: T): boolean;
        listen(arg0: ResourceLocation_, arg1: Internal.Consumer_<T>): void;
        listen<R>(supplier: Internal.RegistrySupplier_<R>, callback: Internal.Consumer_<R>): void;
        delegate(arg0: ResourceLocation_): Internal.RegistrySupplier<T>;
        contains(arg0: ResourceLocation_): boolean;
        get(arg0: ResourceLocation_): T;
        getRawId(arg0: T): number;
        wrap<R>(obj: R): Internal.RegistrySupplier<R>;
        key(): Internal.ResourceKey<Internal.Registry<T>>;
        register<E>(arg0: ResourceLocation_, arg1: Internal.Supplier_<E>): Internal.RegistrySupplier<E>;
    }
    type Registrar_<T> = Registrar<T>;
    /**
    * @javaClass dev.latvian.mods.itemfilters.item.StringValueData
    */
    abstract class StringValueData <T> {
        getValueAsComponent(): net.minecraft.network.chat.Component;
        getValue(): T;
        setValueFromString(v: string): void;
        setValue(v: T): void;
        toString(): string;
        getValueAsString(): string;
        readonly "filter" : Internal.ItemStack;
        get valueAsComponent(): net.minecraft.network.chat.Component;
        get valueAsString(): string;
        get value(): T;
        set valueFromString(v: string);
        set value(v: T);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringValueData_<T> = StringValueData<T>;
    /**
    * @javaClass net.minecraftforge.common.capabilities.ICapabilityProvider
    */
    interface ICapabilityProvider {
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        getCapability<T>(arg0: Internal.Capability_<T>): Internal.LazyOptional<T>;
    }
    type ICapabilityProvider_ = ((arg0: Internal.Capability<T>, arg1: Internal.Direction) => Internal.LazyOptional<T>) | ICapabilityProvider;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ConfigGroup
    */
    class ConfigGroup {
        add<T, CV>(id: string, type: CV, value: T, callback: Internal.Consumer_<T>, defaultValue: T): CV;
        addEnum<E>(id: string, value: E, setter: Internal.Consumer_<E>, nameMap: Internal.NameMap_<E>, def: E): Internal.EnumConfig<E>;
        addEnum<E>(id: string, value: E, setter: Internal.Consumer_<E>, nameMap: Internal.NameMap_<E>): Internal.EnumConfig<E>;
        getName(): net.minecraft.network.chat.Component;
        getValues(): Internal.Collection<Internal.ConfigValue>;
        save(accepted: boolean): void;
        addBool(id: string, value: boolean, setter: Internal.Consumer_<boolean>, def: boolean): Internal.BooleanConfig;
        addItemStack(id: string, value: Internal.ItemStack_, setter: Internal.Consumer_<Internal.ItemStack_>, def: Internal.ItemStack_, singleItemOnly: boolean, allowEmpty: boolean): Internal.ItemStackConfig;
        getNameKey(): string;
        setNameKey(key: string): this;
        addTristate(id: string, value: Internal.Tristate_, setter: Internal.Consumer_<Internal.Tristate_>): Internal.EnumConfig<Internal.Tristate>;
        addTristate(id: string, value: Internal.Tristate_, setter: Internal.Consumer_<Internal.Tristate_>, def: Internal.Tristate_): Internal.EnumConfig<Internal.Tristate>;
        getTooltip(): net.minecraft.network.chat.Component;
        getGroup(id: string): this;
        getPath(): string;
        addList<E, CV>(id: string, c: Internal.List_<E>, type: CV, def: E): Internal.ListConfig<E, CV>;
        addInt(id: string, value: number, setter: Internal.Consumer_<number>, def: number, min: number, max: number): Internal.IntConfig;
        addLong(id: string, value: number, setter: Internal.Consumer_<number>, def: number, min: number, max: number): Internal.LongConfig;
        addDouble(id: string, value: number, setter: Internal.Consumer_<number>, def: number, min: number, max: number): Internal.DoubleConfig;
        getGroups(): Internal.Collection<Internal.ConfigGroup>;
        addString(id: string, value: string, setter: Internal.Consumer_<string>, def: string): Internal.StringConfig;
        addString(id: string, value: string, setter: Internal.Consumer_<string>, def: string, pattern: Internal.Pattern_): Internal.StringConfig;
        "parent" : Internal.ConfigGroup;
        readonly "id" : string;
        "savedCallback" : ((arg0: boolean) => void);
        get path(): string;
        get nameKey(): string;
        get values(): Internal.Collection<Internal.ConfigValue>;
        get name(): net.minecraft.network.chat.Component;
        get tooltip(): net.minecraft.network.chat.Component;
        get groups(): Internal.Collection<Internal.ConfigGroup>;
        set nameKey(key: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfigGroup_ = ConfigGroup;
    /**
    * @javaClass java.awt.event.KeyListener
    */
    interface KeyListener extends Internal.EventListener {
        keyPressed(arg0: Internal.KeyEvent_): void;
        keyReleased(arg0: Internal.KeyEvent_): void;
        keyTyped(arg0: Internal.KeyEvent_): void;
    }
    type KeyListener_ = KeyListener;
    /**
    * @javaClass net.minecraft.world.level.block.state.BlockState
    */
    class BlockState extends Internal.BlockBehaviour$BlockStateBase implements Internal.IForgeBlockState {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockState_ = BlockState;
    /**
    * @javaClass java.util.OptionalDouble
    */
    class OptionalDouble {
        isEmpty(): boolean;
        isPresent(): boolean;
        getAsDouble(): number;
        orElse(arg0: number): number;
        orElseThrow<X>(arg0: Internal.Supplier_<X>): number;
        orElseThrow(): number;
        static empty(): this;
        orElseGet(arg0: Internal.DoubleSupplier_): number;
        stream(): Internal.DoubleStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.DoubleConsumer_, arg1: Internal.Runnable_): void;
        ifPresent(arg0: Internal.DoubleConsumer_): void;
        static of(arg0: number): this;
        equals(arg0: any): boolean;
        toString(): string;
        get asDouble(): number;
        get present(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OptionalDouble_ = OptionalDouble;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootTable
    */
    class LootTable {
        setLootTableId(arg0: ResourceLocation_): void;
        freeze(): void;
        addPool(arg0: Internal.LootPool_): void;
        getPool(arg0: string): Internal.LootPool;
        removePool(arg0: string): Internal.LootPool;
        getLootTableId(): ResourceLocation;
        isFrozen(): boolean;
        get lootTableId(): ResourceLocation;
        get frozen(): boolean;
        set lootTableId(arg0: ResourceLocation_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootTable_ = LootTable;
    /**
    * @javaClass net.minecraft.network.chat.BaseComponent
    */
    abstract class BaseComponent implements Internal.MutableComponent {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseComponent_ = BaseComponent;
    /**
    * @javaClass net.minecraft.world.level.chunk.ChunkStatus$ChunkType
    */
    class ChunkStatus$ChunkType extends Internal.Enum<Internal.ChunkStatus$ChunkType> {
        static valueOf(arg0: string): this;
        static values(): Internal.ChunkStatus$ChunkType[];
        static readonly "LEVELCHUNK" : Internal.ChunkStatus$ChunkType;
        static readonly "PROTOCHUNK" : Internal.ChunkStatus$ChunkType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkStatus$ChunkType_ = "levelchunk" | "protochunk" | ChunkStatus$ChunkType;
    /**
    * @javaClass java.util.AbstractList
    */
    abstract class AbstractList <E> extends Internal.AbstractCollection<E> implements Internal.List<E> {
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        subList(arg0: number, arg1: number): Internal.List<E>;
        set(arg0: number, arg1: E): E;
        clear(): void;
        remove(arg0: number): E;
        lastIndexOf(arg0: any): number;
        iterator(): Internal.Iterator<E>;
        addAll(arg0: number, arg1: Internal.Collection_<E>): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: number): E;
        listIterator(): Internal.ListIterator<E>;
        listIterator(arg0: number): Internal.ListIterator<E>;
        indexOf(arg0: any): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
        [Symbol.iterator](): IterableIterator<E>;
    }
    /**
    */
    type AbstractList_<E> = AbstractList<E>;
    /**
    * @javaClass java.awt.event.HierarchyBoundsListener
    */
    interface HierarchyBoundsListener extends Internal.EventListener {
        ancestorResized(arg0: Internal.HierarchyEvent_): void;
        ancestorMoved(arg0: Internal.HierarchyEvent_): void;
    }
    type HierarchyBoundsListener_ = HierarchyBoundsListener;
    /**
    * @javaClass net.minecraft.world.level.material.FlowingFluid
    */
    abstract class FlowingFluid extends Internal.Fluid {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FlowingFluid_ = FlowingFluid;
    /**
    * @javaClass java.io.InputStream
    */
    abstract class InputStream implements Internal.Closeable {
        read(arg0: number[], arg1: number, arg2: number): number;
        read(arg0: number[]): number;
        read(): number;
        markSupported(): boolean;
        available(): number;
        readAllBytes(): number[];
        static nullInputStream(): this;
        reset(): void;
        readNBytes(arg0: number): number[];
        readNBytes(arg0: number[], arg1: number, arg2: number): number;
        skip(arg0: number): number;
        transferTo(arg0: Internal.OutputStream_): number;
        close(): void;
        skipNBytes(arg0: number): void;
        mark(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputStream_ = InputStream;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.ExplosionJS
    */
    class ExplosionJS {
        strength(f: number): this;
        damagesTerrain(b: boolean): this;
        exploder(entity: Internal.EntityJS_): this;
        explode(): void;
        causesFire(b: boolean): this;
        destroysTerrain(b: boolean): this;
        "explosionMode" : Internal.Explosion$BlockInteraction;
        readonly "x" : number;
        readonly "y" : number;
        readonly "z" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ExplosionJS_ = ExplosionJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.SequencedAssemblyRecipeJS
    */
    class SequencedAssemblyRecipeJS extends Internal.RecipeJS {
        transitionalItem(item: Internal.ItemStackJS_): this;
        serialize(): void;
        loops(loops: number): this;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SequencedAssemblyRecipeJS_ = SequencedAssemblyRecipeJS;
    /**
    * @javaClass net.minecraft.world.level.levelgen.placement.PlacedFeature
    */
    class PlacedFeature extends Internal.Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlacedFeature_ = Special.PlacedFeature | PlacedFeature;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.LootBuilder
    */
    class LootBuilder implements Internal.FunctionContainer, Internal.ConditionContainer {
        clearFunctions(): void;
        toJson(): Internal.JsonObject;
        addFunction(o: Internal.JsonObject_): this;
        addPool(p: Internal.Consumer_<Internal.LootBuilderPool_>): void;
        clearPools(): void;
        addCondition(o: Internal.JsonObject_): this;
        clearConditions(): void;
        "functions" : Internal.JsonArray;
        "pools" : Internal.JsonArray;
        "type" : string;
        "conditions" : Internal.JsonArray;
        "customId" : ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootBuilder_ = LootBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2ObjectFunction
    */
    interface Boolean2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<boolean, V> {
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Boolean2FloatFunction;
        getOrDefault(arg0: any, arg1: V): V;
        getOrDefault(arg0: boolean, arg1: V): V;
        containsKey(arg0: any): boolean;
        containsKey(arg0: boolean): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2ObjectFunction<V>;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Boolean2CharFunction;
        put(arg0: boolean, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: boolean): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Boolean2DoubleFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Boolean2ObjectFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2ObjectFunction<V>;
        get(arg0: any): V;
        get(arg0: boolean): V;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2ObjectFunction<V>;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Boolean2ByteFunction;
    }
    type Boolean2ObjectFunction_<V> = ((arg0: boolean) => V) | Boolean2ObjectFunction<V>;
    /**
    * @javaClass com.mojang.datafixers.Products$P8
    */
    class Products$P8 <F, T1, T2, T3, T4, T5, T6, T7, T8> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        t6(): Internal.App<F, T6>;
        t7(): Internal.App<F, T7>;
        t8(): Internal.App<F, T8>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.App<F, R>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P8_<F, T1, T2, T3, T4, T5, T6, T7, T8> = Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
    /**
    * @javaClass net.minecraft.util.profiling.metrics.ProfilerMeasured
    */
    interface ProfilerMeasured {
    }
    type ProfilerMeasured_ = ProfilerMeasured;
    /**
    * @javaClass java.awt.BufferCapabilities
    */
    class BufferCapabilities implements Internal.Cloneable {
        isPageFlipping(): boolean;
        getFlipContents(): Internal.BufferCapabilities$FlipContents;
        isFullScreenRequired(): boolean;
        getBackBufferCapabilities(): Internal.ImageCapabilities;
        clone(): any;
        isMultiBufferAvailable(): boolean;
        getFrontBufferCapabilities(): Internal.ImageCapabilities;
        get pageFlipping(): boolean;
        get fullScreenRequired(): boolean;
        get flipContents(): Internal.BufferCapabilities$FlipContents;
        get backBufferCapabilities(): Internal.ImageCapabilities;
        get frontBufferCapabilities(): Internal.ImageCapabilities;
        get multiBufferAvailable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferCapabilities_ = BufferCapabilities;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.NameMap$Builder
    */
    class NameMap$Builder <T> {
        baseNameKey(key: string): Internal.NameMap$Builder<T>;
        color(p: Internal.Function_<T, Internal.Color4I_>): Internal.NameMap$Builder<T>;
        nameKey(p: Internal.Function_<T, string>): Internal.NameMap$Builder<T>;
        icon(p: Internal.Function_<T, Internal.Icon_>): Internal.NameMap$Builder<T>;
        name(p: Internal.Function_<T, net.minecraft.network.chat.Component_>): Internal.NameMap$Builder<T>;
        create(): Internal.NameMap<T>;
        id(p: Internal.Function_<T, string>): Internal.NameMap$Builder<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NameMap$Builder_<T> = NameMap$Builder<T>;
    /**
    * @javaClass net.minecraftforge.event.RegisterCommandsEvent
    */
    class RegisterCommandsEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getDispatcher(): Internal.CommandDispatcher<Internal.CommandSourceStack>;
        getEnvironment(): Internal.Commands$CommandSelection;
        get environment(): Internal.Commands$CommandSelection;
        get listenerList(): Internal.ListenerList;
        get dispatcher(): Internal.CommandDispatcher<Internal.CommandSourceStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegisterCommandsEvent_ = RegisterCommandsEvent;
    /**
    * @javaClass java.io.Serializable
    */
    interface Serializable {
    }
    type Serializable_ = Serializable;
    /**
    * @javaClass java.net.URL
    */
    class URL implements Internal.Serializable {
        static setURLStreamHandlerFactory(arg0: Internal.URLStreamHandlerFactory_): void;
        getDefaultPort(): number;
        openConnection(): Internal.URLConnection;
        openConnection(arg0: Internal.Proxy_): Internal.URLConnection;
        toURI(): Internal.URI;
        getContent(): any;
        getContent(arg0: Internal.Class_<any>[]): any;
        getProtocol(): string;
        getAuthority(): string;
        getFile(): string;
        openStream(): Internal.InputStream;
        toExternalForm(): string;
        getPort(): number;
        getRef(): string;
        sameFile(arg0: Internal.URL_): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        getPath(): string;
        toString(): string;
        getUserInfo(): string;
        getQuery(): string;
        getHost(): string;
        get defaultPort(): number;
        get path(): string;
        get userInfo(): string;
        get protocol(): string;
        get ref(): string;
        get file(): string;
        get port(): number;
        get authority(): string;
        get query(): string;
        get host(): string;
        get content(): any;
        set uRLStreamHandlerFactory(arg0: Internal.URLStreamHandlerFactory_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type URL_ = URL;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent$MissingMappings$Action
    */
    class RegistryEvent$MissingMappings$Action extends Internal.Enum<Internal.RegistryEvent$MissingMappings$Action> {
        static valueOf(arg0: string): this;
        static values(): Internal.RegistryEvent$MissingMappings$Action[];
        static readonly "IGNORE" : Internal.RegistryEvent$MissingMappings$Action;
        static readonly "REMAP" : Internal.RegistryEvent$MissingMappings$Action;
        static readonly "DEFAULT" : Internal.RegistryEvent$MissingMappings$Action;
        static readonly "WARN" : Internal.RegistryEvent$MissingMappings$Action;
        static readonly "FAIL" : Internal.RegistryEvent$MissingMappings$Action;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent$MissingMappings$Action_ = "warn" | "fail" | "default" | "ignore" | "remap" | RegistryEvent$MissingMappings$Action;
    /**
    * @javaClass java.net.URI
    */
    class URI implements Internal.Comparable<Internal.URI>, Internal.Serializable {
        toASCIIString(): string;
        resolve(arg0: string): this;
        resolve(arg0: Internal.URI_): this;
        isOpaque(): boolean;
        compareTo(arg0: Internal.URI_): number;
        getRawAuthority(): string;
        hashCode(): number;
        normalize(): this;
        getPath(): string;
        static create(arg0: string): this;
        relativize(arg0: Internal.URI_): this;
        getQuery(): string;
        getHost(): string;
        toURL(): Internal.URL;
        getScheme(): string;
        getAuthority(): string;
        getRawFragment(): string;
        getRawUserInfo(): string;
        parseServerAuthority(): this;
        getRawSchemeSpecificPart(): string;
        getRawQuery(): string;
        getPort(): number;
        equals(arg0: any): boolean;
        isAbsolute(): boolean;
        toString(): string;
        getFragment(): string;
        getRawPath(): string;
        getUserInfo(): string;
        getSchemeSpecificPart(): string;
        get rawFragment(): string;
        get userInfo(): string;
        get opaque(): boolean;
        get scheme(): string;
        get query(): string;
        get schemeSpecificPart(): string;
        get rawUserInfo(): string;
        get path(): string;
        get fragment(): string;
        get rawPath(): string;
        get rawSchemeSpecificPart(): string;
        get port(): number;
        get rawAuthority(): string;
        get absolute(): boolean;
        get authority(): string;
        get host(): string;
        get rawQuery(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type URI_ = URI;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.QuestFile
    */
    abstract class QuestFile extends Internal.QuestObject {
        clearCachedProgress(): void;
        getAllTasks(): Internal.List<Internal.Task>;
        newID(): number;
        writeData(nbt: Internal.CompoundTag_): void;
        getFolder(): Internal.Path;
        isServerSide(): boolean;
        deleteObject(arg0: number): void;
        getAllObjects(): Internal.Collection<Internal.QuestObjectBase>;
        create(type: Internal.QuestObjectType_, parent: number, extra: Internal.CompoundTag_): Internal.QuestObjectBase;
        clearCachedData(): void;
        getRandomLootCrate(entity: Internal.Entity_, random: Internal.Random_): Internal.LootCrate;
        getQuest(id: number): Internal.Quest;
        readData(nbt: Internal.CompoundTag_): void;
        writeNetDataFull(buffer: Internal.FriendlyByteBuf_): void;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        getID(o: any): number;
        isVisible(data: Internal.TeamData_): boolean;
        refreshGui(): void;
        isLoading(): boolean;
        getChildren(): Internal.Collection<Internal.QuestObject>;
        onStarted(data: Internal.QuestProgressEventData_<any>): void;
        refreshIDMap(): void;
        getAltTitle(): Internal.MutableComponent;
        getVisibleChapters(data: Internal.TeamData_): Internal.List<Internal.Chapter>;
        getBase(id: number): Internal.QuestObjectBase;
        deleteSelf(): void;
        collect<T>(clazz: Internal.Class_<T>): Internal.List<T>;
        collect<T>(filter: Internal.Predicate_<Internal.QuestObjectBase_>): Internal.List<T>;
        readNetDataFull(buffer: Internal.FriendlyByteBuf_): void;
        getReward(id: number): Internal.Reward;
        getSubmitTasks(): Internal.List<Internal.Task>;
        getNullableTeamData(id: Internal.UUID_): Internal.TeamData;
        deleteChildren(): void;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        canEdit(): boolean;
        getSide(): Internal.Env;
        save(): void;
        getDefaultQuestShape(): string;
        getChapter(id: number): Internal.Chapter;
        remove(id: number): Internal.QuestObjectBase;
        getAllData(): Internal.Collection<Internal.TeamData>;
        readDataFull(folder: Internal.Path_): void;
        getRelativeProgressFromChildren(data: Internal.TeamData_): number;
        load(): void;
        getAltIcon(): Internal.Icon;
        writeDataFull(folder: Internal.Path_): void;
        get(id: number): Internal.QuestObject;
        getObjectType(): Internal.QuestObjectType;
        hasUnclaimedRewardsRaw(teamData: Internal.TeamData_, player: Internal.UUID_): boolean;
        getParentID(): number;
        getData(teamId: Internal.UUID_): Internal.TeamData;
        getData(team: Internal.TeamBase_): Internal.TeamData;
        getData(player: Internal.Entity_): Internal.TeamData;
        getLootCrate(id: string): Internal.LootCrate;
        updateLootCrates(): void;
        refreshJEI(): number;
        getAllChapters(): Internal.List<Internal.Chapter>;
        getFirstVisibleChapter(data: Internal.TeamData_): Internal.Chapter;
        getRewardTable(id: number): Internal.RewardTable;
        addData(data: Internal.TeamData_, override: boolean): void;
        getQuestFile(): this;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        readID(id: number): number;
        readID(tag: Internal.Tag_): number;
        getChapterGroup(id: number): Internal.ChapterGroup;
        getTask(id: number): Internal.Task;
        "defaultTeamConsumeItems" : boolean;
        "pauseGame" : boolean;
        "defaultRewardAutoClaim" : Internal.RewardAutoClaim;
        readonly "chapterGroups" : Internal.List<Internal.ChapterGroup>;
        readonly "defaultChapterGroup" : Internal.DefaultChapterGroup;
        "gridScale" : number;
        readonly "emergencyItems" : Internal.List<Internal.ItemStack>;
        "defaultQuestDisableJEI" : boolean;
        readonly "rewardTables" : Internal.List<Internal.RewardTable>;
        "defaultQuestShape" : string;
        readonly "rewardTypeIds" : Internal.Int2ObjectOpenHashMap<Internal.RewardType>;
        "emergencyItemsCooldown" : number;
        "dropLootCrates" : boolean;
        readonly "lootCrateNoDrop" : Internal.EntityWeight;
        "disableGui" : boolean;
        readonly "taskTypeIds" : Internal.Int2ObjectOpenHashMap<Internal.TaskType>;
        "lockMessage" : string;
        static "VERSION" : 13;
        "defaultRewardTeam" : boolean;
        "fileVersion" : number;
        get side(): Internal.Env;
        get allTasks(): Internal.List<Internal.Task>;
        get questFile(): this;
        get loading(): boolean;
        get allObjects(): Internal.Collection<Internal.QuestObjectBase>;
        get parentID(): number;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        get serverSide(): boolean;
        get allData(): Internal.Collection<Internal.TeamData>;
        get folder(): Internal.Path;
        get children(): Internal.Collection<Internal.QuestObject>;
        get allChapters(): Internal.List<Internal.Chapter>;
        get altTitle(): Internal.MutableComponent;
        get submitTasks(): Internal.List<Internal.Task>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestFile_ = QuestFile;
    /**
    * @javaClass java.lang.module.ModuleFinder
    */
    interface ModuleFinder {
        compose(... arg0: Internal.ModuleFinder_[]): this;
        find(arg0: string): Internal.Optional<Internal.ModuleReference>;
        of(... arg0: Internal.Path_[]): this;
        ofSystem(): this;
        findAll(): Internal.Set<Internal.ModuleReference>;
    }
    type ModuleFinder_ = ModuleFinder;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2ShortFunction
    */
    interface Float2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2ShortFunction;
    }
    type Float2ShortFunction_ = ((arg0: number) => number) | Float2ShortFunction;
    /**
    * @javaClass java.util.jar.Attributes$Name
    */
    class Attributes$Name {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        static readonly "EXTENSION_NAME" : Internal.Attributes$Name;
        static readonly "MULTI_RELEASE" : Internal.Attributes$Name;
        static readonly "EXTENSION_INSTALLATION" : Internal.Attributes$Name;
        static readonly "IMPLEMENTATION_VERSION" : Internal.Attributes$Name;
        static readonly "IMPLEMENTATION_TITLE" : Internal.Attributes$Name;
        static readonly "SIGNATURE_VERSION" : Internal.Attributes$Name;
        static readonly "CLASS_PATH" : Internal.Attributes$Name;
        static readonly "MAIN_CLASS" : Internal.Attributes$Name;
        static readonly "SEALED" : Internal.Attributes$Name;
        static readonly "IMPLEMENTATION_URL" : Internal.Attributes$Name;
        static readonly "IMPLEMENTATION_VENDOR_ID" : Internal.Attributes$Name;
        static readonly "SPECIFICATION_VERSION" : Internal.Attributes$Name;
        static readonly "EXTENSION_LIST" : Internal.Attributes$Name;
        static readonly "SPECIFICATION_VENDOR" : Internal.Attributes$Name;
        static readonly "CONTENT_TYPE" : Internal.Attributes$Name;
        static readonly "SPECIFICATION_TITLE" : Internal.Attributes$Name;
        static readonly "MANIFEST_VERSION" : Internal.Attributes$Name;
        static readonly "IMPLEMENTATION_VENDOR" : Internal.Attributes$Name;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Attributes$Name_ = Attributes$Name;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.PotionBuilder
    */
    class PotionBuilder extends Internal.BuilderBase<Internal.Potion> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Potion>;
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number): this;
        effect(effect: Internal.MobEffect_, duration: number): this;
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, visible: boolean, showIcon: boolean): this;
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, visible: boolean, showIcon: boolean, hiddenEffect: Internal.MobEffectInstance_): this;
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, visible: boolean): this;
        effect(effect: Internal.MobEffect_): this;
        addEffect(effect: Internal.MobEffectInstance_): this;
        createObject(): Internal.Potion;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Potion>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionBuilder_ = PotionBuilder;
    /**
    * @javaClass java.util.function.ObjIntConsumer
    */
    interface ObjIntConsumer <T> {
        accept(arg0: T, arg1: number): void;
    }
    type ObjIntConsumer_<T> = ((arg0: T, arg1: number) => void) | ObjIntConsumer<T>;
    /**
    * @javaClass com.jozufozu.flywheel.api.struct.StructType
    */
    interface StructType <S> {
        getLayout(): Internal.BufferLayout;
        create(): S;
    }
    type StructType_<S> = StructType<S>;
    /**
    * @javaClass net.minecraftforge.forgespi.language.ModFileScanData$ClassData
    */
    class ModFileScanData$ClassData extends Internal.Record {
        parent(): org.objectweb.asm.Type;
        interfaces(): Internal.Set<org.objectweb.asm.Type>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        clazz(): org.objectweb.asm.Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModFileScanData$ClassData_ = ModFileScanData$ClassData;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2ByteFunction
    */
    interface Byte2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2ByteFunction;
    }
    type Byte2ByteFunction_ = ((arg0: number) => number) | Byte2ByteFunction;
    /**
    * @javaClass javax.accessibility.AccessibleText
    */
    interface AccessibleText {
        getSelectionStart(): number;
        getSelectedText(): string;
        getIndexAtPoint(arg0: Internal.Point_): number;
        getCharCount(): number;
        getCharacterAttribute(arg0: number): Internal.AttributeSet;
        getBeforeIndex(arg0: number, arg1: number): string;
        getAfterIndex(arg0: number, arg1: number): string;
        getSelectionEnd(): number;
        getAtIndex(arg0: number, arg1: number): string;
        getCaretPosition(): number;
        getCharacterBounds(arg0: number): Internal.Rectangle;
    }
    type AccessibleText_ = AccessibleText;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.PlayerDataJS
    */
    abstract class PlayerDataJS <E, P> implements Internal.WithAttachedData {
        getPlayer(): P;
        getMinecraftPlayer(): E;
        getName(): string;
        getProfile(): Internal.GameProfile;
        hasClientMod(): boolean;
        getId(): Internal.UUID;
        getOverworld(): Internal.LevelJS;
        getData(): Internal.AttachedData;
        get data(): Internal.AttachedData;
        get minecraftPlayer(): E;
        get profile(): Internal.GameProfile;
        get name(): string;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get player(): P;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerDataJS_<E, P> = PlayerDataJS<E, P>;
    /**
    * @javaClass java.util.function.DoubleToIntFunction
    */
    interface DoubleToIntFunction {
        applyAsInt(arg0: number): number;
    }
    type DoubleToIntFunction_ = ((arg0: number) => number) | DoubleToIntFunction;
    /**
    * @javaClass java.awt.image.VolatileImage
    */
    abstract class VolatileImage extends Internal.Image implements Internal.Transparency {
        contentsLost(): boolean;
        getHeight(): number;
        getSource(): Internal.ImageProducer;
        createGraphics(): Internal.Graphics2D;
        getWidth(): number;
        getGraphics(): Internal.Graphics;
        getCapabilities(): Internal.ImageCapabilities;
        getSnapshot(): Internal.BufferedImage;
        getTransparency(): number;
        validate(arg0: Internal.GraphicsConfiguration_): number;
        static readonly "IMAGE_OK" : 0;
        static readonly "IMAGE_RESTORED" : 1;
        static readonly "IMAGE_INCOMPATIBLE" : 2;
        get capabilities(): Internal.ImageCapabilities;
        get transparency(): number;
        get width(): number;
        get source(): Internal.ImageProducer;
        get graphics(): Internal.Graphics;
        get snapshot(): Internal.BufferedImage;
        get height(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VolatileImage_ = VolatileImage;
    /**
    * @javaClass io.netty.channel.ChannelHandlerContext
    */
    interface ChannelHandlerContext extends Internal.AttributeMap, Internal.ChannelInboundInvoker, Internal.ChannelOutboundInvoker {
        handler(): Internal.ChannelHandler;
        fireChannelInactive(): this;
        read(): this;
        fireChannelReadComplete(): this;
        fireChannelWritabilityChanged(): this;
        channel(): io.netty.channel.Channel;
        hasAttr<T>(arg0: Internal.AttributeKey_<T>): boolean;
        fireExceptionCaught(arg0: Internal.Throwable_): this;
        fireChannelActive(): this;
        fireChannelRegistered(): this;
        pipeline(): Internal.ChannelPipeline;
        fireChannelRead(arg0: any): this;
        isRemoved(): boolean;
        flush(): this;
        executor(): Internal.EventExecutor;
        name(): string;
        fireUserEventTriggered(arg0: any): this;
        alloc(): Internal.ByteBufAllocator;
        fireChannelUnregistered(): this;
        attr<T>(arg0: Internal.AttributeKey_<T>): io.netty.util.Attribute<T>;
    }
    type ChannelHandlerContext_ = ChannelHandlerContext;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.EntityPotionEffectsJS
    */
    class EntityPotionEffectsJS {
        add(mobEffect: Internal.MobEffect_, duration: number): void;
        add(mobEffect: Internal.MobEffect_, duration: number, amplifier: number): void;
        add(mobEffect: Internal.MobEffect_): void;
        add(mobEffect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, showParticles: boolean): void;
        getDuration(mobEffect: Internal.MobEffect_): number;
        isApplicable(effect: Internal.MobEffectInstance_): boolean;
        clear(): void;
        getActive(mobEffect: Internal.MobEffect_): Internal.MobEffectInstance;
        getActive(): Internal.Collection<Internal.MobEffectInstance>;
        isActive(mobEffect: Internal.MobEffect_): boolean;
        getMap(): Internal.Map<Internal.MobEffect, Internal.MobEffectInstance>;
        get active(): Internal.Collection<Internal.MobEffectInstance>;
        get map(): Internal.Map<Internal.MobEffect, Internal.MobEffectInstance>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityPotionEffectsJS_ = EntityPotionEffectsJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.ConditionalFunction
    */
    class ConditionalFunction implements Internal.FunctionContainer, Internal.ConditionContainer {
        addFunction(o: Internal.JsonObject_): this;
        addCondition(o: Internal.JsonObject_): this;
        "function" : Internal.JsonObject;
        "conditions" : Internal.JsonArray;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConditionalFunction_ = ConditionalFunction;
    /**
    * @javaClass java.util.stream.LongStream$LongMapMultiConsumer
    */
    interface LongStream$LongMapMultiConsumer {
        accept(arg0: number, arg1: Internal.LongConsumer_): void;
    }
    type LongStream$LongMapMultiConsumer_ = ((arg0: number, arg1: Internal.LongConsumer) => void) | LongStream$LongMapMultiConsumer;
    /**
    * @javaClass java.util.regex.MatchResult
    */
    interface MatchResult {
        groupCount(): number;
        start(arg0: number): number;
        start(): number;
        end(arg0: number): number;
        end(): number;
        group(): string;
        group(arg0: number): string;
    }
    type MatchResult_ = MatchResult;
    /**
    * @javaClass net.minecraft.world.level.storage.LevelResource
    */
    class LevelResource {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LevelResource_ = LevelResource;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootTables
    */
    class LootTables extends Internal.SimpleJsonResourceReloadListener implements Internal.LootTablesKJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootTables_ = LootTables;
    /**
    * Fired when you need to modify properties of a block.
    * @javaClass dev.latvian.mods.kubejs.block.BlockModificationEventJS
    */
    class BlockModificationEventJS extends Internal.EventJS {
        modify(predicate: BlockStatePredicate_, c: Internal.Consumer_<Internal.BlockModificationProperties_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to modify properties of a block.
    */
    type BlockModificationEventJS_ = BlockModificationEventJS;
    /**
    * @javaClass net.minecraftforge.event.entity.player.EntityItemPickupEvent
    */
    class EntityItemPickupEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        getItem(): Internal.ItemEntity;
        isCancelable(): boolean;
        get item(): Internal.ItemEntity;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityItemPickupEvent_ = EntityItemPickupEvent;
    /**
    * @javaClass java.awt.Composite
    */
    interface Composite {
        createContext(arg0: Internal.ColorModel_, arg1: Internal.ColorModel_, arg2: Internal.RenderingHints_): Internal.CompositeContext;
    }
    type Composite_ = ((arg0: Internal.ColorModel, arg1: Internal.ColorModel, arg2: Internal.RenderingHints) => Internal.CompositeContext) | Composite;
    /**
    * @javaClass com.mojang.serialization.DataResult
    */
    class DataResult <R> implements Internal.App<Internal.DataResult$Mu, R> {
        apply2<R2, S>(arg0: Internal.BiFunction_<R, R2, S>, arg1: Internal.DataResult_<R2>): Internal.DataResult<S>;
        apply3<R2, R3, S>(arg0: Internal.Function3_<R, R2, R3, S>, arg1: Internal.DataResult_<R2>, arg2: Internal.DataResult_<R3>): Internal.DataResult<S>;
        static instance(): Internal.DataResult$Instance;
        setPartial(arg0: Internal.Supplier_<R>): Internal.DataResult<R>;
        setPartial(arg0: R): Internal.DataResult<R>;
        addLifecycle(arg0: Internal.Lifecycle_): Internal.DataResult<R>;
        static partialGet<K, V>(arg0: Internal.Function_<K, V>, arg1: Internal.Supplier_<string>): Internal.Function<K, Internal.DataResult<V>>;
        static error<R>(arg0: string, arg1: R): Internal.DataResult<R>;
        error(): Internal.Optional<Internal.DataResult$PartialResult<R>>;
        static error<R>(arg0: string, arg1: R, arg2: Internal.Lifecycle_): Internal.DataResult<R>;
        static error<R>(arg0: string): Internal.DataResult<R>;
        static error<R>(arg0: string, arg1: Internal.Lifecycle_): Internal.DataResult<R>;
        apply2stable<R2, S>(arg0: Internal.BiFunction_<R, R2, S>, arg1: Internal.DataResult_<R2>): Internal.DataResult<S>;
        ap<R2>(arg0: Internal.DataResult_<Internal.Function_<R, R2>>): Internal.DataResult<R2>;
        promotePartial(arg0: Internal.Consumer_<string>): Internal.DataResult<R>;
        lifecycle(): Internal.Lifecycle;
        flatMap<R2>(arg0: Internal.Function_<R, Internal.DataResult_<R2>>): Internal.DataResult<R2>;
        result(): Internal.Optional<R>;
        mapError(arg0: Internal.UnaryOperator_<string>): Internal.DataResult<R>;
        setLifecycle(arg0: Internal.Lifecycle_): Internal.DataResult<R>;
        static success<R>(arg0: R, arg1: Internal.Lifecycle_): Internal.DataResult<R>;
        static success<R>(arg0: R): Internal.DataResult<R>;
        static unbox<R>(arg0: Internal.App_<Internal.DataResult$Mu_, R>): Internal.DataResult<R>;
        hashCode(): number;
        getOrThrow(arg0: boolean, arg1: Internal.Consumer_<string>): R;
        equals(arg0: any): boolean;
        get(): Internal.Either<R, Internal.DataResult$PartialResult<R>>;
        toString(): string;
        map<T>(arg0: Internal.Function_<R, T>): Internal.DataResult<T>;
        resultOrPartial(arg0: Internal.Consumer_<string>): Internal.Optional<R>;
        set partial(arg0: Internal.Supplier_<R>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataResult_<R> = DataResult<R>;
    /**
    * @javaClass java.util.stream.IntStream$Builder
    */
    interface IntStream$Builder extends Internal.IntConsumer {
        add(arg0: number): this;
        build(): Internal.IntStream;
        accept(arg0: number): void;
    }
    type IntStream$Builder_ = IntStream$Builder;
    /**
    * @javaClass java.lang.invoke.MethodType
    */
    class MethodType implements Internal.Constable, Internal.TypeDescriptor$OfMethod<Internal.Class<any>, Internal.MethodType>, Internal.Serializable {
        toMethodDescriptorString(): string;
        dropParameterTypes(arg0: number, arg1: number): this;
        changeReturnType(arg0: Internal.Class_<any>): this;
        static fromMethodDescriptorString(arg0: string, arg1: Internal.ClassLoader_): this;
        lastParameterType(): typeof any;
        describeConstable(): Internal.Optional<Internal.MethodTypeDesc>;
        changeParameterType(arg0: number, arg1: Internal.Class_<any>): this;
        unwrap(): this;
        hasWrappers(): boolean;
        static methodType(arg0: Internal.Class_<any>, arg1: Internal.Class_<any>[]): this;
        static methodType(arg0: Internal.Class_<any>, arg1: Internal.MethodType_): this;
        static methodType(arg0: Internal.Class_<any>, arg1: Internal.Class_<any>, ... arg2: Internal.Class_<any>[]): this;
        static methodType(arg0: Internal.Class_<any>, arg1: Internal.List_<Internal.Class_<any>>): this;
        static methodType(arg0: Internal.Class_<any>, arg1: Internal.Class_<any>): this;
        static methodType(arg0: Internal.Class_<any>): this;
        parameterArray(): Internal.Class<any>[];
        hashCode(): number;
        appendParameterTypes(arg0: Internal.List_<Internal.Class_<any>>): this;
        appendParameterTypes(... arg0: Internal.Class_<any>[]): this;
        parameterType(arg0: number): typeof any;
        erase(): this;
        parameterCount(): number;
        descriptorString(): string;
        insertParameterTypes(arg0: number, arg1: Internal.List_<Internal.Class_<any>>): this;
        insertParameterTypes(arg0: number, ... arg1: Internal.Class_<any>[]): this;
        generic(): this;
        hasPrimitives(): boolean;
        equals(arg0: any): boolean;
        parameterList(): Internal.List<Internal.Class<any>>;
        toString(): string;
        static genericMethodType(arg0: number, arg1: boolean): this;
        static genericMethodType(arg0: number): this;
        wrap(): this;
        returnType(): typeof any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MethodType_ = MethodType;
    /**
    * @javaClass net.minecraftforge.event.furnace.FurnaceFuelBurnTimeEvent
    */
    class FurnaceFuelBurnTimeEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        setBurnTime(arg0: number): void;
        getRecipeType(): Internal.RecipeType<any>;
        getBurnTime(): number;
        getItemStack(): Internal.ItemStack;
        isCancelable(): boolean;
        get itemStack(): Internal.ItemStack;
        get cancelable(): boolean;
        get recipeType(): Internal.RecipeType<any>;
        get listenerList(): Internal.ListenerList;
        get burnTime(): number;
        set burnTime(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FurnaceFuelBurnTimeEvent_ = FurnaceFuelBurnTimeEvent;
    /**
    * @javaClass javax.accessibility.AccessibleEditableText
    */
    interface AccessibleEditableText extends Internal.AccessibleText {
        replaceText(arg0: number, arg1: number, arg2: string): void;
        cut(arg0: number, arg1: number): void;
        selectText(arg0: number, arg1: number): void;
        setTextContents(arg0: string): void;
        insertTextAtIndex(arg0: number, arg1: string): void;
        paste(arg0: number): void;
        setAttributes(arg0: number, arg1: number, arg2: Internal.AttributeSet_): void;
        delete(arg0: number, arg1: number): void;
        getTextRange(arg0: number, arg1: number): string;
    }
    type AccessibleEditableText_ = AccessibleEditableText;
    /**
    * @javaClass net.minecraftforge.event.entity.living.EnderManAngerEvent
    */
    class EnderManAngerEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.Player;
        isCancelable(): boolean;
        getEntity(): Internal.EnderMan;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get entity(): Internal.EnderMan;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnderManAngerEvent_ = EnderManAngerEvent;
    /**
    * @javaClass net.minecraft.world.level.levelgen.placement.PlacementModifier
    */
    abstract class PlacementModifier {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlacementModifier_ = PlacementModifier;
    /**
    * @javaClass com.google.common.collect.UnmodifiableIterator
    */
    abstract class UnmodifiableIterator <E> implements Internal.Iterator<E> {
        remove(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnmodifiableIterator_<E> = UnmodifiableIterator<E>;
    /**
    * @javaClass com.mojang.datafixers.util.Pair$Mu
    */
    class Pair$Mu <S> implements Internal.K1 {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Pair$Mu_<S> = Pair$Mu<S>;
    /**
    * @javaClass net.minecraft.client.resources.model.Material
    */
    class Material {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Material_ = Material;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedRegistryEntryExtension
    */
    interface InjectedRegistryEntryExtension <T> {
        arch$registryName(): ResourceLocation;
        arch$holder(): Internal.Holder<T>;
    }
    type InjectedRegistryEntryExtension_<T> = (() => Internal.Holder<T>) | InjectedRegistryEntryExtension<T>;
    /**
    * @javaClass net.minecraftforge.event.VanillaGameEvent
    */
    class VanillaGameEvent extends net.minecraftforge.eventbus.api.Event {
        getLevel(): Internal.Level;
        getListenerList(): Internal.ListenerList;
        getVanillaEvent(): Internal.GameEvent;
        getEventPosition(): BlockPos;
        isCancelable(): boolean;
        getCause(): Internal.Entity;
        get cancelable(): boolean;
        get level(): Internal.Level;
        get listenerList(): Internal.ListenerList;
        get cause(): Internal.Entity;
        get vanillaEvent(): Internal.GameEvent;
        get eventPosition(): BlockPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VanillaGameEvent_ = VanillaGameEvent;
    /**
    * @javaClass java.security.AccessControlContext
    */
    class AccessControlContext {
        checkPermission(arg0: Internal.Permission_): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        getDomainCombiner(): Internal.DomainCombiner;
        get domainCombiner(): Internal.DomainCombiner;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessControlContext_ = AccessControlContext;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.core.ItemFTBL
    */
    interface ItemFTBL {
        setCraftingRemainingItemFTBL(arg0: Internal.Item_): void;
    }
    type ItemFTBL_ = ((arg0: Internal.Item) => void) | ItemFTBL;
    /**
    * @javaClass net.minecraft.client.gui.components.events.AbstractContainerEventHandler
    */
    abstract class AbstractContainerEventHandler extends Internal.GuiComponent implements Internal.ContainerEventHandler {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractContainerEventHandler_ = AbstractContainerEventHandler;
    /**
    * @javaClass mezz.jei.api.recipe.RecipeIngredientRole
    */
    class RecipeIngredientRole extends Internal.Enum<Internal.RecipeIngredientRole> {
        static valueOf(arg0: string): this;
        static values(): Internal.RecipeIngredientRole[];
        static readonly "INPUT" : Internal.RecipeIngredientRole;
        static readonly "RENDER_ONLY" : Internal.RecipeIngredientRole;
        static readonly "OUTPUT" : Internal.RecipeIngredientRole;
        static readonly "CATALYST" : Internal.RecipeIngredientRole;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeIngredientRole_ = "output" | "input" | "catalyst" | "render_only" | RecipeIngredientRole;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.task.TaskType
    */
    class TaskType extends Internal.RegistryEntry<Internal.TaskType> {
        getDisplayName(): net.minecraft.network.chat.Component;
        setGuiProvider(p: Internal.TaskType$GuiProvider_): this;
        getTypeForNBT(): string;
        getGuiProvider(): Internal.TaskType$GuiProvider;
        setDisplayName(name: net.minecraft.network.chat.Component_): this;
        static createTask(quest: Internal.Quest_, id: string): Internal.Task;
        getIcon(): Internal.Icon;
        "intId" : number;
        readonly "provider" : ((arg0: Internal.Quest) => Internal.Task);
        readonly "id" : ResourceLocation;
        get displayName(): net.minecraft.network.chat.Component;
        get guiProvider(): Internal.TaskType$GuiProvider;
        get icon(): Internal.Icon;
        get typeForNBT(): string;
        set displayName(name: net.minecraft.network.chat.Component_);
        set guiProvider(p: Internal.TaskType$GuiProvider_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TaskType_ = TaskType;
    /**
    * @javaClass java.net.URLStreamHandlerFactory
    */
    interface URLStreamHandlerFactory {
        createURLStreamHandler(arg0: string): Internal.URLStreamHandler;
    }
    type URLStreamHandlerFactory_ = ((arg0: string) => Internal.URLStreamHandler) | URLStreamHandlerFactory;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.VillagerProfessionBuilder
    */
    class VillagerProfessionBuilder extends Internal.BuilderBase<Internal.VillagerProfession> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.VillagerProfession>;
        poiType(t: Internal.PoiType_): this;
        secondaryPoi(t: Internal.Block_[]): this;
        workSound(t: Internal.SoundEvent_): this;
        requestedItems(t: Internal.Item_[]): this;
        createObject(): Internal.VillagerProfession;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.VillagerProfession>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VillagerProfessionBuilder_ = VillagerProfessionBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.painter.screen.ScreenPaintEventJS
    */
    class ScreenPaintEventJS extends Internal.PaintEventJS implements Internal.UnitVariables {
        getVariables(): Internal.VariableSet;
        rawText(text: Internal.FormattedCharSequence_, x: number, y: number, color: number, shadow: boolean): void;
        scale(x: number, y: number): void;
        scale(scale: number): void;
        alignX(x: number, w: number, alignX: number): number;
        rectangle(x: number, y: number, z: number, w: number, h: number, color: number, u0: number, v0: number, u1: number, v1: number): void;
        rectangle(x: number, y: number, z: number, w: number, h: number, color: number): void;
        text(text: net.minecraft.network.chat.Component_, x: number, y: number, color: number, shadow: boolean): void;
        rotateRad(angle: number): void;
        alignY(y: number, h: number, alignY: number): number;
        rotateDeg(angle: number): void;
        translate(x: number, y: number): void;
        readonly "mouseX" : number;
        readonly "mouseY" : number;
        readonly "width" : number;
        readonly "inventory" : boolean;
        readonly "height" : number;
        get variables(): Internal.VariableSet;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenPaintEventJS_ = ScreenPaintEventJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.events.SpecialSpoutHandlerEvent
    */
    class SpecialSpoutHandlerEvent extends Internal.EventJS {
        addSpoutHandler(path: ResourceLocation_, block: BlockStatePredicate_, handler: Internal.SpecialSpoutHandlerEvent$SpoutHandler_): void;
        static readonly "ID" : "create.spout.special";
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SpecialSpoutHandlerEvent_ = SpecialSpoutHandlerEvent;
    /**
    * @javaClass com.prunoideae.recipe.OrechidRecipeJS
    */
    class OrechidRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OrechidRecipeJS_ = OrechidRecipeJS;
    /**
    * @javaClass net.minecraftforge.event.LootTableLoadEvent
    */
    class LootTableLoadEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getName(): ResourceLocation;
        getTable(): Internal.LootTable;
        setTable(arg0: Internal.LootTable_): void;
        getLootTableManager(): Internal.LootTables;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get name(): ResourceLocation;
        get lootTableManager(): Internal.LootTables;
        get table(): Internal.LootTable;
        set table(arg0: Internal.LootTable_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootTableLoadEvent_ = LootTableLoadEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.WoodenButtonBlockBuilder
    */
    class WoodenButtonBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WoodenButtonBlockBuilder_ = WoodenButtonBlockBuilder;
    /**
    * @javaClass com.mojang.brigadier.SingleRedirectModifier
    */
    interface SingleRedirectModifier <S> {
        apply(arg0: Internal.CommandContext_<S>): S;
    }
    type SingleRedirectModifier_<S> = ((arg0: Internal.CommandContext<S>) => S) | SingleRedirectModifier<S>;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.VillagerTypeBuilder
    */
    class VillagerTypeBuilder extends Internal.BuilderBase<Internal.VillagerType> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.VillagerType>;
        createObject(): Internal.VillagerType;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.VillagerType>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VillagerTypeBuilder_ = VillagerTypeBuilder;
    /**
    * @javaClass io.netty.buffer.AbstractReferenceCountedByteBuf
    */
    abstract class AbstractReferenceCountedByteBuf extends Internal.AbstractByteBuf {
        refCnt(): number;
        release(): boolean;
        release(arg0: number): boolean;
        retain(): Internal.ByteBuf;
        retain(arg0: number): Internal.ByteBuf;
        touch(arg0: any): Internal.ByteBuf;
        touch(): Internal.ByteBuf;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractReferenceCountedByteBuf_ = AbstractReferenceCountedByteBuf;
    /**
    * @javaClass com.mojang.serialization.MapCodec$ResultFunction
    */
    interface MapCodec$ResultFunction <A> {
        apply<T>(arg0: Internal.DynamicOps_<T>, arg1: Internal.MapLike_<T>, arg2: Internal.DataResult_<A>): Internal.DataResult<A>;
        coApply<T>(arg0: Internal.DynamicOps_<T>, arg1: A, arg2: Internal.RecordBuilder_<T>): Internal.RecordBuilder<T>;
    }
    type MapCodec$ResultFunction_<A> = MapCodec$ResultFunction<A>;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptPackInfo
    */
    class ScriptPackInfo {
        readonly "displayName" : net.minecraft.network.chat.Component;
        readonly "namespace" : string;
        readonly "pathStart" : string;
        readonly "scripts" : Internal.List<Internal.ScriptFileInfo>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptPackInfo_ = ScriptPackInfo;
    /**
    * @javaClass net.minecraft.client.renderer.block.model.ItemTransforms$TransformType
    */
    class ItemTransforms$TransformType extends Internal.Enum<Internal.ItemTransforms$TransformType> implements Internal.IExtensibleEnum {
        getSerializeName(): string;
        isModded(): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.ItemTransforms$TransformType[];
        static create(arg0: string, arg1: ResourceLocation_): this;
        static create(arg0: string, arg1: ResourceLocation_, arg2: Internal.ItemTransforms$TransformType_): this;
        fallback(): this;
        static readonly "HEAD" : Internal.ItemTransforms$TransformType;
        static readonly "THIRD_PERSON_LEFT_HAND" : Internal.ItemTransforms$TransformType;
        static readonly "THIRD_PERSON_RIGHT_HAND" : Internal.ItemTransforms$TransformType;
        static readonly "FIRST_PERSON_RIGHT_HAND" : Internal.ItemTransforms$TransformType;
        static readonly "GROUND" : Internal.ItemTransforms$TransformType;
        static readonly "FIRST_PERSON_LEFT_HAND" : Internal.ItemTransforms$TransformType;
        static readonly "FIXED" : Internal.ItemTransforms$TransformType;
        static readonly "GUI" : Internal.ItemTransforms$TransformType;
        static readonly "NONE" : Internal.ItemTransforms$TransformType;
        get modded(): boolean;
        get serializeName(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemTransforms$TransformType_ = "head" | "third_person_left_hand" | "gui" | "ground" | "fixed" | "none" | "third_person_right_hand" | "first_person_left_hand" | "first_person_right_hand" | ItemTransforms$TransformType;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2IntFunction
    */
    interface Char2IntFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2IntFunction;
    }
    type Char2IntFunction_ = ((arg0: string) => number) | Char2IntFunction;
    /**
    * @javaClass com.mojang.brigadier.exceptions.CommandSyntaxException
    */
    class CommandSyntaxException extends Internal.Exception {
        getCursor(): number;
        getType(): Internal.CommandExceptionType;
        getRawMessage(): Internal.Message;
        getMessage(): string;
        getInput(): string;
        getContext(): string;
        static "BUILT_IN_EXCEPTIONS" : Internal.BuiltInExceptionProvider;
        static "ENABLE_COMMAND_STACK_TRACES" : false;
        static readonly "CONTEXT_AMOUNT" : 10;
        get cursor(): number;
        get input(): string;
        get context(): string;
        get type(): Internal.CommandExceptionType;
        get message(): string;
        get rawMessage(): Internal.Message;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandSyntaxException_ = CommandSyntaxException;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.HandheldItemBuilder
    */
    abstract class HandheldItemBuilder extends Internal.ItemBuilder {
        attackDamageBaseline(f: number): this;
        speedBaseline(f: number): this;
        tier(t: Internal.Tier_): this;
        attackDamageBonus(f: number): this;
        modifyTier(callback: Internal.Consumer_<Internal.MutableToolTier_>): this;
        speed(f: number): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HandheldItemBuilder_ = HandheldItemBuilder;
    /**
    * @javaClass java.awt.MenuContainer
    */
    interface MenuContainer {
        getFont(): Internal.Font;
        remove(arg0: Internal.MenuComponent_): void;
        postEvent(arg0: Internal.Event_): boolean;
    }
    type MenuContainer_ = MenuContainer;
    /**
    * Fired when a living entity is hurt.
    *
    * If cancelled, the attack will do no effect.
    * @javaClass dev.latvian.mods.kubejs.entity.LivingEntityHurtEventJS
    */
    class LivingEntityHurtEventJS extends Internal.LivingEntityEventJS {
        getDamage(): number;
        getSource(): Internal.DamageSource;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get damage(): number;
        get source(): Internal.DamageSource;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when a living entity is hurt.
    *
    * If cancelled, the attack will do no effect.
    */
    type LivingEntityHurtEventJS_ = LivingEntityHurtEventJS;
    /**
    * @javaClass java.util.Hashtable
    */
    class Hashtable <K, V> extends Internal.Dictionary<K, V> implements Internal.Map<K, V>, Internal.Cloneable, Internal.Serializable {
        getOrDefault(arg0: any, arg1: V): V;
        keys(): Internal.Enumeration<K>;
        computeIfAbsent(arg0: K, arg1: Internal.Function_<K, V>): V;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replaceAll(arg0: Internal.BiFunction_<K, V, V>): void;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: any, arg1: any): boolean;
        compute(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        hashCode(): number;
        putAll(arg0: Internal.Map_<K, V>): void;
        merge(arg0: K, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        get(arg0: any): V;
        keySet(): Internal.Set<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        isEmpty(): boolean;
        clear(): void;
        contains(arg0: any): boolean;
        computeIfPresent(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        size(): number;
        elements(): Internal.Enumeration<V>;
        equals(arg0: any): boolean;
        clone(): any;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Hashtable_<K, V> = Hashtable<K, V>;
    /**
    * Fired when a living entity is about to die.
    *
    * If the entity's HP <= 0, the entity will fall and get removed.
    *
    * If the event is not cancelled, the entity will die and drop loots.
    * @javaClass dev.latvian.mods.kubejs.entity.LivingEntityDeathEventJS
    */
    class LivingEntityDeathEventJS extends Internal.LivingEntityEventJS {
        getSource(): Internal.DamageSource;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get source(): Internal.DamageSource;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when a living entity is about to die.
    *
    * If the entity's HP <= 0, the entity will fall and get removed.
    *
    * If the event is not cancelled, the entity will die and drop loots.
    */
    type LivingEntityDeathEventJS_ = LivingEntityDeathEventJS;
    /**
    * @javaClass java.util.List
    */
    interface List <E> extends Internal.Collection<E> ,Array<E> {
        add(arg0: number, arg1: E): void;
        add(arg0: E): boolean;
        subList(arg0: number, arg1: number): Internal.List<E>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator_<E>): void;
        copyOf<E>(arg0: Internal.Collection_<E>): Internal.List<E>;
        replaceAll(arg0: Internal.UnaryOperator_<E>): void;
        remove(arg0: any): boolean;
        remove(arg0: number): E;
        lastIndexOf(arg0: any): number;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection_<E>): boolean;
        addAll(arg0: Internal.Collection_<E>): boolean;
        hashCode(): number;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E): Internal.List<E>;
        of<E>(arg0: E): Internal.List<E>;
        of<E>(): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): Internal.List<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): Internal.List<E>;
        of<E>(... arg0: E[]): Internal.List<E>;
        equals(arg0: any): boolean;
        get(arg0: number): E;
        toArray(): any[];
        toArray<T>(arg0: T[]): T[];
        listIterator(arg0: number): Internal.ListIterator<E>;
        listIterator(): Internal.ListIterator<E>;
        indexOf(arg0: any): number;
        retainAll(arg0: Internal.Collection_<any>): boolean;
    }
    type List_<E> = List<E>;
    /**
    * @javaClass java.awt.image.WritableRaster
    */
    class WritableRaster extends Internal.Raster {
        getWritableParent(): this;
        setSamples(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number[]): void;
        setPixel(arg0: number, arg1: number, arg2: number[]): void;
        createWritableChild(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number[]): this;
        setPixels(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[]): void;
        createWritableTranslatedChild(arg0: number, arg1: number): this;
        setRect(arg0: number, arg1: number, arg2: Internal.Raster_): void;
        setRect(arg0: Internal.Raster_): void;
        setDataElements(arg0: number, arg1: number, arg2: any): void;
        setDataElements(arg0: number, arg1: number, arg2: Internal.Raster_): void;
        setDataElements(arg0: number, arg1: number, arg2: number, arg3: number, arg4: any): void;
        setSample(arg0: number, arg1: number, arg2: number, arg3: number): void;
        get writableParent(): this;
        set rect(arg0: Internal.Raster_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WritableRaster_ = WritableRaster;
    /**
    * @javaClass java.io.PrintWriter
    */
    class PrintWriter extends Internal.Writer {
        print(arg0: number): void;
        print(arg0: string): void;
        print(arg0: boolean): void;
        print(arg0: any): void;
        print(arg0: string[]): void;
        println(arg0: string[]): void;
        println(): void;
        println(arg0: boolean): void;
        println(arg0: string): void;
        println(arg0: any): void;
        println(arg0: number): void;
        flush(): void;
        format(arg0: string, ... arg1: any[]): this;
        format(arg0: Internal.Locale_, arg1: string, ... arg2: any[]): this;
        checkError(): boolean;
        close(): void;
        write(arg0: string[], arg1: number, arg2: number): void;
        write(arg0: string): void;
        write(arg0: string, arg1: number, arg2: number): void;
        write(arg0: string[]): void;
        write(arg0: number): void;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string): this;
        append(arg0: Internal.CharSequence_): this;
        printf(arg0: string, ... arg1: any[]): this;
        printf(arg0: Internal.Locale_, arg1: string, ... arg2: any[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PrintWriter_ = PrintWriter;
    /**
    * @javaClass net.minecraft.server.packs.resources.CloseableResourceManager
    */
    interface CloseableResourceManager extends Internal.ResourceManager, Internal.AutoCloseable {
        close(): void;
    }
    type CloseableResourceManager_ = (() => void) | CloseableResourceManager;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap
    */
    class Int2ObjectOpenHashMap <V> extends Internal.AbstractInt2ObjectMap<V> implements Internal.Serializable, Internal.Cloneable, Internal.Hash {
        getOrDefault(arg0: number, arg1: V): V;
        containsKey(arg0: number): boolean;
        computeIfAbsent(arg0: number, arg1: Internal.IntFunction_<V>): V;
        computeIfAbsent(arg0: number, arg1: Internal.Int2ObjectFunction_<V>): V;
        values(): Internal.ObjectCollection<V>;
        replace(arg0: number, arg1: V, arg2: V): boolean;
        replace(arg0: number, arg1: V): V;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: any): boolean;
        put(arg0: number, arg1: V): V;
        remove(arg0: number, arg1: any): boolean;
        remove(arg0: number): V;
        compute(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        int2ObjectEntrySet(): Internal.Int2ObjectMap$FastEntrySet<V>;
        computeIfPresent(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        trim(): boolean;
        trim(arg0: number): boolean;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Map_<number, V>): void;
        merge(arg0: number, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        get(arg0: number): V;
        clone(): Internal.Int2ObjectOpenHashMap<V>;
        keySet(): Internal.IntSet;
        putIfAbsent(arg0: number, arg1: V): V;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Int2ObjectOpenHashMap_<V> = Int2ObjectOpenHashMap<V>;
    /**
    * @javaClass java.nio.channels.AsynchronousFileChannel
    */
    abstract class AsynchronousFileChannel implements Internal.AsynchronousChannel {
        read(arg0: Internal.ByteBuffer_, arg1: number): Internal.Future<number>;
        read<A>(arg0: Internal.ByteBuffer_, arg1: number, arg2: A, arg3: Internal.CompletionHandler_<number, A>): void;
        truncate(arg0: number): this;
        size(): number;
        lock(arg0: number, arg1: number, arg2: boolean): Internal.Future<Internal.FileLock>;
        lock<A>(arg0: A, arg1: Internal.CompletionHandler_<Internal.FileLock_, A>): void;
        lock<A>(arg0: number, arg1: number, arg2: boolean, arg3: A, arg4: Internal.CompletionHandler_<Internal.FileLock_, A>): void;
        lock(): Internal.Future<Internal.FileLock>;
        force(arg0: boolean): void;
        write(arg0: Internal.ByteBuffer_, arg1: number): Internal.Future<number>;
        write<A>(arg0: Internal.ByteBuffer_, arg1: number, arg2: A, arg3: Internal.CompletionHandler_<number, A>): void;
        tryLock(): Internal.FileLock;
        tryLock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        static open(arg0: Internal.Path_, arg1: Internal.Set_<Internal.OpenOption_>, arg2: Internal.ExecutorService_, ... arg3: any[]): this;
        static open(arg0: Internal.Path_, ... arg1: Internal.OpenOption_[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AsynchronousFileChannel_ = AsynchronousFileChannel;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.ItemStackKJS
    */
    interface ItemStackKJS extends Internal.AsKJS<Internal.ItemStackJS> {
        removeTagKJS(): void;
        asKJS(): Internal.ItemStackJS;
    }
    type ItemStackKJS_ = (() => void) | ItemStackKJS;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent$FluidPlaceBlockEvent
    */
    class BlockEvent$FluidPlaceBlockEvent extends Internal.BlockEvent {
        getListenerList(): Internal.ListenerList;
        setNewState(arg0: Internal.BlockState_): void;
        getLiquidPos(): BlockPos;
        isCancelable(): boolean;
        getOriginalState(): Internal.BlockState;
        getNewState(): Internal.BlockState;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get originalState(): Internal.BlockState;
        get newState(): Internal.BlockState;
        get liquidPos(): BlockPos;
        set newState(arg0: Internal.BlockState_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent$FluidPlaceBlockEvent_ = BlockEvent$FluidPlaceBlockEvent;
    /**
    * @javaClass com.mojang.serialization.codecs.RecordCodecBuilder$Instance
    */
    class RecordCodecBuilder$Instance <O> implements Internal.Applicative<Internal.RecordCodecBuilder$Mu<O>, any> {
        ap2<A, B, R>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, Internal.BiFunction_<A, B, R>>, arg1: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, A>, arg2: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, B>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        ap4<T1, T2, T3, T4, R>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, Internal.Function4_<T1, T2, T3, T4, R>>, arg1: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T1>, arg2: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T2>, arg3: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T3>, arg4: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T4>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        lift1<A, R>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, Internal.Function_<A, R>>): Internal.Function<Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>, Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>>;
        ap3<T1, T2, T3, R>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, Internal.Function3_<T1, T2, T3, R>>, arg1: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T1>, arg2: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T2>, arg3: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T3>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        stable<A>(arg0: A): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        deprecated<A>(arg0: A, arg1: number): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        map<T, R>(arg0: Internal.Function_<T, R>, arg1: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, T>): Internal.App<Internal.RecordCodecBuilder$Mu<O>, R>;
        point<A>(arg0: A, arg1: Internal.Lifecycle_): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        point<A>(arg0: A): Internal.App<Internal.RecordCodecBuilder$Mu<O>, A>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecordCodecBuilder$Instance_<O> = RecordCodecBuilder$Instance<O>;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.LootTablesKJS
    */
    interface LootTablesKJS {
        applyKJS0(map: Internal.Map_<ResourceLocation_, Internal.JsonElement_>, action: Internal.BiConsumer_<ResourceLocation_, Internal.JsonElement_>): void;
    }
    type LootTablesKJS_ = LootTablesKJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2DoubleFunction
    */
    interface Boolean2DoubleFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2DoubleFunction;
    }
    type Boolean2DoubleFunction_ = ((arg0: boolean) => number) | Boolean2DoubleFunction;
    /**
    * @javaClass net.minecraft.world.entity.Pose
    */
    class Pose extends Internal.Enum<Internal.Pose> {
        static valueOf(arg0: string): this;
        static values(): Internal.Pose[];
        static readonly "SLEEPING" : Internal.Pose;
        static readonly "FALL_FLYING" : Internal.Pose;
        static readonly "LONG_JUMPING" : Internal.Pose;
        static readonly "DYING" : Internal.Pose;
        static readonly "CROUCHING" : Internal.Pose;
        static readonly "STANDING" : Internal.Pose;
        static readonly "SWIMMING" : Internal.Pose;
        static readonly "SPIN_ATTACK" : Internal.Pose;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Pose_ = "standing" | "swimming" | "crouching" | "long_jumping" | "dying" | "fall_flying" | "spin_attack" | "sleeping" | Pose;
    /**
    * @javaClass vazkii.botania.mixin.AccessorEntity
    */
    interface AccessorEntity {
        callUnsetRemoved(): void;
    }
    type AccessorEntity_ = (() => void) | AccessorEntity;
    /**
    * @javaClass java.time.ZoneId
    */
    abstract class ZoneId implements Internal.Serializable {
        static ofOffset(arg0: string, arg1: Internal.ZoneOffset_): this;
        static systemDefault(): this;
        static getAvailableZoneIds(): Internal.Set<string>;
        getDisplayName(arg0: Internal.TextStyle_, arg1: Internal.Locale_): string;
        normalized(): this;
        hashCode(): number;
        static of(arg0: string, arg1: Internal.Map_<string, string>): this;
        static of(arg0: string): this;
        equals(arg0: any): boolean;
        getId(): string;
        static from(arg0: Internal.TemporalAccessor_): this;
        toString(): string;
        getRules(): Internal.ZoneRules;
        static readonly "SHORT_IDS" : {"AST":"America/Anchorage","NST":"Pacific/Auckland","HST":"-10:00","ACT":"Australia/Darwin","BST":"Asia/Dhaka","AET":"Australia/Sydney","IST":"Asia/Kolkata","CST":"America/Chicago","NET":"Asia/Yerevan","AGT":"America/Argentina/Buenos_Aires","CAT":"Africa/Harare","MIT":"Pacific/Apia","BET":"America/Sao_Paulo","PST":"America/Los_Angeles","ART":"Africa/Cairo","JST":"Asia/Tokyo","VST":"Asia/Ho_Chi_Minh","IET":"America/Indiana/Indianapolis","CNT":"America/St_Johns","PLT":"Asia/Karachi","PNT":"America/Phoenix","EST":"-05:00","EAT":"Africa/Addis_Ababa","ECT":"Europe/Paris","PRT":"America/Puerto_Rico","CTT":"Asia/Shanghai","SST":"Pacific/Guadalcanal","MST":"-07:00"};
        get availableZoneIds(): Internal.Set<string>;
        get rules(): Internal.ZoneRules;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneId_ = ZoneId;
    /**
    * @javaClass java.awt.MenuComponent
    */
    abstract class MenuComponent implements Internal.Serializable {
        setName(arg0: string): void;
        getParent(): Internal.MenuContainer;
        dispatchEvent(arg0: Internal.AWTEvent_): void;
        getName(): string;
        removeNotify(): void;
        getFont(): Internal.Font;
        toString(): string;
        setFont(arg0: Internal.Font_): void;
        getAccessibleContext(): Internal.AccessibleContext;
        postEvent(arg0: Internal.Event_): boolean;
        get accessibleContext(): Internal.AccessibleContext;
        get parent(): Internal.MenuContainer;
        get name(): string;
        get font(): Internal.Font;
        set name(arg0: string);
        set font(arg0: Internal.Font_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MenuComponent_ = MenuComponent;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.ShapedBlockBuilder
    */
    abstract class ShapedBlockBuilder extends Internal.BlockBuilder {
        textureAll(tex: string): Internal.BlockBuilder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShapedBlockBuilder_ = ShapedBlockBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2LongFunction
    */
    interface Double2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Double2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Double2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2LongFunction_ = ((arg0: number) => number) | Double2LongFunction;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatSpliterator
    */
    interface FloatSpliterator extends Internal.Spliterator$OfPrimitive<number, Internal.FloatConsumer, Internal.FloatSpliterator> {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        getComparator(): Internal.FloatComparator;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type FloatSpliterator_ = (() => Internal.FloatSpliterator) | FloatSpliterator;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.SoundEventBuilder
    */
    class SoundEventBuilder extends Internal.BuilderBase<Internal.SoundEvent> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.SoundEvent>;
        createObject(): Internal.SoundEvent;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.SoundEvent>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundEventBuilder_ = SoundEventBuilder;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkEvent$Load
    */
    class ChunkEvent$Load extends Internal.ChunkEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkEvent$Load_ = ChunkEvent$Load;
    /**
    * @javaClass net.minecraft.nbt.ListTag
    */
    class ListTag extends Internal.CollectionTag<Internal.Tag> {
        add(arg0: number, arg1: Internal.Tag_): void;
        set(arg0: number, arg1: Internal.Tag_): Internal.Tag;
        size(): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: number): Internal.Tag;
        isEmpty(): boolean;
        clear(): void;
        toString(): string;
        remove(arg0: number): Internal.Tag;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ListTag_ = ListTag;
    /**
    * @javaClass java.awt.BufferCapabilities$FlipContents
    */
    class BufferCapabilities$FlipContents extends Internal.AttributeValue {
        static readonly "UNDEFINED" : Internal.BufferCapabilities$FlipContents;
        static readonly "PRIOR" : Internal.BufferCapabilities$FlipContents;
        static readonly "COPIED" : Internal.BufferCapabilities$FlipContents;
        static readonly "BACKGROUND" : Internal.BufferCapabilities$FlipContents;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferCapabilities$FlipContents_ = BufferCapabilities$FlipContents;
    /**
    * @javaClass java.awt.JobAttributes$DialogType
    */
    class JobAttributes$DialogType extends Internal.AttributeValue {
        static readonly "NATIVE" : Internal.JobAttributes$DialogType;
        static readonly "COMMON" : Internal.JobAttributes$DialogType;
        static readonly "NONE" : Internal.JobAttributes$DialogType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes$DialogType_ = JobAttributes$DialogType;
    /**
    * @javaClass com.jozufozu.flywheel.core.layout.BufferLayout$Builder
    */
    class BufferLayout$Builder {
        build(): Internal.BufferLayout;
        addItems(... arg0: Internal.LayoutItem_[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferLayout$Builder_ = BufferLayout$Builder;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2IntFunction
    */
    interface Double2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2IntFunction_ = ((arg0: number) => number) | Double2IntFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.LootTableEntry
    */
    class LootTableEntry implements Internal.FunctionContainer, Internal.ConditionContainer {
        addFunction(o: Internal.JsonObject_): this;
        weight(weight: number): this;
        addCondition(o: Internal.JsonObject_): this;
        quality(quality: number): this;
        readonly "json" : Internal.JsonObject;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootTableEntry_ = LootTableEntry;
    /**
    * @javaClass java.util.concurrent.ScheduledFuture
    */
    interface ScheduledFuture <V> extends Internal.Delayed, Internal.Future<V> {
    }
    type ScheduledFuture_<V> = ScheduledFuture<V>;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.MaterialJS
    */
    class MaterialJS {
        getMinecraftMaterial(): net.minecraft.world.level.material.Material;
        getId(): string;
        getSound(): Internal.SoundType;
        get minecraftMaterial(): net.minecraft.world.level.material.Material;
        get sound(): Internal.SoundType;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MaterialJS_ = "sponge" | "explosive" | "wool" | "ice" | "air" | "vegetable" | "clay" | "slime" | "lava" | "leaves" | "web" | "grass" | "cake" | "honey" | "wood" | "dragon_egg" | "portal" | "glass" | "metal" | "dirt" | "water" | "lantern" | "stone" | "sand" | "snow" | "plant" | "berry_bush" | "crop" | MaterialJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.LivingEntityKJS
    */
    interface LivingEntityKJS {
        foodEatenKJS(is: Internal.ItemStack_): void;
    }
    type LivingEntityKJS_ = LivingEntityKJS;
    /**
    * @javaClass net.minecraft.client.sounds.SoundBufferLibrary
    */
    class SoundBufferLibrary {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundBufferLibrary_ = SoundBufferLibrary;
    /**
    * @javaClass java.util.SortedSet
    */
    interface SortedSet <E> extends Internal.Set<E> {
        tailSet(arg0: E): Internal.SortedSet<E>;
        comparator(): Internal.Comparator<E>;
        last(): E;
        headSet(arg0: E): Internal.SortedSet<E>;
        spliterator(): Internal.Spliterator<E>;
        subSet(arg0: E, arg1: E): Internal.SortedSet<E>;
        first(): E;
    }
    type SortedSet_<E> = SortedSet<E>;
    /**
    * @javaClass java.time.format.DecimalStyle
    */
    class DecimalStyle {
        getPositiveSign(): string;
        getDecimalSeparator(): string;
        getNegativeSign(): string;
        static ofDefaultLocale(): this;
        getZeroDigit(): string;
        withPositiveSign(arg0: string): this;
        hashCode(): number;
        withDecimalSeparator(arg0: string): this;
        static of(arg0: Internal.Locale_): this;
        equals(arg0: any): boolean;
        toString(): string;
        withNegativeSign(arg0: string): this;
        withZeroDigit(arg0: string): this;
        static getAvailableLocales(): Internal.Set<Internal.Locale>;
        static readonly "STANDARD" : Internal.DecimalStyle;
        get negativeSign(): string;
        get decimalSeparator(): string;
        get zeroDigit(): string;
        get positiveSign(): string;
        get availableLocales(): Internal.Set<Internal.Locale>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DecimalStyle_ = DecimalStyle;
    /**
    * @javaClass dev.latvian.mods.kubejs.integration.forge.jei.JEISubtypesEventJS$Interpreter
    */
    interface JEISubtypesEventJS$Interpreter extends Internal.Function<Internal.ItemStackJS, any> {
    }
    type JEISubtypesEventJS$Interpreter_ = JEISubtypesEventJS$Interpreter;
    /**
    * @javaClass net.minecraft.world.item.crafting.Ingredient
    */
    class Ingredient implements Internal.Predicate<Internal.ItemStack>, Internal.IngredientKJS, Internal.AccessorIngredient {
        getSerializer(): Internal.IIngredientSerializer<Internal.Ingredient>;
        static invalidateAll(): void;
        test(arg0: Internal.ItemStack_): boolean;
        checkInvalidation(): boolean;
        isVanilla(): boolean;
        static merge(arg0: Internal.Collection_<Internal.Ingredient_>): this;
        isSimple(): boolean;
        getItemsKJS(): Internal.ItemStack[];
        get serializer(): Internal.IIngredientSerializer<Internal.Ingredient>;
        get itemsKJS(): Internal.ItemStack[];
        get simple(): boolean;
        get vanilla(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Ingredient_ = Ingredient;
    /**
    * @javaClass java.util.function.LongBinaryOperator
    */
    interface LongBinaryOperator {
        applyAsLong(arg0: number, arg1: number): number;
    }
    type LongBinaryOperator_ = ((arg0: number, arg1: number) => number) | LongBinaryOperator;
    /**
    * @javaClass net.minecraftforge.client.gui.IIngameOverlay
    */
    interface IIngameOverlay {
        render(arg0: Internal.ForgeIngameGui_, arg1: Internal.PoseStack_, arg2: number, arg3: number, arg4: number): void;
    }
    type IIngameOverlay_ = ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void) | IIngameOverlay;
    /**
    * @javaClass com.google.common.collect.ImmutableMultimap
    */
    abstract class ImmutableMultimap <K, V> extends Internal.BaseImmutableMultimap<K, V> implements Internal.Serializable {
        inverse(): Internal.ImmutableMultimap<V, K>;
        asMap(): Internal.ImmutableMap<K, Internal.Collection<V>>;
        keys(): Internal.ImmutableMultiset<K>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        values(): Internal.ImmutableCollection<V>;
        clear(): void;
        static copyOf<K, V>(arg0: Internal.Multimap_<K, V>): Internal.ImmutableMultimap<K, V>;
        static copyOf<K, V>(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableMultimap<K, V>;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.ImmutableCollection<V>;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: any, arg1: any): boolean;
        removeAll(arg0: any): Internal.ImmutableCollection<V>;
        entries(): Internal.ImmutableCollection<Internal.Map$Entry<K, V>>;
        size(): number;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): boolean;
        putAll(arg0: Internal.Multimap_<K, V>): boolean;
        static of<K, V>(): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableMultimap<K, V>;
        get(arg0: K): Internal.ImmutableCollection<V>;
        static builder<K, V>(): Internal.ImmutableMultimap$Builder<K, V>;
        keySet(): Internal.ImmutableSet<K>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMultimap_<K, V> = ImmutableMultimap<K, V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2ByteFunction
    */
    interface Short2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2ByteFunction;
    }
    type Short2ByteFunction_ = ((arg0: number) => number) | Short2ByteFunction;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModLanguageProvider$IModLanguageLoader
    */
    interface IModLanguageProvider$IModLanguageLoader {
        loadMod<T>(arg0: Internal.IModInfo_, arg1: Internal.ModFileScanData_, arg2: Internal.ModuleLayer_): T;
    }
    type IModLanguageProvider$IModLanguageLoader_ = ((arg0: Internal.IModInfo, arg1: Internal.ModFileScanData, arg2: Internal.ModuleLayer) => any) | IModLanguageProvider$IModLanguageLoader;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.ServerSettings
    */
    class ServerSettings {
        static exportData(): void;
        "logInvalidRecipeHandlers" : boolean;
        "useOriginalRecipeForFilters" : boolean;
        "dataPackOutput" : boolean;
        "logSkippedRecipes" : boolean;
        static "instance" : Internal.ServerSettings;
        "logOverrides" : boolean;
        "logErroringRecipes" : boolean;
        "logAddedRecipes" : boolean;
        "logRemovedRecipes" : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerSettings_ = ServerSettings;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.minecraft.ShapedRecipeJS
    */
    class ShapedRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        noMirror(): this;
        create(args: Internal.ListJS_): void;
        noShrink(): this;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShapedRecipeJS_ = ShapedRecipeJS;
    /**
    * @javaClass java.awt.dnd.DragGestureRecognizer
    */
    abstract class DragGestureRecognizer implements Internal.Serializable {
        getTriggerEvent(): Internal.InputEvent;
        removeDragGestureListener(arg0: Internal.DragGestureListener_): void;
        getDragSource(): Internal.DragSource;
        addDragGestureListener(arg0: Internal.DragGestureListener_): void;
        setSourceActions(arg0: number): void;
        resetRecognizer(): void;
        setComponent(arg0: Internal.Component_): void;
        getComponent(): Internal.Component;
        getSourceActions(): number;
        get sourceActions(): number;
        get component(): Internal.Component;
        get triggerEvent(): Internal.InputEvent;
        get dragSource(): Internal.DragSource;
        set sourceActions(arg0: number);
        set component(arg0: Internal.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragGestureRecognizer_ = DragGestureRecognizer;
    /**
    * @javaClass dev.latvian.mods.itemfilters.item.BaseFilterItem
    */
    abstract class BaseFilterItem extends Internal.Item implements Internal.IItemFilter {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseFilterItem_ = BaseFilterItem;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.providers.number.NumberProvider
    */
    interface NumberProvider extends Internal.LootContextUser {
    }
    type NumberProvider_ = NumberProvider;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent$MissingMappings
    */
    class RegistryEvent$MissingMappings <T> extends Internal.RegistryEvent<T> {
        getListenerList(): Internal.ListenerList;
        getName(): ResourceLocation;
        getRegistry(): Internal.IForgeRegistry<T>;
        getAllMappings(): Internal.ImmutableList<Internal.RegistryEvent$MissingMappings$Mapping<T>>;
        getMappings(arg0: string): Internal.ImmutableList<Internal.RegistryEvent$MissingMappings$Mapping<T>>;
        getMappings(): Internal.ImmutableList<Internal.RegistryEvent$MissingMappings$Mapping<T>>;
        setModContainer(arg0: Internal.ModContainer_): void;
        get registry(): Internal.IForgeRegistry<T>;
        get mappings(): Internal.ImmutableList<Internal.RegistryEvent$MissingMappings$Mapping<T>>;
        get listenerList(): Internal.ListenerList;
        get allMappings(): Internal.ImmutableList<Internal.RegistryEvent$MissingMappings$Mapping<T>>;
        get name(): ResourceLocation;
        set modContainer(arg0: Internal.ModContainer_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent$MissingMappings_<T> = RegistryEvent$MissingMappings<T>;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootContext$Builder
    */
    class LootContext$Builder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootContext$Builder_ = LootContext$Builder;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2BooleanFunction
    */
    interface Char2BooleanFunction extends it.unimi.dsi.fastutil.Function<string, boolean>, Internal.IntPredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: string, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: boolean): boolean;
        remove(arg0: string): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: string): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Char2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: string): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2BooleanFunction;
    }
    type Char2BooleanFunction_ = ((arg0: string) => boolean) | Char2BooleanFunction;
    /**
    * @javaClass com.mojang.brigadier.suggestion.Suggestions
    */
    class Suggestions {
        getList(): Internal.List<Internal.Suggestion>;
        getRange(): Internal.StringRange;
        hashCode(): number;
        static merge(arg0: string, arg1: Internal.Collection_<Internal.Suggestions_>): this;
        equals(arg0: any): boolean;
        isEmpty(): boolean;
        static create(arg0: string, arg1: Internal.Collection_<Internal.Suggestion_>): this;
        toString(): string;
        static empty(): Internal.CompletableFuture<Internal.Suggestions>;
        get range(): Internal.StringRange;
        get list(): Internal.List<Internal.Suggestion>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Suggestions_ = Suggestions;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ingredient.IngredientWithCustomPredicateJS
    */
    class IngredientWithCustomPredicateJS implements Internal.IngredientJS {
        toJson(): Internal.JsonElement;
        testVanillaItem(i: Internal.Item_): boolean;
        test(stack: Internal.ItemStackJS_): boolean;
        getStacks(): Internal.Set<Internal.ItemStackJS>;
        getVanillaItems(): Internal.Set<Internal.Item>;
        getFirst(): Internal.ItemStackJS;
        testVanilla(stack: Internal.ItemStack_): boolean;
        isEmpty(): boolean;
        isInvalidRecipeIngredient(): boolean;
        toString(): string;
        getCount(): number;
        getVanillaPredicate(): Internal.Predicate<Internal.ItemStack>;
        readonly "predicate" : ((arg0: Internal.ItemStack) => boolean);
        readonly "ingredient" : Internal.IngredientJS;
        readonly "uuid" : Internal.UUID;
        get invalidRecipeIngredient(): boolean;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get count(): number;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get first(): Internal.ItemStackJS;
        get empty(): boolean;
        get vanillaPredicate(): Internal.Predicate<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IngredientWithCustomPredicateJS_ = IngredientWithCustomPredicateJS;
    /**
    * @javaClass net.minecraftforge.client.event.sound.PlaySoundEvent
    */
    class PlaySoundEvent extends net.minecraftforge.client.event.sound.SoundEvent {
        getListenerList(): Internal.ListenerList;
        getName(): string;
        setSound(arg0: Internal.SoundInstance_): void;
        getOriginalSound(): Internal.SoundInstance;
        getSound(): Internal.SoundInstance;
        get listenerList(): Internal.ListenerList;
        get sound(): Internal.SoundInstance;
        get name(): string;
        get originalSound(): Internal.SoundInstance;
        set sound(arg0: Internal.SoundInstance_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlaySoundEvent_ = PlaySoundEvent;
    /**
    * @javaClass net.minecraft.core.Position
    */
    interface Position {
    }
    type Position_ = Position;
    /**
    * @javaClass net.minecraft.server.packs.PackType
    */
    class PackType extends Internal.Enum<Internal.PackType> {
        static valueOf(arg0: string): this;
        static values(): Internal.PackType[];
        static readonly "CLIENT_RESOURCES" : Internal.PackType;
        static readonly "SERVER_DATA" : Internal.PackType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PackType_ = "client_resources" | "server_data" | PackType;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.TransformStack
    */
    interface TransformStack extends Internal.Transform<Internal.TransformStack>, Internal.TStack<Internal.TransformStack> {
        cast(arg0: Internal.PoseStack_): this;
    }
    type TransformStack_ = TransformStack;
    /**
    * @javaClass java.nio.file.Watchable
    */
    interface Watchable {
        register(arg0: Internal.WatchService_, arg1: Internal.WatchEvent$Kind_<any>[], ... arg2: any[]): Internal.WatchKey;
        register(arg0: Internal.WatchService_, ... arg1: Internal.WatchEvent$Kind_<any>[]): Internal.WatchKey;
    }
    type Watchable_ = Watchable;
    /**
    * @javaClass java.security.ProtectionDomain
    */
    class ProtectionDomain {
        getPermissions(): Internal.PermissionCollection;
        getClassLoader(): Internal.ClassLoader;
        toString(): string;
        getPrincipals(): Internal.Principal[];
        implies(arg0: Internal.Permission_): boolean;
        staticPermissionsOnly(): boolean;
        getCodeSource(): Internal.CodeSource;
        get classLoader(): Internal.ClassLoader;
        get permissions(): Internal.PermissionCollection;
        get principals(): Internal.Principal[];
        get codeSource(): Internal.CodeSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ProtectionDomain_ = ProtectionDomain;
    /**
    * @javaClass java.util.function.Supplier
    */
    interface Supplier <T> {
        get(): T;
    }
    type Supplier_<T> = (() => T) | Supplier<T>;
    /**
    * @javaClass net.minecraft.world.level.Level
    */
    abstract class Level extends Internal.CapabilityProvider<Internal.Level> implements Internal.LevelAccessor, Internal.AutoCloseable, Internal.IForgeLevel, Internal.LevelKJS {
        increaseMaxEntityRadius(arg0: number): number;
        getMaxEntityRadius(): number;
        addFreshBlockEntities(arg0: Internal.Collection_<Internal.BlockEntity_>): void;
        close(): void;
        markAndNotifyBlock(arg0: BlockPos_, arg1: Internal.LevelChunk_, arg2: Internal.BlockState_, arg3: Internal.BlockState_, arg4: number, arg5: number): void;
        "restoringBlockSnapshots" : boolean;
        "capturedBlockSnapshots" : Internal.ArrayList<Internal.BlockSnapshot>;
        "captureBlockSnapshots" : boolean;
        get maxEntityRadius(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Level_ = Special.Level | Level;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$PostLayer
    */
    class RenderGameOverlayEvent$PostLayer extends Internal.RenderGameOverlayEvent$Post {
        getListenerList(): Internal.ListenerList;
        getOverlay(): Internal.IIngameOverlay;
        get overlay(): Internal.IIngameOverlay;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$PostLayer_ = RenderGameOverlayEvent$PostLayer;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.RewardClaimType
    */
    class RewardClaimType extends Internal.Enum<Internal.RewardClaimType> {
        cantClaim(): boolean;
        canClaim(): boolean;
        static valueOf(name: string): this;
        static values(): Internal.RewardClaimType[];
        isClaimed(): boolean;
        static readonly "CLAIMED" : Internal.RewardClaimType;
        static readonly "CAN_CLAIM" : Internal.RewardClaimType;
        static readonly "CANT_CLAIM" : Internal.RewardClaimType;
        get claimed(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RewardClaimType_ = "can_claim" | "claimed" | "cant_claim" | RewardClaimType;
    /**
    * @javaClass io.netty.channel.Channel$Unsafe
    */
    interface Channel$Unsafe {
        disconnect(arg0: Internal.ChannelPromise_): void;
        deregister(arg0: Internal.ChannelPromise_): void;
        recvBufAllocHandle(): Internal.RecvByteBufAllocator$Handle;
        closeForcibly(): void;
        beginRead(): void;
        bind(arg0: Internal.SocketAddress_, arg1: Internal.ChannelPromise_): void;
        voidPromise(): Internal.ChannelPromise;
        flush(): void;
        localAddress(): Internal.SocketAddress;
        outboundBuffer(): Internal.ChannelOutboundBuffer;
        close(arg0: Internal.ChannelPromise_): void;
        write(arg0: any, arg1: Internal.ChannelPromise_): void;
        remoteAddress(): Internal.SocketAddress;
        connect(arg0: Internal.SocketAddress_, arg1: Internal.SocketAddress_, arg2: Internal.ChannelPromise_): void;
        register(arg0: Internal.EventLoop_, arg1: Internal.ChannelPromise_): void;
    }
    type Channel$Unsafe_ = Channel$Unsafe;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.MinecraftServerKJS
    */
    interface MinecraftServerKJS extends Internal.AsKJS<Internal.ServerJS> {
        getReloadableResourcesKJS(): Internal.MinecraftServer$ReloadableResources;
        asKJS(): Internal.ServerJS;
    }
    type MinecraftServerKJS_ = (() => Internal.MinecraftServer$ReloadableResources) | MinecraftServerKJS;
    /**
    * @javaClass org.spongepowered.asm.mixin.injection.callback.Cancellable
    */
    interface Cancellable {
        cancel(): void;
        isCancelled(): boolean;
        isCancellable(): boolean;
    }
    type Cancellable_ = Cancellable;
    /**
    * @javaClass java.awt.geom.RectangularShape
    */
    abstract class RectangularShape implements Internal.Shape, Internal.Cloneable {
        intersects(arg0: Internal.Rectangle2D_): boolean;
        getFrame(): Internal.Rectangle2D;
        getMaxX(): number;
        isEmpty(): boolean;
        getMaxY(): number;
        getWidth(): number;
        getBounds(): Internal.Rectangle;
        setFrameFromCenter(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setFrameFromCenter(arg0: Internal.Point2D_, arg1: Internal.Point2D_): void;
        setFrameFromDiagonal(arg0: Internal.Point2D_, arg1: Internal.Point2D_): void;
        setFrameFromDiagonal(arg0: number, arg1: number, arg2: number, arg3: number): void;
        getHeight(): number;
        getX(): number;
        contains(arg0: Internal.Point2D_): boolean;
        contains(arg0: Internal.Rectangle2D_): boolean;
        getY(): number;
        getPathIterator(arg0: Internal.AffineTransform_, arg1: number): Internal.PathIterator;
        setFrame(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setFrame(arg0: Internal.Point2D_, arg1: Internal.Dimension2D_): void;
        setFrame(arg0: Internal.Rectangle2D_): void;
        clone(): any;
        getCenterY(): number;
        getMinX(): number;
        getCenterX(): number;
        getMinY(): number;
        get centerY(): number;
        get centerX(): number;
        get maxY(): number;
        get maxX(): number;
        get empty(): boolean;
        get minY(): number;
        get minX(): number;
        get width(): number;
        get bounds(): Internal.Rectangle;
        get x(): number;
        get y(): number;
        get frame(): Internal.Rectangle2D;
        get height(): number;
        set frame(arg0: Internal.Rectangle2D_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RectangularShape_ = RectangularShape;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2CharFunction
    */
    interface Double2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2CharFunction_ = ((arg0: number) => string) | Double2CharFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.PoiTypeBuilder
    */
    class PoiTypeBuilder extends Internal.BuilderBase<Internal.PoiType> {
        blocks(r: Internal.BlockState_[]): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.PoiType>;
        validRange(i: number): this;
        block(r: Internal.Block_): this;
        maxTickets(i: number): this;
        createObject(): Internal.PoiType;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.PoiType>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PoiTypeBuilder_ = PoiTypeBuilder;
    /**
    * @javaClass java.util.function.DoubleToLongFunction
    */
    interface DoubleToLongFunction {
        applyAsLong(arg0: number): number;
    }
    type DoubleToLongFunction_ = ((arg0: number) => number) | DoubleToLongFunction;
    /**
    * @javaClass java.awt.AWTEvent
    */
    abstract class AWTEvent extends Internal.EventObject {
        setSource(arg0: any): void;
        paramString(): string;
        getID(): number;
        toString(): string;
        static readonly "ADJUSTMENT_EVENT_MASK" : 256;
        static readonly "MOUSE_EVENT_MASK" : 16;
        static readonly "COMPONENT_EVENT_MASK" : 1;
        static readonly "PAINT_EVENT_MASK" : 8192;
        static readonly "INPUT_METHOD_EVENT_MASK" : 2048;
        static readonly "HIERARCHY_BOUNDS_EVENT_MASK" : 65536;
        static readonly "FOCUS_EVENT_MASK" : 4;
        static readonly "TEXT_EVENT_MASK" : 1024;
        static readonly "INVOCATION_EVENT_MASK" : 16384;
        static readonly "KEY_EVENT_MASK" : 8;
        static readonly "RESERVED_ID_MAX" : 1999;
        static readonly "ACTION_EVENT_MASK" : 128;
        static readonly "ITEM_EVENT_MASK" : 512;
        static readonly "CONTAINER_EVENT_MASK" : 2;
        static readonly "WINDOW_EVENT_MASK" : 64;
        static readonly "HIERARCHY_EVENT_MASK" : 32768;
        static readonly "WINDOW_STATE_EVENT_MASK" : 262144;
        static readonly "MOUSE_WHEEL_EVENT_MASK" : 131072;
        static readonly "MOUSE_MOTION_EVENT_MASK" : 32;
        static readonly "WINDOW_FOCUS_EVENT_MASK" : 524288;
        get iD(): number;
        set source(arg0: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AWTEvent_ = AWTEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.ObjectIterator
    */
    interface ObjectIterator <K> extends Internal.Iterator<K> {
        skip(arg0: number): number;
    }
    type ObjectIterator_<K> = ObjectIterator<K>;
    /**
    * @javaClass dev.latvian.mods.rhino.ContextAction
    */
    interface ContextAction <T> {
        run(arg0: Internal.Context_): T;
    }
    type ContextAction_<T> = ((arg0: Internal.Context) => T) | ContextAction<T>;
    /**
    * @javaClass com.mojang.serialization.CompressorHolder
    */
    abstract class CompressorHolder implements Internal.Compressable {
        compressor<T>(arg0: Internal.DynamicOps_<T>): Internal.KeyCompressor<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CompressorHolder_ = CompressorHolder;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IConfigurable
    */
    interface IConfigurable {
        getConfigElement<T>(... arg0: string[]): Internal.Optional<T>;
        getConfigList(... arg0: string[]): Internal.List<Internal.IConfigurable>;
    }
    type IConfigurable_ = IConfigurable;
    /**
    * @javaClass java.nio.file.Path
    */
    interface Path extends Internal.Comparable<Internal.Path>, Internal.Iterable<Internal.Path>, Internal.Watchable {
        getNameCount(): number;
        getParent(): this;
        getName(arg0: number): this;
        resolve(arg0: Internal.Path_): this;
        resolve(arg0: string): this;
        resolveSibling(arg0: Internal.Path_): this;
        resolveSibling(arg0: string): this;
        toUri(): Internal.URI;
        subpath(arg0: number, arg1: number): this;
        toAbsolutePath(): this;
        getFileSystem(): Internal.FileSystem;
        compareTo(arg0: Internal.Path_): number;
        iterator(): Internal.Iterator<Internal.Path>;
        hashCode(): number;
        normalize(): this;
        of(arg0: string, ... arg1: string[]): this;
        of(arg0: Internal.URI_): this;
        equals(arg0: any): boolean;
        toFile(): Internal.File;
        toRealPath(... arg0: any[]): this;
        endsWith(arg0: string): boolean;
        endsWith(arg0: Internal.Path_): boolean;
        isAbsolute(): boolean;
        toString(): string;
        relativize(arg0: Internal.Path_): this;
        getRoot(): this;
        getFileName(): this;
        register(arg0: Internal.WatchService_, ... arg1: Internal.WatchEvent$Kind_<any>[]): Internal.WatchKey;
        register(arg0: Internal.WatchService_, arg1: Internal.WatchEvent$Kind_<any>[], ... arg2: any[]): Internal.WatchKey;
        startsWith(arg0: string): boolean;
        startsWith(arg0: Internal.Path_): boolean;
    }
    type Path_ = Path;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.loot.WeightedReward
    */
    class WeightedReward implements Internal.Comparable<Internal.WeightedReward> {
        compareTo(o: Internal.WeightedReward_): number;
        static chanceString(weight: number, totalWeight: number, empty: boolean): string;
        static chanceString(weight: number, totalWeight: number): string;
        readonly "reward" : Internal.Reward;
        "weight" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WeightedReward_ = WeightedReward;
    /**
    * @javaClass com.mojang.datafixers.Products$P16
    */
    class Products$P16 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function16_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function16_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P16_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> = Products$P16<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
    /**
    * @javaClass net.minecraft.client.player.AbstractClientPlayer
    */
    abstract class AbstractClientPlayer extends Internal.Player {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractClientPlayer_ = AbstractClientPlayer;
    /**
    * @javaClass com.mojang.brigadier.tree.LiteralCommandNode
    */
    class LiteralCommandNode <S> extends Internal.CommandNode<S> {
        listSuggestions(arg0: Internal.CommandContext_<S>, arg1: Internal.SuggestionsBuilder_): Internal.CompletableFuture<Internal.Suggestions>;
        getName(): string;
        getLiteral(): string;
        createBuilder(): Internal.LiteralArgumentBuilder<S>;
        isValidInput(arg0: string): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        getExamples(): Internal.Collection<string>;
        getUsageText(): string;
        toString(): string;
        parse(arg0: Internal.StringReader_, arg1: Internal.CommandContextBuilder_<S>): void;
        get examples(): Internal.Collection<string>;
        get name(): string;
        get usageText(): string;
        get literal(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LiteralCommandNode_<S> = LiteralCommandNode<S>;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.RecipeJS
    */
    abstract class RecipeJS {
        parseResultItemList(o: any): Internal.List<Internal.ItemStackJS>;
        ingredientAction(filter: Internal.IngredientActionFilter_, action: Internal.IngredientAction_): this;
        getMod(): string;
        convertReplacedOutput(index: number, oldStack: Internal.ItemStackJS_, newStack: Internal.ItemStackJS_): Internal.ItemStackJS;
        convertReplacedInput(index: number, oldIngredient: Internal.IngredientJS_, newIngredient: Internal.IngredientJS_): Internal.IngredientJS;
        save(): void;
        damageIngredient(filter: Internal.IngredientActionFilter_): this;
        damageIngredient(filter: Internal.IngredientActionFilter_, damage: number): this;
        getId(): string;
        dontAdd(): void;
        serializeJson(): void;
        getUniqueId(): string;
        createRecipe(): Internal.Recipe<any>;
        getFromToString(): string;
        replaceOutput(i: Internal.IngredientJS_, with_: Internal.ItemStackJS_, exact: boolean, func: Internal.BiFunction_<Internal.ItemStackJS_, Internal.ItemStackJS_, Internal.ItemStackJS_>): boolean;
        replaceOutput(i: Internal.IngredientJS_, with_: Internal.ItemStackJS_, exact: boolean): boolean;
        parseIngredientItemList(o: any): Internal.List<Internal.IngredientJS>;
        merge(data: any): this;
        getPath(): string;
        create(arg0: Internal.ListJS_): void;
        parseIngredientItemStackList(o: any): Internal.List<Internal.IngredientStackJS>;
        deserializeJson(): void;
        id(_id: ResourceLocation_): this;
        parseIngredientItem(o: any, key: string): Internal.IngredientJS;
        parseIngredientItem(o: any): Internal.IngredientJS;
        getOrCreateId(): ResourceLocation;
        deserialize(): void;
        group(g: string): this;
        serializeNBTAsJson(): boolean;
        getOutputIndex(ingredient: Internal.IngredientJS_, exact: boolean): number;
        getOriginalRecipeResult(): Internal.ItemStackJS;
        getOriginalRecipeIngredients(): Internal.List<Internal.IngredientJS>;
        getInputIndex(ingredient: Internal.IngredientJS_, exact: boolean): number;
        serialize(): void;
        setGroup(g: string): void;
        resultFromRecipeJson(json: Internal.JsonObject_): Internal.ItemStackJS;
        serializeIngredientStack(in_: Internal.IngredientStackJS_): Internal.JsonElement;
        stage(s: string): this;
        replaceInput(i: Internal.IngredientJS_, with_: Internal.IngredientJS_, exact: boolean): boolean;
        replaceInput(i: Internal.IngredientJS_, with_: Internal.IngredientJS_, exact: boolean, func: Internal.BiFunction_<Internal.IngredientJS_, Internal.IngredientJS_, Internal.IngredientJS_>): boolean;
        getType(): string;
        getGroup(): string;
        serializeItemStack(stack: Internal.ItemStackJS_): Internal.JsonElement;
        hasOutput(ingredient: Internal.IngredientJS_, exact: boolean): boolean;
        toString(): string;
        keepIngredient(filter: Internal.IngredientActionFilter_): this;
        customIngredientAction(filter: Internal.IngredientActionFilter_, id: string): this;
        modifyResult(callback: Internal.ModifyRecipeResultCallback_): this;
        parseResultItem(o: any): Internal.ItemStackJS;
        hasInput(ingredient: Internal.IngredientJS_, exact: boolean): boolean;
        replaceIngredient(filter: Internal.IngredientActionFilter_, item: Internal.ItemStackJS_): this;
        static "currentRecipe" : null;
        "originalJson" : Internal.JsonObject;
        "serializeOutputs" : boolean;
        "originalRecipe" : Internal.Recipe<any>;
        readonly "inputItems" : Internal.List<Internal.IngredientJS>;
        static "itemErrors" : false;
        "json" : Internal.JsonObject;
        readonly "outputItems" : Internal.List<Internal.ItemStackJS>;
        "type" : Internal.RecipeTypeJS;
        "serializeInputs" : boolean;
        get path(): string;
        get mod(): string;
        get originalRecipeIngredients(): Internal.List<Internal.IngredientJS>;
        get originalRecipeResult(): Internal.ItemStackJS;
        get orCreateId(): ResourceLocation;
        get fromToString(): string;
        get uniqueId(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeJS_ = RecipeJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.event.EventsJS
    */
    class EventsJS {
        postToHandlers(id: string, list: Internal.List_<Internal.EventsJS$ScriptEventHandler_>, event: Internal.EventJS_): boolean;
        handlers(id: string): Internal.List<Internal.EventsJS$ScriptEventHandler>;
        clear(): void;
        listen(id: string, handler: Internal.IEventHandler_): void;
        readonly "scriptManager" : Internal.ScriptManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventsJS_ = EventsJS;
    /**
    * @javaClass java.awt.geom.Point2D
    */
    abstract class Point2D implements Internal.Cloneable {
        getX(): number;
        getY(): number;
        distance(arg0: number, arg1: number): number;
        static distance(arg0: number, arg1: number, arg2: number, arg3: number): number;
        distance(arg0: Internal.Point2D_): number;
        setLocation(arg0: Internal.Point2D_): void;
        setLocation(arg0: number, arg1: number): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        clone(): any;
        distanceSq(arg0: number, arg1: number): number;
        distanceSq(arg0: Internal.Point2D_): number;
        static distanceSq(arg0: number, arg1: number, arg2: number, arg3: number): number;
        get x(): number;
        get y(): number;
        set location(arg0: Internal.Point2D_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Point2D_ = Point2D;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.blockentity.BlockEntityTypeExtension
    */
    interface BlockEntityTypeExtension <T> {
        flywheel$setInstancingController(arg0: Internal.BlockEntityInstancingController_<T>): void;
        flywheel$getInstancingController(): Internal.BlockEntityInstancingController<T>;
    }
    type BlockEntityTypeExtension_<T> = BlockEntityTypeExtension<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemBuilder$FinishUsingCallback
    */
    interface ItemBuilder$FinishUsingCallback {
        finishUsingItem(arg0: Internal.ItemStackJS_, arg1: Internal.LevelJS_, arg2: Internal.LivingEntityJS_): Internal.ItemStackJS;
    }
    type ItemBuilder$FinishUsingCallback_ = ((arg0: Internal.ItemStackJS, arg1: Internal.LevelJS, arg2: Internal.LivingEntityJS) => Internal.ItemStackJS) | ItemBuilder$FinishUsingCallback;
    /**
    * @javaClass net.minecraftforge.client.event.ModelRegistryEvent
    */
    class ModelRegistryEvent extends net.minecraftforge.eventbus.api.Event implements Internal.IModBusEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelRegistryEvent_ = ModelRegistryEvent;
    /**
    * @javaClass java.time.LocalTime
    */
    class LocalTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.LocalTime>, Internal.Serializable {
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plusHours(arg0: number): this;
        minusHours(arg0: number): this;
        atDate(arg0: Internal.LocalDate_): Internal.LocalDateTime;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        compareTo(arg0: Internal.LocalTime_): number;
        plusMinutes(arg0: number): this;
        toSecondOfDay(): number;
        minusMinutes(arg0: number): this;
        hashCode(): number;
        static now(): this;
        static now(arg0: Internal.Clock_): this;
        static now(arg0: Internal.ZoneId_): this;
        static of(arg0: number, arg1: number): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number): this;
        static of(arg0: number, arg1: number, arg2: number): this;
        get(arg0: Internal.TemporalField_): number;
        plusSeconds(arg0: number): this;
        getMinute(): number;
        getHour(): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        plusNanos(arg0: number): this;
        withMinute(arg0: number): this;
        withHour(arg0: number): this;
        static ofNanoOfDay(arg0: number): this;
        atOffset(arg0: Internal.ZoneOffset_): Internal.OffsetTime;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        format(arg0: Internal.DateTimeFormatter_): string;
        static parse(arg0: Internal.CharSequence_): this;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        isBefore(arg0: Internal.LocalTime_): boolean;
        plus(arg0: Internal.TemporalAmount_): this;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        withNano(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        static ofSecondOfDay(arg0: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        toNanoOfDay(): number;
        toEpochSecond(arg0: Internal.LocalDate_, arg1: Internal.ZoneOffset_): number;
        equals(arg0: any): boolean;
        getSecond(): number;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        minusSeconds(arg0: number): this;
        isAfter(arg0: Internal.LocalTime_): boolean;
        withSecond(arg0: number): this;
        static readonly "MIN" : Internal.LocalTime;
        static readonly "NOON" : Internal.LocalTime;
        static readonly "MAX" : Internal.LocalTime;
        static readonly "MIDNIGHT" : Internal.LocalTime;
        get hour(): number;
        get nano(): number;
        get minute(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LocalTime_ = LocalTime;
    /**
    * @javaClass com.mojang.datafixers.util.Function16
    */
    interface Function16 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.Function4<T13, T14, T15, T16, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function7<T10, T11, T12, T13, T14, T15, T16, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Internal.Function3<T14, T15, T16, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15, arg15: T16): R;
        curry14(): Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Internal.BiFunction<T15, T16, R>>;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function9<T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry15(): Internal.Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Internal.Function<T16, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function8<T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function6<T11, T12, T13, T14, T15, T16, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function5<T12, T13, T14, T15, T16, R>>;
        curry(): Internal.Function<T1, Internal.Function15<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function11<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function10<T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function13<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function12<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function14<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>;
    }
    type Function16_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15, arg15: T16) => R) | Function16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>;
    /**
    * @javaClass mezz.jei.api.runtime.IJeiRuntime
    */
    interface IJeiRuntime {
        getRecipeManager(): Internal.IRecipeManager;
        getIngredientListOverlay(): Internal.IIngredientListOverlay;
        getBookmarkOverlay(): Internal.IBookmarkOverlay;
        getRecipesGui(): Internal.IRecipesGui;
        getJeiHelpers(): Internal.IJeiHelpers;
        getIngredientFilter(): Internal.IIngredientFilter;
        getIngredientVisibility(): Internal.IIngredientVisibility;
        createTypedIngredient<T>(arg0: Internal.IIngredientType_<T>, arg1: T): Internal.ITypedIngredient<T>;
        getIngredientManager(): Internal.IIngredientManager;
        createFocus<T>(arg0: Internal.RecipeIngredientRole_, arg1: Internal.IIngredientType_<T>, arg2: T): Internal.IFocus<T>;
    }
    type IJeiRuntime_ = IJeiRuntime;
    /**
    * @javaClass java.time.chrono.ChronoLocalDate
    */
    interface ChronoLocalDate extends Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.ChronoLocalDate> {
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        toEpochDay(): number;
        isEqual(arg0: Internal.ChronoLocalDate_): boolean;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        format(arg0: Internal.DateTimeFormatter_): string;
        isLeapYear(): boolean;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        compareTo(arg0: Internal.ChronoLocalDate_): number;
        isBefore(arg0: Internal.ChronoLocalDate_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
        atTime(arg0: Internal.LocalTime_): Internal.ChronoLocalDateTime<any>;
        lengthOfYear(): number;
        with(arg0: Internal.TemporalAdjuster_): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        lengthOfMonth(): number;
        getEra(): Internal.Era;
        hashCode(): number;
        equals(arg0: any): boolean;
        timeLineOrder(): Internal.Comparator<Internal.ChronoLocalDate>;
        until(arg0: Internal.ChronoLocalDate_): Internal.ChronoPeriod;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        from(arg0: Internal.TemporalAccessor_): this;
        toString(): string;
        getChronology(): Internal.Chronology;
        isAfter(arg0: Internal.ChronoLocalDate_): boolean;
    }
    type ChronoLocalDate_ = ChronoLocalDate;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$Chat
    */
    class RenderGameOverlayEvent$Chat extends Internal.RenderGameOverlayEvent$Pre {
        getListenerList(): Internal.ListenerList;
        setPosX(arg0: number): void;
        setPosY(arg0: number): void;
        getPosX(): number;
        getPosY(): number;
        get posX(): number;
        get posY(): number;
        get listenerList(): Internal.ListenerList;
        set posX(arg0: number);
        set posY(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$Chat_ = RenderGameOverlayEvent$Chat;
    /**
    * @javaClass com.mojang.brigadier.context.CommandContext
    */
    class CommandContext <S> {
        copyFor(arg0: S): Internal.CommandContext<S>;
        getRedirectModifier(): Internal.RedirectModifier<S>;
        hasNodes(): boolean;
        getNodes(): Internal.List<Internal.ParsedCommandNode<S>>;
        getCommand(): Internal.Command<S>;
        isForked(): boolean;
        getChild(): Internal.CommandContext<S>;
        getArgument<V>(arg0: string, arg1: Internal.Class_<V>): V;
        getInput(): string;
        getLastChild(): Internal.CommandContext<S>;
        getRange(): Internal.StringRange;
        getSource(): S;
        hashCode(): number;
        equals(arg0: any): boolean;
        getRootNode(): Internal.CommandNode<S>;
        get input(): string;
        get nodes(): Internal.List<Internal.ParsedCommandNode<S>>;
        get lastChild(): Internal.CommandContext<S>;
        get range(): Internal.StringRange;
        get source(): S;
        get redirectModifier(): Internal.RedirectModifier<S>;
        get command(): Internal.Command<S>;
        get forked(): boolean;
        get child(): Internal.CommandContext<S>;
        get rootNode(): Internal.CommandNode<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandContext_<S> = CommandContext<S>;
    /**
    * @javaClass net.minecraft.world.inventory.AbstractContainerMenu
    */
    abstract class AbstractContainerMenu {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractContainerMenu_ = AbstractContainerMenu;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2CharFunction
    */
    interface Char2CharFunction extends it.unimi.dsi.fastutil.Function<string, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: string, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: string): string;
        remove(arg0: any): string;
        remove(arg0: string): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): string;
        get(arg0: string): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: string): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2CharFunction;
    }
    type Char2CharFunction_ = ((arg0: string) => string) | Char2CharFunction;
    /**
    * @javaClass com.google.common.collect.ImmutableMultisetGwtSerializationDependencies
    */
    abstract class ImmutableMultisetGwtSerializationDependencies <E> extends Internal.ImmutableCollection<E> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMultisetGwtSerializationDependencies_<E> = ImmutableMultisetGwtSerializationDependencies<E>;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongSpliterator
    */
    interface LongSpliterator extends Internal.Spliterator$OfLong {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): boolean;
        getComparator(): Internal.LongComparator;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): void;
    }
    type LongSpliterator_ = (() => Internal.LongSpliterator) | LongSpliterator;
    /**
    * @javaClass com.google.common.collect.ImmutableSet
    */
    abstract class ImmutableSet <E> extends Internal.ImmutableCollection<E> implements Internal.Set<E> {
        static builderWithExpectedSize<E>(arg0: number): Internal.ImmutableSet$Builder<E>;
        iterator(): Internal.UnmodifiableIterator<E>;
        hashCode(): number;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableSet<E>;
        static of<E>(): Internal.ImmutableSet<E>;
        static of<E>(arg0: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, ... arg6: E[]): Internal.ImmutableSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableSet<E>;
        equals(arg0: any): boolean;
        static builder<E>(): Internal.ImmutableSet$Builder<E>;
        static copyOf<E>(arg0: E[]): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Iterable_<E>): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Collection_<E>): Internal.ImmutableSet<E>;
        static copyOf<E>(arg0: Internal.Iterator_<E>): Internal.ImmutableSet<E>;
        static toImmutableSet<E>(): Internal.Collector<E, any, Internal.ImmutableSet<E>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableSet_<E> = ImmutableSet<E>;
    /**
    * @javaClass net.minecraft.client.renderer.MultiBufferSource$BufferSource
    */
    class MultiBufferSource$BufferSource implements Internal.MultiBufferSource, Internal.AccessorMultiBufferSource {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MultiBufferSource$BufferSource_ = MultiBufferSource$BufferSource;
    /**
    * @javaClass net.minecraft.world.level.biome.BiomeGenerationSettings$Builder
    */
    class BiomeGenerationSettings$Builder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeGenerationSettings$Builder_ = BiomeGenerationSettings$Builder;
    /**
    * @javaClass com.mojang.datafixers.Products$P9
    */
    class Products$P9 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P9_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9> = Products$P9<F, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
    /**
    * @javaClass java.awt.event.ContainerListener
    */
    interface ContainerListener extends Internal.EventListener {
        componentRemoved(arg0: Internal.ContainerEvent_): void;
        componentAdded(arg0: Internal.ContainerEvent_): void;
    }
    type ContainerListener_ = ContainerListener;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2FloatFunction
    */
    interface Object2FloatFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2FloatFunction;
        getFloat(arg0: any): number;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Float2FloatFunction_): Internal.Object2FloatFunction<K>;
        removeFloat(arg0: any): number;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2FloatFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2FloatFunction;
    }
    type Object2FloatFunction_<K> = ((arg0: any) => number) | Object2FloatFunction<K>;
    /**
    * @javaClass io.netty.channel.ChannelFuture
    */
    interface ChannelFuture extends io.netty.util.concurrent.Future<void> {
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        isVoid(): boolean;
        syncUninterruptibly(): this;
        await(): this;
        channel(): io.netty.channel.Channel;
        awaitUninterruptibly(): this;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        sync(): this;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
    }
    type ChannelFuture_ = ChannelFuture;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.NBTSerializable
    */
    interface NBTSerializable {
        toNBT(): Internal.Tag;
    }
    type NBTSerializable_ = (() => Internal.Tag) | NBTSerializable;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2LongFunction
    */
    interface Int2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Int2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Int2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2LongFunction;
    }
    type Int2LongFunction_ = ((arg0: number) => number) | Int2LongFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.icon.MutableColor4I
    */
    class MutableColor4I extends Internal.Color4I {
        addBrightness(b: number): Internal.Color4I;
        isMutable(): boolean;
        set(r: number, g: number, b: number, a: number): Internal.Color4I;
        set(col: Internal.Color4I_, a: number): Internal.Color4I;
        set(col: Internal.Color4I_): Internal.Color4I;
        set(col: number, a: number): Internal.Color4I;
        set(col: number): Internal.Color4I;
        mutable(): this;
        setAlpha(a: number): Internal.Color4I;
        setFromHSB(h: number, s: number, b: number): Internal.Color4I;
        copy(): this;
        getJson(): Internal.JsonElement;
        static readonly "TEMP" : Internal.Color4I;
        get json(): Internal.JsonElement;
        set alpha(a: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MutableColor4I_ = MutableColor4I;
    /**
    * @javaClass net.minecraft.world.level.biome.Biome$BiomeCategory
    */
    class Biome$BiomeCategory extends Internal.Enum<Internal.Biome$BiomeCategory> implements Internal.StringRepresentable {
        static valueOf(arg0: string): this;
        static values(): Internal.Biome$BiomeCategory[];
        static readonly "BEACH" : Internal.Biome$BiomeCategory;
        static readonly "UNDERGROUND" : Internal.Biome$BiomeCategory;
        static readonly "MESA" : Internal.Biome$BiomeCategory;
        static readonly "SAVANNA" : Internal.Biome$BiomeCategory;
        static readonly "THEEND" : Internal.Biome$BiomeCategory;
        static readonly "JUNGLE" : Internal.Biome$BiomeCategory;
        static readonly "OCEAN" : Internal.Biome$BiomeCategory;
        static readonly "TAIGA" : Internal.Biome$BiomeCategory;
        static readonly "MOUNTAIN" : Internal.Biome$BiomeCategory;
        static readonly "DESERT" : Internal.Biome$BiomeCategory;
        static readonly "RIVER" : Internal.Biome$BiomeCategory;
        static readonly "FOREST" : Internal.Biome$BiomeCategory;
        static readonly "MUSHROOM" : Internal.Biome$BiomeCategory;
        static readonly "NETHER" : Internal.Biome$BiomeCategory;
        static readonly "PLAINS" : Internal.Biome$BiomeCategory;
        static readonly "SWAMP" : Internal.Biome$BiomeCategory;
        static readonly "NONE" : Internal.Biome$BiomeCategory;
        static readonly "EXTREME_HILLS" : Internal.Biome$BiomeCategory;
        static readonly "ICY" : Internal.Biome$BiomeCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Biome$BiomeCategory_ = "forest" | "nether" | "taiga" | "none" | "swamp" | "theend" | "mountain" | "ocean" | "mesa" | "underground" | "extreme_hills" | "plains" | "savanna" | "beach" | "jungle" | "river" | "desert" | "mushroom" | "icy" | Biome$BiomeCategory;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.WrappedJS
    */
    interface WrappedJS {
    }
    type WrappedJS_ = WrappedJS;
    /**
    * @javaClass java.awt.RenderingHints$Key
    */
    abstract class RenderingHints$Key {
        isCompatibleValue(arg0: any): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderingHints$Key_ = RenderingHints$Key;
    /**
    * @javaClass java.io.ObjectInput
    */
    interface ObjectInput extends Internal.DataInput, Internal.AutoCloseable {
        read(arg0: number[], arg1: number, arg2: number): number;
        read(arg0: number[]): number;
        read(): number;
        available(): number;
        skip(arg0: number): number;
        close(): void;
        readObject(): any;
    }
    type ObjectInput_ = ObjectInput;
    /**
    * @javaClass com.mojang.serialization.Dynamic
    */
    class Dynamic <T> extends Internal.DynamicLike<T> {
        updateGeneric(arg0: T, arg1: Internal.Function_<T, T>): Internal.Dynamic<T>;
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        updateMapValues(arg0: Internal.Function_<com.mojang.datafixers.util.Pair_<Internal.Dynamic_<any>, Internal.Dynamic_<any>>, com.mojang.datafixers.util.Pair_<Internal.Dynamic_<any>, Internal.Dynamic_<any>>>): Internal.Dynamic<T>;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        update(arg0: string, arg1: Internal.Function_<Internal.Dynamic_<any>, Internal.Dynamic_<any>>): Internal.Dynamic<T>;
        convert<R>(arg0: Internal.DynamicOps_<R>): Internal.Dynamic<R>;
        static convert<S, T>(arg0: Internal.DynamicOps_<S>, arg1: Internal.DynamicOps_<T>, arg2: S): T;
        decode<A>(arg0: Internal.Decoder_<A>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        remove(arg0: string): Internal.Dynamic<T>;
        getMapValues(): Internal.DataResult<Internal.Map<Internal.Dynamic<T>, Internal.Dynamic<T>>>;
        into<V>(arg0: Internal.Function_<Internal.Dynamic_<T>, V>): V;
        cast<U>(arg0: Internal.DynamicOps_<U>): U;
        hashCode(): number;
        merge(arg0: Internal.Dynamic_<any>, arg1: Internal.Dynamic_<any>): Internal.OptionalDynamic<T>;
        merge(arg0: Internal.Dynamic_<any>): Internal.OptionalDynamic<T>;
        get(arg0: string): Internal.OptionalDynamic<T>;
        asString(): Internal.DataResult<string>;
        map(arg0: Internal.Function_<T, T>): Internal.Dynamic<T>;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        set(arg0: string, arg1: Internal.Dynamic_<any>): Internal.Dynamic<T>;
        asNumber(): Internal.DataResult<Internal.Number>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asMapOpt(): Internal.DataResult<Internal.Stream<com.mojang.datafixers.util.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        castTyped<U>(arg0: Internal.DynamicOps_<U>): Internal.Dynamic<U>;
        getValue(): T;
        getElement(arg0: string): Internal.DataResult<T>;
        equals(arg0: any): boolean;
        toString(): string;
        get mapValues(): Internal.DataResult<Internal.Map<Internal.Dynamic<T>, Internal.Dynamic<T>>>;
        get value(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dynamic_<T> = Dynamic<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.ClassWrapper
    */
    class ClassWrapper <T> extends Internal.Record implements Internal.CustomJavaToJsWrapper {
        wrappedClass(): typeof T;
        hashCode(): number;
        equals(o: any): boolean;
        toString(): string;
        convertJavaToJs(cx: Internal.Context_, scope: Internal.Scriptable_, staticType: Internal.Class_<any>): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClassWrapper_<T> = typeof T | ClassWrapper<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.BlockStateKJS
    */
    interface BlockStateKJS {
        setDestroySpeedKJS(arg0: number): void;
        setLightEmissionKJS(arg0: number): void;
        setRequiresToolKJS(arg0: boolean): void;
        setMaterialKJS(arg0: net.minecraft.world.level.material.Material_): void;
    }
    type BlockStateKJS_ = BlockStateKJS;
    /**
    * @javaClass net.minecraftforge.fml.config.IConfigEvent$ConfigConfig
    */
    class IConfigEvent$ConfigConfig extends Internal.Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        reloading(): Internal.Function<Internal.ModConfig, Internal.IConfigEvent>;
        toString(): string;
        loading(): Internal.Function<Internal.ModConfig, Internal.IConfigEvent>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IConfigEvent$ConfigConfig_ = IConfigEvent$ConfigConfig;
    /**
    * @javaClass net.minecraftforge.eventbus.api.GenericEvent
    */
    class GenericEvent <T> extends net.minecraftforge.eventbus.api.Event implements Internal.IGenericEvent<T> {
        getGenericType(): Internal.Type;
        get genericType(): Internal.Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GenericEvent_<T> = GenericEvent<T>;
    /**
    * @javaClass dev.architectury.hooks.level.biome.EffectsProperties
    */
    interface EffectsProperties {
        getAmbientMoodSound(): Internal.Optional<Internal.AmbientMoodSettings>;
        getFoliageColorOverride(): Internal.OptionalInt;
        getSkyColor(): number;
        getAmbientParticle(): Internal.Optional<Internal.AmbientParticleSettings>;
        getGrassColorOverride(): Internal.OptionalInt;
        getAmbientLoopSound(): Internal.Optional<Internal.SoundEvent>;
        getFogColor(): number;
        getAmbientAdditionsSound(): Internal.Optional<Internal.AmbientAdditionsSettings>;
        getBackgroundMusic(): Internal.Optional<Internal.Music>;
        getGrassColorModifier(): Internal.BiomeSpecialEffects$GrassColorModifier;
        getWaterColor(): number;
        getWaterFogColor(): number;
    }
    type EffectsProperties_ = EffectsProperties;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.DependencyRequirement
    */
    class DependencyRequirement extends Internal.Enum<Internal.DependencyRequirement> {
        static valueOf(name: string): this;
        static values(): Internal.DependencyRequirement[];
        static readonly "ONE_STARTED" : Internal.DependencyRequirement;
        static readonly "ALL_STARTED" : Internal.DependencyRequirement;
        static readonly "NAME_MAP" : Internal.NameMap<Internal.DependencyRequirement>;
        readonly "one" : boolean;
        readonly "id" : string;
        readonly "completed" : boolean;
        static readonly "ALL_COMPLETED" : Internal.DependencyRequirement;
        static readonly "ONE_COMPLETED" : Internal.DependencyRequirement;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DependencyRequirement_ = "one_completed" | "all_completed" | "one_started" | "all_started" | DependencyRequirement;
    /**
    * @javaClass net.minecraft.world.entity.PathfinderMob
    */
    abstract class PathfinderMob extends Internal.Mob {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PathfinderMob_ = PathfinderMob;
    /**
    * @javaClass mezz.jei.api.gui.IRecipeLayoutDrawable
    */
    interface IRecipeLayoutDrawable extends Internal.IRecipeLayout {
        isMouseOver(arg0: number, arg1: number): boolean;
        getItemStackUnderMouse(arg0: number, arg1: number): Internal.ItemStack;
        drawOverlays(arg0: Internal.PoseStack_, arg1: number, arg2: number): void;
        getIngredientUnderMouse<T>(arg0: number, arg1: number, arg2: Internal.IIngredientType_<T>): T;
        setPosition(arg0: number, arg1: number): void;
        drawRecipe(arg0: Internal.PoseStack_, arg1: number, arg2: number): void;
    }
    type IRecipeLayoutDrawable_ = IRecipeLayoutDrawable;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModFileInfo$LanguageSpec
    */
    class IModFileInfo$LanguageSpec extends Internal.Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        languageName(): string;
        acceptedVersions(): Internal.VersionRange;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IModFileInfo$LanguageSpec_ = IModFileInfo$LanguageSpec;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeBlockState
    */
    interface IForgeBlockState {
        rotate(arg0: Internal.LevelAccessor_, arg1: BlockPos_, arg2: Internal.Rotation_): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Vec3_): Internal.BlockState;
        getBedDirection(arg0: Internal.LevelReader_, arg1: BlockPos_): Internal.Direction;
        onBlockExploded(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.Explosion_): void;
        getExpDrop(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: number, arg3: number): number;
        isConduitFrame(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: BlockPos_): boolean;
        getLightEmission(arg0: Internal.BlockGetter_, arg1: BlockPos_): number;
        onDestroyedByPlayer(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.Player_, arg3: boolean, arg4: Internal.FluidState_): boolean;
        isBed(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.LivingEntity_): boolean;
        canHarvestBlock(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Player_): boolean;
        shouldCheckWeakPower(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Direction_): boolean;
        collisionExtendsVertically(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Entity_): boolean;
        supportsExternalFaceHiding(): boolean;
        isLadder(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.LivingEntity_): boolean;
        addLandingEffects(arg0: Internal.ServerLevel_, arg1: BlockPos_, arg2: Internal.BlockState_, arg3: Internal.LivingEntity_, arg4: number): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidState_): boolean;
        getSoundType(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Entity_): Internal.SoundType;
        onNeighborChange(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: BlockPos_): void;
        canStickTo(arg0: Internal.BlockState_): boolean;
        addRunningEffects(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.Entity_): boolean;
        hidesNeighborFace(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.BlockState_, arg3: Internal.Direction_): boolean;
        getWeakChanges(arg0: Internal.LevelReader_, arg1: BlockPos_): boolean;
        canEntityDestroy(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Entity_): boolean;
        isBurning(arg0: Internal.BlockGetter_, arg1: BlockPos_): boolean;
        getCloneItemStack(arg0: Internal.HitResult_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Player_): Internal.ItemStack;
        getFriction(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Entity_): number;
        isFlammable(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Direction_): boolean;
        isValidSpawn(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.SpawnPlacements$Type_, arg3: Internal.EntityType_<any>): boolean;
        isPortalFrame(arg0: Internal.BlockGetter_, arg1: BlockPos_): boolean;
        getBlockPathType(arg0: Internal.BlockGetter_, arg1: BlockPos_): Internal.BlockPathTypes;
        getBlockPathType(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Mob_): Internal.BlockPathTypes;
        getExplosionResistance(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Explosion_): number;
        onBlockStateChange(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.BlockState_): void;
        isScaffolding(arg0: Internal.LivingEntity_): boolean;
        canSustainPlant(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Direction_, arg3: Internal.IPlantable_): boolean;
        onCaughtFire(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.Direction_, arg3: Internal.LivingEntity_): void;
        getEnchantPowerBonus(arg0: Internal.LevelReader_, arg1: BlockPos_): number;
        setBedOccupied(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.LivingEntity_, arg3: boolean): void;
        isFireSource(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Direction_): boolean;
        canDropFromExplosion(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Explosion_): boolean;
        getRespawnPosition(arg0: Internal.EntityType_<any>, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: number, arg4: Internal.LivingEntity_): Internal.Optional<Vec3>;
        canRedstoneConnectTo(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Direction_): boolean;
        isStickyBlock(): boolean;
        isFertile(arg0: Internal.BlockGetter_, arg1: BlockPos_): boolean;
        isSlimeBlock(): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Direction_): number;
        getFlammability(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Direction_): number;
        getToolModifiedState(arg0: Internal.UseOnContext_, arg1: Internal.ToolAction_, arg2: boolean): Internal.BlockState;
        getToolModifiedState(arg0: Internal.Level_, arg1: BlockPos_, arg2: Internal.Player_, arg3: Internal.ItemStack_, arg4: Internal.ToolAction_): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: BlockPos_): number[];
    }
    type IForgeBlockState_ = IForgeBlockState;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ObjectMap
    */
    interface Int2ObjectMap <V> extends Internal.Int2ObjectFunction<V>, Internal.Map<number, V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<number, V>>;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<number, V>): void;
        computeIfAbsent(arg0: number, arg1: Internal.Int2ObjectFunction_<V>): V;
        computeIfAbsent(arg0: number, arg1: Internal.IntFunction_<V>): V;
        values(): Internal.ObjectCollection<V>;
        replace(arg0: number, arg1: V, arg2: V): boolean;
        replace(arg0: number, arg1: V): V;
        clear(): void;
        computeIfAbsentPartial(arg0: number, arg1: Internal.Int2ObjectFunction_<V>): V;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number, arg1: any): boolean;
        compute(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        int2ObjectEntrySet(): Internal.ObjectSet<Internal.Int2ObjectMap$Entry<V>>;
        computeIfPresent(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        size(): number;
        merge(arg0: number, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        get(arg0: any): V;
        keySet(): Internal.IntSet;
        putIfAbsent(arg0: number, arg1: V): V;
    }
    type Int2ObjectMap_<V> = Int2ObjectMap<V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2DoubleFunction
    */
    interface Char2DoubleFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Char2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2DoubleFunction;
    }
    type Char2DoubleFunction_ = ((arg0: string) => number) | Char2DoubleFunction;
    /**
    * @javaClass java.util.function.IntUnaryOperator
    */
    interface IntUnaryOperator {
        applyAsInt(arg0: number): number;
        compose(arg0: Internal.IntUnaryOperator_): this;
        identity(): this;
        andThen(arg0: Internal.IntUnaryOperator_): this;
    }
    type IntUnaryOperator_ = ((arg0: number) => number) | IntUnaryOperator;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatBinaryOperator
    */
    interface FloatBinaryOperator extends Internal.BinaryOperator<number>, Internal.DoubleBinaryOperator {
        applyAsDouble(arg0: number, arg1: number): number;
        apply(arg0: number, arg1: number): number;
    }
    type FloatBinaryOperator_ = ((arg0: number, arg1: number) => number) | FloatBinaryOperator;
    /**
    * @javaClass java.awt.font.LineMetrics
    */
    abstract class LineMetrics {
        getAscent(): number;
        getBaselineIndex(): number;
        getStrikethroughOffset(): number;
        getHeight(): number;
        getUnderlineThickness(): number;
        getBaselineOffsets(): number[];
        getStrikethroughThickness(): number;
        getNumChars(): number;
        getUnderlineOffset(): number;
        getDescent(): number;
        getLeading(): number;
        get strikethroughThickness(): number;
        get descent(): number;
        get ascent(): number;
        get leading(): number;
        get strikethroughOffset(): number;
        get underlineThickness(): number;
        get baselineIndex(): number;
        get baselineOffsets(): number[];
        get numChars(): number;
        get height(): number;
        get underlineOffset(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LineMetrics_ = LineMetrics;
    /**
    * @javaClass java.lang.Appendable
    */
    interface Appendable {
        append(arg0: Internal.CharSequence_): this;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string): this;
    }
    type Appendable_ = Appendable;
    /**
    * @javaClass dev.latvian.mods.itemfilters.api.IItemFilter
    */
    interface IItemFilter {
        resetFilterData(filter: Internal.ItemStack_): void;
        filter(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_): boolean;
        getItems(filter: Internal.ItemStack_, set: Internal.Set_<Internal.Item_>): void;
        filterItem(filter: Internal.ItemStack_, item: Internal.Item_): boolean;
        getDisplayItemStacks(filter: Internal.ItemStack_, list: Internal.List_<Internal.ItemStack_>): void;
        addInfo(filter: Internal.ItemStack_, info: Internal.FilterInfo_, expanded: boolean): void;
        clearFilterCache(filter: Internal.ItemStack_): void;
    }
    type IItemFilter_ = ((arg0: Internal.ItemStack, arg1: Internal.ItemStack) => boolean) | IItemFilter;
    /**
    * @javaClass java.io.Reader
    */
    abstract class Reader implements Internal.Readable, Internal.Closeable {
        read(arg0: string[]): number;
        read(arg0: string[], arg1: number, arg2: number): number;
        read(arg0: Internal.CharBuffer_): number;
        read(): number;
        static nullReader(): this;
        ready(): boolean;
        markSupported(): boolean;
        reset(): void;
        skip(arg0: number): number;
        transferTo(arg0: Internal.Writer_): number;
        close(): void;
        mark(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Reader_ = Reader;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerNegotiationEvent
    */
    class PlayerNegotiationEvent extends net.minecraftforge.eventbus.api.Event {
        getConnection(): Internal.Connection;
        getListenerList(): Internal.ListenerList;
        enqueueWork(arg0: Internal.Runnable_): void;
        enqueueWork(arg0: Internal.Future_<void>): void;
        getProfile(): Internal.GameProfile;
        get listenerList(): Internal.ListenerList;
        get profile(): Internal.GameProfile;
        get connection(): Internal.Connection;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerNegotiationEvent_ = PlayerNegotiationEvent;
    /**
    * @javaClass net.minecraftforge.event.TickEvent
    */
    class TickEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        readonly "phase" : Internal.TickEvent$Phase;
        readonly "side" : Internal.LogicalSide;
        readonly "type" : Internal.TickEvent$Type;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent_ = TickEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.AbstractInt2ObjectFunction
    */
    abstract class AbstractInt2ObjectFunction <V> implements Internal.Int2ObjectFunction<V>, Internal.Serializable {
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractInt2ObjectFunction_<V> = AbstractInt2ObjectFunction<V>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.MutableToolTier
    */
    class MutableToolTier implements Internal.Tier {
        setSpeed(f: number): void;
        getLevel(): number;
        setRepairIngredient(in_: Internal.IngredientJS_): void;
        getUses(): number;
        getSpeed(): number;
        getAttackDamageBonus(): number;
        getEnchantmentValue(): number;
        setEnchantmentValue(i: number): void;
        setAttackDamageBonus(f: number): void;
        getVanillaRepairIngredient(): Internal.Ingredient;
        setUses(i: number): void;
        setLevel(i: number): void;
        readonly "parent" : Internal.Tier;
        get level(): number;
        get vanillaRepairIngredient(): Internal.Ingredient;
        get attackDamageBonus(): number;
        get enchantmentValue(): number;
        get uses(): number;
        get speed(): number;
        set repairIngredient(in_: Internal.IngredientJS_);
        set level(i: number);
        set attackDamageBonus(f: number);
        set enchantmentValue(i: number);
        set uses(i: number);
        set speed(f: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MutableToolTier_ = MutableToolTier;
    /**
    * @javaClass dev.architectury.registry.level.biome.BiomeModifications$BiomeContext
    */
    interface BiomeModifications$BiomeContext {
        getKey(): ResourceLocation;
        hasTag(arg0: Internal.TagKey_<Internal.Biome_>): boolean;
        getProperties(): Internal.BiomeProperties;
    }
    type BiomeModifications$BiomeContext_ = BiomeModifications$BiomeContext;
    /**
    * @javaClass com.google.common.collect.UnmodifiableListIterator
    */
    abstract class UnmodifiableListIterator <E> extends Internal.UnmodifiableIterator<E> implements Internal.ListIterator<E> {
        add(arg0: E): void;
        set(arg0: E): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnmodifiableListIterator_<E> = UnmodifiableListIterator<E>;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedFluidExtension
    */
    interface InjectedFluidExtension extends Internal.InjectedRegistryEntryExtension<Internal.Fluid> {
        arch$holder(): Internal.Holder<Internal.Fluid>;
    }
    type InjectedFluidExtension_ = InjectedFluidExtension;
    /**
    * @javaClass java.util.PrimitiveIterator
    */
    interface PrimitiveIterator <T, T_CONS> extends Internal.Iterator<T> {
        forEachRemaining(arg0: T_CONS): void;
    }
    type PrimitiveIterator_<T, T_CONS> = ((arg0: T_CONS) => void) | PrimitiveIterator<T, T_CONS>;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.events.BoilerHeaterHandlerEvent
    */
    class BoilerHeaterHandlerEvent extends Internal.EventJS {
        registerHeaterAdvanced(block: BlockStatePredicate_, onUpdate: Internal.BoilerHeaterHandlerEvent$BoilerHeaterCallback_): void;
        registerHeater(block: Internal.Block_, onUpdate: Internal.BoilerHeaterHandlerEvent$BoilerHeaterCallback_): void;
        static readonly "ID" : "create.boiler.heater";
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BoilerHeaterHandlerEvent_ = BoilerHeaterHandlerEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2FloatFunction
    */
    interface Float2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2FloatFunction;
    }
    type Float2FloatFunction_ = ((arg0: number) => number) | Float2FloatFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.DoubleConfig
    */
    class DoubleConfig extends Internal.NumberConfig<number> {
        getStringFromValue(v: number): string;
        addInfo(list: Internal.TooltipList_): void;
        parse(callback: Internal.Consumer_<number>, string: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DoubleConfig_ = DoubleConfig;
    /**
    * @javaClass net.minecraft.server.MinecraftServer$ReloadableResources
    */
    class MinecraftServer$ReloadableResources extends Internal.Record implements Internal.AutoCloseable {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MinecraftServer$ReloadableResources_ = MinecraftServer$ReloadableResources;
    /**
    * @javaClass java.nio.charset.Charset
    */
    abstract class Charset implements Internal.Comparable<Internal.Charset> {
        encode(arg0: string): Internal.ByteBuffer;
        encode(arg0: Internal.CharBuffer_): Internal.ByteBuffer;
        aliases(): Internal.Set<string>;
        static forName(arg0: string, arg1: Internal.Charset_): this;
        static forName(arg0: string): this;
        displayName(): string;
        displayName(arg0: Internal.Locale_): string;
        newDecoder(): Internal.CharsetDecoder;
        static defaultCharset(): this;
        static isSupported(arg0: string): boolean;
        compareTo(arg0: Internal.Charset_): number;
        decode(arg0: Internal.ByteBuffer_): Internal.CharBuffer;
        contains(arg0: Internal.Charset_): boolean;
        hashCode(): number;
        canEncode(): boolean;
        equals(arg0: any): boolean;
        newEncoder(): Internal.CharsetEncoder;
        name(): string;
        isRegistered(): boolean;
        toString(): string;
        static availableCharsets(): Internal.SortedMap<string, Internal.Charset>;
        get registered(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Charset_ = Charset;
    /**
    * @javaClass com.mojang.datafixers.util.Function11
    */
    interface Function11 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.BiFunction<T10, T11, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function4<T8, T9, T10, T11, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function3<T9, T10, T11, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function6<T6, T7, T8, T9, T10, T11, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function5<T7, T8, T9, T10, T11, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function<T11, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function8<T4, T5, T6, T7, T8, T9, T10, T11, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function7<T5, T6, T7, T8, T9, T10, T11, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function9<T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>;
        curry(): Internal.Function<T1, Internal.Function10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>;
    }
    type Function11_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11) => R) | Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>;
    /**
    * @javaClass java.net.FileNameMap
    */
    interface FileNameMap {
        getContentTypeFor(arg0: string): string;
    }
    type FileNameMap_ = ((arg0: string) => string) | FileNameMap;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongIterable
    */
    interface LongIterable extends Internal.Iterable<number> {
        longIterator(): Internal.LongIterator;
        longSpliterator(): Internal.LongSpliterator;
        iterator(): Internal.LongIterator;
        spliterator(): Internal.LongSpliterator;
        forEach(arg0: Internal.LongConsumer_): void;
        forEach(arg0: Internal.Consumer_<number>): void;
        forEach(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): void;
    }
    type LongIterable_ = (() => Internal.LongIterator) | LongIterable;
    /**
    * @javaClass net.minecraftforge.event.server.ServerAboutToStartEvent
    */
    class ServerAboutToStartEvent extends Internal.ServerLifecycleEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerAboutToStartEvent_ = ServerAboutToStartEvent;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.ClientTeam
    */
    class ClientTeam extends Internal.TeamBase {
        getType(): Internal.TeamType;
        isValid(): boolean;
        write(buffer: Internal.FriendlyByteBuf_, now: number): void;
        isSelf(): boolean;
        readonly "manager" : Internal.ClientTeamManager;
        "invalid" : boolean;
        get valid(): boolean;
        get self(): boolean;
        get type(): Internal.TeamType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientTeam_ = ClientTeam;
    /**
    * Fired when the fishing loot table is registering.
    * @javaClass dev.latvian.mods.kubejs.loot.FishingLootEventJS
    */
    class FishingLootEventJS extends Internal.LootEventJS {
        addFishing(id: ResourceLocation_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getType(): string;
        getDirectory(): string;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the fishing loot table is registering.
    */
    type FishingLootEventJS_ = FishingLootEventJS;
    /**
    * @javaClass com.mojang.serialization.codecs.BaseMapCodec
    */
    interface BaseMapCodec <K, V> {
        encode<T>(arg0: Internal.Map_<K, V>, arg1: Internal.DynamicOps_<T>, arg2: Internal.RecordBuilder_<T>): Internal.RecordBuilder<T>;
        elementCodec(): Internal.Codec<V>;
        keyCodec(): Internal.Codec<K>;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: Internal.MapLike_<T>): Internal.DataResult<Internal.Map<K, V>>;
    }
    type BaseMapCodec_<K, V> = BaseMapCodec<K, V>;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerXpEvent$XpChange
    */
    class PlayerXpEvent$XpChange extends Internal.PlayerXpEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        setAmount(arg0: number): void;
        getAmount(): number;
        get amount(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        set amount(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerXpEvent$XpChange_ = PlayerXpEvent$XpChange;
    /**
    * @javaClass java.lang.invoke.TypeDescriptor
    */
    interface TypeDescriptor {
        descriptorString(): string;
    }
    type TypeDescriptor_ = (() => string) | TypeDescriptor;
    /**
    * @javaClass net.minecraftforge.fluids.FluidAttributes$Builder
    */
    class FluidAttributes$Builder {
        viscosity(arg0: number): this;
        overlay(arg0: ResourceLocation_): this;
        translationKey(arg0: string): this;
        density(arg0: number): this;
        color(arg0: number): this;
        build(arg0: Internal.Fluid_): Internal.FluidAttributes;
        sound(arg0: Internal.SoundEvent_, arg1: Internal.SoundEvent_): this;
        sound(arg0: Internal.SoundEvent_): this;
        temperature(arg0: number): this;
        luminosity(arg0: number): this;
        gaseous(): this;
        rarity(arg0: Rarity_): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidAttributes$Builder_ = FluidAttributes$Builder;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.QuestShape
    */
    class QuestShape extends Internal.Icon {
        static reload(list: Internal.List_<string>): void;
        hashCode(): number;
        equals(o: any): boolean;
        static get(id: string): this;
        toString(): string;
        draw(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        getShapePixels(): Internal.PixelBuffer;
        readonly "outline" : Internal.ImageIcon;
        static "idMapWithDefault" : Internal.NameMap<string>;
        readonly "shape" : Internal.ImageIcon;
        readonly "background" : Internal.ImageIcon;
        static "idMap" : Internal.NameMap<string>;
        readonly "id" : string;
        static readonly "MAP" : {"circle":Internal.QuestShape,"square":Internal.QuestShape,"rsquare":Internal.QuestShape,"diamond":Internal.QuestShape,"pentagon":Internal.QuestShape,"hexagon":Internal.QuestShape,"octagon":Internal.QuestShape,"heart":Internal.QuestShape,"gear":Internal.QuestShape};
        get shapePixels(): Internal.PixelBuffer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestShape_ = QuestShape;
    /**
    * @javaClass net.minecraft.client.resources.model.ModelBakery
    */
    class ModelBakery implements Internal.AccessorModelBakery, Internal.ForgeAccessorModelBakery {
        getSpriteMap(): Internal.AtlasSet;
        getSpecialModels(): Internal.Set<ResourceLocation>;
        bake(arg0: ResourceLocation_, arg1: Internal.ModelState_, arg2: Internal.Function_<Internal.Material_, Internal.TextureAtlasSprite_>): Internal.BakedModel;
        get spriteMap(): Internal.AtlasSet;
        get specialModels(): Internal.Set<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelBakery_ = ModelBakery;
    /**
    * @javaClass javax.accessibility.AccessibleStateSet
    */
    class AccessibleStateSet {
        add(arg0: Internal.AccessibleState_): boolean;
        contains(arg0: Internal.AccessibleState_): boolean;
        addAll(arg0: Internal.AccessibleState_[]): void;
        toArray(): Internal.AccessibleState[];
        clear(): void;
        toString(): string;
        remove(arg0: Internal.AccessibleState_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleStateSet_ = AccessibleStateSet;
    /**
    * @javaClass java.nio.file.WatchEvent
    */
    interface WatchEvent <T> {
        kind(): Internal.WatchEvent$Kind<T>;
        count(): number;
        context(): T;
    }
    type WatchEvent_<T> = WatchEvent<T>;
    /**
    * @javaClass java.time.zone.ZoneOffsetTransitionRule
    */
    class ZoneOffsetTransitionRule implements Internal.Serializable {
        getOffsetAfter(): Internal.ZoneOffset;
        getOffsetBefore(): Internal.ZoneOffset;
        isMidnightEndOfDay(): boolean;
        getDayOfWeek(): Internal.DayOfWeek;
        getLocalTime(): Internal.LocalTime;
        hashCode(): number;
        static of(arg0: Internal.Month_, arg1: number, arg2: Internal.DayOfWeek_, arg3: Internal.LocalTime_, arg4: boolean, arg5: Internal.ZoneOffsetTransitionRule$TimeDefinition_, arg6: Internal.ZoneOffset_, arg7: Internal.ZoneOffset_, arg8: Internal.ZoneOffset_): this;
        equals(arg0: any): boolean;
        getStandardOffset(): Internal.ZoneOffset;
        toString(): string;
        createTransition(arg0: number): Internal.ZoneOffsetTransition;
        getTimeDefinition(): Internal.ZoneOffsetTransitionRule$TimeDefinition;
        getMonth(): Internal.Month;
        getDayOfMonthIndicator(): number;
        get localTime(): Internal.LocalTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get dayOfMonthIndicator(): number;
        get midnightEndOfDay(): boolean;
        get standardOffset(): Internal.ZoneOffset;
        get month(): Internal.Month;
        get timeDefinition(): Internal.ZoneOffsetTransitionRule$TimeDefinition;
        get offsetAfter(): Internal.ZoneOffset;
        get offsetBefore(): Internal.ZoneOffset;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneOffsetTransitionRule_ = ZoneOffsetTransitionRule;
    /**
    * @javaClass java.nio.charset.CoderResult
    */
    class CoderResult {
        static malformedForLength(arg0: number): this;
        isMalformed(): boolean;
        isError(): boolean;
        static unmappableForLength(arg0: number): this;
        isOverflow(): boolean;
        isUnmappable(): boolean;
        isUnderflow(): boolean;
        length(): number;
        toString(): string;
        throwException(): void;
        static readonly "OVERFLOW" : Internal.CoderResult;
        static readonly "UNDERFLOW" : Internal.CoderResult;
        get underflow(): boolean;
        get overflow(): boolean;
        get error(): boolean;
        get unmappable(): boolean;
        get malformed(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CoderResult_ = CoderResult;
    /**
    * @javaClass java.awt.geom.Rectangle2D
    */
    abstract class Rectangle2D extends Internal.RectangularShape {
        add(arg0: number, arg1: number): void;
        add(arg0: Internal.Point2D_): void;
        add(arg0: Internal.Rectangle2D_): void;
        static intersect(arg0: Internal.Rectangle2D_, arg1: Internal.Rectangle2D_, arg2: Internal.Rectangle2D_): void;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        setRect(arg0: Internal.Rectangle2D_): void;
        setRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        static union(arg0: Internal.Rectangle2D_, arg1: Internal.Rectangle2D_, arg2: Internal.Rectangle2D_): void;
        intersectsLine(arg0: Internal.Line2D_): boolean;
        intersectsLine(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: number, arg1: number): boolean;
        contains(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        getPathIterator(arg0: Internal.AffineTransform_, arg1: number): Internal.PathIterator;
        getPathIterator(arg0: Internal.AffineTransform_): Internal.PathIterator;
        setFrame(arg0: number, arg1: number, arg2: number, arg3: number): void;
        createUnion(arg0: Internal.Rectangle2D_): this;
        hashCode(): number;
        outcode(arg0: number, arg1: number): number;
        outcode(arg0: Internal.Point2D_): number;
        equals(arg0: any): boolean;
        getBounds2D(): this;
        createIntersection(arg0: Internal.Rectangle2D_): this;
        static readonly "OUT_TOP" : 2;
        static readonly "OUT_RIGHT" : 4;
        static readonly "OUT_BOTTOM" : 8;
        static readonly "OUT_LEFT" : 1;
        get bounds2D(): this;
        set rect(arg0: Internal.Rectangle2D_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Rectangle2D_ = Rectangle2D;
    /**
    * @javaClass net.minecraft.world.level.biome.BiomeSpecialEffects
    */
    class BiomeSpecialEffects {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeSpecialEffects_ = BiomeSpecialEffects;
    /**
    * @javaClass com.jozufozu.flywheel.mixin.LevelRendererAccessor
    */
    interface LevelRendererAccessor {
        flywheel$getDestructionProgress(): Internal.Long2ObjectMap<Internal.SortedSet<Internal.BlockDestructionProgress>>;
    }
    type LevelRendererAccessor_ = (() => Internal.Long2ObjectMap<Internal.SortedSet<Internal.BlockDestructionProgress>>) | LevelRendererAccessor;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntSpliterator
    */
    interface IntSpliterator extends Internal.Spliterator$OfInt {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): boolean;
        getComparator(): Internal.IntComparator;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): void;
    }
    type IntSpliterator_ = (() => Internal.IntSpliterator) | IntSpliterator;
    /**
    * @javaClass net.minecraftforge.client.extensions.IForgeVertexConsumer
    */
    interface IForgeVertexConsumer {
        applyBakedLighting(arg0: number, arg1: Internal.ByteBuffer_): number;
        getVertexFormat(): Internal.VertexFormat;
        putBulkData(arg0: Internal.PoseStack$Pose_, arg1: Internal.BakedQuad_, arg2: number[], arg3: number, arg4: number, arg5: number, arg6: number, arg7: number[], arg8: number, arg9: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose_, arg1: Internal.BakedQuad_, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): void;
        putBulkData(arg0: Internal.PoseStack$Pose_, arg1: Internal.BakedQuad_, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: boolean): void;
        putBulkData(arg0: Internal.PoseStack$Pose_, arg1: Internal.BakedQuad_, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: boolean): void;
        applyBakedNormals(arg0: Internal.Vector3f_, arg1: Internal.ByteBuffer_, arg2: Internal.Matrix3f_): void;
    }
    type IForgeVertexConsumer_ = IForgeVertexConsumer;
    /**
    * @javaClass java.awt.Image
    */
    abstract class Image {
        getScaledInstance(arg0: number, arg1: number, arg2: number): this;
        setAccelerationPriority(arg0: number): void;
        getHeight(arg0: Internal.ImageObserver_): number;
        getProperty(arg0: string, arg1: Internal.ImageObserver_): any;
        flush(): void;
        getSource(): Internal.ImageProducer;
        getAccelerationPriority(): number;
        getWidth(arg0: Internal.ImageObserver_): number;
        getGraphics(): Internal.Graphics;
        getCapabilities(arg0: Internal.GraphicsConfiguration_): Internal.ImageCapabilities;
        static readonly "SCALE_DEFAULT" : 1;
        static readonly "UndefinedProperty" : any;
        static readonly "SCALE_FAST" : 2;
        static readonly "SCALE_AREA_AVERAGING" : 16;
        static readonly "SCALE_SMOOTH" : 4;
        static readonly "SCALE_REPLICATE" : 8;
        get accelerationPriority(): number;
        get source(): Internal.ImageProducer;
        get graphics(): Internal.Graphics;
        set accelerationPriority(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Image_ = Image;
    /**
    * @javaClass net.minecraftforge.client.event.ClientPlayerNetworkEvent
    */
    class ClientPlayerNetworkEvent extends net.minecraftforge.eventbus.api.Event {
        getConnection(): Internal.Connection;
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.LocalPlayer;
        getMultiPlayerGameMode(): Internal.MultiPlayerGameMode;
        get multiPlayerGameMode(): Internal.MultiPlayerGameMode;
        get listenerList(): Internal.ListenerList;
        get connection(): Internal.Connection;
        get player(): Internal.LocalPlayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientPlayerNetworkEvent_ = ClientPlayerNetworkEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2ReferenceFunction
    */
    interface Reference2ReferenceFunction <K, V> extends it.unimi.dsi.fastutil.Function<K, V> {
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Reference2FloatFunction<K>;
        getOrDefault(arg0: any, arg1: V): V;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2ReferenceFunction<V>;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2ReferenceFunction<T, V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Reference2CharFunction<K>;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Reference2DoubleFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2ReferenceFunction<T, V>;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Reference2ObjectFunction<K, T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2ReferenceFunction<V>;
        get(arg0: any): V;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2ReferenceFunction<V>;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Reference2ByteFunction<K>;
    }
    type Reference2ReferenceFunction_<K, V> = ((arg0: any) => V) | Reference2ReferenceFunction<K, V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2IntFunction
    */
    interface Object2IntFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        removeInt(arg0: any): number;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Object2CharFunction<K>;
        getInt(arg0: any): number;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2IntFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2IntFunction;
    }
    type Object2IntFunction_<K> = ((arg0: any) => number) | Object2IntFunction<K>;
    /**
    * @javaClass com.simibubi.create.foundation.mixin.accessor.ParticleEngineAccessor
    */
    interface ParticleEngineAccessor {
        create$getProviders(): Internal.Map<ResourceLocation, Internal.ParticleProvider<any>>;
    }
    type ParticleEngineAccessor_ = (() => Internal.Map<ResourceLocation, Internal.ParticleProvider<any>>) | ParticleEngineAccessor;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.painter.Painter
    */
    class Painter implements Internal.UnitVariables {
        getObject(key: string): Internal.PainterObject;
        getVariables(): Internal.VariableSet;
        guiScreenDraw(screen: Internal.Screen_, matrices: Internal.PoseStack_, mouseX: number, mouseY: number, delta: number): void;
        clear(): void;
        setVariable(key: string, variable: Internal.Unit_): void;
        paint(root: Internal.CompoundTag_): void;
        inGameScreenDraw(matrices: Internal.PoseStack_, delta: number): void;
        unitOf(o: any): Internal.Unit;
        make(type: string): Internal.PainterObject;
        static readonly "LEFT" : -1;
        static readonly "DRAW_INGAME" : 1;
        static readonly "INSTANCE" : Internal.Painter;
        static readonly "BOTTOM" : 1;
        readonly "screenHeightUnit" : Internal.MutableNumberUnit;
        static readonly "DRAW_GUI" : 2;
        static readonly "CENTER" : 0;
        readonly "screenWidthUnit" : Internal.MutableNumberUnit;
        static readonly "DRAW_ALWAYS" : 0;
        static readonly "TOP" : -1;
        readonly "unitContext" : Internal.UnitContext;
        readonly "mouseXUnit" : Internal.MutableNumberUnit;
        readonly "mouseYUnit" : Internal.MutableNumberUnit;
        readonly "deltaUnit" : Internal.MutableNumberUnit;
        static readonly "RIGHT" : 1;
        get variables(): Internal.VariableSet;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Painter_ = Painter;
    /**
    * @javaClass net.minecraft.sounds.Music
    */
    class Music {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Music_ = Music;
    /**
    * @javaClass java.net.URLConnection
    */
    abstract class URLConnection {
        getLastModified(): number;
        setIfModifiedSince(arg0: number): void;
        setConnectTimeout(arg0: number): void;
        getHeaderFieldLong(arg0: string, arg1: number): number;
        getReadTimeout(): number;
        getContent(arg0: Internal.Class_<any>[]): any;
        getContent(): any;
        setUseCaches(arg0: boolean): void;
        getHeaderFieldInt(arg0: string, arg1: number): number;
        getRequestProperty(arg0: string): string;
        static guessContentTypeFromStream(arg0: Internal.InputStream_): string;
        setRequestProperty(arg0: string, arg1: string): void;
        static setDefaultRequestProperty(arg0: string, arg1: string): void;
        getDoInput(): boolean;
        getHeaderFieldDate(arg0: string, arg1: number): number;
        static getFileNameMap(): Internal.FileNameMap;
        getDate(): number;
        getIfModifiedSince(): number;
        getHeaderFieldKey(arg0: number): string;
        connect(): void;
        static setContentHandlerFactory(arg0: Internal.ContentHandlerFactory_): void;
        getContentEncoding(): string;
        getPermission(): Internal.Permission;
        static getDefaultAllowUserInteraction(): boolean;
        static getDefaultUseCaches(arg0: string): boolean;
        getDefaultUseCaches(): boolean;
        getUseCaches(): boolean;
        getAllowUserInteraction(): boolean;
        getConnectTimeout(): number;
        getContentLength(): number;
        setDoInput(arg0: boolean): void;
        getInputStream(): Internal.InputStream;
        addRequestProperty(arg0: string, arg1: string): void;
        setAllowUserInteraction(arg0: boolean): void;
        getRequestProperties(): Internal.Map<string, Internal.List<string>>;
        setReadTimeout(arg0: number): void;
        getURL(): Internal.URL;
        getHeaderField(arg0: number): string;
        getHeaderField(arg0: string): string;
        getExpiration(): number;
        getHeaderFields(): Internal.Map<string, Internal.List<string>>;
        static getDefaultRequestProperty(arg0: string): string;
        getContentLengthLong(): number;
        static setDefaultAllowUserInteraction(arg0: boolean): void;
        static setFileNameMap(arg0: Internal.FileNameMap_): void;
        getContentType(): string;
        getOutputStream(): Internal.OutputStream;
        toString(): string;
        getDoOutput(): boolean;
        setDefaultUseCaches(arg0: boolean): void;
        static setDefaultUseCaches(arg0: string, arg1: boolean): void;
        setDoOutput(arg0: boolean): void;
        static guessContentTypeFromName(arg0: string): string;
        get date(): number;
        get contentLengthLong(): number;
        get defaultAllowUserInteraction(): boolean;
        get defaultUseCaches(): boolean;
        get useCaches(): boolean;
        get requestProperties(): Internal.Map<string, Internal.List<string>>;
        get inputStream(): Internal.InputStream;
        get ifModifiedSince(): number;
        get permission(): Internal.Permission;
        get content(): any;
        get doInput(): boolean;
        get uRL(): Internal.URL;
        get allowUserInteraction(): boolean;
        get doOutput(): boolean;
        get readTimeout(): number;
        get connectTimeout(): number;
        get contentEncoding(): string;
        get fileNameMap(): Internal.FileNameMap;
        get contentLength(): number;
        get expiration(): number;
        get headerFields(): Internal.Map<string, Internal.List<string>>;
        get lastModified(): number;
        get outputStream(): Internal.OutputStream;
        get contentType(): string;
        set doOutput(arg0: boolean);
        set defaultUseCaches(arg0: boolean);
        set defaultAllowUserInteraction(arg0: boolean);
        set useCaches(arg0: boolean);
        set readTimeout(arg0: number);
        set connectTimeout(arg0: number);
        set fileNameMap(arg0: Internal.FileNameMap_);
        set ifModifiedSince(arg0: number);
        set doInput(arg0: boolean);
        set contentHandlerFactory(arg0: Internal.ContentHandlerFactory_);
        set allowUserInteraction(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type URLConnection_ = URLConnection;
    /**
    * @javaClass com.mojang.serialization.codecs.RecordCodecBuilder$Mu
    */
    class RecordCodecBuilder$Mu <O> implements Internal.K1 {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecordCodecBuilder$Mu_<O> = RecordCodecBuilder$Mu<O>;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.filter.biome.BiomeFilter
    */
    interface BiomeFilter extends Internal.Predicate<Internal.BiomeModifications$BiomeContext> {
        test(arg0: Internal.BiomeModifications$BiomeContext_): boolean;
        of(o: any): this;
        idFilter(s: string): this;
    }
    /**
    */
    type BiomeFilter_ = Internal.Biome_ | RegExp | Internal.BiomeFilter_[] | {or?: Internal.BiomeFilter_, not?: Internal.BiomeFilter_} | ((arg0: Internal.BiomeModifications$BiomeContext) => boolean) | BiomeFilter;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.painter.PainterObjectStorage
    */
    class PainterObjectStorage {
        createScreenObjects(): any[];
        getObject(key: string): Internal.PainterObject;
        clear(): void;
        handle(root: Internal.CompoundTag_): void;
        remove(id: string): void;
        getObjects(): Internal.Collection<Internal.PainterObject>;
        get objects(): Internal.Collection<Internal.PainterObject>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PainterObjectStorage_ = PainterObjectStorage;
    /**
    * @javaClass net.minecraft.world.level.LevelAccessor
    */
    interface LevelAccessor extends Internal.CommonLevelAccessor, Internal.LevelTimeAccess {
    }
    type LevelAccessor_ = LevelAccessor;
    /**
    * @javaClass mezz.jei.api.helpers.IStackHelper
    */
    interface IStackHelper {
        isEquivalent(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_, arg2: Internal.UidContext_): boolean;
        getUniqueIdentifierForStack(arg0: Internal.ItemStack_, arg1: Internal.UidContext_): string;
    }
    type IStackHelper_ = IStackHelper;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyReleasedEvent$Pre
    */
    class ScreenEvent$KeyboardKeyReleasedEvent$Pre extends Internal.ScreenEvent$KeyboardKeyReleasedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyReleasedEvent$Pre_ = ScreenEvent$KeyboardKeyReleasedEvent$Pre;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$Type
    */
    class TickEvent$Type extends Internal.Enum<Internal.TickEvent$Type> {
        static valueOf(arg0: string): this;
        static values(): Internal.TickEvent$Type[];
        static readonly "PLAYER" : Internal.TickEvent$Type;
        static readonly "SERVER" : Internal.TickEvent$Type;
        static readonly "RENDER" : Internal.TickEvent$Type;
        static readonly "WORLD" : Internal.TickEvent$Type;
        static readonly "CLIENT" : Internal.TickEvent$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$Type_ = "server" | "world" | "client" | "render" | "player" | TickEvent$Type;
    /**
    * @javaClass net.minecraft.world.level.block.BucketPickup
    */
    interface BucketPickup extends Internal.IForgeBucketPickup {
    }
    type BucketPickup_ = BucketPickup;
    /**
    * @javaClass java.awt.event.FocusEvent$Cause
    */
    class FocusEvent$Cause extends Internal.Enum<Internal.FocusEvent$Cause> {
        static valueOf(arg0: string): this;
        static values(): Internal.FocusEvent$Cause[];
        static readonly "UNEXPECTED" : Internal.FocusEvent$Cause;
        static readonly "CLEAR_GLOBAL_FOCUS_OWNER" : Internal.FocusEvent$Cause;
        static readonly "ACTIVATION" : Internal.FocusEvent$Cause;
        static readonly "TRAVERSAL" : Internal.FocusEvent$Cause;
        static readonly "TRAVERSAL_UP" : Internal.FocusEvent$Cause;
        static readonly "TRAVERSAL_FORWARD" : Internal.FocusEvent$Cause;
        static readonly "TRAVERSAL_DOWN" : Internal.FocusEvent$Cause;
        static readonly "TRAVERSAL_BACKWARD" : Internal.FocusEvent$Cause;
        static readonly "UNKNOWN" : Internal.FocusEvent$Cause;
        static readonly "MOUSE_EVENT" : Internal.FocusEvent$Cause;
        static readonly "ROLLBACK" : Internal.FocusEvent$Cause;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FocusEvent$Cause_ = "rollback" | "traversal_up" | "traversal_backward" | "unexpected" | "clear_global_focus_owner" | "traversal" | "activation" | "traversal_down" | "mouse_event" | "unknown" | "traversal_forward" | FocusEvent$Cause;
    /**
    * @javaClass java.lang.Exception
    */
    class Exception extends Internal.Throwable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Exception_ = Exception;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.entity.EntityInstance
    */
    abstract class EntityInstance <E> extends Internal.AbstractInstance implements Internal.LightListener, Internal.TickingLightListener {
        getVolume(): Internal.GridAlignedBB;
        getInstancePosition(arg0: number): Internal.Vector3f;
        getInstancePosition(): Internal.Vector3f;
        tickLightListener(): boolean;
        getWorldPosition(): BlockPos;
        get volume(): Internal.GridAlignedBB;
        get worldPosition(): BlockPos;
        get instancePosition(): Internal.Vector3f;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityInstance_<E> = EntityInstance<E>;
    /**
    * @javaClass java.lang.constant.ConstantDesc
    */
    interface ConstantDesc {
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup_): any;
    }
    type ConstantDesc_ = ((arg0: Internal.MethodHandles$Lookup) => any) | ConstantDesc;
    /**
    * Fired to register special handlers for tooltips on items.
    * @javaClass dev.latvian.mods.kubejs.item.ItemTooltipEventJS
    */
    class ItemTooltipEventJS extends Internal.EventJS {
        /**
        *
        * Adds a line (or lines) to the end of tooltip.
        */
        add(item: Internal.IngredientJS_, text: net.minecraft.network.chat.Component_ | net.minecraft.network.chat.Component_[]): void;
        isAlt(): boolean;
        isCtrl(): boolean;
        isShift(): boolean;
        /**
        * Adds a callback to the item, will be invoked when the tooltip is rendering.
        */
        addAdvanced(item: Internal.IngredientJS_, handler: (itemstack: Internal.ItemStackJS, advanced: boolean, lines: Internal.List<string>) => void): void;
        addToAll(text: any): void;
        addAdvancedToAll(handler: Internal.ItemTooltipEventJS$StaticTooltipHandlerFromJS_): void;
        get ctrl(): boolean;
        get shift(): boolean;
        get alt(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired to register special handlers for tooltips on items.
    */
    type ItemTooltipEventJS_ = ItemTooltipEventJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.filter.mob.MobFilter
    */
    interface MobFilter extends Internal.BiPredicate<Internal.MobCategory, Internal.MobSpawnSettings$SpawnerData> {
        test(arg0: Internal.MobCategory_, arg1: Internal.MobSpawnSettings$SpawnerData_): boolean;
        of(o: any): this;
        idFilter(s: string): this;
    }
    type MobFilter_ = ((arg0: Internal.MobCategory, arg1: Internal.MobSpawnSettings$SpawnerData) => boolean) | MobFilter;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.BlockKJS
    */
    interface BlockKJS extends Internal.BlockBuilderProvider {
        getBlockStatesKJS(): Internal.List<Internal.BlockState>;
        setSoundTypeKJS(v: Internal.SoundType_): void;
        setExplosionResistanceKJS(v: number): void;
        setJumpFactorKJS(v: number): void;
        setSpeedFactorKJS(v: number): void;
        setBlockBuilderKJS(b: Internal.BlockBuilder_): void;
        getTypeDataKJS(): Internal.CompoundTag;
        setFrictionKJS(v: number): void;
        setIsRandomlyTickingKJS(v: boolean): void;
        setHasCollisionKJS(v: boolean): void;
        setMaterialKJS(v: net.minecraft.world.level.material.Material_): void;
    }
    type BlockKJS_ = BlockKJS;
    /**
    * @javaClass java.time.chrono.Chronology
    */
    interface Chronology extends Internal.Comparable<Internal.Chronology> {
        localDateTime(arg0: Internal.TemporalAccessor_): Internal.ChronoLocalDateTime<Internal.ChronoLocalDate>;
        date(arg0: number, arg1: number, arg2: number): Internal.ChronoLocalDate;
        date(arg0: Internal.TemporalAccessor_): Internal.ChronoLocalDate;
        date(arg0: Internal.Era_, arg1: number, arg2: number, arg3: number): Internal.ChronoLocalDate;
        period(arg0: number, arg1: number, arg2: number): Internal.ChronoPeriod;
        dateYearDay(arg0: Internal.Era_, arg1: number, arg2: number): Internal.ChronoLocalDate;
        dateYearDay(arg0: number, arg1: number): Internal.ChronoLocalDate;
        getCalendarType(): string;
        resolveDate(arg0: Internal.Map_<Internal.TemporalField_, number>, arg1: Internal.ResolverStyle_): Internal.ChronoLocalDate;
        ofLocale(arg0: Internal.Locale_): this;
        isLeapYear(arg0: number): boolean;
        range(arg0: Internal.ChronoField_): Internal.ValueRange;
        dateEpochDay(arg0: number): Internal.ChronoLocalDate;
        getId(): string;
        getAvailableChronologies(): Internal.Set<Internal.Chronology>;
        compareTo(arg0: Internal.Chronology_): number;
        dateNow(): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.ZoneId_): Internal.ChronoLocalDate;
        dateNow(arg0: Internal.Clock_): Internal.ChronoLocalDate;
        eraOf(arg0: number): Internal.Era;
        eras(): Internal.List<Internal.Era>;
        prolepticYear(arg0: Internal.Era_, arg1: number): number;
        zonedDateTime(arg0: Internal.TemporalAccessor_): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        zonedDateTime(arg0: Internal.Instant_, arg1: Internal.ZoneId_): Internal.ChronoZonedDateTime<Internal.ChronoLocalDate>;
        getDisplayName(arg0: Internal.TextStyle_, arg1: Internal.Locale_): string;
        hashCode(): number;
        of(arg0: string): this;
        equals(arg0: any): boolean;
        epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.ZoneOffset_): number;
        epochSecond(arg0: Internal.Era_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset_): number;
        from(arg0: Internal.TemporalAccessor_): this;
        toString(): string;
    }
    type Chronology_ = Chronology;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2FloatMap
    */
    interface Object2FloatMap <K> extends Internal.Object2FloatFunction<K>, Internal.Map<K, number> {
        computeFloatIfAbsent(arg0: K, arg1: Internal.ToDoubleFunction_<K>): number;
        computeFloatIfPresent(arg0: K, arg1: Internal.BiFunction_<K, number, number>): number;
        getOrDefault(arg0: any, arg1: number): number;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<K, number>>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, number>): void;
        computeIfAbsent(arg0: K, arg1: Internal.ToDoubleFunction_<K>): number;
        computeIfAbsent(arg0: K, arg1: Internal.Object2FloatFunction_<K>): number;
        values(): Internal.FloatCollection;
        replace(arg0: K, arg1: number, arg2: number): boolean;
        replace(arg0: K, arg1: number): number;
        clear(): void;
        containsValue(arg0: any): boolean;
        containsValue(arg0: number): boolean;
        put(arg0: K, arg1: number): number;
        remove(arg0: any, arg1: any): boolean;
        remove(arg0: any): number;
        remove(arg0: any, arg1: number): boolean;
        computeFloat(arg0: K, arg1: Internal.BiFunction_<K, number, number>): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        size(): number;
        object2FloatEntrySet(): Internal.ObjectSet<Internal.Object2FloatMap$Entry<K>>;
        mergeFloat(arg0: K, arg1: number, arg2: Internal.BiFunction_<number, number, number>): number;
        mergeFloat(arg0: K, arg1: number, arg2: Internal.FloatBinaryOperator_): number;
        mergeFloat(arg0: K, arg1: number, arg2: Internal.DoubleBinaryOperator_): number;
        merge(arg0: K, arg1: number, arg2: Internal.BiFunction_<number, number, number>): number;
        get(arg0: any): number;
        keySet(): Internal.ObjectSet<K>;
        putIfAbsent(arg0: K, arg1: number): number;
        computeFloatIfAbsentPartial(arg0: K, arg1: Internal.Object2FloatFunction_<K>): number;
    }
    type Object2FloatMap_<K> = Object2FloatMap<K>;
    /**
    * @javaClass java.awt.event.InputMethodEvent
    */
    class InputMethodEvent extends Internal.AWTEvent {
        getCommittedCharacterCount(): number;
        paramString(): string;
        isConsumed(): boolean;
        getCaret(): Internal.TextHitInfo;
        getText(): Internal.AttributedCharacterIterator;
        getWhen(): number;
        consume(): void;
        getVisiblePosition(): Internal.TextHitInfo;
        static readonly "CARET_POSITION_CHANGED" : 1101;
        static readonly "INPUT_METHOD_TEXT_CHANGED" : 1100;
        static readonly "INPUT_METHOD_LAST" : 1101;
        static readonly "INPUT_METHOD_FIRST" : 1100;
        get consumed(): boolean;
        get caret(): Internal.TextHitInfo;
        get visiblePosition(): Internal.TextHitInfo;
        get text(): Internal.AttributedCharacterIterator;
        get when(): number;
        get committedCharacterCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputMethodEvent_ = InputMethodEvent;
    /**
    * @javaClass net.minecraftforge.common.crafting.conditions.ICondition$IContext
    */
    interface ICondition$IContext {
        getAllTags<T>(arg0: Internal.ResourceKey_<Internal.Registry_<T>>): Internal.Map<ResourceLocation, net.minecraft.tags.Tag<Internal.Holder<T>>>;
        getTag<T>(arg0: Internal.TagKey_<T>): net.minecraft.tags.Tag<Internal.Holder<T>>;
    }
    type ICondition$IContext_ = ((arg0: Internal.ResourceKey<Internal.Registry<T>>) => Internal.Map<ResourceLocation, net.minecraft.tags.Tag<Internal.Holder<T>>>) | ICondition$IContext;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.AttachedData
    */
    class AttachedData extends Internal.HashMap<string, any> {
        getParent(): any;
        get parent(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttachedData_ = AttachedData;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.BasicItemJS$Builder
    */
    class BasicItemJS$Builder extends Internal.ItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BasicItemJS$Builder_ = BasicItemJS$Builder;
    /**
    * @javaClass net.minecraft.world.level.biome.BiomeSpecialEffects$GrassColorModifier$ColorModifier
    */
    interface BiomeSpecialEffects$GrassColorModifier$ColorModifier {
        modifyGrassColor(arg0: number, arg1: number, arg2: number): number;
    }
    type BiomeSpecialEffects$GrassColorModifier$ColorModifier_ = ((arg0: number, arg1: number, arg2: number) => number) | BiomeSpecialEffects$GrassColorModifier$ColorModifier;
    /**
    * @javaClass java.util.function.Consumer
    */
    interface Consumer <T> {
        andThen(arg0: Internal.Consumer_<T>): Internal.Consumer<T>;
        accept(arg0: T): void;
    }
    type Consumer_<T> = ((arg0: T) => void) | Consumer<T>;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorItemRenderer
    */
    interface AccessorItemRenderer {
        callRenderQuadList(arg0: Internal.PoseStack_, arg1: Internal.VertexConsumer_, arg2: Internal.List_<Internal.BakedQuad_>, arg3: Internal.ItemStack_, arg4: number, arg5: number): void;
    }
    type AccessorItemRenderer_ = ((arg0: Internal.PoseStack, arg1: Internal.VertexConsumer, arg2: Internal.List<Internal.BakedQuad>, arg3: Internal.ItemStack, arg4: number, arg5: number) => void) | AccessorItemRenderer;
    /**
    * @javaClass net.minecraft.core.Direction$Axis
    */
    abstract class Direction$Axis extends Internal.Enum<Internal.Direction$Axis> implements Internal.StringRepresentable, Internal.Predicate<Internal.Direction> {
        test(arg0: Internal.Direction_): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.Direction$Axis[];
        toString(): string;
        static readonly "X" : Internal.Direction$Axis;
        static readonly "Y" : Internal.Direction$Axis;
        static readonly "Z" : Internal.Direction$Axis;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Direction$Axis_ = "x" | "y" | "z" | Direction$Axis;
    /**
    * @javaClass java.util.Random
    */
    class Random implements Internal.RandomGenerator, Internal.Serializable {
        nextFloat(): number;
        longs(arg0: number): Internal.LongStream;
        longs(arg0: number, arg1: number): Internal.LongStream;
        longs(arg0: number, arg1: number, arg2: number): Internal.LongStream;
        longs(): Internal.LongStream;
        doubles(arg0: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number, arg2: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number): Internal.DoubleStream;
        doubles(): Internal.DoubleStream;
        ints(arg0: number): Internal.IntStream;
        ints(): Internal.IntStream;
        ints(arg0: number, arg1: number, arg2: number): Internal.IntStream;
        ints(arg0: number, arg1: number): Internal.IntStream;
        nextBoolean(): boolean;
        nextInt(): number;
        nextInt(arg0: number): number;
        nextLong(): number;
        setSeed(arg0: number): void;
        nextGaussian(): number;
        nextDouble(): number;
        nextBytes(arg0: number[]): void;
        set seed(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Random_ = Random;
    /**
    * @javaClass dev.latvian.mods.unit.token.UnitToken
    */
    interface UnitToken {
        nextUnaryOperator(): boolean;
        interpret(stream: Internal.UnitTokenStream_): Internal.Unit;
        unstack(resultStack: Internal.Stack_<Internal.UnitToken_>): void;
    }
    type UnitToken_ = UnitToken;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$RenderFogEvent
    */
    class EntityViewRenderEvent$RenderFogEvent extends Internal.EntityViewRenderEvent$FogEvent {
        getListenerList(): Internal.ListenerList;
        getFogShape(): Internal.FogShape;
        getFarPlaneDistance(): number;
        setNearPlaneDistance(arg0: number): void;
        setFogShape(arg0: Internal.FogShape_): void;
        getNearPlaneDistance(): number;
        hasResult(): boolean;
        scaleNearPlaneDistance(arg0: number): void;
        getMode(): Internal.FogRenderer$FogMode;
        isCancelable(): boolean;
        setFarPlaneDistance(arg0: number): void;
        scaleFarPlaneDistance(arg0: number): void;
        get mode(): Internal.FogRenderer$FogMode;
        get farPlaneDistance(): number;
        get fogShape(): Internal.FogShape;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get nearPlaneDistance(): number;
        set farPlaneDistance(arg0: number);
        set fogShape(arg0: Internal.FogShape_);
        set nearPlaneDistance(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$RenderFogEvent_ = EntityViewRenderEvent$RenderFogEvent;
    /**
    * @javaClass net.minecraftforge.fluids.FluidAttributes
    */
    class FluidAttributes {
        getBlock(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidState_): Internal.BlockState;
        getOverlayTexture(): ResourceLocation;
        getStateForPlacement(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidStack_): Internal.FluidState;
        getTranslationKey(arg0: Internal.FluidStack_): string;
        getTranslationKey(): string;
        isLighterThanAir(): boolean;
        getColor(): number;
        getColor(arg0: Internal.FluidStack_): number;
        getColor(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): number;
        getFillSound(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): Internal.SoundEvent;
        getFillSound(arg0: Internal.FluidStack_): Internal.SoundEvent;
        getFillSound(): Internal.SoundEvent;
        getRarity(arg0: Internal.FluidStack_): Rarity;
        getRarity(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): Rarity;
        getRarity(): Rarity;
        isGaseous(): boolean;
        isGaseous(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): boolean;
        isGaseous(arg0: Internal.FluidStack_): boolean;
        getDensity(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): number;
        getDensity(): number;
        getDensity(arg0: Internal.FluidStack_): number;
        getEmptySound(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): Internal.SoundEvent;
        getEmptySound(): Internal.SoundEvent;
        getEmptySound(arg0: Internal.FluidStack_): Internal.SoundEvent;
        getLuminosity(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): number;
        getLuminosity(): number;
        getLuminosity(arg0: Internal.FluidStack_): number;
        getBucket(arg0: Internal.FluidStack_): Internal.ItemStack;
        doesVaporize(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidStack_): boolean;
        getViscosity(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): number;
        getViscosity(arg0: Internal.FluidStack_): number;
        getViscosity(): number;
        getFlowingTexture(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): ResourceLocation;
        getFlowingTexture(): ResourceLocation;
        getFlowingTexture(arg0: Internal.FluidStack_): ResourceLocation;
        canBePlacedInWorld(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidStack_): boolean;
        canBePlacedInWorld(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.FluidState_): boolean;
        getDisplayName(arg0: Internal.FluidStack_): net.minecraft.network.chat.Component;
        static builder(arg0: ResourceLocation_, arg1: ResourceLocation_): Internal.FluidAttributes$Builder;
        getTextures(): Internal.Stream<ResourceLocation>;
        vaporize(arg0: Internal.Player_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.FluidStack_): void;
        getTemperature(): number;
        getTemperature(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): number;
        getTemperature(arg0: Internal.FluidStack_): number;
        getStillTexture(arg0: Internal.FluidStack_): ResourceLocation;
        getStillTexture(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_): ResourceLocation;
        getStillTexture(): ResourceLocation;
        static readonly "BUCKET_VOLUME" : 1000;
        get overlayTexture(): ResourceLocation;
        get translationKey(): string;
        get color(): number;
        get density(): number;
        get textures(): Internal.Stream<ResourceLocation>;
        get lighterThanAir(): boolean;
        get gaseous(): boolean;
        get emptySound(): Internal.SoundEvent;
        get viscosity(): number;
        get stillTexture(): ResourceLocation;
        get flowingTexture(): ResourceLocation;
        get temperature(): number;
        get luminosity(): number;
        get fillSound(): Internal.SoundEvent;
        get rarity(): Rarity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidAttributes_ = FluidAttributes;
    /**
    * @javaClass dev.latvian.mods.unit.function.FunctionFactory$Arg3
    */
    interface FunctionFactory$Arg3 extends Internal.FunctionFactory$FuncSupplier {
        createArg(arg0: Internal.Unit_, arg1: Internal.Unit_, arg2: Internal.Unit_): Internal.Unit;
        create(args: Internal.Unit_[]): Internal.Unit;
    }
    type FunctionFactory$Arg3_ = ((arg0: Internal.Unit, arg1: Internal.Unit, arg2: Internal.Unit) => Internal.Unit) | FunctionFactory$Arg3;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.StringProperty
    */
    class StringProperty extends Internal.TeamProperty<string> {
        getType(): Internal.TeamPropertyType<string>;
        fromString(string: string): Internal.Optional<string>;
        config(config: Internal.ConfigGroup_, value: Internal.TeamPropertyValue_<string>): void;
        write(buf: Internal.FriendlyByteBuf_): void;
        get type(): Internal.TeamPropertyType<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringProperty_ = StringProperty;
    /**
    * @javaClass com.mojang.brigadier.ImmutableStringReader
    */
    interface ImmutableStringReader {
        getCursor(): number;
        getRemainingLength(): number;
        getTotalLength(): number;
        canRead(): boolean;
        canRead(arg0: number): boolean;
        getRemaining(): string;
        getRead(): string;
        getString(): string;
        peek(arg0: number): string;
        peek(): string;
    }
    type ImmutableStringReader_ = ImmutableStringReader;
    /**
    * @javaClass com.mojang.blaze3d.vertex.PoseStack
    */
    class PoseStack implements Internal.TransformStack {
        pushPose(): Internal.TransformStack;
        popPose(): Internal.TransformStack;
        scale(arg0: number, arg1: number, arg2: number): Internal.TransformStack;
        multiply(arg0: Internal.Quaternion_): Internal.TransformStack;
        translate(arg0: number, arg1: number, arg2: number): Internal.TransformStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PoseStack_ = PoseStack;
    /**
    * @javaClass net.minecraft.client.renderer.RenderBuffers
    */
    class RenderBuffers implements Internal.AccessorRenderBuffers {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderBuffers_ = RenderBuffers;
    /**
    * @javaClass java.io.Flushable
    */
    interface Flushable {
        flush(): void;
    }
    type Flushable_ = (() => void) | Flushable;
    /**
    * @javaClass net.minecraft.world.level.block.entity.BlockEntityType
    */
    class BlockEntityType <T> extends Internal.ForgeRegistryEntry<Internal.BlockEntityType<any>> implements Internal.BlockEntityTypeExtension<any>, Internal.InjectedGameEventExtension {
        flywheel$setInstancingController(arg0: Internal.BlockEntityInstancingController_<any>): void;
        flywheel$getInstancingController(): Internal.BlockEntityInstancingController<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEntityType_<T> = Special.BlockEntityType | BlockEntityType<T>;
    /**
    * @javaClass net.minecraftforge.common.util.ITeleporter
    */
    interface ITeleporter {
        getPortalInfo(arg0: Internal.Entity_, arg1: Internal.ServerLevel_, arg2: Internal.Function_<Internal.ServerLevel_, Internal.PortalInfo_>): Internal.PortalInfo;
        isVanilla(): boolean;
        playTeleportSound(arg0: Internal.ServerPlayer_, arg1: Internal.ServerLevel_, arg2: Internal.ServerLevel_): boolean;
        placeEntity(arg0: Internal.Entity_, arg1: Internal.ServerLevel_, arg2: Internal.ServerLevel_, arg3: number, arg4: Internal.Function_<boolean, Internal.Entity_>): Internal.Entity;
    }
    type ITeleporter_ = ITeleporter;
    /**
    * @javaClass vazkii.botania.mixin.AccessorBiome
    */
    interface AccessorBiome {
        callGetTemperature(arg0: BlockPos_): number;
    }
    type AccessorBiome_ = ((arg0: BlockPos) => number) | AccessorBiome;
    /**
    * @javaClass java.util.function.BiPredicate
    */
    interface BiPredicate <T, U> {
        or(arg0: Internal.BiPredicate_<T, U>): Internal.BiPredicate<T, U>;
        test(arg0: T, arg1: U): boolean;
        and(arg0: Internal.BiPredicate_<T, U>): Internal.BiPredicate<T, U>;
        negate(): Internal.BiPredicate<T, U>;
    }
    type BiPredicate_<T, U> = ((arg0: T, arg1: U) => boolean) | BiPredicate<T, U>;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.CommandEventJS
    */
    class CommandEventJS extends Internal.ServerEventJS {
        getException(): Internal.Throwable;
        getParseResults(): Internal.ParseResults<Internal.CommandSourceStack>;
        setException(exception: Internal.Throwable_): void;
        setParseResults(parse: Internal.ParseResults_<Internal.CommandSourceStack_>): void;
        canCancel(): boolean;
        get exception(): Internal.Throwable;
        get parseResults(): Internal.ParseResults<Internal.CommandSourceStack>;
        set exception(exception: Internal.Throwable_);
        set parseResults(parse: Internal.ParseResults_<Internal.CommandSourceStack_>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandEventJS_ = CommandEventJS;
    /**
    * @javaClass com.simibubi.create.content.schematics.ItemRequirement
    */
    class ItemRequirement {
        getRequiredItems(): Internal.List<Internal.ItemRequirement$StackRequirement>;
        static of(arg0: Internal.Entity_): this;
        static of(arg0: Internal.BlockState_, arg1: Internal.BlockEntity_): this;
        isEmpty(): boolean;
        union(arg0: Internal.ItemRequirement_): this;
        isInvalid(): boolean;
        static readonly "NONE" : Internal.ItemRequirement;
        static readonly "INVALID" : Internal.ItemRequirement;
        get invalid(): boolean;
        get requiredItems(): Internal.List<Internal.ItemRequirement$StackRequirement>;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemRequirement_ = ItemRequirement;
    /**
    * @javaClass net.minecraftforge.event.world.WorldEvent$Save
    */
    class WorldEvent$Save extends Internal.WorldEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WorldEvent$Save_ = WorldEvent$Save;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ObjectMap$FastEntrySet
    */
    interface Int2ObjectMap$FastEntrySet <V> extends Internal.ObjectSet<Internal.Int2ObjectMap$Entry<V>> {
        fastForEach(arg0: Internal.Consumer_<Internal.Int2ObjectMap$Entry_<V>>): void;
        fastIterator(): Internal.ObjectIterator<Internal.Int2ObjectMap$Entry<V>>;
    }
    type Int2ObjectMap$FastEntrySet_<V> = (() => Internal.ObjectIterator<Internal.Int2ObjectMap$Entry<V>>) | Int2ObjectMap$FastEntrySet<V>;
    /**
    * @javaClass java.awt.dnd.DropTarget
    */
    class DropTarget implements Internal.DropTargetListener, Internal.Serializable {
        removeDropTargetListener(arg0: Internal.DropTargetListener_): void;
        getDropTargetContext(): Internal.DropTargetContext;
        drop(arg0: Internal.DropTargetDropEvent_): void;
        dragEnter(arg0: Internal.DropTargetDragEvent_): void;
        dropActionChanged(arg0: Internal.DropTargetDragEvent_): void;
        setComponent(arg0: Internal.Component_): void;
        isActive(): boolean;
        addDropTargetListener(arg0: Internal.DropTargetListener_): void;
        setFlavorMap(arg0: Internal.FlavorMap_): void;
        getFlavorMap(): Internal.FlavorMap;
        setActive(arg0: boolean): void;
        addNotify(): void;
        removeNotify(): void;
        dragOver(arg0: Internal.DropTargetDragEvent_): void;
        getComponent(): Internal.Component;
        dragExit(arg0: Internal.DropTargetEvent_): void;
        setDefaultActions(arg0: number): void;
        getDefaultActions(): number;
        get flavorMap(): Internal.FlavorMap;
        get component(): Internal.Component;
        get defaultActions(): number;
        get active(): boolean;
        get dropTargetContext(): Internal.DropTargetContext;
        set flavorMap(arg0: Internal.FlavorMap_);
        set component(arg0: Internal.Component_);
        set defaultActions(arg0: number);
        set active(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DropTarget_ = DropTarget;
    /**
    * @javaClass dev.latvian.mods.rhino.Wrapper
    */
    interface Wrapper {
        unwrapped(o: any): any;
        unwrap(): any;
    }
    type Wrapper_ = (() => any) | Wrapper;
    /**
    * @javaClass com.mojang.blaze3d.shaders.Shader
    */
    interface Shader {
    }
    type Shader_ = Shader;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ShortFunction
    */
    interface Long2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2ShortFunction;
    }
    type Long2ShortFunction_ = ((arg0: number) => number) | Long2ShortFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.IScreenWrapper
    */
    interface IScreenWrapper extends Internal.IOpenableScreen {
        closeGui(openPrevScreen: boolean): void;
        openGui(): void;
        getGui(): Internal.BaseScreen;
    }
    type IScreenWrapper_ = (() => Internal.BaseScreen) | IScreenWrapper;
    /**
    * @javaClass net.minecraft.world.item.DyeColor
    */
    class DyeColor extends Internal.Enum<Internal.DyeColor> implements Internal.StringRepresentable, dev.latvian.mods.rhino.mod.util.color.Color {
        getRgbJS(): number;
        static valueOf(arg0: string): this;
        static values(): Internal.DyeColor[];
        getArgbJS(): number;
        static getColor(arg0: Internal.ItemStack_): this;
        toString(): string;
        getFireworkColorJS(): number;
        getTag(): Internal.TagKey<Internal.Item>;
        static readonly "WHITE" : Internal.DyeColor;
        static readonly "GRAY" : Internal.DyeColor;
        static readonly "BLUE" : Internal.DyeColor;
        static readonly "PURPLE" : Internal.DyeColor;
        static readonly "GREEN" : Internal.DyeColor;
        static readonly "RED" : Internal.DyeColor;
        static readonly "PINK" : Internal.DyeColor;
        static readonly "LIGHT_GRAY" : Internal.DyeColor;
        static readonly "LIGHT_BLUE" : Internal.DyeColor;
        static readonly "LIME" : Internal.DyeColor;
        static readonly "MAGENTA" : Internal.DyeColor;
        static readonly "BLACK" : Internal.DyeColor;
        static readonly "YELLOW" : Internal.DyeColor;
        static readonly "CYAN" : Internal.DyeColor;
        static readonly "BROWN" : Internal.DyeColor;
        static readonly "ORANGE" : Internal.DyeColor;
        get rgbJS(): number;
        get fireworkColorJS(): number;
        get argbJS(): number;
        get tag(): Internal.TagKey<Internal.Item>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DyeColor_ = "magenta" | "pink" | "green" | "lime" | "light_gray" | "yellow" | "black" | "light_blue" | "brown" | "cyan" | "orange" | "red" | "gray" | "white" | "blue" | "purple" | DyeColor;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.LivingEntityEventJS
    */
    abstract class LivingEntityEventJS extends Internal.EntityEventJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityEventJS_ = LivingEntityEventJS;
    /**
    * @javaClass net.minecraft.world.level.levelgen.placement.HeightRangePlacement
    */
    class HeightRangePlacement extends Internal.PlacementModifier {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HeightRangePlacement_ = HeightRangePlacement;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2FloatFunction
    */
    interface Long2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2FloatFunction;
    }
    type Long2FloatFunction_ = ((arg0: number) => number) | Long2FloatFunction;
    /**
    * @javaClass java.lang.Iterable
    */
    interface Iterable <T> {
        iterator(): Internal.Iterator<T>;
        spliterator(): Internal.Spliterator<T>;
        forEach(arg0: Internal.Consumer_<T>): void;
    }
    type Iterable_<T> = (() => Internal.Iterator<T>) | Iterable<T>;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLevelStageEvent$Stage
    */
    class RenderLevelStageEvent$Stage {
        static fromRenderType(arg0: Internal.RenderType_): this;
        toString(): string;
        static readonly "AFTER_WEATHER" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_SKY" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_CUTOUT_BLOCKS" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_TRANSLUCENT_BLOCKS" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_SOLID_BLOCKS" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_TRIPWIRE_BLOCKS" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_PARTICLES" : Internal.RenderLevelStageEvent$Stage;
        static readonly "AFTER_CUTOUT_MIPPED_BLOCKS_BLOCKS" : Internal.RenderLevelStageEvent$Stage;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLevelStageEvent$Stage_ = RenderLevelStageEvent$Stage;
    /**
    * @javaClass net.minecraft.client.multiplayer.MultiPlayerGameMode
    */
    class MultiPlayerGameMode {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MultiPlayerGameMode_ = MultiPlayerGameMode;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseDragEvent
    */
    abstract class ScreenEvent$MouseDragEvent extends Internal.ScreenEvent$MouseInputEvent {
        getListenerList(): Internal.ListenerList;
        getMouseButton(): number;
        getDragX(): number;
        getDragY(): number;
        get dragX(): number;
        get dragY(): number;
        get listenerList(): Internal.ListenerList;
        get mouseButton(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseDragEvent_ = ScreenEvent$MouseDragEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2ObjectFunction
    */
    interface Object2ObjectFunction <K, V> extends it.unimi.dsi.fastutil.Function<K, V> {
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Object2FloatFunction<K>;
        getOrDefault(arg0: any, arg1: V): V;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2ObjectFunction<V>;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2ObjectFunction<T, V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Object2CharFunction<K>;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Object2DoubleFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2ObjectFunction<T, V>;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Object2ObjectFunction<K, T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2ObjectFunction<V>;
        get(arg0: any): V;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2ObjectFunction<V>;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Object2ByteFunction<K>;
    }
    type Object2ObjectFunction_<K, V> = ((arg0: any) => V) | Object2ObjectFunction<K, V>;
    /**
    * @javaClass net.minecraft.world.entity.EntityType
    */
    class EntityType <T> extends Internal.ForgeRegistryEntry<Internal.EntityType<any>> implements Internal.EntityTypeTest<Internal.Entity, T>, Internal.EntityTypeExtension<any>, Internal.InjectedEntityTypeExtension {
        getTags(): Internal.Stream<Internal.TagKey<Internal.EntityType<any>>>;
        toString(): string;
        customClientSpawn(arg0: Internal.PlayMessages$SpawnEntity_, arg1: Internal.Level_): T;
        flywheel$setInstancingController(arg0: Internal.EntityInstancingController_<any>): void;
        flywheel$getInstancingController(): Internal.EntityInstancingController<any>;
        get tags(): Internal.Stream<Internal.TagKey<Internal.EntityType<any>>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityType_<T> = Special.EntityType | EntityType<T>;
    /**
    * @javaClass net.minecraftforge.event.world.WorldEvent
    */
    class WorldEvent extends net.minecraftforge.eventbus.api.Event implements Internal.EventHandlerImplCommon$WorldEventAttachment {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.LevelAccessor;
        architectury$getAttachedLevel(): Internal.LevelAccessor;
        architectury$attachLevel(level: Internal.LevelAccessor_): void;
        get world(): Internal.LevelAccessor;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WorldEvent_ = WorldEvent;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.RewardType
    */
    class RewardType extends Internal.RegistryEntry<Internal.RewardType> {
        setExcludeFromListRewards(v: boolean): this;
        getDisplayName(): net.minecraft.network.chat.Component;
        getExcludeFromListRewards(): boolean;
        setGuiProvider(p: Internal.RewardType$GuiProvider_): this;
        getTypeForNBT(): string;
        getGuiProvider(): Internal.RewardType$GuiProvider;
        setDisplayName(name: net.minecraft.network.chat.Component_): this;
        getIcon(): Internal.Icon;
        static createReward(quest: Internal.Quest_, id: string): Internal.Reward;
        "intId" : number;
        readonly "provider" : ((arg0: Internal.Quest) => Internal.Reward);
        readonly "id" : ResourceLocation;
        get displayName(): net.minecraft.network.chat.Component;
        get excludeFromListRewards(): boolean;
        get guiProvider(): Internal.RewardType$GuiProvider;
        get icon(): Internal.Icon;
        get typeForNBT(): string;
        set displayName(name: net.minecraft.network.chat.Component_);
        set excludeFromListRewards(v: boolean);
        set guiProvider(p: Internal.RewardType$GuiProvider_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RewardType_ = RewardType;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ArmorItemBuilder$Chestplate
    */
    class ArmorItemBuilder$Chestplate extends Internal.ArmorItemBuilder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArmorItemBuilder$Chestplate_ = ArmorItemBuilder$Chestplate;
    /**
    * @javaClass dev.latvian.mods.unit.function.FunctionFactory$Arg2
    */
    interface FunctionFactory$Arg2 extends Internal.FunctionFactory$FuncSupplier {
        createArg(arg0: Internal.Unit_, arg1: Internal.Unit_): Internal.Unit;
        create(args: Internal.Unit_[]): Internal.Unit;
    }
    type FunctionFactory$Arg2_ = ((arg0: Internal.Unit, arg1: Internal.Unit) => Internal.Unit) | FunctionFactory$Arg2;
    /**
    * @javaClass java.util.function.ObjLongConsumer
    */
    interface ObjLongConsumer <T> {
        accept(arg0: T, arg1: number): void;
    }
    type ObjLongConsumer_<T> = ((arg0: T, arg1: number) => void) | ObjLongConsumer<T>;
    /**
    * @javaClass net.minecraftforge.common.PlantType
    */
    class PlantType {
        getName(): string;
        static get(arg0: string): this;
        static readonly "BEACH" : Internal.PlantType;
        static readonly "CAVE" : Internal.PlantType;
        static readonly "NETHER" : Internal.PlantType;
        static readonly "PLAINS" : Internal.PlantType;
        static readonly "DESERT" : Internal.PlantType;
        static readonly "WATER" : Internal.PlantType;
        static readonly "CROP" : Internal.PlantType;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlantType_ = PlantType;
    /**
    * @javaClass net.minecraftforge.client.model.data.IModelData
    */
    interface IModelData {
        setData<T>(arg0: Internal.ModelProperty_<T>, arg1: T): T;
        hasProperty(arg0: Internal.ModelProperty_<any>): boolean;
        getData<T>(arg0: Internal.ModelProperty_<T>): T;
    }
    type IModelData_ = IModelData;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.LevelKJS
    */
    interface LevelKJS extends Internal.AsKJS<Internal.LevelJS> {
        asKJS(): Internal.LevelJS;
    }
    type LevelKJS_ = LevelKJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.AbstractLongCollection
    */
    abstract class AbstractLongCollection extends Internal.AbstractCollection<number> implements Internal.LongCollection {
        add(arg0: number): boolean;
        toLongArray(arg0: number[]): number[];
        toLongArray(): number[];
        forEach(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): void;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        containsAll(arg0: Internal.LongCollection_): boolean;
        remove(arg0: any): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.longs.LongPredicate_): boolean;
        removeAll(arg0: Internal.LongCollection_): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.LongIterator;
        addAll(arg0: Internal.LongCollection_): boolean;
        addAll(arg0: Internal.Collection_<number>): boolean;
        toArray(arg0: number[]): number[];
        toString(): string;
        rem(arg0: number): boolean;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        retainAll(arg0: Internal.LongCollection_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractLongCollection_ = AbstractLongCollection;
    /**
    * @javaClass net.minecraft.world.item.UseAnim
    */
    class UseAnim extends Internal.Enum<Internal.UseAnim> {
        static valueOf(arg0: string): this;
        static values(): Internal.UseAnim[];
        static readonly "BLOCK" : Internal.UseAnim;
        static readonly "EAT" : Internal.UseAnim;
        static readonly "BOW" : Internal.UseAnim;
        static readonly "NONE" : Internal.UseAnim;
        static readonly "DRINK" : Internal.UseAnim;
        static readonly "SPEAR" : Internal.UseAnim;
        static readonly "CROSSBOW" : Internal.UseAnim;
        static readonly "SPYGLASS" : Internal.UseAnim;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UseAnim_ = "spear" | "crossbow" | "eat" | "spyglass" | "block" | "none" | "bow" | "drink" | UseAnim;
    /**
    * @javaClass java.util.regex.Matcher
    */
    class Matcher implements Internal.MatchResult {
        hasTransparentBounds(): boolean;
        requireEnd(): boolean;
        useTransparentBounds(arg0: boolean): this;
        pattern(): Internal.Pattern;
        replaceFirst(arg0: string): string;
        replaceFirst(arg0: Internal.Function_<Internal.MatchResult_, string>): string;
        regionStart(): number;
        replaceAll(arg0: string): string;
        replaceAll(arg0: Internal.Function_<Internal.MatchResult_, string>): string;
        lookingAt(): boolean;
        toMatchResult(): Internal.MatchResult;
        static quoteReplacement(arg0: string): string;
        find(): boolean;
        find(arg0: number): boolean;
        end(arg0: string): number;
        end(): number;
        end(arg0: number): number;
        results(): Internal.Stream<Internal.MatchResult>;
        group(arg0: number): string;
        group(): string;
        group(arg0: string): string;
        start(): number;
        start(arg0: string): number;
        start(arg0: number): number;
        regionEnd(): number;
        matches(): boolean;
        hasAnchoringBounds(): boolean;
        appendReplacement(arg0: Internal.StringBuffer_, arg1: string): this;
        appendReplacement(arg0: Internal.StringBuilder_, arg1: string): this;
        appendTail(arg0: Internal.StringBuilder_): Internal.StringBuilder;
        appendTail(arg0: Internal.StringBuffer_): Internal.StringBuffer;
        groupCount(): number;
        reset(): this;
        reset(arg0: Internal.CharSequence_): this;
        toString(): string;
        region(arg0: number, arg1: number): this;
        useAnchoringBounds(arg0: boolean): this;
        hitEnd(): boolean;
        usePattern(arg0: Internal.Pattern_): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Matcher_ = Matcher;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2FloatFunction
    */
    interface Char2FloatFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2FloatFunction;
    }
    type Char2FloatFunction_ = ((arg0: string) => number) | Char2FloatFunction;
    /**
    * @javaClass com.jozufozu.flywheel.backend.RenderLayer
    */
    class RenderLayer extends Internal.Enum<Internal.RenderLayer> {
        static getPrimaryLayer(arg0: Internal.RenderType_): this;
        static getLayer(arg0: Internal.RenderType_): this;
        static valueOf(arg0: string): this;
        static values(): Internal.RenderLayer[];
        static readonly "CUTOUT" : Internal.RenderLayer;
        static readonly "SOLID" : Internal.RenderLayer;
        static readonly "TRANSPARENT" : Internal.RenderLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLayer_ = "solid" | "cutout" | "transparent" | RenderLayer;
    /**
    * @javaClass net.minecraftforge.client.event.InputEvent$MouseInputEvent
    */
    class InputEvent$MouseInputEvent extends net.minecraftforge.client.event.InputEvent {
        getButton(): number;
        getListenerList(): Internal.ListenerList;
        getAction(): number;
        getModifiers(): number;
        get button(): number;
        get listenerList(): Internal.ListenerList;
        get action(): number;
        get modifiers(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent$MouseInputEvent_ = InputEvent$MouseInputEvent;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$FogColors
    */
    class EntityViewRenderEvent$FogColors extends Internal.EntityViewRenderEvent {
        getListenerList(): Internal.ListenerList;
        getGreen(): number;
        getRed(): number;
        setBlue(arg0: number): void;
        setRed(arg0: number): void;
        setGreen(arg0: number): void;
        getBlue(): number;
        get red(): number;
        get green(): number;
        get blue(): number;
        get listenerList(): Internal.ListenerList;
        set red(arg0: number);
        set green(arg0: number);
        set blue(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$FogColors_ = EntityViewRenderEvent$FogColors;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatPredicate
    */
    interface FloatPredicate extends Internal.Predicate<number>, Internal.DoublePredicate {
        or(arg0: Internal.FloatPredicate_): this;
        or(arg0: Internal.DoublePredicate_): this;
        or(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        test(arg0: number): boolean;
        and(arg0: Internal.DoublePredicate_): this;
        and(arg0: Internal.FloatPredicate_): this;
        and(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        negate(): this;
    }
    type FloatPredicate_ = ((arg0: number) => boolean) | FloatPredicate;
    /**
    * @javaClass java.lang.reflect.Type
    */
    interface Type {
        getTypeName(): string;
    }
    type Type_ = Type;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.TeamType
    */
    class TeamType extends Internal.Enum<Internal.TeamType> implements Internal.StringRepresentable {
        isPlayer(): boolean;
        isServer(): boolean;
        static valueOf(name: string): this;
        static values(): Internal.TeamType[];
        isParty(): boolean;
        static readonly "PLAYER" : Internal.TeamType;
        static readonly "PARTY" : Internal.TeamType;
        readonly "factory" : ((arg0: Internal.TeamManager) => Internal.Team);
        static readonly "SERVER" : Internal.TeamType;
        static readonly "VALUES" : Internal.TeamType[];
        static readonly "MAP" : {"server":Internal.TeamType,"party":Internal.TeamType,"player":Internal.TeamType};
        get server(): boolean;
        get party(): boolean;
        get player(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamType_ = "server" | "party" | "player" | TeamType;
    /**
    * @javaClass java.time.format.DateTimeFormatter
    */
    class DateTimeFormatter {
        withLocale(arg0: Internal.Locale_): this;
        parseBest(arg0: Internal.CharSequence_, ... arg1: Internal.TemporalQuery_<any>[]): Internal.TemporalAccessor;
        static ofLocalizedDateTime(arg0: Internal.FormatStyle_): this;
        static ofLocalizedDateTime(arg0: Internal.FormatStyle_, arg1: Internal.FormatStyle_): this;
        getResolverFields(): Internal.Set<Internal.TemporalField>;
        static ofPattern(arg0: string): this;
        static ofPattern(arg0: string, arg1: Internal.Locale_): this;
        static ofLocalizedDate(arg0: Internal.FormatStyle_): this;
        formatTo(arg0: Internal.TemporalAccessor_, arg1: Internal.Appendable_): void;
        static parsedLeapSecond(): Internal.TemporalQuery<boolean>;
        getChronology(): Internal.Chronology;
        withChronology(arg0: Internal.Chronology_): this;
        withDecimalStyle(arg0: Internal.DecimalStyle_): this;
        localizedBy(arg0: Internal.Locale_): this;
        withZone(arg0: Internal.ZoneId_): this;
        static parsedExcessDays(): Internal.TemporalQuery<Internal.Period>;
        withResolverStyle(arg0: Internal.ResolverStyle_): this;
        getResolverStyle(): Internal.ResolverStyle;
        format(arg0: Internal.TemporalAccessor_): string;
        getZone(): Internal.ZoneId;
        parse(arg0: Internal.CharSequence_, arg1: Internal.ParsePosition_): Internal.TemporalAccessor;
        parse(arg0: Internal.CharSequence_): Internal.TemporalAccessor;
        parse<T>(arg0: Internal.CharSequence_, arg1: Internal.TemporalQuery_<T>): T;
        getDecimalStyle(): Internal.DecimalStyle;
        toFormat(): Internal.Format;
        toFormat(arg0: Internal.TemporalQuery_<any>): Internal.Format;
        static ofLocalizedTime(arg0: Internal.FormatStyle_): this;
        toString(): string;
        withResolverFields(... arg0: Internal.TemporalField_[]): this;
        withResolverFields(arg0: Internal.Set_<Internal.TemporalField_>): this;
        getLocale(): Internal.Locale;
        parseUnresolved(arg0: Internal.CharSequence_, arg1: Internal.ParsePosition_): Internal.TemporalAccessor;
        static readonly "ISO_OFFSET_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_LOCAL_DATE_TIME" : Internal.DateTimeFormatter;
        static readonly "RFC_1123_DATE_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_INSTANT" : Internal.DateTimeFormatter;
        static readonly "ISO_ZONED_DATE_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_OFFSET_DATE_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_DATE_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_DATE" : Internal.DateTimeFormatter;
        static readonly "ISO_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_LOCAL_TIME" : Internal.DateTimeFormatter;
        static readonly "ISO_OFFSET_DATE" : Internal.DateTimeFormatter;
        static readonly "ISO_ORDINAL_DATE" : Internal.DateTimeFormatter;
        static readonly "ISO_LOCAL_DATE" : Internal.DateTimeFormatter;
        static readonly "BASIC_ISO_DATE" : Internal.DateTimeFormatter;
        static readonly "ISO_WEEK_DATE" : Internal.DateTimeFormatter;
        get resolverFields(): Internal.Set<Internal.TemporalField>;
        get zone(): Internal.ZoneId;
        get decimalStyle(): Internal.DecimalStyle;
        get resolverStyle(): Internal.ResolverStyle;
        get chronology(): Internal.Chronology;
        get locale(): Internal.Locale;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DateTimeFormatter_ = DateTimeFormatter;
    /**
    * @javaClass com.mojang.datafixers.util.Either
    */
    abstract class Either <L, R> implements Internal.App<Internal.Either$Mu<R>, L> {
        mapRight<T>(arg0: Internal.Function_<R, T>): Internal.Either<L, T>;
        flatMap<L2>(arg0: Internal.Function_<L, Internal.Either_<L2, R>>): Internal.Either<L2, R>;
        swap(): Internal.Either<R, L>;
        static left<L, R>(arg0: L): Internal.Either<L, R>;
        left(): Internal.Optional<L>;
        static unbox<L, R>(arg0: Internal.App_<Internal.Either$Mu_<R>, L>): Internal.Either<L, R>;
        mapLeft<T>(arg0: Internal.Function_<L, T>): Internal.Either<T, R>;
        mapBoth<C, D>(arg0: Internal.Function_<L, C>, arg1: Internal.Function_<R, D>): Internal.Either<C, D>;
        ifLeft(arg0: Internal.Consumer_<L>): Internal.Either<L, R>;
        static right<L, R>(arg0: R): Internal.Either<L, R>;
        right(): Internal.Optional<R>;
        map<T>(arg0: Internal.Function_<L, T>, arg1: Internal.Function_<R, T>): T;
        ifRight(arg0: Internal.Consumer_<R>): Internal.Either<L, R>;
        orThrow(): L;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Either_<L, R> = Either<L, R>;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ObjectMap$Entry
    */
    interface Int2ObjectMap$Entry <V> extends Internal.Map$Entry<number, V> {
        getIntKey(): number;
        getKey(): number;
    }
    type Int2ObjectMap$Entry_<V> = (() => number) | Int2ObjectMap$Entry<V>;
    /**
    * @javaClass dev.ftb.mods.ftbquests.integration.kubejs.FTBQuestsKubeJSTeamData
    */
    abstract class FTBQuestsKubeJSTeamData {
        getRelativeProgress(id: any): number;
        getTaskProgress(id: any): number;
        isStarted(id: any): boolean;
        addProgress(id: any, progress: number): boolean;
        getLocked(): boolean;
        getFile(): Internal.QuestFile;
        setLocked(v: boolean): void;
        changeProgress(id: any, consumer: Internal.Consumer_<Internal.ProgressChange_>): void;
        getOnlineMembers(): Internal.EntityArrayList;
        canStartQuest(id: any): boolean;
        reset(id: any): void;
        complete(id: any): void;
        getData(): Internal.TeamData;
        isCompleted(id: any): boolean;
        get file(): Internal.QuestFile;
        get onlineMembers(): Internal.EntityArrayList;
        get data(): Internal.TeamData;
        get locked(): boolean;
        set locked(v: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FTBQuestsKubeJSTeamData_ = FTBQuestsKubeJSTeamData;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IRecipeSlotTooltipCallback
    */
    interface IRecipeSlotTooltipCallback {
        onTooltip(arg0: Internal.IRecipeSlotView_, arg1: Internal.List_<net.minecraft.network.chat.Component_>): void;
    }
    type IRecipeSlotTooltipCallback_ = ((arg0: Internal.IRecipeSlotView, arg1: Internal.List<net.minecraft.network.chat.Component>) => void) | IRecipeSlotTooltipCallback;
    /**
    * @javaClass net.minecraft.world.level.LevelReader
    */
    interface LevelReader extends Internal.BlockAndTintGetter, Internal.CollisionGetter, Internal.BiomeManager$NoiseBiomeSource {
        isAreaLoaded(arg0: BlockPos_, arg1: number): boolean;
    }
    type LevelReader_ = LevelReader;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource
    */
    class CopyNameFunction$NameSource extends Internal.Enum<Internal.CopyNameFunction$NameSource> {
        static valueOf(arg0: string): this;
        static values(): Internal.CopyNameFunction$NameSource[];
        static readonly "KILLER_PLAYER" : Internal.CopyNameFunction$NameSource;
        static readonly "KILLER" : Internal.CopyNameFunction$NameSource;
        static readonly "BLOCK_ENTITY" : Internal.CopyNameFunction$NameSource;
        static readonly "THIS" : Internal.CopyNameFunction$NameSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CopyNameFunction$NameSource_ = "block_entity" | "this" | "killer_player" | "killer" | CopyNameFunction$NameSource;
    /**
    * @javaClass java.awt.event.MouseMotionListener
    */
    interface MouseMotionListener extends Internal.EventListener {
        mouseDragged(arg0: Internal.MouseEvent_): void;
        mouseMoved(arg0: Internal.MouseEvent_): void;
    }
    type MouseMotionListener_ = MouseMotionListener;
    /**
    * @javaClass net.minecraft.client.gui.components.events.ContainerEventHandler
    */
    interface ContainerEventHandler extends Internal.GuiEventListener {
    }
    type ContainerEventHandler_ = ContainerEventHandler;
    /**
    * @javaClass net.minecraftforge.event.TagsUpdatedEvent
    */
    class TagsUpdatedEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        shouldUpdateStaticData(): boolean;
        getTagManager(): Internal.RegistryAccess;
        getUpdateCause(): Internal.TagsUpdatedEvent$UpdateCause;
        get tagManager(): Internal.RegistryAccess;
        get listenerList(): Internal.ListenerList;
        get updateCause(): Internal.TagsUpdatedEvent$UpdateCause;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TagsUpdatedEvent_ = TagsUpdatedEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ShovelItemBuilder
    */
    class ShovelItemBuilder extends Internal.HandheldItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShovelItemBuilder_ = ShovelItemBuilder;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.CursorType
    */
    class CursorType extends Internal.Enum<Internal.CursorType> {
        static set(type: Internal.CursorType_): void;
        static valueOf(name: string): this;
        static values(): Internal.CursorType[];
        static readonly "VRESIZE" : Internal.CursorType;
        static readonly "ARROW" : Internal.CursorType;
        static readonly "CROSSHAIR" : Internal.CursorType;
        static readonly "IBEAM" : Internal.CursorType;
        static readonly "HRESIZE" : Internal.CursorType;
        static readonly "HAND" : Internal.CursorType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CursorType_ = "crosshair" | "arrow" | "vresize" | "hresize" | "ibeam" | "hand" | CursorType;
    /**
    * @javaClass dev.latvian.mods.rhino.classdata.ClassData
    */
    class ClassData {
        getParent(): this;
        getMember(name: string): Internal.ClassMember;
        getConstructor(sig: Internal.MethodSignature_): Internal.Constructor<any>;
        readonly "cache" : Internal.ClassDataCache;
        readonly "type" : typeof any;
        get parent(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClassData_ = ClassData;
    /**
    * @javaClass net.minecraftforge.server.permission.events.PermissionGatherEvent$Handler
    */
    class PermissionGatherEvent$Handler extends Internal.PermissionGatherEvent {
        addPermissionHandler(arg0: ResourceLocation_, arg1: Internal.IPermissionHandlerFactory_): void;
        getListenerList(): Internal.ListenerList;
        getAvailablePermissionHandlerFactories(): Internal.Map<ResourceLocation, Internal.IPermissionHandlerFactory>;
        get availablePermissionHandlerFactories(): Internal.Map<ResourceLocation, Internal.IPermissionHandlerFactory>;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionGatherEvent$Handler_ = PermissionGatherEvent$Handler;
    /**
    * @javaClass org.apache.maven.artifact.versioning.Restriction
    */
    class Restriction {
        isLowerBoundInclusive(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        containsVersion(arg0: Internal.ArtifactVersion_): boolean;
        toString(): string;
        getUpperBound(): Internal.ArtifactVersion;
        getLowerBound(): Internal.ArtifactVersion;
        isUpperBoundInclusive(): boolean;
        static readonly "EVERYTHING" : Internal.Restriction;
        get lowerBoundInclusive(): boolean;
        get upperBound(): Internal.ArtifactVersion;
        get upperBoundInclusive(): boolean;
        get lowerBound(): Internal.ArtifactVersion;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Restriction_ = Restriction;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.LootBuilderPool
    */
    class LootBuilderPool implements Internal.FunctionContainer, Internal.ConditionContainer {
        addItem(item: Internal.ItemStack_, weight: number, count: Internal.NumberProvider_): Internal.LootTableEntry;
        addItem(item: Internal.ItemStack_, weight: number): Internal.LootTableEntry;
        addItem(item: Internal.ItemStack_): Internal.LootTableEntry;
        setUniformRolls(min: number, max: number): void;
        toJson(): Internal.JsonObject;
        setBinomialRolls(n: number, p: number): void;
        addFunction(o: Internal.JsonObject_): this;
        addEntry(json: Internal.JsonObject_): Internal.LootTableEntry;
        addLootTable(table: ResourceLocation_): Internal.LootTableEntry;
        addEmpty(weight: number): Internal.LootTableEntry;
        addCondition(o: Internal.JsonObject_): this;
        addTag(tag: string, expand: boolean): Internal.LootTableEntry;
        readonly "entries" : Internal.JsonArray;
        readonly "functions" : Internal.JsonArray;
        "rolls" : Internal.NumberProvider;
        readonly "conditions" : Internal.JsonArray;
        "bonusRolls" : Internal.NumberProvider;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootBuilderPool_ = LootBuilderPool;
    /**
    * @javaClass java.awt.event.MouseWheelEvent
    */
    class MouseWheelEvent extends Internal.MouseEvent {
        paramString(): string;
        getPreciseWheelRotation(): number;
        getScrollType(): number;
        getWheelRotation(): number;
        getUnitsToScroll(): number;
        getScrollAmount(): number;
        static readonly "WHEEL_BLOCK_SCROLL" : 1;
        static readonly "WHEEL_UNIT_SCROLL" : 0;
        get wheelRotation(): number;
        get preciseWheelRotation(): number;
        get scrollType(): number;
        get scrollAmount(): number;
        get unitsToScroll(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MouseWheelEvent_ = MouseWheelEvent;
    /**
    * @javaClass java.time.chrono.IsoChronology
    */
    class IsoChronology extends Internal.AbstractChronology implements Internal.Serializable {
        localDateTime(arg0: Internal.TemporalAccessor_): Internal.LocalDateTime;
        date(arg0: Internal.Era_, arg1: number, arg2: number, arg3: number): Internal.LocalDate;
        date(arg0: Internal.TemporalAccessor_): Internal.LocalDate;
        date(arg0: number, arg1: number, arg2: number): Internal.LocalDate;
        period(arg0: number, arg1: number, arg2: number): Internal.Period;
        dateYearDay(arg0: number, arg1: number): Internal.LocalDate;
        dateYearDay(arg0: Internal.Era_, arg1: number, arg2: number): Internal.LocalDate;
        getCalendarType(): string;
        resolveDate(arg0: Internal.Map_<Internal.TemporalField_, number>, arg1: Internal.ResolverStyle_): Internal.LocalDate;
        isLeapYear(arg0: number): boolean;
        range(arg0: Internal.ChronoField_): Internal.ValueRange;
        dateEpochDay(arg0: number): Internal.LocalDate;
        getId(): string;
        dateNow(arg0: Internal.Clock_): Internal.LocalDate;
        dateNow(): Internal.LocalDate;
        dateNow(arg0: Internal.ZoneId_): Internal.LocalDate;
        eraOf(arg0: number): Internal.IsoEra;
        eras(): Internal.List<Internal.Era>;
        prolepticYear(arg0: Internal.Era_, arg1: number): number;
        zonedDateTime(arg0: Internal.Instant_, arg1: Internal.ZoneId_): Internal.ZonedDateTime;
        zonedDateTime(arg0: Internal.TemporalAccessor_): Internal.ZonedDateTime;
        epochSecond(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: Internal.ZoneOffset_): number;
        static readonly "INSTANCE" : Internal.IsoChronology;
        get calendarType(): string;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IsoChronology_ = IsoChronology;
    /**
    * @javaClass net.minecraftforge.event.entity.living.ZombieEvent$SummonAidEvent
    */
    class ZombieEvent$SummonAidEvent extends Internal.ZombieEvent {
        setCustomSummonedAid(arg0: Internal.Zombie_): void;
        getListenerList(): Internal.ListenerList;
        getSummonChance(): number;
        getWorld(): Internal.Level;
        getX(): number;
        getY(): number;
        getZ(): number;
        getCustomSummonedAid(): Internal.Zombie;
        hasResult(): boolean;
        getAttacker(): Internal.LivingEntity;
        get summonChance(): number;
        get world(): Internal.Level;
        get customSummonedAid(): Internal.Zombie;
        get listenerList(): Internal.ListenerList;
        get x(): number;
        get y(): number;
        get attacker(): Internal.LivingEntity;
        get z(): number;
        set customSummonedAid(arg0: Internal.Zombie_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZombieEvent$SummonAidEvent_ = ZombieEvent$SummonAidEvent;
    /**
    * @javaClass net.minecraftforge.client.extensions.IForgeBakedModel
    */
    interface IForgeBakedModel {
        doesHandlePerspectives(): boolean;
        getModelData(arg0: Internal.BlockAndTintGetter_, arg1: BlockPos_, arg2: Internal.BlockState_, arg3: Internal.IModelData_): Internal.IModelData;
        isLayered(): boolean;
        handlePerspective(arg0: Internal.ItemTransforms$TransformType_, arg1: Internal.PoseStack_): Internal.BakedModel;
        useAmbientOcclusion(arg0: Internal.BlockState_): boolean;
        getQuads(arg0: Internal.BlockState_, arg1: Internal.Direction_, arg2: Internal.Random_, arg3: Internal.IModelData_): Internal.List<Internal.BakedQuad>;
        getLayerModels(arg0: Internal.ItemStack_, arg1: boolean): Internal.List<com.mojang.datafixers.util.Pair<Internal.BakedModel, Internal.RenderType>>;
        getParticleIcon(arg0: Internal.IModelData_): Internal.TextureAtlasSprite;
    }
    type IForgeBakedModel_ = IForgeBakedModel;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkEvent$Unload
    */
    class ChunkEvent$Unload extends Internal.ChunkEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkEvent$Unload_ = ChunkEvent$Unload;
    /**
    * @javaClass org.apache.maven.artifact.repository.ArtifactRepository
    */
    interface ArtifactRepository {
        getMirroredRepositories(): Internal.List<Internal.ArtifactRepository>;
        isUniqueVersion(): boolean;
        getProxy(): org.apache.maven.repository.Proxy;
        getId(): string;
        setLayout(arg0: Internal.ArtifactRepositoryLayout_): void;
        setAuthentication(arg0: Internal.Authentication_): void;
        pathOfRemoteRepositoryMetadata(arg0: Internal.ArtifactMetadata_): string;
        getAuthentication(): Internal.Authentication;
        getLayout(): Internal.ArtifactRepositoryLayout;
        find(arg0: Internal.Artifact_): Internal.Artifact;
        setMirroredRepositories(arg0: Internal.List_<Internal.ArtifactRepository_>): void;
        setId(arg0: string): void;
        findVersions(arg0: Internal.Artifact_): Internal.List<string>;
        getBasedir(): string;
        getKey(): string;
        setProxy(arg0: org.apache.maven.repository.Proxy_): void;
        setReleaseUpdatePolicy(arg0: Internal.ArtifactRepositoryPolicy_): void;
        setSnapshotUpdatePolicy(arg0: Internal.ArtifactRepositoryPolicy_): void;
        getProtocol(): string;
        setUrl(arg0: string): void;
        setBlacklisted(arg0: boolean): void;
        isBlacklisted(): boolean;
        getUrl(): string;
        getSnapshots(): Internal.ArtifactRepositoryPolicy;
        isProjectAware(): boolean;
        pathOf(arg0: Internal.Artifact_): string;
        pathOfLocalRepositoryMetadata(arg0: Internal.ArtifactMetadata_, arg1: Internal.ArtifactRepository_): string;
        getReleases(): Internal.ArtifactRepositoryPolicy;
    }
    type ArtifactRepository_ = ArtifactRepository;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.FallingBlockBuilder
    */
    class FallingBlockBuilder extends Internal.BlockBuilder {
        dustColor(color: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FallingBlockBuilder_ = FallingBlockBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.MotiveBuilder
    */
    class MotiveBuilder extends Internal.BuilderBase<Internal.Motive> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Motive>;
        width(width: number): this;
        createObject(): Internal.Motive;
        height(height: number): this;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Motive>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MotiveBuilder_ = MotiveBuilder;
    /**
    * @javaClass java.lang.ClassLoader
    */
    abstract class ClassLoader {
        static getSystemResources(arg0: string): Internal.Enumeration<Internal.URL>;
        getParent(): this;
        getResource(arg0: string): Internal.URL;
        static getPlatformClassLoader(): this;
        getName(): string;
        getResourceAsStream(arg0: string): Internal.InputStream;
        setDefaultAssertionStatus(arg0: boolean): void;
        resources(arg0: string): Internal.Stream<Internal.URL>;
        static getSystemClassLoader(): this;
        static getSystemResource(arg0: string): Internal.URL;
        setPackageAssertionStatus(arg0: string, arg1: boolean): void;
        setClassAssertionStatus(arg0: string, arg1: boolean): void;
        getDefinedPackage(arg0: string): Internal.Package;
        static getSystemResourceAsStream(arg0: string): Internal.InputStream;
        clearAssertionStatus(): void;
        isRegisteredAsParallelCapable(): boolean;
        getResources(arg0: string): Internal.Enumeration<Internal.URL>;
        loadClass(arg0: string): typeof any;
        getDefinedPackages(): Internal.Package[];
        getUnnamedModule(): Internal.Module;
        get parent(): this;
        get systemClassLoader(): this;
        get unnamedModule(): Internal.Module;
        get name(): string;
        get registeredAsParallelCapable(): boolean;
        get platformClassLoader(): this;
        get definedPackages(): Internal.Package[];
        set defaultAssertionStatus(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClassLoader_ = ClassLoader;
    /**
    * @javaClass com.mojang.datafixers.util.Function13
    */
    interface Function13 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.Function<T13, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function4<T10, T11, T12, T13, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function6<T8, T9, T10, T11, T12, T13, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function5<T9, T10, T11, T12, T13, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function8<T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function7<T7, T8, T9, T10, T11, T12, T13, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function3<T11, T12, T13, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function10<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.BiFunction<T12, T13, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function9<T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function11<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
        curry(): Internal.Function<T1, Internal.Function12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>;
    }
    type Function13_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13) => R) | Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>;
    /**
    * @javaClass com.google.common.collect.ImmutableMap
    */
    abstract class ImmutableMap <K, V> implements Internal.Map<K, V>, Internal.Serializable {
        getOrDefault(arg0: any, arg1: V): V;
        static ofEntries<K, V>(... arg0: Internal.Map$Entry_<K, V>[]): Internal.ImmutableMap<K, V>;
        computeIfAbsent(arg0: K, arg1: Internal.Function_<K, V>): V;
        values(): Internal.ImmutableCollection<V>;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replace(arg0: K, arg1: V): V;
        replaceAll(arg0: Internal.BiFunction_<K, V, V>): void;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any, arg1: any): boolean;
        remove(arg0: any): V;
        compute(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        static toImmutableMap<T, K, V>(arg0: Internal.Function_<T, K>, arg1: Internal.Function_<T, V>, arg2: Internal.BinaryOperator_<V>): Internal.Collector<T, any, Internal.ImmutableMap<K, V>>;
        static toImmutableMap<T, K, V>(arg0: Internal.Function_<T, K>, arg1: Internal.Function_<T, V>): Internal.Collector<T, any, Internal.ImmutableMap<K, V>>;
        hashCode(): number;
        putAll(arg0: Internal.Map_<K, V>): void;
        merge(arg0: K, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V, arg18: K, arg19: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableMap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V): Internal.ImmutableMap<K, V>;
        get(arg0: any): V;
        static builder<K, V>(): Internal.ImmutableMap$Builder<K, V>;
        keySet(): Internal.ImmutableSet<K>;
        entrySet(): Internal.ImmutableSet<Internal.Map$Entry<K, V>>;
        containsKey(arg0: any): boolean;
        isEmpty(): boolean;
        clear(): void;
        static copyOf<K, V>(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableMap<K, V>;
        static copyOf<K, V>(arg0: Internal.Map_<K, V>): Internal.ImmutableMap<K, V>;
        static builderWithExpectedSize<K, V>(arg0: number): Internal.ImmutableMap$Builder<K, V>;
        asMultimap(): Internal.ImmutableSetMultimap<K, V>;
        computeIfPresent(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        equals(arg0: any): boolean;
        toString(): string;
        putIfAbsent(arg0: K, arg1: V): V;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMap_<K, V> = ImmutableMap<K, V>;
    /**
    * @javaClass com.simibubi.create.content.schematics.ItemRequirement$ItemUseType
    */
    class ItemRequirement$ItemUseType extends Internal.Enum<Internal.ItemRequirement$ItemUseType> {
        static valueOf(arg0: string): this;
        static values(): Internal.ItemRequirement$ItemUseType[];
        static readonly "CONSUME" : Internal.ItemRequirement$ItemUseType;
        static readonly "DAMAGE" : Internal.ItemRequirement$ItemUseType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemRequirement$ItemUseType_ = "damage" | "consume" | ItemRequirement$ItemUseType;
    /**
    * @javaClass net.minecraft.world.level.biome.Biome$TemperatureModifier
    */
    abstract class Biome$TemperatureModifier extends Internal.Enum<Internal.Biome$TemperatureModifier> implements Internal.StringRepresentable {
        static valueOf(arg0: string): this;
        static values(): Internal.Biome$TemperatureModifier[];
        static readonly "NONE" : Internal.Biome$TemperatureModifier;
        static readonly "FROZEN" : Internal.Biome$TemperatureModifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Biome$TemperatureModifier_ = "frozen" | "none" | Biome$TemperatureModifier;
    /**
    * @javaClass net.minecraft.world.level.biome.BiomeSpecialEffects$GrassColorModifier
    */
    class BiomeSpecialEffects$GrassColorModifier extends Internal.Enum<Internal.BiomeSpecialEffects$GrassColorModifier> implements Internal.StringRepresentable, Internal.IExtensibleEnum {
        init(): void;
        static valueOf(arg0: string): this;
        static values(): Internal.BiomeSpecialEffects$GrassColorModifier[];
        static create(arg0: string, arg1: string, arg2: Internal.BiomeSpecialEffects$GrassColorModifier$ColorModifier_): this;
        static readonly "SWAMP" : Internal.BiomeSpecialEffects$GrassColorModifier;
        static readonly "NONE" : Internal.BiomeSpecialEffects$GrassColorModifier;
        static readonly "DARK_FOREST" : Internal.BiomeSpecialEffects$GrassColorModifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeSpecialEffects$GrassColorModifier_ = "dark_forest" | "none" | "swamp" | BiomeSpecialEffects$GrassColorModifier;
    /**
    * @javaClass java.awt.Dimension
    */
    class Dimension extends Internal.Dimension2D implements Internal.Serializable {
        getHeight(): number;
        getSize(): this;
        setSize(arg0: Internal.Dimension_): void;
        setSize(arg0: number, arg1: number): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        getWidth(): number;
        "width" : number;
        "height" : number;
        get size(): this;
        set size(arg0: Internal.Dimension_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dimension_ = Dimension;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityEvent$Size
    */
    class EntityEvent$Size extends Internal.EntityEvent {
        getOldEyeHeight(): number;
        getListenerList(): Internal.ListenerList;
        getPose(): Internal.Pose;
        getNewSize(): Internal.EntityDimensions;
        setNewSize(arg0: Internal.EntityDimensions_): void;
        setNewSize(arg0: Internal.EntityDimensions_, arg1: boolean): void;
        getOldSize(): Internal.EntityDimensions;
        getNewEyeHeight(): number;
        setNewEyeHeight(arg0: number): void;
        get oldEyeHeight(): number;
        get listenerList(): Internal.ListenerList;
        get pose(): Internal.Pose;
        get newSize(): Internal.EntityDimensions;
        get newEyeHeight(): number;
        get oldSize(): Internal.EntityDimensions;
        set newSize(arg0: Internal.EntityDimensions_);
        set newEyeHeight(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityEvent$Size_ = EntityEvent$Size;
    /**
    * @javaClass com.mojang.brigadier.context.StringRange
    */
    class StringRange {
        static encompassing(arg0: Internal.StringRange_, arg1: Internal.StringRange_): this;
        static at(arg0: number): this;
        getStart(): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: string): string;
        get(arg0: Internal.ImmutableStringReader_): string;
        isEmpty(): boolean;
        getLength(): number;
        toString(): string;
        getEnd(): number;
        static between(arg0: number, arg1: number): this;
        get start(): number;
        get length(): number;
        get end(): number;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringRange_ = StringRange;
    /**
    * @javaClass java.util.function.BinaryOperator
    */
    interface BinaryOperator <T> extends Internal.BiFunction<T, T, T> {
        maxBy<T>(arg0: Internal.Comparator_<T>): Internal.BinaryOperator<T>;
        minBy<T>(arg0: Internal.Comparator_<T>): Internal.BinaryOperator<T>;
    }
    type BinaryOperator_<T> = BinaryOperator<T>;
    /**
    * @javaClass net.minecraft.world.level.WorldGenLevel
    */
    interface WorldGenLevel extends Internal.ServerLevelAccessor {
    }
    type WorldGenLevel_ = WorldGenLevel;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.Button
    */
    abstract class Button extends dev.ftb.mods.ftblibrary.ui.Widget {
        setIcon(i: Internal.Icon_): this;
        getCursor(): Internal.CursorType;
        getTitle(): net.minecraft.network.chat.Component;
        drawBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        onClicked(arg0: Internal.MouseButton_): void;
        setTitle(s: net.minecraft.network.chat.Component_): this;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        drawIcon(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        getIngredientUnderMouse(): any;
        mousePressed(button: Internal.MouseButton_): boolean;
        get cursor(): Internal.CursorType;
        get ingredientUnderMouse(): any;
        get title(): net.minecraft.network.chat.Component;
        set icon(i: Internal.Icon_);
        set title(s: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Button_ = Button;
    /**
    * @javaClass dev.latvian.mods.rhino.IdScriptableObject
    */
    abstract class IdScriptableObject extends Internal.ScriptableObject implements Internal.IdFunctionCall {
        getAttributes(name: string): number;
        getAttributes(key: Internal.Symbol_): number;
        initPrototypeConstructor(f: Internal.IdFunctionObject_): void;
        activatePrototypeMap(maxPrototypeId: number): void;
        execIdCall(f: Internal.IdFunctionObject_, cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        setAttributes(name: string, attributes: number): void;
        delete(key: Internal.Symbol_): void;
        delete(name: string): void;
        put(key: Internal.Symbol_, start: Internal.Scriptable_, value: any): void;
        put(name: string, start: Internal.Scriptable_, value: any): void;
        exportAsJSClass(maxPrototypeId: number, scope: Internal.Scriptable_, sealed: boolean): Internal.IdFunctionObject;
        hasPrototypeMap(): boolean;
        defineOwnProperty(cx: Internal.Context_, key: any, desc: Internal.ScriptableObject_): void;
        initPrototypeMethod(tag: any, id: number, key: Internal.Symbol_, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: any, id: number, propertyName: string, functionName: string, arity: number): Internal.IdFunctionObject;
        initPrototypeMethod(tag: any, id: number, name: string, arity: number): Internal.IdFunctionObject;
        initPrototypeValue(id: number, name: string, value: any, attributes: number): void;
        initPrototypeValue(id: number, key: Internal.Symbol_, value: any, attributes: number): void;
        get(name: string, start: Internal.Scriptable_): any;
        get(key: Internal.Symbol_, start: Internal.Scriptable_): any;
        has(key: Internal.Symbol_, start: Internal.Scriptable_): boolean;
        has(name: string, start: Internal.Scriptable_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IdScriptableObject_ = IdScriptableObject;
    /**
    * @javaClass vazkii.botania.mixin.AccessorMob
    */
    interface AccessorMob {
        getGoalSelector(): Internal.GoalSelector;
        setLootTable(arg0: ResourceLocation_): void;
        botania_getAmbientSound(): Internal.SoundEvent;
        getTargetSelector(): Internal.GoalSelector;
    }
    type AccessorMob_ = AccessorMob;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.EntityTargetKJS
    */
    interface EntityTargetKJS {
        getNameKJS(): string;
        getNameKJS(target: Internal.LootContext$EntityTarget_): string;
    }
    type EntityTargetKJS_ = (() => string) | EntityTargetKJS;
    /**
    * @javaClass java.awt.image.renderable.RenderableImage
    */
    interface RenderableImage {
        createRendering(arg0: Internal.RenderContext_): Internal.RenderedImage;
        getHeight(): number;
        isDynamic(): boolean;
        getProperty(arg0: string): any;
        createScaledRendering(arg0: number, arg1: number, arg2: Internal.RenderingHints_): Internal.RenderedImage;
        getPropertyNames(): string[];
        getWidth(): number;
        getSources(): Internal.Vector<Internal.RenderableImage>;
        createDefaultRendering(): Internal.RenderedImage;
        getMinX(): number;
        getMinY(): number;
    }
    type RenderableImage_ = RenderableImage;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeFluid
    */
    interface IForgeFluid {
        getAttributes(): Internal.FluidAttributes;
        getExplosionResistance(arg0: Internal.FluidState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Explosion_): number;
        isAABBInsideMaterial(arg0: Internal.FluidState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.AABB_, arg4: net.minecraft.world.level.material.Material_): boolean;
        isEntityInside(arg0: Internal.FluidState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Entity_, arg4: number, arg5: Internal.HolderSet_<Internal.Fluid_>, arg6: boolean): boolean;
        isAABBInsideLiquid(arg0: Internal.FluidState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.AABB_): boolean;
    }
    type IForgeFluid_ = (() => Internal.FluidAttributes) | IForgeFluid;
    /**
    * @javaClass net.minecraft.world.phys.HitResult
    */
    abstract class HitResult {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HitResult_ = HitResult;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatIterator
    */
    interface FloatIterator extends Internal.PrimitiveIterator<number, Internal.FloatConsumer> {
        nextFloat(): number;
        next(): number;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.DoubleConsumer_): void;
        forEachRemaining(arg0: Internal.FloatConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type FloatIterator_ = (() => number) | FloatIterator;
    /**
    * @javaClass java.awt.dnd.DropTargetDropEvent
    */
    class DropTargetDropEvent extends Internal.DropTargetEvent {
        getDropAction(): number;
        acceptDrop(arg0: number): void;
        getCurrentDataFlavorsAsList(): Internal.List<Internal.DataFlavor>;
        getLocation(): Internal.Point;
        isDataFlavorSupported(arg0: Internal.DataFlavor_): boolean;
        rejectDrop(): void;
        dropComplete(arg0: boolean): void;
        getCurrentDataFlavors(): Internal.DataFlavor[];
        getSourceActions(): number;
        isLocalTransfer(): boolean;
        getTransferable(): Internal.Transferable;
        get sourceActions(): number;
        get localTransfer(): boolean;
        get transferable(): Internal.Transferable;
        get location(): Internal.Point;
        get currentDataFlavors(): Internal.DataFlavor[];
        get dropAction(): number;
        get currentDataFlavorsAsList(): Internal.List<Internal.DataFlavor>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DropTargetDropEvent_ = DropTargetDropEvent;
    /**
    * @javaClass java.util.function.IntToLongFunction
    */
    interface IntToLongFunction {
        applyAsLong(arg0: number): number;
    }
    type IntToLongFunction_ = ((arg0: number) => number) | IntToLongFunction;
    /**
    * @javaClass mezz.jei.api.recipe.IRecipeLookup
    */
    interface IRecipeLookup <R> {
        limitFocus(arg0: Internal.Collection_<Internal.IFocus_<any>>): Internal.IRecipeLookup<R>;
        includeHidden(): Internal.IRecipeLookup<R>;
        get(): Internal.Stream<R>;
    }
    type IRecipeLookup_<R> = IRecipeLookup<R>;
    /**
    * @javaClass dev.architectury.utils.Env
    */
    class Env extends Internal.Enum<Internal.Env> {
        toPlatform(): Internal.Dist;
        static valueOf(name: string): this;
        static values(): Internal.Env[];
        static fromPlatform(type: any): this;
        static readonly "SERVER" : Internal.Env;
        static readonly "CLIENT" : Internal.Env;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Env_ = "server" | "client" | Env;
    /**
    * @javaClass net.minecraft.world.level.biome.AmbientMoodSettings
    */
    class AmbientMoodSettings {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AmbientMoodSettings_ = AmbientMoodSettings;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.FireworksJS$Shape
    */
    class FireworksJS$Shape extends Internal.Enum<Internal.FireworksJS$Shape> {
        static valueOf(name: string): this;
        static values(): Internal.FireworksJS$Shape[];
        static get(name: string): this;
        static readonly "SMALL_BALL" : Internal.FireworksJS$Shape;
        static readonly "LARGE_BALL" : Internal.FireworksJS$Shape;
        static readonly "STAR" : Internal.FireworksJS$Shape;
        static readonly "CREEPER" : Internal.FireworksJS$Shape;
        static readonly "BURST" : Internal.FireworksJS$Shape;
        static readonly "VALUES" : Internal.FireworksJS$Shape[];
        readonly "type" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FireworksJS$Shape_ = "large_ball" | "star" | "burst" | "creeper" | "small_ball" | FireworksJS$Shape;
    /**
    * @javaClass net.minecraftforge.event.entity.item.ItemTossEvent
    */
    class ItemTossEvent extends Internal.ItemEvent {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.Player;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemTossEvent_ = ItemTossEvent;
    /**
    * @javaClass net.minecraft.client.model.geom.ModelPart
    */
    class ModelPart {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelPart_ = ModelPart;
    /**
    * @javaClass com.jozufozu.flywheel.api.MaterialManager
    */
    interface MaterialManager {
        defaultCutout(): Internal.MaterialGroup;
        solid(arg0: Internal.RenderType_): Internal.MaterialGroup;
        defaultSolid(): Internal.MaterialGroup;
        defaultTransparent(): Internal.MaterialGroup;
        cutout(arg0: Internal.RenderType_): Internal.MaterialGroup;
        state(arg0: Internal.RenderLayer_, arg1: Internal.RenderType_): Internal.MaterialGroup;
        transparent(arg0: Internal.RenderType_): Internal.MaterialGroup;
        getOriginCoordinate(): Vec3i;
    }
    type MaterialManager_ = MaterialManager;
    /**
    * @javaClass dev.latvian.mods.rhino.IdFunctionCall
    */
    interface IdFunctionCall {
        execIdCall(arg0: Internal.IdFunctionObject_, arg1: Internal.Context_, arg2: Internal.Scriptable_, arg3: Internal.Scriptable_, arg4: any[]): any;
    }
    type IdFunctionCall_ = ((arg0: Internal.IdFunctionObject, arg1: Internal.Context, arg2: Internal.Scriptable, arg3: Internal.Scriptable, arg4: any[]) => any) | IdFunctionCall;
    /**
    * @javaClass net.minecraft.client.renderer.LightTexture
    */
    class LightTexture implements Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LightTexture_ = LightTexture;
    /**
    * @javaClass net.minecraft.world.level.LevelSimulatedReader
    */
    interface LevelSimulatedReader {
    }
    type LevelSimulatedReader_ = LevelSimulatedReader;
    /**
    * @javaClass net.minecraftforge.event.entity.player.ItemTooltipEvent
    */
    class ItemTooltipEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.Player;
        getToolTip(): Internal.List<net.minecraft.network.chat.Component>;
        getItemStack(): Internal.ItemStack;
        getFlags(): Internal.TooltipFlag;
        get itemStack(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        get toolTip(): Internal.List<net.minecraft.network.chat.Component>;
        get flags(): Internal.TooltipFlag;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemTooltipEvent_ = ItemTooltipEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent
    */
    class PlayerEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.Player;
        get listenerList(): Internal.ListenerList;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent_ = PlayerEvent;
    /**
    * @javaClass java.util.function.IntFunction
    */
    interface IntFunction <R> {
        apply(arg0: number): R;
    }
    type IntFunction_<R> = ((arg0: number) => R) | IntFunction<R>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.TeamPropertyValue
    */
    class TeamPropertyValue <T> {
        toString(): string;
        copy(): Internal.TeamPropertyValue<T>;
        "value" : T;
        readonly "key" : Internal.TeamProperty<T>;
        "consumer" : ((arg0: T) => void);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamPropertyValue_<T> = TeamPropertyValue<T>;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$InitScreenEvent$Pre
    */
    class ScreenEvent$InitScreenEvent$Pre extends Internal.ScreenEvent$InitScreenEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$InitScreenEvent$Pre_ = ScreenEvent$InitScreenEvent$Pre;
    /**
    * @javaClass dev.latvian.mods.unit.function.FunctionFactory$Arg1
    */
    interface FunctionFactory$Arg1 extends Internal.FunctionFactory$FuncSupplier {
        createArg(arg0: Internal.Unit_): Internal.Unit;
        create(args: Internal.Unit_[]): Internal.Unit;
    }
    type FunctionFactory$Arg1_ = ((arg0: Internal.Unit) => Internal.Unit) | FunctionFactory$Arg1;
    /**
    * @javaClass com.jozufozu.flywheel.backend.model.BufferBuilderExtension
    */
    interface BufferBuilderExtension {
        flywheel$getVertices(): number;
        flywheel$injectForRender(arg0: Internal.ByteBuffer_, arg1: Internal.VertexFormat_, arg2: number): void;
        flywheel$freeBuffer(): void;
        flywheel$appendBufferUnsafe(arg0: Internal.ByteBuffer_): void;
    }
    type BufferBuilderExtension_ = BufferBuilderExtension;
    /**
    * @javaClass java.nio.file.attribute.UserPrincipalLookupService
    */
    abstract class UserPrincipalLookupService {
        lookupPrincipalByGroupName(arg0: string): Internal.GroupPrincipal;
        lookupPrincipalByName(arg0: string): Internal.UserPrincipal;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UserPrincipalLookupService_ = UserPrincipalLookupService;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.EnchantmentBuilder$PostFunction
    */
    interface EnchantmentBuilder$PostFunction {
        apply(arg0: Internal.LivingEntityJS_, arg1: Internal.EntityJS_, arg2: number): void;
    }
    type EnchantmentBuilder$PostFunction_ = ((arg0: Internal.LivingEntityJS, arg1: Internal.EntityJS, arg2: number) => void) | EnchantmentBuilder$PostFunction;
    /**
    * @javaClass java.lang.AbstractStringBuilder
    */
    abstract class AbstractStringBuilder implements Internal.Appendable, Internal.CharSequence {
        deleteCharAt(arg0: number): this;
        codePointAt(arg0: number): number;
        setCharAt(arg0: number, arg1: string): void;
        replace(arg0: number, arg1: number, arg2: string): this;
        insert(arg0: number, arg1: string): this;
        insert(arg0: number, arg1: Internal.CharSequence_): this;
        insert(arg0: number, arg1: string[]): this;
        insert(arg0: number, arg1: any): this;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): this;
        insert(arg0: number, arg1: boolean): this;
        insert(arg0: number, arg1: number): this;
        insert(arg0: number, arg1: Internal.CharSequence_, arg2: number, arg3: number): this;
        delete(arg0: number, arg1: number): this;
        substring(arg0: number): string;
        substring(arg0: number, arg1: number): string;
        capacity(): number;
        appendCodePoint(arg0: number): this;
        codePointBefore(arg0: number): number;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        codePointCount(arg0: number, arg1: number): number;
        codePoints(): Internal.IntStream;
        trimToSize(): void;
        getChars(arg0: number, arg1: number, arg2: string[], arg3: number): void;
        length(): number;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        reverse(): this;
        lastIndexOf(arg0: string): number;
        lastIndexOf(arg0: string, arg1: number): number;
        setLength(arg0: number): void;
        toString(): string;
        ensureCapacity(arg0: number): void;
        chars(): Internal.IntStream;
        offsetByCodePoints(arg0: number, arg1: number): number;
        charAt(arg0: number): string;
        append(arg0: Internal.CharSequence_): this;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string[]): this;
        append(arg0: any): this;
        append(arg0: Internal.StringBuffer_): this;
        append(arg0: string): this;
        append(arg0: number): this;
        append(arg0: boolean): this;
        append(arg0: string[], arg1: number, arg2: number): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractStringBuilder_ = AbstractStringBuilder;
    /**
    * @javaClass java.time.DayOfWeek
    */
    class DayOfWeek extends Internal.Enum<Internal.DayOfWeek> implements Internal.TemporalAccessor, Internal.TemporalAdjuster {
        minus(arg0: number): this;
        static valueOf(arg0: string): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        static values(): Internal.DayOfWeek[];
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        getValue(): number;
        getDisplayName(arg0: Internal.TextStyle_, arg1: Internal.Locale_): string;
        static of(arg0: number): this;
        get(arg0: Internal.TemporalField_): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        static readonly "WEDNESDAY" : Internal.DayOfWeek;
        static readonly "MONDAY" : Internal.DayOfWeek;
        static readonly "THURSDAY" : Internal.DayOfWeek;
        static readonly "SUNDAY" : Internal.DayOfWeek;
        static readonly "TUESDAY" : Internal.DayOfWeek;
        static readonly "FRIDAY" : Internal.DayOfWeek;
        static readonly "SATURDAY" : Internal.DayOfWeek;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DayOfWeek_ = "sunday" | "saturday" | "tuesday" | "wednesday" | "thursday" | "friday" | "monday" | DayOfWeek;
    /**
    * @javaClass java.awt.image.renderable.RenderContext
    */
    class RenderContext implements Internal.Cloneable {
        preConcetenateTransform(arg0: Internal.AffineTransform_): void;
        getAreaOfInterest(): Internal.Shape;
        concetenateTransform(arg0: Internal.AffineTransform_): void;
        setTransform(arg0: Internal.AffineTransform_): void;
        setAreaOfInterest(arg0: Internal.Shape_): void;
        setRenderingHints(arg0: Internal.RenderingHints_): void;
        preConcatenateTransform(arg0: Internal.AffineTransform_): void;
        concatenateTransform(arg0: Internal.AffineTransform_): void;
        clone(): any;
        getRenderingHints(): Internal.RenderingHints;
        getTransform(): Internal.AffineTransform;
        get transform(): Internal.AffineTransform;
        get areaOfInterest(): Internal.Shape;
        get renderingHints(): Internal.RenderingHints;
        set transform(arg0: Internal.AffineTransform_);
        set areaOfInterest(arg0: Internal.Shape_);
        set renderingHints(arg0: Internal.RenderingHints_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderContext_ = RenderContext;
    /**
    * @javaClass java.nio.file.WatchKey
    */
    interface WatchKey {
        cancel(): void;
        watchable(): Internal.Watchable;
        pollEvents(): Internal.List<Internal.WatchEvent<any>>;
        isValid(): boolean;
        reset(): boolean;
    }
    type WatchKey_ = WatchKey;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.FireworksJS$Explosion
    */
    class FireworksJS$Explosion {
        "trail" : boolean;
        readonly "fadeColors" : Internal.IntOpenHashSet;
        "shape" : Internal.FireworksJS$Shape;
        "flicker" : boolean;
        readonly "colors" : Internal.IntOpenHashSet;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FireworksJS$Explosion_ = FireworksJS$Explosion;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptManager
    */
    class ScriptManager {
        loadFromDirectory(): void;
        load(): void;
        isClassAllowed(name: string): boolean;
        loadJavaClass(scope: Internal.Scriptable_, args: any[]): Internal.NativeJavaClass;
        unload(): void;
        handler$zfl000$loadJavaClass(njc: Internal.Scriptable_, ex: any[], cir: Internal.CallbackInfoReturnable_<any>): void;
        readonly "exampleScript" : string;
        readonly "type" : Internal.ScriptType;
        "firstLoad" : boolean;
        readonly "directory" : Internal.Path;
        readonly "packs" : Internal.Map<string, Internal.ScriptPack>;
        readonly "events" : Internal.EventsJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptManager_ = ScriptManager;
    /**
    * @javaClass com.mojang.datafixers.kinds.Functor
    */
    interface Functor <F, Mu> extends Internal.Kind1<F, Mu> {
        unbox<F, Mu>(arg0: Internal.App_<Mu, F>): Internal.Functor<F, Mu>;
        map<T, R>(arg0: Internal.Function_<T, R>, arg1: Internal.App_<F, T>): Internal.App<F, R>;
    }
    type Functor_<F, Mu> = ((arg0: Internal.Function<T, R>, arg1: Internal.App<F, T>) => Internal.App<F, R>) | Functor<F, Mu>;
    /**
    * @javaClass dev.latvian.mods.rhino.Symbol
    */
    interface Symbol {
    }
    type Symbol_ = Symbol;
    /**
    * @javaClass com.mojang.datafixers.kinds.Applicative
    */
    interface Applicative <F, Mu> extends Internal.Functor<F, Mu> {
        point<A>(arg0: A): Internal.App<F, A>;
        apply2<A, B, R>(arg0: Internal.BiFunction_<A, B, R>, arg1: Internal.App_<F, A>, arg2: Internal.App_<F, B>): Internal.App<F, R>;
        apply3<T1, T2, T3, R>(arg0: Internal.Function3_<T1, T2, T3, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>): Internal.App<F, R>;
        ap2<A, B, R>(arg0: Internal.App_<F, Internal.BiFunction_<A, B, R>>, arg1: Internal.App_<F, A>, arg2: Internal.App_<F, B>): Internal.App<F, R>;
        ap11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>(arg0: Internal.App_<F, Internal.Function11_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>): Internal.App<F, R>;
        apply4<T1, T2, T3, T4, R>(arg0: Internal.Function4_<T1, T2, T3, T4, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>): Internal.App<F, R>;
        apply5<T1, T2, T3, T4, T5, R>(arg0: Internal.Function5_<T1, T2, T3, T4, T5, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>): Internal.App<F, R>;
        ap10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>(arg0: Internal.App_<F, Internal.Function10_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>): Internal.App<F, R>;
        lift2<A, B, R>(arg0: Internal.App_<F, Internal.BiFunction_<A, B, R>>): Internal.BiFunction<Internal.App<F, A>, Internal.App<F, B>, Internal.App<F, R>>;
        ap4<T1, T2, T3, T4, R>(arg0: Internal.App_<F, Internal.Function4_<T1, T2, T3, T4, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>): Internal.App<F, R>;
        lift1<A, R>(arg0: Internal.App_<F, Internal.Function_<A, R>>): Internal.Function<Internal.App<F, A>, Internal.App<F, R>>;
        ap3<T1, T2, T3, R>(arg0: Internal.App_<F, Internal.Function3_<T1, T2, T3, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>): Internal.App<F, R>;
        ap6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App_<F, Internal.Function6_<T1, T2, T3, T4, T5, T6, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>): Internal.App<F, R>;
        ap5<T1, T2, T3, T4, T5, R>(arg0: Internal.App_<F, Internal.Function5_<T1, T2, T3, T4, T5, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>): Internal.App<F, R>;
        lift6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.App_<F, Internal.Function6_<T1, T2, T3, T4, T5, T6, R>>): Internal.Function6<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, R>>;
        ap8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App_<F, Internal.Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>): Internal.App<F, R>;
        lift5<T1, T2, T3, T4, T5, R>(arg0: Internal.App_<F, Internal.Function5_<T1, T2, T3, T4, T5, R>>): Internal.Function5<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, R>>;
        ap7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App_<F, Internal.Function7_<T1, T2, T3, T4, T5, T6, T7, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>): Internal.App<F, R>;
        lift4<T1, T2, T3, T4, R>(arg0: Internal.App_<F, Internal.Function4_<T1, T2, T3, T4, R>>): Internal.Function4<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, R>>;
        lift3<T1, T2, T3, R>(arg0: Internal.App_<F, Internal.Function3_<T1, T2, T3, R>>): Internal.Function3<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, R>>;
        ap9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App_<F, Internal.Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>): Internal.App<F, R>;
        apply6<T1, T2, T3, T4, T5, T6, R>(arg0: Internal.Function6_<T1, T2, T3, T4, T5, T6, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>): Internal.App<F, R>;
        apply7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.Function7_<T1, T2, T3, T4, T5, T6, T7, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>): Internal.App<F, R>;
        lift9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.App_<F, Internal.Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>>): Internal.Function9<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, T9>, Internal.App<F, R>>;
        lift8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.App_<F, Internal.Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R>>): Internal.Function8<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, T8>, Internal.App<F, R>>;
        apply8<T1, T2, T3, T4, T5, T6, T7, T8, R>(arg0: Internal.Function8_<T1, T2, T3, T4, T5, T6, T7, T8, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>): Internal.App<F, R>;
        lift7<T1, T2, T3, T4, T5, T6, T7, R>(arg0: Internal.App_<F, Internal.Function7_<T1, T2, T3, T4, T5, T6, T7, R>>): Internal.Function7<Internal.App<F, T1>, Internal.App<F, T2>, Internal.App<F, T3>, Internal.App<F, T4>, Internal.App<F, T5>, Internal.App<F, T6>, Internal.App<F, T7>, Internal.App<F, R>>;
        apply9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(arg0: Internal.Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>): Internal.App<F, R>;
        ap<A, R>(arg0: Internal.Function_<A, R>, arg1: Internal.App_<F, A>): Internal.App<F, R>;
        ap<A, R>(arg0: Internal.App_<F, Internal.Function_<A, R>>, arg1: Internal.App_<F, A>): Internal.App<F, R>;
        unbox<F, Mu>(arg0: Internal.App_<Mu, F>): Internal.Applicative<F, Mu>;
        ap16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>(arg0: Internal.App_<F, Internal.Function16_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>, arg12: Internal.App_<F, T12>, arg13: Internal.App_<F, T13>, arg14: Internal.App_<F, T14>, arg15: Internal.App_<F, T15>, arg16: Internal.App_<F, T16>): Internal.App<F, R>;
        ap13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>(arg0: Internal.App_<F, Internal.Function13_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>, arg12: Internal.App_<F, T12>, arg13: Internal.App_<F, T13>): Internal.App<F, R>;
        ap12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>(arg0: Internal.App_<F, Internal.Function12_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>, arg12: Internal.App_<F, T12>): Internal.App<F, R>;
        ap15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>(arg0: Internal.App_<F, Internal.Function15_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>, arg12: Internal.App_<F, T12>, arg13: Internal.App_<F, T13>, arg14: Internal.App_<F, T14>, arg15: Internal.App_<F, T15>): Internal.App<F, R>;
        ap14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>(arg0: Internal.App_<F, Internal.Function14_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>, arg1: Internal.App_<F, T1>, arg2: Internal.App_<F, T2>, arg3: Internal.App_<F, T3>, arg4: Internal.App_<F, T4>, arg5: Internal.App_<F, T5>, arg6: Internal.App_<F, T6>, arg7: Internal.App_<F, T7>, arg8: Internal.App_<F, T8>, arg9: Internal.App_<F, T9>, arg10: Internal.App_<F, T10>, arg11: Internal.App_<F, T11>, arg12: Internal.App_<F, T12>, arg13: Internal.App_<F, T13>, arg14: Internal.App_<F, T14>): Internal.App<F, R>;
    }
    type Applicative_<F, Mu> = Applicative<F, Mu>;
    /**
    * @javaClass java.awt.Paint
    */
    interface Paint extends Internal.Transparency {
        createContext(arg0: Internal.ColorModel_, arg1: Internal.Rectangle_, arg2: Internal.Rectangle2D_, arg3: Internal.AffineTransform_, arg4: Internal.RenderingHints_): Internal.PaintContext;
    }
    type Paint_ = ((arg0: Internal.ColorModel, arg1: Internal.Rectangle, arg2: Internal.Rectangle2D, arg3: Internal.AffineTransform, arg4: Internal.RenderingHints) => Internal.PaintContext) | Paint;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ObjectFunction
    */
    interface Int2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Int2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Int2ObjectFunction_<V> = ((arg0: number) => V) | Int2ObjectFunction<V>;
    /**
    * @javaClass net.minecraftforge.fluids.capability.IFluidHandler
    */
    interface IFluidHandler {
        getFluidInTank(arg0: number): Internal.FluidStack;
        getTankCapacity(arg0: number): number;
        fill(arg0: Internal.FluidStack_, arg1: Internal.IFluidHandler$FluidAction_): number;
        getTanks(): number;
        drain(arg0: number, arg1: Internal.IFluidHandler$FluidAction_): Internal.FluidStack;
        drain(arg0: Internal.FluidStack_, arg1: Internal.IFluidHandler$FluidAction_): Internal.FluidStack;
        isFluidValid(arg0: number, arg1: Internal.FluidStack_): boolean;
    }
    type IFluidHandler_ = IFluidHandler;
    /**
    * @javaClass java.text.Format$Field
    */
    class Format$Field extends Internal.AttributedCharacterIterator$Attribute {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Format$Field_ = Format$Field;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.ServerPlayerDataJS
    */
    class ServerPlayerDataJS extends Internal.PlayerDataJS<Internal.ServerPlayer, Internal.ServerPlayerJS> {
        getServer(): Internal.ServerJS;
        getPlayer(): Internal.ServerPlayerJS;
        getMinecraftPlayer(): Internal.ServerPlayer;
        getName(): string;
        getProfile(): Internal.GameProfile;
        hasClientMod(): boolean;
        getId(): Internal.UUID;
        getOverworld(): Internal.LevelJS;
        get server(): Internal.ServerJS;
        get minecraftPlayer(): Internal.ServerPlayer;
        get profile(): Internal.GameProfile;
        get name(): string;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get player(): Internal.ServerPlayerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerPlayerDataJS_ = ServerPlayerDataJS;
    /**
    * @javaClass java.awt.image.RenderedImage
    */
    interface RenderedImage {
        getTileHeight(): number;
        getMinTileX(): number;
        getTile(arg0: number, arg1: number): Internal.Raster;
        getMinTileY(): number;
        getTileWidth(): number;
        getColorModel(): Internal.ColorModel;
        getProperty(arg0: string): any;
        getNumYTiles(): number;
        getWidth(): number;
        getSources(): Internal.Vector<Internal.RenderedImage>;
        getTileGridXOffset(): number;
        copyData(arg0: Internal.WritableRaster_): Internal.WritableRaster;
        getTileGridYOffset(): number;
        getSampleModel(): Internal.SampleModel;
        getHeight(): number;
        getPropertyNames(): string[];
        getNumXTiles(): number;
        getMinX(): number;
        getData(): Internal.Raster;
        getData(arg0: Internal.Rectangle_): Internal.Raster;
        getMinY(): number;
    }
    type RenderedImage_ = RenderedImage;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.loot.RewardTable
    */
    class RewardTable extends Internal.QuestObjectBase {
        readData(nbt: Internal.CompoundTag_): void;
        editedFromGUI(): void;
        refreshJEI(): number;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        getQuestFile(): Internal.QuestFile;
        writeData(nbt: Internal.CompoundTag_): void;
        editedFromGUIOnServer(): void;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        onEditButtonClicked(gui: Internal.Runnable_): void;
        addMouseOverText(list: Internal.TooltipList_, includeWeight: boolean, includeEmpty: boolean): void;
        getFilename(): string;
        getAltTitle(): net.minecraft.network.chat.Component;
        getAltIcon(): Internal.Icon;
        getObjectType(): Internal.QuestObjectType;
        getPath(): string;
        deleteSelf(): void;
        clearCachedData(): void;
        getTotalWeight(includeEmpty: boolean): number;
        onCreated(): void;
        "lootTableId" : ResourceLocation;
        "useTitle" : boolean;
        readonly "file" : Internal.QuestFile;
        "filename" : string;
        "emptyWeight" : number;
        "lootCrate" : Internal.LootCrate;
        readonly "fakeQuest" : Internal.Quest;
        readonly "rewards" : Internal.List<Internal.WeightedReward>;
        "lootSize" : number;
        "hideTooltip" : boolean;
        get path(): string;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RewardTable_ = RewardTable;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.painter.PaintEventJS
    */
    class PaintEventJS extends Internal.ClientEventJS {
        vertex(m: Internal.Matrix4f_, x: number, y: number, z: number, col: number, u: number, v: number): void;
        vertex(m: Internal.Matrix4f_, x: number, y: number, z: number, col: number): void;
        setShaderTexture(tex: ResourceLocation_): void;
        beginQuads(texture: boolean): void;
        beginQuads(format: Internal.VertexFormat_): void;
        bindTextureForSetup(tex: ResourceLocation_): void;
        scale(x: number, y: number, z: number): void;
        translate(x: number, y: number, z: number): void;
        push(): void;
        setShaderColor(r: number, g: number, b: number, a: number): void;
        setShaderInstance(shader: Internal.Supplier_<Internal.ShaderInstance_>): void;
        pop(): void;
        setPositionColorShader(): void;
        getMatrix(): Internal.Matrix4f;
        resetShaderColor(): void;
        end(): void;
        multiply(q: Internal.Quaternion_): void;
        setPositionColorTextureShader(): void;
        begin(type: Internal.VertexFormat$Mode_, format: Internal.VertexFormat_): void;
        multiplyWithMatrix(m: Internal.Matrix4f_): void;
        readonly "mc" : Internal.Minecraft;
        readonly "delta" : number;
        readonly "screen" : Internal.Screen;
        readonly "tesselator" : Internal.Tesselator;
        readonly "buffer" : Internal.BufferBuilder;
        readonly "matrices" : Internal.PoseStack;
        readonly "font" : net.minecraft.client.gui.Font;
        get matrix(): Internal.Matrix4f;
        set shaderTexture(tex: ResourceLocation_);
        set shaderInstance(shader: Internal.Supplier_<Internal.ShaderInstance_>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PaintEventJS_ = PaintEventJS;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.entity.EntityTypeExtension
    */
    interface EntityTypeExtension <T> {
        flywheel$setInstancingController(arg0: Internal.EntityInstancingController_<T>): void;
        flywheel$getInstancingController(): Internal.EntityInstancingController<T>;
    }
    type EntityTypeExtension_<T> = EntityTypeExtension<T>;
    /**
    * @javaClass java.awt.datatransfer.FlavorListener
    */
    interface FlavorListener extends Internal.EventListener {
        flavorsChanged(arg0: Internal.FlavorEvent_): void;
    }
    type FlavorListener_ = ((arg0: Internal.FlavorEvent) => void) | FlavorListener;
    /**
    * @javaClass java.awt.event.ActionEvent
    */
    class ActionEvent extends Internal.AWTEvent {
        paramString(): string;
        getWhen(): number;
        getActionCommand(): string;
        getModifiers(): number;
        static readonly "SHIFT_MASK" : 1;
        static readonly "ACTION_LAST" : 1001;
        static readonly "ACTION_PERFORMED" : 1001;
        static readonly "CTRL_MASK" : 2;
        static readonly "ALT_MASK" : 8;
        static readonly "ACTION_FIRST" : 1001;
        static readonly "META_MASK" : 4;
        get actionCommand(): string;
        get modifiers(): number;
        get when(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ActionEvent_ = ActionEvent;
    /**
    * @javaClass javax.accessibility.AccessibleSelection
    */
    interface AccessibleSelection {
        selectAllAccessibleSelection(): void;
        getAccessibleSelectionCount(): number;
        clearAccessibleSelection(): void;
        removeAccessibleSelection(arg0: number): void;
        isAccessibleChildSelected(arg0: number): boolean;
        getAccessibleSelection(arg0: number): Internal.Accessible;
        addAccessibleSelection(arg0: number): void;
    }
    type AccessibleSelection_ = AccessibleSelection;
    /**
    * @javaClass net.minecraftforge.common.world.MobSpawnSettingsBuilder
    */
    class MobSpawnSettingsBuilder extends Internal.MobSpawnSettings$Builder {
        getEntityTypes(): Internal.Set<Internal.EntityType<any>>;
        getSpawner(arg0: Internal.MobCategory_): Internal.List<Internal.MobSpawnSettings$SpawnerData>;
        getProbability(): number;
        disablePlayerSpawn(): this;
        getCost(arg0: Internal.EntityType_<any>): Internal.MobSpawnSettings$MobSpawnCost;
        getSpawnerTypes(): Internal.Set<Internal.MobCategory>;
        get probability(): number;
        get spawnerTypes(): Internal.Set<Internal.MobCategory>;
        get entityTypes(): Internal.Set<Internal.EntityType<any>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobSpawnSettingsBuilder_ = MobSpawnSettingsBuilder;
    /**
    * @javaClass net.minecraft.core.Direction
    */
    class Direction extends Internal.Enum<Internal.Direction> implements Internal.StringRepresentable {
        getYaw(): number;
        getX(): number;
        getHorizontalIndex(): number;
        getPitch(): number;
        getY(): number;
        getZ(): number;
        getIndex(): number;
        static valueOf(arg0: string): this;
        static values(): Internal.Direction[];
        toString(): string;
        static readonly "DOWN" : Internal.Direction;
        static readonly "NORTH" : Internal.Direction;
        static readonly "WEST" : Internal.Direction;
        static readonly "UP" : Internal.Direction;
        static readonly "SOUTH" : Internal.Direction;
        static readonly "EAST" : Internal.Direction;
        get horizontalIndex(): number;
        get x(): number;
        get y(): number;
        get index(): number;
        get z(): number;
        get pitch(): number;
        get yaw(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Direction_ = "east" | "south" | "north" | "west" | "up" | "down" | Direction;
    /**
    * @javaClass java.time.zone.ZoneRules
    */
    class ZoneRules implements Internal.Serializable {
        getTransitions(): Internal.List<Internal.ZoneOffsetTransition>;
        getDaylightSavings(arg0: Internal.Instant_): Internal.Duration;
        getTransitionRules(): Internal.List<Internal.ZoneOffsetTransitionRule>;
        previousTransition(arg0: Internal.Instant_): Internal.ZoneOffsetTransition;
        getOffset(arg0: Internal.LocalDateTime_): Internal.ZoneOffset;
        getOffset(arg0: Internal.Instant_): Internal.ZoneOffset;
        isFixedOffset(): boolean;
        hashCode(): number;
        getValidOffsets(arg0: Internal.LocalDateTime_): Internal.List<Internal.ZoneOffset>;
        getTransition(arg0: Internal.LocalDateTime_): Internal.ZoneOffsetTransition;
        static of(arg0: Internal.ZoneOffset_, arg1: Internal.ZoneOffset_, arg2: Internal.List_<Internal.ZoneOffsetTransition_>, arg3: Internal.List_<Internal.ZoneOffsetTransition_>, arg4: Internal.List_<Internal.ZoneOffsetTransitionRule_>): this;
        static of(arg0: Internal.ZoneOffset_): this;
        equals(arg0: any): boolean;
        nextTransition(arg0: Internal.Instant_): Internal.ZoneOffsetTransition;
        getStandardOffset(arg0: Internal.Instant_): Internal.ZoneOffset;
        toString(): string;
        isDaylightSavings(arg0: Internal.Instant_): boolean;
        isValidOffset(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_): boolean;
        get fixedOffset(): boolean;
        get transitionRules(): Internal.List<Internal.ZoneOffsetTransitionRule>;
        get transitions(): Internal.List<Internal.ZoneOffsetTransition>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneRules_ = ZoneRules;
    /**
    * @javaClass java.lang.invoke.VarHandle$VarHandleDesc
    */
    class VarHandle$VarHandleDesc extends Internal.DynamicConstantDesc<Internal.VarHandle> {
        static ofStaticField(arg0: Internal.ClassDesc_, arg1: string, arg2: Internal.ClassDesc_): this;
        varType(): Internal.ClassDesc;
        static ofArray(arg0: Internal.ClassDesc_): this;
        toString(): string;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup_): Internal.VarHandle;
        static ofField(arg0: Internal.ClassDesc_, arg1: string, arg2: Internal.ClassDesc_): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VarHandle$VarHandleDesc_ = VarHandle$VarHandleDesc;
    /**
    * Fired by different tag when the game:
    * - is initializing
    * - is post-initializing
    * @javaClass dev.latvian.mods.kubejs.event.StartupEventJS
    */
    class StartupEventJS extends Internal.EventJS {
        post(id: string): boolean;
        post(id: string, sub: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired by different tag when the game:
    * - is initializing
    * - is post-initializing
    */
    type StartupEventJS_ = StartupEventJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ByteFunction
    */
    interface Int2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2ByteFunction;
    }
    type Int2ByteFunction_ = ((arg0: number) => number) | Int2ByteFunction;
    /**
    * @javaClass java.util.stream.DoubleStream$DoubleMapMultiConsumer
    */
    interface DoubleStream$DoubleMapMultiConsumer {
        accept(arg0: number, arg1: Internal.DoubleConsumer_): void;
    }
    type DoubleStream$DoubleMapMultiConsumer_ = ((arg0: number, arg1: Internal.DoubleConsumer) => void) | DoubleStream$DoubleMapMultiConsumer;
    /**
    * @javaClass net.minecraftforge.registries.IForgeRegistry
    */
    interface IForgeRegistry <V> extends Internal.Iterable<V> {
        getKey(arg0: V): ResourceLocation;
        getValues(): Internal.Collection<V>;
        getRegistryKey(): Internal.ResourceKey<Internal.Registry<V>>;
        getCodec(): Internal.Codec<V>;
        registerAll(... arg0: V[]): void;
        containsKey(arg0: ResourceLocation_): boolean;
        getDefaultKey(): ResourceLocation;
        isEmpty(): boolean;
        getRegistryName(): ResourceLocation;
        getRegistrySuperType(): typeof V;
        getKeys(): Internal.Set<ResourceLocation>;
        getSlaveMap<T>(arg0: ResourceLocation_, arg1: Internal.Class_<T>): T;
        containsValue(arg0: V): boolean;
        tags(): Internal.ITagManager<V>;
        getResourceKey(arg0: V): Internal.Optional<Internal.ResourceKey<V>>;
        getValue(arg0: ResourceLocation_): V;
        getEntries(): Internal.Set<Internal.Map$Entry<Internal.ResourceKey<V>, V>>;
        getHolder(arg0: V): Internal.Optional<Internal.Holder<V>>;
        getHolder(arg0: ResourceLocation_): Internal.Optional<Internal.Holder<V>>;
        getHolder(arg0: Internal.ResourceKey_<V>): Internal.Optional<Internal.Holder<V>>;
        register(arg0: V): void;
    }
    type IForgeRegistry_<V> = IForgeRegistry<V>;
    /**
    * @javaClass com.jozufozu.flywheel.light.TickingLightListener
    */
    interface TickingLightListener extends Internal.LightListener {
        tickLightListener(): boolean;
    }
    type TickingLightListener_ = (() => boolean) | TickingLightListener;
    /**
    * @javaClass java.util.jar.Attributes
    */
    class Attributes implements Internal.Map<any, any>, Internal.Cloneable {
        entrySet(): Internal.Set<Internal.Map$Entry<any, any>>;
        containsKey(arg0: any): boolean;
        values(): Internal.Collection<any>;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: any): boolean;
        put(arg0: any, arg1: any): any;
        remove(arg0: any): any;
        getValue(arg0: string): string;
        getValue(arg0: Internal.Attributes$Name_): string;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Map_<any, any>): void;
        equals(arg0: any): boolean;
        get(arg0: any): any;
        clone(): any;
        putValue(arg0: string, arg1: string): string;
        keySet(): Internal.Set<any>;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Attributes_ = Attributes;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.icon.Drawable
    */
    interface Drawable {
        drawStatic(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        draw(arg0: Internal.PoseStack_, arg1: number, arg2: number, arg3: number, arg4: number): void;
        draw3D(matrixStack: Internal.PoseStack_): void;
    }
    type Drawable_ = ((arg0: Internal.PoseStack, arg1: number, arg2: number, arg3: number, arg4: number) => void) | Drawable;
    /**
    * @javaClass java.time.ZoneOffset
    */
    class ZoneOffset extends Internal.ZoneId implements Internal.TemporalAccessor, Internal.TemporalAdjuster, Internal.Comparable<Internal.ZoneOffset>, Internal.Serializable {
        getTotalSeconds(): number;
        static ofHoursMinutes(arg0: number, arg1: number): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        getId(): string;
        isSupported(arg0: Internal.TemporalField_): boolean;
        compareTo(arg0: Internal.ZoneOffset_): number;
        getLong(arg0: Internal.TemporalField_): number;
        static ofHours(arg0: number): this;
        hashCode(): number;
        static of(arg0: string): this;
        equals(arg0: any): boolean;
        get(arg0: Internal.TemporalField_): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        toString(): string;
        getRules(): Internal.ZoneRules;
        static ofHoursMinutesSeconds(arg0: number, arg1: number, arg2: number): this;
        static ofTotalSeconds(arg0: number): this;
        static readonly "MIN" : Internal.ZoneOffset;
        static readonly "UTC" : Internal.ZoneOffset;
        static readonly "MAX" : Internal.ZoneOffset;
        get totalSeconds(): number;
        get rules(): Internal.ZoneRules;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneOffset_ = ZoneOffset;
    /**
    * @javaClass java.awt.dnd.DragSourceContext
    */
    class DragSourceContext implements Internal.DragSourceListener, Internal.DragSourceMotionListener, Internal.Serializable {
        removeDragSourceListener(arg0: Internal.DragSourceListener_): void;
        getCursor(): Internal.Cursor;
        getTrigger(): Internal.DragGestureEvent;
        dragEnter(arg0: Internal.DragSourceDragEvent_): void;
        dragDropEnd(arg0: Internal.DragSourceDropEvent_): void;
        dropActionChanged(arg0: Internal.DragSourceDragEvent_): void;
        transferablesFlavorsChanged(): void;
        getSourceActions(): number;
        addDragSourceListener(arg0: Internal.DragSourceListener_): void;
        getTransferable(): Internal.Transferable;
        dragMouseMoved(arg0: Internal.DragSourceDragEvent_): void;
        getDragSource(): Internal.DragSource;
        setCursor(arg0: Internal.Cursor_): void;
        dragOver(arg0: Internal.DragSourceDragEvent_): void;
        getComponent(): Internal.Component;
        dragExit(arg0: Internal.DragSourceEvent_): void;
        get cursor(): Internal.Cursor;
        get sourceActions(): number;
        get component(): Internal.Component;
        get transferable(): Internal.Transferable;
        get trigger(): Internal.DragGestureEvent;
        get dragSource(): Internal.DragSource;
        set cursor(arg0: Internal.Cursor_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragSourceContext_ = DragSourceContext;
    /**
    * @javaClass java.io.FilenameFilter
    */
    interface FilenameFilter {
        accept(arg0: Internal.File_, arg1: string): boolean;
    }
    type FilenameFilter_ = ((arg0: Internal.File, arg1: string) => boolean) | FilenameFilter;
    /**
    * @javaClass java.awt.ImageCapabilities
    */
    class ImageCapabilities implements Internal.Cloneable {
        isAccelerated(): boolean;
        isTrueVolatile(): boolean;
        clone(): any;
        get trueVolatile(): boolean;
        get accelerated(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImageCapabilities_ = ImageCapabilities;
    /**
    * @javaClass dev.latvian.mods.itemfilters.core.ItemFiltersStack
    */
    interface ItemFiltersStack {
        createDataIF(item: Internal.Item_): any;
        getInventoryFilterData(): Internal.ItemInventory;
        getItemFiltersData(): any;
        getStringValueFilterData(): Internal.StringValueData<any>;
    }
    type ItemFiltersStack_ = (() => any) | ItemFiltersStack;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Exports$Modifier
    */
    class ModuleDescriptor$Exports$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Exports$Modifier> {
        static valueOf(arg0: string): this;
        static values(): Internal.ModuleDescriptor$Exports$Modifier[];
        static readonly "SYNTHETIC" : Internal.ModuleDescriptor$Exports$Modifier;
        static readonly "MANDATED" : Internal.ModuleDescriptor$Exports$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Exports$Modifier_ = "synthetic" | "mandated" | ModuleDescriptor$Exports$Modifier;
    /**
    * @javaClass java.util.Dictionary
    */
    abstract class Dictionary <K, V> {
        size(): number;
        keys(): Internal.Enumeration<K>;
        elements(): Internal.Enumeration<V>;
        get(arg0: any): V;
        isEmpty(): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dictionary_<K, V> = Dictionary<K, V>;
    /**
    * @javaClass net.minecraft.core.Holder
    */
    interface Holder <T> extends Internal.IReverseTag<T> {
        getTagKeys(): Internal.Stream<Internal.TagKey<T>>;
        containsTag(arg0: Internal.TagKey_<T>): boolean;
    }
    type Holder_<T> = Holder<T>;
    /**
    * @javaClass java.awt.JobAttributes$MultipleDocumentHandlingType
    */
    class JobAttributes$MultipleDocumentHandlingType extends Internal.AttributeValue {
        static readonly "SEPARATE_DOCUMENTS_COLLATED_COPIES" : Internal.JobAttributes$MultipleDocumentHandlingType;
        static readonly "SEPARATE_DOCUMENTS_UNCOLLATED_COPIES" : Internal.JobAttributes$MultipleDocumentHandlingType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes$MultipleDocumentHandlingType_ = JobAttributes$MultipleDocumentHandlingType;
    /**
    * @javaClass java.util.EventObject
    */
    class EventObject implements Internal.Serializable {
        getSource(): any;
        toString(): string;
        get source(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventObject_ = EventObject;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.BlockBuilderProvider
    */
    interface BlockBuilderProvider {
        getBlockBuilderKJS(): Internal.BlockBuilder;
    }
    type BlockBuilderProvider_ = BlockBuilderProvider;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ListConfig
    */
    class ListConfig <E, CV> extends Internal.ConfigValue<Internal.List<E>> {
        getStringForGUI(v: Internal.List_<E>): net.minecraft.network.chat.Component;
        onClicked(button: Internal.MouseButton_, callback: Internal.ConfigCallback_): void;
        getColor(v: Internal.List_<E>): Internal.Color4I;
        addInfo(l: Internal.TooltipList_): void;
        copy(v: Internal.List_<E>): Internal.List<E>;
        static readonly "COLOR" : Internal.Color4I;
        static readonly "EMPTY_LIST" : Internal.TextComponent;
        static readonly "NON_EMPTY_LIST" : Internal.TextComponent;
        readonly "type" : CV;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ListConfig_<E, CV> = ListConfig<E, CV>;
    /**
    * @javaClass net.minecraft.nbt.CompoundTag
    */
    class CompoundTag implements Internal.Tag {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type CompoundTag_ = string | {[string]: string | number | boolean | Internal.CompoundTag_} | CompoundTag;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.predicate.BlockEntityPredicateDataCheck
    */
    interface BlockEntityPredicateDataCheck {
        checkData(arg0: Internal.CompoundTag_): boolean;
    }
    type BlockEntityPredicateDataCheck_ = ((arg0: Internal.CompoundTag) => boolean) | BlockEntityPredicateDataCheck;
    /**
    * @javaClass java.awt.JobAttributes$DestinationType
    */
    class JobAttributes$DestinationType extends Internal.AttributeValue {
        static readonly "PRINTER" : Internal.JobAttributes$DestinationType;
        static readonly "FILE" : Internal.JobAttributes$DestinationType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes$DestinationType_ = JobAttributes$DestinationType;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2FloatFunction
    */
    interface Int2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2FloatFunction;
    }
    type Int2FloatFunction_ = ((arg0: number) => number) | Int2FloatFunction;
    /**
    * @javaClass net.minecraft.world.level.LightLayer
    */
    class LightLayer extends Internal.Enum<Internal.LightLayer> {
        static valueOf(arg0: string): this;
        static values(): Internal.LightLayer[];
        static readonly "SKY" : Internal.LightLayer;
        static readonly "BLOCK" : Internal.LightLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LightLayer_ = "sky" | "block" | LightLayer;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2DoubleFunction
    */
    interface Float2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Float2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2DoubleFunction;
    }
    type Float2DoubleFunction_ = ((arg0: number) => number) | Float2DoubleFunction;
    /**
    * @javaClass com.mojang.serialization.Decoder
    */
    interface Decoder <A> {
        simple(): Internal.Decoder$Simple<A>;
        terminal(): Internal.Decoder$Terminal<A>;
        ofBoxed<A>(arg0: Internal.Decoder$Boxed_<A>): Internal.Decoder<A>;
        parse<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<A>;
        parse<T>(arg0: Internal.Dynamic_<T>): Internal.DataResult<A>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.Decoder<A>;
        error<A>(arg0: string): Internal.Decoder<A>;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        decode<T>(arg0: Internal.Dynamic_<T>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        promotePartial(arg0: Internal.Consumer_<string>): Internal.Decoder<A>;
        flatMap<B>(arg0: Internal.Function_<A, Internal.DataResult_<B>>): Internal.Decoder<B>;
        ofSimple<A>(arg0: Internal.Decoder$Simple_<A>): Internal.Decoder<A>;
        unit<A>(arg0: Internal.Supplier_<A>): Internal.MapDecoder<A>;
        unit<A>(arg0: A): Internal.MapDecoder<A>;
        boxed(): Internal.Decoder$Boxed<A>;
        fieldOf(arg0: string): Internal.MapDecoder<A>;
        ofTerminal<A>(arg0: Internal.Decoder$Terminal_<A>): Internal.Decoder<A>;
        map<B>(arg0: Internal.Function_<A, B>): Internal.Decoder<B>;
    }
    type Decoder_<A> = ((arg0: Internal.DynamicOps<T>, arg1: any) => Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>) | Decoder<A>;
    /**
    * @javaClass net.minecraft.util.StringRepresentable
    */
    interface StringRepresentable {
    }
    type StringRepresentable_ = StringRepresentable;
    /**
    * @javaClass net.minecraftforge.server.permission.nodes.PermissionNode$PermissionResolver
    */
    interface PermissionNode$PermissionResolver <T> {
        resolve(arg0: Internal.ServerPlayer_, arg1: Internal.UUID_, ... arg2: any[]): T;
    }
    type PermissionNode$PermissionResolver_<T> = ((arg0: Internal.ServerPlayer, arg1: Internal.UUID, arg2: any[]) => T) | PermissionNode$PermissionResolver<T>;
    /**
    * @javaClass java.util.function.IntBinaryOperator
    */
    interface IntBinaryOperator {
        applyAsInt(arg0: number, arg1: number): number;
    }
    type IntBinaryOperator_ = ((arg0: number, arg1: number) => number) | IntBinaryOperator;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.Quest
    */
    class Quest extends Internal.QuestObject implements Internal.Movable {
        hasDependency(object: Internal.QuestObject_): boolean;
        isProgressionIgnored(): boolean;
        deleteChildren(): void;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        moved(nx: number, ny: number, nc: number): void;
        getSubtitle(): net.minecraft.network.chat.Component;
        getShape(): string;
        getWidth(): number;
        writeData(nbt: Internal.CompoundTag_): void;
        getDescription(): net.minecraft.network.chat.Component[];
        getChapter(): Internal.Chapter;
        forceProgress(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        isCompletedRaw(data: Internal.TeamData_): boolean;
        getHeight(): number;
        getRelativeProgressFromChildren(data: Internal.TeamData_): number;
        getAltIcon(): Internal.Icon;
        verifyDependencies(autofix: boolean): boolean;
        getObjectType(): Internal.QuestObjectType;
        hasUnclaimedRewardsRaw(teamData: Internal.TeamData_, player: Internal.UUID_): boolean;
        clearCachedData(): void;
        getParentID(): number;
        move(to: Internal.Chapter_, x: number, y: number): void;
        readData(nbt: Internal.CompoundTag_): void;
        editedFromGUI(): void;
        refreshJEI(): number;
        getDependants(): Internal.List<Internal.QuestObject>;
        getQuestChapter(): Internal.Chapter;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        removeInvalidDependencies(): void;
        getQuestFile(): Internal.QuestFile;
        isVisible(data: Internal.TeamData_): boolean;
        getHideDependencyLines(): boolean;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        getChildren(): Internal.Collection<Internal.QuestObject>;
        getX(): number;
        onStarted(data: Internal.QuestProgressEventData_<any>): void;
        getY(): number;
        getAltTitle(): net.minecraft.network.chat.Component;
        deleteSelf(): void;
        onCreated(): void;
        "chapter" : Internal.Chapter;
        "shape" : string;
        "dependencyRequirement" : Internal.DependencyRequirement;
        "disableJEI" : Internal.Tristate;
        "minRequiredDependencies" : number;
        readonly "description" : Internal.List<string>;
        "optional" : boolean;
        "minWidth" : number;
        readonly "dependencies" : Internal.List<Internal.QuestObject>;
        "hideTextUntilComplete" : Internal.Tristate;
        "guidePage" : string;
        "hide" : Internal.Tristate;
        "hideDependencyLines" : Internal.Tristate;
        "size" : number;
        "subtitle" : string;
        "x" : number;
        "y" : number;
        readonly "tasks" : Internal.List<Internal.Task>;
        readonly "rewards" : Internal.List<Internal.Reward>;
        get progressionIgnored(): boolean;
        get dependants(): Internal.List<Internal.QuestObject>;
        get children(): Internal.Collection<Internal.QuestObject>;
        get width(): number;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get parentID(): number;
        get height(): number;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        get questChapter(): Internal.Chapter;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Quest_ = Quest;
    /**
    * @javaClass java.lang.Class
    */
    class Class <T> implements Internal.Serializable, Internal.GenericDeclaration, Internal.Type, Internal.AnnotatedElement, Internal.TypeDescriptor$OfField<Internal.Class<any>>, Internal.Constable {
        getModule(): Internal.Module;
        isSealed(): boolean;
        getResource(arg0: string): Internal.URL;
        getName(): string;
        isLocalClass(): boolean;
        isSynthetic(): boolean;
        getCanonicalName(): string;
        getMethod(arg0: string, ... arg1: Internal.Class_<any>[]): Internal.Method;
        describeConstable(): Internal.Optional<Internal.ClassDesc>;
        getDeclaredFields(): Internal.Field[];
        isMemberClass(): boolean;
        cast(arg0: any): T;
        isInstance(arg0: any): boolean;
        getEnclosingMethod(): Internal.Method;
        getPermittedSubclasses(): Internal.Class<any>[];
        getSigners(): any[];
        getTypeParameters(): any[];
        isInterface(): boolean;
        getPackage(): Internal.Package;
        arrayType(): typeof any;
        getNestHost(): typeof any;
        asSubclass<U>(arg0: Internal.Class_<U>): typeof U;
        getField(arg0: string): Internal.Field;
        descriptorString(): string;
        getInterfaces(): Internal.Class<any>[];
        getAnnotatedInterfaces(): Internal.AnnotatedType[];
        newInstance(): T;
        getFields(): Internal.Field[];
        getAnnotation<A>(arg0: Internal.Class_<A>): A;
        getRecordComponents(): any[];
        getComponentType(): typeof any;
        getDeclaredAnnotation<A>(arg0: Internal.Class_<A>): A;
        getSimpleName(): string;
        isArray(): boolean;
        getPackageName(): string;
        getMethods(): Internal.Method[];
        isPrimitive(): boolean;
        isAnnotation(): boolean;
        getProtectionDomain(): Internal.ProtectionDomain;
        getDeclaredConstructors(): Internal.Constructor<any>[];
        isAnnotationPresent(arg0: Internal.Class_<Internal.Annotation_>): boolean;
        desiredAssertionStatus(): boolean;
        getNestMembers(): Internal.Class<any>[];
        getGenericInterfaces(): Internal.Type[];
        getClassLoader(): Internal.ClassLoader;
        isAssignableFrom(arg0: Internal.Class_<any>): boolean;
        getDeclaredAnnotations(): Internal.Annotation[];
        getDeclaredMethods(): Internal.Method[];
        getDeclaringClass(): typeof any;
        getAnnotationsByType<A>(arg0: Internal.Class_<A>): A[];
        getConstructors(): Internal.Constructor<any>[];
        getAnnotatedSuperclass(): Internal.AnnotatedType;
        toGenericString(): string;
        getModifiers(): number;
        getTypeName(): string;
        getEnclosingConstructor(): Internal.Constructor<any>;
        isNestmateOf(arg0: Internal.Class_<any>): boolean;
        getClasses(): Internal.Class<any>[];
        getSuperclass(): typeof T;
        getDeclaredField(arg0: string): Internal.Field;
        componentType(): typeof any;
        static forName(arg0: Internal.Module_, arg1: string): typeof any;
        static forName(arg0: string, arg1: boolean, arg2: Internal.ClassLoader_): typeof any;
        static forName(arg0: string): typeof any;
        getResourceAsStream(arg0: string): Internal.InputStream;
        isRecord(): boolean;
        getDeclaredMethod(arg0: string, ... arg1: Internal.Class_<any>[]): Internal.Method;
        isEnum(): boolean;
        getDeclaredConstructor(... arg0: Internal.Class_<any>[]): Internal.Constructor<T>;
        getAnnotations(): Internal.Annotation[];
        getConstructor(... arg0: Internal.Class_<any>[]): Internal.Constructor<T>;
        getEnumConstants(): T[];
        isHidden(): boolean;
        getDeclaredAnnotationsByType<A>(arg0: Internal.Class_<A>): A[];
        getDeclaredClasses(): Internal.Class<any>[];
        isAnonymousClass(): boolean;
        getEnclosingClass(): typeof any;
        toString(): string;
        getGenericSuperclass(): Internal.Type;
        get enclosingConstructor(): Internal.Constructor<any>;
        get annotations(): Internal.Annotation[];
        get memberClass(): boolean;
        get declaredConstructors(): Internal.Constructor<any>[];
        get declaredFields(): Internal.Field[];
        get superclass(): typeof T;
        get record(): boolean;
        get canonicalName(): string;
        get package(): Internal.Package;
        get protectionDomain(): Internal.ProtectionDomain;
        get sealed(): boolean;
        get module(): Internal.Module;
        get enclosingMethod(): Internal.Method;
        get enum(): boolean;
        get declaringClass(): typeof any;
        get synthetic(): boolean;
        get constructors(): Internal.Constructor<any>[];
        get declaredClasses(): Internal.Class<any>[];
        get name(): string;
        get fields(): Internal.Field[];
        get classLoader(): Internal.ClassLoader;
        get primitive(): boolean;
        get hidden(): boolean;
        get methods(): Internal.Method[];
        get classes(): Internal.Class<any>[];
        get typeName(): string;
        get declaredMethods(): Internal.Method[];
        get interface(): boolean;
        get genericInterfaces(): Internal.Type[];
        get modifiers(): number;
        get typeParameters(): any[];
        get annotatedSuperclass(): Internal.AnnotatedType;
        get permittedSubclasses(): Internal.Class<any>[];
        get array(): boolean;
        get enumConstants(): T[];
        get annotatedInterfaces(): Internal.AnnotatedType[];
        get packageName(): string;
        get annotation(): boolean;
        get declaredAnnotations(): Internal.Annotation[];
        get interfaces(): Internal.Class<any>[];
        get genericSuperclass(): Internal.Type;
        get localClass(): boolean;
        get enclosingClass(): typeof any;
        get nestMembers(): Internal.Class<any>[];
        get signers(): any[];
        get recordComponents(): any[];
        get simpleName(): string;
        get nestHost(): typeof any;
        get anonymousClass(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Class_<T> = typeof T | Class<T>;
    /**
    * @javaClass vazkii.botania.forge.mixin.client.ForgeAccessorModelBakery
    */
    interface ForgeAccessorModelBakery {
        getResourceManager(): Internal.ResourceManager;
    }
    type ForgeAccessorModelBakery_ = (() => Internal.ResourceManager) | ForgeAccessorModelBakery;
    /**
    * @javaClass com.google.common.collect.ImmutableList
    */
    abstract class ImmutableList <E> extends Internal.ImmutableCollection<E> implements Internal.List<E>, Internal.RandomAccess {
        add(arg0: number, arg1: E): void;
        subList(arg0: number, arg1: number): Internal.ImmutableList<E>;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: Internal.Consumer_<E>): void;
        sort(arg0: Internal.Comparator_<E>): void;
        reverse(): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Iterable_<E>): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: E[]): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Collection_<E>): Internal.ImmutableList<E>;
        static copyOf<E>(arg0: Internal.Iterator_<E>): Internal.ImmutableList<E>;
        replaceAll(arg0: Internal.UnaryOperator_<E>): void;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: number): E;
        static builderWithExpectedSize<E>(arg0: number): Internal.ImmutableList$Builder<E>;
        static sortedCopyOf<E>(arg0: Internal.Comparator_<E>, arg1: Internal.Iterable_<E>): Internal.ImmutableList<E>;
        static sortedCopyOf<E>(arg0: Internal.Iterable_<E>): Internal.ImmutableList<E>;
        lastIndexOf(arg0: any): number;
        contains(arg0: any): boolean;
        iterator(): Internal.UnmodifiableIterator<E>;
        addAll(arg0: number, arg1: Internal.Collection_<E>): boolean;
        hashCode(): number;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): Internal.ImmutableList<E>;
        static of<E>(): Internal.ImmutableList<E>;
        static of<E>(arg0: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E, arg10: E, arg11: E, ... arg12: E[]): Internal.ImmutableList<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E, arg10: E): Internal.ImmutableList<E>;
        equals(arg0: any): boolean;
        static toImmutableList<E>(): Internal.Collector<E, any, Internal.ImmutableList<E>>;
        static builder<E>(): Internal.ImmutableList$Builder<E>;
        listIterator(arg0: number): Internal.UnmodifiableListIterator<E>;
        listIterator(): Internal.UnmodifiableListIterator<E>;
        indexOf(arg0: any): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableList_<E> = ImmutableList<E>;
    /**
    * @javaClass java.awt.font.GlyphMetrics
    */
    class GlyphMetrics {
        isLigature(): boolean;
        isStandard(): boolean;
        getRSB(): number;
        getType(): number;
        getAdvance(): number;
        isCombining(): boolean;
        getBounds2D(): Internal.Rectangle2D;
        isWhitespace(): boolean;
        getAdvanceY(): number;
        getLSB(): number;
        getAdvanceX(): number;
        isComponent(): boolean;
        static readonly "COMBINING" : 2;
        static readonly "WHITESPACE" : 4;
        static readonly "LIGATURE" : 1;
        static readonly "COMPONENT" : 3;
        static readonly "STANDARD" : 0;
        get standard(): boolean;
        get rSB(): number;
        get advanceY(): number;
        get advanceX(): number;
        get component(): boolean;
        get ligature(): boolean;
        get combining(): boolean;
        get lSB(): number;
        get type(): number;
        get bounds2D(): Internal.Rectangle2D;
        get whitespace(): boolean;
        get advance(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GlyphMetrics_ = GlyphMetrics;
    /**
    * @javaClass java.time.Instant
    */
    class Instant implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.Instant>, Internal.Serializable {
        static ofEpochSecond(arg0: number): this;
        static ofEpochSecond(arg0: number, arg1: number): this;
        minus(arg0: Internal.TemporalAmount_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        static ofEpochMilli(arg0: number): this;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        minusMillis(arg0: number): this;
        compareTo(arg0: Internal.Instant_): number;
        hashCode(): number;
        static now(): this;
        static now(arg0: Internal.Clock_): this;
        get(arg0: Internal.TemporalField_): number;
        plusSeconds(arg0: number): this;
        static from(arg0: Internal.TemporalAccessor_): this;
        plusNanos(arg0: number): this;
        atOffset(arg0: Internal.ZoneOffset_): Internal.OffsetDateTime;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        toEpochMilli(): number;
        static parse(arg0: Internal.CharSequence_): this;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        atZone(arg0: Internal.ZoneId_): Internal.ZonedDateTime;
        isBefore(arg0: Internal.Instant_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
        getLong(arg0: Internal.TemporalField_): number;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        plusMillis(arg0: number): this;
        equals(arg0: any): boolean;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        minusSeconds(arg0: number): this;
        getEpochSecond(): number;
        isAfter(arg0: Internal.Instant_): boolean;
        static readonly "MIN" : Internal.Instant;
        static readonly "MAX" : Internal.Instant;
        static readonly "EPOCH" : Internal.Instant;
        get nano(): number;
        get epochSecond(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Instant_ = Instant;
    /**
    * @javaClass com.simibubi.create.foundation.utility.IInteractionChecker
    */
    interface IInteractionChecker {
        canPlayerUse(arg0: Internal.Player_): boolean;
    }
    type IInteractionChecker_ = ((arg0: Internal.Player) => boolean) | IInteractionChecker;
    /**
    * @javaClass java.awt.MenuItem
    */
    class MenuItem extends Internal.MenuComponent implements Internal.Accessible {
        setShortcut(arg0: Internal.MenuShortcut_): void;
        getListeners<T>(arg0: Internal.Class_<T>): T[];
        getLabel(): string;
        deleteShortcut(): void;
        addActionListener(arg0: Internal.ActionListener_): void;
        setActionCommand(arg0: string): void;
        getShortcut(): Internal.MenuShortcut;
        getAccessibleContext(): Internal.AccessibleContext;
        setEnabled(arg0: boolean): void;
        paramString(): string;
        removeActionListener(arg0: Internal.ActionListener_): void;
        addNotify(): void;
        disable(): void;
        enable(): void;
        enable(arg0: boolean): void;
        isEnabled(): boolean;
        getActionListeners(): Internal.ActionListener[];
        setLabel(arg0: string): void;
        getActionCommand(): string;
        get accessibleContext(): Internal.AccessibleContext;
        get actionCommand(): string;
        get shortcut(): Internal.MenuShortcut;
        get actionListeners(): Internal.ActionListener[];
        get label(): string;
        get enabled(): boolean;
        set actionCommand(arg0: string);
        set shortcut(arg0: Internal.MenuShortcut_);
        set label(arg0: string);
        set enabled(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MenuItem_ = MenuItem;
    /**
    * @javaClass net.minecraft.world.item.crafting.RecipeType
    */
    interface RecipeType <T> {
    }
    type RecipeType_<T> = Special.RecipeType | RecipeType<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.generator.JsonGenerator
    */
    class JsonGenerator {
        getAllJsons(): Internal.Map<ResourceLocation, Internal.JsonElement>;
        json(id: ResourceLocation_, json: Internal.JsonElement_): void;
        get allJsons(): Internal.Map<ResourceLocation, Internal.JsonElement>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonGenerator_ = JsonGenerator;
    /**
    * @javaClass java.net.InterfaceAddress
    */
    class InterfaceAddress {
        getBroadcast(): Internal.InetAddress;
        hashCode(): number;
        equals(arg0: any): boolean;
        getNetworkPrefixLength(): number;
        getAddress(): Internal.InetAddress;
        toString(): string;
        get broadcast(): Internal.InetAddress;
        get address(): Internal.InetAddress;
        get networkPrefixLength(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InterfaceAddress_ = InterfaceAddress;
    /**
    * @javaClass java.awt.Menu
    */
    class Menu extends Internal.MenuItem implements Internal.MenuContainer, Internal.Accessible {
        add(arg0: Internal.MenuItem_): Internal.MenuItem;
        add(arg0: string): void;
        countItems(): number;
        getItemCount(): number;
        getItem(arg0: number): Internal.MenuItem;
        insert(arg0: Internal.MenuItem_, arg1: number): void;
        insert(arg0: string, arg1: number): void;
        isTearOff(): boolean;
        getAccessibleContext(): Internal.AccessibleContext;
        remove(arg0: number): void;
        remove(arg0: Internal.MenuComponent_): void;
        paramString(): string;
        removeAll(): void;
        addSeparator(): void;
        addNotify(): void;
        removeNotify(): void;
        insertSeparator(arg0: number): void;
        get accessibleContext(): Internal.AccessibleContext;
        get tearOff(): boolean;
        get itemCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Menu_ = Menu;
    /**
    * @javaClass dev.latvian.mods.rhino.util.wrap.TypeWrappers
    */
    class TypeWrappers {
        getWrapperFactory(target: Internal.Class_<any>, from: any): Internal.TypeWrapperFactory<any>;
        register<T>(target: Internal.Class_<T>, factory: Internal.TypeWrapperFactory_<T>): void;
        register<T>(target: Internal.Class_<T>, validator: Internal.Predicate_<any>, factory: Internal.TypeWrapperFactory_<T>): void;
        register<F, T>(id: string, from: Internal.Class_<F>, to: Internal.Class_<T>, factory: Internal.Function_<F, T>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TypeWrappers_ = TypeWrappers;
    /**
    * @javaClass java.lang.constant.DirectMethodHandleDesc$Kind
    */
    class DirectMethodHandleDesc$Kind extends Internal.Enum<Internal.DirectMethodHandleDesc$Kind> {
        static valueOf(arg0: number, arg1: boolean): this;
        static valueOf(arg0: string): this;
        static valueOf(arg0: number): this;
        static values(): Internal.DirectMethodHandleDesc$Kind[];
        static readonly "INTERFACE_SPECIAL" : Internal.DirectMethodHandleDesc$Kind;
        readonly "refKind" : number;
        static readonly "SETTER" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "SPECIAL" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "STATIC" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "GETTER" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "STATIC_GETTER" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "INTERFACE_VIRTUAL" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "STATIC_SETTER" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "CONSTRUCTOR" : Internal.DirectMethodHandleDesc$Kind;
        readonly "isInterface" : boolean;
        static readonly "INTERFACE_STATIC" : Internal.DirectMethodHandleDesc$Kind;
        static readonly "VIRTUAL" : Internal.DirectMethodHandleDesc$Kind;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DirectMethodHandleDesc$Kind_ = "special" | "interface_static" | "virtual" | "static_setter" | "static" | "getter" | "static_getter" | "interface_virtual" | "constructor" | "setter" | "interface_special" | DirectMethodHandleDesc$Kind;
    /**
    * @javaClass org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout
    */
    interface ArtifactRepositoryLayout {
        pathOf(arg0: Internal.Artifact_): string;
        getId(): string;
        pathOfLocalRepositoryMetadata(arg0: Internal.ArtifactMetadata_, arg1: Internal.ArtifactRepository_): string;
        pathOfRemoteRepositoryMetadata(arg0: Internal.ArtifactMetadata_): string;
    }
    type ArtifactRepositoryLayout_ = ArtifactRepositoryLayout;
    /**
    * @javaClass java.util.stream.IntStream$IntMapMultiConsumer
    */
    interface IntStream$IntMapMultiConsumer {
        accept(arg0: number, arg1: Internal.IntConsumer_): void;
    }
    type IntStream$IntMapMultiConsumer_ = ((arg0: number, arg1: Internal.IntConsumer) => void) | IntStream$IntMapMultiConsumer;
    /**
    * @javaClass java.awt.event.ContainerEvent
    */
    class ContainerEvent extends Internal.ComponentEvent {
        paramString(): string;
        getContainer(): Internal.Container;
        getChild(): Internal.Component;
        static readonly "CONTAINER_LAST" : 301;
        static readonly "COMPONENT_REMOVED" : 301;
        static readonly "CONTAINER_FIRST" : 300;
        static readonly "COMPONENT_ADDED" : 300;
        get container(): Internal.Container;
        get child(): Internal.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContainerEvent_ = ContainerEvent;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardCharTypedEvent$Post
    */
    class ScreenEvent$KeyboardCharTypedEvent$Post extends Internal.ScreenEvent$KeyboardCharTypedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardCharTypedEvent$Post_ = ScreenEvent$KeyboardCharTypedEvent$Post;
    /**
    * @javaClass net.minecraftforge.client.event.DrawSelectionEvent$HighlightBlock
    */
    class DrawSelectionEvent$HighlightBlock extends Internal.DrawSelectionEvent {
        getListenerList(): Internal.ListenerList;
        getTarget(): Internal.BlockHitResult;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get target(): Internal.BlockHitResult;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DrawSelectionEvent$HighlightBlock_ = DrawSelectionEvent$HighlightBlock;
    /**
    * @javaClass java.lang.invoke.MethodHandles$Lookup
    */
    class MethodHandles$Lookup {
        findStaticVarHandle(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.VarHandle;
        hasFullPrivilegeAccess(): boolean;
        findStaticGetter(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.MethodHandle;
        lookupClass(): typeof any;
        defineHiddenClass(arg0: number[], arg1: boolean, ... arg2: any[]): this;
        unreflectSetter(arg0: Internal.Field_): Internal.MethodHandle;
        findVirtual(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.MethodType_): Internal.MethodHandle;
        findConstructor(arg0: Internal.Class_<any>, arg1: Internal.MethodType_): Internal.MethodHandle;
        dropLookupMode(arg0: number): this;
        findStaticSetter(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.MethodHandle;
        bind(arg0: any, arg1: string, arg2: Internal.MethodType_): Internal.MethodHandle;
        findGetter(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.MethodHandle;
        hasPrivateAccess(): boolean;
        unreflectGetter(arg0: Internal.Field_): Internal.MethodHandle;
        accessClass(arg0: Internal.Class_<any>): typeof any;
        findSpecial(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.MethodType_, arg3: Internal.Class_<any>): Internal.MethodHandle;
        in(arg0: Internal.Class_<any>): this;
        defineClass(arg0: number[]): typeof any;
        unreflectConstructor(arg0: Internal.Constructor_<any>): Internal.MethodHandle;
        unreflectVarHandle(arg0: Internal.Field_): Internal.VarHandle;
        findClass(arg0: string): typeof any;
        defineHiddenClassWithClassData(arg0: number[], arg1: any, arg2: boolean, ... arg3: any[]): this;
        unreflectSpecial(arg0: Internal.Method_, arg1: Internal.Class_<any>): Internal.MethodHandle;
        lookupModes(): number;
        findStatic(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.MethodType_): Internal.MethodHandle;
        ensureInitialized(arg0: Internal.Class_<any>): typeof any;
        unreflect(arg0: Internal.Method_): Internal.MethodHandle;
        findVarHandle(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.VarHandle;
        findSetter(arg0: Internal.Class_<any>, arg1: string, arg2: Internal.Class_<any>): Internal.MethodHandle;
        toString(): string;
        previousLookupClass(): typeof any;
        revealDirect(arg0: Internal.MethodHandle_): Internal.MethodHandleInfo;
        static readonly "MODULE" : 16;
        static readonly "PACKAGE" : 8;
        static readonly "PUBLIC" : 1;
        static readonly "ORIGINAL" : 64;
        static readonly "UNCONDITIONAL" : 32;
        static readonly "PROTECTED" : 4;
        static readonly "PRIVATE" : 2;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MethodHandles$Lookup_ = MethodHandles$Lookup;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.Team
    */
    abstract class Team extends Internal.TeamBase {
        msg(player: Internal.ServerPlayer_, message: string): number;
        settings(source: Internal.CommandSourceStack_, key: Internal.TeamProperty_<any>, value: string): number;
        serializeNBT(): Internal.SNBTCompoundTag;
        getOnlineMembers(): Internal.List<Internal.ServerPlayer>;
        isValid(): boolean;
        save(): void;
        sendMessage(from: Internal.UUID_, text: net.minecraft.network.chat.Component_): void;
        deserializeNBT(tag: Internal.CompoundTag_): void;
        getOwner(): Internal.UUID;
        getOnlineRanked(rank: Internal.TeamRank_): Internal.List<Internal.ServerPlayer>;
        denyInvite(source: Internal.CommandSourceStack_): number;
        info(source: Internal.CommandSourceStack_): number;
        readonly "manager" : Internal.TeamManager;
        get valid(): boolean;
        get owner(): Internal.UUID;
        get onlineMembers(): Internal.List<Internal.ServerPlayer>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Team_ = Team;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityEvent$EntityConstructing
    */
    class EntityEvent$EntityConstructing extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityEvent$EntityConstructing_ = EntityEvent$EntityConstructing;
    /**
    * @javaClass java.lang.reflect.Executable
    */
    abstract class Executable extends Internal.AccessibleObject implements Internal.Member, Internal.GenericDeclaration {
        getName(): string;
        getParameterCount(): number;
        isVarArgs(): boolean;
        isSynthetic(): boolean;
        getAnnotatedParameterTypes(): Internal.AnnotatedType[];
        getParameterTypes(): Internal.Class<any>[];
        getGenericExceptionTypes(): Internal.Type[];
        getAnnotatedReceiverType(): Internal.AnnotatedType;
        getDeclaredAnnotations(): Internal.Annotation[];
        getAnnotatedExceptionTypes(): Internal.AnnotatedType[];
        getExceptionTypes(): Internal.Class<any>[];
        getDeclaringClass(): typeof any;
        getGenericParameterTypes(): Internal.Type[];
        getAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        toGenericString(): string;
        getParameters(): any[];
        getTypeParameters(): any[];
        getModifiers(): number;
        getAnnotatedReturnType(): Internal.AnnotatedType;
        getParameterAnnotations(): Internal.Annotation[][];
        get declaredAnnotations(): Internal.Annotation[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterTypes(): Internal.Class<any>[];
        get parameterCount(): number;
        get modifiers(): number;
        get typeParameters(): any[];
        get varArgs(): boolean;
        get declaringClass(): typeof any;
        get synthetic(): boolean;
        get genericParameterTypes(): Internal.Type[];
        get exceptionTypes(): Internal.Class<any>[];
        get name(): string;
        get annotatedReceiverType(): Internal.AnnotatedType;
        get genericExceptionTypes(): Internal.Type[];
        get parameterAnnotations(): Internal.Annotation[][];
        get parameters(): any[];
        get annotatedExceptionTypes(): Internal.AnnotatedType[];
        get annotatedParameterTypes(): Internal.AnnotatedType[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Executable_ = Executable;
    /**
    * @javaClass com.mojang.datafixers.util.Function9
    */
    interface Function9 <T1, T2, T3, T4, T5, T6, T7, T8, T9, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.BiFunction<T8, T9, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function<T9, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function4<T6, T7, T8, T9, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function3<T7, T8, T9, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function6<T4, T5, T6, T7, T8, T9, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function5<T5, T6, T7, T8, T9, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function7<T3, T4, T5, T6, T7, T8, T9, R>>;
        curry(): Internal.Function<T1, Internal.Function8<T2, T3, T4, T5, T6, T7, T8, T9, R>>;
    }
    type Function9_<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9) => R) | Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>;
    /**
    * @javaClass java.util.Date
    */
    class Date implements Internal.Serializable, Internal.Cloneable, Internal.Comparable<Internal.Date> {
        static UTC(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        before(arg0: Internal.Date_): boolean;
        getTime(): number;
        compareTo(arg0: Internal.Date_): number;
        getHours(): number;
        setHours(arg0: number): void;
        setSeconds(arg0: number): void;
        hashCode(): number;
        getDate(): number;
        static from(arg0: Internal.Instant_): this;
        getMonth(): number;
        after(arg0: Internal.Date_): boolean;
        setTime(arg0: number): void;
        setMonth(arg0: number): void;
        setMinutes(arg0: number): void;
        static parse(arg0: string): number;
        setYear(arg0: number): void;
        toInstant(): Internal.Instant;
        getDay(): number;
        getMinutes(): number;
        toGMTString(): string;
        getTimezoneOffset(): number;
        getSeconds(): number;
        getYear(): number;
        equals(arg0: any): boolean;
        clone(): any;
        setDate(arg0: number): void;
        toString(): string;
        toLocaleString(): string;
        get date(): number;
        get hours(): number;
        get seconds(): number;
        get month(): number;
        get timezoneOffset(): number;
        get year(): number;
        get minutes(): number;
        get time(): number;
        get day(): number;
        set date(arg0: number);
        set seconds(arg0: number);
        set hours(arg0: number);
        set month(arg0: number);
        set year(arg0: number);
        set minutes(arg0: number);
        set time(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Date_ = Date;
    /**
    * @javaClass io.netty.channel.ChannelConfig
    */
    interface ChannelConfig {
        setMessageSizeEstimator(arg0: Internal.MessageSizeEstimator_): this;
        setWriteBufferLowWaterMark(arg0: number): this;
        getWriteBufferLowWaterMark(): number;
        getMessageSizeEstimator(): Internal.MessageSizeEstimator;
        setRecvByteBufAllocator(arg0: Internal.RecvByteBufAllocator_): this;
        getOption<T>(arg0: Internal.ChannelOption_<T>): T;
        isAutoClose(): boolean;
        getRecvByteBufAllocator<T>(): T;
        getAllocator(): Internal.ByteBufAllocator;
        setAllocator(arg0: Internal.ByteBufAllocator_): this;
        isAutoRead(): boolean;
        setOptions(arg0: Internal.Map_<Internal.ChannelOption_<any>, any>): boolean;
        setConnectTimeoutMillis(arg0: number): this;
        setWriteBufferWaterMark(arg0: Internal.WriteBufferWaterMark_): this;
        setOption<T>(arg0: Internal.ChannelOption_<T>, arg1: T): boolean;
        getConnectTimeoutMillis(): number;
        setWriteSpinCount(arg0: number): this;
        setWriteBufferHighWaterMark(arg0: number): this;
        getMaxMessagesPerRead(): number;
        getWriteBufferHighWaterMark(): number;
        setAutoRead(arg0: boolean): this;
        getWriteSpinCount(): number;
        setMaxMessagesPerRead(arg0: number): this;
        getOptions(): Internal.Map<Internal.ChannelOption<any>, any>;
        getWriteBufferWaterMark(): Internal.WriteBufferWaterMark;
        setAutoClose(arg0: boolean): this;
    }
    type ChannelConfig_ = ChannelConfig;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseReleasedEvent$Post
    */
    class ScreenEvent$MouseReleasedEvent$Post extends Internal.ScreenEvent$MouseReleasedEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        wasHandled(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseReleasedEvent$Post_ = ScreenEvent$MouseReleasedEvent$Post;
    /**
    * @javaClass net.minecraft.client.gui.screens.inventory.tooltip.ClientTooltipComponent
    */
    interface ClientTooltipComponent {
    }
    type ClientTooltipComponent_ = ClientTooltipComponent;
    /**
    * @javaClass net.minecraft.world.entity.monster.Monster
    */
    abstract class Monster extends Internal.PathfinderMob implements Internal.Enemy {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Monster_ = Monster;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.ChangeListener
    */
    interface ChangeListener <T> {
        onChanged(arg0: T): void;
    }
    type ChangeListener_<T> = ((arg0: T) => void) | ChangeListener<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2CharFunction
    */
    interface Float2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2CharFunction;
    }
    type Float2CharFunction_ = ((arg0: number) => string) | Float2CharFunction;
    /**
    * @javaClass java.awt.PageAttributes$OrientationRequestedType
    */
    class PageAttributes$OrientationRequestedType extends Internal.AttributeValue {
        static readonly "LANDSCAPE" : Internal.PageAttributes$OrientationRequestedType;
        static readonly "PORTRAIT" : Internal.PageAttributes$OrientationRequestedType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes$OrientationRequestedType_ = PageAttributes$OrientationRequestedType;
    /**
    * @javaClass java.math.MathContext
    */
    class MathContext implements Internal.Serializable {
        getRoundingMode(): Internal.RoundingMode;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        getPrecision(): number;
        static readonly "DECIMAL128" : Internal.MathContext;
        static readonly "DECIMAL64" : Internal.MathContext;
        static readonly "DECIMAL32" : Internal.MathContext;
        static readonly "UNLIMITED" : Internal.MathContext;
        get roundingMode(): Internal.RoundingMode;
        get precision(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MathContext_ = MathContext;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.PrivacyMode
    */
    class PrivacyMode extends Internal.Enum<Internal.PrivacyMode> implements Internal.StringRepresentable {
        static valueOf(name: string): this;
        static values(): Internal.PrivacyMode[];
        static readonly "NAME_MAP" : Internal.NameMap<Internal.PrivacyMode>;
        readonly "name" : string;
        static readonly "PUBLIC" : Internal.PrivacyMode;
        static readonly "VALUES" : Internal.PrivacyMode[];
        static readonly "ALLIES" : Internal.PrivacyMode;
        static readonly "PRIVATE" : Internal.PrivacyMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PrivacyMode_ = "private" | "public" | "allies" | PrivacyMode;
    /**
    * @javaClass io.netty.util.AbstractConstant
    */
    abstract class AbstractConstant <T> implements Internal.Constant<T> {
        hashCode(): number;
        equals(arg0: any): boolean;
        name(): string;
        toString(): string;
        id(): number;
        compareTo(arg0: T): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractConstant_<T> = AbstractConstant<T>;
    /**
    * @javaClass net.minecraft.client.renderer.block.model.BakedQuad
    */
    class BakedQuad implements Internal.IVertexProducer, Internal.BakedQuadAccessor {
        pipe(arg0: Internal.IVertexConsumer_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BakedQuad_ = BakedQuad;
    /**
    * @javaClass net.minecraft.world.level.EntityGetter
    */
    interface EntityGetter {
    }
    type EntityGetter_ = EntityGetter;
    /**
    * @javaClass java.util.Map
    */
    interface Map <K, V> {
        getOrDefault(arg0: any, arg1: V): V;
        ofEntries<K, V>(... arg0: Internal.Map$Entry_<K, V>[]): Internal.Map<K, V>;
        computeIfAbsent(arg0: K, arg1: Internal.Function_<K, V>): V;
        values(): Internal.Collection<V>;
        replace(arg0: K, arg1: V): V;
        replace(arg0: K, arg1: V, arg2: V): boolean;
        replaceAll(arg0: Internal.BiFunction_<K, V, V>): void;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: any, arg1: any): boolean;
        compute(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        hashCode(): number;
        putAll(arg0: Internal.Map_<K, V>): void;
        merge(arg0: K, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.Map<K, V>;
        of<K, V>(): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V, arg18: K, arg19: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V, arg16: K, arg17: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V, arg14: K, arg15: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V, arg12: K, arg13: V): Internal.Map<K, V>;
        of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V, arg10: K, arg11: V): Internal.Map<K, V>;
        get(arg0: any): V;
        keySet(): Internal.Set<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        isEmpty(): boolean;
        clear(): void;
        copyOf<K, V>(arg0: Internal.Map_<K, V>): Internal.Map<K, V>;
        entry<K, V>(arg0: K, arg1: V): Internal.Map$Entry<K, V>;
        computeIfPresent(arg0: K, arg1: Internal.BiFunction_<K, V, V>): V;
        size(): number;
        equals(arg0: any): boolean;
        putIfAbsent(arg0: K, arg1: V): V;
    }
    /**
    */
    type Map_<K, V> = {[key in K]: V} | Map<K, V>;
    /**
    * @javaClass dev.latvian.mods.kubejs.fluid.FluidStackJS
    */
    abstract class FluidStackJS implements Internal.WrappedJS, Internal.Copyable {
        getNbt(): Internal.CompoundTag;
        getChance(): number;
        getTags(): Internal.Collection<ResourceLocation>;
        getId(): string;
        toNBT(): Internal.CompoundTag;
        setChance(c: number): void;
        hashCode(): number;
        static of(o: any, amount: number, nbt: Internal.CompoundTag_): this;
        static of(o: any): this;
        withAmount(amount: number): this;
        withChance(c: number): this;
        copy(): this;
        setAmount(arg0: number): void;
        withNBT(nbt: Internal.CompoundTag_): this;
        getAmount(): number;
        hasTag(tag: ResourceLocation_): boolean;
        isEmpty(): boolean;
        hasChance(): boolean;
        strongEquals(o: any): boolean;
        getFluidStack(): dev.architectury.fluid.FluidStack;
        toJson(): Internal.JsonObject;
        equals(o: any): boolean;
        getFluid(): Internal.Fluid;
        static fromJson(e: Internal.JsonElement_): this;
        toString(): string;
        removeChance(): void;
        setNbt(arg0: Internal.CompoundTag_): void;
        get nbt(): Internal.CompoundTag;
        get amount(): number;
        get chance(): number;
        get fluidStack(): dev.architectury.fluid.FluidStack;
        get fluid(): Internal.Fluid;
        get id(): string;
        get tags(): Internal.Collection<ResourceLocation>;
        get empty(): boolean;
        set nbt(arg0: Internal.CompoundTag_);
        set amount(arg0: number);
        set chance(c: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type FluidStackJS_ = dev.architectury.fluid.FluidStack_ | Internal.Fluid_ | Internal.JsonObject_ | {amount?: number, fluid: ResourceLocation_, nbt?: Internal.CompoundTag_} | "" | "-" | "empty" | "minecraft:empty" | `${Special.Fluid} ${number}` | FluidStackJS;
    /**
    * @javaClass java.nio.file.attribute.UserPrincipal
    */
    interface UserPrincipal extends Internal.Principal {
    }
    type UserPrincipal_ = UserPrincipal;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.AsKJS
    */
    interface AsKJS <T> {
        asKJS(): T;
        wrapSafe<T>(as: Internal.AsKJS_<T>): T;
    }
    type AsKJS_<T> = (() => T) | AsKJS<T>;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardCharTypedEvent
    */
    class ScreenEvent$KeyboardCharTypedEvent extends Internal.ScreenEvent {
        getListenerList(): Internal.ListenerList;
        getCodePoint(): string;
        getModifiers(): number;
        get listenerList(): Internal.ListenerList;
        get modifiers(): number;
        get codePoint(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardCharTypedEvent_ = ScreenEvent$KeyboardCharTypedEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.util.Possible
    */
    class Possible <T> extends Internal.Record {
        cast<C>(type: Internal.Class_<C>): Internal.Possible<C>;
        isSet(): boolean;
        hashCode(): number;
        static of<T>(o: T): Internal.Possible<T>;
        equals(o: any): boolean;
        isEmpty(): boolean;
        static absent<T>(): Internal.Possible<T>;
        toString(): string;
        value(): any;
        static readonly "NULL" : Internal.Possible<any>;
        static readonly "EMPTY" : Internal.Possible<any>;
        get set(): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Possible_<T> = Possible<T>;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$ServerTickEvent
    */
    class TickEvent$ServerTickEvent extends Internal.TickEvent {
        getListenerList(): Internal.ListenerList;
        haveTime(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$ServerTickEvent_ = TickEvent$ServerTickEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.ItemApplicationRecipeJS
    */
    class ItemApplicationRecipeJS extends Internal.ProcessingRecipeJS {
        keepHeldItem(keep: boolean): this;
        keepHeldItem(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemApplicationRecipeJS_ = ItemApplicationRecipeJS;
    /**
    * @javaClass java.lang.Enum
    */
    abstract class Enum <E> implements Internal.Constable, Internal.Comparable<E>, Internal.Serializable {
        getDeclaringClass(): typeof E;
        static valueOf<T>(arg0: Internal.Class_<T>, arg1: string): T;
        hashCode(): number;
        equals(arg0: any): boolean;
        name(): string;
        toString(): string;
        compareTo(arg0: E): number;
        describeConstable(): Internal.Optional<Internal.Enum$EnumDesc<E>>;
        ordinal(): number;
        get declaringClass(): typeof E;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Enum_<E> = Enum<E>;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.EntityKJS
    */
    interface EntityKJS extends Internal.AsKJS<Internal.EntityJS> {
        getPersistentDataKJS(): Internal.CompoundTag;
        asKJS(): Internal.EntityJS;
    }
    type EntityKJS_ = EntityKJS;
    /**
    * @javaClass com.mojang.serialization.RecordBuilder
    */
    interface RecordBuilder <T> {
        withErrorsFrom(arg0: Internal.DataResult_<any>): Internal.RecordBuilder<T>;
        add(arg0: string, arg1: Internal.DataResult_<T>): Internal.RecordBuilder<T>;
        add(arg0: string, arg1: T): Internal.RecordBuilder<T>;
        add(arg0: Internal.DataResult_<T>, arg1: Internal.DataResult_<T>): Internal.RecordBuilder<T>;
        add<E>(arg0: string, arg1: E, arg2: Internal.Encoder_<E>): Internal.RecordBuilder<T>;
        add(arg0: T, arg1: T): Internal.RecordBuilder<T>;
        add(arg0: T, arg1: Internal.DataResult_<T>): Internal.RecordBuilder<T>;
        mapError(arg0: Internal.UnaryOperator_<string>): Internal.RecordBuilder<T>;
        ops(): Internal.DynamicOps<T>;
        setLifecycle(arg0: Internal.Lifecycle_): Internal.RecordBuilder<T>;
        build(arg0: T): Internal.DataResult<T>;
        build(arg0: Internal.DataResult_<T>): Internal.DataResult<T>;
    }
    type RecordBuilder_<T> = RecordBuilder<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.ingredientaction.IngredientActionFilter
    */
    class IngredientActionFilter {
        checkFilter(index: number, stack: Internal.ItemStack_): boolean;
        static filterOf(o: any): this;
        copyFrom(filter: Internal.IngredientActionFilter_): void;
        "filterIndex" : number;
        "filterIngredient" : Internal.IngredientJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type IngredientActionFilter_ = number | Internal.IngredientJS_ | {item: Internal.IngredientJS_, index?: number} | IngredientActionFilter;
    /**
    * @javaClass java.awt.AWTKeyStroke
    */
    class AWTKeyStroke implements Internal.Serializable {
        getKeyChar(): string;
        hashCode(): number;
        isOnKeyRelease(): boolean;
        equals(arg0: any): boolean;
        static getAWTKeyStrokeForEvent(arg0: Internal.KeyEvent_): this;
        toString(): string;
        getModifiers(): number;
        static getAWTKeyStroke(arg0: string): this;
        static getAWTKeyStroke(arg0: number, arg1: number): this;
        static getAWTKeyStroke(arg0: number, arg1: number, arg2: boolean): this;
        static getAWTKeyStroke(arg0: string, arg1: number): this;
        getKeyCode(): number;
        getKeyEventType(): number;
        get onKeyRelease(): boolean;
        get keyCode(): number;
        get keyEventType(): number;
        get keyChar(): string;
        get modifiers(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AWTKeyStroke_ = AWTKeyStroke;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ReferenceFunction
    */
    interface Int2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Int2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Int2ReferenceFunction_<V> = ((arg0: number) => V) | Int2ReferenceFunction<V>;
    /**
    * @javaClass dev.architectury.registry.registries.RegistrarBuilder
    */
    interface RegistrarBuilder <T> {
        saveToDisc(): Internal.RegistrarBuilder<T>;
        build(): Internal.Registrar<T>;
        syncToClients(): Internal.RegistrarBuilder<T>;
        option(arg0: Internal.RegistrarOption_): Internal.RegistrarBuilder<T>;
    }
    type RegistrarBuilder_<T> = RegistrarBuilder<T>;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$RenderTickEvent
    */
    class TickEvent$RenderTickEvent extends Internal.TickEvent {
        getListenerList(): Internal.ListenerList;
        readonly "renderTickTime" : number;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$RenderTickEvent_ = TickEvent$RenderTickEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.living.PotionEvent
    */
    class PotionEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getPotionEffect(): Internal.MobEffectInstance;
        get potionEffect(): Internal.MobEffectInstance;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionEvent_ = PotionEvent;
    /**
    * @javaClass net.minecraft.world.inventory.StackedContentsCompatible
    */
    interface StackedContentsCompatible {
    }
    type StackedContentsCompatible_ = StackedContentsCompatible;
    /**
    * @javaClass net.minecraftforge.registries.ForgeRegistryEntry$UncheckedRegistryEntry
    */
    abstract class ForgeRegistryEntry$UncheckedRegistryEntry <V> extends Internal.ForgeRegistryEntry<V> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForgeRegistryEntry$UncheckedRegistryEntry_<V> = ForgeRegistryEntry$UncheckedRegistryEntry<V>;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedEntityTypeExtension
    */
    interface InjectedEntityTypeExtension extends Internal.InjectedRegistryEntryExtension<Internal.EntityType<any>> {
        arch$holder(): Internal.Holder<Internal.EntityType<any>>;
    }
    type InjectedEntityTypeExtension_ = InjectedEntityTypeExtension;
    /**
    * @javaClass net.minecraftforge.client.event.InputEvent$MouseScrollEvent
    */
    class InputEvent$MouseScrollEvent extends net.minecraftforge.client.event.InputEvent {
        getMouseY(): number;
        isMiddleDown(): boolean;
        getListenerList(): Internal.ListenerList;
        getMouseX(): number;
        getScrollDelta(): number;
        isRightDown(): boolean;
        isCancelable(): boolean;
        isLeftDown(): boolean;
        get mouseX(): number;
        get middleDown(): boolean;
        get scrollDelta(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get mouseY(): number;
        get leftDown(): boolean;
        get rightDown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent$MouseScrollEvent_ = InputEvent$MouseScrollEvent;
    /**
    * @javaClass java.text.AttributedCharacterIterator
    */
    interface AttributedCharacterIterator extends Internal.CharacterIterator {
        getAttribute(arg0: Internal.AttributedCharacterIterator$Attribute_): any;
        getAttributes(): Internal.Map<Internal.AttributedCharacterIterator$Attribute, any>;
        getRunLimit(): number;
        getRunLimit(arg0: Internal.Set_<Internal.AttributedCharacterIterator$Attribute_>): number;
        getRunLimit(arg0: Internal.AttributedCharacterIterator$Attribute_): number;
        getRunStart(arg0: Internal.AttributedCharacterIterator$Attribute_): number;
        getRunStart(arg0: Internal.Set_<Internal.AttributedCharacterIterator$Attribute_>): number;
        getRunStart(): number;
        getAllAttributeKeys(): Internal.Set<Internal.AttributedCharacterIterator$Attribute>;
    }
    type AttributedCharacterIterator_ = AttributedCharacterIterator;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatCollection
    */
    interface FloatCollection extends Internal.Collection<number>, Internal.FloatIterable {
        add(arg0: number): boolean;
        spliterator(): Internal.FloatSpliterator;
        containsAll(arg0: Internal.FloatCollection_): boolean;
        doubleSpliterator(): Internal.DoubleSpliterator;
        toFloatArray(arg0: number[]): number[];
        toFloatArray(): number[];
        doubleStream(): Internal.DoubleStream;
        remove(arg0: any): boolean;
        removeIf(arg0: Internal.FloatPredicate_): boolean;
        removeIf(arg0: Internal.Predicate_<number>): boolean;
        removeIf(arg0: Internal.DoublePredicate_): boolean;
        doubleParallelStream(): Internal.DoubleStream;
        removeAll(arg0: Internal.FloatCollection_): boolean;
        contains(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.FloatIterator;
        addAll(arg0: Internal.FloatCollection_): boolean;
        stream(): Internal.Stream<number>;
        toArray(arg0: number[]): number[];
        parallelStream(): Internal.Stream<number>;
        rem(arg0: number): boolean;
        doubleIterator(): Internal.DoubleIterator;
        retainAll(arg0: Internal.FloatCollection_): boolean;
    }
    type FloatCollection_ = FloatCollection;
    /**
    * @javaClass net.minecraft.world.level.gameevent.GameEvent
    */
    class GameEvent {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GameEvent_ = Special.GameEvent | GameEvent;
    /**
    * @javaClass net.minecraft.util.random.WeightedEntry
    */
    interface WeightedEntry {
    }
    type WeightedEntry_ = WeightedEntry;
    /**
    * @javaClass java.lang.reflect.AnnotatedType
    */
    interface AnnotatedType extends Internal.AnnotatedElement {
        getAnnotatedOwnerType(): this;
        getType(): Internal.Type;
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        getAnnotations(): Internal.Annotation[];
        getDeclaredAnnotations(): Internal.Annotation[];
    }
    type AnnotatedType_ = AnnotatedType;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.EnchantmentBuilder
    */
    class EnchantmentBuilder extends Internal.BuilderBase<Internal.Enchantment> {
        maxLevel(i: number): this;
        damageBonus(i: Internal.EnchantmentBuilder$DamageBonusFunction_): this;
        armorFeet(): this;
        veryRare(): this;
        undiscoverable(): this;
        postAttack(i: Internal.EnchantmentBuilder$PostFunction_): this;
        crossbow(): this;
        vanishable(): this;
        armorLegs(): this;
        bow(): this;
        weapon(): this;
        uncommon(): this;
        canEnchant(i: Internal.Object2BooleanFunction_<Internal.ItemStackJS_>): this;
        postHurt(i: Internal.EnchantmentBuilder$PostFunction_): this;
        rare(): this;
        maxCost(i: Internal.Int2IntFunction_): this;
        minCost(i: Internal.Int2IntFunction_): this;
        treasureOnly(): this;
        wearable(): this;
        trident(): this;
        damageProtection(i: Internal.EnchantmentBuilder$DamageProtectionFunction_): this;
        armorChest(): this;
        createObject(): Internal.Enchantment;
        minLevel(i: number): this;
        armorHead(): this;
        slots(s: EquipmentSlot_[]): this;
        armor(): this;
        fishingRod(): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Enchantment>;
        curse(): this;
        checkCompatibility(i: Internal.Object2BooleanFunction_<ResourceLocation_>): this;
        breakable(): this;
        category(c: Internal.EnchantmentCategory_): this;
        rarity(r: Internal.Enchantment$Rarity_): this;
        untradeable(): this;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Enchantment>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
        /**
        * Set the callback when the enchanted item hits an entity.
        *
        * WARN: This callback will ALWAYS be called TWICE, for both main hand and off hand.
        * This is an annoying code logic from Vanilla Minecraft. There's no way KubeJS can
        * change this.
        */
        doPostAttack(i: Internal.EnchantmentBuilder$PostFunction_): Internal.EnchantmentBuilder_;
    }
    /**
    */
    type EnchantmentBuilder_ = EnchantmentBuilder;
    /**
    * @javaClass com.google.common.collect.ImmutableMultiset
    */
    abstract class ImmutableMultiset <E> extends Internal.ImmutableMultisetGwtSerializationDependencies<E> implements Internal.Multiset<E> {
        add(arg0: E, arg1: number): number;
        static toImmutableMultiset<E>(): Internal.Collector<E, any, Internal.ImmutableMultiset<E>>;
        static toImmutableMultiset<T, E>(arg0: Internal.Function_<T, E>, arg1: Internal.ToIntFunction_<T>): Internal.Collector<T, any, Internal.ImmutableMultiset<E>>;
        entrySet(): Internal.ImmutableSet<Internal.Multiset$Entry<E>>;
        static copyOf<E>(arg0: Internal.Iterable_<E>): Internal.ImmutableMultiset<E>;
        static copyOf<E>(arg0: E[]): Internal.ImmutableMultiset<E>;
        static copyOf<E>(arg0: Internal.Iterator_<E>): Internal.ImmutableMultiset<E>;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: any, arg1: number): number;
        contains(arg0: any): boolean;
        iterator(): Internal.UnmodifiableIterator<E>;
        elementSet(): Internal.ImmutableSet<E>;
        hashCode(): number;
        static of<E>(): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, ... arg6: E[]): Internal.ImmutableMultiset<E>;
        static of<E>(arg0: E, arg1: E): Internal.ImmutableMultiset<E>;
        equals(arg0: any): boolean;
        static builder<E>(): Internal.ImmutableMultiset$Builder<E>;
        toString(): string;
        setCount(arg0: E, arg1: number): number;
        setCount(arg0: E, arg1: number, arg2: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMultiset_<E> = ImmutableMultiset<E>;
    /**
    * @javaClass java.awt.datatransfer.FlavorEvent
    */
    class FlavorEvent extends Internal.EventObject {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FlavorEvent_ = FlavorEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.ObjectIterable
    */
    interface ObjectIterable <K> extends Internal.Iterable<K> {
        iterator(): Internal.ObjectIterator<K>;
        spliterator(): Internal.ObjectSpliterator<K>;
    }
    type ObjectIterable_<K> = (() => Internal.ObjectIterator<K>) | ObjectIterable<K>;
    /**
    * @javaClass net.minecraftforge.server.permission.nodes.PermissionType
    */
    class PermissionType <T> {
        hashCode(): number;
        equals(arg0: any): boolean;
        typeToken(): typeof T;
        typeName(): string;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionType_<T> = PermissionType<T>;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgePlayer
    */
    interface IForgePlayer {
        getReachDistance(): number;
        isCloseEnough(arg0: Internal.Entity_, arg1: number): boolean;
        getAttackRange(): number;
        canHit(arg0: Internal.Entity_, arg1: number): boolean;
        canInteractWith(arg0: BlockPos_, arg1: number): boolean;
        canInteractWith(arg0: Internal.Entity_, arg1: number): boolean;
    }
    type IForgePlayer_ = IForgePlayer;
    /**
    * @javaClass com.mojang.brigadier.exceptions.SimpleCommandExceptionType
    */
    class SimpleCommandExceptionType implements Internal.CommandExceptionType {
        createWithContext(arg0: Internal.ImmutableStringReader_): Internal.CommandSyntaxException;
        create(): Internal.CommandSyntaxException;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimpleCommandExceptionType_ = SimpleCommandExceptionType;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.ProcessingRecipeJS
    */
    class ProcessingRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        superheated(): this;
        heatRequirement(req: string): this;
        create(args: Internal.ListJS_): void;
        heated(): this;
        processingTime(t: number): this;
        deserialize(): void;
        readonly "outputFluids" : Internal.List<Internal.FluidStackJS>;
        readonly "inputFluids" : Internal.List<Internal.FluidIngredient>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ProcessingRecipeJS_ = ProcessingRecipeJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2ShortFunction
    */
    interface Reference2ShortFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): Internal.Reference2ShortFunction<K>;
        removeShort(arg0: any): number;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        getShort(arg0: any): number;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2ShortFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2ShortFunction;
    }
    type Reference2ShortFunction_<K> = ((arg0: any) => number) | Reference2ShortFunction<K>;
    /**
    * @javaClass net.minecraft.world.level.Explosion$BlockInteraction
    */
    class Explosion$BlockInteraction extends Internal.Enum<Internal.Explosion$BlockInteraction> {
        static valueOf(arg0: string): this;
        static values(): Internal.Explosion$BlockInteraction[];
        static readonly "DESTROY" : Internal.Explosion$BlockInteraction;
        static readonly "BREAK" : Internal.Explosion$BlockInteraction;
        static readonly "NONE" : Internal.Explosion$BlockInteraction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Explosion$BlockInteraction_ = "break" | "destroy" | "none" | Explosion$BlockInteraction;
    /**
    * @javaClass net.minecraft.server.packs.resources.SimplePreparableReloadListener
    */
    abstract class SimplePreparableReloadListener <T> implements Internal.PreparableReloadListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimplePreparableReloadListener_<T> = SimplePreparableReloadListener<T>;
    /**
    * @javaClass java.util.concurrent.CompletableFuture
    */
    class CompletableFuture <T> implements Internal.Future<T>, Internal.CompletionStage<T> {
        cancel(arg0: boolean): boolean;
        obtrudeValue(arg0: T): void;
        exceptionallyAsync(arg0: Internal.Function_<Internal.Throwable_, T>, arg1: Internal.Executor_): Internal.CompletableFuture<T>;
        exceptionallyAsync(arg0: Internal.Function_<Internal.Throwable_, T>): Internal.CompletableFuture<T>;
        static failedStage<U>(arg0: Internal.Throwable_): Internal.CompletionStage<U>;
        runAfterBothAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_, arg2: Internal.Executor_): Internal.CompletableFuture<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletableFuture<void>;
        obtrudeException(arg0: Internal.Throwable_): void;
        thenAcceptBoth<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>): Internal.CompletableFuture<void>;
        exceptionallyCompose(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>): Internal.CompletableFuture<T>;
        join(): T;
        isCompletedExceptionally(): boolean;
        applyToEither<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>): Internal.CompletableFuture<U>;
        completeAsync(arg0: Internal.Supplier_<T>, arg1: Internal.Executor_): Internal.CompletableFuture<T>;
        completeAsync(arg0: Internal.Supplier_<T>): Internal.CompletableFuture<T>;
        thenApply<U>(arg0: Internal.Function_<T, U>): Internal.CompletableFuture<U>;
        thenRun(arg0: Internal.Runnable_): Internal.CompletableFuture<void>;
        orTimeout(arg0: number, arg1: Internal.TimeUnit_): Internal.CompletableFuture<T>;
        getNow(arg0: T): T;
        exceptionally(arg0: Internal.Function_<Internal.Throwable_, T>): Internal.CompletableFuture<T>;
        handle<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>): Internal.CompletableFuture<U>;
        thenCompose<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>): Internal.CompletableFuture<U>;
        static failedFuture<U>(arg0: Internal.Throwable_): Internal.CompletableFuture<U>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>): Internal.CompletableFuture<V>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>, arg2: Internal.Executor_): Internal.CompletableFuture<V>;
        static completedFuture<U>(arg0: U): Internal.CompletableFuture<U>;
        getNumberOfDependents(): number;
        whenCompleteAsync(arg0: Internal.BiConsumer_<T, Internal.Throwable_>, arg1: Internal.Executor_): Internal.CompletableFuture<T>;
        whenCompleteAsync(arg0: Internal.BiConsumer_<T, Internal.Throwable_>): Internal.CompletableFuture<T>;
        toCompletableFuture(): Internal.CompletableFuture<T>;
        thenApplyAsync<U>(arg0: Internal.Function_<T, U>, arg1: Internal.Executor_): Internal.CompletableFuture<U>;
        thenApplyAsync<U>(arg0: Internal.Function_<T, U>): Internal.CompletableFuture<U>;
        thenAcceptAsync(arg0: Internal.Consumer_<T>): Internal.CompletableFuture<void>;
        thenAcceptAsync(arg0: Internal.Consumer_<T>, arg1: Internal.Executor_): Internal.CompletableFuture<void>;
        static runAsync(arg0: Internal.Runnable_): Internal.CompletableFuture<void>;
        static runAsync(arg0: Internal.Runnable_, arg1: Internal.Executor_): Internal.CompletableFuture<void>;
        thenRunAsync(arg0: Internal.Runnable_): Internal.CompletableFuture<void>;
        thenRunAsync(arg0: Internal.Runnable_, arg1: Internal.Executor_): Internal.CompletableFuture<void>;
        static allOf(... arg0: Internal.CompletableFuture_<any>[]): Internal.CompletableFuture<void>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>): Internal.CompletableFuture<U>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>, arg2: Internal.Executor_): Internal.CompletableFuture<U>;
        newIncompleteFuture<U>(): Internal.CompletableFuture<U>;
        acceptEitherAsync(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>): Internal.CompletableFuture<void>;
        acceptEitherAsync(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>, arg2: Internal.Executor_): Internal.CompletableFuture<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_, arg2: Internal.Executor_): Internal.CompletableFuture<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletableFuture<void>;
        acceptEither(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>): Internal.CompletableFuture<void>;
        get(arg0: number, arg1: Internal.TimeUnit_): T;
        get(): T;
        copy(): Internal.CompletableFuture<T>;
        runAfterEither(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletableFuture<void>;
        thenComposeAsync<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>, arg1: Internal.Executor_): Internal.CompletableFuture<U>;
        thenComposeAsync<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>): Internal.CompletableFuture<U>;
        thenAccept(arg0: Internal.Consumer_<T>): Internal.CompletableFuture<void>;
        isCancelled(): boolean;
        runAfterBoth(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletableFuture<void>;
        static anyOf(... arg0: Internal.CompletableFuture_<any>[]): Internal.CompletableFuture<any>;
        defaultExecutor(): Internal.Executor;
        completeOnTimeout(arg0: T, arg1: number, arg2: Internal.TimeUnit_): Internal.CompletableFuture<T>;
        handleAsync<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>, arg1: Internal.Executor_): Internal.CompletableFuture<U>;
        handleAsync<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>): Internal.CompletableFuture<U>;
        static supplyAsync<U>(arg0: Internal.Supplier_<U>): Internal.CompletableFuture<U>;
        static supplyAsync<U>(arg0: Internal.Supplier_<U>, arg1: Internal.Executor_): Internal.CompletableFuture<U>;
        completeExceptionally(arg0: Internal.Throwable_): boolean;
        isDone(): boolean;
        whenComplete(arg0: Internal.BiConsumer_<T, Internal.Throwable_>): Internal.CompletableFuture<T>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>): Internal.CompletableFuture<void>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>, arg2: Internal.Executor_): Internal.CompletableFuture<void>;
        static delayedExecutor(arg0: number, arg1: Internal.TimeUnit_, arg2: Internal.Executor_): Internal.Executor;
        static delayedExecutor(arg0: number, arg1: Internal.TimeUnit_): Internal.Executor;
        exceptionallyComposeAsync(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>): Internal.CompletableFuture<T>;
        exceptionallyComposeAsync(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>, arg1: Internal.Executor_): Internal.CompletableFuture<T>;
        thenCombine<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>): Internal.CompletableFuture<V>;
        toString(): string;
        minimalCompletionStage(): Internal.CompletionStage<T>;
        complete(arg0: T): boolean;
        static completedStage<U>(arg0: U): Internal.CompletionStage<U>;
        get numberOfDependents(): number;
        get cancelled(): boolean;
        get completedExceptionally(): boolean;
        get done(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CompletableFuture_<T> = CompletableFuture<T>;
    /**
    * @javaClass net.minecraftforge.client.event.ClientPlayerNetworkEvent$LoggedInEvent
    */
    class ClientPlayerNetworkEvent$LoggedInEvent extends Internal.ClientPlayerNetworkEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientPlayerNetworkEvent$LoggedInEvent_ = ClientPlayerNetworkEvent$LoggedInEvent;
    /**
    * @javaClass org.apache.maven.artifact.handler.ArtifactHandler
    */
    interface ArtifactHandler {
        isIncludesDependencies(): boolean;
        getLanguage(): string;
        getExtension(): string;
        isAddedToClasspath(): boolean;
        getDirectory(): string;
        getPackaging(): string;
        getClassifier(): string;
    }
    type ArtifactHandler_ = ArtifactHandler;
    /**
    * @javaClass com.electronwill.nightconfig.core.io.ParsingMode
    */
    class ParsingMode extends Internal.Enum<Internal.ParsingMode> {
        static valueOf(arg0: string): this;
        prepareParsing(arg0: Internal.Config_): void;
        static values(): Internal.ParsingMode[];
        put(arg0: Internal.Map_<string, any>, arg1: string, arg2: any): any;
        put(arg0: Internal.Config_, arg1: string, arg2: any): any;
        put(arg0: Internal.Config_, arg1: Internal.List_<string>, arg2: any): any;
        static readonly "ADD" : Internal.ParsingMode;
        static readonly "MERGE" : Internal.ParsingMode;
        static readonly "REPLACE" : Internal.ParsingMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParsingMode_ = "add" | "merge" | "replace" | ParsingMode;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeEntity
    */
    interface IForgeEntity extends Internal.ICapabilitySerializable<Internal.CompoundTag> {
        shouldRiderSit(): boolean;
        getPickedResult(arg0: Internal.HitResult_): Internal.ItemStack;
        canUpdate(arg0: boolean): void;
        canUpdate(): boolean;
        captureDrops(arg0: Internal.Collection_<Internal.ItemEntity_>): Internal.Collection<Internal.ItemEntity>;
        captureDrops(): Internal.Collection<Internal.ItemEntity>;
        onRemovedFromWorld(): void;
        getStepHeight(): number;
        isMultipartEntity(): boolean;
        canBeRiddenInWater(arg0: Internal.Entity_): boolean;
        deserializeNBT(arg0: Internal.CompoundTag_): void;
        getPersistentData(): Internal.CompoundTag;
        canRiderInteract(): boolean;
        serializeNBT(): Internal.CompoundTag;
        onAddedToWorld(): void;
        canTrample(arg0: Internal.BlockState_, arg1: BlockPos_, arg2: number): boolean;
        revive(): void;
        isAddedToWorld(): boolean;
        getClassification(arg0: boolean): Internal.MobCategory;
        getParts(): Internal.PartEntity<any>[];
    }
    type IForgeEntity_ = IForgeEntity;
    /**
    * @javaClass io.netty.channel.ChannelOption
    */
    class ChannelOption <T> extends Internal.AbstractConstant<Internal.ChannelOption<T>> {
        static valueOf<T>(arg0: string): Internal.ChannelOption<T>;
        static valueOf<T>(arg0: Internal.Class_<any>, arg1: string): Internal.ChannelOption<T>;
        static exists(arg0: string): boolean;
        static newInstance<T>(arg0: string): Internal.ChannelOption<T>;
        validate(arg0: T): void;
        static readonly "WRITE_BUFFER_HIGH_WATER_MARK" : Internal.ChannelOption<number>;
        static readonly "WRITE_BUFFER_LOW_WATER_MARK" : Internal.ChannelOption<number>;
        static readonly "DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION" : Internal.ChannelOption<boolean>;
        static readonly "IP_TOS" : Internal.ChannelOption<number>;
        static readonly "SINGLE_EVENTEXECUTOR_PER_GROUP" : Internal.ChannelOption<boolean>;
        static readonly "SO_SNDBUF" : Internal.ChannelOption<number>;
        static readonly "IP_MULTICAST_IF" : Internal.ChannelOption<Internal.NetworkInterface>;
        static readonly "WRITE_BUFFER_WATER_MARK" : Internal.ChannelOption<Internal.WriteBufferWaterMark>;
        static readonly "TCP_NODELAY" : Internal.ChannelOption<boolean>;
        static readonly "TCP_FASTOPEN" : Internal.ChannelOption<number>;
        static readonly "SO_LINGER" : Internal.ChannelOption<number>;
        static readonly "SO_RCVBUF" : Internal.ChannelOption<number>;
        static readonly "SO_KEEPALIVE" : Internal.ChannelOption<boolean>;
        static readonly "ALLOCATOR" : Internal.ChannelOption<Internal.ByteBufAllocator>;
        static readonly "IP_MULTICAST_ADDR" : Internal.ChannelOption<Internal.InetAddress>;
        static readonly "IP_MULTICAST_LOOP_DISABLED" : Internal.ChannelOption<boolean>;
        static readonly "TCP_FASTOPEN_CONNECT" : Internal.ChannelOption<boolean>;
        static readonly "MESSAGE_SIZE_ESTIMATOR" : Internal.ChannelOption<(() => Internal.MessageSizeEstimator$Handle)>;
        static readonly "WRITE_SPIN_COUNT" : Internal.ChannelOption<number>;
        static readonly "SO_TIMEOUT" : Internal.ChannelOption<number>;
        static readonly "SO_REUSEADDR" : Internal.ChannelOption<boolean>;
        static readonly "CONNECT_TIMEOUT_MILLIS" : Internal.ChannelOption<number>;
        static readonly "ALLOW_HALF_CLOSURE" : Internal.ChannelOption<boolean>;
        static readonly "SO_BACKLOG" : Internal.ChannelOption<number>;
        static readonly "MAX_MESSAGES_PER_READ" : Internal.ChannelOption<number>;
        static readonly "AUTO_CLOSE" : Internal.ChannelOption<boolean>;
        static readonly "MAX_MESSAGES_PER_WRITE" : Internal.ChannelOption<number>;
        static readonly "SO_BROADCAST" : Internal.ChannelOption<boolean>;
        static readonly "AUTO_READ" : Internal.ChannelOption<boolean>;
        static readonly "IP_MULTICAST_TTL" : Internal.ChannelOption<number>;
        static readonly "RCVBUF_ALLOCATOR" : Internal.ChannelOption<(() => Internal.RecvByteBufAllocator$Handle)>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChannelOption_<T> = ChannelOption<T>;
    /**
    * @javaClass java.util.Spliterator
    */
    interface Spliterator <T> {
        trySplit(): Internal.Spliterator<T>;
        tryAdvance(arg0: Internal.Consumer_<T>): boolean;
        characteristics(): number;
        getComparator(): Internal.Comparator<T>;
        getExactSizeIfKnown(): number;
        estimateSize(): number;
        hasCharacteristics(arg0: number): boolean;
        forEachRemaining(arg0: Internal.Consumer_<T>): void;
    }
    type Spliterator_<T> = Spliterator<T>;
    /**
    * @javaClass java.lang.annotation.Annotation
    */
    interface Annotation {
        hashCode(): number;
        equals(arg0: any): boolean;
        annotationType(): Internal.Annotation;
        toString(): string;
    }
    type Annotation_ = Annotation;
    /**
    * @javaClass dev.latvian.mods.kubejs.event.EventJS
    */
    class EventJS {
        cancel(): void;
        isCancelled(): boolean;
        post(t: Internal.ScriptType_, id: string, sub: string): boolean;
        post(t: Internal.ScriptType_, id: string): boolean;
        canCancel(): boolean;
        get cancelled(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventJS_ = EventJS;
    /**
    * @javaClass java.awt.geom.AffineTransform
    */
    class AffineTransform implements Internal.Cloneable, Internal.Serializable {
        setToIdentity(): void;
        rotate(arg0: number, arg1: number, arg2: number, arg3: number): void;
        rotate(arg0: number, arg1: number, arg2: number): void;
        rotate(arg0: number, arg1: number): void;
        rotate(arg0: number): void;
        concatenate(arg0: Internal.AffineTransform_): void;
        preConcatenate(arg0: Internal.AffineTransform_): void;
        scale(arg0: number, arg1: number): void;
        static getScaleInstance(arg0: number, arg1: number): this;
        static getRotateInstance(arg0: number, arg1: number): this;
        static getRotateInstance(arg0: number, arg1: number, arg2: number, arg3: number): this;
        static getRotateInstance(arg0: number, arg1: number, arg2: number): this;
        static getRotateInstance(arg0: number): this;
        translate(arg0: number, arg1: number): void;
        setToQuadrantRotation(arg0: number): void;
        setToQuadrantRotation(arg0: number, arg1: number, arg2: number): void;
        setToRotation(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setToRotation(arg0: number, arg1: number, arg2: number): void;
        setToRotation(arg0: number, arg1: number): void;
        setToRotation(arg0: number): void;
        transform(arg0: number[], arg1: number, arg2: number[], arg3: number, arg4: number): void;
        transform(arg0: Internal.Point2D_, arg1: Internal.Point2D_): Internal.Point2D;
        transform(arg0: Internal.Point2D_[], arg1: number, arg2: Internal.Point2D_[], arg3: number, arg4: number): void;
        getMatrix(arg0: number[]): void;
        quadrantRotate(arg0: number, arg1: number, arg2: number): void;
        quadrantRotate(arg0: number): void;
        setTransform(arg0: Internal.AffineTransform_): void;
        setTransform(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        inverseTransform(arg0: number[], arg1: number, arg2: number[], arg3: number, arg4: number): void;
        inverseTransform(arg0: Internal.Point2D_, arg1: Internal.Point2D_): Internal.Point2D;
        hashCode(): number;
        setToShear(arg0: number, arg1: number): void;
        getTranslateY(): number;
        getTranslateX(): number;
        getDeterminant(): number;
        invert(): void;
        shear(arg0: number, arg1: number): void;
        static getQuadrantRotateInstance(arg0: number): this;
        static getQuadrantRotateInstance(arg0: number, arg1: number, arg2: number): this;
        isIdentity(): boolean;
        createTransformedShape(arg0: Internal.Shape_): Internal.Shape;
        createInverse(): this;
        getShearX(): number;
        getScaleY(): number;
        getScaleX(): number;
        static getTranslateInstance(arg0: number, arg1: number): this;
        getShearY(): number;
        getType(): number;
        setToScale(arg0: number, arg1: number): void;
        equals(arg0: any): boolean;
        clone(): any;
        toString(): string;
        setToTranslation(arg0: number, arg1: number): void;
        deltaTransform(arg0: Internal.Point2D_, arg1: Internal.Point2D_): Internal.Point2D;
        deltaTransform(arg0: number[], arg1: number, arg2: number[], arg3: number, arg4: number): void;
        static getShearInstance(arg0: number, arg1: number): this;
        static readonly "TYPE_QUADRANT_ROTATION" : 8;
        static readonly "TYPE_TRANSLATION" : 1;
        static readonly "TYPE_IDENTITY" : 0;
        static readonly "TYPE_UNIFORM_SCALE" : 2;
        static readonly "TYPE_MASK_SCALE" : 6;
        static readonly "TYPE_MASK_ROTATION" : 24;
        static readonly "TYPE_GENERAL_SCALE" : 4;
        static readonly "TYPE_FLIP" : 64;
        static readonly "TYPE_GENERAL_ROTATION" : 16;
        static readonly "TYPE_GENERAL_TRANSFORM" : 32;
        get scaleX(): number;
        get shearX(): number;
        get scaleY(): number;
        get translateY(): number;
        get identity(): boolean;
        get translateX(): number;
        get type(): number;
        get shearY(): number;
        get determinant(): number;
        set toQuadrantRotation(arg0: number);
        set toRotation(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AffineTransform_ = AffineTransform;
    /**
    * @javaClass net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation
    */
    class AttributeModifier$Operation extends Internal.Enum<Internal.AttributeModifier$Operation> {
        static valueOf(arg0: string): this;
        static values(): Internal.AttributeModifier$Operation[];
        static readonly "ADDITION" : Internal.AttributeModifier$Operation;
        static readonly "MULTIPLY_BASE" : Internal.AttributeModifier$Operation;
        static readonly "MULTIPLY_TOTAL" : Internal.AttributeModifier$Operation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttributeModifier$Operation_ = "multiply_base" | "multiply_total" | "addition" | AttributeModifier$Operation;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2FloatMap$Entry
    */
    interface Object2FloatMap$Entry <K> extends Internal.Map$Entry<K, number> {
        getValue(): number;
        getFloatValue(): number;
        setValue(arg0: number): number;
    }
    type Object2FloatMap$Entry_<K> = Object2FloatMap$Entry<K>;
    /**
    * @javaClass java.io.File
    */
    class File implements Internal.Serializable, Internal.Comparable<Internal.File> {
        getUsableSpace(): number;
        static listRoots(): Internal.File[];
        renameTo(arg0: Internal.File_): boolean;
        getName(): string;
        setExecutable(arg0: boolean): boolean;
        setExecutable(arg0: boolean, arg1: boolean): boolean;
        canRead(): boolean;
        getCanonicalFile(): this;
        compareTo(arg0: Internal.File_): number;
        delete(): boolean;
        setReadable(arg0: boolean): boolean;
        setReadable(arg0: boolean, arg1: boolean): boolean;
        getTotalSpace(): number;
        hashCode(): number;
        getParentFile(): this;
        getPath(): string;
        getAbsoluteFile(): this;
        listFiles(arg0: Internal.FileFilter_): Internal.File[];
        listFiles(arg0: Internal.FilenameFilter_): Internal.File[];
        listFiles(): Internal.File[];
        mkdir(): boolean;
        deleteOnExit(): void;
        canExecute(): boolean;
        getCanonicalPath(): string;
        toURL(): Internal.URL;
        getParent(): string;
        setWritable(arg0: boolean): boolean;
        setWritable(arg0: boolean, arg1: boolean): boolean;
        isFile(): boolean;
        getAbsolutePath(): string;
        toURI(): Internal.URI;
        getFreeSpace(): number;
        length(): number;
        canWrite(): boolean;
        static createTempFile(arg0: string, arg1: string): this;
        static createTempFile(arg0: string, arg1: string, arg2: Internal.File_): this;
        list(): string[];
        list(arg0: Internal.FilenameFilter_): string[];
        isHidden(): boolean;
        toPath(): Internal.Path;
        mkdirs(): boolean;
        equals(arg0: any): boolean;
        exists(): boolean;
        isAbsolute(): boolean;
        toString(): string;
        lastModified(): number;
        createNewFile(): boolean;
        setLastModified(arg0: number): boolean;
        isDirectory(): boolean;
        setReadOnly(): boolean;
        static readonly "pathSeparator" : ";";
        static readonly "pathSeparatorChar" : ";";
        static readonly "separatorChar" : "\\";
        static readonly "separator" : "\\";
        get parent(): string;
        get parentFile(): this;
        get hidden(): boolean;
        get freeSpace(): number;
        get usableSpace(): number;
        get totalSpace(): number;
        get canonicalFile(): this;
        get directory(): boolean;
        get path(): string;
        get absoluteFile(): this;
        get file(): boolean;
        get absolute(): boolean;
        get name(): string;
        get canonicalPath(): string;
        get absolutePath(): string;
        set readable(arg0: boolean);
        set executable(arg0: boolean);
        set writable(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type File_ = File;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ingredient.IngredientStackJS
    */
    class IngredientStackJS implements Internal.IngredientJS {
        testVanillaItem(item: Internal.Item_): boolean;
        test(stack: Internal.ItemStackJS_): boolean;
        getStacks(): Internal.Set<Internal.ItemStackJS>;
        getVanillaItems(): Internal.Set<Internal.Item>;
        isEmpty(): boolean;
        isInvalidRecipeIngredient(): boolean;
        asIngredientStack(): this;
        filter(filter: Internal.IngredientJS_): Internal.IngredientJS;
        toJson(): Internal.JsonElement;
        not(): Internal.IngredientJS;
        withCount(count: number): Internal.IngredientJS;
        getIngredient(): Internal.IngredientJS;
        unwrapStackIngredient(): Internal.List<Internal.IngredientJS>;
        getFirst(): Internal.ItemStackJS;
        testVanilla(stack: Internal.ItemStack_): boolean;
        toString(): string;
        static stackOf(in_: Internal.IngredientJS_): this;
        copy(): Internal.IngredientJS;
        getCount(): number;
        "ingredientKey" : string;
        "ingredient" : Internal.IngredientJS;
        "countKey" : string;
        get invalidRecipeIngredient(): boolean;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get count(): number;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get first(): Internal.ItemStackJS;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IngredientStackJS_ = IngredientStackJS;
    /**
    * @javaClass net.minecraft.world.entity.decoration.Motive
    */
    class Motive extends Internal.ForgeRegistryEntry<Internal.Motive> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Motive_ = Special.Motive | Motive;
    /**
    * @javaClass com.mojang.serialization.OptionalDynamic
    */
    class OptionalDynamic <T> extends Internal.DynamicLike<T> {
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        orElseEmptyMap(): Internal.Dynamic<T>;
        orElseEmptyList(): Internal.Dynamic<T>;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        asNumber(): Internal.DataResult<Internal.Number>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asMapOpt(): Internal.DataResult<Internal.Stream<com.mojang.datafixers.util.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        decode<A>(arg0: Internal.Decoder_<A>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        flatMap<U>(arg0: Internal.Function_<Internal.Dynamic_<T>, Internal.DataResult_<U>>): Internal.DataResult<U>;
        result(): Internal.Optional<Internal.Dynamic<T>>;
        into<V>(arg0: Internal.Function_<Internal.Dynamic_<T>, V>): Internal.DataResult<V>;
        getElement(arg0: string): Internal.DataResult<T>;
        get(arg0: string): Internal.OptionalDynamic<T>;
        get(): Internal.DataResult<Internal.Dynamic<T>>;
        asString(): Internal.DataResult<string>;
        map<U>(arg0: Internal.Function_<Internal.Dynamic_<T>, U>): Internal.DataResult<U>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OptionalDynamic_<T> = OptionalDynamic<T>;
    /**
    * @javaClass net.minecraft.server.MinecraftServer
    */
    abstract class MinecraftServer extends Internal.ReentrantBlockableEventLoop<any> implements Internal.CommandSource, Internal.AutoCloseable, Internal.MinecraftServerKJS {
        forgeGetWorldMap(): Internal.Map<Internal.ResourceKey<Internal.Level>, Internal.ServerLevel>;
        getServerResources(): Internal.MinecraftServer$ReloadableResources;
        markWorldsDirty(): void;
        getTickTime(arg0: Internal.ResourceKey_<Internal.Level_>): number[];
        close(): void;
        localvar$zzj000$wrapResourceManager(original: Internal.CloseableResourceManager_): Internal.CloseableResourceManager;
        get serverResources(): Internal.MinecraftServer$ReloadableResources;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MinecraftServer_ = MinecraftServer;
    /**
    * @javaClass com.mojang.blaze3d.vertex.VertexConsumer
    */
    interface VertexConsumer extends Internal.IForgeVertexConsumer {
    }
    type VertexConsumer_ = VertexConsumer;
    /**
    * @javaClass mezz.jei.api.ingredients.subtypes.UidContext
    */
    class UidContext extends Internal.Enum<Internal.UidContext> {
        static valueOf(arg0: string): this;
        static values(): Internal.UidContext[];
        static readonly "Ingredient" : Internal.UidContext;
        static readonly "Recipe" : Internal.UidContext;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UidContext_ = "ingredient" | "recipe" | UidContext;
    /**
    * @javaClass java.time.OffsetTime
    */
    class OffsetTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.OffsetTime>, Internal.Serializable {
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plusHours(arg0: number): this;
        minusHours(arg0: number): this;
        isEqual(arg0: Internal.OffsetTime_): boolean;
        getOffset(): Internal.ZoneOffset;
        atDate(arg0: Internal.LocalDate_): Internal.OffsetDateTime;
        toLocalTime(): Internal.LocalTime;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        compareTo(arg0: Internal.OffsetTime_): number;
        plusMinutes(arg0: number): this;
        withOffsetSameLocal(arg0: Internal.ZoneOffset_): this;
        minusMinutes(arg0: number): this;
        hashCode(): number;
        static now(): this;
        static now(arg0: Internal.Clock_): this;
        static now(arg0: Internal.ZoneId_): this;
        static of(arg0: Internal.LocalTime_, arg1: Internal.ZoneOffset_): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.ZoneOffset_): this;
        get(arg0: Internal.TemporalField_): number;
        plusSeconds(arg0: number): this;
        getMinute(): number;
        getHour(): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        plusNanos(arg0: number): this;
        withMinute(arg0: number): this;
        withHour(arg0: number): this;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        format(arg0: Internal.DateTimeFormatter_): string;
        static parse(arg0: Internal.CharSequence_): this;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        isSupported(arg0: Internal.TemporalField_): boolean;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isBefore(arg0: Internal.OffsetTime_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
        withNano(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        with(arg0: Internal.TemporalAdjuster_): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        withOffsetSameInstant(arg0: Internal.ZoneOffset_): this;
        toEpochSecond(arg0: Internal.LocalDate_): number;
        equals(arg0: any): boolean;
        getSecond(): number;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        minusSeconds(arg0: number): this;
        isAfter(arg0: Internal.OffsetTime_): boolean;
        withSecond(arg0: number): this;
        static readonly "MIN" : Internal.OffsetTime;
        static readonly "MAX" : Internal.OffsetTime;
        get offset(): Internal.ZoneOffset;
        get hour(): number;
        get nano(): number;
        get minute(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OffsetTime_ = OffsetTime;
    /**
    * @javaClass java.lang.Thread$State
    */
    class Thread$State extends Internal.Enum<Internal.Thread$State> {
        static valueOf(arg0: string): this;
        static values(): Internal.Thread$State[];
        static readonly "NEW" : Internal.Thread$State;
        static readonly "TERMINATED" : Internal.Thread$State;
        static readonly "RUNNABLE" : Internal.Thread$State;
        static readonly "BLOCKED" : Internal.Thread$State;
        static readonly "WAITING" : Internal.Thread$State;
        static readonly "TIMED_WAITING" : Internal.Thread$State;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Thread$State_ = "new" | "runnable" | "blocked" | "waiting" | "terminated" | "timed_waiting" | Thread$State;
    /**
    * @javaClass com.electronwill.nightconfig.core.CommentedConfig$Entry
    */
    interface CommentedConfig$Entry extends Internal.Config$Entry, Internal.UnmodifiableCommentedConfig$Entry {
        setComment(arg0: string): string;
        removeComment(): string;
    }
    type CommentedConfig$Entry_ = CommentedConfig$Entry;
    /**
    * @javaClass net.minecraft.client.player.Input
    */
    class Input {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Input_ = Input;
    /**
    * @javaClass java.io.OutputStream
    */
    abstract class OutputStream implements Internal.Closeable, Internal.Flushable {
        flush(): void;
        static nullOutputStream(): this;
        close(): void;
        write(arg0: number[]): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OutputStream_ = OutputStream;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingDropsEvent
    */
    class LivingDropsEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getLootingLevel(): number;
        getSource(): Internal.DamageSource;
        getDrops(): Internal.Collection<Internal.ItemEntity>;
        isCancelable(): boolean;
        isRecentlyHit(): boolean;
        get drops(): Internal.Collection<Internal.ItemEntity>;
        get cancelable(): boolean;
        get recentlyHit(): boolean;
        get listenerList(): Internal.ListenerList;
        get lootingLevel(): number;
        get source(): Internal.DamageSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingDropsEvent_ = LivingDropsEvent;
    /**
    * @javaClass io.netty.channel.ChannelOutboundInvoker
    */
    interface ChannelOutboundInvoker {
        disconnect(): Internal.ChannelFuture;
        disconnect(arg0: Internal.ChannelPromise_): Internal.ChannelFuture;
        newProgressivePromise(): Internal.ChannelProgressivePromise;
        read(): this;
        deregister(arg0: Internal.ChannelPromise_): Internal.ChannelFuture;
        deregister(): Internal.ChannelFuture;
        newFailedFuture(arg0: Internal.Throwable_): Internal.ChannelFuture;
        writeAndFlush(arg0: any): Internal.ChannelFuture;
        writeAndFlush(arg0: any, arg1: Internal.ChannelPromise_): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress_): Internal.ChannelFuture;
        bind(arg0: Internal.SocketAddress_, arg1: Internal.ChannelPromise_): Internal.ChannelFuture;
        newSucceededFuture(): Internal.ChannelFuture;
        voidPromise(): Internal.ChannelPromise;
        flush(): this;
        close(arg0: Internal.ChannelPromise_): Internal.ChannelFuture;
        close(): Internal.ChannelFuture;
        write(arg0: any, arg1: Internal.ChannelPromise_): Internal.ChannelFuture;
        write(arg0: any): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress_): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress_, arg1: Internal.SocketAddress_, arg2: Internal.ChannelPromise_): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress_, arg1: Internal.SocketAddress_): Internal.ChannelFuture;
        connect(arg0: Internal.SocketAddress_, arg1: Internal.ChannelPromise_): Internal.ChannelFuture;
        newPromise(): Internal.ChannelPromise;
    }
    type ChannelOutboundInvoker_ = ChannelOutboundInvoker;
    /**
    * @javaClass com.mojang.brigadier.Message
    */
    interface Message {
        getString(): string;
    }
    type Message_ = (() => string) | Message;
    /**
    * Fired when an item is about to be picked up by the player.
    * @javaClass dev.latvian.mods.kubejs.item.ItemPickupEventJS
    */
    class ItemPickupEventJS extends Internal.PlayerEventJS {
        getItem(): Internal.ItemStackJS;
        getEntity(): Internal.EntityJS;
        getItemEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get itemEntity(): Internal.EntityJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when an item is about to be picked up by the player.
    */
    type ItemPickupEventJS_ = ItemPickupEventJS;
    /**
    * @javaClass java.util.function.UnaryOperator
    */
    interface UnaryOperator <T> extends Internal.Function<T, T> {
        identity<T>(): Internal.UnaryOperator<T>;
    }
    type UnaryOperator_<T> = UnaryOperator<T>;
    /**
    * @javaClass net.minecraft.world.level.chunk.LevelChunk
    */
    class LevelChunk extends Internal.ChunkAccess implements Internal.ICapabilityProviderImpl<Internal.LevelChunk> {
        getWorldForge(): Internal.Level;
        invalidateCaps(): void;
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        areCapsCompatible(arg0: Internal.CapabilityProvider_<Internal.LevelChunk_>): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher_): boolean;
        writeCapsToNBT(): Internal.CompoundTag;
        reviveCaps(): void;
        readCapsFromNBT(arg0: Internal.CompoundTag_): void;
        get worldForge(): Internal.Level;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LevelChunk_ = LevelChunk;
    /**
    * @javaClass com.mojang.serialization.codecs.RecordCodecBuilder
    */
    class RecordCodecBuilder <O, F> implements Internal.App<Internal.RecordCodecBuilder$Mu<O>, F> {
        static instance<O>(): Internal.RecordCodecBuilder$Instance<O>;
        static mapCodec<O>(arg0: Internal.Function_<Internal.RecordCodecBuilder$Instance_<O>, Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, O>>): Internal.MapCodec<O>;
        static build<O>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, O>): Internal.MapCodec<O>;
        static stable<O, F>(arg0: F): Internal.RecordCodecBuilder<O, F>;
        static unbox<O, F>(arg0: Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, F>): Internal.RecordCodecBuilder<O, F>;
        static deprecated<O, F>(arg0: F, arg1: number): Internal.RecordCodecBuilder<O, F>;
        static of<O, F>(arg0: Internal.Function_<O, F>, arg1: string, arg2: Internal.Codec_<F>): Internal.RecordCodecBuilder<O, F>;
        static of<O, F>(arg0: Internal.Function_<O, F>, arg1: Internal.MapCodec_<F>): Internal.RecordCodecBuilder<O, F>;
        static create<O>(arg0: Internal.Function_<Internal.RecordCodecBuilder$Instance_<O>, Internal.App_<Internal.RecordCodecBuilder$Mu_<O>, O>>): Internal.Codec<O>;
        dependent<E>(arg0: Internal.Function_<O, E>, arg1: Internal.MapEncoder_<E>, arg2: Internal.Function_<F, Internal.MapDecoder_<E>>): Internal.RecordCodecBuilder<O, E>;
        static point<O, F>(arg0: F, arg1: Internal.Lifecycle_): Internal.RecordCodecBuilder<O, F>;
        static point<O, F>(arg0: F): Internal.RecordCodecBuilder<O, F>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecordCodecBuilder_<O, F> = RecordCodecBuilder<O, F>;
    /**
    * @javaClass net.minecraft.client.resources.model.ModelManager
    */
    class ModelManager extends Internal.SimplePreparableReloadListener<Internal.ModelBakery> implements Internal.AutoCloseable, Internal.AccessorModelManager {
        getModel(arg0: ResourceLocation_): Internal.BakedModel;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelManager_ = ModelManager;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.PlayerSelector
    */
    interface PlayerSelector {
        getPlayer(arg0: Internal.Map_<Internal.UUID_, Internal.ServerPlayerDataJS_>): Internal.ServerPlayerJS;
        or(fallback: Internal.PlayerSelector_): this;
        fuzzyName(name: string): this;
        mc(player: Internal.Player_): this;
        identity(player: Internal.ServerPlayerJS_): this;
        of(o: any): this;
        name(name: string): this;
        uuid(uuid: Internal.UUID_): this;
    }
    type PlayerSelector_ = ((arg0: Internal.Map<Internal.UUID, Internal.ServerPlayerDataJS>) => Internal.ServerPlayerJS) | PlayerSelector;
    /**
    * @javaClass io.netty.channel.ChannelId
    */
    interface ChannelId extends Internal.Serializable, Internal.Comparable<Internal.ChannelId> {
        asShortText(): string;
        asLongText(): string;
    }
    type ChannelId_ = ChannelId;
    /**
    * @javaClass net.minecraft.world.scores.criteria.ObjectiveCriteria
    */
    class ObjectiveCriteria {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ObjectiveCriteria_ = ObjectiveCriteria;
    /**
    * @javaClass java.util.function.IntToDoubleFunction
    */
    interface IntToDoubleFunction {
        applyAsDouble(arg0: number): number;
    }
    type IntToDoubleFunction_ = ((arg0: number) => number) | IntToDoubleFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.input.KeyModifiers
    */
    class KeyModifiers {
        onlyControl(): boolean;
        capsLock(): boolean;
        shift(): boolean;
        alt(): boolean;
        start(): boolean;
        numLock(): boolean;
        control(): boolean;
        static readonly "NONE" : Internal.KeyModifiers;
        readonly "modifiers" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type KeyModifiers_ = KeyModifiers;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.AxeItemBuilder
    */
    class AxeItemBuilder extends Internal.HandheldItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AxeItemBuilder_ = AxeItemBuilder;
    /**
    * @javaClass net.minecraftforge.event.entity.living.PotionEvent$PotionAddedEvent
    */
    class PotionEvent$PotionAddedEvent extends Internal.PotionEvent {
        getListenerList(): Internal.ListenerList;
        getPotionEffect(): Internal.MobEffectInstance;
        getOldPotionEffect(): Internal.MobEffectInstance;
        getPotionSource(): Internal.Entity;
        get potionSource(): Internal.Entity;
        get potionEffect(): Internal.MobEffectInstance;
        get listenerList(): Internal.ListenerList;
        get oldPotionEffect(): Internal.MobEffectInstance;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionEvent$PotionAddedEvent_ = PotionEvent$PotionAddedEvent;
    /**
    * @javaClass net.minecraftforge.fml.LogicalSide
    */
    class LogicalSide extends Internal.Enum<Internal.LogicalSide> {
        isServer(): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.LogicalSide[];
        isClient(): boolean;
        static readonly "SERVER" : Internal.LogicalSide;
        static readonly "CLIENT" : Internal.LogicalSide;
        get server(): boolean;
        get client(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LogicalSide_ = "server" | "client" | LogicalSide;
    /**
    * @javaClass com.mojang.datafixers.util.Function15
    */
    interface Function15 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.Function3<T13, T14, T15, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function6<T10, T11, T12, T13, T14, T15, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Internal.BiFunction<T14, T15, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15): R;
        curry14(): Internal.Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Internal.Function<T15, R>>;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function8<T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function7<T9, T10, T11, T12, T13, T14, T15, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function5<T11, T12, T13, T14, T15, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function4<T12, T13, T14, T15, R>>;
        curry(): Internal.Function<T1, Internal.Function14<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function10<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function9<T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function12<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function11<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function13<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>;
    }
    type Function15_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14, arg14: T15) => R) | Function15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.WoodenPressurePlateBlockBuilder
    */
    class WoodenPressurePlateBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WoodenPressurePlateBlockBuilder_ = WoodenPressurePlateBlockBuilder;
    /**
    * @javaClass net.minecraft.world.food.FoodProperties
    */
    class FoodProperties {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FoodProperties_ = FoodProperties;
    /**
    * @javaClass net.minecraftforge.fml.ModLoadingStage
    */
    class ModLoadingStage extends Internal.Enum<Internal.ModLoadingStage> {
        static valueOf(arg0: string): this;
        static values(): Internal.ModLoadingStage[];
        currentState(arg0: Internal.Throwable_): this;
        getDeferredWorkQueue(): Internal.DeferredWorkQueue;
        static readonly "COMPLETE" : Internal.ModLoadingStage;
        static readonly "DONE" : Internal.ModLoadingStage;
        static readonly "CONSTRUCT" : Internal.ModLoadingStage;
        static readonly "COMMON_SETUP" : Internal.ModLoadingStage;
        static readonly "PROCESS_IMC" : Internal.ModLoadingStage;
        static readonly "SIDED_SETUP" : Internal.ModLoadingStage;
        static readonly "VALIDATE" : Internal.ModLoadingStage;
        static readonly "ERROR" : Internal.ModLoadingStage;
        static readonly "ENQUEUE_IMC" : Internal.ModLoadingStage;
        get deferredWorkQueue(): Internal.DeferredWorkQueue;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModLoadingStage_ = "sided_setup" | "enqueue_imc" | "process_imc" | "construct" | "error" | "common_setup" | "complete" | "done" | "validate" | ModLoadingStage;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2BooleanFunction
    */
    interface Double2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.DoublePredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Double2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2BooleanFunction_ = ((arg0: number) => boolean) | Double2BooleanFunction;
    /**
    * @javaClass java.net.InetAddress
    */
    class InetAddress implements Internal.Serializable {
        isReachable(arg0: Internal.NetworkInterface_, arg1: number, arg2: number): boolean;
        isReachable(arg0: number): boolean;
        isMCSiteLocal(): boolean;
        static getAllByName(arg0: string): Internal.InetAddress[];
        isMCGlobal(): boolean;
        getHostName(): string;
        isMCOrgLocal(): boolean;
        getCanonicalHostName(): string;
        isAnyLocalAddress(): boolean;
        isLinkLocalAddress(): boolean;
        static getLocalHost(): this;
        isMCLinkLocal(): boolean;
        isLoopbackAddress(): boolean;
        isSiteLocalAddress(): boolean;
        isMulticastAddress(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        static getByName(arg0: string): this;
        static getLoopbackAddress(): this;
        static getByAddress(arg0: number[]): this;
        static getByAddress(arg0: string, arg1: number[]): this;
        getAddress(): number[];
        toString(): string;
        getHostAddress(): string;
        isMCNodeLocal(): boolean;
        get linkLocalAddress(): boolean;
        get hostName(): string;
        get loopbackAddress(): this;
        get address(): number[];
        get canonicalHostName(): string;
        get mCOrgLocal(): boolean;
        get siteLocalAddress(): boolean;
        get mCNodeLocal(): boolean;
        get mCGlobal(): boolean;
        get localHost(): this;
        get mCLinkLocal(): boolean;
        get multicastAddress(): boolean;
        get hostAddress(): string;
        get mCSiteLocal(): boolean;
        get anyLocalAddress(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InetAddress_ = InetAddress;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.BlockBuilder
    */
    abstract class BlockBuilder extends Internal.BuilderBase<Internal.Block> {
        suffocating(b: boolean): this;
        noItem(): this;
        clientRegistry(minecraft: Internal.Supplier_<Internal.Minecraft_>): void;
        waterlogged(): this;
        transformObject(obj: Internal.Block_): Internal.Block;
        color(index: number, c: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        /**
        */
        textureAll(tex: Special.Texture): this;
        displayName(name: string): Internal.BuilderBase<Internal.Block>;
        box(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): this;
        box(x0: number, y0: number, z0: number, x1: number, y1: number, z1: number, scale16: boolean): this;
        viewBlocking(b: boolean): this;
        createAdditionalObjects(): void;
        transparent(b: boolean): this;
        tagBlock(tag: ResourceLocation_): this;
        fullBlock(f: boolean): this;
        createProperties(): Internal.BlockBehaviour$Properties;
        generateBlockModels(builder: Internal.BlockBuilder_): Internal.Map<ResourceLocation, Internal.JsonObject>;
        notSolid(): this;
        noCollission(): this;
        requiresTool(f: boolean): this;
        unbreakable(): this;
        model(m: string): this;
        tag(tag: ResourceLocation_): this;
        renderType(l: string): this;
        generateDataJsons(generator: Internal.DataJsonGenerator_): void;
        jumpFactor(f: number): this;
        tagBoth(tag: ResourceLocation_): this;
        createShape(): Internal.VoxelShape;
        defaultCutout(): this;
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        item(i: Internal.Consumer_<Internal.BlockItemBuilder_>): this;
        noCollision(): this;
        opaque(o: boolean): this;
        randomTick(randomTickCallback: Internal.Consumer_<Internal.RandomTickCallbackJS_>): this;
        /**
        */
        texture(id: string, tex: Special.Texture): this;
        noDrops(): this;
        speedFactor(f: number): this;
        tagItem(tag: ResourceLocation_): this;
        noValidSpawns(b: boolean): this;
        resistance(r: number): this;
        lightLevel(light: number): this;
        hardness(h: number): this;
        addResourcePackLocations(path: string, list: Internal.List_<ResourceLocation_>, packType: Internal.PackType_): void;
        defaultTranslucent(): this;
        material(m: Internal.MaterialJS_): this;
        slipperiness(f: number): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Block>;
        redstoneConductor(b: boolean): this;
        /**
        */
        textureSide(direction: Internal.Direction_, tex: Special.Texture): this;
        "lootTable" : ((arg0: Internal.LootBuilder) => void);
        "modelJson" : Internal.JsonObject;
        "blockstateJson" : Internal.JsonObject;
        "randomTickCallback" : ((arg0: Internal.RandomTickCallbackJS) => void);
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Block>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type BlockBuilder_ = BlockBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.CropBlockBuilder$SurviveCallback
    */
    interface CropBlockBuilder$SurviveCallback {
        survive(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_): boolean;
    }
    type CropBlockBuilder$SurviveCallback_ = ((arg0: Internal.BlockState, arg1: Internal.LevelReader, arg2: BlockPos) => boolean) | CropBlockBuilder$SurviveCallback;
    /**
    * @javaClass mezz.jei.api.recipe.IFocus$Mode
    */
    class IFocus$Mode extends Internal.Enum<Internal.IFocus$Mode> {
        toRole(): Internal.RecipeIngredientRole;
        static valueOf(arg0: string): this;
        static values(): Internal.IFocus$Mode[];
        static readonly "INPUT" : Internal.IFocus$Mode;
        static readonly "OUTPUT" : Internal.IFocus$Mode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IFocus$Mode_ = "output" | "input" | IFocus$Mode;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ObjectMap$Entry
    */
    interface Long2ObjectMap$Entry <V> extends Internal.Map$Entry<number, V> {
        getKey(): number;
        getLongKey(): number;
    }
    type Long2ObjectMap$Entry_<V> = (() => number) | Long2ObjectMap$Entry<V>;
    /**
    * @javaClass dev.ftb.mods.ftbquests.integration.kubejs.FTBQuestsKubeJSWrapper
    */
    class FTBQuestsKubeJSWrapper {
        getQuestObjectTypes(): Internal.Map<string, Internal.QuestObjectType>;
        getObject(world: Internal.LevelJS_, id: any): Internal.QuestObjectBase;
        getQuestShapes(): Internal.Map<string, Internal.QuestShape>;
        getServerDataFromPlayer(player: Internal.Player_): Internal.FTBQuestsKubeJSPlayerData;
        getServerDataFromSource(source: Internal.CommandSourceStack_): Internal.FTBQuestsKubeJSPlayerData;
        getFile(world: Internal.LevelJS_): Internal.QuestFile;
        getData(player: Internal.PlayerJS_<any>): Internal.TeamData;
        getData(world: Internal.LevelJS_, uuid: Internal.UUID_): Internal.TeamData;
        static readonly "INSTANCE" : Internal.FTBQuestsKubeJSWrapper;
        get questShapes(): Internal.Map<string, Internal.QuestShape>;
        get questObjectTypes(): Internal.Map<string, Internal.QuestObjectType>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FTBQuestsKubeJSWrapper_ = FTBQuestsKubeJSWrapper;
    /**
    * @javaClass net.minecraft.client.resources.sounds.Sound
    */
    class Sound implements Internal.Weighted<Internal.Sound> {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Sound_ = Sound;
    /**
    * @javaClass net.minecraft.client.sounds.AudioStream
    */
    interface AudioStream extends Internal.Closeable {
    }
    type AudioStream_ = AudioStream;
    /**
    * @javaClass net.minecraft.network.chat.Style
    */
    class Style {
        hashCode(): number;
        equals(arg0: any): boolean;
        setObfuscated(arg0: boolean): this;
        toString(): string;
        setUnderlined(arg0: boolean): this;
        setStrikethrough(arg0: boolean): this;
        set underlined(arg0: boolean);
        set strikethrough(arg0: boolean);
        set obfuscated(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Style_ = Style;
    /**
    * @javaClass cpw.mods.jarhandling.impl.SimpleJarMetadata
    */
    class SimpleJarMetadata extends Internal.Record implements Internal.JarMetadata {
        pkgs(): Internal.Set<string>;
        hashCode(): number;
        equals(arg0: any): boolean;
        name(): string;
        toString(): string;
        descriptor(): Internal.ModuleDescriptor;
        version(): string;
        providers(): Internal.List<Internal.SecureJar$Provider>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimpleJarMetadata_ = SimpleJarMetadata;
    /**
    * @javaClass net.minecraft.world.level.biome.MobSpawnSettings$MobSpawnCost
    */
    class MobSpawnSettings$MobSpawnCost {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobSpawnSettings$MobSpawnCost_ = MobSpawnSettings$MobSpawnCost;
    /**
    * @javaClass javax.accessibility.AccessibleRelation
    */
    class AccessibleRelation extends Internal.AccessibleBundle {
        getKey(): string;
        getTarget(): any[];
        setTarget(arg0: any): void;
        setTarget(arg0: any[]): void;
        static readonly "EMBEDS" : "embeds";
        static readonly "EMBEDDED_BY" : "embeddedBy";
        static readonly "FLOWS_FROM_PROPERTY" : "flowsFromProperty";
        static readonly "LABELED_BY" : "labeledBy";
        static readonly "MEMBER_OF" : "memberOf";
        static readonly "SUBWINDOW_OF" : "subwindowOf";
        static readonly "LABELED_BY_PROPERTY" : "labeledByProperty";
        static readonly "CHILD_NODE_OF" : "childNodeOf";
        static readonly "SUBWINDOW_OF_PROPERTY" : "subwindowOfProperty";
        static readonly "CONTROLLED_BY" : "controlledBy";
        static readonly "EMBEDDED_BY_PROPERTY" : "embeddedByProperty";
        static readonly "LABEL_FOR" : "labelFor";
        static readonly "CONTROLLER_FOR" : "controllerFor";
        static readonly "PARENT_WINDOW_OF" : "parentWindowOf";
        static readonly "EMBEDS_PROPERTY" : "embedsProperty";
        static readonly "CONTROLLER_FOR_PROPERTY" : "controllerForProperty";
        static readonly "FLOWS_TO_PROPERTY" : "flowsToProperty";
        static readonly "CONTROLLED_BY_PROPERTY" : "controlledByProperty";
        static readonly "FLOWS_FROM" : "flowsFrom";
        static readonly "LABEL_FOR_PROPERTY" : "labelForProperty";
        static readonly "CHILD_NODE_OF_PROPERTY" : "childNodeOfProperty";
        static readonly "PARENT_WINDOW_OF_PROPERTY" : "parentWindowOfProperty";
        static readonly "FLOWS_TO" : "flowsTo";
        static readonly "MEMBER_OF_PROPERTY" : "memberOfProperty";
        get key(): string;
        get target(): any[];
        set target(arg0: any[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleRelation_ = AccessibleRelation;
    /**
    * @javaClass com.mojang.brigadier.builder.ArgumentBuilder
    */
    abstract class ArgumentBuilder <S, T> {
        redirect(arg0: Internal.CommandNode_<S>): T;
        redirect(arg0: Internal.CommandNode_<S>, arg1: Internal.SingleRedirectModifier_<S>): T;
        getRedirectModifier(): Internal.RedirectModifier<S>;
        getRequirement(): Internal.Predicate<S>;
        fork(arg0: Internal.CommandNode_<S>, arg1: Internal.RedirectModifier_<S>): T;
        getRedirect(): Internal.CommandNode<S>;
        build(): Internal.CommandNode<S>;
        forward(arg0: Internal.CommandNode_<S>, arg1: Internal.RedirectModifier_<S>, arg2: boolean): T;
        getCommand(): Internal.Command<S>;
        getArguments(): Internal.Collection<Internal.CommandNode<S>>;
        executes(arg0: Internal.Command_<S>): T;
        then(arg0: Internal.ArgumentBuilder_<S, any>): T;
        then(arg0: Internal.CommandNode_<S>): T;
        isFork(): boolean;
        requires(arg0: Internal.Predicate_<S>): T;
        get arguments(): Internal.Collection<Internal.CommandNode<S>>;
        get requirement(): Internal.Predicate<S>;
        get redirectModifier(): Internal.RedirectModifier<S>;
        get command(): Internal.Command<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArgumentBuilder_<S, T> = ArgumentBuilder<S, T>;
    /**
    * @javaClass java.time.Period
    */
    class Period implements Internal.ChronoPeriod, Internal.Serializable {
        minus(arg0: Internal.TemporalAmount_): this;
        negated(): this;
        normalized(): this;
        static ofYears(arg0: number): this;
        getMonths(): number;
        plusDays(arg0: number): this;
        multipliedBy(arg0: number): this;
        getYears(): number;
        hashCode(): number;
        static of(arg0: number, arg1: number, arg2: number): this;
        get(arg0: Internal.TemporalUnit_): number;
        isZero(): boolean;
        static from(arg0: Internal.TemporalAmount_): this;
        withDays(arg0: number): this;
        getChronology(): Internal.IsoChronology;
        static between(arg0: Internal.LocalDate_, arg1: Internal.LocalDate_): this;
        isNegative(): boolean;
        withMonths(arg0: number): this;
        minusYears(arg0: number): this;
        plusMonths(arg0: number): this;
        plusYears(arg0: number): this;
        static ofDays(arg0: number): this;
        static parse(arg0: Internal.CharSequence_): this;
        toTotalMonths(): number;
        plus(arg0: Internal.TemporalAmount_): this;
        minusDays(arg0: number): this;
        minusMonths(arg0: number): this;
        static ofWeeks(arg0: number): this;
        getDays(): number;
        subtractFrom(arg0: Internal.Temporal_): Internal.Temporal;
        equals(arg0: any): boolean;
        getUnits(): Internal.List<Internal.TemporalUnit>;
        static ofMonths(arg0: number): this;
        addTo(arg0: Internal.Temporal_): Internal.Temporal;
        toString(): string;
        withYears(arg0: number): this;
        static readonly "ZERO" : Internal.Period;
        get zero(): boolean;
        get negative(): boolean;
        get months(): number;
        get chronology(): Internal.IsoChronology;
        get days(): number;
        get units(): Internal.List<Internal.TemporalUnit>;
        get years(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Period_ = Period;
    /**
    * @javaClass java.util.Locale
    */
    class Locale implements Internal.Cloneable, Internal.Serializable {
        stripExtensions(): this;
        static forLanguageTag(arg0: string): this;
        getUnicodeLocaleAttributes(): Internal.Set<string>;
        getCountry(): string;
        getUnicodeLocaleKeys(): Internal.Set<string>;
        getISO3Country(): string;
        static lookupTag(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<string>): string;
        getDisplayCountry(): string;
        getDisplayCountry(arg0: Internal.Locale_): string;
        getISO3Language(): string;
        static getISOCountries(arg0: Internal.Locale$IsoCountryCode_): Internal.Set<string>;
        static getISOCountries(): string[];
        hashCode(): number;
        getExtensionKeys(): Internal.Set<string>;
        getDisplayVariant(): string;
        getDisplayVariant(arg0: Internal.Locale_): string;
        static filterTags(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<string>): Internal.List<string>;
        static filterTags(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<string>, arg2: Internal.Locale$FilteringMode_): Internal.List<string>;
        static getISOLanguages(): string[];
        toLanguageTag(): string;
        static getAvailableLocales(): Internal.Locale[];
        getDisplayScript(arg0: Internal.Locale_): string;
        getDisplayScript(): string;
        static lookup(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<Internal.Locale_>): this;
        getLanguage(): string;
        getExtension(arg0: string): string;
        getVariant(): string;
        static getDefault(arg0: Internal.Locale$Category_): this;
        static getDefault(): this;
        static setDefault(arg0: Internal.Locale$Category_, arg1: Internal.Locale_): void;
        static setDefault(arg0: Internal.Locale_): void;
        hasExtensions(): boolean;
        static filter(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<Internal.Locale_>): Internal.List<Internal.Locale>;
        static filter(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Collection_<Internal.Locale_>, arg2: Internal.Locale$FilteringMode_): Internal.List<Internal.Locale>;
        getDisplayName(): string;
        getDisplayName(arg0: Internal.Locale_): string;
        equals(arg0: any): boolean;
        clone(): any;
        toString(): string;
        getDisplayLanguage(): string;
        getDisplayLanguage(arg0: Internal.Locale_): string;
        getScript(): string;
        getUnicodeLocaleType(arg0: string): string;
        static readonly "PRC" : Internal.Locale;
        static readonly "CANADA" : Internal.Locale;
        static readonly "ENGLISH" : Internal.Locale;
        static readonly "ROOT" : Internal.Locale;
        static readonly "TAIWAN" : Internal.Locale;
        static readonly "CHINA" : Internal.Locale;
        static readonly "ITALY" : Internal.Locale;
        static readonly "CHINESE" : Internal.Locale;
        static readonly "KOREA" : Internal.Locale;
        static readonly "FRENCH" : Internal.Locale;
        static readonly "FRANCE" : Internal.Locale;
        static readonly "TRADITIONAL_CHINESE" : Internal.Locale;
        static readonly "CANADA_FRENCH" : Internal.Locale;
        static readonly "GERMANY" : Internal.Locale;
        static readonly "ITALIAN" : Internal.Locale;
        static readonly "PRIVATE_USE_EXTENSION" : "x";
        static readonly "UK" : Internal.Locale;
        static readonly "JAPAN" : Internal.Locale;
        static readonly "JAPANESE" : Internal.Locale;
        static readonly "UNICODE_LOCALE_EXTENSION" : "u";
        static readonly "SIMPLIFIED_CHINESE" : Internal.Locale;
        static readonly "GERMAN" : Internal.Locale;
        static readonly "US" : Internal.Locale;
        static readonly "KOREAN" : Internal.Locale;
        get unicodeLocaleKeys(): Internal.Set<string>;
        get country(): string;
        get displayName(): string;
        get iSOLanguages(): string[];
        get displayVariant(): string;
        get language(): string;
        get displayLanguage(): string;
        get script(): string;
        get iSO3Country(): string;
        get availableLocales(): Internal.Locale[];
        get iSOCountries(): string[];
        get unicodeLocaleAttributes(): Internal.Set<string>;
        get default(): this;
        get displayCountry(): string;
        get variant(): string;
        get extensionKeys(): Internal.Set<string>;
        get displayScript(): string;
        get iSO3Language(): string;
        set default(arg0: Internal.Locale_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Locale_ = Locale;
    /**
    * @javaClass java.time.Month
    */
    class Month extends Internal.Enum<Internal.Month> implements Internal.TemporalAccessor, Internal.TemporalAdjuster {
        firstMonthOfQuarter(): this;
        minus(arg0: number): this;
        firstDayOfYear(arg0: boolean): number;
        static valueOf(arg0: string): this;
        minLength(): number;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        static values(): Internal.Month[];
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        length(arg0: boolean): number;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        getValue(): number;
        getDisplayName(arg0: Internal.TextStyle_, arg1: Internal.Locale_): string;
        static of(arg0: number): this;
        get(arg0: Internal.TemporalField_): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        maxLength(): number;
        static readonly "JANUARY" : Internal.Month;
        static readonly "JUNE" : Internal.Month;
        static readonly "MAY" : Internal.Month;
        static readonly "OCTOBER" : Internal.Month;
        static readonly "DECEMBER" : Internal.Month;
        static readonly "MARCH" : Internal.Month;
        static readonly "FEBRUARY" : Internal.Month;
        static readonly "AUGUST" : Internal.Month;
        static readonly "JULY" : Internal.Month;
        static readonly "SEPTEMBER" : Internal.Month;
        static readonly "NOVEMBER" : Internal.Month;
        static readonly "APRIL" : Internal.Month;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Month_ = "november" | "june" | "september" | "may" | "august" | "january" | "february" | "july" | "december" | "october" | "april" | "march" | Month;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.VariantBlockStateGenerator
    */
    class VariantBlockStateGenerator {
        toJson(): Internal.JsonObject;
        variant(key: string, model: string): void;
        variant(key: string, consumer: Internal.Consumer_<Internal.VariantBlockStateGenerator$Variant_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VariantBlockStateGenerator_ = VariantBlockStateGenerator;
    /**
    * @javaClass java.awt.event.WindowEvent
    */
    class WindowEvent extends Internal.ComponentEvent {
        paramString(): string;
        getWindow(): Internal.Window;
        getOppositeWindow(): Internal.Window;
        getOldState(): number;
        getNewState(): number;
        static readonly "WINDOW_OPENED" : 200;
        static readonly "WINDOW_ACTIVATED" : 205;
        static readonly "WINDOW_DEACTIVATED" : 206;
        static readonly "WINDOW_STATE_CHANGED" : 209;
        static readonly "WINDOW_CLOSED" : 202;
        static readonly "WINDOW_LAST" : 209;
        static readonly "WINDOW_FIRST" : 200;
        static readonly "WINDOW_LOST_FOCUS" : 208;
        static readonly "WINDOW_ICONIFIED" : 203;
        static readonly "WINDOW_GAINED_FOCUS" : 207;
        static readonly "WINDOW_DEICONIFIED" : 204;
        static readonly "WINDOW_CLOSING" : 201;
        get oldState(): number;
        get window(): Internal.Window;
        get oppositeWindow(): Internal.Window;
        get newState(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WindowEvent_ = WindowEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.ModelGenerator$Face
    */
    class ModelGenerator$Face {
        uv(u0: number, v0: number, u1: number, v1: number): this;
        toJson(): Internal.JsonObject;
        tex(t: string): this;
        cull(): this;
        cull(d: Internal.Direction_): this;
        tintindex(i: number): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelGenerator$Face_ = ModelGenerator$Face;
    /**
    * @javaClass net.minecraftforge.client.model.ForgeModelBakery
    */
    class ForgeModelBakery extends Internal.ModelBakery {
        isLoading(): boolean;
        static addSpecialModel(arg0: ResourceLocation_): void;
        static defaultTextureGetter(): Internal.Function<Internal.Material, Internal.TextureAtlasSprite>;
        static instance(): this;
        getModelOrLogError(arg0: ResourceLocation_, arg1: string): Internal.UnbakedModel;
        static getInventoryVariant(arg0: string): Internal.ModelResourceLocation;
        getSpecialModels(): Internal.Set<ResourceLocation>;
        onPostBakeEvent(arg0: Internal.Map_<ResourceLocation_, Internal.BakedModel_>): void;
        static defaultModelGetter(): Internal.Function<ResourceLocation, Internal.UnbakedModel>;
        getModelOrMissing(arg0: ResourceLocation_): Internal.UnbakedModel;
        get specialModels(): Internal.Set<ResourceLocation>;
        get loading(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForgeModelBakery_ = ForgeModelBakery;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkDataEvent$Load
    */
    class ChunkDataEvent$Load extends Internal.ChunkDataEvent {
        getListenerList(): Internal.ListenerList;
        getStatus(): Internal.ChunkStatus$ChunkType;
        get listenerList(): Internal.ListenerList;
        get status(): Internal.ChunkStatus$ChunkType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkDataEvent$Load_ = ChunkDataEvent$Load;
    /**
    * @javaClass org.apache.maven.artifact.metadata.ArtifactMetadata
    */
    interface ArtifactMetadata extends org.apache.maven.repository.legacy.metadata.ArtifactMetadata {
        merge(arg0: Internal.ArtifactMetadata_): void;
    }
    type ArtifactMetadata_ = ((arg0: Internal.ArtifactMetadata) => void) | ArtifactMetadata;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.ListJS
    */
    class ListJS extends Internal.ArrayList<any> implements Internal.StringBuilderAppendable, Internal.ChangeListener<any>, Internal.Copyable, Internal.JsonSerializable, Internal.NBTSerializable {
        add(index: number, value: any): void;
        add(value: any): boolean;
        static nbt(list: any): Internal.CollectionTag<any>;
        appendString(builder: Internal.StringBuilder_): void;
        onChanged(o: any): void;
        splice(pos: number, deleteCount: number, ... items: any[]): this;
        shift(): any;
        clear(): void;
        static ofArray(array: any): this;
        reverse(): this;
        push(... o: any[]): this;
        remove(index: number): any;
        remove(o: any): boolean;
        pop(): any;
        filter(predicate: Internal.Predicate_<any>): this;
        toJson(): Internal.JsonArray;
        toNBT(): Internal.CollectionTag<any>;
        addAll(index: number, c: Internal.Collection_<any>): boolean;
        addAll(c: Internal.Collection_<any>): boolean;
        static of(o: any): this;
        static of(array: number[]): this;
        static of(array: string[]): this;
        static orSelf(o: any): this;
        static json(array: any): Internal.JsonArray;
        getLength(): number;
        unshift(... o: any[]): this;
        toString(): string;
        copy(): this;
        map(transformer: Internal.Function_<any, any>): this;
        "changeListener" : ((arg0: Internal.ListJS) => void);
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ListJS_ = ListJS;
    /**
    * @javaClass java.util.ListIterator
    */
    interface ListIterator <E> extends Internal.Iterator<E> {
        next(): E;
        add(arg0: E): void;
        set(arg0: E): void;
        previous(): E;
        hasPrevious(): boolean;
        hasNext(): boolean;
        nextIndex(): number;
        previousIndex(): number;
        remove(): void;
    }
    type ListIterator_<E> = ListIterator<E>;
    /**
    * @javaClass com.mojang.brigadier.exceptions.CommandExceptionType
    */
    interface CommandExceptionType {
    }
    type CommandExceptionType_ = CommandExceptionType;
    /**
    * @javaClass java.awt.Font
    */
    class Font implements Internal.Serializable {
        getName(): string;
        isTransformed(): boolean;
        getMaxCharBounds(arg0: Internal.FontRenderContext_): Internal.Rectangle2D;
        isPlain(): boolean;
        getMissingGlyphCode(): number;
        static decode(arg0: string): this;
        isItalic(): boolean;
        getFontName(arg0: Internal.Locale_): string;
        getFontName(): string;
        getStyle(): number;
        getAvailableAttributes(): Internal.AttributedCharacterIterator$Attribute[];
        hashCode(): number;
        getBaselineFor(arg0: string): number;
        getLineMetrics(arg0: string, arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.LineMetrics;
        getLineMetrics(arg0: string[], arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.LineMetrics;
        getLineMetrics(arg0: string, arg1: Internal.FontRenderContext_): Internal.LineMetrics;
        getLineMetrics(arg0: Internal.CharacterIterator_, arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.LineMetrics;
        static createFonts(arg0: Internal.File_): Internal.Font[];
        static createFonts(arg0: Internal.InputStream_): Internal.Font[];
        getSize2D(): number;
        getTransform(): Internal.AffineTransform;
        hasUniformLineMetrics(): boolean;
        getStringBounds(arg0: string, arg1: Internal.FontRenderContext_): Internal.Rectangle2D;
        getStringBounds(arg0: Internal.CharacterIterator_, arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.Rectangle2D;
        getStringBounds(arg0: string[], arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.Rectangle2D;
        getStringBounds(arg0: string, arg1: number, arg2: number, arg3: Internal.FontRenderContext_): Internal.Rectangle2D;
        canDisplay(arg0: number): boolean;
        canDisplay(arg0: string): boolean;
        getAttributes(): Internal.Map<Internal.TextAttribute, any>;
        deriveFont(arg0: number, arg1: Internal.AffineTransform_): this;
        deriveFont(arg0: number): this;
        deriveFont(arg0: Internal.AffineTransform_): this;
        deriveFont(arg0: number, arg1: number): this;
        deriveFont(arg0: Internal.Map_<Internal.AttributedCharacterIterator$Attribute_, any>): this;
        getPSName(): string;
        hasLayoutAttributes(): boolean;
        isBold(): boolean;
        getNumGlyphs(): number;
        canDisplayUpTo(arg0: Internal.CharacterIterator_, arg1: number, arg2: number): number;
        canDisplayUpTo(arg0: string[], arg1: number, arg2: number): number;
        canDisplayUpTo(arg0: string): number;
        getItalicAngle(): number;
        createGlyphVector(arg0: Internal.FontRenderContext_, arg1: number[]): Internal.GlyphVector;
        createGlyphVector(arg0: Internal.FontRenderContext_, arg1: Internal.CharacterIterator_): Internal.GlyphVector;
        createGlyphVector(arg0: Internal.FontRenderContext_, arg1: string): Internal.GlyphVector;
        createGlyphVector(arg0: Internal.FontRenderContext_, arg1: string[]): Internal.GlyphVector;
        getSize(): number;
        getFamily(arg0: Internal.Locale_): string;
        getFamily(): string;
        static textRequiresLayout(arg0: string[], arg1: number, arg2: number): boolean;
        equals(arg0: any): boolean;
        static getFont(arg0: string, arg1: Internal.Font_): this;
        static getFont(arg0: Internal.Map_<Internal.AttributedCharacterIterator$Attribute_, any>): this;
        static getFont(arg0: string): this;
        toString(): string;
        static createFont(arg0: number, arg1: Internal.InputStream_): this;
        static createFont(arg0: number, arg1: Internal.File_): this;
        layoutGlyphVector(arg0: Internal.FontRenderContext_, arg1: string[], arg2: number, arg3: number, arg4: number): Internal.GlyphVector;
        static readonly "PLAIN" : 0;
        static readonly "ITALIC" : 2;
        static readonly "CENTER_BASELINE" : 1;
        static readonly "HANGING_BASELINE" : 2;
        static readonly "DIALOG" : "Dialog";
        static readonly "MONOSPACED" : "Monospaced";
        static readonly "DIALOG_INPUT" : "DialogInput";
        static readonly "LAYOUT_NO_LIMIT_CONTEXT" : 4;
        static readonly "LAYOUT_RIGHT_TO_LEFT" : 1;
        static readonly "SANS_SERIF" : "SansSerif";
        static readonly "SERIF" : "Serif";
        static readonly "TRUETYPE_FONT" : 0;
        static readonly "ROMAN_BASELINE" : 0;
        static readonly "LAYOUT_NO_START_CONTEXT" : 2;
        static readonly "LAYOUT_LEFT_TO_RIGHT" : 0;
        static readonly "BOLD" : 1;
        static readonly "TYPE1_FONT" : 1;
        get italicAngle(): number;
        get numGlyphs(): number;
        get bold(): boolean;
        get availableAttributes(): Internal.AttributedCharacterIterator$Attribute[];
        get italic(): boolean;
        get size2D(): number;
        get fontName(): string;
        get transform(): Internal.AffineTransform;
        get size(): number;
        get plain(): boolean;
        get name(): string;
        get transformed(): boolean;
        get missingGlyphCode(): number;
        get style(): number;
        get attributes(): Internal.Map<Internal.TextAttribute, any>;
        get pSName(): string;
        get family(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Font_ = Font;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.DoubleIterator
    */
    interface DoubleIterator extends Internal.PrimitiveIterator$OfDouble {
        next(): number;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.doubles.DoubleConsumer_): void;
        nextDouble(): number;
    }
    type DoubleIterator_ = (() => number) | DoubleIterator;
    /**
    * Fired by different tag everytime when a player:
    * - ticks
    * - logged in
    * - logged out
    * @javaClass dev.latvian.mods.kubejs.player.SimplePlayerEventJS
    */
    class SimplePlayerEventJS extends Internal.PlayerEventJS {
        getEntity(): Internal.EntityJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired by different tag everytime when a player:
    * - ticks
    * - logged in
    * - logged out
    */
    type SimplePlayerEventJS_ = SimplePlayerEventJS;
    /**
    * @javaClass net.minecraft.network.protocol.PacketFlow
    */
    class PacketFlow extends Internal.Enum<Internal.PacketFlow> {
        static valueOf(arg0: string): this;
        static values(): Internal.PacketFlow[];
        static readonly "CLIENTBOUND" : Internal.PacketFlow;
        static readonly "SERVERBOUND" : Internal.PacketFlow;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PacketFlow_ = "serverbound" | "clientbound" | PacketFlow;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.NumberConfig
    */
    abstract class NumberConfig <T> extends Internal.ConfigFromString<T> {
        getStringForGUI(v: T): net.minecraft.network.chat.Component;
        getColor(v: T): Internal.Color4I;
        fader(v: boolean): Internal.NumberConfig<T>;
        readonly "min" : T;
        readonly "max" : T;
        static readonly "COLOR" : Internal.Color4I;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NumberConfig_<T> = NumberConfig<T>;
    /**
    * @javaClass net.minecraftforge.client.extensions.IForgeModelState
    */
    interface IForgeModelState {
        getPartTransformation(arg0: any): Internal.Transformation;
    }
    type IForgeModelState_ = IForgeModelState;
    /**
    * @javaClass net.minecraftforge.common.util.TriPredicate
    */
    interface TriPredicate <T, U, V> {
        or(arg0: Internal.TriPredicate_<T, U, V>): Internal.TriPredicate<T, U, V>;
        test(arg0: T, arg1: U, arg2: V): boolean;
        and(arg0: Internal.TriPredicate_<T, U, V>): Internal.TriPredicate<T, U, V>;
        negate(): Internal.TriPredicate<T, U, V>;
    }
    type TriPredicate_<T, U, V> = ((arg0: T, arg1: U, arg2: V) => boolean) | TriPredicate<T, U, V>;
    /**
    * @javaClass java.nio.ByteBuffer
    */
    abstract class ByteBuffer extends Internal.Buffer implements Internal.Comparable<Internal.ByteBuffer> {
        asIntBuffer(): Internal.IntBuffer;
        compact(): this;
        asLongBuffer(): Internal.LongBuffer;
        putDouble(arg0: number, arg1: number): this;
        putDouble(arg0: number): this;
        getDouble(arg0: number): number;
        getDouble(): number;
        getFloat(): number;
        getFloat(arg0: number): number;
        compareTo(arg0: Internal.ByteBuffer_): number;
        putLong(arg0: number, arg1: number): this;
        putLong(arg0: number): this;
        asReadOnlyBuffer(): this;
        put(arg0: Internal.ByteBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number): this;
        put(arg0: number, arg1: Internal.ByteBuffer_, arg2: number, arg3: number): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        asDoubleBuffer(): Internal.DoubleBuffer;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        get(arg0: number): number;
        get(): number;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        arrayOffset(): number;
        putShort(arg0: number, arg1: number): this;
        putShort(arg0: number): this;
        flip(): this;
        order(arg0: Internal.ByteOrder_): this;
        order(): Internal.ByteOrder;
        asFloatBuffer(): Internal.FloatBuffer;
        asCharBuffer(): Internal.CharBuffer;
        static allocateDirect(arg0: number): this;
        hasArray(): boolean;
        putInt(arg0: number, arg1: number): this;
        putInt(arg0: number): this;
        getShort(): number;
        getShort(arg0: number): number;
        putChar(arg0: number, arg1: string): this;
        putChar(arg0: string): this;
        clear(): this;
        duplicate(): this;
        getLong(arg0: number): number;
        getLong(): number;
        putFloat(arg0: number, arg1: number): this;
        putFloat(arg0: number): this;
        getInt(arg0: number): number;
        getInt(): number;
        getChar(): string;
        getChar(arg0: number): string;
        alignmentOffset(arg0: number, arg1: number): number;
        static allocate(arg0: number): this;
        rewind(): this;
        mismatch(arg0: Internal.ByteBuffer_): number;
        equals(arg0: any): boolean;
        reset(): this;
        toString(): string;
        position(arg0: number): this;
        alignedSlice(arg0: number): this;
        isDirect(): boolean;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        static wrap(arg0: number[]): this;
        asShortBuffer(): Internal.ShortBuffer;
        mark(): this;
        get double(): number;
        get char(): string;
        get direct(): boolean;
        get short(): number;
        get float(): number;
        get long(): number;
        get int(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ByteBuffer_ = ByteBuffer;
    /**
    * @javaClass java.awt.event.AWTEventListener
    */
    interface AWTEventListener extends Internal.EventListener {
        eventDispatched(arg0: Internal.AWTEvent_): void;
    }
    type AWTEventListener_ = ((arg0: Internal.AWTEvent) => void) | AWTEventListener;
    /**
    * @javaClass java.awt.font.TextHitInfo
    */
    class TextHitInfo {
        static beforeOffset(arg0: number): this;
        getOtherHit(): this;
        static trailing(arg0: number): this;
        getOffsetHit(arg0: number): this;
        isLeadingEdge(): boolean;
        static leading(arg0: number): this;
        hashCode(): number;
        equals(arg0: any): boolean;
        equals(arg0: Internal.TextHitInfo_): boolean;
        static afterOffset(arg0: number): this;
        toString(): string;
        getCharIndex(): number;
        getInsertionIndex(): number;
        get otherHit(): this;
        get charIndex(): number;
        get leadingEdge(): boolean;
        get insertionIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextHitInfo_ = TextHitInfo;
    /**
    * @javaClass com.mojang.datafixers.kinds.K1
    */
    interface K1 {
    }
    type K1_ = K1;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.ServerTeam
    */
    class ServerTeam extends Internal.Team {
        getType(): Internal.TeamType;
        delete(source: Internal.CommandSourceStack_): number;
        get type(): Internal.TeamType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerTeam_ = ServerTeam;
    /**
    * @javaClass java.lang.constant.DynamicConstantDesc
    */
    abstract class DynamicConstantDesc <T> implements Internal.ConstantDesc {
        static ofCanonical<T>(arg0: Internal.DirectMethodHandleDesc_, arg1: string, arg2: Internal.ClassDesc_, arg3: Internal.ConstantDesc_[]): Internal.ConstantDesc;
        constantType(): Internal.ClassDesc;
        bootstrapMethod(): Internal.DirectMethodHandleDesc;
        constantName(): string;
        hashCode(): number;
        bootstrapArgsList(): Internal.List<Internal.ConstantDesc>;
        bootstrapArgs(): Internal.ConstantDesc[];
        static of<T>(arg0: Internal.DirectMethodHandleDesc_, ... arg1: Internal.ConstantDesc_[]): Internal.DynamicConstantDesc<T>;
        static of<T>(arg0: Internal.DirectMethodHandleDesc_): Internal.DynamicConstantDesc<T>;
        equals(arg0: any): boolean;
        static ofNamed<T>(arg0: Internal.DirectMethodHandleDesc_, arg1: string, arg2: Internal.ClassDesc_, ... arg3: Internal.ConstantDesc_[]): Internal.DynamicConstantDesc<T>;
        toString(): string;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup_): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DynamicConstantDesc_<T> = DynamicConstantDesc<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.ComponentKJS
    */
    interface ComponentKJS extends net.minecraft.network.chat.Component, Internal.Iterable<net.minecraft.network.chat.Component>, Internal.JsonSerializable, Internal.WrappedJS {
        color(c: dev.latvian.mods.rhino.mod.util.color.Color_): Internal.MutableComponent;
        yellow(): Internal.MutableComponent;
        italic(value: boolean): Internal.MutableComponent;
        italic(): Internal.MutableComponent;
        darkBlue(): Internal.MutableComponent;
        gold(): Internal.MutableComponent;
        red(): Internal.MutableComponent;
        hover(s: net.minecraft.network.chat.Component_): Internal.MutableComponent;
        aqua(): Internal.MutableComponent;
        iterator(): Internal.Iterator<net.minecraft.network.chat.Component>;
        gray(): Internal.MutableComponent;
        white(): Internal.MutableComponent;
        darkRed(): Internal.MutableComponent;
        noColor(): Internal.MutableComponent;
        darkPurple(): Internal.MutableComponent;
        strikethrough(value: boolean): Internal.MutableComponent;
        strikethrough(): Internal.MutableComponent;
        obfuscated(): Internal.MutableComponent;
        obfuscated(value: boolean): Internal.MutableComponent;
        green(): Internal.MutableComponent;
        darkGreen(): Internal.MutableComponent;
        black(): Internal.MutableComponent;
        lightPurple(): Internal.MutableComponent;
        bold(value: boolean): Internal.MutableComponent;
        bold(): Internal.MutableComponent;
        click(s: Internal.ClickEvent_): Internal.MutableComponent;
        darkAqua(): Internal.MutableComponent;
        toJson(): Internal.JsonElement;
        blue(): Internal.MutableComponent;
        underlined(value: boolean): Internal.MutableComponent;
        underlined(): Internal.MutableComponent;
        darkGray(): Internal.MutableComponent;
        self(): Internal.MutableComponent;
        insertion(s: string): Internal.MutableComponent;
        font(s: ResourceLocation_): Internal.MutableComponent;
    }
    type ComponentKJS_ = ComponentKJS;
    /**
    * @javaClass net.minecraft.core.RegistryAccess
    */
    interface RegistryAccess {
    }
    type RegistryAccess_ = RegistryAccess;
    /**
    * @javaClass java.awt.event.WindowStateListener
    */
    interface WindowStateListener extends Internal.EventListener {
        windowStateChanged(arg0: Internal.WindowEvent_): void;
    }
    type WindowStateListener_ = ((arg0: Internal.WindowEvent) => void) | WindowStateListener;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$CameraSetup
    */
    class EntityViewRenderEvent$CameraSetup extends Internal.EntityViewRenderEvent {
        setRoll(arg0: number): void;
        getYaw(): number;
        getListenerList(): Internal.ListenerList;
        getPitch(): number;
        getRoll(): number;
        setPitch(arg0: number): void;
        setYaw(arg0: number): void;
        get listenerList(): Internal.ListenerList;
        get roll(): number;
        get pitch(): number;
        get yaw(): number;
        set roll(arg0: number);
        set pitch(arg0: number);
        set yaw(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$CameraSetup_ = EntityViewRenderEvent$CameraSetup;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.SequencedAssemblyItemBuilder
    */
    class SequencedAssemblyItemBuilder extends Internal.ItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SequencedAssemblyItemBuilder_ = SequencedAssemblyItemBuilder;
    /**
    * @javaClass com.jozufozu.flywheel.api.MaterialGroup
    */
    interface MaterialGroup {
        material<D>(arg0: Internal.StructType_<D>): com.jozufozu.flywheel.api.Material<D>;
    }
    type MaterialGroup_ = ((arg0: Internal.StructType<D>) => com.jozufozu.flywheel.api.Material<D>) | MaterialGroup;
    /**
    * @javaClass net.minecraftforge.fml.config.ModConfig$Type
    */
    class ModConfig$Type extends Internal.Enum<Internal.ModConfig$Type> {
        extension(): string;
        static valueOf(arg0: string): this;
        static values(): Internal.ModConfig$Type[];
        static readonly "SERVER" : Internal.ModConfig$Type;
        static readonly "COMMON" : Internal.ModConfig$Type;
        static readonly "CLIENT" : Internal.ModConfig$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModConfig$Type_ = "server" | "common" | "client" | ModConfig$Type;
    /**
    * @javaClass net.minecraft.world.item.AirItem
    */
    class AirItem extends Internal.Item {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AirItem_ = AirItem;
    /**
    * @javaClass org.slf4j.Marker
    */
    interface Marker extends Internal.Serializable {
        add(arg0: Internal.Marker_): void;
        contains(arg0: string): boolean;
        contains(arg0: Internal.Marker_): boolean;
        iterator(): Internal.Iterator<Internal.Marker>;
        getName(): string;
        hasChildren(): boolean;
        hashCode(): number;
        hasReferences(): boolean;
        equals(arg0: any): boolean;
        remove(arg0: Internal.Marker_): boolean;
    }
    type Marker_ = Marker;
    /**
    * @javaClass java.io.Closeable
    */
    interface Closeable extends Internal.AutoCloseable {
        close(): void;
    }
    type Closeable_ = (() => void) | Closeable;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.PlayerTeam
    */
    class PlayerTeam extends Internal.Team {
        updatePresence(): void;
        getPlayer(): Internal.ServerPlayer;
        createParty(player: Internal.ServerPlayer_, name: string, description: string, color: number, invited: Internal.Set_<Internal.GameProfile_>): void;
        getOnlineMembers(): Internal.List<Internal.ServerPlayer>;
        getType(): Internal.TeamType;
        getHighestRank(playerId: Internal.UUID_): Internal.TeamRank;
        deserializeNBT(tag: Internal.CompoundTag_): void;
        hasTeam(): boolean;
        "actualTeam" : Internal.Team;
        "playerName" : string;
        "online" : boolean;
        get onlineMembers(): Internal.List<Internal.ServerPlayer>;
        get type(): Internal.TeamType;
        get player(): Internal.ServerPlayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerTeam_ = PlayerTeam;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.properties.AddLakeProperties
    */
    class AddLakeProperties {
        setInner(p: BlockStatePredicate_): void;
        setOuter(p: BlockStatePredicate_): void;
        "barrier" : ((arg0: Internal.BlockState) => boolean);
        "chance" : number;
        "biomes" : ((arg0: Internal.BiomeModifications$BiomeContext) => boolean);
        "retrogen" : number;
        "fluid" : ((arg0: Internal.BlockState) => boolean);
        "id" : ResourceLocation;
        "worldgenLayer" : DecorationGenerationStep;
        set outer(p: BlockStatePredicate_);
        set inner(p: BlockStatePredicate_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AddLakeProperties_ = AddLakeProperties;
    /**
    * @javaClass net.minecraft.client.renderer.FogRenderer$FogMode
    */
    class FogRenderer$FogMode extends Internal.Enum<Internal.FogRenderer$FogMode> {
        static valueOf(arg0: string): this;
        static values(): Internal.FogRenderer$FogMode[];
        static readonly "FOG_TERRAIN" : Internal.FogRenderer$FogMode;
        static readonly "FOG_SKY" : Internal.FogRenderer$FogMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FogRenderer$FogMode_ = "fog_terrain" | "fog_sky" | FogRenderer$FogMode;
    /**
    * @javaClass java.net.Proxy
    */
    class Proxy {
        address(): Internal.SocketAddress;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        type(): Internal.Proxy$Type;
        static readonly "NO_PROXY" : Internal.Proxy;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Proxy_ = Proxy;
    /**
    * @javaClass java.lang.reflect.Member
    */
    interface Member {
        getDeclaringClass(): typeof any;
        getName(): string;
        isSynthetic(): boolean;
        getModifiers(): number;
    }
    type Member_ = Member;
    /**
    * @javaClass java.awt.Toolkit
    */
    abstract class Toolkit {
        beep(): void;
        createDragGestureRecognizer<T>(arg0: Internal.Class_<T>, arg1: Internal.DragSource_, arg2: Internal.Component_, arg3: number, arg4: Internal.DragGestureListener_): T;
        isModalityTypeSupported(arg0: Internal.Dialog$ModalityType_): boolean;
        getScreenInsets(arg0: Internal.GraphicsConfiguration_): Internal.Insets;
        getMenuShortcutKeyMaskEx(): number;
        addAWTEventListener(arg0: Internal.AWTEventListener_, arg1: number): void;
        getLockingKeyState(arg0: number): boolean;
        areExtraMouseButtonsEnabled(): boolean;
        getFontMetrics(arg0: Internal.Font_): Internal.FontMetrics;
        getAWTEventListeners(arg0: number): Internal.AWTEventListener[];
        getAWTEventListeners(): Internal.AWTEventListener[];
        getScreenResolution(): number;
        checkImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.ImageObserver_): number;
        removeAWTEventListener(arg0: Internal.AWTEventListener_): void;
        getPrintJob(arg0: Internal.Frame_, arg1: string, arg2: Internal.JobAttributes_, arg3: Internal.PageAttributes_): Internal.PrintJob;
        getPrintJob(arg0: Internal.Frame_, arg1: string, arg2: Internal.Properties_): Internal.PrintJob;
        getSystemEventQueue(): Internal.EventQueue;
        getBestCursorSize(arg0: number, arg1: number): Internal.Dimension;
        createCustomCursor(arg0: Internal.Image_, arg1: Internal.Point_, arg2: string): Internal.Cursor;
        isFrameStateSupported(arg0: number): boolean;
        getScreenSize(): Internal.Dimension;
        addPropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        isAlwaysOnTopSupported(): boolean;
        getSystemClipboard(): Internal.Clipboard;
        getDesktopProperty(arg0: string): any;
        getFontList(): string[];
        getPropertyChangeListeners(): Internal.PropertyChangeListener[];
        getPropertyChangeListeners(arg0: string): Internal.PropertyChangeListener[];
        getColorModel(): Internal.ColorModel;
        static getProperty(arg0: string, arg1: string): string;
        createImage(arg0: Internal.URL_): Internal.Image;
        createImage(arg0: Internal.ImageProducer_): Internal.Image;
        createImage(arg0: number[], arg1: number, arg2: number): Internal.Image;
        createImage(arg0: number[]): Internal.Image;
        createImage(arg0: string): Internal.Image;
        static getDefaultToolkit(): this;
        isDynamicLayoutActive(): boolean;
        getSystemSelection(): Internal.Clipboard;
        removePropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        sync(): void;
        setLockingKeyState(arg0: number, arg1: boolean): void;
        isModalExclusionTypeSupported(arg0: Internal.Dialog$ModalExclusionType_): boolean;
        prepareImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.ImageObserver_): boolean;
        getMenuShortcutKeyMask(): number;
        getMaximumCursorColors(): number;
        setDynamicLayout(arg0: boolean): void;
        getImage(arg0: string): Internal.Image;
        getImage(arg0: Internal.URL_): Internal.Image;
        mapInputMethodHighlight(arg0: Internal.InputMethodHighlight_): Internal.Map<Internal.TextAttribute, any>;
        get dynamicLayoutActive(): boolean;
        get menuShortcutKeyMaskEx(): number;
        get aWTEventListeners(): Internal.AWTEventListener[];
        get systemClipboard(): Internal.Clipboard;
        get fontList(): string[];
        get systemEventQueue(): Internal.EventQueue;
        get screenSize(): Internal.Dimension;
        get systemSelection(): Internal.Clipboard;
        get colorModel(): Internal.ColorModel;
        get maximumCursorColors(): number;
        get screenResolution(): number;
        get propertyChangeListeners(): Internal.PropertyChangeListener[];
        get alwaysOnTopSupported(): boolean;
        get defaultToolkit(): this;
        get menuShortcutKeyMask(): number;
        set dynamicLayout(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Toolkit_ = Toolkit;
    /**
    * @javaClass net.minecraft.core.IdMap
    */
    interface IdMap <T> extends Internal.Iterable<T> {
    }
    type IdMap_<T> = IdMap<T>;
    /**
    * @javaClass net.minecraft.world.level.block.state.BlockBehaviour$Properties
    */
    class BlockBehaviour$Properties {
        lootFrom(arg0: Internal.Supplier_<Internal.Block_>): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockBehaviour$Properties_ = BlockBehaviour$Properties;
    /**
    * @javaClass io.netty.util.concurrent.EventExecutor
    */
    interface EventExecutor extends Internal.EventExecutorGroup {
        inEventLoop(arg0: Internal.Thread_): boolean;
        inEventLoop(): boolean;
        next(): this;
        parent(): Internal.EventExecutorGroup;
        newProgressivePromise<V>(): Internal.ProgressivePromise<V>;
        newSucceededFuture<V>(arg0: V): io.netty.util.concurrent.Future<V>;
        newFailedFuture<V>(arg0: Internal.Throwable_): io.netty.util.concurrent.Future<V>;
        newPromise<V>(): Internal.Promise<V>;
    }
    type EventExecutor_ = EventExecutor;
    /**
    * @javaClass java.awt.image.ImageObserver
    */
    interface ImageObserver {
        imageUpdate(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
    }
    type ImageObserver_ = ((arg0: Internal.Image, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number) => boolean) | ImageObserver;
    /**
    * @javaClass io.netty.channel.ChannelHandler
    */
    interface ChannelHandler {
        exceptionCaught(arg0: Internal.ChannelHandlerContext_, arg1: Internal.Throwable_): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext_): void;
        handlerRemoved(arg0: Internal.ChannelHandlerContext_): void;
    }
    type ChannelHandler_ = ChannelHandler;
    /**
    * @javaClass java.util.AbstractCollection
    */
    abstract class AbstractCollection <E> implements Internal.Collection<E> {
        add(arg0: E): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: Internal.Collection_<E>): boolean;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        toArray(): any[];
        toArray<T>(arg0: T[]): T[];
        isEmpty(): boolean;
        clear(): void;
        toString(): string;
        remove(arg0: any): boolean;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractCollection_<E> = AbstractCollection<E>;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.AbstractInstance
    */
    abstract class AbstractInstance implements Internal.Instance, Internal.LightListener {
        init(): void;
        onLightUpdate(arg0: Internal.LightLayer_, arg1: Internal.ImmutableBox_): void;
        removeAndMark(): void;
        isListenerInvalid(): boolean;
        update(): void;
        shouldReset(): boolean;
        updateLight(): void;
        readonly "world" : Internal.Level;
        get listenerInvalid(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractInstance_ = AbstractInstance;
    /**
    * @javaClass mezz.jei.api.gui.builder.IRecipeSlotBuilder
    */
    interface IRecipeSlotBuilder extends Internal.IIngredientAcceptor<Internal.IRecipeSlotBuilder> {
        setFluidRenderer(arg0: number, arg1: boolean, arg2: number, arg3: number): this;
        setSlotName(arg0: string): this;
        addTooltipCallback(arg0: Internal.IRecipeSlotTooltipCallback_): this;
        setCustomRenderer<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.IIngredientRenderer_<T>): this;
        setOverlay(arg0: Internal.IDrawable_, arg1: number, arg2: number): this;
        setBackground(arg0: Internal.IDrawable_, arg1: number, arg2: number): this;
    }
    type IRecipeSlotBuilder_ = IRecipeSlotBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2CharFunction
    */
    interface Long2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.LongToIntFunction {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2CharFunction;
    }
    type Long2CharFunction_ = ((arg0: number) => string) | Long2CharFunction;
    /**
    * @javaClass net.minecraft.client.renderer.MultiBufferSource
    */
    interface MultiBufferSource {
    }
    type MultiBufferSource_ = MultiBufferSource;
    /**
    * @javaClass com.mojang.blaze3d.vertex.DefaultedVertexConsumer
    */
    abstract class DefaultedVertexConsumer implements Internal.VertexConsumer {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DefaultedVertexConsumer_ = DefaultedVertexConsumer;
    /**
    * @javaClass java.nio.file.DirectoryStream$Filter
    */
    interface DirectoryStream$Filter <T> {
        accept(arg0: T): boolean;
    }
    type DirectoryStream$Filter_<T> = ((arg0: T) => boolean) | DirectoryStream$Filter<T>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.TeamPropertyType
    */
    class TeamPropertyType <T> {
        static read(buf: Internal.FriendlyByteBuf_): Internal.TeamProperty<any>;
        static write(buf: Internal.FriendlyByteBuf_, p: Internal.TeamProperty_<any>): void;
        static register<Y>(id: string, p: Internal.TeamPropertyType$FromNet_<Y>): Internal.TeamPropertyType<Y>;
        static readonly "ENUM" : Internal.TeamPropertyType<string>;
        static readonly "PRIVACY_MODE" : Internal.TeamPropertyType<Internal.PrivacyMode>;
        static readonly "COLOR" : Internal.TeamPropertyType<Internal.Color4I>;
        static readonly "STRING" : Internal.TeamPropertyType<string>;
        readonly "deserializer" : ((arg0: ResourceLocation, arg1: Internal.FriendlyByteBuf) => Internal.TeamProperty<Y>);
        static readonly "DOUBLE" : Internal.TeamPropertyType<number>;
        readonly "id" : string;
        static readonly "MAP" : {"boolean":Internal.TeamPropertyType<any>,"string":Internal.TeamPropertyType<any>,"color":Internal.TeamPropertyType<any>,"double":Internal.TeamPropertyType<any>,"privacy_mode":Internal.TeamPropertyType<any>,"int":Internal.TeamPropertyType<any>,"enum":Internal.TeamPropertyType<any>};
        static readonly "BOOLEAN" : Internal.TeamPropertyType<boolean>;
        static readonly "INT" : Internal.TeamPropertyType<number>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamPropertyType_<T> = TeamPropertyType<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.FoodBuilder
    */
    class FoodBuilder {
        saturation(s: number): this;
        build(): Internal.FoodProperties;
        removeEffect(mobEffect: Internal.MobEffect_): this;
        /**
        */
        effect(mobEffectId: Special.MobEffect, duration: number, amplifier: number, probability: number): this;
        meat(): this;
        meat(flag: boolean): this;
        alwaysEdible(): this;
        alwaysEdible(flag: boolean): this;
        fastToEat(flag: boolean): this;
        fastToEat(): this;
        eaten(e: Internal.Consumer_<Internal.ItemFoodEatenEventJS_>): this;
        hunger(h: number): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type FoodBuilder_ = FoodBuilder;
    /**
    * @javaClass net.minecraft.client.renderer.entity.ItemRenderer
    */
    class ItemRenderer implements Internal.ResourceManagerReloadListener, Internal.AccessorItemRenderer {
        getBlockEntityRenderer(): Internal.BlockEntityWithoutLevelRenderer;
        handler$zfn000$onRenderItem(arg0: Internal.ItemStack_, arg1: Internal.ItemTransforms$TransformType_, arg2: boolean, arg3: Internal.PoseStack_, arg4: Internal.MultiBufferSource_, arg5: number, arg6: number, arg7: Internal.BakedModel_, arg8: Internal.CallbackInfo_): void;
        get blockEntityRenderer(): Internal.BlockEntityWithoutLevelRenderer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemRenderer_ = ItemRenderer;
    /**
    * @javaClass java.awt.datatransfer.ClipboardOwner
    */
    interface ClipboardOwner {
        lostOwnership(arg0: Internal.Clipboard_, arg1: Internal.Transferable_): void;
    }
    type ClipboardOwner_ = ((arg0: Internal.Clipboard, arg1: Internal.Transferable) => void) | ClipboardOwner;
    /**
    * @javaClass com.google.common.collect.Multiset$Entry
    */
    interface Multiset$Entry <E> {
        getElement(): E;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        getCount(): number;
    }
    type Multiset$Entry_<E> = Multiset$Entry<E>;
    /**
    * @javaClass java.awt.geom.Line2D
    */
    abstract class Line2D implements Internal.Shape, Internal.Cloneable {
        getP2(): Internal.Point2D;
        relativeCCW(arg0: Internal.Point2D_): number;
        static relativeCCW(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        relativeCCW(arg0: number, arg1: number): number;
        intersects(arg0: Internal.Rectangle2D_): boolean;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        static linesIntersect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number): boolean;
        ptLineDistSq(arg0: number, arg1: number): number;
        ptLineDistSq(arg0: Internal.Point2D_): number;
        static ptLineDistSq(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        getX2(): number;
        getP1(): Internal.Point2D;
        ptLineDist(arg0: Internal.Point2D_): number;
        static ptLineDist(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        ptLineDist(arg0: number, arg1: number): number;
        getBounds(): Internal.Rectangle;
        ptSegDistSq(arg0: number, arg1: number): number;
        ptSegDistSq(arg0: Internal.Point2D_): number;
        static ptSegDistSq(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        intersectsLine(arg0: Internal.Line2D_): boolean;
        intersectsLine(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: Internal.Point2D_): boolean;
        contains(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: Internal.Rectangle2D_): boolean;
        contains(arg0: number, arg1: number): boolean;
        getY2(): number;
        getX1(): number;
        getPathIterator(arg0: Internal.AffineTransform_): Internal.PathIterator;
        getPathIterator(arg0: Internal.AffineTransform_, arg1: number): Internal.PathIterator;
        ptSegDist(arg0: number, arg1: number): number;
        static ptSegDist(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): number;
        ptSegDist(arg0: Internal.Point2D_): number;
        getY1(): number;
        clone(): any;
        setLine(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setLine(arg0: Internal.Line2D_): void;
        setLine(arg0: Internal.Point2D_, arg1: Internal.Point2D_): void;
        get p1(): Internal.Point2D;
        get p2(): Internal.Point2D;
        get bounds(): Internal.Rectangle;
        get y1(): number;
        get y2(): number;
        get x1(): number;
        get x2(): number;
        set line(arg0: Internal.Line2D_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Line2D_ = Line2D;
    /**
    * @javaClass mezz.jei.api.recipe.IFocus
    */
    interface IFocus <V> {
        getValue(): V;
        checkedCast<T>(arg0: Internal.IIngredientType_<T>): Internal.Optional<Internal.IFocus<T>>;
        getRole(): Internal.RecipeIngredientRole;
        getTypedValue(): Internal.ITypedIngredient<V>;
        getMode(): Internal.IFocus$Mode;
    }
    type IFocus_<V> = IFocus<V>;
    /**
    * @javaClass com.mojang.brigadier.exceptions.DynamicCommandExceptionType
    */
    class DynamicCommandExceptionType implements Internal.CommandExceptionType {
        createWithContext(arg0: Internal.ImmutableStringReader_, arg1: any): Internal.CommandSyntaxException;
        create(arg0: any): Internal.CommandSyntaxException;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DynamicCommandExceptionType_ = DynamicCommandExceptionType;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ArmorItemBuilder
    */
    class ArmorItemBuilder extends Internal.ItemBuilder {
        tier(t: Internal.ArmorMaterial_): this;
        modifyTier(callback: Internal.Consumer_<Internal.MutableArmorTier_>): this;
        createObject(): Internal.Item;
        "armorTier" : Internal.MutableArmorTier;
        readonly "equipmentSlot" : EquipmentSlot;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArmorItemBuilder_ = ArmorItemBuilder;
    /**
    * @javaClass net.minecraft.world.level.BlockGetter
    */
    interface BlockGetter extends Internal.LevelHeightAccessor, Internal.IForgeBlockGetter {
    }
    type BlockGetter_ = BlockGetter;
    /**
    * @javaClass org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable
    */
    class CallbackInfoReturnable <R> extends Internal.CallbackInfo {
        setReturnValue(arg0: R): void;
        getReturnValue(): R;
        getReturnValueB(): number;
        getReturnValueI(): number;
        getReturnValueZ(): boolean;
        getReturnValueJ(): number;
        getReturnValueS(): number;
        getReturnValueC(): string;
        getReturnValueD(): number;
        getReturnValueF(): number;
        get returnValueS(): number;
        get returnValueC(): string;
        get returnValueD(): number;
        get returnValue(): R;
        get returnValueB(): number;
        get returnValueF(): number;
        get returnValueI(): number;
        get returnValueZ(): boolean;
        get returnValueJ(): number;
        set returnValue(arg0: R);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CallbackInfoReturnable_<R> = CallbackInfoReturnable<R>;
    /**
    * @javaClass com.google.common.collect.Multiset
    */
    interface Multiset <E> extends Internal.Collection<E> {
        add(arg0: E, arg1: number): number;
        add(arg0: E): boolean;
        forEachEntry(arg0: Internal.ObjIntConsumer_<E>): void;
        entrySet(): Internal.Set<Internal.Multiset$Entry<E>>;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: Internal.Consumer_<E>): void;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        count(arg0: any): number;
        remove(arg0: any, arg1: number): number;
        remove(arg0: any): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        elementSet(): Internal.Set<E>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        setCount(arg0: E, arg1: number, arg2: number): boolean;
        setCount(arg0: E, arg1: number): number;
        retainAll(arg0: Internal.Collection_<any>): boolean;
    }
    type Multiset_<E> = Multiset<E>;
    /**
    * @javaClass net.minecraftforge.forgespi.language.ModFileScanData$AnnotationData
    */
    class ModFileScanData$AnnotationData extends Internal.Record {
        annotationData(): Internal.Map<string, any>;
        hashCode(): number;
        equals(arg0: any): boolean;
        memberName(): string;
        annotationType(): org.objectweb.asm.Type;
        targetType(): Internal.ElementType;
        toString(): string;
        clazz(): org.objectweb.asm.Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModFileScanData$AnnotationData_ = ModFileScanData$AnnotationData;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2IntFunction
    */
    interface Short2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2IntFunction;
    }
    type Short2IntFunction_ = ((arg0: number) => number) | Short2IntFunction;
    /**
    * @javaClass java.nio.DoubleBuffer
    */
    abstract class DoubleBuffer extends Internal.Buffer implements Internal.Comparable<Internal.DoubleBuffer> {
        hasArray(): boolean;
        compact(): this;
        clear(): this;
        duplicate(): this;
        compareTo(arg0: Internal.DoubleBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.DoubleBuffer_, arg2: number, arg3: number): this;
        put(arg0: Internal.DoubleBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        mismatch(arg0: Internal.DoubleBuffer_): number;
        equals(arg0: any): boolean;
        get(): number;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        reset(): this;
        arrayOffset(): number;
        toString(): string;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        static wrap(arg0: number[]): this;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        mark(): this;
        order(): Internal.ByteOrder;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DoubleBuffer_ = DoubleBuffer;
    /**
    * @javaClass com.simibubi.create.foundation.tileEntity.TileEntityBehaviour
    */
    abstract class TileEntityBehaviour {
        onNeighborChanged(arg0: BlockPos_): void;
        getWorld(): Internal.Level;
        read(arg0: Internal.CompoundTag_, arg1: boolean): void;
        onBlockChanged(arg0: Internal.BlockState_): void;
        destroy(): void;
        static destroy<T>(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.BehaviourType_<T>): void;
        lazyTick(): void;
        setLazyTickRate(arg0: number): void;
        tick(): void;
        remove(): void;
        getRequiredItems(): Internal.ItemRequirement;
        getType(): Internal.BehaviourType<any>;
        getPos(): BlockPos;
        static get<T>(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.BehaviourType_<T>): T;
        static get<T>(arg0: Internal.BlockEntity_, arg1: Internal.BehaviourType_<T>): T;
        isSafeNBT(): boolean;
        initialize(): void;
        write(arg0: Internal.CompoundTag_, arg1: boolean): void;
        "tileEntity" : Internal.SmartTileEntity;
        get world(): Internal.Level;
        get pos(): BlockPos;
        get type(): Internal.BehaviourType<any>;
        get safeNBT(): boolean;
        get requiredItems(): Internal.ItemRequirement;
        set lazyTickRate(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TileEntityBehaviour_ = TileEntityBehaviour;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseReleasedEvent
    */
    abstract class ScreenEvent$MouseReleasedEvent extends Internal.ScreenEvent$MouseInputEvent {
        getButton(): number;
        getListenerList(): Internal.ListenerList;
        get button(): number;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseReleasedEvent_ = ScreenEvent$MouseReleasedEvent;
    /**
    * @javaClass java.time.temporal.ValueRange
    */
    class ValueRange implements Internal.Serializable {
        getMaximum(): number;
        getSmallestMaximum(): number;
        isIntValue(): boolean;
        getLargestMinimum(): number;
        isValidValue(arg0: number): boolean;
        hashCode(): number;
        static of(arg0: number, arg1: number): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number): this;
        static of(arg0: number, arg1: number, arg2: number): this;
        equals(arg0: any): boolean;
        getMinimum(): number;
        checkValidValue(arg0: number, arg1: Internal.TemporalField_): number;
        checkValidIntValue(arg0: number, arg1: Internal.TemporalField_): number;
        toString(): string;
        isFixed(): boolean;
        isValidIntValue(arg0: number): boolean;
        get largestMinimum(): number;
        get smallestMaximum(): number;
        get intValue(): boolean;
        get maximum(): number;
        get fixed(): boolean;
        get minimum(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ValueRange_ = ValueRange;
    /**
    * @javaClass net.minecraftforge.client.event.FOVModifierEvent
    */
    class FOVModifierEvent extends net.minecraftforge.eventbus.api.Event {
        getNewfov(): number;
        getListenerList(): Internal.ListenerList;
        setNewfov(arg0: number): void;
        getEntity(): Internal.Player;
        getFov(): number;
        get listenerList(): Internal.ListenerList;
        get newfov(): number;
        get fov(): number;
        get entity(): Internal.Player;
        set newfov(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FOVModifierEvent_ = FOVModifierEvent;
    /**
    * @javaClass java.util.function.Function
    */
    interface Function <T, R> {
        compose<V>(arg0: Internal.Function_<V, T>): Internal.Function<V, R>;
        apply(arg0: T): R;
        identity<T>(): Internal.Function<T, T>;
        andThen<V>(arg0: Internal.Function_<R, V>): Internal.Function<T, V>;
    }
    type Function_<T, R> = ((arg0: T) => R) | Function<T, R>;
    /**
    * @javaClass com.mojang.brigadier.context.ParsedCommandNode
    */
    class ParsedCommandNode <S> {
        getRange(): Internal.StringRange;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        getNode(): Internal.CommandNode<S>;
        get node(): Internal.CommandNode<S>;
        get range(): Internal.StringRange;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParsedCommandNode_<S> = ParsedCommandNode<S>;
    /**
    * @javaClass javax.accessibility.AccessibleContext
    */
    abstract class AccessibleContext {
        getAccessibleRelationSet(): Internal.AccessibleRelationSet;
        getAccessibleStateSet(): Internal.AccessibleStateSet;
        firePropertyChange(arg0: string, arg1: any, arg2: any): void;
        getAccessibleName(): string;
        getAccessibleIndexInParent(): number;
        setAccessibleParent(arg0: Internal.Accessible_): void;
        setAccessibleName(arg0: string): void;
        getAccessibleValue(): Internal.AccessibleValue;
        removePropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        getAccessibleText(): Internal.AccessibleText;
        getAccessibleTable(): Internal.AccessibleTable;
        getAccessibleAction(): Internal.AccessibleAction;
        getAccessibleDescription(): string;
        getAccessibleEditableText(): Internal.AccessibleEditableText;
        getAccessibleIcon(): any[];
        setAccessibleDescription(arg0: string): void;
        getAccessibleChild(arg0: number): Internal.Accessible;
        getAccessibleRole(): Internal.AccessibleRole;
        getAccessibleSelection(): Internal.AccessibleSelection;
        getAccessibleParent(): Internal.Accessible;
        addPropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        getAccessibleChildrenCount(): number;
        getLocale(): Internal.Locale;
        getAccessibleComponent(): Internal.AccessibleComponent;
        static readonly "ACCESSIBLE_COMPONENT_BOUNDS_CHANGED" : "accessibleComponentBoundsChanged";
        static readonly "ACCESSIBLE_INVALIDATE_CHILDREN" : "accessibleInvalidateChildren";
        static readonly "ACCESSIBLE_VISIBLE_DATA_PROPERTY" : "AccessibleVisibleData";
        static readonly "ACCESSIBLE_TABLE_ROW_HEADER_CHANGED" : "accessibleTableRowHeaderChanged";
        static readonly "ACCESSIBLE_SELECTION_PROPERTY" : "AccessibleSelection";
        static readonly "ACCESSIBLE_NAME_PROPERTY" : "AccessibleName";
        static readonly "ACCESSIBLE_HYPERTEXT_OFFSET" : "AccessibleHypertextOffset";
        static readonly "ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED" : "accessibleTextAttributesChanged";
        static readonly "ACCESSIBLE_TABLE_SUMMARY_CHANGED" : "accessibleTableSummaryChanged";
        static readonly "ACCESSIBLE_CHILD_PROPERTY" : "AccessibleChild";
        static readonly "ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY" : "AccessibleActiveDescendant";
        static readonly "ACCESSIBLE_DESCRIPTION_PROPERTY" : "AccessibleDescription";
        static readonly "ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED" : "accessibleTableRowDescriptionChanged";
        static readonly "ACCESSIBLE_CARET_PROPERTY" : "AccessibleCaret";
        static readonly "ACCESSIBLE_ACTION_PROPERTY" : "accessibleActionProperty";
        static readonly "ACCESSIBLE_VALUE_PROPERTY" : "AccessibleValue";
        static readonly "ACCESSIBLE_TABLE_MODEL_CHANGED" : "accessibleTableModelChanged";
        static readonly "ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED" : "accessibleTableColumnDescriptionChanged";
        static readonly "ACCESSIBLE_STATE_PROPERTY" : "AccessibleState";
        static readonly "ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED" : "accessibleTableColumnHeaderChanged";
        static readonly "ACCESSIBLE_TEXT_PROPERTY" : "AccessibleText";
        static readonly "ACCESSIBLE_TABLE_CAPTION_CHANGED" : "accessibleTableCaptionChanged";
        get accessibleChildrenCount(): number;
        get accessibleTable(): Internal.AccessibleTable;
        get locale(): Internal.Locale;
        get accessibleRole(): Internal.AccessibleRole;
        get accessibleSelection(): Internal.AccessibleSelection;
        get accessibleDescription(): string;
        get accessibleAction(): Internal.AccessibleAction;
        get accessibleParent(): Internal.Accessible;
        get accessibleIcon(): any[];
        get accessibleValue(): Internal.AccessibleValue;
        get accessibleStateSet(): Internal.AccessibleStateSet;
        get accessibleIndexInParent(): number;
        get accessibleComponent(): Internal.AccessibleComponent;
        get accessibleName(): string;
        get accessibleEditableText(): Internal.AccessibleEditableText;
        get accessibleText(): Internal.AccessibleText;
        get accessibleRelationSet(): Internal.AccessibleRelationSet;
        set accessibleDescription(arg0: string);
        set accessibleParent(arg0: Internal.Accessible_);
        set accessibleName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleContext_ = AccessibleContext;
    /**
    * @javaClass net.minecraft.world.entity.ai.attributes.AttributeModifier
    */
    class AttributeModifier {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttributeModifier_ = AttributeModifier;
    /**
    * @javaClass com.prunoideae.custom.BrewBuilder
    */
    abstract class BrewBuilder extends Internal.BuilderBase<Internal.Brew> {
        noIncense(): this;
        cost(cost: number): this;
        getTranslationKeyGroup(): string;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Brew>;
        /**
        */
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean): this;
        /**
        */
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number): this;
        /**
        */
        effect(effect: Internal.MobEffect_, duration: number): this;
        /**
        */
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, visible: boolean): this;
        /**
        */
        effect(effect: Internal.MobEffect_, duration: number, amplifier: number, ambient: boolean, visible: boolean, showIcon: boolean): this;
        /**
        */
        effect(effect: Internal.MobEffect_): this;
        noPendant(): this;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Brew>;
        get translationKeyGroup(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type BrewBuilder_ = BrewBuilder;
    /**
    * @javaClass java.io.ObjectOutput
    */
    interface ObjectOutput extends Internal.DataOutput, Internal.AutoCloseable {
        flush(): void;
        writeObject(arg0: any): void;
        close(): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
    }
    type ObjectOutput_ = ObjectOutput;
    /**
    * @javaClass java.awt.event.HierarchyEvent
    */
    class HierarchyEvent extends Internal.AWTEvent {
        paramString(): string;
        getChangedParent(): Internal.Container;
        getChangeFlags(): number;
        getChanged(): Internal.Component;
        getComponent(): Internal.Component;
        static readonly "SHOWING_CHANGED" : 4;
        static readonly "HIERARCHY_FIRST" : 1400;
        static readonly "PARENT_CHANGED" : 1;
        static readonly "HIERARCHY_CHANGED" : 1400;
        static readonly "ANCESTOR_MOVED" : 1401;
        static readonly "DISPLAYABILITY_CHANGED" : 2;
        static readonly "ANCESTOR_RESIZED" : 1402;
        static readonly "HIERARCHY_LAST" : 1402;
        get component(): Internal.Component;
        get changedParent(): Internal.Container;
        get changeFlags(): number;
        get changed(): Internal.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HierarchyEvent_ = HierarchyEvent;
    /**
    * @javaClass java.awt.event.KeyEvent
    */
    class KeyEvent extends Internal.InputEvent {
        isActionKey(): boolean;
        paramString(): string;
        static getKeyModifiersText(arg0: number): string;
        getExtendedKeyCode(): number;
        static getKeyText(arg0: number): string;
        getKeyChar(): string;
        setKeyCode(arg0: number): void;
        getKeyLocation(): number;
        static getExtendedKeyCodeForChar(arg0: number): number;
        setKeyChar(arg0: string): void;
        setModifiers(arg0: number): void;
        getKeyCode(): number;
        static readonly "VK_UNDEFINED" : 0;
        static readonly "VK_QUOTEDBL" : 152;
        static readonly "VK_BRACERIGHT" : 162;
        static readonly "VK_COPY" : 65485;
        static readonly "VK_LEFT_PARENTHESIS" : 519;
        static readonly "VK_NUMPAD3" : 99;
        static readonly "VK_NUMPAD4" : 100;
        static readonly "VK_NUMPAD5" : 101;
        static readonly "VK_NUMPAD6" : 102;
        static readonly "VK_HELP" : 156;
        static readonly "VK_NUMPAD0" : 96;
        static readonly "VK_NUMPAD1" : 97;
        static readonly "VK_NUMPAD2" : 98;
        static readonly "VK_RIGHT" : 39;
        static readonly "VK_AMPERSAND" : 150;
        static readonly "VK_ALT_GRAPH" : 65406;
        static readonly "VK_CANCEL" : 3;
        static readonly "VK_COLON" : 513;
        static readonly "VK_CIRCUMFLEX" : 514;
        static readonly "VK_CAPS_LOCK" : 20;
        static readonly "VK_ALL_CANDIDATES" : 256;
        static readonly "VK_LESS" : 153;
        static readonly "VK_PLUS" : 521;
        static readonly "VK_WINDOWS" : 524;
        static readonly "KEY_RELEASED" : 402;
        static readonly "VK_KANA" : 21;
        static readonly "VK_ASTERISK" : 151;
        static readonly "VK_DOLLAR" : 515;
        static readonly "VK_PAUSE" : 19;
        static readonly "VK_FINAL" : 24;
        static readonly "VK_DEAD_SEMIVOICED_SOUND" : 143;
        static readonly "VK_PROPS" : 65482;
        static readonly "VK_RIGHT_PARENTHESIS" : 522;
        static readonly "VK_BEGIN" : 65368;
        static readonly "VK_DEAD_BREVE" : 133;
        static readonly "VK_DEAD_ABOVEDOT" : 134;
        static readonly "VK_CUT" : 65489;
        static readonly "VK_BACK_QUOTE" : 192;
        static readonly "VK_HOME" : 36;
        static readonly "VK_UNDO" : 65483;
        static readonly "VK_ESCAPE" : 27;
        static readonly "VK_F9" : 120;
        static readonly "VK_F8" : 119;
        static readonly "VK_F7" : 118;
        static readonly "VK_F6" : 117;
        static readonly "VK_EXCLAMATION_MARK" : 517;
        static readonly "VK_F5" : 116;
        static readonly "VK_F4" : 115;
        static readonly "VK_F3" : 114;
        static readonly "VK_HALF_WIDTH" : 244;
        static readonly "VK_F2" : 113;
        static readonly "VK_F1" : 112;
        static readonly "VK_GREATER" : 160;
        static readonly "VK_KATAKANA" : 241;
        static readonly "VK_INVERTED_EXCLAMATION_MARK" : 518;
        static readonly "VK_UP" : 38;
        static readonly "VK_SLASH" : 47;
        static readonly "VK_CONVERT" : 28;
        static readonly "VK_SUBTRACT" : 109;
        static readonly "VK_CODE_INPUT" : 258;
        static readonly "VK_KP_UP" : 224;
        static readonly "VK_EURO_SIGN" : 516;
        static readonly "KEY_LAST" : 402;
        static readonly "VK_DIVIDE" : 111;
        static readonly "KEY_TYPED" : 400;
        static readonly "VK_PAGE_UP" : 33;
        static readonly "VK_SEMICOLON" : 59;
        static readonly "VK_SEPARATOR" : 108;
        static readonly "VK_ADD" : 107;
        static readonly "KEY_PRESSED" : 401;
        static readonly "VK_2" : 50;
        static readonly "VK_3" : 51;
        static readonly "VK_4" : 52;
        static readonly "VK_5" : 53;
        static readonly "VK_6" : 54;
        static readonly "VK_ALPHANUMERIC" : 240;
        static readonly "VK_7" : 55;
        static readonly "VK_8" : 56;
        static readonly "VK_9" : 57;
        static readonly "VK_DEAD_DOUBLEACUTE" : 137;
        static readonly "VK_0" : 48;
        static readonly "VK_1" : 49;
        static readonly "VK_DEAD_CEDILLA" : 139;
        static readonly "VK_B" : 66;
        static readonly "VK_C" : 67;
        static readonly "VK_D" : 68;
        static readonly "VK_E" : 69;
        static readonly "VK_F" : 70;
        static readonly "VK_G" : 71;
        static readonly "VK_H" : 72;
        static readonly "VK_I" : 73;
        static readonly "VK_OPEN_BRACKET" : 91;
        static readonly "VK_HIRAGANA" : 242;
        static readonly "VK_A" : 65;
        static readonly "VK_JAPANESE_KATAKANA" : 259;
        static readonly "VK_NUM_LOCK" : 144;
        static readonly "VK_AT" : 512;
        static readonly "VK_UNDERSCORE" : 523;
        static readonly "VK_KP_DOWN" : 225;
        static readonly "VK_BACK_SPACE" : 8;
        static readonly "VK_CLEAR" : 12;
        static readonly "VK_DELETE" : 127;
        static readonly "VK_DEAD_VOICED_SOUND" : 142;
        static readonly "VK_MULTIPLY" : 106;
        static readonly "VK_SPACE" : 32;
        static readonly "VK_FULL_WIDTH" : 243;
        static readonly "VK_PAGE_DOWN" : 34;
        static readonly "VK_END" : 35;
        static readonly "CHAR_UNDEFINED" : "￿";
        static readonly "KEY_LOCATION_LEFT" : 2;
        static readonly "VK_DOWN" : 40;
        static readonly "VK_DEAD_CIRCUMFLEX" : 130;
        static readonly "VK_EQUALS" : 61;
        static readonly "VK_JAPANESE_ROMAN" : 261;
        static readonly "VK_PERIOD" : 46;
        static readonly "VK_F12" : 123;
        static readonly "VK_F11" : 122;
        static readonly "VK_F14" : 61441;
        static readonly "VK_F13" : 61440;
        static readonly "VK_COMPOSE" : 65312;
        static readonly "VK_DEAD_ACUTE" : 129;
        static readonly "VK_F10" : 121;
        static readonly "VK_DEAD_DIAERESIS" : 135;
        static readonly "VK_PRINTSCREEN" : 154;
        static readonly "VK_R" : 82;
        static readonly "VK_DEAD_ABOVERING" : 136;
        static readonly "VK_S" : 83;
        static readonly "VK_T" : 84;
        static readonly "VK_U" : 85;
        static readonly "VK_PREVIOUS_CANDIDATE" : 257;
        static readonly "VK_V" : 86;
        static readonly "VK_W" : 87;
        static readonly "VK_X" : 88;
        static readonly "VK_Y" : 89;
        static readonly "VK_J" : 74;
        static readonly "VK_K" : 75;
        static readonly "VK_F19" : 61446;
        static readonly "VK_L" : 76;
        static readonly "VK_M" : 77;
        static readonly "VK_N" : 78;
        static readonly "VK_F16" : 61443;
        static readonly "VK_O" : 79;
        static readonly "VK_F15" : 61442;
        static readonly "VK_P" : 80;
        static readonly "VK_F18" : 61445;
        static readonly "VK_Q" : 81;
        static readonly "VK_F17" : 61444;
        static readonly "KEY_LOCATION_NUMPAD" : 4;
        static readonly "VK_F23" : 61450;
        static readonly "KEY_FIRST" : 400;
        static readonly "VK_F22" : 61449;
        static readonly "KEY_LOCATION_UNKNOWN" : 0;
        static readonly "VK_F24" : 61451;
        static readonly "VK_DEAD_TILDE" : 131;
        static readonly "KEY_LOCATION_RIGHT" : 3;
        static readonly "VK_DEAD_GRAVE" : 128;
        static readonly "VK_F21" : 61448;
        static readonly "VK_F20" : 61447;
        static readonly "VK_CONTROL" : 17;
        static readonly "VK_Z" : 90;
        static readonly "VK_QUOTE" : 222;
        static readonly "VK_KANA_LOCK" : 262;
        static readonly "VK_KP_RIGHT" : 227;
        static readonly "VK_NUMBER_SIGN" : 520;
        static readonly "VK_KP_LEFT" : 226;
        static readonly "VK_ENTER" : 10;
        static readonly "VK_DEAD_OGONEK" : 140;
        static readonly "VK_CONTEXT_MENU" : 525;
        static readonly "VK_KANJI" : 25;
        static readonly "VK_NONCONVERT" : 29;
        static readonly "VK_COMMA" : 44;
        static readonly "VK_DECIMAL" : 110;
        static readonly "VK_FIND" : 65488;
        static readonly "VK_DEAD_IOTA" : 141;
        static readonly "VK_SHIFT" : 16;
        static readonly "VK_MODECHANGE" : 31;
        static readonly "VK_BACK_SLASH" : 92;
        static readonly "VK_ROMAN_CHARACTERS" : 245;
        static readonly "VK_DEAD_MACRON" : 132;
        static readonly "VK_SEPARATER" : 108;
        static readonly "VK_MINUS" : 45;
        static readonly "VK_SCROLL_LOCK" : 145;
        static readonly "VK_PASTE" : 65487;
        static readonly "KEY_LOCATION_STANDARD" : 1;
        static readonly "VK_NUMPAD7" : 103;
        static readonly "VK_AGAIN" : 65481;
        static readonly "VK_NUMPAD8" : 104;
        static readonly "VK_NUMPAD9" : 105;
        static readonly "VK_LEFT" : 37;
        static readonly "VK_DEAD_CARON" : 138;
        static readonly "VK_TAB" : 9;
        static readonly "VK_INPUT_METHOD_ON_OFF" : 263;
        static readonly "VK_CLOSE_BRACKET" : 93;
        static readonly "VK_INSERT" : 155;
        static readonly "VK_ALT" : 18;
        static readonly "VK_ACCEPT" : 30;
        static readonly "VK_JAPANESE_HIRAGANA" : 260;
        static readonly "VK_STOP" : 65480;
        static readonly "VK_META" : 157;
        static readonly "VK_BRACELEFT" : 161;
        get keyCode(): number;
        get keyLocation(): number;
        get actionKey(): boolean;
        get keyChar(): string;
        get extendedKeyCode(): number;
        set keyCode(arg0: number);
        set keyChar(arg0: string);
        set modifiers(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type KeyEvent_ = KeyEvent;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyEvent
    */
    abstract class ScreenEvent$KeyboardKeyEvent extends Internal.ScreenEvent {
        getListenerList(): Internal.ListenerList;
        getModifiers(): number;
        getKeyCode(): number;
        getScanCode(): number;
        get keyCode(): number;
        get listenerList(): Internal.ListenerList;
        get modifiers(): number;
        get scanCode(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyEvent_ = ScreenEvent$KeyboardKeyEvent;
    /**
    * @javaClass net.minecraft.world.item.ArmorMaterial
    */
    interface ArmorMaterial {
    }
    type ArmorMaterial_ = ArmorMaterial;
    /**
    * @javaClass java.math.BigDecimal
    */
    class BigDecimal extends Internal.Number implements Internal.Comparable<Internal.BigDecimal> {
        longValueExact(): number;
        movePointLeft(arg0: number): this;
        precision(): number;
        byteValueExact(): number;
        toBigInteger(): Internal.BigInteger;
        scale(): number;
        toPlainString(): string;
        compareTo(arg0: Internal.BigDecimal_): number;
        shortValueExact(): number;
        longValue(): number;
        min(arg0: Internal.BigDecimal_): this;
        unscaledValue(): Internal.BigInteger;
        sqrt(arg0: Internal.MathContext_): this;
        scaleByPowerOfTen(arg0: number): this;
        hashCode(): number;
        pow(arg0: number, arg1: Internal.MathContext_): this;
        pow(arg0: number): this;
        divide(arg0: Internal.BigDecimal_): this;
        divide(arg0: Internal.BigDecimal_, arg1: number, arg2: Internal.RoundingMode_): this;
        divide(arg0: Internal.BigDecimal_, arg1: number, arg2: number): this;
        divide(arg0: Internal.BigDecimal_, arg1: Internal.RoundingMode_): this;
        divide(arg0: Internal.BigDecimal_, arg1: number): this;
        divide(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        multiply(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        multiply(arg0: Internal.BigDecimal_): this;
        signum(): number;
        add(arg0: Internal.BigDecimal_): this;
        add(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        toBigIntegerExact(): Internal.BigInteger;
        toEngineeringString(): string;
        max(arg0: Internal.BigDecimal_): this;
        setScale(arg0: number, arg1: Internal.RoundingMode_): this;
        setScale(arg0: number, arg1: number): this;
        setScale(arg0: number): this;
        static valueOf(arg0: number): this;
        static valueOf(arg0: number, arg1: number): this;
        intValue(): number;
        subtract(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        subtract(arg0: Internal.BigDecimal_): this;
        floatValue(): number;
        doubleValue(): number;
        divideToIntegralValue(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        divideToIntegralValue(arg0: Internal.BigDecimal_): this;
        plus(): this;
        plus(arg0: Internal.MathContext_): this;
        abs(arg0: Internal.MathContext_): this;
        abs(): this;
        round(arg0: Internal.MathContext_): this;
        divideAndRemainder(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): Internal.BigDecimal[];
        divideAndRemainder(arg0: Internal.BigDecimal_): Internal.BigDecimal[];
        negate(): this;
        negate(arg0: Internal.MathContext_): this;
        movePointRight(arg0: number): this;
        equals(arg0: any): boolean;
        ulp(): this;
        toString(): string;
        stripTrailingZeros(): this;
        remainder(arg0: Internal.BigDecimal_): this;
        remainder(arg0: Internal.BigDecimal_, arg1: Internal.MathContext_): this;
        intValueExact(): number;
        static readonly "ZERO" : Internal.BigDecimal;
        static readonly "ROUND_DOWN" : 1;
        static readonly "ROUND_UNNECESSARY" : 7;
        static readonly "ROUND_CEILING" : 2;
        static readonly "ROUND_HALF_DOWN" : 5;
        static readonly "ROUND_HALF_UP" : 4;
        static readonly "ONE" : Internal.BigDecimal;
        static readonly "ROUND_UP" : 0;
        static readonly "ROUND_FLOOR" : 3;
        static readonly "ROUND_HALF_EVEN" : 6;
        static readonly "TEN" : Internal.BigDecimal;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BigDecimal_ = BigDecimal;
    /**
    * @javaClass net.minecraftforge.common.util.NonNullSupplier
    */
    interface NonNullSupplier <T> {
        get(): T;
    }
    type NonNullSupplier_<T> = (() => T) | NonNullSupplier<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.ClientGenerateAssetsEventJS
    */
    class ClientGenerateAssetsEventJS extends Internal.EventJS {
        add(location: ResourceLocation_, json: Internal.JsonElement_): void;
        addBlockState(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.VariantBlockStateGenerator_>): void;
        addLang(key: string, value: string): void;
        getAllAssets(): Internal.Map<ResourceLocation, Internal.JsonElement>;
        addMultipartBlockState(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.MultipartBlockStateGenerator_>): void;
        addModel(type: string, id: ResourceLocation_, consumer: Internal.Consumer_<Internal.ModelGenerator_>): void;
        readonly "generator" : Internal.AssetJsonGenerator;
        get allAssets(): Internal.Map<ResourceLocation, Internal.JsonElement>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientGenerateAssetsEventJS_ = ClientGenerateAssetsEventJS;
    /**
    * @javaClass java.lang.Record
    */
    abstract class Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Record_ = Record;
    /**
    * @javaClass java.lang.module.ResolvedModule
    */
    class ResolvedModule {
        reference(): Internal.ModuleReference;
        configuration(): Internal.Configuration;
        hashCode(): number;
        equals(arg0: any): boolean;
        reads(): Internal.Set<Internal.ResolvedModule>;
        name(): string;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ResolvedModule_ = ResolvedModule;
    /**
    * @javaClass net.minecraft.world.level.entity.EntityTypeTest
    */
    interface EntityTypeTest <B, T> {
    }
    type EntityTypeTest_<B, T> = EntityTypeTest<B, T>;
    /**
    * @javaClass java.nio.file.PathMatcher
    */
    interface PathMatcher {
        matches(arg0: Internal.Path_): boolean;
    }
    type PathMatcher_ = ((arg0: Internal.Path) => boolean) | PathMatcher;
    /**
    * @javaClass dev.latvian.mods.kubejs.stages.StageChangeEvent
    */
    class StageChangeEvent {
        getStage(): string;
        getPlayer(): Internal.Player;
        getPlayerStages(): Internal.Stages;
        get stage(): string;
        get playerStages(): Internal.Stages;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StageChangeEvent_ = StageChangeEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.CountingMap
    */
    class CountingMap {
        add(key: any, value: number): number;
        getSize(): number;
        set(key: any, value: number): number;
        getValues(): Internal.Collection<number>;
        getEntries(): Internal.List<Internal.Object2LongEntry>;
        forEach(forEach: Internal.Consumer_<Internal.Object2LongEntry_>): void;
        get(key: any): number;
        clear(): void;
        getTotalCount(): number;
        getKeys(): Internal.Set<any>;
        get entries(): Internal.List<Internal.Object2LongEntry>;
        get size(): number;
        get keys(): Internal.Set<any>;
        get values(): Internal.Collection<number>;
        get totalCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CountingMap_ = CountingMap;
    /**
    * @javaClass java.net.ContentHandlerFactory
    */
    interface ContentHandlerFactory {
        createContentHandler(arg0: string): Internal.ContentHandler;
    }
    type ContentHandlerFactory_ = ((arg0: string) => Internal.ContentHandler) | ContentHandlerFactory;
    /**
    * @javaClass com.mojang.blaze3d.vertex.PoseStack$Pose
    */
    class PoseStack$Pose {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PoseStack$Pose_ = PoseStack$Pose;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.CommentedFileConfigBuilder
    */
    class CommentedFileConfigBuilder extends Internal.GenericBuilder<Internal.CommentedConfig, Internal.CommentedFileConfig> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommentedFileConfigBuilder_ = CommentedFileConfigBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2FloatFunction
    */
    interface Boolean2FloatFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2FloatFunction;
    }
    type Boolean2FloatFunction_ = ((arg0: boolean) => number) | Boolean2FloatFunction;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.loot.EntityWeight
    */
    class EntityWeight {
        readData(nbt: Internal.CompoundTag_): void;
        readNetData(data: Internal.FriendlyByteBuf_): void;
        getWeight(entity: Internal.Entity_): number;
        writeData(nbt: Internal.CompoundTag_): void;
        writeNetData(data: Internal.FriendlyByteBuf_): void;
        "boss" : number;
        "passive" : number;
        "monster" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityWeight_ = EntityWeight;
    /**
    * @javaClass java.awt.Polygon
    */
    class Polygon implements Internal.Shape, Internal.Serializable {
        contains(arg0: number, arg1: number): boolean;
        contains(arg0: Internal.Point_): boolean;
        contains(arg0: Internal.Point2D_): boolean;
        contains(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: Internal.Rectangle2D_): boolean;
        getPathIterator(arg0: Internal.AffineTransform_): Internal.PathIterator;
        getPathIterator(arg0: Internal.AffineTransform_, arg1: number): Internal.PathIterator;
        intersects(arg0: Internal.Rectangle2D_): boolean;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        getBounds2D(): Internal.Rectangle2D;
        reset(): void;
        invalidate(): void;
        inside(arg0: number, arg1: number): boolean;
        getBoundingBox(): Internal.Rectangle;
        translate(arg0: number, arg1: number): void;
        addPoint(arg0: number, arg1: number): void;
        getBounds(): Internal.Rectangle;
        "ypoints" : number[];
        "xpoints" : number[];
        "npoints" : number;
        get boundingBox(): Internal.Rectangle;
        get bounds(): Internal.Rectangle;
        get bounds2D(): Internal.Rectangle2D;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Polygon_ = Polygon;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.WidgetLayout
    */
    interface WidgetLayout {
        align(arg0: Internal.Panel_): number;
    }
    type WidgetLayout_ = ((arg0: Internal.Panel) => number) | WidgetLayout;
    /**
    * @javaClass mezz.jei.api.gui.IRecipeLayout
    */
    interface IRecipeLayout {
        getIngredientsGroup<T>(arg0: Internal.IIngredientType_<T>): Internal.IGuiIngredientGroup<T>;
        moveRecipeTransferButton(arg0: number, arg1: number): void;
        getItemStacks(): Internal.IGuiItemStackGroup;
        getFocus<V>(arg0: Internal.IIngredientType_<V>): Internal.IFocus<V>;
        setShapeless(): void;
    }
    type IRecipeLayout_ = IRecipeLayout;
    /**
    * @javaClass net.minecraftforge.client.event.RenderTooltipEvent
    */
    abstract class RenderTooltipEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getX(): number;
        getY(): number;
        getComponents(): Internal.List<Internal.ClientTooltipComponent>;
        getFont(): net.minecraft.client.gui.Font;
        getItemStack(): Internal.ItemStack;
        getPoseStack(): Internal.PoseStack;
        get components(): Internal.List<Internal.ClientTooltipComponent>;
        get itemStack(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get x(): number;
        get y(): number;
        get font(): net.minecraft.client.gui.Font;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderTooltipEvent_ = RenderTooltipEvent;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.StringConfig
    */
    class StringConfig extends Internal.ConfigFromString<string> {
        getStringForGUI(v: string): net.minecraft.network.chat.Component;
        getColor(v: string): Internal.Color4I;
        addInfo(list: Internal.TooltipList_): void;
        parse(callback: Internal.Consumer_<string>, string: string): boolean;
        static readonly "COLOR" : Internal.Color4I;
        readonly "pattern" : Internal.Pattern;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringConfig_ = StringConfig;
    /**
    * @javaClass dev.latvian.mods.rhino.ErrorReporter
    */
    interface ErrorReporter {
        runtimeError(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): Internal.EvaluatorException;
        warning(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): void;
        error(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number): void;
    }
    type ErrorReporter_ = ErrorReporter;
    /**
    * @javaClass java.util.OptionalLong
    */
    class OptionalLong {
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: number): number;
        orElseThrow<X>(arg0: Internal.Supplier_<X>): number;
        orElseThrow(): number;
        static empty(): this;
        getAsLong(): number;
        orElseGet(arg0: Internal.LongSupplier_): number;
        stream(): Internal.LongStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.LongConsumer_, arg1: Internal.Runnable_): void;
        ifPresent(arg0: Internal.LongConsumer_): void;
        static of(arg0: number): this;
        equals(arg0: any): boolean;
        toString(): string;
        get asLong(): number;
        get present(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OptionalLong_ = OptionalLong;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.Chapter
    */
    class Chapter extends Internal.QuestObject {
        readData(nbt: Internal.CompoundTag_): void;
        getIndex(): number;
        deleteChildren(): void;
        getQuestChapter(): this;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        getQuestFile(): Internal.QuestFile;
        getDefaultQuestShape(): string;
        isVisible(data: Internal.TeamData_): boolean;
        writeData(nbt: Internal.CompoundTag_): void;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        getChildren(): Internal.Collection<Internal.QuestObject>;
        getFilename(): string;
        onStarted(data: Internal.QuestProgressEventData_<any>): void;
        getRelativeProgressFromChildren(data: Internal.TeamData_): number;
        getAltTitle(): Internal.MutableComponent;
        getAltIcon(): Internal.Icon;
        hasGroup(): boolean;
        getObjectType(): Internal.QuestObjectType;
        getPath(): string;
        hasUnclaimedRewardsRaw(teamData: Internal.TeamData_, player: Internal.UUID_): boolean;
        deleteSelf(): void;
        clearCachedData(): void;
        onCreated(): void;
        readonly "images" : Internal.List<Internal.ChapterImage>;
        readonly "file" : Internal.QuestFile;
        "filename" : string;
        readonly "quests" : Internal.List<Internal.Quest>;
        readonly "subtitle" : Internal.List<string>;
        "alwaysInvisible" : boolean;
        "defaultHideDependencyLines" : boolean;
        "defaultQuestShape" : string;
        "group" : Internal.ChapterGroup;
        get path(): string;
        get children(): Internal.Collection<Internal.QuestObject>;
        get index(): number;
        get altTitle(): Internal.MutableComponent;
        get questFile(): Internal.QuestFile;
        get questChapter(): this;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Chapter_ = Chapter;
    /**
    * @javaClass net.minecraft.world.entity.MobCategory
    */
    class MobCategory extends Internal.Enum<Internal.MobCategory> implements Internal.StringRepresentable, Internal.IExtensibleEnum {
        init(): void;
        static valueOf(arg0: string): this;
        static values(): Internal.MobCategory[];
        static create(arg0: string, arg1: string, arg2: number, arg3: boolean, arg4: boolean, arg5: number): this;
        static readonly "UNDERGROUND_WATER_CREATURE" : Internal.MobCategory;
        static readonly "WATER_CREATURE" : Internal.MobCategory;
        static readonly "WATER_AMBIENT" : Internal.MobCategory;
        static readonly "AXOLOTLS" : Internal.MobCategory;
        static readonly "AMBIENT" : Internal.MobCategory;
        static readonly "CREATURE" : Internal.MobCategory;
        static readonly "MISC" : Internal.MobCategory;
        static readonly "MONSTER" : Internal.MobCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobCategory_ = "water_creature" | "underground_water_creature" | "ambient" | "axolotls" | "creature" | "water_ambient" | "monster" | "misc" | MobCategory;
    /**
    * @javaClass java.awt.Container
    */
    class Container extends Internal.Component {
        insets(): Internal.Insets;
        countComponents(): number;
        paint(arg0: Internal.Graphics_): void;
        setLayout(arg0: Internal.LayoutManager_): void;
        getFocusTraversalKeys(arg0: number): Internal.Set<Internal.AWTKeyStroke>;
        removeAll(): void;
        getMinimumSize(): Internal.Dimension;
        getMousePosition(arg0: boolean): Internal.Point;
        preferredSize(): Internal.Dimension;
        getAlignmentY(): number;
        getComponents(): Internal.Component[];
        setFont(arg0: Internal.Font_): void;
        doLayout(): void;
        addContainerListener(arg0: Internal.ContainerListener_): void;
        getAlignmentX(): number;
        add(arg0: Internal.Component_): Internal.Component;
        add(arg0: string, arg1: Internal.Component_): Internal.Component;
        add(arg0: Internal.Component_, arg1: any): void;
        add(arg0: Internal.Component_, arg1: number): Internal.Component;
        add(arg0: Internal.Component_, arg1: any, arg2: number): void;
        setComponentZOrder(arg0: Internal.Component_, arg1: number): void;
        setFocusCycleRoot(arg0: boolean): void;
        list(arg0: Internal.PrintWriter_, arg1: number): void;
        list(arg0: Internal.PrintStream_, arg1: number): void;
        findComponentAt(arg0: Internal.Point_): Internal.Component;
        findComponentAt(arg0: number, arg1: number): Internal.Component;
        deliverEvent(arg0: Internal.Event_): void;
        isAncestorOf(arg0: Internal.Component_): boolean;
        getComponentCount(): number;
        minimumSize(): Internal.Dimension;
        removeContainerListener(arg0: Internal.ContainerListener_): void;
        removeNotify(): void;
        getComponent(arg0: number): Internal.Component;
        printComponents(arg0: Internal.Graphics_): void;
        getListeners<T>(arg0: Internal.Class_<T>): T[];
        getMaximumSize(): Internal.Dimension;
        locate(arg0: number, arg1: number): Internal.Component;
        getComponentAt(arg0: number, arg1: number): Internal.Component;
        getComponentAt(arg0: Internal.Point_): Internal.Component;
        update(arg0: Internal.Graphics_): void;
        isFocusTraversalPolicySet(): boolean;
        isFocusCycleRoot(): boolean;
        isFocusCycleRoot(arg0: Internal.Container_): boolean;
        getComponentZOrder(arg0: Internal.Component_): number;
        remove(arg0: Internal.Component_): void;
        remove(arg0: number): void;
        setFocusTraversalPolicy(arg0: Internal.FocusTraversalPolicy_): void;
        getLayout(): Internal.LayoutManager;
        getContainerListeners(): Internal.ContainerListener[];
        isFocusTraversalPolicyProvider(): boolean;
        setFocusTraversalKeys(arg0: number, arg1: Internal.Set_<Internal.AWTKeyStroke_>): void;
        addPropertyChangeListener(arg0: Internal.PropertyChangeListener_): void;
        addPropertyChangeListener(arg0: string, arg1: Internal.PropertyChangeListener_): void;
        applyComponentOrientation(arg0: Internal.ComponentOrientation_): void;
        validate(): void;
        transferFocusDownCycle(): void;
        areFocusTraversalKeysSet(arg0: number): boolean;
        getInsets(): Internal.Insets;
        invalidate(): void;
        layout(): void;
        isValidateRoot(): boolean;
        print(arg0: Internal.Graphics_): void;
        paintComponents(arg0: Internal.Graphics_): void;
        getPreferredSize(): Internal.Dimension;
        addNotify(): void;
        getFocusTraversalPolicy(): Internal.FocusTraversalPolicy;
        setFocusTraversalPolicyProvider(arg0: boolean): void;
        get focusTraversalPolicySet(): boolean;
        get alignmentX(): number;
        get alignmentY(): number;
        get components(): Internal.Component[];
        get componentCount(): number;
        get focusTraversalPolicy(): Internal.FocusTraversalPolicy;
        get focusCycleRoot(): boolean;
        get focusTraversalPolicyProvider(): boolean;
        get maximumSize(): Internal.Dimension;
        get validateRoot(): boolean;
        get containerListeners(): Internal.ContainerListener[];
        set focusTraversalPolicy(arg0: Internal.FocusTraversalPolicy_);
        set focusCycleRoot(arg0: boolean);
        set focusTraversalPolicyProvider(arg0: boolean);
        set font(arg0: Internal.Font_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Container_ = Container;
    /**
    * @javaClass net.minecraftforge.event.OnDatapackSyncEvent
    */
    class OnDatapackSyncEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.ServerPlayer;
        getPlayerList(): Internal.PlayerList;
        get listenerList(): Internal.ListenerList;
        get playerList(): Internal.PlayerList;
        get player(): Internal.ServerPlayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OnDatapackSyncEvent_ = OnDatapackSyncEvent;
    /**
    * @javaClass java.util.AbstractSet
    */
    abstract class AbstractSet <E> extends Internal.AbstractCollection<E> implements Internal.Set<E> {
        removeAll(arg0: Internal.Collection_<any>): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractSet_<E> = AbstractSet<E>;
    /**
    * @javaClass java.nio.channels.AsynchronousChannel
    */
    interface AsynchronousChannel extends Internal.Channel {
        close(): void;
    }
    type AsynchronousChannel_ = (() => void) | AsynchronousChannel;
    /**
    * @javaClass java.time.temporal.TemporalAccessor
    */
    interface TemporalAccessor {
        getLong(arg0: Internal.TemporalField_): number;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        get(arg0: Internal.TemporalField_): number;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField_): boolean;
    }
    type TemporalAccessor_ = TemporalAccessor;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2ShortFunction
    */
    interface Object2ShortFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): Internal.Object2ShortFunction<K>;
        removeShort(arg0: any): number;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        getShort(arg0: any): number;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2ShortFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2ShortFunction;
    }
    type Object2ShortFunction_<K> = ((arg0: any) => number) | Object2ShortFunction<K>;
    /**
    * @javaClass net.minecraft.client.renderer.BlockEntityWithoutLevelRenderer
    */
    class BlockEntityWithoutLevelRenderer implements Internal.ResourceManagerReloadListener {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEntityWithoutLevelRenderer_ = BlockEntityWithoutLevelRenderer;
    /**
    * @javaClass java.util.regex.Pattern
    */
    class Pattern implements Internal.Serializable {
        static quote(arg0: string): string;
        split(arg0: Internal.CharSequence_): string[];
        split(arg0: Internal.CharSequence_, arg1: number): string[];
        static compile(arg0: string): this;
        static compile(arg0: string, arg1: number): this;
        splitAsStream(arg0: Internal.CharSequence_): Internal.Stream<string>;
        pattern(): string;
        flags(): number;
        toString(): string;
        asMatchPredicate(): Internal.Predicate<string>;
        asPredicate(): Internal.Predicate<string>;
        matcher(arg0: Internal.CharSequence_): Internal.Matcher;
        static matches(arg0: string, arg1: Internal.CharSequence_): boolean;
        static readonly "DOTALL" : 32;
        static readonly "UNICODE_CASE" : 64;
        static readonly "LITERAL" : 16;
        static readonly "UNICODE_CHARACTER_CLASS" : 256;
        static readonly "CASE_INSENSITIVE" : 2;
        static readonly "CANON_EQ" : 128;
        static readonly "COMMENTS" : 4;
        static readonly "UNIX_LINES" : 1;
        static readonly "MULTILINE" : 8;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Pattern_ = Pattern;
    /**
    * @javaClass net.minecraftforge.client.event.RecipesUpdatedEvent
    */
    class RecipesUpdatedEvent extends net.minecraftforge.eventbus.api.Event {
        getRecipeManager(): Internal.RecipeManager;
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        get recipeManager(): Internal.RecipeManager;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipesUpdatedEvent_ = RecipesUpdatedEvent;
    /**
    * @javaClass java.awt.JobAttributes$SidesType
    */
    class JobAttributes$SidesType extends Internal.AttributeValue {
        static readonly "TWO_SIDED_SHORT_EDGE" : Internal.JobAttributes$SidesType;
        static readonly "TWO_SIDED_LONG_EDGE" : Internal.JobAttributes$SidesType;
        static readonly "ONE_SIDED" : Internal.JobAttributes$SidesType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes$SidesType_ = JobAttributes$SidesType;
    /**
    * @javaClass net.minecraft.world.inventory.tooltip.TooltipComponent
    */
    interface TooltipComponent {
    }
    type TooltipComponent_ = TooltipComponent;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.JsonSerializable
    */
    interface JsonSerializable {
        toJson(): Internal.JsonElement;
    }
    type JsonSerializable_ = (() => Internal.JsonElement) | JsonSerializable;
    /**
    * @javaClass net.minecraft.nbt.TagType
    */
    interface TagType <T> {
    }
    type TagType_<T> = TagType<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemBuilder$ItemColorJS
    */
    interface ItemBuilder$ItemColorJS {
        getColor(arg0: Internal.ItemStackJS_, arg1: number): dev.latvian.mods.rhino.mod.util.color.Color;
    }
    type ItemBuilder$ItemColorJS_ = ((arg0: Internal.ItemStackJS, arg1: number) => dev.latvian.mods.rhino.mod.util.color.Color) | ItemBuilder$ItemColorJS;
    /**
    * @javaClass com.electronwill.nightconfig.core.io.WritingMode
    */
    class WritingMode extends Internal.Enum<Internal.WritingMode> {
        static valueOf(arg0: string): this;
        static values(): Internal.WritingMode[];
        static readonly "REPLACE" : Internal.WritingMode;
        static readonly "APPEND" : Internal.WritingMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WritingMode_ = "replace" | "append" | WritingMode;
    /**
    * @javaClass java.awt.image.ImageProducer
    */
    interface ImageProducer {
        isConsumer(arg0: Internal.ImageConsumer_): boolean;
        addConsumer(arg0: Internal.ImageConsumer_): void;
        requestTopDownLeftRightResend(arg0: Internal.ImageConsumer_): void;
        removeConsumer(arg0: Internal.ImageConsumer_): void;
        startProduction(arg0: Internal.ImageConsumer_): void;
    }
    type ImageProducer_ = ImageProducer;
    /**
    * @javaClass net.minecraft.commands.CommandSourceStack
    */
    class CommandSourceStack implements Internal.SharedSuggestionProvider, Internal.IForgeCommandSourceStack {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandSourceStack_ = CommandSourceStack;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLevelStageEvent
    */
    class RenderLevelStageEvent extends net.minecraftforge.eventbus.api.Event {
        getStage(): Internal.RenderLevelStageEvent$Stage;
        getPartialTick(): number;
        getListenerList(): Internal.ListenerList;
        getFrustum(): Internal.Frustum;
        getRenderTick(): number;
        getLevelRenderer(): Internal.LevelRenderer;
        getProjectionMatrix(): Internal.Matrix4f;
        getCamera(): Internal.Camera;
        getPoseStack(): Internal.PoseStack;
        get stage(): Internal.RenderLevelStageEvent$Stage;
        get projectionMatrix(): Internal.Matrix4f;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get frustum(): Internal.Frustum;
        get levelRenderer(): Internal.LevelRenderer;
        get camera(): Internal.Camera;
        get partialTick(): number;
        get renderTick(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLevelStageEvent_ = RenderLevelStageEvent;
    /**
    * @javaClass net.minecraft.world.entity.NeutralMob
    */
    interface NeutralMob {
    }
    type NeutralMob_ = NeutralMob;
    /**
    * @javaClass io.netty.channel.ChannelInboundHandler
    */
    interface ChannelInboundHandler extends Internal.ChannelHandler {
        channelInactive(arg0: Internal.ChannelHandlerContext_): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext_): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext_): void;
        exceptionCaught(arg0: Internal.ChannelHandlerContext_, arg1: Internal.Throwable_): void;
        channelActive(arg0: Internal.ChannelHandlerContext_): void;
        userEventTriggered(arg0: Internal.ChannelHandlerContext_, arg1: any): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext_): void;
        channelRead(arg0: Internal.ChannelHandlerContext_, arg1: any): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext_): void;
    }
    type ChannelInboundHandler_ = ChannelInboundHandler;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.IntConfig
    */
    class IntConfig extends Internal.NumberConfig<number> {
        addInfo(list: Internal.TooltipList_): void;
        parse(callback: Internal.Consumer_<number>, string: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IntConfig_ = IntConfig;
    /**
    * @javaClass com.mojang.brigadier.ResultConsumer
    */
    interface ResultConsumer <S> {
        onCommandComplete(arg0: Internal.CommandContext_<S>, arg1: boolean, arg2: number): void;
    }
    type ResultConsumer_<S> = ((arg0: Internal.CommandContext<S>, arg1: boolean, arg2: number) => void) | ResultConsumer<S>;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.BasicBlockJS$Builder
    */
    class BasicBlockJS$Builder extends Internal.BlockBuilder {
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BasicBlockJS$Builder_ = BasicBlockJS$Builder;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$DrawScreenEvent$Pre
    */
    class ScreenEvent$DrawScreenEvent$Pre extends Internal.ScreenEvent$DrawScreenEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$DrawScreenEvent$Pre_ = ScreenEvent$DrawScreenEvent$Pre;
    /**
    * @javaClass java.nio.ByteOrder
    */
    class ByteOrder {
        static nativeOrder(): this;
        toString(): string;
        static readonly "BIG_ENDIAN" : Internal.ByteOrder;
        static readonly "LITTLE_ENDIAN" : Internal.ByteOrder;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ByteOrder_ = ByteOrder;
    /**
    * @javaClass java.util.DoubleSummaryStatistics
    */
    class DoubleSummaryStatistics implements Internal.DoubleConsumer {
        getMin(): number;
        getMax(): number;
        toString(): string;
        getAverage(): number;
        getSum(): number;
        getCount(): number;
        combine(arg0: Internal.DoubleSummaryStatistics_): void;
        accept(arg0: number): void;
        get average(): number;
        get min(): number;
        get max(): number;
        get count(): number;
        get sum(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DoubleSummaryStatistics_ = DoubleSummaryStatistics;
    /**
    * @javaClass net.minecraftforge.common.util.LazyOptional
    */
    class LazyOptional <T> {
        resolve(): Internal.Optional<T>;
        isPresent(): boolean;
        invalidate(): void;
        orElse(arg0: T): T;
        orElseThrow<X>(arg0: Internal.NonNullSupplier_<X>): T;
        static empty<T>(): Internal.LazyOptional<T>;
        filter(arg0: Internal.NonNullPredicate_<T>): Internal.Optional<T>;
        cast<X>(): Internal.LazyOptional<X>;
        orElseGet(arg0: Internal.NonNullSupplier_<T>): T;
        ifPresent(arg0: Internal.NonNullConsumer_<T>): void;
        static of<T>(arg0: Internal.NonNullSupplier_<T>): Internal.LazyOptional<T>;
        map<U>(arg0: Internal.NonNullFunction_<T, U>): Internal.Optional<U>;
        lazyMap<U>(arg0: Internal.NonNullFunction_<T, U>): Internal.LazyOptional<U>;
        addListener(arg0: Internal.NonNullConsumer_<Internal.LazyOptional_<T>>): void;
        get present(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LazyOptional_<T> = LazyOptional<T>;
    /**
    * @javaClass net.minecraftforge.fml.config.IConfigSpec
    */
    interface IConfigSpec <T> extends Internal.UnmodifiableConfig {
        correct(arg0: Internal.CommentedConfig_): number;
        acceptConfig(arg0: Internal.CommentedConfig_): void;
        self(): T;
        afterReload(): void;
        isCorrecting(): boolean;
        isCorrect(arg0: Internal.CommentedConfig_): boolean;
    }
    type IConfigSpec_<T> = IConfigSpec<T>;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$ClientTickEvent
    */
    class TickEvent$ClientTickEvent extends Internal.TickEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$ClientTickEvent_ = TickEvent$ClientTickEvent;
    /**
    * @javaClass dev.architectury.registry.registries.RegistrySupplier
    */
    interface RegistrySupplier <T> extends Internal.Supplier<T> {
        getRegistrar(): Internal.Registrar<T>;
        getRegistries(): Internal.Registries;
        toOptional(): Internal.Optional<T>;
        getRegistryKey(): Internal.ResourceKey<Internal.Registry<T>>;
        isPresent(): boolean;
        getId(): ResourceLocation;
        getOrNull(): T;
        orElse(other: T): T;
        listen(callback: Internal.Consumer_<T>): void;
        orElseGet(supplier: Internal.Supplier_<T>): T;
        stream(): Internal.Stream<T>;
        ifPresentOrElse(action: Internal.Consumer_<T>, emptyAction: Internal.Runnable_): void;
        ifPresent(action: Internal.Consumer_<T>): void;
        getRegistryId(): ResourceLocation;
    }
    type RegistrySupplier_<T> = RegistrySupplier<T>;
    /**
    * @javaClass com.mojang.serialization.DataResult$Instance
    */
    class DataResult$Instance extends Internal.Enum<Internal.DataResult$Instance> implements Internal.Applicative<Internal.DataResult$Mu, any> {
        ap2<A, B, R>(arg0: Internal.App_<Internal.DataResult$Mu_, Internal.BiFunction_<A, B, R>>, arg1: Internal.App_<Internal.DataResult$Mu_, A>, arg2: Internal.App_<Internal.DataResult$Mu_, B>): Internal.App<Internal.DataResult$Mu, R>;
        lift1<A, R>(arg0: Internal.App_<Internal.DataResult$Mu_, Internal.Function_<A, R>>): Internal.Function<Internal.App<Internal.DataResult$Mu, A>, Internal.App<Internal.DataResult$Mu, R>>;
        ap3<T1, T2, T3, R>(arg0: Internal.App_<Internal.DataResult$Mu_, Internal.Function3_<T1, T2, T3, R>>, arg1: Internal.App_<Internal.DataResult$Mu_, T1>, arg2: Internal.App_<Internal.DataResult$Mu_, T2>, arg3: Internal.App_<Internal.DataResult$Mu_, T3>): Internal.App<Internal.DataResult$Mu, R>;
        static valueOf(arg0: string): this;
        static values(): Internal.DataResult$Instance[];
        map<T, R>(arg0: Internal.Function_<T, R>, arg1: Internal.App_<Internal.DataResult$Mu_, T>): Internal.App<Internal.DataResult$Mu, R>;
        point<A>(arg0: A): Internal.App<Internal.DataResult$Mu, A>;
        ap<A, R>(arg0: Internal.App_<Internal.DataResult$Mu_, Internal.Function_<A, R>>, arg1: Internal.App_<Internal.DataResult$Mu_, A>): Internal.App<Internal.DataResult$Mu, R>;
        static readonly "INSTANCE" : Internal.DataResult$Instance;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataResult$Instance_ = "instance" | DataResult$Instance;
    /**
    * @javaClass dev.latvian.mods.rhino.BaseFunction
    */
    class BaseFunction extends Internal.IdScriptableObject implements dev.latvian.mods.rhino.Function {
        getFunctionName(): string;
        call(cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        getTypeOf(): Internal.MemberType;
        setImmunePrototypeProperty(value: any): void;
        hasInstance(instance: Internal.Scriptable_): boolean;
        getLength(): number;
        execIdCall(f: Internal.IdFunctionObject_, cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        toString(): string;
        construct(cx: Internal.Context_, scope: Internal.Scriptable_, args: any[]): Internal.Scriptable;
        getClassName(): string;
        getArity(): number;
        createObject(cx: Internal.Context_, scope: Internal.Scriptable_): Internal.Scriptable;
        get arity(): number;
        get functionName(): string;
        get length(): number;
        get className(): string;
        get typeOf(): Internal.MemberType;
        set immunePrototypeProperty(value: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseFunction_ = BaseFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemStackJS
    */
    class ItemStackJS implements Internal.IngredientJS, Internal.NBTSerializable, Internal.ChangeListener<Internal.Tag>, Internal.SpecialEquality {
        getItemIds(): Internal.Set<string>;
        getNbt(): Internal.CompoundTag;
        isBlock(): boolean;
        getName(): net.minecraft.network.chat.Component;
        getStacks(): Internal.Set<Internal.ItemStackJS>;
        getVanillaItems(): Internal.Set<Internal.Item>;
        static findGroup(id: string): Internal.CreativeModeTab;
        getItem(): Internal.Item;
        getTags(): Internal.Collection<ResourceLocation>;
        hasEnchantment(enchantment: Internal.Enchantment_, level: number): boolean;
        getItemGroup(): string;
        setChance(c: number): void;
        static getList(): Internal.List<Internal.ItemStackJS>;
        getFirst(): this;
        withName(displayName: net.minecraft.network.chat.Component_): this;
        withChance(c: number): this;
        getCount(): number;
        setCount(count: number): void;
        testVanillaItem(item: Internal.Item_): boolean;
        hasTag(tag: ResourceLocation_): boolean;
        test(other: Internal.ItemStackJS_): boolean;
        hasChance(): boolean;
        static getRawItem(o: any): Internal.Item;
        getNbtString(): string;
        isNBTEqual(other: Internal.ItemStackJS_): boolean;
        isNBTEqual(other: Internal.ItemStack_): boolean;
        toJson(): Internal.JsonElement;
        withCount(c: number): this;
        static getListJS(): Internal.ListJS;
        hasNBT(): boolean;
        areItemsEqual(other: Internal.ItemStack_): boolean;
        areItemsEqual(other: Internal.ItemStackJS_): boolean;
        getMod(): string;
        getChance(): number;
        isInvalidRecipeIngredient(): boolean;
        /**
        */
        getId(): Special.Item & `${string}:${string}`;
        weakNBT(): Internal.IngredientJS;
        static clearListCache(): void;
        toNBT(): Internal.CompoundTag;
        getHarvestSpeed(block: Internal.BlockContainerJS_): number;
        getHarvestSpeed(): number;
        hashCode(): number;
        toRawResultJson(): Internal.JsonElement;
        static of(o: any): this;
        getItemStack(): Internal.ItemStack;
        copy(): this;
        withNBT(nbt: Internal.CompoundTag_): this;
        toResultJson(): Internal.JsonElement;
        onChanged(o: Internal.Tag_): void;
        static getTypeList(): Internal.ListJS;
        isEmpty(): boolean;
        strongEquals(o: any): boolean;
        getEnchantments(): Internal.MapJS;
        getFluidStack(): Internal.FluidStackJS;
        removeNBT(): this;
        static resultFromRecipeJson(json: Internal.JsonElement_): this;
        testVanilla(other: Internal.ItemStack_): boolean;
        enchant(enchantment: Internal.Enchantment_, level: number): this;
        enchant(enchantments: Internal.MapJS_): this;
        equals(o: any): boolean;
        getTypeData(): Internal.CompoundTag;
        ignoreNBT(): Internal.IngredientJS;
        toString(): string;
        removeChance(): void;
        setNbt(tag: Internal.CompoundTag_): void;
        static readonly "EMPTY" : Internal.ItemStackJS;
        get nbt(): Internal.CompoundTag;
        get itemStack(): Internal.ItemStack;
        get mod(): string;
        get itemIds(): Internal.Set<string>;
        get vanillaItems(): Internal.Set<Internal.Item>;
        get empty(): boolean;
        get harvestSpeed(): number;
        get typeList(): Internal.ListJS;
        get nbtString(): string;
        get block(): boolean;
        /**
        */
        get id(): Special.Item & `${string}:${string}`;
        get invalidRecipeIngredient(): boolean;
        get itemGroup(): string;
        get item(): Internal.Item;
        get chance(): number;
        get stacks(): Internal.Set<Internal.ItemStackJS>;
        get count(): number;
        get list(): Internal.List<Internal.ItemStackJS>;
        get enchantments(): Internal.MapJS;
        get typeData(): Internal.CompoundTag;
        get listJS(): Internal.ListJS;
        get tags(): Internal.Collection<ResourceLocation>;
        get name(): net.minecraft.network.chat.Component;
        get fluidStack(): Internal.FluidStackJS;
        get first(): this;
        set nbt(tag: Internal.CompoundTag_);
        set chance(c: number);
        set count(count: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type ItemStackJS_ = Internal.Item_ | ItemStackJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.AbstractIntSet
    */
    abstract class AbstractIntSet extends Internal.AbstractIntCollection implements Internal.Cloneable, Internal.IntSet {
        iterator(): Internal.IntIterator;
        hashCode(): number;
        equals(arg0: any): boolean;
        rem(arg0: number): boolean;
        remove(arg0: number): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractIntSet_ = AbstractIntSet;
    /**
    * @javaClass com.mojang.blaze3d.vertex.VertexFormat
    */
    class VertexFormat {
        hasColor(): boolean;
        hasPosition(): boolean;
        hasNormal(): boolean;
        hashCode(): number;
        getOffset(arg0: number): number;
        equals(arg0: any): boolean;
        toString(): string;
        getElementMapping(): Internal.ImmutableMap<string, Internal.VertexFormatElement>;
        hasUV(arg0: number): boolean;
        get elementMapping(): Internal.ImmutableMap<string, Internal.VertexFormatElement>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VertexFormat_ = VertexFormat;
    /**
    * @javaClass com.mojang.blaze3d.vertex.VertexFormat$Mode
    */
    class VertexFormat$Mode extends Internal.Enum<Internal.VertexFormat$Mode> {
        static valueOf(arg0: string): this;
        static values(): Internal.VertexFormat$Mode[];
        static readonly "QUADS" : Internal.VertexFormat$Mode;
        static readonly "TRIANGLE_FAN" : Internal.VertexFormat$Mode;
        static readonly "DEBUG_LINES" : Internal.VertexFormat$Mode;
        static readonly "TRIANGLES" : Internal.VertexFormat$Mode;
        static readonly "DEBUG_LINE_STRIP" : Internal.VertexFormat$Mode;
        static readonly "LINE_STRIP" : Internal.VertexFormat$Mode;
        static readonly "LINES" : Internal.VertexFormat$Mode;
        static readonly "TRIANGLE_STRIP" : Internal.VertexFormat$Mode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VertexFormat$Mode_ = "triangles" | "triangle_fan" | "quads" | "line_strip" | "lines" | "debug_line_strip" | "triangle_strip" | "debug_lines" | VertexFormat$Mode;
    /**
    * @javaClass net.minecraftforge.event.server.ServerLifecycleEvent
    */
    class ServerLifecycleEvent extends net.minecraftforge.eventbus.api.Event {
        getServer(): Internal.MinecraftServer;
        getListenerList(): Internal.ListenerList;
        get server(): Internal.MinecraftServer;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerLifecycleEvent_ = ServerLifecycleEvent;
    /**
    * @javaClass java.util.Iterator
    */
    interface Iterator <E> {
        next(): E;
        hasNext(): boolean;
        forEachRemaining(arg0: Internal.Consumer_<E>): void;
        remove(): void;
    }
    type Iterator_<E> = Iterator<E>;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.task.TaskType$GuiProvider
    */
    interface TaskType$GuiProvider {
        openCreationGui(arg0: Internal.Runnable_, arg1: Internal.Quest_, arg2: Internal.Consumer_<Internal.Task_>): void;
    }
    type TaskType$GuiProvider_ = ((arg0: Internal.Runnable, arg1: Internal.Quest, arg2: Internal.Consumer<Internal.Task>) => void) | TaskType$GuiProvider;
    /**
    * @javaClass java.time.chrono.Era
    */
    interface Era extends Internal.TemporalAccessor, Internal.TemporalAdjuster {
        getLong(arg0: Internal.TemporalField_): number;
        getValue(): number;
        getDisplayName(arg0: Internal.TextStyle_, arg1: Internal.Locale_): string;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        get(arg0: Internal.TemporalField_): number;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        isSupported(arg0: Internal.TemporalField_): boolean;
    }
    type Era_ = (() => number) | Era;
    /**
    * @javaClass net.minecraftforge.common.crafting.IIngredientSerializer
    */
    interface IIngredientSerializer <T> {
        parse(arg0: Internal.JsonObject_): T;
        parse(arg0: Internal.FriendlyByteBuf_): T;
        write(arg0: Internal.FriendlyByteBuf_, arg1: T): void;
    }
    type IIngredientSerializer_<T> = IIngredientSerializer<T>;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent
    */
    class LivingEquipmentChangeEvent extends Internal.LivingEvent {
        getSlot(): EquipmentSlot;
        getListenerList(): Internal.ListenerList;
        getTo(): Internal.ItemStack;
        getFrom(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        get from(): Internal.ItemStack;
        get slot(): EquipmentSlot;
        get to(): Internal.ItemStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEquipmentChangeEvent_ = LivingEquipmentChangeEvent;
    /**
    * @javaClass io.netty.buffer.ByteBufAllocator
    */
    interface ByteBufAllocator {
        directBuffer(): Internal.ByteBuf;
        directBuffer(arg0: number): Internal.ByteBuf;
        directBuffer(arg0: number, arg1: number): Internal.ByteBuf;
        isDirectBufferPooled(): boolean;
        calculateNewCapacity(arg0: number, arg1: number): number;
        compositeDirectBuffer(): Internal.CompositeByteBuf;
        compositeDirectBuffer(arg0: number): Internal.CompositeByteBuf;
        ioBuffer(): Internal.ByteBuf;
        ioBuffer(arg0: number): Internal.ByteBuf;
        ioBuffer(arg0: number, arg1: number): Internal.ByteBuf;
        compositeBuffer(arg0: number): Internal.CompositeByteBuf;
        compositeBuffer(): Internal.CompositeByteBuf;
        compositeHeapBuffer(): Internal.CompositeByteBuf;
        compositeHeapBuffer(arg0: number): Internal.CompositeByteBuf;
        buffer(): Internal.ByteBuf;
        buffer(arg0: number, arg1: number): Internal.ByteBuf;
        buffer(arg0: number): Internal.ByteBuf;
        heapBuffer(): Internal.ByteBuf;
        heapBuffer(arg0: number): Internal.ByteBuf;
        heapBuffer(arg0: number, arg1: number): Internal.ByteBuf;
    }
    type ByteBufAllocator_ = ByteBufAllocator;
    /**
    * @javaClass net.minecraft.network.chat.TextComponent
    */
    class TextComponent extends Internal.BaseComponent {
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextComponent_ = TextComponent;
    /**
    * @javaClass java.util.function.DoublePredicate
    */
    interface DoublePredicate {
        or(arg0: Internal.DoublePredicate_): this;
        test(arg0: number): boolean;
        and(arg0: Internal.DoublePredicate_): this;
        negate(): this;
    }
    type DoublePredicate_ = ((arg0: number) => boolean) | DoublePredicate;
    /**
    * @javaClass it.unimi.dsi.fastutil.Hash
    */
    interface Hash {
    }
    type Hash_ = Hash;
    /**
    * @javaClass net.minecraft.world.level.block.AirBlock
    */
    class AirBlock extends Internal.Block {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AirBlock_ = AirBlock;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.Object2LongEntry
    */
    class Object2LongEntry implements Internal.Comparable<Internal.Object2LongEntry> {
        compareTo(o: Internal.Object2LongEntry_): number;
        readonly "value" : number;
        readonly "key" : any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Object2LongEntry_ = Object2LongEntry;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.blockentity.BlockEntityInstancingController
    */
    interface BlockEntityInstancingController <T> {
        createInstance(arg0: Internal.MaterialManager_, arg1: T): Internal.BlockEntityInstance<T>;
        shouldSkipRender(arg0: T): boolean;
    }
    type BlockEntityInstancingController_<T> = BlockEntityInstancingController<T>;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Builder
    */
    class ModuleDescriptor$Builder {
        mainClass(arg0: string): this;
        build(): Internal.ModuleDescriptor;
        provides(arg0: Internal.ModuleDescriptor$Provides_): this;
        provides(arg0: string, arg1: Internal.List_<string>): this;
        exports(arg0: string): this;
        exports(arg0: Internal.Set_<Internal.ModuleDescriptor$Exports$Modifier_>, arg1: string, arg2: Internal.Set_<string>): this;
        exports(arg0: string, arg1: Internal.Set_<string>): this;
        exports(arg0: Internal.Set_<Internal.ModuleDescriptor$Exports$Modifier_>, arg1: string): this;
        exports(arg0: Internal.ModuleDescriptor$Exports_): this;
        opens(arg0: string): this;
        opens(arg0: Internal.Set_<Internal.ModuleDescriptor$Opens$Modifier_>, arg1: string, arg2: Internal.Set_<string>): this;
        opens(arg0: string, arg1: Internal.Set_<string>): this;
        opens(arg0: Internal.ModuleDescriptor$Opens_): this;
        opens(arg0: Internal.Set_<Internal.ModuleDescriptor$Opens$Modifier_>, arg1: string): this;
        uses(arg0: string): this;
        packages(arg0: Internal.Set_<string>): this;
        version(arg0: string): this;
        version(arg0: Internal.ModuleDescriptor$Version_): this;
        requires(arg0: Internal.ModuleDescriptor$Requires_): this;
        requires(arg0: Internal.Set_<Internal.ModuleDescriptor$Requires$Modifier_>, arg1: string, arg2: Internal.ModuleDescriptor$Version_): this;
        requires(arg0: string): this;
        requires(arg0: Internal.Set_<Internal.ModuleDescriptor$Requires$Modifier_>, arg1: string): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Builder_ = ModuleDescriptor$Builder;
    /**
    * @javaClass dev.ftb.mods.ftbquests.events.QuestProgressEventData
    */
    class QuestProgressEventData <T> {
        withObject<N>(o: N): Internal.QuestProgressEventData<N>;
        readonly "teamData" : Internal.TeamData;
        readonly "onlineMembers" : Internal.List<Internal.ServerPlayer>;
        readonly "notifiedPlayers" : Internal.List<Internal.ServerPlayer>;
        readonly "time" : Internal.Date;
        readonly "object" : T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestProgressEventData_<T> = QuestProgressEventData<T>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.TeamProperties
    */
    class TeamProperties {
        read(tag: Internal.CompoundTag_): void;
        read(buffer: Internal.FriendlyByteBuf_): void;
        set<T>(key: Internal.TeamProperty_<T>, value: T): void;
        updateFrom(properties: Internal.TeamProperties_): this;
        get<T>(key: Internal.TeamProperty_<T>): T;
        copy(): this;
        write(buffer: Internal.FriendlyByteBuf_): void;
        write(tag: Internal.CompoundTag_): Internal.CompoundTag;
        collect(): this;
        readonly "map" : Internal.Map<Internal.TeamProperty, Internal.TeamPropertyValue>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamProperties_ = TeamProperties;
    /**
    * @javaClass java.awt.MenuBar
    */
    class MenuBar extends Internal.MenuComponent implements Internal.MenuContainer, Internal.Accessible {
        add(arg0: Internal.Menu_): Internal.Menu;
        getHelpMenu(): Internal.Menu;
        addNotify(): void;
        deleteShortcut(arg0: Internal.MenuShortcut_): void;
        getMenu(arg0: number): Internal.Menu;
        shortcuts(): Internal.Enumeration<Internal.MenuShortcut>;
        removeNotify(): void;
        getMenuCount(): number;
        countMenus(): number;
        getAccessibleContext(): Internal.AccessibleContext;
        setHelpMenu(arg0: Internal.Menu_): void;
        remove(arg0: Internal.MenuComponent_): void;
        remove(arg0: number): void;
        getShortcutMenuItem(arg0: Internal.MenuShortcut_): Internal.MenuItem;
        get accessibleContext(): Internal.AccessibleContext;
        get menuCount(): number;
        get helpMenu(): Internal.Menu;
        set helpMenu(arg0: Internal.Menu_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MenuBar_ = MenuBar;
    /**
    * @javaClass java.util.Properties
    */
    class Properties extends Internal.Hashtable<any, any> {
        getOrDefault(arg0: any, arg1: any): any;
        loadFromXML(arg0: Internal.InputStream_): void;
        keys(): Internal.Enumeration<any>;
        computeIfAbsent(arg0: any, arg1: Internal.Function_<any, any>): any;
        values(): Internal.Collection<any>;
        save(arg0: Internal.OutputStream_, arg1: string): void;
        replace(arg0: any, arg1: any): any;
        replace(arg0: any, arg1: any, arg2: any): boolean;
        replaceAll(arg0: Internal.BiFunction_<any, any, any>): void;
        containsValue(arg0: any): boolean;
        put(arg0: any, arg1: any): any;
        remove(arg0: any, arg1: any): boolean;
        remove(arg0: any): any;
        compute(arg0: any, arg1: Internal.BiFunction_<any, any, any>): any;
        load(arg0: Internal.Reader_): void;
        load(arg0: Internal.InputStream_): void;
        hashCode(): number;
        putAll(arg0: Internal.Map_<any, any>): void;
        merge(arg0: any, arg1: any, arg2: Internal.BiFunction_<any, any, any>): any;
        get(arg0: any): any;
        keySet(): Internal.Set<any>;
        getProperty(arg0: string, arg1: string): string;
        getProperty(arg0: string): string;
        entrySet(): Internal.Set<Internal.Map$Entry<any, any>>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<any, any>): void;
        stringPropertyNames(): Internal.Set<string>;
        isEmpty(): boolean;
        clear(): void;
        store(arg0: Internal.OutputStream_, arg1: string): void;
        store(arg0: Internal.Writer_, arg1: string): void;
        list(arg0: Internal.PrintWriter_): void;
        list(arg0: Internal.PrintStream_): void;
        storeToXML(arg0: Internal.OutputStream_, arg1: string, arg2: string): void;
        storeToXML(arg0: Internal.OutputStream_, arg1: string, arg2: Internal.Charset_): void;
        storeToXML(arg0: Internal.OutputStream_, arg1: string): void;
        contains(arg0: any): boolean;
        computeIfPresent(arg0: any, arg1: Internal.BiFunction_<any, any, any>): any;
        size(): number;
        propertyNames(): Internal.Enumeration<any>;
        setProperty(arg0: string, arg1: string): any;
        elements(): Internal.Enumeration<any>;
        equals(arg0: any): boolean;
        clone(): any;
        toString(): string;
        putIfAbsent(arg0: any, arg1: any): any;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Properties_ = Properties;
    /**
    * @javaClass com.mojang.serialization.codecs.UnboundedMapCodec
    */
    class UnboundedMapCodec <K, V> implements Internal.BaseMapCodec<K, V>, Internal.Codec<Internal.Map<K, V>> {
        encode<T>(arg0: Internal.Map_<K, V>, arg1: Internal.DynamicOps_<T>, arg2: T): Internal.DataResult<T>;
        elementCodec(): Internal.Codec<V>;
        keyCodec(): Internal.Codec<K>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<com.mojang.datafixers.util.Pair<Internal.Map<K, V>, T>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnboundedMapCodec_<K, V> = UnboundedMapCodec<K, V>;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Requires$Modifier
    */
    class ModuleDescriptor$Requires$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Requires$Modifier> {
        static valueOf(arg0: string): this;
        static values(): Internal.ModuleDescriptor$Requires$Modifier[];
        static readonly "TRANSITIVE" : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly "SYNTHETIC" : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly "MANDATED" : Internal.ModuleDescriptor$Requires$Modifier;
        static readonly "STATIC" : Internal.ModuleDescriptor$Requires$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Requires$Modifier_ = "synthetic" | "static" | "mandated" | "transitive" | ModuleDescriptor$Requires$Modifier;
    /**
    * Fired when the drops of an entity is determined.
    * @javaClass dev.latvian.mods.kubejs.entity.forge.LivingEntityDropsEventJS
    */
    class LivingEntityDropsEventJS extends Internal.LivingEntityEventJS {
        addDrop(item: any, chance: number): Internal.ItemEntityJS;
        addDrop(item: any): Internal.ItemEntityJS;
        getLootingLevel(): number;
        getSource(): Internal.DamageSource;
        /**
        * The list of item drops to be summoned.
        *
        * Changing this will result in modification of drops.
        *
        * However, it is advised to use .addDrop() to add a drop.
        */
        getDrops(): Internal.List<Internal.ItemEntityJS>;
        getEntity(): Internal.EntityJS;
        isRecentlyHit(): boolean;
        canCancel(): boolean;
        "eventDrops" : Internal.List<Internal.ItemEntityJS>;
        /**
        * The list of item drops to be summoned.
        *
        * Changing this will result in modification of drops.
        *
        * However, it is advised to use .addDrop() to add a drop.
        */
        get drops(): Internal.List<Internal.ItemEntityJS>;
        get recentlyHit(): boolean;
        get lootingLevel(): number;
        get source(): Internal.DamageSource;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the drops of an entity is determined.
    */
    type LivingEntityDropsEventJS_ = LivingEntityDropsEventJS;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEvent$LivingVisibilityEvent
    */
    class LivingEvent$LivingVisibilityEvent extends Internal.LivingEvent {
        getLookingEntity(): Internal.Entity;
        getListenerList(): Internal.ListenerList;
        getVisibilityModifier(): number;
        modifyVisibility(arg0: number): void;
        get visibilityModifier(): number;
        get listenerList(): Internal.ListenerList;
        get lookingEntity(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEvent$LivingVisibilityEvent_ = LivingEvent$LivingVisibilityEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.ClassShutter
    */
    interface ClassShutter {
        visibleToScripts(arg0: string, arg1: number): boolean;
    }
    type ClassShutter_ = ((arg0: string, arg1: number) => boolean) | ClassShutter;
    /**
    * @javaClass net.minecraftforge.client.model.data.ModelProperty
    */
    class ModelProperty <T> implements Internal.Predicate<T> {
        test(arg0: T): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelProperty_<T> = ModelProperty<T>;
    /**
    * @javaClass net.minecraft.world.damagesource.DamageSource
    */
    class DamageSource implements Internal.AccessorDamageSource {
        getPlayer(): Internal.PlayerJS<any>;
        getActual(): Internal.EntityJS;
        getType(): string;
        getImmediate(): Internal.EntityJS;
        toString(): string;
        get actual(): Internal.EntityJS;
        get immediate(): Internal.EntityJS;
        get type(): string;
        get player(): Internal.PlayerJS<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DamageSource_ = "inFire" | "lightningBolt" | "onFire" | "lava" | "hotFloor" | "inWall" | "cramming" | "drown" | "starve" | "cactus" | "fall" | "flyIntoWall" | "outOfWorld" | "generic" | "magic" | "wither" | "anvil" | "fallingBlock" | "dragonBreath" | "dryout" | "sweetBerryBush" | "freeze" | "fallingStalactite" | "stalagmite" | DamageSource;
    /**
    * @javaClass com.mojang.math.Matrix4f
    */
    class Matrix4f implements Internal.MatrixWrite {
        multiplyBackward(arg0: Internal.Matrix4f_): void;
        hashCode(): number;
        flywheel$writeUnsafe(arg0: number): void;
        equals(arg0: any): boolean;
        setTranslation(arg0: number, arg1: number, arg2: number): void;
        flywheel$write(arg0: Internal.VecBuffer_): void;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Matrix4f_ = Matrix4f;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptPack
    */
    class ScriptPack {
        readonly "manager" : Internal.ScriptManager;
        "scope" : Internal.Scriptable;
        "context" : Internal.Context;
        readonly "scripts" : Internal.List<Internal.ScriptFile>;
        readonly "info" : Internal.ScriptPackInfo;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptPack_ = ScriptPack;
    /**
    * @javaClass com.mojang.serialization.codecs.SimpleMapCodec
    */
    class SimpleMapCodec <K, V> extends Internal.MapCodec<Internal.Map<K, V>> implements Internal.BaseMapCodec<K, V> {
        encode<T>(arg0: Internal.Map_<K, V>, arg1: Internal.DynamicOps_<T>, arg2: Internal.RecordBuilder_<T>): Internal.RecordBuilder<T>;
        elementCodec(): Internal.Codec<V>;
        keyCodec(): Internal.Codec<K>;
        keys<T>(arg0: Internal.DynamicOps_<T>): Internal.Stream<T>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: Internal.MapLike_<T>): Internal.DataResult<Internal.Map<K, V>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimpleMapCodec_<K, V> = SimpleMapCodec<K, V>;
    /**
    * @javaClass java.util.Enumeration
    */
    interface Enumeration <E> {
        hasMoreElements(): boolean;
        asIterator(): Internal.Iterator<E>;
        nextElement(): E;
    }
    type Enumeration_<E> = Enumeration<E>;
    /**
    * @javaClass java.awt.event.FocusListener
    */
    interface FocusListener extends Internal.EventListener {
        focusGained(arg0: Internal.FocusEvent_): void;
        focusLost(arg0: Internal.FocusEvent_): void;
    }
    type FocusListener_ = FocusListener;
    /**
    * Fired when the entity loot table is registering.
    * @javaClass dev.latvian.mods.kubejs.loot.EntityLootEventJS
    */
    class EntityLootEventJS extends Internal.LootEventJS {
        addEntity(type: Internal.EntityType_<any>, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getType(): string;
        modifyEntity(type: Internal.EntityType_<any>, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getDirectory(): string;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the entity loot table is registering.
    */
    type EntityLootEventJS_ = EntityLootEventJS;
    /**
    * @javaClass net.minecraftforge.client.event.RegisterClientCommandsEvent
    */
    class RegisterClientCommandsEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getDispatcher(): Internal.CommandDispatcher<Internal.CommandSourceStack>;
        get listenerList(): Internal.ListenerList;
        get dispatcher(): Internal.CommandDispatcher<Internal.CommandSourceStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegisterClientCommandsEvent_ = RegisterClientCommandsEvent;
    /**
    * @javaClass net.minecraft.world.phys.BlockHitResult
    */
    class BlockHitResult extends Internal.HitResult {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockHitResult_ = BlockHitResult;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2ReferenceFunction
    */
    interface Float2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Float2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2FloatFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Float2ReferenceFunction_<V> = ((arg0: number) => V) | Float2ReferenceFunction<V>;
    /**
    * @javaClass dev.architectury.hooks.level.biome.GenerationProperties
    */
    interface GenerationProperties {
        getFeatures(arg0: DecorationGenerationStep_): Internal.Iterable<Internal.Holder<Internal.PlacedFeature>>;
        getFeatures(): Internal.List<Internal.Iterable<Internal.Holder<Internal.PlacedFeature>>>;
        getCarvers(arg0: CarvingGenerationStep_): Internal.Iterable<Internal.Holder<Internal.ConfiguredWorldCarver<any>>>;
    }
    type GenerationProperties_ = GenerationProperties;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEvent
    */
    class LivingEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getEntityLiving(): Internal.LivingEntity;
        get entityLiving(): Internal.LivingEntity;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEvent_ = LivingEvent;
    /**
    * @javaClass java.awt.dnd.DragSourceListener
    */
    interface DragSourceListener extends Internal.EventListener {
        dragEnter(arg0: Internal.DragSourceDragEvent_): void;
        dragDropEnd(arg0: Internal.DragSourceDropEvent_): void;
        dropActionChanged(arg0: Internal.DragSourceDragEvent_): void;
        dragOver(arg0: Internal.DragSourceDragEvent_): void;
        dragExit(arg0: Internal.DragSourceEvent_): void;
    }
    type DragSourceListener_ = DragSourceListener;
    /**
    * @javaClass com.mojang.serialization.Keyable
    */
    interface Keyable {
        keys<T>(arg0: Internal.DynamicOps_<T>): Internal.Stream<T>;
        forStrings(arg0: Internal.Supplier_<Internal.Stream_<string>>): this;
    }
    type Keyable_ = ((arg0: Internal.DynamicOps<T>) => Internal.Stream<T>) | Keyable;
    /**
    * @javaClass mezz.jei.api.helpers.IJeiHelpers
    */
    interface IJeiHelpers {
        getFocusFactory(): Internal.IFocusFactory;
        getStackHelper(): Internal.IStackHelper;
        getModIdHelper(): Internal.IModIdHelper;
        getPlatformFluidHelper(): Internal.IPlatformFluidHelper<any>;
        getGuiHelper(): Internal.IGuiHelper;
    }
    type IJeiHelpers_ = IJeiHelpers;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeRecipeSerializer
    */
    interface IForgeRecipeSerializer <T> {
        fromJson(arg0: ResourceLocation_, arg1: Internal.JsonObject_, arg2: Internal.ICondition$IContext_): T;
    }
    type IForgeRecipeSerializer_<T> = IForgeRecipeSerializer<T>;
    /**
    * @javaClass java.awt.MenuShortcut
    */
    class MenuShortcut implements Internal.Serializable {
        getKey(): number;
        usesShiftModifier(): boolean;
        hashCode(): number;
        equals(arg0: Internal.MenuShortcut_): boolean;
        equals(arg0: any): boolean;
        toString(): string;
        get key(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MenuShortcut_ = MenuShortcut;
    /**
    * @javaClass io.netty.util.concurrent.GenericFutureListener
    */
    interface GenericFutureListener <F> extends Internal.EventListener {
        operationComplete(arg0: F): void;
    }
    type GenericFutureListener_<F> = ((arg0: F) => void) | GenericFutureListener<F>;
    /**
    * @javaClass com.mojang.datafixers.util.Function12
    */
    interface Function12 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> {
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function3<T10, T11, T12, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function5<T8, T9, T10, T11, T12, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function4<T9, T10, T11, T12, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function7<T6, T7, T8, T9, T10, T11, T12, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function6<T7, T8, T9, T10, T11, T12, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.BiFunction<T11, T12, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function9<T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function<T12, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function8<T5, T6, T7, T8, T9, T10, T11, T12, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function10<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>;
        curry(): Internal.Function<T1, Internal.Function11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>>;
    }
    type Function12_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12) => R) | Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R>;
    /**
    * @javaClass net.minecraft.nbt.CollectionTag
    */
    abstract class CollectionTag <T> extends Internal.AbstractList<T> implements Internal.Tag {
        add(arg0: number, arg1: T): void;
        set(arg0: number, arg1: T): T;
        remove(arg0: number): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CollectionTag_<T> = CollectionTag<T>;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeBlockEntity
    */
    interface IForgeBlockEntity extends Internal.ICapabilitySerializable<Internal.CompoundTag> {
        requestModelDataUpdate(): void;
        getModelData(): Internal.IModelData;
        serializeNBT(): Internal.CompoundTag;
        getTileData(): Internal.CompoundTag;
        onChunkUnloaded(): void;
        getRenderBoundingBox(): Internal.AABB;
        onDataPacket(arg0: Internal.Connection_, arg1: Internal.ClientboundBlockEntityDataPacket_): void;
        onLoad(): void;
        deserializeNBT(arg0: Internal.CompoundTag_): void;
        handleUpdateTag(arg0: Internal.CompoundTag_): void;
    }
    type IForgeBlockEntity_ = (() => Internal.CompoundTag) | IForgeBlockEntity;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2DoubleFunction
    */
    interface Double2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Double2FloatFunction;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2DoubleFunction_ = ((arg0: number) => number) | Double2DoubleFunction;
    /**
    * @javaClass java.lang.constant.ClassDesc
    */
    interface ClassDesc extends Internal.ConstantDesc, Internal.TypeDescriptor$OfField<Internal.ClassDesc> {
        componentType(): this;
        arrayType(): this;
        arrayType(arg0: number): this;
        displayName(): string;
        of(arg0: string): this;
        of(arg0: string, arg1: string): this;
        equals(arg0: any): boolean;
        descriptorString(): string;
        ofDescriptor(arg0: string): this;
        isArray(): boolean;
        packageName(): string;
        isClassOrInterface(): boolean;
        nested(arg0: string): this;
        nested(arg0: string, ... arg1: string[]): this;
        isPrimitive(): boolean;
    }
    type ClassDesc_ = ClassDesc;
    /**
    * @javaClass java.security.PermissionCollection
    */
    abstract class PermissionCollection implements Internal.Serializable {
        add(arg0: Internal.Permission_): void;
        elementsAsStream(): Internal.Stream<Internal.Permission>;
        isReadOnly(): boolean;
        elements(): Internal.Enumeration<Internal.Permission>;
        toString(): string;
        implies(arg0: Internal.Permission_): boolean;
        setReadOnly(): void;
        get readOnly(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionCollection_ = PermissionCollection;
    /**
    * @javaClass java.awt.Point
    */
    class Point extends Internal.Point2D implements Internal.Serializable {
        getX(): number;
        move(arg0: number, arg1: number): void;
        getLocation(): this;
        getY(): number;
        setLocation(arg0: Internal.Point_): void;
        setLocation(arg0: number, arg1: number): void;
        equals(arg0: any): boolean;
        toString(): string;
        translate(arg0: number, arg1: number): void;
        "x" : number;
        "y" : number;
        get location(): this;
        set location(arg0: Internal.Point_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Point_ = Point;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.StringBuilderAppendable
    */
    interface StringBuilderAppendable {
        appendString(arg0: Internal.StringBuilder_): void;
    }
    type StringBuilderAppendable_ = ((arg0: Internal.StringBuilder) => void) | StringBuilderAppendable;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2IntFunction
    */
    interface Byte2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2IntFunction;
    }
    type Byte2IntFunction_ = ((arg0: number) => number) | Byte2IntFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.predicate.BlockPredicate
    */
    interface BlockPredicate {
        check(arg0: Internal.BlockContainerJS_): boolean;
    }
    type BlockPredicate_ = ((arg0: Internal.BlockContainerJS) => boolean) | BlockPredicate;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.Reward
    */
    abstract class Reward extends Internal.QuestObjectBase {
        addTitleInMouseOverText(): boolean;
        getExcludeFromClaimAll(): boolean;
        deleteChildren(): void;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        isTeamReward(): boolean;
        automatedClaimPre(tileEntity: Internal.BlockEntity_, items: Internal.List_<Internal.ItemStack_>, random: Internal.Random_, playerId: Internal.UUID_, player: Internal.ServerPlayer_): boolean;
        writeData(nbt: Internal.CompoundTag_): void;
        createSubGroup(group: Internal.ConfigGroup_): Internal.ConfigGroup;
        forceProgress(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        getAltIcon(): Internal.Icon;
        getObjectType(): Internal.QuestObjectType;
        claim(arg0: Internal.ServerPlayer_, arg1: boolean): void;
        getAutoClaimType(): Internal.RewardAutoClaim;
        getParentID(): number;
        readData(nbt: Internal.CompoundTag_): void;
        editedFromGUI(): void;
        refreshJEI(): number;
        getQuestChapter(): Internal.Chapter;
        getQuestFile(): Internal.QuestFile;
        getButtonText(): string;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        addMouseOverText(list: Internal.TooltipList_): void;
        getIngredient(): any;
        getAltTitle(): net.minecraft.network.chat.Component;
        getType(): Internal.RewardType;
        onButtonClicked(button: Internal.Button_, canClick: boolean): void;
        automatedClaimPost(tileEntity: Internal.BlockEntity_, playerId: Internal.UUID_, player: Internal.ServerPlayer_): void;
        claimAutomated(tileEntity: Internal.BlockEntity_, playerId: Internal.UUID_, player: Internal.ServerPlayer_, simulate: boolean): Internal.Optional<Internal.ItemStack>;
        deleteSelf(): void;
        onCreated(): void;
        "autoclaim" : Internal.RewardAutoClaim;
        "team" : Internal.Tristate;
        "quest" : Internal.Quest;
        get buttonText(): string;
        get ingredient(): any;
        get teamReward(): boolean;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get type(): Internal.RewardType;
        get excludeFromClaimAll(): boolean;
        get parentID(): number;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        get autoClaimType(): Internal.RewardAutoClaim;
        get questChapter(): Internal.Chapter;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Reward_ = Reward;
    /**
    * @javaClass java.lang.Enum$EnumDesc
    */
    class Enum$EnumDesc <E> extends Internal.DynamicConstantDesc<E> {
        static of<E>(arg0: Internal.ClassDesc_, arg1: string): Internal.Enum$EnumDesc<E>;
        toString(): string;
        resolveConstantDesc(arg0: Internal.MethodHandles$Lookup_): E;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Enum$EnumDesc_<E> = Enum$EnumDesc<E>;
    /**
    * @javaClass dev.latvian.mods.kubejs.integration.forge.jei.HideJEIEventJS
    */
    class HideJEIEventJS <T> extends Internal.EventJS {
        hide(o: any): void;
        getAllIngredients(): Internal.Collection<T>;
        hideAll(): void;
        get allIngredients(): Internal.Collection<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HideJEIEventJS_<T> = HideJEIEventJS<T>;
    /**
    * @javaClass net.minecraft.world.level.LevelTimeAccess
    */
    interface LevelTimeAccess extends Internal.LevelReader {
    }
    type LevelTimeAccess_ = LevelTimeAccess;
    /**
    * @javaClass net.minecraft.world.level.levelgen.VerticalAnchor
    */
    interface VerticalAnchor {
    }
    type VerticalAnchor_ = VerticalAnchor;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.CompostablesRecipeEventJS
    */
    class CompostablesRecipeEventJS extends Internal.EventJS {
        add(ingredient: Internal.IngredientJS_, f: number): void;
        removeAll(): void;
        remove(ingredient: Internal.IngredientJS_): void;
        static "originalMap" : {};
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CompostablesRecipeEventJS_ = CompostablesRecipeEventJS;
    /**
    * @javaClass net.minecraft.world.item.enchantment.Enchantment$Rarity
    */
    class Enchantment$Rarity extends Internal.Enum<Internal.Enchantment$Rarity> {
        static valueOf(arg0: string): this;
        static values(): Internal.Enchantment$Rarity[];
        static readonly "RARE" : Internal.Enchantment$Rarity;
        static readonly "VERY_RARE" : Internal.Enchantment$Rarity;
        static readonly "UNCOMMON" : Internal.Enchantment$Rarity;
        static readonly "COMMON" : Internal.Enchantment$Rarity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Enchantment$Rarity_ = "uncommon" | "common" | "rare" | "very_rare" | Enchantment$Rarity;
    /**
    * @javaClass java.lang.Cloneable
    */
    interface Cloneable {
    }
    type Cloneable_ = Cloneable;
    /**
    * @javaClass dev.latvian.mods.kubejs.event.IEventHandler
    */
    interface IEventHandler {
        onEvent(arg0: Internal.EventJS_): void;
    }
    type IEventHandler_ = ((arg0: Internal.EventJS) => void) | IEventHandler;
    /**
    * @javaClass java.awt.image.DataBuffer
    */
    abstract class DataBuffer {
        getSize(): number;
        getNumBanks(): number;
        static getDataTypeSize(arg0: number): number;
        setElemDouble(arg0: number, arg1: number, arg2: number): void;
        setElemDouble(arg0: number, arg1: number): void;
        getElemDouble(arg0: number): number;
        getElemDouble(arg0: number, arg1: number): number;
        getDataType(): number;
        getOffset(): number;
        setElem(arg0: number, arg1: number, arg2: number): void;
        setElem(arg0: number, arg1: number): void;
        getOffsets(): number[];
        setElemFloat(arg0: number, arg1: number): void;
        setElemFloat(arg0: number, arg1: number, arg2: number): void;
        getElemFloat(arg0: number, arg1: number): number;
        getElemFloat(arg0: number): number;
        getElem(arg0: number, arg1: number): number;
        getElem(arg0: number): number;
        static readonly "TYPE_INT" : 3;
        static readonly "TYPE_DOUBLE" : 5;
        static readonly "TYPE_SHORT" : 2;
        static readonly "TYPE_UNDEFINED" : 32;
        static readonly "TYPE_BYTE" : 0;
        static readonly "TYPE_USHORT" : 1;
        static readonly "TYPE_FLOAT" : 4;
        get size(): number;
        get offset(): number;
        get offsets(): number[];
        get dataType(): number;
        get numBanks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataBuffer_ = DataBuffer;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityEvent
    */
    class EntityEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getEntity(): Internal.Entity;
        get listenerList(): Internal.ListenerList;
        get entity(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityEvent_ = EntityEvent;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorRenderType
    */
    interface AccessorRenderType {
    }
    type AccessorRenderType_ = AccessorRenderType;
    /**
    * @javaClass net.minecraft.world.level.material.MaterialColor
    */
    class MaterialColor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MaterialColor_ = MaterialColor;
    /**
    * @javaClass java.util.random.RandomGenerator
    */
    interface RandomGenerator {
        nextFloat(): number;
        nextFloat(arg0: number): number;
        nextFloat(arg0: number, arg1: number): number;
        isDeprecated(): boolean;
        getDefault(): this;
        nextInt(arg0: number): number;
        nextInt(arg0: number, arg1: number): number;
        nextInt(): number;
        nextLong(arg0: number, arg1: number): number;
        nextLong(): number;
        nextLong(arg0: number): number;
        nextGaussian(arg0: number, arg1: number): number;
        nextGaussian(): number;
        nextDouble(arg0: number): number;
        nextDouble(): number;
        nextDouble(arg0: number, arg1: number): number;
        nextBytes(arg0: number[]): void;
        longs(arg0: number, arg1: number, arg2: number): Internal.LongStream;
        longs(arg0: number, arg1: number): Internal.LongStream;
        longs(): Internal.LongStream;
        longs(arg0: number): Internal.LongStream;
        nextExponential(): number;
        doubles(): Internal.DoubleStream;
        doubles(arg0: number, arg1: number, arg2: number): Internal.DoubleStream;
        doubles(arg0: number, arg1: number): Internal.DoubleStream;
        doubles(arg0: number): Internal.DoubleStream;
        ints(arg0: number, arg1: number): Internal.IntStream;
        ints(): Internal.IntStream;
        ints(arg0: number): Internal.IntStream;
        ints(arg0: number, arg1: number, arg2: number): Internal.IntStream;
        of(arg0: string): this;
        nextBoolean(): boolean;
    }
    type RandomGenerator_ = (() => number) | RandomGenerator;
    /**
    * @javaClass java.awt.dnd.DragSourceEvent
    */
    class DragSourceEvent extends Internal.EventObject {
        getX(): number;
        getLocation(): Internal.Point;
        getY(): number;
        getDragSourceContext(): Internal.DragSourceContext;
        get x(): number;
        get dragSourceContext(): Internal.DragSourceContext;
        get y(): number;
        get location(): Internal.Point;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragSourceEvent_ = DragSourceEvent;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.TeamBase
    */
    abstract class TeamBase {
        isAlly(profile: Internal.UUID_): boolean;
        getProperty<T>(property: Internal.TeamProperty_<T>): T;
        getName(): net.minecraft.network.chat.Component;
        getHighestRank(playerId: Internal.UUID_): Internal.TeamRank;
        isValid(): boolean;
        getExtraData(): Internal.CompoundTag;
        save(): void;
        getColor(): number;
        getId(): Internal.UUID;
        getRanked(rank: Internal.TeamRank_): Internal.Map<Internal.UUID, Internal.TeamRank>;
        isMember(uuid: Internal.UUID_): boolean;
        isOfficer(profile: Internal.UUID_): boolean;
        getDescription(): string;
        isFreeToJoin(): boolean;
        getColoredName(): net.minecraft.network.chat.Component;
        getStringID(): string;
        isInvited(profile: Internal.UUID_): boolean;
        getDisplayName(): string;
        getType(): Internal.TeamType;
        hashCode(): number;
        setProperty<T>(property: Internal.TeamProperty_<T>, value: T): void;
        equals(o: any): boolean;
        toString(): string;
        getMembers(): Internal.Set<Internal.UUID>;
        static readonly "FREE_TO_JOIN" : Internal.BooleanProperty;
        static readonly "DESCRIPTION" : Internal.StringProperty;
        static readonly "COLOR" : Internal.ColorProperty;
        readonly "messageHistory" : Internal.List<Internal.TeamMessage>;
        static readonly "DISPLAY_NAME" : Internal.StringProperty;
        readonly "properties" : Internal.TeamProperties;
        get valid(): boolean;
        get stringID(): string;
        get color(): number;
        get extraData(): Internal.CompoundTag;
        get displayName(): string;
        get members(): Internal.Set<Internal.UUID>;
        get name(): net.minecraft.network.chat.Component;
        get description(): string;
        get id(): Internal.UUID;
        get type(): Internal.TeamType;
        get coloredName(): net.minecraft.network.chat.Component;
        get freeToJoin(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamBase_ = TeamBase;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.WallBlockBuilder
    */
    class WallBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WallBlockBuilder_ = WallBlockBuilder;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.ChapterImage
    */
    class ChapterImage implements Internal.Movable {
        drawMoved(matrixStack: Internal.PoseStack_): void;
        getHeight(): number;
        getX(): number;
        move(to: Internal.Chapter_, _x: number, _y: number): void;
        readData(nbt: Internal.CompoundTag_): void;
        getY(): number;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        getShape(): string;
        getWidth(): number;
        writeData(nbt: Internal.CompoundTag_): void;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        getChapter(): Internal.Chapter;
        "chapter" : Internal.Chapter;
        "image" : Internal.Icon;
        "hover" : Internal.List<string>;
        "dev" : boolean;
        "corner" : boolean;
        "dependency" : Internal.Quest;
        "rotation" : number;
        "x" : number;
        "width" : number;
        "y" : number;
        "click" : string;
        "height" : number;
        get shape(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChapterImage_ = ChapterImage;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntIterable
    */
    interface IntIterable extends Internal.Iterable<number> {
        iterator(): Internal.IntIterator;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: Internal.IntConsumer_): void;
        forEach(arg0: Internal.Consumer_<number>): void;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): void;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
    }
    type IntIterable_ = (() => Internal.IntIterator) | IntIterable;
    /**
    * @javaClass java.nio.file.FileSystem
    */
    abstract class FileSystem implements Internal.Closeable {
        isReadOnly(): boolean;
        isOpen(): boolean;
        supportedFileAttributeViews(): Internal.Set<string>;
        provider(): Internal.FileSystemProvider;
        getFileStores(): Internal.Iterable<Internal.FileStore>;
        getRootDirectories(): Internal.Iterable<Internal.Path>;
        getPath(arg0: string, ... arg1: string[]): Internal.Path;
        getSeparator(): string;
        getPathMatcher(arg0: string): Internal.PathMatcher;
        newWatchService(): Internal.WatchService;
        close(): void;
        getUserPrincipalLookupService(): Internal.UserPrincipalLookupService;
        get rootDirectories(): Internal.Iterable<Internal.Path>;
        get readOnly(): boolean;
        get userPrincipalLookupService(): Internal.UserPrincipalLookupService;
        get separator(): string;
        get open(): boolean;
        get fileStores(): Internal.Iterable<Internal.FileStore>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileSystem_ = FileSystem;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseReleasedEvent$Pre
    */
    class ScreenEvent$MouseReleasedEvent$Pre extends Internal.ScreenEvent$MouseReleasedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseReleasedEvent$Pre_ = ScreenEvent$MouseReleasedEvent$Pre;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeEnchantment
    */
    interface IForgeEnchantment {
        getDamageBonus(arg0: number, arg1: Internal.MobType_, arg2: Internal.ItemStack_): number;
    }
    type IForgeEnchantment_ = IForgeEnchantment;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent$IdMappingEvent
    */
    class RegistryEvent$IdMappingEvent extends net.minecraftforge.eventbus.api.Event {
        getRegistries(): Internal.ImmutableSet<ResourceLocation>;
        getRemaps(arg0: ResourceLocation_): Internal.ImmutableList<Internal.RegistryEvent$IdMappingEvent$ModRemapping>;
        getListenerList(): Internal.ListenerList;
        readonly "isFrozen" : boolean;
        get listenerList(): Internal.ListenerList;
        get registries(): Internal.ImmutableSet<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent$IdMappingEvent_ = RegistryEvent$IdMappingEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.DoubleComparator
    */
    interface DoubleComparator extends Internal.Comparator<number> {
        compare(arg0: number, arg1: number): number;
        thenComparing(arg0: Internal.Comparator_<number>): Internal.Comparator<number>;
        thenComparing(arg0: Internal.DoubleComparator_): this;
        reversed(): this;
    }
    type DoubleComparator_ = ((arg0: number, arg1: number) => number) | DoubleComparator;
    /**
    * @javaClass com.mojang.datafixers.util.Function7
    */
    interface Function7 <T1, T2, T3, T4, T5, T6, T7, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7): R;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.BiFunction<T6, T7, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function<T7, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function4<T4, T5, T6, T7, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function3<T5, T6, T7, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function5<T3, T4, T5, T6, T7, R>>;
        curry(): Internal.Function<T1, Internal.Function6<T2, T3, T4, T5, T6, T7, R>>;
    }
    type Function7_<T1, T2, T3, T4, T5, T6, T7, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7) => R) | Function7<T1, T2, T3, T4, T5, T6, T7, R>;
    /**
    * @javaClass java.text.FieldPosition
    */
    class FieldPosition {
        getEndIndex(): number;
        hashCode(): number;
        getFieldAttribute(): Internal.Format$Field;
        equals(arg0: any): boolean;
        getField(): number;
        setEndIndex(arg0: number): void;
        toString(): string;
        getBeginIndex(): number;
        setBeginIndex(arg0: number): void;
        get field(): number;
        get fieldAttribute(): Internal.Format$Field;
        get endIndex(): number;
        get beginIndex(): number;
        set endIndex(arg0: number);
        set beginIndex(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FieldPosition_ = FieldPosition;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.IScheduledEventCallback
    */
    interface IScheduledEventCallback {
        onCallback(arg0: Internal.ScheduledEvent_): void;
    }
    type IScheduledEventCallback_ = ((arg0: Internal.ScheduledEvent) => void) | IScheduledEventCallback;
    /**
    * @javaClass com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType
    */
    class Dynamic2CommandExceptionType implements Internal.CommandExceptionType {
        createWithContext(arg0: Internal.ImmutableStringReader_, arg1: any, arg2: any): Internal.CommandSyntaxException;
        create(arg0: any, arg1: any): Internal.CommandSyntaxException;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dynamic2CommandExceptionType_ = Dynamic2CommandExceptionType;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemFoodEatenEventJS
    */
    class ItemFoodEatenEventJS extends Internal.PlayerEventJS {
        getItem(): Internal.ItemStackJS;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemFoodEatenEventJS_ = ItemFoodEatenEventJS;
    /**
    * @javaClass com.mojang.blaze3d.vertex.VertexFormatElement
    */
    class VertexFormatElement {
        getElementCount(): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        get elementCount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VertexFormatElement_ = VertexFormatElement;
    /**
    * @javaClass java.util.stream.IntStream
    */
    interface IntStream extends Internal.BaseStream<number, Internal.IntStream> {
        average(): Internal.OptionalDouble;
        sequential(): this;
        takeWhile(arg0: Internal.IntPredicate_): this;
        distinct(): this;
        range(arg0: number, arg1: number): this;
        findFirst(): Internal.OptionalInt;
        sum(): number;
        skip(arg0: number): this;
        asLongStream(): Internal.LongStream;
        allMatch(arg0: Internal.IntPredicate_): boolean;
        mapToObj<U>(arg0: Internal.IntFunction_<U>): Internal.Stream<U>;
        empty(): this;
        mapMulti(arg0: Internal.IntStream$IntMapMultiConsumer_): this;
        iterator(): Internal.PrimitiveIterator$OfInt;
        asDoubleStream(): Internal.DoubleStream;
        min(): Internal.OptionalInt;
        mapToLong(arg0: Internal.IntToLongFunction_): Internal.LongStream;
        parallel(): this;
        noneMatch(arg0: Internal.IntPredicate_): boolean;
        findAny(): Internal.OptionalInt;
        of(arg0: number): this;
        of(... arg0: number[]): this;
        limit(arg0: number): this;
        builder(): Internal.IntStream$Builder;
        toArray(): number[];
        forEachOrdered(arg0: Internal.IntConsumer_): void;
        generate(arg0: Internal.IntSupplier_): this;
        anyMatch(arg0: Internal.IntPredicate_): boolean;
        map(arg0: Internal.IntUnaryOperator_): this;
        mapToDouble(arg0: Internal.IntToDoubleFunction_): Internal.DoubleStream;
        iterate(arg0: number, arg1: Internal.IntUnaryOperator_): this;
        iterate(arg0: number, arg1: Internal.IntPredicate_, arg2: Internal.IntUnaryOperator_): this;
        reduce(arg0: number, arg1: Internal.IntBinaryOperator_): number;
        reduce(arg0: Internal.IntBinaryOperator_): Internal.OptionalInt;
        spliterator(): Internal.Spliterator$OfInt;
        max(): Internal.OptionalInt;
        forEach(arg0: Internal.IntConsumer_): void;
        count(): number;
        concat(arg0: Internal.IntStream_, arg1: Internal.IntStream_): this;
        dropWhile(arg0: Internal.IntPredicate_): this;
        peek(arg0: Internal.IntConsumer_): this;
        flatMap(arg0: Internal.IntFunction_<Internal.IntStream_>): this;
        filter(arg0: Internal.IntPredicate_): this;
        sorted(): this;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.IntSummaryStatistics;
        rangeClosed(arg0: number, arg1: number): this;
        collect<R>(arg0: Internal.Supplier_<R>, arg1: Internal.ObjIntConsumer_<R>, arg2: Internal.BiConsumer_<R, R>): R;
    }
    type IntStream_ = IntStream;
    /**
    * @javaClass java.awt.FontMetrics
    */
    abstract class FontMetrics implements Internal.Serializable {
        getStringBounds(arg0: string[], arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.Rectangle2D;
        getStringBounds(arg0: Internal.CharacterIterator_, arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.Rectangle2D;
        getStringBounds(arg0: string, arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.Rectangle2D;
        getStringBounds(arg0: string, arg1: Internal.Graphics_): Internal.Rectangle2D;
        charWidth(arg0: number): number;
        charWidth(arg0: string): number;
        getMaxDecent(): number;
        getMaxCharBounds(arg0: Internal.Graphics_): Internal.Rectangle2D;
        getMaxDescent(): number;
        charsWidth(arg0: string[], arg1: number, arg2: number): number;
        getAscent(): number;
        stringWidth(arg0: string): number;
        getHeight(): number;
        getMaxAdvance(): number;
        getMaxAscent(): number;
        getFontRenderContext(): Internal.FontRenderContext;
        bytesWidth(arg0: number[], arg1: number, arg2: number): number;
        getLineMetrics(arg0: Internal.CharacterIterator_, arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.LineMetrics;
        getLineMetrics(arg0: string[], arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.LineMetrics;
        getLineMetrics(arg0: string, arg1: number, arg2: number, arg3: Internal.Graphics_): Internal.LineMetrics;
        getLineMetrics(arg0: string, arg1: Internal.Graphics_): Internal.LineMetrics;
        getFont(): Internal.Font;
        toString(): string;
        getDescent(): number;
        getWidths(): number[];
        hasUniformLineMetrics(): boolean;
        getLeading(): number;
        get maxAscent(): number;
        get descent(): number;
        get maxDescent(): number;
        get ascent(): number;
        get maxDecent(): number;
        get leading(): number;
        get fontRenderContext(): Internal.FontRenderContext;
        get maxAdvance(): number;
        get widths(): number[];
        get height(): number;
        get font(): Internal.Font;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FontMetrics_ = FontMetrics;
    /**
    * @javaClass dev.ftb.mods.ftbquests.util.ProgressChange
    */
    class ProgressChange {
        write(buffer: Internal.FriendlyByteBuf_): void;
        readonly "file" : Internal.QuestFile;
        "origin" : Internal.QuestObjectBase;
        "reset" : boolean;
        "time" : Internal.Date;
        "notifications" : boolean;
        "player" : Internal.UUID;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ProgressChange_ = ProgressChange;
    /**
    * Fired when you need to modify properties of an item.
    * @javaClass dev.latvian.mods.kubejs.item.ItemModificationEventJS
    */
    class ItemModificationEventJS extends Internal.EventJS {
        modify(in_: Internal.IngredientJS_, c: Internal.Consumer_<Internal.ItemModificationProperties_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to modify properties of an item.
    */
    type ItemModificationEventJS_ = ItemModificationEventJS;
    /**
    * @javaClass com.electronwill.nightconfig.core.UnmodifiableCommentedConfig
    */
    interface UnmodifiableCommentedConfig extends Internal.UnmodifiableConfig {
        containsComment(arg0: Internal.List_<string>): boolean;
        containsComment(arg0: string): boolean;
        getOptionalComment(arg0: string): Internal.Optional<string>;
        getOptionalComment(arg0: Internal.List_<string>): Internal.Optional<string>;
        entrySet(): Internal.Set<Internal.UnmodifiableCommentedConfig$Entry>;
        getComments(arg0: Internal.Map_<string, Internal.UnmodifiableCommentedConfig$CommentNode_>): void;
        getComments(): Internal.Map<string, Internal.UnmodifiableCommentedConfig$CommentNode>;
        commentMap(): Internal.Map<string, string>;
        fake(arg0: Internal.UnmodifiableConfig_): this;
        getComment(arg0: string): string;
        getComment(arg0: Internal.List_<string>): string;
    }
    type UnmodifiableCommentedConfig_ = UnmodifiableCommentedConfig;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedBucketItemExtension
    */
    interface InjectedBucketItemExtension {
        arch$getFluid(): Internal.Fluid;
    }
    type InjectedBucketItemExtension_ = InjectedBucketItemExtension;
    /**
    * @javaClass java.text.AttributedCharacterIterator$Attribute
    */
    class AttributedCharacterIterator$Attribute implements Internal.Serializable {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        static readonly "LANGUAGE" : Internal.AttributedCharacterIterator$Attribute;
        static readonly "INPUT_METHOD_SEGMENT" : Internal.AttributedCharacterIterator$Attribute;
        static readonly "READING" : Internal.AttributedCharacterIterator$Attribute;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttributedCharacterIterator$Attribute_ = AttributedCharacterIterator$Attribute;
    /**
    * @javaClass mezz.jei.api.ingredients.IIngredientHelper
    */
    interface IIngredientHelper <V> {
        getTagEquivalent(arg0: Internal.Collection_<V>): Internal.Optional<ResourceLocation>;
        getMatch(arg0: Internal.Iterable_<V>, arg1: V, arg2: Internal.UidContext_): V;
        getDisplayModId(arg0: V): string;
        getTags(arg0: V): Internal.Collection<ResourceLocation>;
        isValidIngredient(arg0: V): boolean;
        getErrorInfo(arg0: V): string;
        getCreativeTabNames(arg0: V): Internal.Collection<string>;
        isIngredientOnServer(arg0: V): boolean;
        getUniqueId(arg0: V, arg1: Internal.UidContext_): string;
        normalizeIngredient(arg0: V): V;
        copyIngredient(arg0: V): V;
        getResourceLocation(arg0: V): ResourceLocation;
        getColors(arg0: V): Internal.Iterable<number>;
        getIngredientType(): Internal.IIngredientType<V>;
        getResourceId(arg0: V): string;
        getWildcardId(arg0: V): string;
        getDisplayName(arg0: V): string;
        getModId(arg0: V): string;
        translateFocus(arg0: Internal.IFocus_<V>, arg1: Internal.IFocusFactory_): Internal.IFocus<any>;
        getCheatItemStack(arg0: V): Internal.ItemStack;
    }
    type IIngredientHelper_<V> = IIngredientHelper<V>;
    /**
    * @javaClass net.minecraft.world.item.crafting.RecipeSerializer
    */
    interface RecipeSerializer <T> extends Internal.IForgeRegistryEntry<Internal.RecipeSerializer<any>>, Internal.IForgeRecipeSerializer<T> {
    }
    type RecipeSerializer_<T> = Special.RecipeSerializer | RecipeSerializer<T>;
    /**
    * @javaClass com.google.common.collect.ImmutableSetMultimap
    */
    class ImmutableSetMultimap <K, V> extends Internal.ImmutableMultimap<K, V> implements Internal.SetMultimap<K, V> {
        static flatteningToImmutableSetMultimap<T, K, V>(arg0: Internal.Function_<T, K>, arg1: Internal.Function_<T, Internal.Stream_<V>>): Internal.Collector<T, any, Internal.ImmutableSetMultimap<K, V>>;
        inverse(): Internal.ImmutableSetMultimap<V, K>;
        removeAll(arg0: any): Internal.ImmutableSet<V>;
        entries(): Internal.ImmutableSet<Internal.Map$Entry<K, V>>;
        static of<K, V>(arg0: K, arg1: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V, arg8: K, arg9: V): Internal.ImmutableSetMultimap<K, V>;
        static of<K, V>(arg0: K, arg1: V, arg2: K, arg3: V, arg4: K, arg5: V, arg6: K, arg7: V): Internal.ImmutableSetMultimap<K, V>;
        get(arg0: K): Internal.ImmutableSet<V>;
        static builder<K, V>(): Internal.ImmutableSetMultimap$Builder<K, V>;
        static copyOf<K, V>(arg0: Internal.Multimap_<K, V>): Internal.ImmutableSetMultimap<K, V>;
        static copyOf<K, V>(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableSetMultimap<K, V>;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.ImmutableSet<V>;
        static toImmutableSetMultimap<T, K, V>(arg0: Internal.Function_<T, K>, arg1: Internal.Function_<T, V>): Internal.Collector<T, any, Internal.ImmutableSetMultimap<K, V>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableSetMultimap_<K, V> = ImmutableSetMultimap<K, V>;
    /**
    * @javaClass com.google.common.collect.ImmutableSetMultimap$Builder
    */
    class ImmutableSetMultimap$Builder <K, V> extends Internal.ImmutableMultimap$Builder<K, V> {
        orderKeysBy(arg0: Internal.Comparator_<K>): Internal.ImmutableSetMultimap$Builder<K, V>;
        build(): Internal.ImmutableSetMultimap<K, V>;
        orderValuesBy(arg0: Internal.Comparator_<V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: K, ... arg1: V[]): Internal.ImmutableSetMultimap$Builder<K, V>;
        putAll(arg0: Internal.Multimap_<K, V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        put(arg0: Internal.Map$Entry_<K, V>): Internal.ImmutableSetMultimap$Builder<K, V>;
        put(arg0: K, arg1: V): Internal.ImmutableSetMultimap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableSetMultimap$Builder_<K, V> = ImmutableSetMultimap$Builder<K, V>;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$TabListNameFormat
    */
    class PlayerEvent$TabListNameFormat extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getDisplayName(): net.minecraft.network.chat.Component;
        setDisplayName(arg0: net.minecraft.network.chat.Component_): void;
        get listenerList(): Internal.ListenerList;
        get displayName(): net.minecraft.network.chat.Component;
        set displayName(arg0: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$TabListNameFormat_ = PlayerEvent$TabListNameFormat;
    /**
    * @javaClass net.minecraft.client.gui.components.events.GuiEventListener
    */
    interface GuiEventListener {
    }
    type GuiEventListener_ = GuiEventListener;
    /**
    * @javaClass net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$TargetBlockState
    */
    class OreConfiguration$TargetBlockState {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OreConfiguration$TargetBlockState_ = OreConfiguration$TargetBlockState;
    /**
    * @javaClass com.jozufozu.flywheel.light.LightListener
    */
    interface LightListener {
        getVolume(): Internal.ImmutableBox;
        onLightUpdate(arg0: Internal.LightLayer_, arg1: Internal.ImmutableBox_): void;
        onLightPacket(arg0: number, arg1: number): void;
        isListenerInvalid(): boolean;
    }
    type LightListener_ = LightListener;
    /**
    * @javaClass dev.latvian.mods.kubejs.KubeJSRegistries
    */
    class KubeJSRegistries {
        static chunkGenerators(): Internal.Registrar<Internal.Codec<Internal.ChunkGenerator>>;
        static biomes(): Internal.Registrar<Internal.Biome>;
        static blocks(): Internal.Registrar<Internal.Block>;
        static registries(): Internal.Registrar<Internal.Registry<any>>;
        static enchantments(): Internal.Registrar<Internal.Enchantment>;
        static mobEffects(): Internal.Registrar<Internal.MobEffect>;
        static soundEvents(): Internal.Registrar<Internal.SoundEvent>;
        static potions(): Internal.Registrar<Internal.Potion>;
        static entityTypes(): Internal.Registrar<Internal.EntityType<any>>;
        static blockEntityTypes(): Internal.Registrar<Internal.BlockEntityType<any>>;
        static recipeSerializers(): Internal.Registrar<Internal.RecipeSerializer<any>>;
        static attributes(): Internal.Registrar<Internal.Attribute>;
        static byId<T>(id: ResourceLocation_): Internal.Registrar<T>;
        static blockEntities(): Internal.Registrar<Internal.BlockEntityType<any>>;
        static items(): Internal.Registrar<Internal.Item>;
        static fluids(): Internal.Registrar<Internal.Fluid>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type KubeJSRegistries_ = KubeJSRegistries;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2ByteFunction
    */
    interface Char2ByteFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2ByteFunction;
    }
    type Char2ByteFunction_ = ((arg0: string) => number) | Char2ByteFunction;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IGuiIngredient
    */
    interface IGuiIngredient <T> {
        getDisplayedIngredient(): T;
        getIngredientType(): Internal.IIngredientType<T>;
        isInput(): boolean;
        getAllIngredients(): Internal.List<T>;
        drawHighlight(arg0: Internal.PoseStack_, arg1: number, arg2: number, arg3: number): void;
    }
    type IGuiIngredient_<T> = IGuiIngredient<T>;
    /**
    * @javaClass java.util.function.ObjDoubleConsumer
    */
    interface ObjDoubleConsumer <T> {
        accept(arg0: T, arg1: number): void;
    }
    type ObjDoubleConsumer_<T> = ((arg0: T, arg1: number) => void) | ObjDoubleConsumer<T>;
    /**
    * Fired when the player tossed an item.
    * @javaClass dev.latvian.mods.kubejs.item.ItemTossEventJS
    */
    class ItemTossEventJS extends Internal.PlayerEventJS {
        getItem(): Internal.ItemStackJS;
        getEntity(): Internal.EntityJS;
        getItemEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get itemEntity(): Internal.EntityJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the player tossed an item.
    */
    type ItemTossEventJS_ = ItemTossEventJS;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeBlockGetter
    */
    interface IForgeBlockGetter {
        getExistingBlockEntity(arg0: BlockPos_): Internal.BlockEntity;
    }
    type IForgeBlockGetter_ = IForgeBlockGetter;
    /**
    * @javaClass dev.latvian.mods.rhino.EvaluatorException
    */
    class EvaluatorException extends Internal.RhinoException {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EvaluatorException_ = EvaluatorException;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemBuilder$UseCallback
    */
    interface ItemBuilder$UseCallback {
        use(arg0: Internal.LevelJS_, arg1: Internal.PlayerJS_<any>, arg2: Hand_): boolean;
    }
    type ItemBuilder$UseCallback_ = ((arg0: Internal.LevelJS, arg1: Internal.PlayerJS<any>, arg2: Hand) => boolean) | ItemBuilder$UseCallback;
    /**
    * @javaClass java.lang.reflect.Constructor
    */
    class Constructor <T> extends Internal.Executable {
        getName(): string;
        getParameterCount(): number;
        setAccessible(arg0: boolean): void;
        isVarArgs(): boolean;
        isSynthetic(): boolean;
        getParameterTypes(): Internal.Class<any>[];
        newInstance(... arg0: any[]): T;
        getGenericExceptionTypes(): Internal.Type[];
        getAnnotatedReceiverType(): Internal.AnnotatedType;
        getDeclaredAnnotations(): Internal.Annotation[];
        getExceptionTypes(): Internal.Class<any>[];
        getDeclaringClass(): typeof T;
        getGenericParameterTypes(): Internal.Type[];
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        hashCode(): number;
        toGenericString(): string;
        equals(arg0: any): boolean;
        toString(): string;
        getTypeParameters(): any[];
        getModifiers(): number;
        getAnnotatedReturnType(): Internal.AnnotatedType;
        getParameterAnnotations(): Internal.Annotation[][];
        get declaredAnnotations(): Internal.Annotation[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterTypes(): Internal.Class<any>[];
        get parameterCount(): number;
        get modifiers(): number;
        get typeParameters(): any[];
        get varArgs(): boolean;
        get declaringClass(): typeof T;
        get synthetic(): boolean;
        get genericParameterTypes(): Internal.Type[];
        get exceptionTypes(): Internal.Class<any>[];
        get name(): string;
        get annotatedReceiverType(): Internal.AnnotatedType;
        get genericExceptionTypes(): Internal.Type[];
        get parameterAnnotations(): Internal.Annotation[][];
        set accessible(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Constructor_<T> = Constructor<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2DoubleFunction
    */
    interface Long2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Long2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2DoubleFunction;
    }
    type Long2DoubleFunction_ = ((arg0: number) => number) | Long2DoubleFunction;
    /**
    * @javaClass java.lang.StringBuffer
    */
    class StringBuffer extends Internal.AbstractStringBuilder implements Internal.Serializable, Internal.Comparable<Internal.StringBuffer>, Internal.CharSequence {
        deleteCharAt(arg0: number): this;
        trimToSize(): void;
        codePointAt(arg0: number): number;
        getChars(arg0: number, arg1: number, arg2: string[], arg3: number): void;
        setCharAt(arg0: number, arg1: string): void;
        replace(arg0: number, arg1: number, arg2: string): this;
        length(): number;
        insert(arg0: number, arg1: number): this;
        insert(arg0: number, arg1: string): this;
        insert(arg0: number, arg1: boolean): this;
        insert(arg0: number, arg1: Internal.CharSequence_, arg2: number, arg3: number): this;
        insert(arg0: number, arg1: any): this;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): this;
        insert(arg0: number, arg1: string[]): this;
        insert(arg0: number, arg1: Internal.CharSequence_): this;
        subSequence(arg0: number, arg1: number): Internal.CharSequence;
        compareTo(arg0: Internal.StringBuffer_): number;
        reverse(): this;
        delete(arg0: number, arg1: number): this;
        substring(arg0: number, arg1: number): string;
        substring(arg0: number): string;
        capacity(): number;
        appendCodePoint(arg0: number): this;
        lastIndexOf(arg0: string, arg1: number): number;
        lastIndexOf(arg0: string): number;
        setLength(arg0: number): void;
        toString(): string;
        ensureCapacity(arg0: number): void;
        codePointBefore(arg0: number): number;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        offsetByCodePoints(arg0: number, arg1: number): number;
        codePointCount(arg0: number, arg1: number): number;
        charAt(arg0: number): string;
        append(arg0: string[]): this;
        append(arg0: number): this;
        append(arg0: string[], arg1: number, arg2: number): this;
        append(arg0: boolean): this;
        append(arg0: string): this;
        append(arg0: Internal.StringBuffer_): this;
        append(arg0: Internal.CharSequence_): this;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: any): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringBuffer_ = StringBuffer;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingAttackEvent
    */
    class LivingAttackEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getSource(): Internal.DamageSource;
        isCancelable(): boolean;
        getAmount(): number;
        get amount(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get source(): Internal.DamageSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingAttackEvent_ = LivingAttackEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.AbstractIntCollection
    */
    abstract class AbstractIntCollection extends Internal.AbstractCollection<number> implements Internal.IntCollection {
        add(arg0: number): boolean;
        forEach(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): void;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        containsAll(arg0: Internal.IntCollection_): boolean;
        remove(arg0: any): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate_): boolean;
        removeAll(arg0: Internal.IntCollection_): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.IntIterator;
        addAll(arg0: Internal.IntCollection_): boolean;
        addAll(arg0: Internal.Collection_<number>): boolean;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        toString(): string;
        rem(arg0: number): boolean;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        retainAll(arg0: Internal.IntCollection_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractIntCollection_ = AbstractIntCollection;
    /**
    * @javaClass com.mojang.brigadier.context.ParsedArgument
    */
    class ParsedArgument <S, T> {
        getRange(): Internal.StringRange;
        hashCode(): number;
        getResult(): T;
        equals(arg0: any): boolean;
        get result(): T;
        get range(): Internal.StringRange;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParsedArgument_<S, T> = ParsedArgument<S, T>;
    /**
    * @javaClass java.util.stream.Stream$Builder
    */
    interface Stream$Builder <T> extends Internal.Consumer<T> {
        add(arg0: T): Internal.Stream$Builder<T>;
        build(): Internal.Stream<T>;
        accept(arg0: T): void;
    }
    type Stream$Builder_<T> = Stream$Builder<T>;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent$CropGrowEvent
    */
    class BlockEvent$CropGrowEvent extends Internal.BlockEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent$CropGrowEvent_ = BlockEvent$CropGrowEvent;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ConfigFromString
    */
    abstract class ConfigFromString <T> extends Internal.ConfigValue<T> {
        getStringFromValue(v: T): string;
        getStringForGUI(v: T): net.minecraft.network.chat.Component;
        onClicked(button: Internal.MouseButton_, callback: Internal.ConfigCallback_): void;
        parse(arg0: Internal.Consumer_<T>, arg1: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfigFromString_<T> = ConfigFromString<T>;
    /**
    * @javaClass dev.latvian.mods.itemfilters.item.InventoryFilterItem
    */
    abstract class InventoryFilterItem extends Internal.BaseFilterItem {
        resetFilterData(filter: Internal.ItemStack_): void;
        getInventorySize(filter: Internal.ItemStack_): number;
        addInfo(filter: Internal.ItemStack_, info: Internal.FilterInfo_, expanded: boolean): void;
        static getInventory(stack: Internal.ItemStack_): Internal.ItemInventory;
        clearFilterCache(filter: Internal.ItemStack_): void;
        addSlots(filter: Internal.ItemStack_, list: Internal.List_<Internal.InventoryFilterItem$FilterSlot_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InventoryFilterItem_ = InventoryFilterItem;
    /**
    * @javaClass com.jozufozu.flywheel.core.layout.LayoutItem
    */
    interface LayoutItem {
        size(): number;
        attributeCount(): number;
        vertexAttribPointer(arg0: number, arg1: number, arg2: number): void;
    }
    type LayoutItem_ = LayoutItem;
    /**
    * @javaClass net.minecraftforge.fml.IModStateTransition$EventGenerator
    */
    interface IModStateTransition$EventGenerator <T> extends Internal.Function<Internal.ModContainer, T> {
        fromFunction<FN>(arg0: Internal.Function_<Internal.ModContainer_, FN>): Internal.IModStateTransition$EventGenerator<FN>;
    }
    type IModStateTransition$EventGenerator_<T> = IModStateTransition$EventGenerator<T>;
    /**
    * @javaClass java.awt.PageAttributes
    */
    class PageAttributes implements Internal.Cloneable {
        setOrientationRequestedToDefault(): void;
        getOrientationRequested(): Internal.PageAttributes$OrientationRequestedType;
        getMedia(): Internal.PageAttributes$MediaType;
        set(arg0: Internal.PageAttributes_): void;
        getOrigin(): Internal.PageAttributes$OriginType;
        setOrigin(arg0: Internal.PageAttributes$OriginType_): void;
        setPrintQualityToDefault(): void;
        getColor(): Internal.PageAttributes$ColorType;
        setOrientationRequested(arg0: number): void;
        setOrientationRequested(arg0: Internal.PageAttributes$OrientationRequestedType_): void;
        setPrinterResolutionToDefault(): void;
        setPrintQuality(arg0: Internal.PageAttributes$PrintQualityType_): void;
        setPrintQuality(arg0: number): void;
        getPrintQuality(): Internal.PageAttributes$PrintQualityType;
        setMediaToDefault(): void;
        setColor(arg0: Internal.PageAttributes$ColorType_): void;
        getPrinterResolution(): number[];
        hashCode(): number;
        equals(arg0: any): boolean;
        clone(): any;
        setMedia(arg0: Internal.PageAttributes$MediaType_): void;
        toString(): string;
        setPrinterResolution(arg0: number[]): void;
        setPrinterResolution(arg0: number): void;
        get color(): Internal.PageAttributes$ColorType;
        get orientationRequested(): Internal.PageAttributes$OrientationRequestedType;
        get origin(): Internal.PageAttributes$OriginType;
        get printerResolution(): number[];
        get printQuality(): Internal.PageAttributes$PrintQualityType;
        get media(): Internal.PageAttributes$MediaType;
        set color(arg0: Internal.PageAttributes$ColorType_);
        set orientationRequested(arg0: Internal.PageAttributes$OrientationRequestedType_);
        set printerResolution(arg0: number[]);
        set origin(arg0: Internal.PageAttributes$OriginType_);
        set printQuality(arg0: Internal.PageAttributes$PrintQualityType_);
        set media(arg0: Internal.PageAttributes$MediaType_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes_ = PageAttributes;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2LongFunction
    */
    interface Char2LongFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Char2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Char2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2LongFunction;
    }
    type Char2LongFunction_ = ((arg0: string) => number) | Char2LongFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.ServerPlayerJS
    */
    class ServerPlayerJS extends Internal.PlayerJS<Internal.ServerPlayer> {
        setCreativeMode(mode: boolean): void;
        getStats(): Internal.PlayerStatsJS;
        isAdvancementDone(id: ResourceLocation_): boolean;
        sendData(channel: string, data: Internal.CompoundTag_): void;
        getHasClientMod(): boolean;
        paint(renderer: Internal.CompoundTag_): void;
        unlockAdvancement(id: ResourceLocation_): void;
        setSpawnLocation(c: Internal.BlockContainerJS_): void;
        getSpawnLocation(): Internal.BlockContainerJS;
        setGameMode(mode: string): void;
        revokeAdvancement(id: ResourceLocation_): void;
        ban(banner: string, reason: string, expiresInMillis: number): void;
        isMiningBlock(): boolean;
        setSelectedSlot(index: number): void;
        kick(reason: net.minecraft.network.chat.Component_): void;
        kick(): void;
        setMouseItem(item: Internal.ItemStackJS_): void;
        isOp(): boolean;
        readonly "server" : Internal.ServerJS;
        get spawnLocation(): Internal.BlockContainerJS;
        get op(): boolean;
        get stats(): Internal.PlayerStatsJS;
        get miningBlock(): boolean;
        get hasClientMod(): boolean;
        set spawnLocation(c: Internal.BlockContainerJS_);
        set selectedSlot(index: number);
        set mouseItem(item: Internal.ItemStackJS_);
        set creativeMode(mode: boolean);
        set gameMode(mode: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type ServerPlayerJS_ = ServerPlayerJS;
    /**
    * @javaClass net.minecraftforge.common.util.INBTSerializable
    */
    interface INBTSerializable <T> {
        serializeNBT(): T;
        deserializeNBT(arg0: T): void;
    }
    type INBTSerializable_<T> = INBTSerializable<T>;
    /**
    * @javaClass java.util.function.LongConsumer
    */
    interface LongConsumer {
        andThen(arg0: Internal.LongConsumer_): this;
        accept(arg0: number): void;
    }
    type LongConsumer_ = ((arg0: number) => void) | LongConsumer;
    /**
    * @javaClass java.lang.invoke.VarHandle
    */
    abstract class VarHandle implements Internal.Constable {
        toMethodHandle(arg0: Internal.VarHandle$AccessMode_): Internal.MethodHandle;
        coordinateTypes(): Internal.List<Internal.Class<any>>;
        weakCompareAndSetPlain(... arg0: any[]): boolean;
        getVolatile(... arg0: any[]): any;
        getAndBitwiseXor(... arg0: any[]): any;
        static storeStoreFence(): void;
        compareAndExchange(... arg0: any[]): any;
        static fullFence(): void;
        getAndSetRelease(... arg0: any[]): any;
        getAcquire(... arg0: any[]): any;
        getAndBitwiseAnd(... arg0: any[]): any;
        accessModeType(arg0: Internal.VarHandle$AccessMode_): Internal.MethodType;
        getAndBitwiseOr(... arg0: any[]): any;
        static acquireFence(): void;
        hasInvokeExactBehavior(): boolean;
        describeConstable(): Internal.Optional<Internal.VarHandle$VarHandleDesc>;
        getAndBitwiseOrRelease(... arg0: any[]): any;
        getAndSetAcquire(... arg0: any[]): any;
        getOpaque(... arg0: any[]): any;
        varType(): typeof any;
        getAndBitwiseXorAcquire(... arg0: any[]): any;
        getAndBitwiseAndRelease(... arg0: any[]): any;
        getAndBitwiseOrAcquire(... arg0: any[]): any;
        setVolatile(... arg0: any[]): void;
        get(... arg0: any[]): any;
        static releaseFence(): void;
        getAndAdd(... arg0: any[]): any;
        getAndSet(... arg0: any[]): any;
        weakCompareAndSetAcquire(... arg0: any[]): boolean;
        set(... arg0: any[]): void;
        weakCompareAndSetRelease(... arg0: any[]): boolean;
        weakCompareAndSet(... arg0: any[]): boolean;
        static loadLoadFence(): void;
        getAndAddRelease(... arg0: any[]): any;
        getAndAddAcquire(... arg0: any[]): any;
        setOpaque(... arg0: any[]): void;
        isAccessModeSupported(arg0: Internal.VarHandle$AccessMode_): boolean;
        compareAndExchangeRelease(... arg0: any[]): any;
        compareAndSet(... arg0: any[]): boolean;
        compareAndExchangeAcquire(... arg0: any[]): any;
        getAndBitwiseXorRelease(... arg0: any[]): any;
        withInvokeBehavior(): this;
        setRelease(... arg0: any[]): void;
        toString(): string;
        withInvokeExactBehavior(): this;
        getAndBitwiseAndAcquire(... arg0: any[]): any;
        set opaque(... arg0: any[]);
        set release(... arg0: any[]);
        set volatile(... arg0: any[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VarHandle_ = VarHandle;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.StoneButtonBlockBuilder
    */
    class StoneButtonBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StoneButtonBlockBuilder_ = StoneButtonBlockBuilder;
    /**
    * @javaClass org.apache.commons.lang3.tuple.Pair
    */
    abstract class Pair <L, R> implements Internal.Map$Entry<L, R>, Internal.Comparable<Internal.Pair<L, R>>, Internal.Serializable {
        getKey(): L;
        getValue(): R;
        getRight(): R;
        hashCode(): number;
        static of<L, R>(arg0: Internal.Map$Entry_<L, R>): Internal.Pair<L, R>;
        static of<L, R>(arg0: L, arg1: R): Internal.Pair<L, R>;
        equals(arg0: any): boolean;
        toString(arg0: string): string;
        toString(): string;
        static emptyArray<L, R>(): Internal.Pair<L, R>[];
        compareTo(arg0: Internal.Pair_<L, R>): number;
        getLeft(): L;
        static readonly "EMPTY_ARRAY" : Internal.Pair<any, any>[];
        get left(): L;
        get right(): R;
        get value(): R;
        get key(): L;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Pair_<L, R> = Pair<L, R>;
    /**
    * @javaClass com.simibubi.create.foundation.tileEntity.SmartTileEntity
    */
    abstract class SmartTileEntity extends Internal.CachedRenderBBTileEntity implements Internal.IPartialSafeNBT, Internal.IInteractionChecker, Internal.ISpecialBlockEntityItemRequirement {
        awardIfNear(arg0: Internal.CreateAdvancement_, arg1: number): void;
        writeSafe(arg0: Internal.CompoundTag_): void;
        writeClient(arg0: Internal.CompoundTag_): Internal.CompoundTag;
        addBehavioursDeferred(arg0: Internal.List_<Internal.TileEntityBehaviour_>): void;
        sendToContainer(arg0: Internal.FriendlyByteBuf_): void;
        addBehaviours(arg0: Internal.List_<Internal.TileEntityBehaviour_>): void;
        lazyTick(): void;
        setLazyTickRate(arg0: number): void;
        tick(): void;
        readClient(arg0: Internal.CompoundTag_): void;
        registerAwardables(arg0: Internal.List_<Internal.TileEntityBehaviour_>, ... arg1: Internal.CreateAdvancement_[]): void;
        canPlayerUse(arg0: Internal.Player_): boolean;
        getBehaviour<T>(arg0: Internal.BehaviourType_<T>): T;
        markVirtual(): void;
        award(arg0: Internal.CreateAdvancement_): void;
        getRequiredItems(arg0: Internal.BlockState_): Internal.ItemRequirement;
        onChunkUnloaded(): void;
        isVirtual(): boolean;
        initialize(): void;
        refreshBlockState(): void;
        get virtual(): boolean;
        set lazyTickRate(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SmartTileEntity_ = SmartTileEntity;
    /**
    * @javaClass net.minecraftforge.client.event.ContainerScreenEvent$DrawForeground
    */
    class ContainerScreenEvent$DrawForeground extends Internal.ContainerScreenEvent {
        getMouseY(): number;
        getListenerList(): Internal.ListenerList;
        getMouseX(): number;
        getPoseStack(): Internal.PoseStack;
        get mouseX(): number;
        get listenerList(): Internal.ListenerList;
        get mouseY(): number;
        get poseStack(): Internal.PoseStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContainerScreenEvent$DrawForeground_ = ContainerScreenEvent$DrawForeground;
    /**
    * @javaClass net.minecraft.client.model.HumanoidModel
    */
    class HumanoidModel <T> extends Internal.AgeableListModel<T> implements Internal.ArmedModel, Internal.HeadedModel {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HumanoidModel_<T> = HumanoidModel<T>;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$StopTracking
    */
    class PlayerEvent$StopTracking extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getTarget(): Internal.Entity;
        get listenerList(): Internal.ListenerList;
        get target(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$StopTracking_ = PlayerEvent$StopTracking;
    /**
    * @javaClass net.minecraftforge.event.world.BiomeLoadingEvent
    */
    class BiomeLoadingEvent extends net.minecraftforge.eventbus.api.Event {
        getEffects(): Internal.BiomeSpecialEffects;
        getListenerList(): Internal.ListenerList;
        getSpawns(): Internal.MobSpawnSettingsBuilder;
        getClimate(): Internal.Biome$ClimateSettings;
        getName(): ResourceLocation;
        setCategory(arg0: Internal.Biome$BiomeCategory_): void;
        getGeneration(): Internal.BiomeGenerationSettingsBuilder;
        getCategory(): Internal.Biome$BiomeCategory;
        setClimate(arg0: Internal.Biome$ClimateSettings_): void;
        setEffects(arg0: Internal.BiomeSpecialEffects_): void;
        get generation(): Internal.BiomeGenerationSettingsBuilder;
        get effects(): Internal.BiomeSpecialEffects;
        get listenerList(): Internal.ListenerList;
        get name(): ResourceLocation;
        get climate(): Internal.Biome$ClimateSettings;
        get category(): Internal.Biome$BiomeCategory;
        get spawns(): Internal.MobSpawnSettingsBuilder;
        set effects(arg0: Internal.BiomeSpecialEffects_);
        set climate(arg0: Internal.Biome$ClimateSettings_);
        set category(arg0: Internal.Biome$BiomeCategory_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeLoadingEvent_ = BiomeLoadingEvent;
    /**
    * @javaClass com.mojang.datafixers.Products$P11
    */
    class Products$P11 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function11_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function11_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P11_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> = Products$P11<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
    /**
    * @javaClass java.awt.image.TileObserver
    */
    interface TileObserver {
        tileUpdate(arg0: Internal.WritableRenderedImage_, arg1: number, arg2: number, arg3: boolean): void;
    }
    type TileObserver_ = ((arg0: Internal.WritableRenderedImage, arg1: number, arg2: number, arg3: boolean) => void) | TileObserver;
    /**
    * Fired when you need to remove worldgen.
    * @javaClass dev.latvian.mods.kubejs.level.gen.WorldgenAddEventJS
    */
    class WorldgenAddEventJS extends Internal.StartupEventJS {
        addSpawn(category: Internal.MobCategory_, spawn: string): void;
        addSpawn(p: Internal.Consumer_<Internal.AddSpawnProperties_>): void;
        addSpawn(filter: Internal.BiomeFilter_, category: Internal.MobCategory_, spawn: string): void;
        addFeatureJson(filter: Internal.BiomeFilter_, id: ResourceLocation_, json: Internal.JsonObject_): void;
        addFeatureJson(filter: Internal.BiomeFilter_, json: Internal.JsonObject_): void;
        addOre(p: Internal.Consumer_<Internal.AddOreProperties_>): void;
        addLake(p: Internal.Consumer_<Internal.AddLakeProperties_>): void;
        static getAnchors(): Internal.VerticalAnchor;
        static getUniqueId<T>(feature: T, codec: Internal.Codec_<T>): string;
        get anchors(): Internal.VerticalAnchor;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to remove worldgen.
    */
    type WorldgenAddEventJS_ = WorldgenAddEventJS;
    /**
    * @javaClass java.lang.module.ModuleDescriptor
    */
    class ModuleDescriptor implements Internal.Comparable<Internal.ModuleDescriptor> {
        static read(arg0: Internal.InputStream_, arg1: Internal.Supplier_<Internal.Set_<string>>): this;
        static read(arg0: Internal.InputStream_): this;
        static read(arg0: Internal.ByteBuffer_, arg1: Internal.Supplier_<Internal.Set_<string>>): this;
        static read(arg0: Internal.ByteBuffer_): this;
        toNameAndVersion(): string;
        mainClass(): Internal.Optional<string>;
        exports(): Internal.Set<Internal.ModuleDescriptor$Exports>;
        rawVersion(): Internal.Optional<string>;
        compareTo(arg0: Internal.ModuleDescriptor_): number;
        packages(): Internal.Set<string>;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Modifier>;
        version(): Internal.Optional<Internal.ModuleDescriptor$Version>;
        static newAutomaticModule(arg0: string): Internal.ModuleDescriptor$Builder;
        isOpen(): boolean;
        provides(): Internal.Set<Internal.ModuleDescriptor$Provides>;
        hashCode(): number;
        static newOpenModule(arg0: string): Internal.ModuleDescriptor$Builder;
        equals(arg0: any): boolean;
        static newModule(arg0: string, arg1: Internal.Set_<Internal.ModuleDescriptor$Modifier_>): Internal.ModuleDescriptor$Builder;
        static newModule(arg0: string): Internal.ModuleDescriptor$Builder;
        name(): string;
        opens(): Internal.Set<Internal.ModuleDescriptor$Opens>;
        uses(): Internal.Set<string>;
        toString(): string;
        isAutomatic(): boolean;
        requires(): Internal.Set<Internal.ModuleDescriptor$Requires>;
        get automatic(): boolean;
        get open(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor_ = ModuleDescriptor;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.BaseScreen
    */
    abstract class BaseScreen extends Internal.Panel implements Internal.IOpenableScreen {
        closeGui(openPrevScreen: boolean): void;
        shouldAddMouseOverText(): boolean;
        closeContextMenu(): void;
        getGui(): this;
        openYesNo(title: net.minecraft.network.chat.Component_, desc: net.minecraft.network.chat.Component_, callback: Internal.Runnable_): void;
        mousePressed(button: Internal.MouseButton_): boolean;
        getScrollX(): number;
        getScrollY(): number;
        drawForeground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        onInit(): boolean;
        drawBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        getPartialTicks(): number;
        updateMouseOver(mouseX: number, mouseY: number): void;
        drawDefaultBackground(matrixStack: Internal.PoseStack_): boolean;
        getScreen(): com.mojang.blaze3d.platform.Window;
        getMouseY(): number;
        onClosed(): void;
        isMouseOver(widget: dev.ftb.mods.ftblibrary.ui.Widget_): boolean;
        isMouseOver(x: number, y: number, w: number, h: number): boolean;
        getTheme(): Internal.Theme;
        updateGui(mx: number, my: number, pt: number): void;
        keyPressed(key: Internal.Key_): boolean;
        getMouseX(): number;
        openGui(): void;
        doesGuiPauseGame(): boolean;
        getPrevScreen(): Internal.Screen;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        initGui(): void;
        onBack(): void;
        openContextMenu(menu: Internal.List_<Internal.ContextMenuItem_>): Internal.ContextMenu;
        openContextMenu(panel: Internal.Panel_): void;
        getX(): number;
        getY(): number;
        refreshWidgets(): void;
        handleClick(scheme: string, path: string): boolean;
        alignWidgets(): void;
        openYesNoFull(title: net.minecraft.network.chat.Component_, desc: net.minecraft.network.chat.Component_, callback: Internal.BooleanConsumer_): void;
        onPostInit(): void;
        setScrollX(scroll: number): void;
        onClosedByKey(key: Internal.Key_): boolean;
        setScrollY(scroll: number): void;
        "itemRenderer" : Internal.ItemRenderer;
        "contextMenu" : Internal.Panel;
        get mouseX(): number;
        get prevScreen(): Internal.Screen;
        get mouseY(): number;
        get x(): number;
        get screen(): com.mojang.blaze3d.platform.Window;
        get y(): number;
        get gui(): this;
        get scrollY(): number;
        get theme(): Internal.Theme;
        get scrollX(): number;
        get partialTicks(): number;
        set scrollY(scroll: number);
        set scrollX(scroll: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseScreen_ = BaseScreen;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.ModelGenerator
    */
    class ModelGenerator {
        parent(s: string): void;
        toJson(): Internal.JsonObject;
        textures(json: Internal.JsonObject_): void;
        texture(name: string, texture: string): void;
        element(consumer: Internal.Consumer_<Internal.ModelGenerator$Element_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelGenerator_ = ModelGenerator;
    /**
    * @javaClass org.apache.maven.artifact.versioning.ArtifactVersion
    */
    interface ArtifactVersion extends Internal.Comparable<Internal.ArtifactVersion> {
        getIncrementalVersion(): number;
        getBuildNumber(): number;
        parseVersion(arg0: string): void;
        getMajorVersion(): number;
        getMinorVersion(): number;
        getQualifier(): string;
    }
    type ArtifactVersion_ = ArtifactVersion;
    /**
    * @javaClass java.awt.image.ColorModel
    */
    abstract class ColorModel implements Internal.Transparency {
        getNumColorComponents(): number;
        coerceData(arg0: Internal.WritableRaster_, arg1: boolean): this;
        getAlpha(arg0: number): number;
        getAlpha(arg0: any): number;
        getUnnormalizedComponents(arg0: number[], arg1: number, arg2: number[], arg3: number): number[];
        getRed(arg0: number): number;
        getRed(arg0: any): number;
        getDataElement(arg0: number[], arg1: number): number;
        getTransferType(): number;
        createCompatibleSampleModel(arg0: number, arg1: number): Internal.SampleModel;
        hashCode(): number;
        getComponents(arg0: number, arg1: number[], arg2: number): number[];
        getComponents(arg0: any, arg1: number[], arg2: number): number[];
        static getRGBdefault(): this;
        hasAlpha(): boolean;
        getAlphaRaster(arg0: Internal.WritableRaster_): Internal.WritableRaster;
        getRGB(arg0: number): number;
        getRGB(arg0: any): number;
        isCompatibleSampleModel(arg0: Internal.SampleModel_): boolean;
        getNumComponents(): number;
        getPixelSize(): number;
        getBlue(arg0: any): number;
        getBlue(arg0: number): number;
        getColorSpace(): Internal.ColorSpace;
        createCompatibleWritableRaster(arg0: number, arg1: number): Internal.WritableRaster;
        isAlphaPremultiplied(): boolean;
        getTransparency(): number;
        getNormalizedComponents(arg0: any, arg1: number[], arg2: number): number[];
        getNormalizedComponents(arg0: number[], arg1: number, arg2: number[], arg3: number): number[];
        getGreen(arg0: number): number;
        getGreen(arg0: any): number;
        equals(arg0: any): boolean;
        getDataElements(arg0: number[], arg1: number, arg2: any): any;
        getDataElements(arg0: number, arg1: any): any;
        toString(): string;
        isCompatibleRaster(arg0: Internal.Raster_): boolean;
        getComponentSize(): number[];
        getComponentSize(arg0: number): number;
        get colorSpace(): Internal.ColorSpace;
        get rGBdefault(): this;
        get alphaPremultiplied(): boolean;
        get transparency(): number;
        get transferType(): number;
        get componentSize(): number[];
        get numColorComponents(): number;
        get pixelSize(): number;
        get numComponents(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ColorModel_ = ColorModel;
    /**
    * @javaClass net.minecraft.network.Connection
    */
    class Connection extends Internal.SimpleChannelInboundHandler<Internal.Packet<any>> {
        channelInactive(arg0: Internal.ChannelHandlerContext_): void;
        getDirection(): Internal.PacketFlow;
        channel(): io.netty.channel.Channel;
        exceptionCaught(arg0: Internal.ChannelHandlerContext_, arg1: Internal.Throwable_): void;
        channelActive(arg0: Internal.ChannelHandlerContext_): void;
        get direction(): Internal.PacketFlow;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Connection_ = Connection;
    /**
    * @javaClass java.time.Clock
    */
    abstract class Clock implements Internal.InstantSource {
        withZone(arg0: Internal.ZoneId_): this;
        static tickMinutes(arg0: Internal.ZoneId_): this;
        static tickMillis(arg0: Internal.ZoneId_): this;
        static offset(arg0: Internal.Clock_, arg1: Internal.Duration_): this;
        getZone(): Internal.ZoneId;
        static tick(arg0: Internal.Clock_, arg1: Internal.Duration_): this;
        instant(): Internal.Instant;
        static system(arg0: Internal.ZoneId_): this;
        hashCode(): number;
        equals(arg0: any): boolean;
        static tickSeconds(arg0: Internal.ZoneId_): this;
        static systemDefaultZone(): this;
        static systemUTC(): this;
        static fixed(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        millis(): number;
        get zone(): Internal.ZoneId;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Clock_ = Clock;
    /**
    * @javaClass java.util.Spliterator$OfPrimitive
    */
    interface Spliterator$OfPrimitive <T, T_CONS, T_SPLITR> extends Internal.Spliterator<T> {
        trySplit(): T_SPLITR;
        tryAdvance(arg0: T_CONS): boolean;
        forEachRemaining(arg0: T_CONS): void;
    }
    type Spliterator$OfPrimitive_<T, T_CONS, T_SPLITR> = Spliterator$OfPrimitive<T, T_CONS, T_SPLITR>;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEntityUseItemEvent
    */
    class LivingEntityUseItemEvent extends Internal.LivingEvent {
        setDuration(arg0: number): void;
        getListenerList(): Internal.ListenerList;
        getDuration(): number;
        getItem(): Internal.ItemStack;
        get duration(): number;
        get item(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        set duration(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityUseItemEvent_ = LivingEntityUseItemEvent;
    /**
    * @javaClass java.nio.channels.ReadableByteChannel
    */
    interface ReadableByteChannel extends Internal.Channel {
        read(arg0: Internal.ByteBuffer_): number;
    }
    type ReadableByteChannel_ = ((arg0: Internal.ByteBuffer) => number) | ReadableByteChannel;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IGuiItemStackGroup
    */
    interface IGuiItemStackGroup extends Internal.IGuiIngredientGroup<Internal.ItemStack> {
        init(arg0: number, arg1: boolean, arg2: number, arg3: number): void;
        set(arg0: number, arg1: Internal.ItemStack_): void;
        addTooltipCallback(arg0: Internal.ITooltipCallback_<Internal.ItemStack_>): void;
    }
    type IGuiItemStackGroup_ = IGuiItemStackGroup;
    /**
    * @javaClass net.minecraft.advancements.Advancement
    */
    class Advancement {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Advancement_ = Advancement;
    /**
    * @javaClass java.util.function.LongFunction
    */
    interface LongFunction <R> {
        apply(arg0: number): R;
    }
    type LongFunction_<R> = ((arg0: number) => R) | LongFunction<R>;
    /**
    * @javaClass net.minecraftforge.common.util.BlockSnapshot
    */
    class BlockSnapshot {
        getLevel(): Internal.LevelAccessor;
        restore(arg0: boolean): boolean;
        restore(): boolean;
        restore(arg0: boolean, arg1: boolean): boolean;
        getBlockEntity(): Internal.BlockEntity;
        getPos(): BlockPos;
        hashCode(): number;
        equals(arg0: any): boolean;
        restoreToLocation(arg0: Internal.LevelAccessor_, arg1: BlockPos_, arg2: boolean, arg3: boolean): boolean;
        static create(arg0: Internal.ResourceKey_<Internal.Level_>, arg1: Internal.LevelAccessor_, arg2: BlockPos_): this;
        static create(arg0: Internal.ResourceKey_<Internal.Level_>, arg1: Internal.LevelAccessor_, arg2: BlockPos_, arg3: number): this;
        toString(): string;
        getTag(): Internal.CompoundTag;
        getFlag(): number;
        getReplacedBlock(): Internal.BlockState;
        getCurrentBlock(): Internal.BlockState;
        get flag(): number;
        get level(): Internal.LevelAccessor;
        get pos(): BlockPos;
        get currentBlock(): Internal.BlockState;
        get blockEntity(): Internal.BlockEntity;
        get replacedBlock(): Internal.BlockState;
        get tag(): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockSnapshot_ = BlockSnapshot;
    /**
    * @javaClass net.minecraftforge.registries.tags.ITagManager
    */
    interface ITagManager <V> extends Internal.Iterable<Internal.ITag<V>> {
        isKnownTagName(arg0: Internal.TagKey_<V>): boolean;
        stream(): Internal.Stream<Internal.ITag<V>>;
        createOptionalTagKey(arg0: ResourceLocation_, arg1: Internal.Set_<Internal.Supplier_<V>>): Internal.TagKey<V>;
        createTagKey(arg0: ResourceLocation_): Internal.TagKey<V>;
        getTag(arg0: Internal.TagKey_<V>): Internal.ITag<V>;
        addOptionalTagDefaults(arg0: Internal.TagKey_<V>, arg1: Internal.Set_<Internal.Supplier_<V>>): void;
        getTagNames(): Internal.Stream<Internal.TagKey<V>>;
        getReverseTag(arg0: V): Internal.Optional<Internal.IReverseTag<V>>;
    }
    type ITagManager_<V> = ITagManager<V>;
    /**
    * @javaClass mezz.jei.api.recipe.IRecipeCatalystLookup
    */
    interface IRecipeCatalystLookup {
        includeHidden(): this;
        get<S>(arg0: Internal.IIngredientType_<S>): Internal.Stream<S>;
        get(): Internal.Stream<Internal.ITypedIngredient<any>>;
        getItemStack(): Internal.Stream<Internal.ItemStack>;
    }
    type IRecipeCatalystLookup_ = IRecipeCatalystLookup;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.TStack
    */
    interface TStack <Self> {
        pushPose(): Self;
        popPose(): Self;
    }
    type TStack_<Self> = TStack<Self>;
    /**
    * @javaClass mezz.jei.api.runtime.IIngredientListOverlay
    */
    interface IIngredientListOverlay {
        isListDisplayed(): boolean;
        getVisibleIngredients<T>(arg0: Internal.IIngredientType_<T>): Internal.List<T>;
        hasKeyboardFocus(): boolean;
        getIngredientUnderMouse(): Internal.Optional<Internal.ITypedIngredient<any>>;
        getIngredientUnderMouse<T>(arg0: Internal.IIngredientType_<T>): T;
    }
    type IIngredientListOverlay_ = IIngredientListOverlay;
    /**
    * @javaClass com.jozufozu.flywheel.util.box.ImmutableBox
    */
    interface ImmutableBox {
        hasPowerOf2Sides(): boolean;
        intersect(arg0: Internal.ImmutableBox_): Internal.GridAlignedBB;
        intersects(arg0: Internal.ImmutableBox_): boolean;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
        getMaxX(): number;
        forEachContained(arg0: Internal.CoordinateConsumer_): void;
        getMaxY(): number;
        union(arg0: Internal.ImmutableBox_): this;
        getMaxZ(): number;
        empty(): boolean;
        volume(): number;
        sizeX(): number;
        contains(arg0: number, arg1: number, arg2: number): boolean;
        contains(arg0: Internal.ImmutableBox_): boolean;
        isContainedBy(arg0: Internal.GridAlignedBB_): boolean;
        toAABB(): Internal.AABB;
        copy(): Internal.GridAlignedBB;
        getMinZ(): number;
        getMinX(): number;
        sizeY(): number;
        getMinY(): number;
        sameAs(arg0: Internal.ImmutableBox_): boolean;
        sameAs(arg0: Internal.AABB_): boolean;
        sameAs(arg0: Internal.ImmutableBox_, arg1: number): boolean;
        sizeZ(): number;
    }
    type ImmutableBox_ = ImmutableBox;
    /**
    * @javaClass java.awt.Color
    */
    class Color implements Internal.Paint, Internal.Serializable {
        brighter(): this;
        static getColor(arg0: string, arg1: Internal.Color_): this;
        static getColor(arg0: string, arg1: number): this;
        static getColor(arg0: string): this;
        static HSBtoRGB(arg0: number, arg1: number, arg2: number): number;
        static decode(arg0: string): this;
        createContext(arg0: Internal.ColorModel_, arg1: Internal.Rectangle_, arg2: Internal.Rectangle2D_, arg3: Internal.AffineTransform_, arg4: Internal.RenderingHints_): Internal.PaintContext;
        getBlue(): number;
        getColorSpace(): Internal.ColorSpace;
        getAlpha(): number;
        getRGBColorComponents(arg0: number[]): number[];
        getTransparency(): number;
        getColorComponents(arg0: Internal.ColorSpace_, arg1: number[]): number[];
        getColorComponents(arg0: number[]): number[];
        darker(): this;
        getGreen(): number;
        getRed(): number;
        getRGBComponents(arg0: number[]): number[];
        hashCode(): number;
        equals(arg0: any): boolean;
        getComponents(arg0: number[]): number[];
        getComponents(arg0: Internal.ColorSpace_, arg1: number[]): number[];
        toString(): string;
        getRGB(): number;
        static getHSBColor(arg0: number, arg1: number, arg2: number): this;
        static RGBtoHSB(arg0: number, arg1: number, arg2: number, arg3: number[]): number[];
        static readonly "lightGray" : Internal.Color;
        static readonly "magenta" : Internal.Color;
        static readonly "GRAY" : Internal.Color;
        static readonly "pink" : Internal.Color;
        static readonly "BLUE" : Internal.Color;
        static readonly "yellow" : Internal.Color;
        static readonly "cyan" : Internal.Color;
        static readonly "red" : Internal.Color;
        static readonly "gray" : Internal.Color;
        static readonly "PINK" : Internal.Color;
        static readonly "white" : Internal.Color;
        static readonly "BLACK" : Internal.Color;
        static readonly "ORANGE" : Internal.Color;
        static readonly "WHITE" : Internal.Color;
        static readonly "green" : Internal.Color;
        static readonly "black" : Internal.Color;
        static readonly "GREEN" : Internal.Color;
        static readonly "RED" : Internal.Color;
        static readonly "orange" : Internal.Color;
        static readonly "LIGHT_GRAY" : Internal.Color;
        static readonly "blue" : Internal.Color;
        static readonly "darkGray" : Internal.Color;
        static readonly "MAGENTA" : Internal.Color;
        static readonly "YELLOW" : Internal.Color;
        static readonly "DARK_GRAY" : Internal.Color;
        static readonly "CYAN" : Internal.Color;
        get colorSpace(): Internal.ColorSpace;
        get alpha(): number;
        get transparency(): number;
        get rGB(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Color_ = Color;
    /**
    * @javaClass com.jozufozu.flywheel.api.vertex.VertexWriter
    */
    interface VertexWriter {
        seekToVertex(arg0: number): void;
        writeVertexList(arg0: Internal.VertexList_): void;
        writeVertex(arg0: Internal.VertexList_, arg1: number): void;
        intoReader(): Internal.VertexList;
    }
    type VertexWriter_ = VertexWriter;
    /**
    * @javaClass net.minecraftforge.event.entity.living.PotionColorCalculationEvent
    */
    class PotionColorCalculationEvent extends Internal.LivingEvent {
        getEffects(): Internal.Collection<Internal.MobEffectInstance>;
        getListenerList(): Internal.ListenerList;
        setColor(arg0: number): void;
        shouldHideParticles(arg0: boolean): void;
        areParticlesHidden(): boolean;
        getColor(): number;
        get effects(): Internal.Collection<Internal.MobEffectInstance>;
        get color(): number;
        get listenerList(): Internal.ListenerList;
        set color(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionColorCalculationEvent_ = PotionColorCalculationEvent;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootContext$EntityTarget
    */
    class LootContext$EntityTarget extends Internal.Enum<Internal.LootContext$EntityTarget> implements Internal.EntityTargetKJS {
        getName(): string;
        static valueOf(arg0: string): this;
        static values(): Internal.LootContext$EntityTarget[];
        static readonly "DIRECT_KILLER" : Internal.LootContext$EntityTarget;
        static readonly "KILLER_PLAYER" : Internal.LootContext$EntityTarget;
        static readonly "KILLER" : Internal.LootContext$EntityTarget;
        static readonly "THIS" : Internal.LootContext$EntityTarget;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootContext$EntityTarget_ = "this" | "killer_player" | "killer" | "direct_killer" | LootContext$EntityTarget;
    /**
    * @javaClass java.nio.channels.FileLock
    */
    abstract class FileLock implements Internal.AutoCloseable {
        size(): number;
        release(): void;
        isValid(): boolean;
        overlaps(arg0: number, arg1: number): boolean;
        channel(): Internal.FileChannel;
        toString(): string;
        position(): number;
        close(): void;
        isShared(): boolean;
        acquiredBy(): Internal.Channel;
        get valid(): boolean;
        get shared(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileLock_ = FileLock;
    /**
    * @javaClass java.awt.PaintContext
    */
    interface PaintContext {
        getColorModel(): Internal.ColorModel;
        dispose(): void;
        getRaster(arg0: number, arg1: number, arg2: number, arg3: number): Internal.Raster;
    }
    type PaintContext_ = PaintContext;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeBlock
    */
    interface IForgeBlock {
        rotate(arg0: Internal.BlockState_, arg1: Internal.LevelAccessor_, arg2: BlockPos_, arg3: Internal.Rotation_): Internal.BlockState;
        getStateAtViewpoint(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Vec3_): Internal.BlockState;
        getBedDirection(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_): Internal.Direction;
        onBlockExploded(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.Explosion_): void;
        isBed(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Entity_): boolean;
        canHarvestBlock(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Player_): boolean;
        makesOpenTrapdoorAboveClimbable(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.BlockState_): boolean;
        isLadder(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.LivingEntity_): boolean;
        shouldDisplayFluidOverlay(arg0: Internal.BlockState_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_, arg3: Internal.FluidState_): boolean;
        onNeighborChange(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: BlockPos_): void;
        canStickTo(arg0: Internal.BlockState_, arg1: Internal.BlockState_): boolean;
        getWeakChanges(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_): boolean;
        canEntityDestroy(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Entity_): boolean;
        isBurning(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_): boolean;
        getFriction(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Entity_): number;
        isValidSpawn(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.SpawnPlacements$Type_, arg4: Internal.EntityType_<any>): boolean;
        isPortalFrame(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_): boolean;
        getMapColor(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.MaterialColor_): Internal.MaterialColor;
        getExplosionResistance(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Explosion_): number;
        onBlockStateChange(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.BlockState_, arg3: Internal.BlockState_): void;
        isScaffolding(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.LivingEntity_): boolean;
        canSustainPlant(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_, arg4: Internal.IPlantable_): boolean;
        canDropFromExplosion(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Explosion_): boolean;
        isStickyBlock(arg0: Internal.BlockState_): boolean;
        isFertile(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_): boolean;
        getAiPathNodeType(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Mob_): Internal.BlockPathTypes;
        isSlimeBlock(arg0: Internal.BlockState_): boolean;
        getFireSpreadSpeed(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_): number;
        getToolModifiedState(arg0: Internal.BlockState_, arg1: Internal.UseOnContext_, arg2: Internal.ToolAction_, arg3: boolean): Internal.BlockState;
        getToolModifiedState(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.Player_, arg4: Internal.ItemStack_, arg5: Internal.ToolAction_): Internal.BlockState;
        getBeaconColorMultiplier(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: BlockPos_): number[];
        getExpDrop(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: number, arg4: number): number;
        isConduitFrame(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: BlockPos_): boolean;
        getLightEmission(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_): number;
        onDestroyedByPlayer(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.Player_, arg4: boolean, arg5: Internal.FluidState_): boolean;
        shouldCheckWeakPower(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Direction_): boolean;
        collisionExtendsVertically(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Entity_): boolean;
        supportsExternalFaceHiding(arg0: Internal.BlockState_): boolean;
        addLandingEffects(arg0: Internal.BlockState_, arg1: Internal.ServerLevel_, arg2: BlockPos_, arg3: Internal.BlockState_, arg4: Internal.LivingEntity_, arg5: number): boolean;
        getSoundType(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Entity_): Internal.SoundType;
        addRunningEffects(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.Entity_): boolean;
        hidesNeighborFace(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.BlockState_, arg3: Internal.BlockState_, arg4: Internal.Direction_): boolean;
        getCloneItemStack(arg0: Internal.BlockState_, arg1: Internal.HitResult_, arg2: Internal.BlockGetter_, arg3: BlockPos_, arg4: Internal.Player_): Internal.ItemStack;
        isFlammable(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_): boolean;
        onCaughtFire(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.Direction_, arg4: Internal.LivingEntity_): void;
        getEnchantPowerBonus(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_): number;
        setBedOccupied(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.LivingEntity_, arg4: boolean): void;
        isFireSource(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Direction_): boolean;
        getRespawnPosition(arg0: Internal.BlockState_, arg1: Internal.EntityType_<any>, arg2: Internal.LevelReader_, arg3: BlockPos_, arg4: number, arg5: Internal.LivingEntity_): Internal.Optional<Vec3>;
        canConnectRedstone(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_): boolean;
        getFlammability(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_): number;
    }
    type IForgeBlock_ = ((arg0: Internal.BlockState, arg1: Internal.BlockGetter, arg2: BlockPos, arg3: Internal.Direction, arg4: Internal.IPlantable) => boolean) | IForgeBlock;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.PanelScrollBar
    */
    class PanelScrollBar extends Internal.ScrollBar {
        setMaxValue(max: number): void;
        getMinValue(): number;
        setScrollStep(s: number): void;
        getScrollBarSize(): number;
        getScrollStep(): number;
        canMouseScroll(): boolean;
        setMinValue(min: number): void;
        onMoved(): void;
        readonly "panel" : Internal.Panel;
        get minValue(): number;
        get scrollStep(): number;
        get scrollBarSize(): number;
        set minValue(min: number);
        set maxValue(max: number);
        set scrollStep(s: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PanelScrollBar_ = PanelScrollBar;
    /**
    * @javaClass net.minecraft.client.renderer.entity.EntityRenderer
    */
    abstract class EntityRenderer <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityRenderer_<T> = EntityRenderer<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.GameRulesJS
    */
    class GameRulesJS {
        getInt(rule: string): number;
        set(rule: string, value: any): void;
        getBoolean(rule: string): boolean;
        getString(rule: string): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GameRulesJS_ = GameRulesJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.PlatformWrapper$ModInfo
    */
    class PlatformWrapper$ModInfo {
        getVersion(): string;
        getName(): string;
        getId(): string;
        get name(): string;
        get id(): string;
        get version(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlatformWrapper$ModInfo_ = PlatformWrapper$ModInfo;
    /**
    * @javaClass dev.architectury.registry.registries.options.RegistrarOption
    */
    interface RegistrarOption {
    }
    type RegistrarOption_ = RegistrarOption;
    /**
    * @javaClass com.simibubi.create.foundation.mixin.accessor.GameRendererAccessor
    */
    interface GameRendererAccessor {
        create$callGetFov(arg0: Internal.Camera_, arg1: number, arg2: boolean): number;
    }
    type GameRendererAccessor_ = ((arg0: Internal.Camera, arg1: number, arg2: boolean) => number) | GameRendererAccessor;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingGetProjectileEvent
    */
    class LivingGetProjectileEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getProjectileWeaponItemStack(): Internal.ItemStack;
        getProjectileItemStack(): Internal.ItemStack;
        setProjectileItemStack(arg0: Internal.ItemStack_): void;
        get projectileItemStack(): Internal.ItemStack;
        get projectileWeaponItemStack(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        set projectileItemStack(arg0: Internal.ItemStack_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingGetProjectileEvent_ = LivingGetProjectileEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.RayTraceResultJS
    */
    class RayTraceResultJS {
        readonly "fromEntity" : Internal.EntityJS;
        readonly "distance" : number;
        "hitX" : number;
        "hitY" : number;
        "hitZ" : number;
        "facing" : Internal.Direction;
        "block" : Internal.BlockContainerJS;
        readonly "type" : string;
        "entity" : Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RayTraceResultJS_ = RayTraceResultJS;
    /**
    * @javaClass net.minecraft.world.level.material.FluidState
    */
    class FluidState extends Internal.StateHolder<Internal.Fluid, Internal.FluidState> implements Internal.IForgeFluidState {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidState_ = FluidState;
    /**
    * @javaClass net.minecraft.world.level.biome.Biome$ClimateSettings
    */
    class Biome$ClimateSettings {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Biome$ClimateSettings_ = Biome$ClimateSettings;
    /**
    * @javaClass java.awt.im.InputMethodRequests
    */
    interface InputMethodRequests {
        getCommittedTextLength(): number;
        getSelectedText(arg0: Internal.AttributedCharacterIterator$Attribute_[]): Internal.AttributedCharacterIterator;
        getInsertPositionOffset(): number;
        getCommittedText(arg0: number, arg1: number, arg2: Internal.AttributedCharacterIterator$Attribute_[]): Internal.AttributedCharacterIterator;
        getLocationOffset(arg0: number, arg1: number): Internal.TextHitInfo;
        cancelLatestCommittedText(arg0: Internal.AttributedCharacterIterator$Attribute_[]): Internal.AttributedCharacterIterator;
        getTextLocation(arg0: Internal.TextHitInfo_): Internal.Rectangle;
    }
    type InputMethodRequests_ = InputMethodRequests;
    /**
    * @javaClass java.util.Comparator
    */
    interface Comparator <T> {
        comparingDouble<T>(arg0: Internal.ToDoubleFunction_<T>): Internal.Comparator<T>;
        naturalOrder<T>(): Internal.Comparator<T>;
        compare(arg0: T, arg1: T): number;
        thenComparingInt(arg0: Internal.ToIntFunction_<T>): Internal.Comparator<T>;
        comparingLong<T>(arg0: Internal.ToLongFunction_<T>): Internal.Comparator<T>;
        thenComparingDouble(arg0: Internal.ToDoubleFunction_<T>): Internal.Comparator<T>;
        reverseOrder<T>(): Internal.Comparator<T>;
        comparing<T, U>(arg0: Internal.Function_<T, U>): Internal.Comparator<T>;
        comparing<T, U>(arg0: Internal.Function_<T, U>, arg1: Internal.Comparator_<U>): Internal.Comparator<T>;
        thenComparingLong(arg0: Internal.ToLongFunction_<T>): Internal.Comparator<T>;
        nullsLast<T>(arg0: Internal.Comparator_<T>): Internal.Comparator<T>;
        thenComparing(arg0: Internal.Comparator_<T>): Internal.Comparator<T>;
        thenComparing<U>(arg0: Internal.Function_<T, U>, arg1: Internal.Comparator_<U>): Internal.Comparator<T>;
        thenComparing<U>(arg0: Internal.Function_<T, U>): Internal.Comparator<T>;
        equals(arg0: any): boolean;
        comparingInt<T>(arg0: Internal.ToIntFunction_<T>): Internal.Comparator<T>;
        nullsFirst<T>(arg0: Internal.Comparator_<T>): Internal.Comparator<T>;
        reversed(): Internal.Comparator<T>;
    }
    type Comparator_<T> = Comparator<T>;
    /**
    * @javaClass dev.latvian.mods.rhino.MemberType
    */
    class MemberType extends Internal.Enum<Internal.MemberType> {
        static valueOf(name: string): this;
        static values(): Internal.MemberType[];
        static get(value: any): this;
        toString(): string;
        static readonly "NUMBER" : Internal.MemberType;
        static readonly "SYMBOL" : Internal.MemberType;
        static readonly "UNDEFINED" : Internal.MemberType;
        static readonly "STRING" : Internal.MemberType;
        static readonly "OBJECT" : Internal.MemberType;
        static readonly "FUNCTION" : Internal.MemberType;
        static readonly "BOOLEAN" : Internal.MemberType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MemberType_ = "symbol" | "number" | "boolean" | "string" | "function" | "undefined" | "object" | MemberType;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.CropBlockBuilder
    */
    class CropBlockBuilder extends Internal.BlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        survive(surviveCallback: Internal.CropBlockBuilder$SurviveCallback_): this;
        randomTick(randomTickCallback: Internal.Consumer_<Internal.RandomTickCallbackJS_>): Internal.BlockBuilder;
        texture(id: string, tex: string): Internal.BlockBuilder;
        dropSeed(dropSeed: boolean): this;
        bonemeal(bonemealCallback: Internal.ToIntFunction_<Internal.RandomTickCallbackJS_>): this;
        age(age: number): this;
        age(age: number, builder: Internal.Consumer_<Internal.CropBlockBuilder$ShapeBuilder_>): this;
        crop(output: any, chance: number): this;
        crop(output: any): this;
        growTick(growSpeedCallback: Internal.ToDoubleFunction_<Internal.RandomTickCallbackJS_>): this;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CropBlockBuilder_ = CropBlockBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2LongFunction
    */
    interface Reference2LongFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToLongFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        removeLong(arg0: any): number;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Long2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Reference2FloatFunction<K>;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Reference2CharFunction<K>;
        getLong(arg0: any): number;
        applyAsLong(arg0: K): number;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2LongFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2LongFunction;
    }
    type Reference2LongFunction_<K> = ((arg0: any) => number) | Reference2LongFunction<K>;
    /**
    * @javaClass java.awt.datatransfer.DataFlavor
    */
    class DataFlavor implements Internal.Externalizable, Internal.Cloneable {
        isFlavorJavaFileListType(): boolean;
        static getTextPlainUnicodeFlavor(): this;
        getDefaultRepresentationClass(): typeof any;
        getPrimaryType(): string;
        getSubType(): string;
        isMimeTypeEqual(arg0: string): boolean;
        isMimeTypeEqual(arg0: Internal.DataFlavor_): boolean;
        hashCode(): number;
        isRepresentationClassSerializable(): boolean;
        getDefaultRepresentationClassAsString(): string;
        isRepresentationClassCharBuffer(): boolean;
        isRepresentationClassByteBuffer(): boolean;
        getParameter(arg0: string): string;
        static selectBestTextFlavor(arg0: Internal.DataFlavor_[]): this;
        writeExternal(arg0: Internal.ObjectOutput_): void;
        setHumanPresentableName(arg0: string): void;
        isMimeTypeSerializedObject(): boolean;
        getMimeType(): string;
        getReaderForText(arg0: Internal.Transferable_): Internal.Reader;
        match(arg0: Internal.DataFlavor_): boolean;
        isFlavorTextType(): boolean;
        isFlavorSerializedObjectType(): boolean;
        getHumanPresentableName(): string;
        getRepresentationClass(): typeof any;
        isRepresentationClassInputStream(): boolean;
        isFlavorRemoteObjectType(): boolean;
        isRepresentationClassReader(): boolean;
        equals(arg0: any): boolean;
        equals(arg0: string): boolean;
        equals(arg0: Internal.DataFlavor_): boolean;
        readExternal(arg0: Internal.ObjectInput_): void;
        clone(): any;
        toString(): string;
        isRepresentationClassRemote(): boolean;
        static readonly "javaJVMLocalObjectMimeType" : "application/x-java-jvm-local-objectref";
        static readonly "stringFlavor" : Internal.DataFlavor;
        static readonly "javaFileListFlavor" : Internal.DataFlavor;
        static readonly "javaSerializedObjectMimeType" : "application/x-java-serialized-object";
        static readonly "plainTextFlavor" : Internal.DataFlavor;
        static readonly "javaRemoteObjectMimeType" : "application/x-java-remote-object";
        static readonly "imageFlavor" : Internal.DataFlavor;
        static readonly "selectionHtmlFlavor" : Internal.DataFlavor;
        static readonly "allHtmlFlavor" : Internal.DataFlavor;
        static readonly "fragmentHtmlFlavor" : Internal.DataFlavor;
        get representationClass(): typeof any;
        get flavorRemoteObjectType(): boolean;
        get representationClassSerializable(): boolean;
        get mimeTypeSerializedObject(): boolean;
        get humanPresentableName(): string;
        get mimeType(): string;
        get representationClassInputStream(): boolean;
        get defaultRepresentationClassAsString(): string;
        get flavorSerializedObjectType(): boolean;
        get representationClassReader(): boolean;
        get representationClassRemote(): boolean;
        get representationClassByteBuffer(): boolean;
        get primaryType(): string;
        get textPlainUnicodeFlavor(): this;
        get subType(): string;
        get defaultRepresentationClass(): typeof any;
        get flavorTextType(): boolean;
        get flavorJavaFileListType(): boolean;
        get representationClassCharBuffer(): boolean;
        set humanPresentableName(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataFlavor_ = DataFlavor;
    /**
    * @javaClass com.mojang.serialization.MapCodec
    */
    abstract class MapCodec <A> extends Internal.CompressorHolder implements Internal.MapDecoder<A>, Internal.MapEncoder<A> {
        setPartial(arg0: Internal.Supplier_<A>): Internal.MapCodec<A>;
        keys<T>(arg0: Internal.DynamicOps_<T>): Internal.Stream<T>;
        deprecated(arg0: number): Internal.MapCodec<A>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.MapCodec<A>;
        orElse(arg0: A): Internal.MapCodec<A>;
        orElse(arg0: Internal.Consumer_<string>, arg1: A): Internal.MapCodec<A>;
        orElse(arg0: Internal.UnaryOperator_<string>, arg1: A): Internal.MapCodec<A>;
        forGetter<O>(arg0: Internal.Function_<O, A>): Internal.RecordCodecBuilder<O, A>;
        codec(): Internal.Codec<A>;
        static unit<A>(arg0: A): Internal.MapCodec<A>;
        static unit<A>(arg0: Internal.Supplier_<A>): Internal.MapCodec<A>;
        orElseGet(arg0: Internal.UnaryOperator_<string>, arg1: Internal.Supplier_<A>): Internal.MapCodec<A>;
        orElseGet(arg0: Internal.Consumer_<string>, arg1: Internal.Supplier_<A>): Internal.MapCodec<A>;
        orElseGet(arg0: Internal.Supplier_<A>): Internal.MapCodec<A>;
        stable(): Internal.MapCodec<A>;
        flatXmap<S>(arg0: Internal.Function_<A, Internal.DataResult_<S>>, arg1: Internal.Function_<S, Internal.DataResult_<A>>): Internal.MapCodec<S>;
        static of<A>(arg0: Internal.MapEncoder_<A>, arg1: Internal.MapDecoder_<A>, arg2: Internal.Supplier_<string>): Internal.MapCodec<A>;
        static of<A>(arg0: Internal.MapEncoder_<A>, arg1: Internal.MapDecoder_<A>): Internal.MapCodec<A>;
        mapResult(arg0: Internal.MapCodec$ResultFunction_<A>): Internal.MapCodec<A>;
        fieldOf(arg0: string): Internal.MapCodec<A>;
        xmap<S>(arg0: Internal.Function_<A, S>, arg1: Internal.Function_<S, A>): Internal.MapCodec<S>;
        dependent<E>(arg0: Internal.MapCodec_<E>, arg1: Internal.Function_<A, com.mojang.datafixers.util.Pair_<E, Internal.MapCodec_<E>>>, arg2: Internal.BiFunction_<A, E, A>): Internal.MapCodec<A>;
        set partial(arg0: Internal.Supplier_<A>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MapCodec_<A> = MapCodec<A>;
    /**
    * @javaClass io.netty.util.concurrent.Promise
    */
    interface Promise <V> extends io.netty.util.concurrent.Future<V> {
        setFailure(arg0: Internal.Throwable_): Internal.Promise<V>;
        setSuccess(arg0: V): Internal.Promise<V>;
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.Promise<V>;
        trySuccess(arg0: V): boolean;
        syncUninterruptibly(): Internal.Promise<V>;
        await(): Internal.Promise<V>;
        awaitUninterruptibly(): Internal.Promise<V>;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.Promise<V>;
        tryFailure(arg0: Internal.Throwable_): boolean;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.Promise<V>;
        sync(): Internal.Promise<V>;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.Promise<V>;
        setUncancellable(): boolean;
    }
    type Promise_<V> = Promise<V>;
    /**
    * @javaClass java.awt.image.BufferedImageOp
    */
    interface BufferedImageOp {
        getPoint2D(arg0: Internal.Point2D_, arg1: Internal.Point2D_): Internal.Point2D;
        filter(arg0: Internal.BufferedImage_, arg1: Internal.BufferedImage_): Internal.BufferedImage;
        getBounds2D(arg0: Internal.BufferedImage_): Internal.Rectangle2D;
        getRenderingHints(): Internal.RenderingHints;
        createCompatibleDestImage(arg0: Internal.BufferedImage_, arg1: Internal.ColorModel_): Internal.BufferedImage;
    }
    type BufferedImageOp_ = BufferedImageOp;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.BooleanProperty
    */
    class BooleanProperty extends Internal.TeamProperty<boolean> {
        toNBT(value: boolean): Internal.Tag;
        fromNBT(tag: Internal.Tag_): Internal.Optional<boolean>;
        getType(): Internal.TeamPropertyType<boolean>;
        fromString(string: string): Internal.Optional<boolean>;
        config(config: Internal.ConfigGroup_, value: Internal.TeamPropertyValue_<boolean>): void;
        write(buf: Internal.FriendlyByteBuf_): void;
        get type(): Internal.TeamPropertyType<boolean>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BooleanProperty_ = BooleanProperty;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.MobEffectBuilder$EffectTickCallback
    */
    interface MobEffectBuilder$EffectTickCallback {
        applyEffectTick(arg0: Internal.LivingEntityJS_, arg1: number): void;
    }
    type MobEffectBuilder$EffectTickCallback_ = ((arg0: Internal.LivingEntityJS, arg1: number) => void) | MobEffectBuilder$EffectTickCallback;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.KnownClientPlayer
    */
    class KnownClientPlayer implements Internal.Comparable<Internal.KnownClientPlayer> {
        isValid(): boolean;
        getProfile(): Internal.GameProfile;
        getExtraData(): Internal.CompoundTag;
        update(p: Internal.KnownClientPlayer_): void;
        compareTo(o: Internal.KnownClientPlayer_): number;
        write(buf: Internal.FriendlyByteBuf_): void;
        isInternalTeam(): boolean;
        "teamId" : Internal.UUID;
        "name" : string;
        "online" : boolean;
        readonly "uuid" : Internal.UUID;
        get valid(): boolean;
        get internalTeam(): boolean;
        get extraData(): Internal.CompoundTag;
        get profile(): Internal.GameProfile;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type KnownClientPlayer_ = KnownClientPlayer;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.QuestObjectBase
    */
    abstract class QuestObjectBase {
        deleteChildren(): void;
        readNetData(buffer: Internal.FriendlyByteBuf_): void;
        getMutableTitle(): Internal.MutableComponent;
        getTags(): Internal.Set<string>;
        writeData(nbt: Internal.CompoundTag_): void;
        static getCodeString(object: Internal.QuestObjectBase_): string;
        static getCodeString(id: number): string;
        getCodeString(): string;
        createSubGroup(group: Internal.ConfigGroup_): Internal.ConfigGroup;
        editedFromGUIOnServer(): void;
        forceProgress(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        getTitle(): net.minecraft.network.chat.Component;
        getAltIcon(): Internal.Icon;
        hashCode(): number;
        getObjectType(): Internal.QuestObjectType;
        getPath(): string;
        clearCachedData(): void;
        getParentID(): number;
        static parseCodeString(id: string): number;
        readData(nbt: Internal.CompoundTag_): void;
        editedFromGUI(): void;
        refreshJEI(): number;
        hasTag(tag: string): boolean;
        getQuestChapter(): Internal.Chapter;
        getQuestFile(): Internal.QuestFile;
        static getID(object: Internal.QuestObjectBase_): number;
        writeNetData(buffer: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        onEditButtonClicked(gui: Internal.Runnable_): void;
        getIcon(): Internal.Icon;
        forceProgressRaw(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        getAltTitle(): net.minecraft.network.chat.Component;
        static isNull(object: Internal.QuestObjectBase_): boolean;
        equals(object: any): boolean;
        toString(): string;
        deleteSelf(): void;
        static titleToID(s: string): Internal.Optional<string>;
        onCreated(): void;
        "invalid" : boolean;
        "icon" : Internal.ItemStack;
        static "sendNotifications" : Internal.Tristate;
        "id" : number;
        "title" : string;
        get path(): string;
        get codeString(): string;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get parentID(): number;
        get mutableTitle(): Internal.MutableComponent;
        get tags(): Internal.Set<string>;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        get questChapter(): Internal.Chapter;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestObjectBase_ = QuestObjectBase;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2CharFunction
    */
    interface Boolean2CharFunction extends it.unimi.dsi.fastutil.Function<boolean, string> {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: boolean, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: string): string;
        remove(arg0: any): string;
        remove(arg0: boolean): string;
        defaultReturnValue(): string;
        defaultReturnValue(arg0: string): void;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: boolean): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2CharFunction;
    }
    type Boolean2CharFunction_ = ((arg0: boolean) => string) | Boolean2CharFunction;
    /**
    * @javaClass java.lang.StringBuilder
    */
    class StringBuilder extends Internal.AbstractStringBuilder implements Internal.Serializable, Internal.Comparable<Internal.StringBuilder>, Internal.CharSequence {
        deleteCharAt(arg0: number): this;
        appendCodePoint(arg0: number): this;
        lastIndexOf(arg0: string, arg1: number): number;
        lastIndexOf(arg0: string): number;
        replace(arg0: number, arg1: number, arg2: string): this;
        insert(arg0: number, arg1: number): this;
        insert(arg0: number, arg1: string): this;
        insert(arg0: number, arg1: any): this;
        insert(arg0: number, arg1: string[], arg2: number, arg3: number): this;
        insert(arg0: number, arg1: Internal.CharSequence_, arg2: number, arg3: number): this;
        insert(arg0: number, arg1: Internal.CharSequence_): this;
        insert(arg0: number, arg1: string[]): this;
        insert(arg0: number, arg1: boolean): this;
        toString(): string;
        compareTo(arg0: Internal.StringBuilder_): number;
        reverse(): this;
        delete(arg0: number, arg1: number): this;
        indexOf(arg0: string): number;
        indexOf(arg0: string, arg1: number): number;
        append(arg0: Internal.StringBuffer_): this;
        append(arg0: Internal.CharSequence_): this;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string[]): this;
        append(arg0: any): this;
        append(arg0: string): this;
        append(arg0: number): this;
        append(arg0: boolean): this;
        append(arg0: string[], arg1: number, arg2: number): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringBuilder_ = StringBuilder;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2ShortFunction
    */
    interface Char2ShortFunction extends it.unimi.dsi.fastutil.Function<string, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: string, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<string, T>;
        put(arg0: string, arg1: number): number;
        remove(arg0: string): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: string): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Char2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: string): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): this;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2ShortFunction;
    }
    type Char2ShortFunction_ = ((arg0: string) => number) | Char2ShortFunction;
    /**
    * @javaClass javax.accessibility.Accessible
    */
    interface Accessible {
        getAccessibleContext(): Internal.AccessibleContext;
    }
    type Accessible_ = (() => Internal.AccessibleContext) | Accessible;
    /**
    * @javaClass java.awt.dnd.DragSourceDragEvent
    */
    class DragSourceDragEvent extends Internal.DragSourceEvent {
        getDropAction(): number;
        getTargetActions(): number;
        getUserAction(): number;
        getGestureModifiers(): number;
        getGestureModifiersEx(): number;
        get userAction(): number;
        get gestureModifiers(): number;
        get gestureModifiersEx(): number;
        get dropAction(): number;
        get targetActions(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragSourceDragEvent_ = DragSourceDragEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.stages.Stages
    */
    abstract class Stages {
        add(stage: string): boolean;
        getAll(): Internal.Collection<string>;
        set(stage: string, enabled: boolean): boolean;
        static added(event: Internal.Consumer_<Internal.StageChangeEvent_>): void;
        static invokeAdded(stages: Internal.Stages_, stage: string): void;
        replace(stages: Internal.Collection_<string>): void;
        clear(): boolean;
        toggle(stage: string): boolean;
        addNoUpdate(arg0: string): boolean;
        sync(): void;
        remove(stage: string): boolean;
        static removed(event: Internal.Consumer_<Internal.StageChangeEvent_>): void;
        static get(player: Internal.Player_): this;
        static invokeRemoved(stages: Internal.Stages_, stage: string): void;
        static overrideCreation(event: Internal.Consumer_<Internal.StageCreationEvent_>): void;
        has(stage: string): boolean;
        removeNoUpdate(arg0: string): boolean;
        readonly "player" : Internal.Player;
        get all(): Internal.Collection<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Stages_ = Stages;
    /**
    * @javaClass java.awt.Frame
    */
    class Frame extends Internal.Window implements Internal.MenuContainer {
        getMaximizedBounds(): Internal.Rectangle;
        static getFrames(): Internal.Frame[];
        setIconImage(arg0: Internal.Image_): void;
        getMenuBar(): Internal.MenuBar;
        setBackground(arg0: Internal.Color_): void;
        remove(arg0: Internal.MenuComponent_): void;
        setMenuBar(arg0: Internal.MenuBar_): void;
        getTitle(): string;
        getCursorType(): number;
        setMaximizedBounds(arg0: Internal.Rectangle_): void;
        setResizable(arg0: boolean): void;
        setTitle(arg0: string): void;
        isResizable(): boolean;
        getAccessibleContext(): Internal.AccessibleContext;
        setShape(arg0: Internal.Shape_): void;
        setExtendedState(arg0: number): void;
        getExtendedState(): number;
        getState(): number;
        setUndecorated(arg0: boolean): void;
        addNotify(): void;
        isUndecorated(): boolean;
        removeNotify(): void;
        setState(arg0: number): void;
        setCursor(arg0: number): void;
        getIconImage(): Internal.Image;
        setOpacity(arg0: number): void;
        static readonly "N_RESIZE_CURSOR" : 8;
        static readonly "MAXIMIZED_HORIZ" : 2;
        static readonly "ICONIFIED" : 1;
        static readonly "S_RESIZE_CURSOR" : 9;
        static readonly "TEXT_CURSOR" : 2;
        static readonly "MAXIMIZED_BOTH" : 6;
        static readonly "NW_RESIZE_CURSOR" : 6;
        static readonly "W_RESIZE_CURSOR" : 10;
        static readonly "SE_RESIZE_CURSOR" : 5;
        static readonly "NE_RESIZE_CURSOR" : 7;
        static readonly "SW_RESIZE_CURSOR" : 4;
        static readonly "MAXIMIZED_VERT" : 4;
        static readonly "DEFAULT_CURSOR" : 0;
        static readonly "CROSSHAIR_CURSOR" : 1;
        static readonly "E_RESIZE_CURSOR" : 11;
        static readonly "HAND_CURSOR" : 12;
        static readonly "WAIT_CURSOR" : 3;
        static readonly "NORMAL" : 0;
        static readonly "MOVE_CURSOR" : 13;
        get menuBar(): Internal.MenuBar;
        get accessibleContext(): Internal.AccessibleContext;
        get undecorated(): boolean;
        get frames(): Internal.Frame[];
        get iconImage(): Internal.Image;
        get resizable(): boolean;
        get cursorType(): number;
        get extendedState(): number;
        get state(): number;
        get title(): string;
        get maximizedBounds(): Internal.Rectangle;
        set cursor(arg0: number);
        set menuBar(arg0: Internal.MenuBar_);
        set undecorated(arg0: boolean);
        set shape(arg0: Internal.Shape_);
        set iconImage(arg0: Internal.Image_);
        set resizable(arg0: boolean);
        set background(arg0: Internal.Color_);
        set extendedState(arg0: number);
        set state(arg0: number);
        set opacity(arg0: number);
        set title(arg0: string);
        set maximizedBounds(arg0: Internal.Rectangle_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Frame_ = Frame;
    /**
    * @javaClass com.google.common.collect.ImmutableCollection
    */
    abstract class ImmutableCollection <E> extends Internal.AbstractCollection<E> implements Internal.Serializable {
        add(arg0: E): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.UnmodifiableIterator<E>;
        addAll(arg0: Internal.Collection_<E>): boolean;
        spliterator(): Internal.Spliterator<E>;
        toArray(): any[];
        toArray<T>(arg0: T[]): T[];
        clear(): void;
        asList(): Internal.ImmutableList<E>;
        remove(arg0: any): boolean;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        removeIf(arg0: Internal.Predicate_<E>): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableCollection_<E> = ImmutableCollection<E>;
    /**
    * @javaClass com.google.gson.JsonObject
    */
    class JsonObject extends Internal.JsonElement {
        add(arg0: string, arg1: Internal.JsonElement_): void;
        getAsJsonObject(arg0: string): this;
        entrySet(): Internal.Set<Internal.Map$Entry<string, Internal.JsonElement>>;
        addProperty(arg0: string, arg1: Internal.Number_): void;
        addProperty(arg0: string, arg1: string): void;
        addProperty(arg0: string, arg1: boolean): void;
        remove(arg0: string): Internal.JsonElement;
        deepCopy(): this;
        getAsJsonArray(arg0: string): Internal.JsonArray;
        size(): number;
        getAsJsonPrimitive(arg0: string): Internal.JsonPrimitive;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: string): Internal.JsonElement;
        has(arg0: string): boolean;
        keySet(): Internal.Set<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonObject_ = JsonObject;
    /**
    * @javaClass java.nio.file.OpenOption
    */
    interface OpenOption {
    }
    type OpenOption_ = OpenOption;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.BlockModificationProperties
    */
    class BlockModificationProperties {
        setRandomlyTicking(v: boolean): void;
        setRequiresTool(v: boolean): void;
        setJumpFactor(v: number): void;
        setDestroySpeed(v: number): void;
        setHasCollision(v: boolean): void;
        setFriction(v: number): void;
        setSpeedFactor(v: number): void;
        setExplosionResistance(v: number): void;
        setLightEmission(v: number): void;
        setMaterial(v: Internal.MaterialJS_): void;
        setSoundType(v: Internal.SoundType_): void;
        readonly "block" : Internal.BlockKJS;
        set lightEmission(v: number);
        set explosionResistance(v: number);
        set material(v: Internal.MaterialJS_);
        set destroySpeed(v: number);
        set requiresTool(v: boolean);
        set speedFactor(v: number);
        set randomlyTicking(v: boolean);
        set soundType(v: Internal.SoundType_);
        set friction(v: number);
        set hasCollision(v: boolean);
        set jumpFactor(v: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockModificationProperties_ = BlockModificationProperties;
    /**
    * @javaClass com.simibubi.create.foundation.mixin.accessor.LivingEntityAccessor
    */
    interface LivingEntityAccessor {
        create$callSpawnItemParticles(arg0: Internal.ItemStack_, arg1: number): void;
    }
    type LivingEntityAccessor_ = ((arg0: Internal.ItemStack, arg1: number) => void) | LivingEntityAccessor;
    /**
    * @javaClass java.security.DomainCombiner
    */
    interface DomainCombiner {
        combine(arg0: Internal.ProtectionDomain_[], arg1: Internal.ProtectionDomain_[]): Internal.ProtectionDomain[];
    }
    type DomainCombiner_ = ((arg0: Internal.ProtectionDomain[], arg1: Internal.ProtectionDomain[]) => Internal.ProtectionDomain[]) | DomainCombiner;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedBlockExtension
    */
    interface InjectedBlockExtension extends Internal.InjectedRegistryEntryExtension<Internal.Block> {
        arch$holder(): Internal.Holder<Internal.Block>;
    }
    type InjectedBlockExtension_ = InjectedBlockExtension;
    /**
    * @javaClass java.time.chrono.ChronoPeriod
    */
    interface ChronoPeriod extends Internal.TemporalAmount {
        minus(arg0: Internal.TemporalAmount_): this;
        isNegative(): boolean;
        negated(): this;
        normalized(): this;
        plus(arg0: Internal.TemporalAmount_): this;
        multipliedBy(arg0: number): this;
        subtractFrom(arg0: Internal.Temporal_): Internal.Temporal;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: Internal.TemporalUnit_): number;
        getUnits(): Internal.List<Internal.TemporalUnit>;
        addTo(arg0: Internal.Temporal_): Internal.Temporal;
        isZero(): boolean;
        toString(): string;
        getChronology(): Internal.Chronology;
        between(arg0: Internal.ChronoLocalDate_, arg1: Internal.ChronoLocalDate_): this;
    }
    type ChronoPeriod_ = ChronoPeriod;
    /**
    * @javaClass net.minecraft.world.item.TooltipFlag
    */
    interface TooltipFlag {
    }
    type TooltipFlag_ = TooltipFlag;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ConfigWithVariants
    */
    abstract class ConfigWithVariants <T> extends Internal.ConfigValue<T> {
        getIteration(arg0: T, arg1: boolean): T;
        onClicked(button: Internal.MouseButton_, callback: Internal.ConfigCallback_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfigWithVariants_<T> = ConfigWithVariants<T>;
    /**
    * @javaClass com.electronwill.nightconfig.core.EnumGetMethod
    */
    class EnumGetMethod extends Internal.Enum<Internal.EnumGetMethod> {
        isCaseSensitive(): boolean;
        isOrdinalOk(): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.EnumGetMethod[];
        get<T>(arg0: any, arg1: Internal.Class_<T>): T;
        validate<T>(arg0: any, arg1: Internal.Class_<T>): boolean;
        static readonly "NAME_IGNORECASE" : Internal.EnumGetMethod;
        static readonly "ORDINAL_OR_NAME" : Internal.EnumGetMethod;
        static readonly "ORDINAL_OR_NAME_IGNORECASE" : Internal.EnumGetMethod;
        static readonly "NAME" : Internal.EnumGetMethod;
        get ordinalOk(): boolean;
        get caseSensitive(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnumGetMethod_ = "name_ignorecase" | "name" | "ordinal_or_name" | "ordinal_or_name_ignorecase" | EnumGetMethod;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.ITooltipCallback
    */
    interface ITooltipCallback <T> {
        onTooltip(arg0: number, arg1: boolean, arg2: T, arg3: Internal.List_<net.minecraft.network.chat.Component_>): void;
    }
    type ITooltipCallback_<T> = ((arg0: number, arg1: boolean, arg2: T, arg3: Internal.List<net.minecraft.network.chat.Component>) => void) | ITooltipCallback<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongCollection
    */
    interface LongCollection extends Internal.Collection<number>, Internal.LongIterable {
        add(arg0: number): boolean;
        longIterator(): Internal.LongIterator;
        longSpliterator(): Internal.LongSpliterator;
        toLongArray(): number[];
        toLongArray(arg0: number[]): number[];
        spliterator(): Internal.LongSpliterator;
        containsAll(arg0: Internal.LongCollection_): boolean;
        remove(arg0: any): boolean;
        longParallelStream(): Internal.LongStream;
        removeIf(arg0: Internal.LongPredicate_): boolean;
        removeIf(arg0: Internal.Predicate_<number>): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.longs.LongPredicate_): boolean;
        removeAll(arg0: Internal.LongCollection_): boolean;
        contains(arg0: number): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.LongIterator;
        addAll(arg0: Internal.LongCollection_): boolean;
        stream(): Internal.Stream<number>;
        toArray(arg0: number[]): number[];
        longStream(): Internal.LongStream;
        parallelStream(): Internal.Stream<number>;
        rem(arg0: number): boolean;
        retainAll(arg0: Internal.LongCollection_): boolean;
    }
    type LongCollection_ = LongCollection;
    /**
    * @javaClass net.minecraftforge.event.entity.living.PotionEvent$PotionApplicableEvent
    */
    class PotionEvent$PotionApplicableEvent extends Internal.PotionEvent {
        getListenerList(): Internal.ListenerList;
        getPotionEffect(): Internal.MobEffectInstance;
        hasResult(): boolean;
        get potionEffect(): Internal.MobEffectInstance;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionEvent$PotionApplicableEvent_ = PotionEvent$PotionApplicableEvent;
    /**
    * @javaClass java.time.Duration
    */
    class Duration implements Internal.TemporalAmount, Internal.Comparable<Internal.Duration>, Internal.Serializable {
        negated(): this;
        plusHours(arg0: number): this;
        isPositive(): boolean;
        compareTo(arg0: Internal.Duration_): number;
        multipliedBy(arg0: number): this;
        plusSeconds(arg0: number): this;
        toMillis(): number;
        static from(arg0: Internal.TemporalAmount_): this;
        plusNanos(arg0: number): this;
        static ofMinutes(arg0: number): this;
        static between(arg0: Internal.Temporal_, arg1: Internal.Temporal_): this;
        static ofSeconds(arg0: number, arg1: number): this;
        static ofSeconds(arg0: number): this;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        minusNanos(arg0: number): this;
        getNano(): number;
        toMillisPart(): number;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.Duration_): this;
        toMinutesPart(): number;
        toNanos(): number;
        toMinutes(): number;
        toHours(): number;
        plusMillis(arg0: number): this;
        subtractFrom(arg0: Internal.Temporal_): Internal.Temporal;
        toSecondsPart(): number;
        static ofMillis(arg0: number): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.Duration_): this;
        minusHours(arg0: number): this;
        withSeconds(arg0: number): this;
        minusMillis(arg0: number): this;
        plusMinutes(arg0: number): this;
        toSeconds(): number;
        dividedBy(arg0: number): this;
        dividedBy(arg0: Internal.Duration_): number;
        minusMinutes(arg0: number): this;
        plusDays(arg0: number): this;
        hashCode(): number;
        static of(arg0: number, arg1: Internal.TemporalUnit_): this;
        get(arg0: Internal.TemporalUnit_): number;
        isZero(): boolean;
        toDays(): number;
        toNanosPart(): number;
        isNegative(): boolean;
        static ofDays(arg0: number): this;
        static parse(arg0: Internal.CharSequence_): this;
        minusDays(arg0: number): this;
        toHoursPart(): number;
        toDaysPart(): number;
        static ofNanos(arg0: number): this;
        getSeconds(): number;
        abs(): this;
        static ofHours(arg0: number): this;
        withNanos(arg0: number): this;
        equals(arg0: any): boolean;
        getUnits(): Internal.List<Internal.TemporalUnit>;
        addTo(arg0: Internal.Temporal_): Internal.Temporal;
        toString(): string;
        minusSeconds(arg0: number): this;
        static readonly "ZERO" : Internal.Duration;
        get zero(): boolean;
        get negative(): boolean;
        get seconds(): number;
        get nano(): number;
        get positive(): boolean;
        get units(): Internal.List<Internal.TemporalUnit>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Duration_ = Duration;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$PlayerTickEvent
    */
    class TickEvent$PlayerTickEvent extends Internal.TickEvent {
        getListenerList(): Internal.ListenerList;
        readonly "player" : Internal.Player;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$PlayerTickEvent_ = TickEvent$PlayerTickEvent;
    /**
    * @javaClass net.minecraftforge.common.IExtensibleEnum
    */
    interface IExtensibleEnum {
        init(): void;
        createCodecForExtensibleEnum<E>(arg0: Internal.Supplier_<E[]>, arg1: Internal.Function_<string, E>): Internal.Codec<E>;
    }
    type IExtensibleEnum_ = IExtensibleEnum;
    /**
    * @javaClass javax.accessibility.AccessibleComponent
    */
    interface AccessibleComponent {
        requestFocus(): void;
        getLocation(): Internal.Point;
        addFocusListener(arg0: Internal.FocusListener_): void;
        getLocationOnScreen(): Internal.Point;
        isFocusTraversable(): boolean;
        getAccessibleAt(arg0: Internal.Point_): Internal.Accessible;
        setBackground(arg0: Internal.Color_): void;
        getBounds(): Internal.Rectangle;
        getFontMetrics(arg0: Internal.Font_): Internal.FontMetrics;
        isShowing(): boolean;
        setSize(arg0: Internal.Dimension_): void;
        setLocation(arg0: Internal.Point_): void;
        setFont(arg0: Internal.Font_): void;
        removeFocusListener(arg0: Internal.FocusListener_): void;
        setVisible(arg0: boolean): void;
        getCursor(): Internal.Cursor;
        setForeground(arg0: Internal.Color_): void;
        isVisible(): boolean;
        setBounds(arg0: Internal.Rectangle_): void;
        getForeground(): Internal.Color;
        setEnabled(arg0: boolean): void;
        getSize(): Internal.Dimension;
        contains(arg0: Internal.Point_): boolean;
        isEnabled(): boolean;
        getFont(): Internal.Font;
        setCursor(arg0: Internal.Cursor_): void;
        getBackground(): Internal.Color;
    }
    type AccessibleComponent_ = AccessibleComponent;
    /**
    * @javaClass mezz.jei.api.runtime.IIngredientVisibility
    */
    interface IIngredientVisibility {
        isIngredientVisible<V>(arg0: Internal.IIngredientType_<V>, arg1: V): boolean;
        isIngredientVisible<V>(arg0: Internal.ITypedIngredient_<V>): boolean;
    }
    type IIngredientVisibility_ = IIngredientVisibility;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IRecipeSlotsView
    */
    interface IRecipeSlotsView {
        findSlotByName(arg0: string): Internal.Optional<Internal.IRecipeSlotView>;
        getSlotViews(): Internal.List<Internal.IRecipeSlotView>;
        getSlotViews(arg0: Internal.RecipeIngredientRole_): Internal.List<Internal.IRecipeSlotView>;
    }
    type IRecipeSlotsView_ = IRecipeSlotsView;
    /**
    * @javaClass vazkii.patchouli.mixin.client.AccessorMultiBufferSource
    */
    interface AccessorMultiBufferSource {
        getFallbackBuffer(): Internal.BufferBuilder;
        getFixedBuffers(): Internal.Map<Internal.RenderType, Internal.BufferBuilder>;
    }
    type AccessorMultiBufferSource_ = AccessorMultiBufferSource;
    /**
    * @javaClass mezz.jei.api.runtime.IIngredientManager
    */
    interface IIngredientManager {
        getIngredientRenderer<V>(arg0: Internal.IIngredientType_<V>): Internal.IIngredientRenderer<V>;
        getIngredientRenderer<V>(arg0: V): Internal.IIngredientRenderer<V>;
        getIngredientHelper<V>(arg0: Internal.IIngredientType_<V>): Internal.IIngredientHelper<V>;
        getIngredientHelper<V>(arg0: V): Internal.IIngredientHelper<V>;
        getIngredientType<V>(arg0: V): Internal.IIngredientType<V>;
        getIngredientType<V>(arg0: Internal.Class_<V>): Internal.IIngredientType<V>;
        removeIngredientsAtRuntime<V>(arg0: Internal.IIngredientType_<V>, arg1: Internal.Collection_<V>): void;
        addIngredientsAtRuntime<V>(arg0: Internal.IIngredientType_<V>, arg1: Internal.Collection_<V>): void;
        getAllIngredients<V>(arg0: Internal.IIngredientType_<V>): Internal.Collection<V>;
        getRegisteredIngredientTypes(): Internal.Collection<Internal.IIngredientType<any>>;
        getAllItemStacks(): Internal.Collection<Internal.ItemStack>;
    }
    type IIngredientManager_ = IIngredientManager;
    /**
    * @javaClass net.minecraft.sounds.SoundSource
    */
    class SoundSource extends Internal.Enum<Internal.SoundSource> {
        static valueOf(arg0: string): this;
        static values(): Internal.SoundSource[];
        static readonly "RECORDS" : Internal.SoundSource;
        static readonly "MUSIC" : Internal.SoundSource;
        static readonly "MASTER" : Internal.SoundSource;
        static readonly "HOSTILE" : Internal.SoundSource;
        static readonly "PLAYERS" : Internal.SoundSource;
        static readonly "VOICE" : Internal.SoundSource;
        static readonly "WEATHER" : Internal.SoundSource;
        static readonly "BLOCKS" : Internal.SoundSource;
        static readonly "AMBIENT" : Internal.SoundSource;
        static readonly "NEUTRAL" : Internal.SoundSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundSource_ = "voice" | "music" | "records" | "blocks" | "hostile" | "players" | "weather" | "neutral" | "ambient" | "master" | SoundSource;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingSpawnEvent$CheckSpawn
    */
    class LivingSpawnEvent$CheckSpawn extends Internal.LivingSpawnEvent {
        getListenerList(): Internal.ListenerList;
        isSpawner(): boolean;
        getSpawner(): Internal.BaseSpawner;
        hasResult(): boolean;
        getSpawnReason(): Internal.MobSpawnType;
        get spawnReason(): Internal.MobSpawnType;
        get spawner(): Internal.BaseSpawner;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingSpawnEvent$CheckSpawn_ = LivingSpawnEvent$CheckSpawn;
    /**
    * @javaClass dev.latvian.mods.unit.Unit
    */
    abstract class Unit {
        smoothstep(): this;
        mod(other: Internal.Unit_): this;
        mod(value: number): this;
        withAlpha(a: Internal.Unit_): this;
        log1p(): this;
        cos(): this;
        deg(): this;
        lt(other: Internal.Unit_): this;
        atan(): this;
        div(value: number): this;
        div(other: Internal.Unit_): this;
        rad(): this;
        sqrt(): this;
        gte(other: Internal.Unit_): this;
        neq(other: Internal.Unit_): this;
        clamp(a: Internal.Unit_, b: Internal.Unit_): this;
        atan2(other: Internal.Unit_): this;
        tan(): this;
        add(other: Internal.Unit_): this;
        add(value: number): this;
        ceil(): this;
        eq(other: Internal.Unit_): this;
        getInt(variables: Internal.UnitVariables_): number;
        divSet(unit: Internal.Unit_): this;
        bitAnd(other: Internal.Unit_): this;
        addSet(unit: Internal.Unit_): this;
        bitNot(): this;
        lsh(other: Internal.Unit_): this;
        sub(value: number): this;
        sub(other: Internal.Unit_): this;
        bool(): this;
        lerp(a: Internal.Unit_, b: Internal.Unit_): this;
        mul(other: Internal.Unit_): this;
        mul(value: number): this;
        log(): this;
        bitOr(other: Internal.Unit_): this;
        rsh(other: Internal.Unit_): this;
        log10(): this;
        modSet(unit: Internal.Unit_): this;
        getFloat(variables: Internal.UnitVariables_): number;
        boolNot(): this;
        min(other: Internal.Unit_): this;
        and(other: Internal.Unit_): this;
        get(arg0: Internal.UnitVariables_): number;
        subSet(unit: Internal.Unit_): this;
        pow(other: Internal.Unit_): this;
        sin(): this;
        xor(other: Internal.Unit_): this;
        getBoolean(variables: Internal.UnitVariables_): boolean;
        lte(other: Internal.Unit_): this;
        floor(): this;
        mulSet(unit: Internal.Unit_): this;
        isFixed(): boolean;
        sq(): this;
        or(other: Internal.Unit_): this;
        set(unit: Internal.Unit_): this;
        max(other: Internal.Unit_): this;
        positive(): this;
        gt(other: Internal.Unit_): this;
        abs(): this;
        negate(): this;
        toString(builder: Internal.StringBuilder_): void;
        toString(): string;
        static "EMPTY_ARRAY" : Internal.Unit[];
        get fixed(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Unit_ = Unit;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.ItemEntityJS
    */
    class ItemEntityJS extends Internal.EntityJS {
        getAge(): number;
        setNoDespawn(): void;
        setPickupDelay(ticks: number): void;
        getLifespan(): number;
        getItem(): Internal.ItemStackJS;
        getOwner(): Internal.UUID;
        setOwner(owner: Internal.UUID_): void;
        getThrower(): Internal.UUID;
        getTicksUntilDespawn(): number;
        setTicksUntilDespawn(ticks: number): void;
        setThrower(thrower: Internal.UUID_): void;
        setDefaultPickupDelay(): void;
        setLifespan(lifespan: number): void;
        setItem(item: any): void;
        setNoPickupDelay(): void;
        setAge(age: number): void;
        setInfinitePickupDelay(): void;
        get owner(): Internal.UUID;
        get item(): Internal.ItemStackJS;
        get lifespan(): number;
        get thrower(): Internal.UUID;
        get ticksUntilDespawn(): number;
        get age(): number;
        set owner(owner: Internal.UUID_);
        set pickupDelay(ticks: number);
        set lifespan(lifespan: number);
        set thrower(thrower: Internal.UUID_);
        set ticksUntilDespawn(ticks: number);
        set age(age: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemEntityJS_ = ItemEntityJS;
    /**
    * @javaClass vazkii.botania.api.brew.Brew
    */
    class Brew {
        setNotBloodPendantInfusable(): this;
        canInfuseBloodPendant(): boolean;
        getTranslationKey(arg0: Internal.ItemStack_): string;
        getTranslationKey(): string;
        getManaCost(): number;
        getManaCost(arg0: Internal.ItemStack_): number;
        getPotionEffects(arg0: Internal.ItemStack_): Internal.List<Internal.MobEffectInstance>;
        getColor(arg0: Internal.ItemStack_): number;
        canInfuseIncense(): boolean;
        setNotIncenseInfusable(): this;
        get translationKey(): string;
        get manaCost(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Brew_ = Brew;
    /**
    * @javaClass com.mojang.serialization.Codec$ResultFunction
    */
    interface Codec$ResultFunction <A> {
        apply<T>(arg0: Internal.DynamicOps_<T>, arg1: T, arg2: Internal.DataResult_<com.mojang.datafixers.util.Pair_<A, T>>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        coApply<T>(arg0: Internal.DynamicOps_<T>, arg1: A, arg2: Internal.DataResult_<T>): Internal.DataResult<T>;
    }
    type Codec$ResultFunction_<A> = Codec$ResultFunction<A>;
    /**
    * @javaClass dev.latvian.mods.rhino.NativeJavaObject
    */
    class NativeJavaObject implements Internal.Scriptable, Internal.SymbolScriptable, Internal.Wrapper, Internal.Serializable {
        hasInstance(value: Internal.Scriptable_): boolean;
        setParentScope(m: Internal.Scriptable_): void;
        static canConvert(cx: Internal.Context_, fromObj: any, to: Internal.Class_<any>): boolean;
        getIds(): any[];
        addCustomProperty(name: string, getter: Internal.CustomProperty_): void;
        delete(key: Internal.Symbol_): void;
        delete(name: string): void;
        delete(index: number): void;
        put(index: number, start: Internal.Scriptable_, value: any): void;
        put(name: string, start: Internal.Scriptable_, value: any): void;
        put(symbol: Internal.Symbol_, start: Internal.Scriptable_, value: any): void;
        unwrap(): any;
        getDefaultValue(hint: Internal.Class_<any>): any;
        setPrototype(m: Internal.Scriptable_): void;
        getPrototype(): Internal.Scriptable;
        get(name: string, start: Internal.Scriptable_): any;
        get(index: number, start: Internal.Scriptable_): any;
        get(key: Internal.Symbol_, start: Internal.Scriptable_): any;
        has(index: number, start: Internal.Scriptable_): boolean;
        has(name: string, start: Internal.Scriptable_): boolean;
        has(key: Internal.Symbol_, start: Internal.Scriptable_): boolean;
        getClassName(): string;
        static createInterfaceAdapter(type: Internal.Class_<any>, so: Internal.ScriptableObject_): any;
        getParentScope(): Internal.Scriptable;
        get parentScope(): Internal.Scriptable;
        get ids(): any[];
        get className(): string;
        get prototype(): Internal.Scriptable;
        set parentScope(m: Internal.Scriptable_);
        set prototype(m: Internal.Scriptable_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NativeJavaObject_ = NativeJavaObject;
    /**
    * @javaClass java.lang.invoke.MethodHandleInfo
    */
    interface MethodHandleInfo {
        referenceKindToString(arg0: number): string;
        getReferenceKind(): number;
        getDeclaringClass(): typeof any;
        getName(): string;
        isVarArgs(): boolean;
        getMethodType(): Internal.MethodType;
        reflectAs<T>(arg0: Internal.Class_<T>, arg1: Internal.MethodHandles$Lookup_): T;
        toString(arg0: number, arg1: Internal.Class_<any>, arg2: string, arg3: Internal.MethodType_): string;
        getModifiers(): number;
    }
    type MethodHandleInfo_ = MethodHandleInfo;
    /**
    * @javaClass org.apache.maven.artifact.Artifact
    */
    interface Artifact extends Internal.Comparable<Internal.Artifact> {
        setResolved(arg0: boolean): void;
        setGroupId(arg0: string): void;
        updateVersion(arg0: string, arg1: Internal.ArtifactRepository_): void;
        getMetadataList(): Internal.Collection<Internal.ArtifactMetadata>;
        setArtifactHandler(arg0: Internal.ArtifactHandler_): void;
        getRepository(): Internal.ArtifactRepository;
        hasClassifier(): boolean;
        getDependencyTrail(): Internal.List<string>;
        getId(): string;
        getFile(): Internal.File;
        setDownloadUrl(arg0: string): void;
        getGroupId(): string;
        isRelease(): boolean;
        getArtifactHandler(): Internal.ArtifactHandler;
        setBaseVersion(arg0: string): void;
        getArtifactId(): string;
        setDependencyTrail(arg0: Internal.List_<string>): void;
        getDependencyConflictId(): string;
        isResolved(): boolean;
        getAvailableVersions(): Internal.List<Internal.ArtifactVersion>;
        setDependencyFilter(arg0: Internal.ArtifactFilter_): void;
        getVersion(): string;
        setAvailableVersions(arg0: Internal.List_<Internal.ArtifactVersion_>): void;
        setVersion(arg0: string): void;
        setRepository(arg0: Internal.ArtifactRepository_): void;
        setVersionRange(arg0: Internal.VersionRange_): void;
        getDependencyFilter(): Internal.ArtifactFilter;
        selectVersion(arg0: string): void;
        getBaseVersion(): string;
        isOptional(): boolean;
        addMetadata(arg0: Internal.ArtifactMetadata_): void;
        getVersionRange(): Internal.VersionRange;
        getSelectedVersion(): Internal.ArtifactVersion;
        getClassifier(): string;
        setArtifactId(arg0: string): void;
        getDownloadUrl(): string;
        setFile(arg0: Internal.File_): void;
        getType(): string;
        setResolvedVersion(arg0: string): void;
        isSelectedVersionKnown(): boolean;
        setRelease(arg0: boolean): void;
        isSnapshot(): boolean;
        setScope(arg0: string): void;
        setOptional(arg0: boolean): void;
        getScope(): string;
    }
    type Artifact_ = Artifact;
    /**
    * @javaClass java.awt.PageAttributes$PrintQualityType
    */
    class PageAttributes$PrintQualityType extends Internal.AttributeValue {
        static readonly "HIGH" : Internal.PageAttributes$PrintQualityType;
        static readonly "DRAFT" : Internal.PageAttributes$PrintQualityType;
        static readonly "NORMAL" : Internal.PageAttributes$PrintQualityType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes$PrintQualityType_ = PageAttributes$PrintQualityType;
    /**
    * @javaClass java.util.Locale$LanguageRange
    */
    class Locale$LanguageRange {
        getWeight(): number;
        getRange(): string;
        hashCode(): number;
        equals(arg0: any): boolean;
        static mapEquivalents(arg0: Internal.List_<Internal.Locale$LanguageRange_>, arg1: Internal.Map_<string, Internal.List_<string>>): Internal.List<Internal.Locale$LanguageRange>;
        toString(): string;
        static parse(arg0: string): Internal.List<Internal.Locale$LanguageRange>;
        static parse(arg0: string, arg1: Internal.Map_<string, Internal.List_<string>>): Internal.List<Internal.Locale$LanguageRange>;
        static readonly "MAX_WEIGHT" : 1.0;
        static readonly "MIN_WEIGHT" : 0.0;
        get weight(): number;
        get range(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Locale$LanguageRange_ = Locale$LanguageRange;
    /**
    * @javaClass net.minecraftforge.common.capabilities.CapabilityProvider
    */
    abstract class CapabilityProvider <B> implements Internal.ICapabilityProviderImpl<B> {
        invalidateCaps(): void;
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher_): boolean;
        areCapsCompatible(arg0: Internal.CapabilityProvider_<B>): boolean;
        reviveCaps(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CapabilityProvider_<B> = CapabilityProvider<B>;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.events.BoilerHeaterHandlerEvent$BoilerHeaterCallback
    */
    interface BoilerHeaterHandlerEvent$BoilerHeaterCallback {
        updateHeat(arg0: Internal.BlockContainerJS_): number;
    }
    type BoilerHeaterHandlerEvent$BoilerHeaterCallback_ = ((arg0: Internal.BlockContainerJS) => number) | BoilerHeaterHandlerEvent$BoilerHeaterCallback;
    /**
    * @javaClass com.jozufozu.flywheel.api.Instancer
    */
    interface Instancer <D> {
        notifyRemoval(): void;
        createInstance(): D;
        createInstances(arg0: D[]): void;
        notifyDirty(): void;
        stealInstance(arg0: D): void;
    }
    type Instancer_<D> = Instancer<D>;
    /**
    * @javaClass com.mojang.datafixers.Products$P3
    */
    class Products$P3 <F, T1, T2, T3> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function3_<T1, T2, T3, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function3_<T1, T2, T3, R>>): Internal.App<F, R>;
        and<T4, T5, T6, T7>(arg0: Internal.Products$P4_<F, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T4, T5, T6, T7, T8>(arg0: Internal.Products$P5_<F, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T4>(arg0: Internal.App_<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T4, T5>(arg0: Internal.Products$P2_<F, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T4, T5, T6>(arg0: Internal.Products$P3_<F, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P3_<F, T1, T2, T3> = Products$P3<F, T1, T2, T3>;
    /**
    * @javaClass java.util.OptionalInt
    */
    class OptionalInt {
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: number): number;
        getAsInt(): number;
        orElseThrow<X>(arg0: Internal.Supplier_<X>): number;
        orElseThrow(): number;
        static empty(): this;
        orElseGet(arg0: Internal.IntSupplier_): number;
        stream(): Internal.IntStream;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.IntConsumer_, arg1: Internal.Runnable_): void;
        ifPresent(arg0: Internal.IntConsumer_): void;
        static of(arg0: number): this;
        equals(arg0: any): boolean;
        toString(): string;
        get asInt(): number;
        get present(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OptionalInt_ = OptionalInt;
    /**
    * @javaClass net.minecraft.client.particle.ParticleProvider
    */
    interface ParticleProvider <T> {
    }
    type ParticleProvider_<T> = ParticleProvider<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.chars.Char2ObjectFunction
    */
    interface Char2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<string, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: string, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Char2ShortFunction;
        composeByte(arg0: Internal.Byte2CharFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Char2IntFunction;
        composeReference<T>(arg0: Internal.Reference2CharFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: string, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: string): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Char2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Char2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: string): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Char2LongFunction;
        composeLong(arg0: Internal.Long2CharFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Char2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Char2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: string): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2CharFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2CharFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Char2CharFunction;
        composeObject<T>(arg0: Internal.Object2CharFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, string>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2CharFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Char2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2CharFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2CharFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Char2ObjectFunction_<V> = ((arg0: string) => V) | Char2ObjectFunction<V>;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.blockentity.BlockEntityInstance
    */
    abstract class BlockEntityInstance <T> extends Internal.AbstractInstance {
        getVolume(): Internal.ImmutableBox;
        getInstancePosition(): BlockPos;
        shouldReset(): boolean;
        getWorldPosition(): BlockPos;
        get volume(): Internal.ImmutableBox;
        get worldPosition(): BlockPos;
        get instancePosition(): BlockPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEntityInstance_<T> = BlockEntityInstance<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.RecordItemJS$Builder
    */
    class RecordItemJS$Builder extends Internal.ItemBuilder {
        /**
        */
        song(s: Internal.SoundEvent_): this;
        analogOutput(o: number): this;
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type RecordItemJS$Builder_ = RecordItemJS$Builder;
    /**
    * @javaClass net.minecraft.network.chat.MutableComponent
    */
    interface MutableComponent extends net.minecraft.network.chat.Component, Internal.ComponentKJS {
        component(): net.minecraft.network.chat.Component;
        iterator(): Internal.Iterator<any>;
        hasSiblings(): boolean;
        rawCopy(): this;
        hasStyle(): boolean;
        rawComponent(): this;
    }
    type MutableComponent_ = MutableComponent;
    /**
    * @javaClass java.awt.event.WindowListener
    */
    interface WindowListener extends Internal.EventListener {
        windowDeactivated(arg0: Internal.WindowEvent_): void;
        windowClosed(arg0: Internal.WindowEvent_): void;
        windowOpened(arg0: Internal.WindowEvent_): void;
        windowActivated(arg0: Internal.WindowEvent_): void;
        windowClosing(arg0: Internal.WindowEvent_): void;
        windowDeiconified(arg0: Internal.WindowEvent_): void;
        windowIconified(arg0: Internal.WindowEvent_): void;
    }
    type WindowListener_ = WindowListener;
    /**
    * @javaClass io.netty.channel.ChannelMetadata
    */
    class ChannelMetadata {
        hasDisconnect(): boolean;
        defaultMaxMessagesPerRead(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChannelMetadata_ = ChannelMetadata;
    /**
    * @javaClass com.mojang.datafixers.util.Function14
    */
    interface Function14 <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> {
        curry12(): Internal.Function12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Internal.BiFunction<T13, T14, R>>;
        curry9(): Internal.Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, Internal.Function5<T10, T11, T12, T13, T14, R>>;
        curry13(): Internal.Function13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Internal.Function<T14, R>>;
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14): R;
        curry7(): Internal.Function7<T1, T2, T3, T4, T5, T6, T7, Internal.Function7<T8, T9, T10, T11, T12, T13, T14, R>>;
        curry8(): Internal.Function8<T1, T2, T3, T4, T5, T6, T7, T8, Internal.Function6<T9, T10, T11, T12, T13, T14, R>>;
        curry10(): Internal.Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Internal.Function4<T11, T12, T13, T14, R>>;
        curry11(): Internal.Function11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Internal.Function3<T12, T13, T14, R>>;
        curry(): Internal.Function<T1, Internal.Function13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry5(): Internal.Function5<T1, T2, T3, T4, T5, Internal.Function9<T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry6(): Internal.Function6<T1, T2, T3, T4, T5, T6, Internal.Function8<T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function11<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function10<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function12<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>;
    }
    type Function14_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5, arg5: T6, arg6: T7, arg7: T8, arg8: T9, arg9: T10, arg10: T11, arg11: T12, arg12: T13, arg13: T14) => R) | Function14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>;
    /**
    * @javaClass net.minecraft.client.gui.narration.NarratableEntry
    */
    interface NarratableEntry extends Internal.NarrationSupplier {
    }
    type NarratableEntry_ = NarratableEntry;
    /**
    * @javaClass java.awt.Graphics2D
    */
    abstract class Graphics2D extends Internal.Graphics {
        rotate(arg0: number, arg1: number, arg2: number): void;
        rotate(arg0: number): void;
        getStroke(): Internal.Stroke;
        drawRenderedImage(arg0: Internal.RenderedImage_, arg1: Internal.AffineTransform_): void;
        getRenderingHint(arg0: Internal.RenderingHints$Key_): any;
        getRenderingHints(): Internal.RenderingHints;
        scale(arg0: number, arg1: number): void;
        drawRenderableImage(arg0: Internal.RenderableImage_, arg1: Internal.AffineTransform_): void;
        setBackground(arg0: Internal.Color_): void;
        translate(arg0: number, arg1: number): void;
        drawString(arg0: string, arg1: number, arg2: number): void;
        drawString(arg0: Internal.AttributedCharacterIterator_, arg1: number, arg2: number): void;
        hit(arg0: Internal.Rectangle_, arg1: Internal.Shape_, arg2: boolean): boolean;
        transform(arg0: Internal.AffineTransform_): void;
        getDeviceConfiguration(): Internal.GraphicsConfiguration;
        draw3DRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
        setTransform(arg0: Internal.AffineTransform_): void;
        drawGlyphVector(arg0: Internal.GlyphVector_, arg1: number, arg2: number): void;
        getFontRenderContext(): Internal.FontRenderContext;
        setComposite(arg0: Internal.Composite_): void;
        fill3DRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
        setStroke(arg0: Internal.Stroke_): void;
        getTransform(): Internal.AffineTransform;
        getPaint(): Internal.Paint;
        setPaint(arg0: Internal.Paint_): void;
        setRenderingHint(arg0: Internal.RenderingHints$Key_, arg1: any): void;
        shear(arg0: number, arg1: number): void;
        draw(arg0: Internal.Shape_): void;
        fill(arg0: Internal.Shape_): void;
        getComposite(): Internal.Composite;
        drawImage(arg0: Internal.BufferedImage_, arg1: Internal.BufferedImageOp_, arg2: number, arg3: number): void;
        drawImage(arg0: Internal.Image_, arg1: Internal.AffineTransform_, arg2: Internal.ImageObserver_): boolean;
        setRenderingHints(arg0: Internal.Map_<any, any>): void;
        addRenderingHints(arg0: Internal.Map_<any, any>): void;
        getBackground(): Internal.Color;
        clip(arg0: Internal.Shape_): void;
        get composite(): Internal.Composite;
        get background(): Internal.Color;
        get renderingHints(): Internal.RenderingHints;
        get fontRenderContext(): Internal.FontRenderContext;
        get paint(): Internal.Paint;
        get deviceConfiguration(): Internal.GraphicsConfiguration;
        get stroke(): Internal.Stroke;
        set composite(arg0: Internal.Composite_);
        set background(arg0: Internal.Color_);
        set paint(arg0: Internal.Paint_);
        set stroke(arg0: Internal.Stroke_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Graphics2D_ = Graphics2D;
    /**
    * @javaClass net.minecraftforge.fml.config.IConfigEvent
    */
    interface IConfigEvent {
        reloading(arg0: Internal.ModConfig_): this;
        self<T>(): T;
        loading(arg0: Internal.ModConfig_): this;
        getConfig(): Internal.ModConfig;
    }
    type IConfigEvent_ = (() => Internal.ModConfig) | IConfigEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.IngredientKJS
    */
    interface IngredientKJS extends Internal.AsKJS<Internal.IngredientJS> {
        getItemsKJS(): Internal.ItemStack[];
        asKJS(): Internal.IngredientJS;
    }
    type IngredientKJS_ = (() => Internal.ItemStack[]) | IngredientKJS;
    /**
    * @javaClass net.minecraftforge.client.model.pipeline.IVertexConsumer
    */
    interface IVertexConsumer {
        setQuadOrientation(arg0: Internal.Direction_): void;
        setTexture(arg0: Internal.TextureAtlasSprite_): void;
        setApplyDiffuseLighting(arg0: boolean): void;
        setQuadTint(arg0: number): void;
        getVertexFormat(): Internal.VertexFormat;
        put(arg0: number, ... arg1: number[]): void;
    }
    type IVertexConsumer_ = IVertexConsumer;
    /**
    * @javaClass java.awt.event.MouseListener
    */
    interface MouseListener extends Internal.EventListener {
        mouseReleased(arg0: Internal.MouseEvent_): void;
        mouseExited(arg0: Internal.MouseEvent_): void;
        mouseEntered(arg0: Internal.MouseEvent_): void;
        mouseClicked(arg0: Internal.MouseEvent_): void;
        mousePressed(arg0: Internal.MouseEvent_): void;
    }
    type MouseListener_ = MouseListener;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.FenceBlockBuilder
    */
    class FenceBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FenceBlockBuilder_ = FenceBlockBuilder;
    /**
    * @javaClass com.prunoideae.recipe.BotaniaRecipeJS
    */
    abstract class BotaniaRecipeJS extends Internal.RecipeJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BotaniaRecipeJS_ = BotaniaRecipeJS;
    /**
    * @javaClass net.minecraftforge.network.ICustomPacket
    */
    interface ICustomPacket <T> {
        setName(arg0: ResourceLocation_): void;
        getThis(): T;
        getName(): ResourceLocation;
        getDirection(): Internal.NetworkDirection;
        getIndex(): number;
        setData(arg0: Internal.FriendlyByteBuf_): void;
        setIndex(arg0: number): void;
        getInternalData(): Internal.FriendlyByteBuf;
    }
    type ICustomPacket_<T> = ICustomPacket<T>;
    /**
    * @javaClass java.lang.invoke.TypeDescriptor$OfField
    */
    interface TypeDescriptor$OfField <F> extends Internal.TypeDescriptor {
        componentType(): F;
        arrayType(): F;
        isArray(): boolean;
        isPrimitive(): boolean;
    }
    type TypeDescriptor$OfField_<F> = TypeDescriptor$OfField<F>;
    /**
    * @javaClass io.netty.channel.ChannelHandlerAdapter
    */
    abstract class ChannelHandlerAdapter implements Internal.ChannelHandler {
        exceptionCaught(arg0: Internal.ChannelHandlerContext_, arg1: Internal.Throwable_): void;
        handlerAdded(arg0: Internal.ChannelHandlerContext_): void;
        isSharable(): boolean;
        handlerRemoved(arg0: Internal.ChannelHandlerContext_): void;
        get sharable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChannelHandlerAdapter_ = ChannelHandlerAdapter;
    /**
    * @javaClass java.awt.color.ColorSpace
    */
    abstract class ColorSpace implements Internal.Serializable {
        fromRGB(arg0: number[]): number[];
        getMinValue(arg0: number): number;
        toCIEXYZ(arg0: number[]): number[];
        isCS_sRGB(): boolean;
        getName(arg0: number): string;
        fromCIEXYZ(arg0: number[]): number[];
        toRGB(arg0: number[]): number[];
        getNumComponents(): number;
        getType(): number;
        getMaxValue(arg0: number): number;
        static getInstance(arg0: number): this;
        static readonly "TYPE_ECLR" : 24;
        static readonly "TYPE_Lab" : 1;
        static readonly "TYPE_Luv" : 2;
        static readonly "TYPE_RGB" : 5;
        static readonly "TYPE_GRAY" : 6;
        static readonly "TYPE_CMY" : 11;
        static readonly "TYPE_CCLR" : 22;
        static readonly "TYPE_ACLR" : 20;
        static readonly "TYPE_HSV" : 7;
        static readonly "TYPE_YCbCr" : 3;
        static readonly "TYPE_7CLR" : 17;
        static readonly "CS_LINEAR_RGB" : 1004;
        static readonly "TYPE_9CLR" : 19;
        static readonly "TYPE_5CLR" : 15;
        static readonly "CS_sRGB" : 1000;
        static readonly "TYPE_3CLR" : 13;
        static readonly "CS_PYCC" : 1002;
        static readonly "TYPE_XYZ" : 0;
        static readonly "TYPE_FCLR" : 25;
        static readonly "TYPE_DCLR" : 23;
        static readonly "TYPE_HLS" : 8;
        static readonly "TYPE_CMYK" : 9;
        static readonly "TYPE_BCLR" : 21;
        static readonly "CS_GRAY" : 1003;
        static readonly "TYPE_8CLR" : 18;
        static readonly "TYPE_6CLR" : 16;
        static readonly "TYPE_4CLR" : 14;
        static readonly "TYPE_Yxy" : 4;
        static readonly "TYPE_2CLR" : 12;
        static readonly "CS_CIEXYZ" : 1001;
        get cS_sRGB(): boolean;
        get type(): number;
        get numComponents(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ColorSpace_ = ColorSpace;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeMobEffectInstance
    */
    interface IForgeMobEffectInstance {
        writeCurativeItems(arg0: Internal.CompoundTag_): void;
        addCurativeItem(arg0: Internal.ItemStack_): void;
        setCurativeItems(arg0: Internal.List_<Internal.ItemStack_>): void;
        isCurativeItem(arg0: Internal.ItemStack_): boolean;
        getCurativeItems(): Internal.List<Internal.ItemStack>;
    }
    type IForgeMobEffectInstance_ = IForgeMobEffectInstance;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.QuestObjectType
    */
    class QuestObjectType extends Internal.Enum<Internal.QuestObjectType> implements Internal.Predicate<Internal.QuestObjectBase> {
        test(object: Internal.QuestObjectBase_): boolean;
        static valueOf(name: string): this;
        static values(): Internal.QuestObjectType[];
        getColor(): Internal.ChatFormatting;
        static readonly "TASK" : Internal.QuestObjectType;
        static readonly "ALL_PROGRESSING_OR_NULL" : ((arg0: Internal.QuestObjectBase) => boolean);
        static readonly "NULL" : Internal.QuestObjectType;
        readonly "translationKey" : string;
        static readonly "NAME_MAP" : Internal.NameMap<Internal.QuestObjectType>;
        static readonly "REWARD" : Internal.QuestObjectType;
        static readonly "ALL_PROGRESSING" : ((arg0: Internal.QuestObjectBase) => boolean);
        static readonly "CHAPTER" : Internal.QuestObjectType;
        static readonly "CHAPTER_GROUP" : Internal.QuestObjectType;
        readonly "id" : string;
        static readonly "FILE" : Internal.QuestObjectType;
        static readonly "REWARD_TABLE" : Internal.QuestObjectType;
        static readonly "QUEST" : Internal.QuestObjectType;
        get color(): Internal.ChatFormatting;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type QuestObjectType_ = "reward" | "chapter" | "chapter_group" | "file" | "task" | "null" | "reward_table" | "quest" | QuestObjectType;
    /**
    * @javaClass com.mojang.serialization.ListBuilder
    */
    interface ListBuilder <T> {
        withErrorsFrom(arg0: Internal.DataResult_<any>): Internal.ListBuilder<T>;
        add(arg0: Internal.DataResult_<T>): Internal.ListBuilder<T>;
        add(arg0: T): Internal.ListBuilder<T>;
        add<E>(arg0: E, arg1: Internal.Encoder_<E>): Internal.ListBuilder<T>;
        mapError(arg0: Internal.UnaryOperator_<string>): Internal.ListBuilder<T>;
        ops(): Internal.DynamicOps<T>;
        build(arg0: T): Internal.DataResult<T>;
        build(arg0: Internal.DataResult_<T>): Internal.DataResult<T>;
        addAll<E>(arg0: Internal.Iterable_<E>, arg1: Internal.Encoder_<E>): Internal.ListBuilder<T>;
    }
    type ListBuilder_<T> = ListBuilder<T>;
    /**
    * @javaClass net.minecraft.core.Registry
    */
    abstract class Registry <T> implements Internal.Keyable, Internal.IdMap<T>, Internal.ForgeAccessorRegistry {
        keys<U>(arg0: Internal.DynamicOps_<U>): Internal.Stream<U>;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Registry_<T> = Registry<T>;
    /**
    * @javaClass net.minecraftforge.client.EffectRenderer
    */
    abstract class EffectRenderer {
        renderInventoryEffect(arg0: Internal.MobEffectInstance_, arg1: Internal.EffectRenderingInventoryScreen_<any>, arg2: Internal.PoseStack_, arg3: number, arg4: number, arg5: number): void;
        shouldRenderHUD(arg0: Internal.MobEffectInstance_): boolean;
        shouldRender(arg0: Internal.MobEffectInstance_): boolean;
        shouldRenderInvText(arg0: Internal.MobEffectInstance_): boolean;
        renderHUDEffect(arg0: Internal.MobEffectInstance_, arg1: Internal.GuiComponent_, arg2: Internal.PoseStack_, arg3: number, arg4: number, arg5: number, arg6: number): void;
        static readonly "DUMMY" : Internal.EffectRenderer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EffectRenderer_ = EffectRenderer;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.BasicMobEffect$Builder
    */
    class BasicMobEffect$Builder extends Internal.MobEffectBuilder {
        createObject(): Internal.MobEffect;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BasicMobEffect$Builder_ = BasicMobEffect$Builder;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.MapJS
    */
    class MapJS extends Internal.LinkedHashMap<string, any> implements Internal.StringBuilderAppendable, Internal.ChangeListener<any>, Internal.Copyable, Internal.JsonSerializable, Internal.NBTSerializable {
        static nbt(map: any): Internal.CompoundTag;
        appendString(builder: Internal.StringBuilder_): void;
        onChanged(o: any): void;
        containsAll(other: Internal.MapJS_): boolean;
        containsAny(other: Internal.MapJS_): boolean;
        clear(): void;
        put(key: string, value: any): any;
        remove(key: any): any;
        toJson(): Internal.JsonObject;
        toNBT(): Internal.CompoundTag;
        getOrNewList(id: string): Internal.ListJS;
        getOrNewMap(id: string): this;
        putAll(m: Internal.Map_<string, any>): void;
        static of(o: any): this;
        static json(map: any): Internal.JsonObject;
        getLength(): number;
        toString(): string;
        copy(): this;
        "changeListener" : ((arg0: Internal.MapJS) => void);
        get length(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MapJS_ = MapJS;
    /**
    * @javaClass net.minecraft.world.level.biome.MobSpawnSettings$Builder
    */
    class MobSpawnSettings$Builder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobSpawnSettings$Builder_ = MobSpawnSettings$Builder;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyReleasedEvent$Post
    */
    class ScreenEvent$KeyboardKeyReleasedEvent$Post extends Internal.ScreenEvent$KeyboardKeyReleasedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyReleasedEvent$Post_ = ScreenEvent$KeyboardKeyReleasedEvent$Post;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingConversionEvent$Pre
    */
    class LivingConversionEvent$Pre extends Internal.LivingConversionEvent {
        setConversionTimer(arg0: number): void;
        getListenerList(): Internal.ListenerList;
        getOutcome(): Internal.EntityType<Internal.LivingEntity>;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get outcome(): Internal.EntityType<Internal.LivingEntity>;
        set conversionTimer(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingConversionEvent$Pre_ = LivingConversionEvent$Pre;
    /**
    * @javaClass com.google.gson.JsonArray
    */
    class JsonArray extends Internal.JsonElement implements Internal.Iterable<Internal.JsonElement> {
        getAsFloat(): number;
        getAsBigInteger(): Internal.BigInteger;
        add(arg0: string): void;
        add(arg0: Internal.Number_): void;
        add(arg0: Internal.JsonElement_): void;
        add(arg0: boolean): void;
        getAsByte(): number;
        set(arg0: number, arg1: Internal.JsonElement_): Internal.JsonElement;
        getAsBigDecimal(): Internal.BigDecimal;
        getAsNumber(): Internal.Number;
        getAsCharacter(): string;
        isEmpty(): boolean;
        getAsString(): string;
        getAsDouble(): number;
        getAsInt(): number;
        remove(arg0: number): Internal.JsonElement;
        remove(arg0: Internal.JsonElement_): boolean;
        deepCopy(): this;
        getAsLong(): number;
        contains(arg0: Internal.JsonElement_): boolean;
        iterator(): Internal.Iterator<Internal.JsonElement>;
        size(): number;
        addAll(arg0: Internal.JsonArray_): void;
        getAsBoolean(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        get(arg0: number): Internal.JsonElement;
        getAsShort(): number;
        get asByte(): number;
        get asBigInteger(): Internal.BigInteger;
        get asCharacter(): string;
        get asNumber(): Internal.Number;
        get asBigDecimal(): Internal.BigDecimal;
        get asFloat(): number;
        get empty(): boolean;
        get asLong(): number;
        get asInt(): number;
        get asShort(): number;
        get asDouble(): number;
        get asString(): string;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonArray_ = JsonArray;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntCollection
    */
    interface IntCollection extends Internal.Collection<number>, Internal.IntIterable {
        add(arg0: number): boolean;
        spliterator(): Internal.IntSpliterator;
        containsAll(arg0: Internal.IntCollection_): boolean;
        intIterator(): Internal.IntIterator;
        intSpliterator(): Internal.IntSpliterator;
        remove(arg0: any): boolean;
        removeIf(arg0: Internal.Predicate_<number>): boolean;
        removeIf(arg0: Internal.IntPredicate_): boolean;
        removeIf(arg0: it.unimi.dsi.fastutil.ints.IntPredicate_): boolean;
        intStream(): Internal.IntStream;
        removeAll(arg0: Internal.IntCollection_): boolean;
        contains(arg0: any): boolean;
        contains(arg0: number): boolean;
        iterator(): Internal.IntIterator;
        addAll(arg0: Internal.IntCollection_): boolean;
        stream(): Internal.Stream<number>;
        toIntArray(arg0: number[]): number[];
        toIntArray(): number[];
        toArray(arg0: number[]): number[];
        parallelStream(): Internal.Stream<number>;
        rem(arg0: number): boolean;
        intParallelStream(): Internal.IntStream;
        retainAll(arg0: Internal.IntCollection_): boolean;
    }
    type IntCollection_ = IntCollection;
    /**
    * @javaClass net.minecraft.world.effect.MobEffect
    */
    class MobEffect extends Internal.ForgeRegistryEntry<Internal.MobEffect> implements Internal.IForgeMobEffect, Internal.AccessorMobEffect {
        initializeClient(arg0: Internal.Consumer_<Internal.EffectRenderer_>): void;
        getEffectRendererInternal(): any;
        get effectRendererInternal(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobEffect_ = Special.MobEffect | MobEffect;
    /**
    * @javaClass io.netty.util.concurrent.ProgressivePromise
    */
    interface ProgressivePromise <V> extends Internal.Promise<V>, Internal.ProgressiveFuture<V> {
        setFailure(arg0: Internal.Throwable_): Internal.ProgressivePromise<V>;
        setSuccess(arg0: V): Internal.ProgressivePromise<V>;
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.ProgressivePromise<V>;
        tryProgress(arg0: number, arg1: number): boolean;
        syncUninterruptibly(): Internal.ProgressivePromise<V>;
        setProgress(arg0: number, arg1: number): Internal.ProgressivePromise<V>;
        await(): Internal.ProgressivePromise<V>;
        awaitUninterruptibly(): Internal.ProgressivePromise<V>;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.ProgressivePromise<V>;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.ProgressivePromise<V>;
        sync(): Internal.ProgressivePromise<V>;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.ProgressivePromise<V>;
    }
    type ProgressivePromise_<V> = ProgressivePromise<V>;
    /**
    * @javaClass io.netty.util.concurrent.OrderedEventExecutor
    */
    interface OrderedEventExecutor extends Internal.EventExecutor {
    }
    type OrderedEventExecutor_ = OrderedEventExecutor;
    /**
    * @javaClass com.electronwill.nightconfig.core.Config$Entry
    */
    interface Config$Entry extends Internal.UnmodifiableConfig$Entry {
        setValue<T>(arg0: any): T;
    }
    type Config$Entry_ = ((arg0: any) => any) | Config$Entry;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2IntFunction
    */
    interface Boolean2IntFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2IntFunction;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2IntFunction;
    }
    type Boolean2IntFunction_ = ((arg0: boolean) => number) | Boolean2IntFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.ScrollBar$Plane
    */
    class ScrollBar$Plane extends Internal.Enum<Internal.ScrollBar$Plane> {
        static valueOf(name: string): this;
        static values(): Internal.ScrollBar$Plane[];
        static readonly "VERTICAL" : Internal.ScrollBar$Plane;
        readonly "isVertical" : boolean;
        static readonly "HORIZONTAL" : Internal.ScrollBar$Plane;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScrollBar$Plane_ = "horizontal" | "vertical" | ScrollBar$Plane;
    /**
    * @javaClass net.minecraft.client.gui.screens.inventory.EffectRenderingInventoryScreen
    */
    abstract class EffectRenderingInventoryScreen <T> extends Internal.AbstractContainerScreen<T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EffectRenderingInventoryScreen_<T> = EffectRenderingInventoryScreen<T>;
    /**
    * @javaClass net.minecraftforge.fml.config.ConfigFileTypeHandler
    */
    class ConfigFileTypeHandler {
        reader(arg0: Internal.Path_): Internal.Function<Internal.ModConfig, Internal.CommentedFileConfig>;
        static backUpConfig(arg0: Internal.CommentedFileConfig_): void;
        static backUpConfig(arg0: Internal.CommentedFileConfig_, arg1: number): void;
        unload(arg0: Internal.Path_, arg1: Internal.ModConfig_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfigFileTypeHandler_ = ConfigFileTypeHandler;
    /**
    * @javaClass net.minecraft.world.level.biome.Biome
    */
    class Biome extends Internal.ForgeRegistryEntry$UncheckedRegistryEntry<Internal.Biome> implements Internal.AccessorBiome {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Biome_ = Special.Biome | Biome;
    /**
    * @javaClass net.minecraft.client.multiplayer.ClientLevel
    */
    class ClientLevel extends Internal.Level implements Internal.ClientLevelExtension {
        toString(): string;
        getPartEntities(): Internal.Collection<Internal.PartEntity<any>>;
        flywheel$getAllLoadedEntities(): Internal.Iterable;
        get partEntities(): Internal.Collection<Internal.PartEntity<any>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientLevel_ = ClientLevel;
    /**
    * @javaClass net.minecraft.core.particles.ParticleOptions$Deserializer
    */
    interface ParticleOptions$Deserializer <T> {
    }
    type ParticleOptions$Deserializer_<T> = ParticleOptions$Deserializer<T>;
    /**
    * @javaClass java.util.PrimitiveIterator$OfInt
    */
    interface PrimitiveIterator$OfInt extends Internal.PrimitiveIterator<number, Internal.IntConsumer> {
        next(): number;
        nextInt(): number;
        forEachRemaining(arg0: Internal.IntConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type PrimitiveIterator$OfInt_ = (() => number) | PrimitiveIterator$OfInt;
    /**
    * @javaClass vazkii.botania.mixin.AccessorItemEntity
    */
    interface AccessorItemEntity {
        getPickupDelay(): number;
        setAge(arg0: number): void;
    }
    type AccessorItemEntity_ = AccessorItemEntity;
    /**
    * @javaClass java.awt.image.BufferedImage
    */
    class BufferedImage extends Internal.Image implements Internal.WritableRenderedImage, Internal.Transparency {
        getMinTileX(): number;
        getMinTileY(): number;
        getTileWidth(): number;
        isTileWritable(arg0: number, arg1: number): boolean;
        setRGB(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: number, arg6: number): void;
        setRGB(arg0: number, arg1: number, arg2: number): void;
        getNumYTiles(): number;
        coerceData(arg0: boolean): void;
        getWidth(arg0: Internal.ImageObserver_): number;
        getWidth(): number;
        getSources(): Internal.Vector<Internal.RenderedImage>;
        addTileObserver(arg0: Internal.TileObserver_): void;
        getTileGridXOffset(): number;
        getWritableTileIndices(): Internal.Point[];
        getSampleModel(): Internal.SampleModel;
        getHeight(): number;
        getHeight(arg0: Internal.ImageObserver_): number;
        getWritableTile(arg0: number, arg1: number): Internal.WritableRaster;
        removeTileObserver(arg0: Internal.TileObserver_): void;
        getPropertyNames(): string[];
        createGraphics(): Internal.Graphics2D;
        getGraphics(): Internal.Graphics;
        getNumXTiles(): number;
        getData(): Internal.Raster;
        getData(arg0: Internal.Rectangle_): Internal.Raster;
        getAlphaRaster(): Internal.WritableRaster;
        getRaster(): Internal.WritableRaster;
        getRGB(arg0: number, arg1: number): number;
        getRGB(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number[], arg5: number, arg6: number): number[];
        getTileHeight(): number;
        getSubimage(arg0: number, arg1: number, arg2: number, arg3: number): this;
        getTile(arg0: number, arg1: number): Internal.Raster;
        getColorModel(): Internal.ColorModel;
        getProperty(arg0: string): any;
        getProperty(arg0: string, arg1: Internal.ImageObserver_): any;
        setData(arg0: Internal.Raster_): void;
        hasTileWriters(): boolean;
        isAlphaPremultiplied(): boolean;
        copyData(arg0: Internal.WritableRaster_): Internal.WritableRaster;
        getTransparency(): number;
        getTileGridYOffset(): number;
        getType(): number;
        getSource(): Internal.ImageProducer;
        toString(): string;
        releaseWritableTile(arg0: number, arg1: number): void;
        getMinX(): number;
        getMinY(): number;
        static readonly "TYPE_3BYTE_BGR" : 5;
        static readonly "TYPE_USHORT_565_RGB" : 8;
        static readonly "TYPE_INT_ARGB_PRE" : 3;
        static readonly "TYPE_USHORT_555_RGB" : 9;
        static readonly "TYPE_USHORT_GRAY" : 11;
        static readonly "TYPE_BYTE_INDEXED" : 13;
        static readonly "TYPE_4BYTE_ABGR" : 6;
        static readonly "TYPE_INT_ARGB" : 2;
        static readonly "TYPE_CUSTOM" : 0;
        static readonly "TYPE_INT_RGB" : 1;
        static readonly "TYPE_INT_BGR" : 4;
        static readonly "TYPE_BYTE_GRAY" : 10;
        static readonly "TYPE_4BYTE_ABGR_PRE" : 7;
        static readonly "TYPE_BYTE_BINARY" : 12;
        get numXTiles(): number;
        get sources(): Internal.Vector<Internal.RenderedImage>;
        get data(): Internal.Raster;
        get alphaPremultiplied(): boolean;
        get graphics(): Internal.Graphics;
        get source(): Internal.ImageProducer;
        get type(): number;
        get colorModel(): Internal.ColorModel;
        get tileGridXOffset(): number;
        get writableTileIndices(): Internal.Point[];
        get height(): number;
        get raster(): Internal.WritableRaster;
        get tileGridYOffset(): number;
        get tileWidth(): number;
        get minTileX(): number;
        get minTileY(): number;
        get minY(): number;
        get minX(): number;
        get propertyNames(): string[];
        get transparency(): number;
        get width(): number;
        get numYTiles(): number;
        get sampleModel(): Internal.SampleModel;
        get alphaRaster(): Internal.WritableRaster;
        get tileHeight(): number;
        set data(arg0: Internal.Raster_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferedImage_ = BufferedImage;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.LongConfig
    */
    class LongConfig extends Internal.NumberConfig<number> {
        addInfo(list: Internal.TooltipList_): void;
        parse(callback: Internal.Consumer_<number>, string: string): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LongConfig_ = LongConfig;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseClickedEvent$Post
    */
    class ScreenEvent$MouseClickedEvent$Post extends Internal.ScreenEvent$MouseClickedEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        wasHandled(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseClickedEvent$Post_ = ScreenEvent$MouseClickedEvent$Post;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenOpenEvent
    */
    class ScreenOpenEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        setScreen(arg0: Internal.Screen_): void;
        getScreen(): Internal.Screen;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get screen(): Internal.Screen;
        set screen(arg0: Internal.Screen_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenOpenEvent_ = ScreenOpenEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingSetAttackTargetEvent
    */
    class LivingSetAttackTargetEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getTarget(): Internal.LivingEntity;
        get listenerList(): Internal.ListenerList;
        get target(): Internal.LivingEntity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingSetAttackTargetEvent_ = LivingSetAttackTargetEvent;
    /**
    * @javaClass net.minecraft.world.phys.shapes.VoxelShape
    */
    abstract class VoxelShape {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VoxelShape_ = VoxelShape;
    /**
    * @javaClass net.minecraft.world.level.block.SoundType
    */
    class SoundType implements Internal.AccessorSoundType {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundType_ = SoundType;
    /**
    * @javaClass java.lang.module.ModuleReference
    */
    abstract class ModuleReference {
        location(): Internal.Optional<Internal.URI>;
        descriptor(): Internal.ModuleDescriptor;
        open(): Internal.ModuleReader;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleReference_ = ModuleReference;
    /**
    * Fired when player clicked a non-air, non-fluid block.
    *
    * This event is called only once.
    * @javaClass dev.latvian.mods.kubejs.block.BlockLeftClickEventJS
    */
    class BlockLeftClickEventJS extends Internal.PlayerEventJS {
        getBlock(): Internal.BlockContainerJS;
        getItem(): Internal.ItemStackJS;
        getFacing(): Internal.Direction;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get facing(): Internal.Direction;
        get block(): Internal.BlockContainerJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when player clicked a non-air, non-fluid block.
    *
    * This event is called only once.
    */
    type BlockLeftClickEventJS_ = BlockLeftClickEventJS;
    /**
    * @javaClass java.awt.GraphicsDevice$WindowTranslucency
    */
    class GraphicsDevice$WindowTranslucency extends Internal.Enum<Internal.GraphicsDevice$WindowTranslucency> {
        static valueOf(arg0: string): this;
        static values(): Internal.GraphicsDevice$WindowTranslucency[];
        static readonly "PERPIXEL_TRANSPARENT" : Internal.GraphicsDevice$WindowTranslucency;
        static readonly "TRANSLUCENT" : Internal.GraphicsDevice$WindowTranslucency;
        static readonly "PERPIXEL_TRANSLUCENT" : Internal.GraphicsDevice$WindowTranslucency;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GraphicsDevice$WindowTranslucency_ = "perpixel_transparent" | "translucent" | "perpixel_translucent" | GraphicsDevice$WindowTranslucency;
    /**
    * @javaClass dev.latvian.mods.unit.token.CharStream
    */
    class CharStream {
        next(): string;
        nextIf(match: string): boolean;
        peek(ahead: number): string;
        peek(): string;
        "position" : number;
        readonly "chars" : string[];
        "skipWhitespace" : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CharStream_ = CharStream;
    /**
    * @javaClass net.minecraftforge.client.event.InputEvent$KeyInputEvent
    */
    class InputEvent$KeyInputEvent extends net.minecraftforge.client.event.InputEvent {
        getKey(): number;
        getListenerList(): Internal.ListenerList;
        getAction(): number;
        getModifiers(): number;
        getScanCode(): number;
        get listenerList(): Internal.ListenerList;
        get action(): number;
        get modifiers(): number;
        get key(): number;
        get scanCode(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent$KeyInputEvent_ = InputEvent$KeyInputEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.ConstProperties
    */
    interface ConstProperties {
        defineConst(arg0: string, arg1: Internal.Scriptable_): void;
        isConst(arg0: string): boolean;
        putConst(arg0: string, arg1: Internal.Scriptable_, arg2: any): void;
    }
    type ConstProperties_ = ConstProperties;
    /**
    * @javaClass net.minecraft.client.gui.screens.inventory.MenuAccess
    */
    interface MenuAccess <T> {
    }
    type MenuAccess_<T> = MenuAccess<T>;
    /**
    * @javaClass io.netty.util.Constant
    */
    interface Constant <T> extends Internal.Comparable<T> {
        name(): string;
        id(): number;
    }
    type Constant_<T> = Constant<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.MessageSender
    */
    interface MessageSender {
        setStatusMessage(message: net.minecraft.network.chat.Component_): void;
        getName(): net.minecraft.network.chat.Component;
        getDisplayName(): net.minecraft.network.chat.Component;
        tell(arg0: net.minecraft.network.chat.Component_): void;
        runCommand(arg0: string): number;
        runCommandSilent(command: string): number;
    }
    type MessageSender_ = MessageSender;
    /**
    * @javaClass java.awt.dnd.DragGestureListener
    */
    interface DragGestureListener extends Internal.EventListener {
        dragGestureRecognized(arg0: Internal.DragGestureEvent_): void;
    }
    type DragGestureListener_ = ((arg0: Internal.DragGestureEvent) => void) | DragGestureListener;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingHurtEvent
    */
    class LivingHurtEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getSource(): Internal.DamageSource;
        isCancelable(): boolean;
        setAmount(arg0: number): void;
        getAmount(): number;
        get amount(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get source(): Internal.DamageSource;
        set amount(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingHurtEvent_ = LivingHurtEvent;
    /**
    * Fired when you need to add some datapack json to the server.
    *
    * Low priority event is fired first, as they will be overriden later.
    *
    * And vise versa for high priority events.
    * @javaClass dev.latvian.mods.kubejs.script.data.DataPackEventJS
    */
    class DataPackEventJS extends Internal.ServerEventJS {
        add(id: ResourceLocation_, content: string): void;
        addJson(id: ResourceLocation_, json: Internal.JsonElement_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to add some datapack json to the server.
    *
    * Low priority event is fired first, as they will be overriden later.
    *
    * And vise versa for high priority events.
    */
    type DataPackEventJS_ = DataPackEventJS;
    /**
    * @javaClass net.minecraft.client.model.ArmedModel
    */
    interface ArmedModel {
    }
    type ArmedModel_ = ArmedModel;
    /**
    * @javaClass net.minecraftforge.server.permission.events.PermissionGatherEvent
    */
    class PermissionGatherEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionGatherEvent_ = PermissionGatherEvent;
    /**
    * @javaClass java.nio.file.DirectoryStream
    */
    interface DirectoryStream <T> extends Internal.Closeable, Internal.Iterable<T> {
        iterator(): Internal.Iterator<T>;
    }
    type DirectoryStream_<T> = (() => Internal.Iterator<T>) | DirectoryStream<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2ShortFunction
    */
    interface Boolean2ShortFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2ShortFunction;
    }
    type Boolean2ShortFunction_ = ((arg0: boolean) => number) | Boolean2ShortFunction;
    /**
    * @javaClass java.lang.Package
    */
    class Package extends Internal.NamedPackage implements Internal.AnnotatedElement {
        isSealed(arg0: Internal.URL_): boolean;
        isSealed(): boolean;
        static getPackage(arg0: string): this;
        getName(): string;
        isAnnotationPresent(arg0: Internal.Class_<Internal.Annotation_>): boolean;
        getSpecificationTitle(): string;
        getImplementationTitle(): string;
        isCompatibleWith(arg0: string): boolean;
        getAnnotations(): Internal.Annotation[];
        getSpecificationVendor(): string;
        getDeclaredAnnotations(): Internal.Annotation[];
        getAnnotationsByType<A>(arg0: Internal.Class_<A>): A[];
        getDeclaredAnnotationsByType<A>(arg0: Internal.Class_<A>): A[];
        getAnnotation<A>(arg0: Internal.Class_<A>): A;
        hashCode(): number;
        static getPackages(): Internal.Package[];
        getDeclaredAnnotation<A>(arg0: Internal.Class_<A>): A;
        toString(): string;
        getSpecificationVersion(): string;
        getImplementationVendor(): string;
        getImplementationVersion(): string;
        get specificationVendor(): string;
        get declaredAnnotations(): Internal.Annotation[];
        get specificationTitle(): string;
        get implementationVersion(): string;
        get sealed(): boolean;
        get name(): string;
        get implementationVendor(): string;
        get annotations(): Internal.Annotation[];
        get implementationTitle(): string;
        get packages(): Internal.Package[];
        get specificationVersion(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Package_ = Package;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2ObjectFunction
    */
    interface Byte2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Byte2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Byte2ObjectFunction_<V> = ((arg0: number) => V) | Byte2ObjectFunction<V>;
    /**
    * @javaClass com.electronwill.nightconfig.core.ConfigFormat
    */
    interface ConfigFormat <C> {
        supportsType(arg0: Internal.Class_<any>): boolean;
        createWriter(): Internal.ConfigWriter;
        initEmptyFile(arg0: Internal.WriterSupplier_): void;
        initEmptyFile(arg0: Internal.Path_): void;
        initEmptyFile(arg0: Internal.File_): void;
        supportsComments(): boolean;
        isInMemory(): boolean;
        createConfig(): C;
        createConfig(arg0: Internal.Supplier_<Internal.Map_<string, any>>): C;
        createParser(): Internal.ConfigParser<C>;
        createConcurrentConfig(): C;
    }
    type ConfigFormat_<C> = ConfigFormat<C>;
    /**
    * @javaClass org.apache.maven.artifact.repository.ArtifactRepositoryPolicy
    */
    class ArtifactRepositoryPolicy {
        setEnabled(arg0: boolean): void;
        setUpdatePolicy(arg0: string): void;
        isEnabled(): boolean;
        merge(arg0: Internal.ArtifactRepositoryPolicy_): void;
        getChecksumPolicy(): string;
        toString(): string;
        checkOutOfDate(arg0: Internal.Date_): boolean;
        getUpdatePolicy(): string;
        setChecksumPolicy(arg0: string): void;
        static readonly "CHECKSUM_POLICY_IGNORE" : "ignore";
        static readonly "UPDATE_POLICY_DAILY" : "daily";
        static readonly "CHECKSUM_POLICY_FAIL" : "fail";
        static readonly "UPDATE_POLICY_NEVER" : "never";
        static readonly "CHECKSUM_POLICY_WARN" : "warn";
        static readonly "UPDATE_POLICY_INTERVAL" : "interval";
        static readonly "UPDATE_POLICY_ALWAYS" : "always";
        get updatePolicy(): string;
        get enabled(): boolean;
        get checksumPolicy(): string;
        set updatePolicy(arg0: string);
        set enabled(arg0: boolean);
        set checksumPolicy(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArtifactRepositoryPolicy_ = ArtifactRepositoryPolicy;
    /**
    * @javaClass java.util.UUID
    */
    class UUID implements Internal.Serializable, Internal.Comparable<Internal.UUID> {
        static nameUUIDFromBytes(arg0: number[]): this;
        compareTo(arg0: Internal.UUID_): number;
        getLeastSignificantBits(): number;
        version(): number;
        node(): number;
        getMostSignificantBits(): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        variant(): number;
        static randomUUID(): this;
        toString(): string;
        static fromString(arg0: string): this;
        clockSequence(): number;
        timestamp(): number;
        get mostSignificantBits(): number;
        get leastSignificantBits(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UUID_ = UUID;
    /**
    * @javaClass java.nio.ShortBuffer
    */
    abstract class ShortBuffer extends Internal.Buffer implements Internal.Comparable<Internal.ShortBuffer> {
        hasArray(): boolean;
        compact(): this;
        clear(): this;
        duplicate(): this;
        compareTo(arg0: Internal.ShortBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.ShortBuffer_, arg2: number, arg3: number): this;
        put(arg0: Internal.ShortBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        mismatch(arg0: Internal.ShortBuffer_): number;
        equals(arg0: any): boolean;
        get(): number;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        reset(): this;
        arrayOffset(): number;
        toString(): string;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        static wrap(arg0: number[]): this;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        mark(): this;
        order(): Internal.ByteOrder;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShortBuffer_ = ShortBuffer;
    /**
    * @javaClass net.minecraft.sounds.SoundEvent
    */
    class SoundEvent extends Internal.ForgeRegistryEntry<Internal.SoundEvent> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundEvent_ = Special.SoundEvent | SoundEvent;
    /**
    * @javaClass com.google.common.collect.ForwardingMultimap
    */
    abstract class ForwardingMultimap <K, V> extends Internal.ForwardingObject implements Internal.Multimap<K, V> {
        containsEntry(arg0: any, arg1: any): boolean;
        asMap(): Internal.Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        containsKey(arg0: any): boolean;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        clear(): void;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.Collection<V>;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: any, arg1: any): boolean;
        removeAll(arg0: any): Internal.Collection<V>;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Multimap_<K, V>): boolean;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): boolean;
        equals(arg0: any): boolean;
        get(arg0: K): Internal.Collection<V>;
        keySet(): Internal.Set<K>;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForwardingMultimap_<K, V> = ForwardingMultimap<K, V>;
    /**
    * @javaClass java.awt.dnd.DragGestureEvent
    */
    class DragGestureEvent extends Internal.EventObject {
        getSourceAsDragGestureRecognizer(): Internal.DragGestureRecognizer;
        getDragAction(): number;
        iterator(): Internal.Iterator<Internal.InputEvent>;
        getTriggerEvent(): Internal.InputEvent;
        getDragOrigin(): Internal.Point;
        getDragSource(): Internal.DragSource;
        startDrag(arg0: Internal.Cursor_, arg1: Internal.Image_, arg2: Internal.Point_, arg3: Internal.Transferable_, arg4: Internal.DragSourceListener_): void;
        startDrag(arg0: Internal.Cursor_, arg1: Internal.Transferable_, arg2: Internal.DragSourceListener_): void;
        startDrag(arg0: Internal.Cursor_, arg1: Internal.Transferable_): void;
        toArray(arg0: any[]): any[];
        toArray(): any[];
        getComponent(): Internal.Component;
        get component(): Internal.Component;
        get sourceAsDragGestureRecognizer(): Internal.DragGestureRecognizer;
        get triggerEvent(): Internal.InputEvent;
        get dragAction(): number;
        get dragSource(): Internal.DragSource;
        get dragOrigin(): Internal.Point;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragGestureEvent_ = DragGestureEvent;
    /**
    * @javaClass net.minecraftforge.event.world.WorldEvent$Load
    */
    class WorldEvent$Load extends Internal.WorldEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WorldEvent$Load_ = WorldEvent$Load;
    /**
    * @javaClass java.util.function.BiFunction
    */
    interface BiFunction <T, U, R> {
        apply(arg0: T, arg1: U): R;
        andThen<V>(arg0: Internal.Function_<R, V>): Internal.BiFunction<T, U, V>;
    }
    type BiFunction_<T, U, R> = ((arg0: T, arg1: U) => R) | BiFunction<T, U, R>;
    /**
    * Fired when the client is initalizing.
    * @javaClass dev.latvian.mods.kubejs.client.ClientEventJS
    */
    class ClientEventJS extends Internal.EventJS {
        getLevel(): Internal.ClientLevelJS;
        getPlayer(): Internal.ClientPlayerJS;
        post(id: string): boolean;
        post(id: string, sub: string): boolean;
        getEntity(): Internal.EntityJS;
        get level(): Internal.ClientLevelJS;
        get entity(): Internal.EntityJS;
        get player(): Internal.ClientPlayerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the client is initalizing.
    */
    type ClientEventJS_ = ClientEventJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.BuilderBase
    */
    abstract class BuilderBase <T> implements Internal.Supplier<T> {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        clientRegistry(minecraft: Internal.Supplier_<Internal.Minecraft_>): void;
        transformObject(obj: T): T;
        /**
        */
        translationKey(key: Special.LangKey): Internal.BuilderBase<T>;
        getTranslationKeyGroup(): string;
        newID(pre: string, post: string): ResourceLocation;
        displayName(name: string): Internal.BuilderBase<T>;
        generateLang(lang: Internal.Map_<string, string>): void;
        type(type: string): Internal.BuilderBase<T>;
        createAdditionalObjects(): void;
        createObject(): T;
        addResourcePackLocations(path: string, list: Internal.List_<ResourceLocation_>, packType: Internal.PackType_): void;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<T>;
        get(): T;
        tag(tag: ResourceLocation_): Internal.BuilderBase<T>;
        generateDataJsons(generator: Internal.DataJsonGenerator_): void;
        readonly "id" : ResourceLocation;
        get registryType(): Internal.RegistryObjectBuilderTypes<T>;
        get translationKeyGroup(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type BuilderBase_<T> = BuilderBase<T>;
    /**
    * @javaClass net.minecraftforge.event.ItemAttributeModifierEvent
    */
    class ItemAttributeModifierEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        addModifier(arg0: Internal.Attribute_, arg1: Internal.AttributeModifier_): boolean;
        getOriginalModifiers(): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        getSlotType(): EquipmentSlot;
        getItemStack(): Internal.ItemStack;
        getModifiers(): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        removeAttribute(arg0: Internal.Attribute_): Internal.Collection<Internal.AttributeModifier>;
        removeModifier(arg0: Internal.Attribute_, arg1: Internal.AttributeModifier_): boolean;
        clearModifiers(): void;
        get itemStack(): Internal.ItemStack;
        get originalModifiers(): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        get slotType(): EquipmentSlot;
        get listenerList(): Internal.ListenerList;
        get modifiers(): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemAttributeModifierEvent_ = ItemAttributeModifierEvent;
    /**
    * @javaClass net.minecraft.world.level.chunk.FeatureAccess
    */
    interface FeatureAccess {
    }
    type FeatureAccess_ = FeatureAccess;
    /**
    * @javaClass dev.architectury.core.fluid.ArchitecturyFluidAttributes
    */
    interface ArchitecturyFluidAttributes {
        canConvertToSource(): boolean;
        getBucketItem(): Internal.Item;
        getBlock(): Internal.LiquidBlock;
        getSlopeFindDistance(arg0: Internal.LevelReader_): number;
        getSlopeFindDistance(): number;
        getName(stack: dev.architectury.fluid.FluidStack_): net.minecraft.network.chat.Component;
        getName(): net.minecraft.network.chat.Component;
        getExplosionResistance(): number;
        getTranslationKey(arg0: dev.architectury.fluid.FluidStack_): string;
        getTranslationKey(): string;
        isLighterThanAir(): boolean;
        isLighterThanAir(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): boolean;
        isLighterThanAir(stack: dev.architectury.fluid.FluidStack_): boolean;
        getTickDelay(): number;
        getTickDelay(arg0: Internal.LevelReader_): number;
        getColor(): number;
        getColor(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): number;
        getColor(stack: dev.architectury.fluid.FluidStack_): number;
        getFillSound(): Internal.SoundEvent;
        getFillSound(stack: dev.architectury.fluid.FluidStack_): Internal.SoundEvent;
        getFillSound(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): Internal.SoundEvent;
        getRarity(): Rarity;
        getRarity(stack: dev.architectury.fluid.FluidStack_): Rarity;
        getRarity(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): Rarity;
        getSourceTexture(stack: dev.architectury.fluid.FluidStack_): ResourceLocation;
        getSourceTexture(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): ResourceLocation;
        getSourceTexture(): ResourceLocation;
        getDensity(stack: dev.architectury.fluid.FluidStack_): number;
        getDensity(): number;
        getDensity(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): number;
        getEmptySound(): Internal.SoundEvent;
        getEmptySound(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): Internal.SoundEvent;
        getEmptySound(stack: dev.architectury.fluid.FluidStack_): Internal.SoundEvent;
        getLuminosity(): number;
        getLuminosity(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): number;
        getLuminosity(stack: dev.architectury.fluid.FluidStack_): number;
        getViscosity(): number;
        getViscosity(stack: dev.architectury.fluid.FluidStack_): number;
        getViscosity(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): number;
        getFlowingTexture(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): ResourceLocation;
        getFlowingTexture(): ResourceLocation;
        getFlowingTexture(stack: dev.architectury.fluid.FluidStack_): ResourceLocation;
        getFlowingFluid(): Internal.Fluid;
        getTemperature(stack: dev.architectury.fluid.FluidStack_): number;
        getTemperature(): number;
        getTemperature(arg0: dev.architectury.fluid.FluidStack_, arg1: Internal.BlockAndTintGetter_, arg2: BlockPos_): number;
        getSourceFluid(): Internal.Fluid;
        getDropOff(arg0: Internal.LevelReader_): number;
        getDropOff(): number;
    }
    type ArchitecturyFluidAttributes_ = ArchitecturyFluidAttributes;
    /**
    * @javaClass net.minecraft.client.Minecraft
    */
    class Minecraft extends Internal.ReentrantBlockableEventLoop<Internal.Runnable> implements Internal.WindowEventHandler, Internal.IForgeMinecraft, Internal.AccessorMinecraft, Internal.PausedPartialTickAccessor {
        getSearchTreeManager(): Internal.SearchRegistry;
        close(): void;
        handler$zcd000$pickColor(arg0: Internal.CallbackInfo_): void;
        get searchTreeManager(): Internal.SearchRegistry;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Minecraft_ = Minecraft;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeFluidState
    */
    interface IForgeFluidState {
        getExplosionResistance(arg0: Internal.BlockGetter_, arg1: BlockPos_, arg2: Internal.Explosion_): number;
        isEntityInside(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Entity_, arg3: number, arg4: Internal.HolderSet_<Internal.Fluid_>, arg5: boolean): boolean;
    }
    type IForgeFluidState_ = IForgeFluidState;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemBuilder
    */
    abstract class ItemBuilder extends Internal.BuilderBase<Internal.Item> {
        barWidth(barWidth: Internal.ToIntFunction_<Internal.ItemStackJS_>): this;
        clientRegistry(minecraft: Internal.Supplier_<Internal.Minecraft_>): void;
        maxStackSize(v: number): this;
        transformObject(obj: Internal.Item_): Internal.Item;
        color(index: number, c: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        color(callback: Internal.ItemBuilder$ItemColorJS_): this;
        use(use: Internal.ItemBuilder$UseCallback_): this;
        maxDamage(v: number): this;
        tooltip(text: net.minecraft.network.chat.Component_): this;
        textureJson(json: Internal.JsonObject_): this;
        barColor(barColor: Internal.Function_<Internal.ItemStackJS_, dev.latvian.mods.rhino.mod.util.color.Color_>): this;
        containerItem(id: string): this;
        subtypes(fn: Internal.Function_<Internal.ItemStackJS_, Internal.Collection_<Internal.ItemStackJS_>>): this;
        modelJson(json: Internal.JsonObject_): this;
        burnTime(v: number): this;
        useDuration(useDuration: Internal.ToIntFunction_<Internal.ItemStackJS_>): this;
        generateDataJsons(generator: Internal.DataJsonGenerator_): void;
        parentModel(m: string): this;
        group(g: string): this;
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        /**
        */
        texture(key: string, tex: Special.Texture): this;
        /**
        */
        texture(tex: Special.Texture): this;
        food(b: Internal.Consumer_<Internal.FoodBuilder_>): this;
        static ofArmorMaterial(o: any): Internal.ArmorMaterial;
        releaseUsing(releaseUsing: Internal.ItemBuilder$ReleaseUsingCallback_): this;
        unstackable(): this;
        /**
        */
        modifyAttribute(attribute: Internal.Attribute_, identifier: string, d: number, operation: Internal.AttributeModifier$Operation_): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Item>;
        finishUsing(finishUsing: Internal.ItemBuilder$FinishUsingCallback_): this;
        glow(v: boolean): this;
        useAnimation(animation: Internal.UseAnim_): this;
        rarity(v: Rarity_): this;
        createItemProperties(): Internal.Item$Properties;
        static readonly "TOOL_TIERS" : {"gold":Internal.Tiers,"diamond":Internal.Tiers,"iron":Internal.Tiers,"wood":Internal.Tiers,"stone":Internal.Tiers,"netherite":Internal.Tiers};
        static readonly "ARMOR_TIERS" : {"gold":Internal.ArmorMaterials,"chain":Internal.ArmorMaterials,"diamond":Internal.ArmorMaterials,"turtle":Internal.ArmorMaterials,"iron":Internal.ArmorMaterials,"leather":Internal.ArmorMaterials,"netherite":Internal.ArmorMaterials};
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Item>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type ItemBuilder_ = ItemBuilder;
    /**
    * @javaClass java.util.concurrent.CompletionStage
    */
    interface CompletionStage <T> {
        exceptionallyAsync(arg0: Internal.Function_<Internal.Throwable_, T>): Internal.CompletionStage<T>;
        exceptionallyAsync(arg0: Internal.Function_<Internal.Throwable_, T>, arg1: Internal.Executor_): Internal.CompletionStage<T>;
        thenRunAsync(arg0: Internal.Runnable_): Internal.CompletionStage<void>;
        thenRunAsync(arg0: Internal.Runnable_, arg1: Internal.Executor_): Internal.CompletionStage<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletionStage<void>;
        runAfterBothAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_, arg2: Internal.Executor_): Internal.CompletionStage<void>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>, arg2: Internal.Executor_): Internal.CompletionStage<U>;
        applyToEitherAsync<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>): Internal.CompletionStage<U>;
        acceptEitherAsync(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>): Internal.CompletionStage<void>;
        acceptEitherAsync(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>, arg2: Internal.Executor_): Internal.CompletionStage<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletionStage<void>;
        runAfterEitherAsync(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_, arg2: Internal.Executor_): Internal.CompletionStage<void>;
        acceptEither(arg0: Internal.CompletionStage_<T>, arg1: Internal.Consumer_<T>): Internal.CompletionStage<void>;
        thenAcceptBoth<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>): Internal.CompletionStage<void>;
        exceptionallyCompose(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>): Internal.CompletionStage<T>;
        applyToEither<U>(arg0: Internal.CompletionStage_<T>, arg1: Internal.Function_<T, U>): Internal.CompletionStage<U>;
        runAfterEither(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletionStage<void>;
        thenApply<U>(arg0: Internal.Function_<T, U>): Internal.CompletionStage<U>;
        thenComposeAsync<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>, arg1: Internal.Executor_): Internal.CompletionStage<U>;
        thenComposeAsync<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>): Internal.CompletionStage<U>;
        thenAccept(arg0: Internal.Consumer_<T>): Internal.CompletionStage<void>;
        thenRun(arg0: Internal.Runnable_): Internal.CompletionStage<void>;
        runAfterBoth(arg0: Internal.CompletionStage_<any>, arg1: Internal.Runnable_): Internal.CompletionStage<void>;
        exceptionally(arg0: Internal.Function_<Internal.Throwable_, T>): Internal.CompletionStage<T>;
        handleAsync<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>, arg1: Internal.Executor_): Internal.CompletionStage<U>;
        handleAsync<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>): Internal.CompletionStage<U>;
        handle<U>(arg0: Internal.BiFunction_<T, Internal.Throwable_, U>): Internal.CompletionStage<U>;
        thenCompose<U>(arg0: Internal.Function_<T, Internal.CompletionStage_<U>>): Internal.CompletionStage<U>;
        whenComplete(arg0: Internal.BiConsumer_<T, Internal.Throwable_>): Internal.CompletionStage<T>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>, arg2: Internal.Executor_): Internal.CompletionStage<V>;
        thenCombineAsync<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>): Internal.CompletionStage<V>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>, arg2: Internal.Executor_): Internal.CompletionStage<void>;
        thenAcceptBothAsync<U>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiConsumer_<T, U>): Internal.CompletionStage<void>;
        exceptionallyComposeAsync(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>): Internal.CompletionStage<T>;
        exceptionallyComposeAsync(arg0: Internal.Function_<Internal.Throwable_, Internal.CompletionStage_<T>>, arg1: Internal.Executor_): Internal.CompletionStage<T>;
        thenCombine<U, V>(arg0: Internal.CompletionStage_<U>, arg1: Internal.BiFunction_<T, U, V>): Internal.CompletionStage<V>;
        whenCompleteAsync(arg0: Internal.BiConsumer_<T, Internal.Throwable_>): Internal.CompletionStage<T>;
        whenCompleteAsync(arg0: Internal.BiConsumer_<T, Internal.Throwable_>, arg1: Internal.Executor_): Internal.CompletionStage<T>;
        toCompletableFuture(): Internal.CompletableFuture<T>;
        thenApplyAsync<U>(arg0: Internal.Function_<T, U>, arg1: Internal.Executor_): Internal.CompletionStage<U>;
        thenApplyAsync<U>(arg0: Internal.Function_<T, U>): Internal.CompletionStage<U>;
        thenAcceptAsync(arg0: Internal.Consumer_<T>): Internal.CompletionStage<void>;
        thenAcceptAsync(arg0: Internal.Consumer_<T>, arg1: Internal.Executor_): Internal.CompletionStage<void>;
    }
    type CompletionStage_<T> = CompletionStage<T>;
    /**
    * @javaClass net.minecraftforge.registries.ForgeRegistryEntry
    */
    abstract class ForgeRegistryEntry <V> implements Internal.IForgeRegistryEntry<V> {
        getRegistryType(): typeof V;
        getRegistryName(): ResourceLocation;
        setRegistryName(arg0: ResourceLocation_): V;
        setRegistryName(arg0: string): V;
        setRegistryName(arg0: string, arg1: string): V;
        readonly "delegate" : Internal.IRegistryDelegate<V>;
        get registryType(): typeof V;
        get registryName(): ResourceLocation;
        set registryName(arg0: ResourceLocation_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForgeRegistryEntry_<V> = ForgeRegistryEntry<V>;
    /**
    * @javaClass java.time.LocalDateTime
    */
    class LocalDateTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.ChronoLocalDateTime<Internal.LocalDate>, Internal.Serializable {
        static ofEpochSecond(arg0: number, arg1: number, arg2: Internal.ZoneOffset_): this;
        plusHours(arg0: number): this;
        isEqual(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
        toLocalTime(): Internal.LocalTime;
        compareTo(arg0: Internal.ChronoLocalDateTime_<any>): number;
        getDayOfWeek(): Internal.DayOfWeek;
        plusSeconds(arg0: number): this;
        getMinute(): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        getMonth(): Internal.Month;
        plusNanos(arg0: number): this;
        withHour(arg0: number): this;
        plusMonths(arg0: number): this;
        plusYears(arg0: number): this;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        format(arg0: Internal.DateTimeFormatter_): string;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
        getYear(): number;
        withDayOfMonth(arg0: number): this;
        withMonth(arg0: number): this;
        isAfter(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        minusHours(arg0: number): this;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        withYear(arg0: number): this;
        plusMinutes(arg0: number): this;
        minusMinutes(arg0: number): this;
        plusDays(arg0: number): this;
        hashCode(): number;
        static now(): this;
        static now(arg0: Internal.Clock_): this;
        static now(arg0: Internal.ZoneId_): this;
        static of(arg0: number, arg1: Internal.Month_, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): this;
        static of(arg0: number, arg1: Internal.Month_, arg2: number, arg3: number, arg4: number, arg5: number): this;
        static of(arg0: number, arg1: Internal.Month_, arg2: number, arg3: number, arg4: number): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number): this;
        static of(arg0: Internal.LocalDate_, arg1: Internal.LocalTime_): this;
        get(arg0: Internal.TemporalField_): number;
        getDayOfYear(): number;
        plusWeeks(arg0: number): this;
        getHour(): number;
        withMinute(arg0: number): this;
        getMonthValue(): number;
        minusYears(arg0: number): this;
        atOffset(arg0: Internal.ZoneOffset_): Internal.OffsetDateTime;
        minusWeeks(arg0: number): this;
        withDayOfYear(arg0: number): this;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        static parse(arg0: Internal.CharSequence_): this;
        atZone(arg0: Internal.ZoneId_): Internal.ZonedDateTime;
        isBefore(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
        minusDays(arg0: number): this;
        withNano(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        minusMonths(arg0: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        toLocalDate(): Internal.LocalDate;
        equals(arg0: any): boolean;
        getSecond(): number;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        getDayOfMonth(): number;
        minusSeconds(arg0: number): this;
        withSecond(arg0: number): this;
        static readonly "MIN" : Internal.LocalDateTime;
        static readonly "MAX" : Internal.LocalDateTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get month(): Internal.Month;
        get hour(): number;
        get year(): number;
        get dayOfYear(): number;
        get dayOfMonth(): number;
        get monthValue(): number;
        get nano(): number;
        get minute(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LocalDateTime_ = LocalDateTime;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2DoubleFunction
    */
    interface Int2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Int2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2DoubleFunction;
    }
    type Int2DoubleFunction_ = ((arg0: number) => number) | Int2DoubleFunction;
    /**
    * @javaClass java.lang.reflect.AnnotatedElement
    */
    interface AnnotatedElement {
        getAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        isAnnotationPresent(arg0: Internal.Class_<Internal.Annotation_>): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class_<T>): T;
        getAnnotations(): Internal.Annotation[];
        getDeclaredAnnotations(): Internal.Annotation[];
    }
    type AnnotatedElement_ = AnnotatedElement;
    /**
    * @javaClass java.lang.Thread$UncaughtExceptionHandler
    */
    interface Thread$UncaughtExceptionHandler {
        uncaughtException(arg0: Internal.Thread_, arg1: Internal.Throwable_): void;
    }
    type Thread$UncaughtExceptionHandler_ = ((arg0: Internal.Thread, arg1: Internal.Throwable) => void) | Thread$UncaughtExceptionHandler;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2DoubleFunction
    */
    interface Byte2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Byte2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2DoubleFunction;
    }
    type Byte2DoubleFunction_ = ((arg0: number) => number) | Byte2DoubleFunction;
    /**
    * @javaClass java.nio.channels.InterruptibleChannel
    */
    interface InterruptibleChannel extends Internal.Channel {
        close(): void;
    }
    type InterruptibleChannel_ = (() => void) | InterruptibleChannel;
    /**
    * Fired when you need to remove worldgen.
    * @javaClass dev.latvian.mods.kubejs.level.gen.WorldgenRemoveEventJS
    */
    class WorldgenRemoveEventJS extends Internal.StartupEventJS {
        removeAllSpawns(): void;
        printFeaturesForType(type: DecorationGenerationStep_, filter: Internal.BiomeFilter_, afterRemoval: boolean): void;
        printSpawns(): void;
        printSpawns(category: Internal.MobCategory_): void;
        removeFeatureById(filter: Internal.BiomeFilter_, decoration: DecorationGenerationStep_, ids: ResourceLocation_[]): void;
        removeFeatureById(type: DecorationGenerationStep_, ids: ResourceLocation_[]): void;
        printFeatures(type: DecorationGenerationStep_): void;
        printFeatures(type: DecorationGenerationStep_, filter: Internal.BiomeFilter_): void;
        printFeatures(): void;
        removeAllFeatures(): void;
        removeAllFeatures(filter: Internal.BiomeFilter_, type: DecorationGenerationStep_): void;
        removeAllFeatures(filter: Internal.BiomeFilter_): void;
        removeSpawns(p: Internal.Consumer_<Internal.RemoveSpawnsProperties_>): void;
        removeOres(p: Internal.Consumer_<Internal.RemoveOresProperties_>): void;
        printFiltered(type: DecorationGenerationStep_, filter: Internal.BiomeFilter_): void;
        printFiltered(): void;
        printFiltered(type: DecorationGenerationStep_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to remove worldgen.
    */
    type WorldgenRemoveEventJS_ = WorldgenRemoveEventJS;
    /**
    * @javaClass net.minecraft.server.level.ServerPlayer
    */
    class ServerPlayer extends Internal.Player {
        getLanguage(): string;
        refreshTabListName(): void;
        changeDimension(arg0: Internal.ServerLevel_, arg1: Internal.ITeleporter_): Internal.Entity;
        get language(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerPlayer_ = ServerPlayer;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.filter.RecipeFilter
    */
    interface RecipeFilter extends Internal.Predicate<Internal.RecipeJS> {
        test(arg0: Internal.RecipeJS_): boolean;
        of(o: any): this;
    }
    /**
    */
    type RecipeFilter_ = Internal.RecipeFilter_[] | {exact?: boolean, id?: Special.RecipeId | RegExp, input?: Internal.IngredientJS_, output?: Internal.IngredientJS_, or?: Internal.RecipeFilter_[], group?: string, type?: Special.RecipeSerializer, mod?: Special.Mod, not?: Internal.RecipeFilter_} | ((arg0: Internal.RecipeJS) => boolean) | RecipeFilter;
    /**
    * @javaClass java.lang.CharSequence
    */
    interface CharSequence {
        compare(arg0: Internal.CharSequence_, arg1: Internal.CharSequence_): number;
        isEmpty(): boolean;
        length(): number;
        toString(): string;
        subSequence(arg0: number, arg1: number): this;
        chars(): Internal.IntStream;
        charAt(arg0: number): string;
        codePoints(): Internal.IntStream;
    }
    type CharSequence_ = CharSequence;
    /**
    * @javaClass java.util.Collection
    */
    interface Collection <E> extends Internal.Iterable<E> {
        add(arg0: E): boolean;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        isEmpty(): boolean;
        clear(): void;
        remove(arg0: any): boolean;
        removeIf(arg0: Internal.Predicate_<E>): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: Internal.Collection_<E>): boolean;
        stream(): Internal.Stream<E>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray<T>(arg0: Internal.IntFunction_<T[]>): T[];
        toArray(): any[];
        parallelStream(): Internal.Stream<E>;
        retainAll(arg0: Internal.Collection_<any>): boolean;
    }
    type Collection_<E> = Collection<E>;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.FileConfigBuilder
    */
    class FileConfigBuilder extends Internal.GenericBuilder<Internal.Config, Internal.FileConfig> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileConfigBuilder_ = FileConfigBuilder;
    /**
    * @javaClass java.util.function.DoubleSupplier
    */
    interface DoubleSupplier {
        getAsDouble(): number;
    }
    type DoubleSupplier_ = (() => number) | DoubleSupplier;
    /**
    * @javaClass dev.latvian.mods.unit.function.FunctionFactory$FuncSupplier
    */
    interface FunctionFactory$FuncSupplier {
        create(arg0: Internal.Unit_[]): Internal.Unit;
    }
    type FunctionFactory$FuncSupplier_ = ((arg0: Internal.Unit[]) => Internal.Unit) | FunctionFactory$FuncSupplier;
    /**
    * @javaClass java.time.temporal.ChronoField
    */
    class ChronoField extends Internal.Enum<Internal.ChronoField> implements Internal.TemporalField {
        static valueOf(arg0: string): this;
        static values(): Internal.ChronoField[];
        adjustInto<R>(arg0: R, arg1: number): R;
        range(): Internal.ValueRange;
        getRangeUnit(): Internal.TemporalUnit;
        getBaseUnit(): Internal.TemporalUnit;
        rangeRefinedBy(arg0: Internal.TemporalAccessor_): Internal.ValueRange;
        getDisplayName(arg0: Internal.Locale_): string;
        isTimeBased(): boolean;
        checkValidValue(arg0: number): number;
        checkValidIntValue(arg0: number): number;
        toString(): string;
        isDateBased(): boolean;
        getFrom(arg0: Internal.TemporalAccessor_): number;
        isSupportedBy(arg0: Internal.TemporalAccessor_): boolean;
        static readonly "CLOCK_HOUR_OF_AMPM" : Internal.ChronoField;
        static readonly "DAY_OF_YEAR" : Internal.ChronoField;
        static readonly "MICRO_OF_DAY" : Internal.ChronoField;
        static readonly "ALIGNED_DAY_OF_WEEK_IN_MONTH" : Internal.ChronoField;
        static readonly "DAY_OF_MONTH" : Internal.ChronoField;
        static readonly "SECOND_OF_MINUTE" : Internal.ChronoField;
        static readonly "PROLEPTIC_MONTH" : Internal.ChronoField;
        static readonly "MILLI_OF_SECOND" : Internal.ChronoField;
        static readonly "NANO_OF_DAY" : Internal.ChronoField;
        static readonly "CLOCK_HOUR_OF_DAY" : Internal.ChronoField;
        static readonly "MINUTE_OF_DAY" : Internal.ChronoField;
        static readonly "ALIGNED_WEEK_OF_MONTH" : Internal.ChronoField;
        static readonly "YEAR" : Internal.ChronoField;
        static readonly "HOUR_OF_DAY" : Internal.ChronoField;
        static readonly "MILLI_OF_DAY" : Internal.ChronoField;
        static readonly "ALIGNED_DAY_OF_WEEK_IN_YEAR" : Internal.ChronoField;
        static readonly "YEAR_OF_ERA" : Internal.ChronoField;
        static readonly "AMPM_OF_DAY" : Internal.ChronoField;
        static readonly "NANO_OF_SECOND" : Internal.ChronoField;
        static readonly "SECOND_OF_DAY" : Internal.ChronoField;
        static readonly "MICRO_OF_SECOND" : Internal.ChronoField;
        static readonly "MONTH_OF_YEAR" : Internal.ChronoField;
        static readonly "EPOCH_DAY" : Internal.ChronoField;
        static readonly "ERA" : Internal.ChronoField;
        static readonly "OFFSET_SECONDS" : Internal.ChronoField;
        static readonly "HOUR_OF_AMPM" : Internal.ChronoField;
        static readonly "MINUTE_OF_HOUR" : Internal.ChronoField;
        static readonly "INSTANT_SECONDS" : Internal.ChronoField;
        static readonly "ALIGNED_WEEK_OF_YEAR" : Internal.ChronoField;
        static readonly "DAY_OF_WEEK" : Internal.ChronoField;
        get baseUnit(): Internal.TemporalUnit;
        get rangeUnit(): Internal.TemporalUnit;
        get timeBased(): boolean;
        get dateBased(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChronoField_ = "year_of_era" | "micro_of_second" | "year" | "minute_of_day" | "minute_of_hour" | "epoch_day" | "day_of_month" | "hour_of_ampm" | "offset_seconds" | "milli_of_second" | "nano_of_second" | "proleptic_month" | "era" | "second_of_minute" | "aligned_day_of_week_in_year" | "micro_of_day" | "nano_of_day" | "hour_of_day" | "day_of_week" | "second_of_day" | "day_of_year" | "month_of_year" | "ampm_of_day" | "milli_of_day" | "aligned_week_of_month" | "instant_seconds" | "aligned_day_of_week_in_month" | "aligned_week_of_year" | "clock_hour_of_day" | "clock_hour_of_ampm" | ChronoField;
    /**
    * @javaClass java.nio.file.WatchEvent$Kind
    */
    interface WatchEvent$Kind <T> {
        name(): string;
        type(): typeof T;
    }
    type WatchEvent$Kind_<T> = WatchEvent$Kind<T>;
    /**
    * @javaClass net.minecraftforge.client.event.ModelBakeEvent
    */
    class ModelBakeEvent extends net.minecraftforge.eventbus.api.Event implements Internal.IModBusEvent {
        getListenerList(): Internal.ListenerList;
        getModelRegistry(): Internal.Map<ResourceLocation, Internal.BakedModel>;
        getModelManager(): Internal.ModelManager;
        getModelLoader(): Internal.ForgeModelBakery;
        get modelRegistry(): Internal.Map<ResourceLocation, Internal.BakedModel>;
        get listenerList(): Internal.ListenerList;
        get modelManager(): Internal.ModelManager;
        get modelLoader(): Internal.ForgeModelBakery;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelBakeEvent_ = ModelBakeEvent;
    /**
    * @javaClass com.jozufozu.flywheel.backend.instancing.entity.EntityInstancingController
    */
    interface EntityInstancingController <T> {
        createInstance(arg0: Internal.MaterialManager_, arg1: T): Internal.EntityInstance<T>;
        shouldSkipRender(arg0: T): boolean;
    }
    type EntityInstancingController_<T> = EntityInstancingController<T>;
    /**
    * @javaClass net.minecraft.world.entity.item.ItemEntity
    */
    class ItemEntity extends Internal.Entity implements Internal.AccessorItemEntity {
        changeDimension(arg0: Internal.ServerLevel_, arg1: Internal.ITeleporter_): Internal.Entity;
        "lifespan" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemEntity_ = ItemEntity;
    /**
    * @javaClass net.minecraft.util.random.WeightedEntry$IntrusiveBase
    */
    class WeightedEntry$IntrusiveBase implements Internal.WeightedEntry {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WeightedEntry$IntrusiveBase_ = WeightedEntry$IntrusiveBase;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingKnockBackEvent
    */
    class LivingKnockBackEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        setRatioZ(arg0: number): void;
        setStrength(arg0: number): void;
        getOriginalRatioX(): number;
        getOriginalRatioZ(): number;
        getOriginalStrength(): number;
        getStrength(): number;
        getRatioZ(): number;
        isCancelable(): boolean;
        setRatioX(arg0: number): void;
        getRatioX(): number;
        get cancelable(): boolean;
        get strength(): number;
        get listenerList(): Internal.ListenerList;
        get originalStrength(): number;
        get originalRatioX(): number;
        get originalRatioZ(): number;
        get ratioX(): number;
        get ratioZ(): number;
        set strength(arg0: number);
        set ratioX(arg0: number);
        set ratioZ(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingKnockBackEvent_ = LivingKnockBackEvent;
    /**
    * @javaClass net.minecraft.world.entity.player.Player
    */
    abstract class Player extends Internal.LivingEntity implements Internal.IForgePlayer, Internal.PlayerAccess, Internal.PlayerKJS {
        getSuffixes(): Internal.Collection<Internal.MutableComponent>;
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        botania$setCritTarget(arg0: Internal.LivingEntity_): void;
        getPrefixes(): Internal.Collection<Internal.MutableComponent>;
        getStagesRawKJS(): Internal.Stages;
        getDigSpeed(arg0: Internal.BlockState_, arg1: BlockPos_): number;
        refreshDisplayName(): void;
        getStages(): Internal.Stages;
        getForcedPose(): Internal.Pose;
        setForcedPose(arg0: Internal.Pose_): void;
        static readonly "PERSISTED_NBT_TAG" : "PlayerPersisted";
        get suffixes(): Internal.Collection<Internal.MutableComponent>;
        get prefixes(): Internal.Collection<Internal.MutableComponent>;
        get forcedPose(): Internal.Pose;
        get stagesRawKJS(): Internal.Stages;
        get stages(): Internal.Stages;
        set forcedPose(arg0: Internal.Pose_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Player_ = Player;
    /**
    * @javaClass net.minecraft.world.item.enchantment.Enchantment
    */
    abstract class Enchantment extends Internal.ForgeRegistryEntry<Internal.Enchantment> implements Internal.IForgeEnchantment {
        isAllowedOnBooks(): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack_): boolean;
        get allowedOnBooks(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Enchantment_ = Special.Enchantment | Enchantment;
    /**
    * @javaClass net.minecraft.world.level.block.state.StateHolder
    */
    abstract class StateHolder <O, S> {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StateHolder_<O, S> = StateHolder<O, S>;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModFileInfo
    */
    interface IModFileInfo {
        showAsResourcePack(): boolean;
        versionString(): string;
        getMods(): Internal.List<Internal.IModInfo>;
        getLicense(): string;
        requiredLanguageLoaders(): Internal.List<Internal.IModFileInfo$LanguageSpec>;
        moduleName(): string;
        usesServices(): Internal.List<string>;
        getFileProperties(): Internal.Map<string, any>;
        getFile(): Internal.IModFile;
        getConfig(): Internal.IConfigurable;
    }
    type IModFileInfo_ = IModFileInfo;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.icon.Icon
    */
    abstract class Icon implements Internal.Drawable {
        withBorder(color: Internal.Color4I_, roundEdges: boolean): this;
        withColor(color: Internal.Color4I_): this;
        isEmpty(): boolean;
        withUV(x: number, y: number, w: number, h: number, tw: number, th: number): this;
        withUV(u0: number, v0: number, u1: number, v1: number): this;
        withTint(color: Internal.Color4I_): this;
        static getIcon(id: string): this;
        static getIcon(id: ResourceLocation_): this;
        static getIcon(json: Internal.JsonElement_): this;
        createPixelBuffer(): Internal.PixelBuffer;
        getIngredient(): any;
        hashCode(): number;
        equals(o: any): boolean;
        withPadding(padding: number): this;
        copy(): this;
        hasPixelBuffer(): boolean;
        combineWith(icon: Internal.Icon_): this;
        combineWith(... icons: Internal.Icon_[]): this;
        getJson(): Internal.JsonElement;
        static readonly "EMPTY" : Internal.Color4I;
        get ingredient(): any;
        get json(): Internal.JsonElement;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Icon_ = Icon;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.LivingEntityJS
    */
    class LivingEntityJS extends Internal.EntityJS {
        getLastAttackedEntity(): this;
        getFeetArmorItem(): Internal.ItemStackJS;
        isLiving(): boolean;
        setMainHandItem(item: Internal.ItemStackJS_): void;
        getRevengeTarget(): this;
        getOffHandItem(): Internal.ItemStackJS;
        getIdleTime(): number;
        getMovementSpeed(): number;
        getAttributeTotalValue(attribute: Internal.Attribute_): number;
        setDefaultMovementSpeedMultiplier(speed: number): void;
        setMovementSpeedAddition(speed: number): void;
        setRevengeTarget(target: Internal.LivingEntityJS_): void;
        setMovementSpeed(speed: number): void;
        getHealth(): number;
        setLegsArmorItem(item: Internal.ItemStackJS_): void;
        isChild(): boolean;
        setFeetArmorItem(item: Internal.ItemStackJS_): void;
        getAttributeBaseValue(attribute: Internal.Attribute_): number;
        setMaxHealth(hp: number): void;
        setDefaultMovementSpeed(speed: number): void;
        setEquipment(slot: EquipmentSlot_, item: Internal.ItemStackJS_): void;
        getLegsArmorItem(): Internal.ItemStackJS;
        getAttackingEntity(): this;
        isHoldingInAnyHand(ingredient: any): boolean;
        damageEquipment(slot: EquipmentSlot_, amount: number, onBroken: Internal.Consumer_<Internal.ItemStackJS_>): void;
        damageEquipment(slot: EquipmentSlot_): void;
        damageEquipment(slot: EquipmentSlot_, amount: number): void;
        setAbsorptionAmount(amount: number): void;
        modifyAttribute(attribute: Internal.Attribute_, identifier: string, d: number, operation: Internal.AttributeModifier$Operation_): void;
        getTotalMovementSpeed(): number;
        getHeadArmorItem(): Internal.ItemStackJS;
        setOffHandItem(item: Internal.ItemStackJS_): void;
        setHeldItem(hand: Hand_, item: Internal.ItemStackJS_): void;
        setAttributeBaseValue(attribute: Internal.Attribute_, value: number): void;
        getRevengeTimer(): number;
        getAbsorptionAmount(): number;
        getMaxHealth(): number;
        getHeldItem(hand: Hand_): Internal.ItemStackJS;
        getEquipment(slot: EquipmentSlot_): Internal.ItemStackJS;
        damageHeldItem(): void;
        damageHeldItem(hand: Hand_, amount: number): void;
        damageHeldItem(hand: Hand_, amount: number, onBroken: Internal.Consumer_<Internal.ItemStackJS_>): void;
        setTotalMovementSpeedMultiplier(speed: number): void;
        getChestArmorItem(): Internal.ItemStackJS;
        isOnLadder(): boolean;
        isUndead(): boolean;
        heal(hp: number): void;
        setChestArmorItem(item: Internal.ItemStackJS_): void;
        removeAttribute(attribute: Internal.Attribute_, identifier: string): void;
        getMainHandItem(): Internal.ItemStackJS;
        setHealth(hp: number): void;
        getLastDamageSource(): Internal.DamageSource;
        isElytraFlying(): boolean;
        getReachDistance(): number;
        isSleeping(): boolean;
        swingArm(hand: Hand_): void;
        getPotionEffects(): Internal.EntityPotionEffectsJS;
        getDefaultMovementSpeed(): number;
        rayTrace(): Internal.RayTraceResultJS;
        setHeadArmorItem(item: Internal.ItemStackJS_): void;
        canEntityBeSeen(entity: Internal.LivingEntityJS_): boolean;
        getLastAttackedEntityTime(): number;
        static readonly "PLAYER_CUSTOM_SPEED" : Internal.UUID;
        static readonly "PLAYER_CUSTOM_SPEED_NAME" : "kubejs.player.speed.modifier";
        readonly "minecraftLivingEntity" : Internal.LivingEntity;
        get revengeTimer(): number;
        get mainHandItem(): Internal.ItemStackJS;
        get elytraFlying(): boolean;
        get movementSpeed(): number;
        get defaultMovementSpeed(): number;
        get idleTime(): number;
        get sleeping(): boolean;
        get legsArmorItem(): Internal.ItemStackJS;
        get revengeTarget(): this;
        get undead(): boolean;
        get lastAttackedEntity(): this;
        get maxHealth(): number;
        get headArmorItem(): Internal.ItemStackJS;
        get reachDistance(): number;
        get potionEffects(): Internal.EntityPotionEffectsJS;
        get absorptionAmount(): number;
        get living(): boolean;
        get onLadder(): boolean;
        get feetArmorItem(): Internal.ItemStackJS;
        get health(): number;
        get offHandItem(): Internal.ItemStackJS;
        get lastAttackedEntityTime(): number;
        get chestArmorItem(): Internal.ItemStackJS;
        get attackingEntity(): this;
        get totalMovementSpeed(): number;
        get lastDamageSource(): Internal.DamageSource;
        get child(): boolean;
        set absorptionAmount(amount: number);
        set mainHandItem(item: Internal.ItemStackJS_);
        set health(hp: number);
        set feetArmorItem(item: Internal.ItemStackJS_);
        set offHandItem(item: Internal.ItemStackJS_);
        set chestArmorItem(item: Internal.ItemStackJS_);
        set defaultMovementSpeed(speed: number);
        set movementSpeed(speed: number);
        set defaultMovementSpeedMultiplier(speed: number);
        set legsArmorItem(item: Internal.ItemStackJS_);
        set totalMovementSpeedMultiplier(speed: number);
        set revengeTarget(target: Internal.LivingEntityJS_);
        set maxHealth(hp: number);
        set headArmorItem(item: Internal.ItemStackJS_);
        set movementSpeedAddition(speed: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityJS_ = LivingEntityJS;
    /**
    * @javaClass java.util.function.LongToDoubleFunction
    */
    interface LongToDoubleFunction {
        applyAsDouble(arg0: number): number;
    }
    type LongToDoubleFunction_ = ((arg0: number) => number) | LongToDoubleFunction;
    /**
    * @javaClass net.minecraft.world.entity.MobType
    */
    class MobType {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobType_ = MobType;
    /**
    * @javaClass dev.latvian.mods.rhino.classdata.ClassMember
    */
    class ClassMember {
        set(obj: any, value: any): Internal.Possible<any>;
        merge(member: Internal.ClassMember_): void;
        get(obj: any): Internal.Possible<any>;
        toString(): string;
        invoke(sig: Internal.MethodSignature_, obj: any, args: any[]): Internal.Possible<any>;
        "beanGet" : Internal.MethodInfo;
        "field" : Internal.Field;
        "beanSet" : Internal.MethodInfo;
        readonly "classData" : Internal.ClassData;
        "methods" : Internal.Map<Internal.MethodSignature, Internal.MethodInfo>;
        readonly "name" : string;
        "isFinal" : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClassMember_ = ClassMember;
    /**
    * @javaClass com.simibubi.create.content.contraptions.fluids.OpenEndedPipe
    */
    class OpenEndedPipe extends Internal.FlowSource {
        isEndpoint(): boolean;
        getWorld(): Internal.Level;
        serializeNBT(): Internal.CompoundTag;
        static fromNBT(arg0: Internal.CompoundTag_, arg1: BlockPos_): this;
        getOutputPos(): BlockPos;
        getPos(): BlockPos;
        getAOE(): Internal.AABB;
        manageSource(arg0: Internal.Level_): void;
        static registerEffectHandler(arg0: Internal.OpenEndedPipe$IEffectHandler_): void;
        provideHandler(): Internal.LazyOptional<Internal.IFluidHandler>;
        get endpoint(): boolean;
        get world(): Internal.Level;
        get pos(): BlockPos;
        get aOE(): Internal.AABB;
        get outputPos(): BlockPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OpenEndedPipe_ = OpenEndedPipe;
    /**
    * @javaClass java.awt.PageAttributes$ColorType
    */
    class PageAttributes$ColorType extends Internal.AttributeValue {
        static readonly "MONOCHROME" : Internal.PageAttributes$ColorType;
        static readonly "COLOR" : Internal.PageAttributes$ColorType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes$ColorType_ = PageAttributes$ColorType;
    /**
    * @javaClass net.minecraft.client.gui.screens.inventory.AbstractContainerScreen
    */
    abstract class AbstractContainerScreen <T> extends Internal.Screen implements Internal.MenuAccess<T>, Internal.AccessorAbstractContainerScreen {
        getSlotUnderMouse(): Internal.Slot;
        getYSize(): number;
        getSlotColor(arg0: number): number;
        getXSize(): number;
        getGuiTop(): number;
        getGuiLeft(): number;
        static renderSlotHighlight(arg0: Internal.PoseStack_, arg1: number, arg2: number, arg3: number, arg4: number): void;
        get slotUnderMouse(): Internal.Slot;
        get guiLeft(): number;
        get ySize(): number;
        get xSize(): number;
        get guiTop(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractContainerScreen_<T> = AbstractContainerScreen<T>;
    /**
    * @javaClass net.minecraft.resources.ResourceKey
    */
    class ResourceKey <T> implements Internal.Comparable<Internal.ResourceKey<any>>, Internal.SpecialEquality {
        getNamespace(): string;
        equals(arg0: any): boolean;
        getPath(): string;
        getRegistryName(): ResourceLocation;
        toString(): string;
        compareTo(arg0: Internal.ResourceKey_<any>): number;
        specialEquals(o: any, shallow: boolean): boolean;
        get path(): string;
        get namespace(): string;
        get registryName(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ResourceKey_<T> = ResourceKey<T>;
    /**
    * @javaClass net.minecraftforge.client.IBlockRenderProperties
    */
    interface IBlockRenderProperties {
        getFogColor(arg0: Internal.BlockState_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Entity_, arg4: Internal.Vector3d_, arg5: number): Internal.Vector3d;
        addDestroyEffects(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: BlockPos_, arg3: Internal.ParticleEngine_): boolean;
        addHitEffects(arg0: Internal.BlockState_, arg1: Internal.Level_, arg2: Internal.HitResult_, arg3: Internal.ParticleEngine_): boolean;
    }
    type IBlockRenderProperties_ = IBlockRenderProperties;
    /**
    * @javaClass mezz.jei.api.gui.builder.IRecipeLayoutBuilder
    */
    interface IRecipeLayoutBuilder {
        moveRecipeTransferButton(arg0: number, arg1: number): void;
        addSlot(arg0: Internal.RecipeIngredientRole_, arg1: number, arg2: number): Internal.IRecipeSlotBuilder;
        addInvisibleIngredients(arg0: Internal.RecipeIngredientRole_): Internal.IIngredientAcceptor<any>;
        createFocusLink(... arg0: Internal.IIngredientAcceptor_<any>[]): void;
        createFocusLink(... arg0: Internal.IRecipeSlotBuilder_[]): void;
        setShapeless(arg0: number, arg1: number): void;
        setShapeless(): void;
    }
    type IRecipeLayoutBuilder_ = IRecipeLayoutBuilder;
    /**
    * @javaClass net.minecraft.world.item.crafting.Recipe
    */
    interface Recipe <C> {
    }
    type Recipe_<C> = Recipe<C>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.TeamRank
    */
    class TeamRank extends Internal.Enum<Internal.TeamRank> implements Internal.StringRepresentable {
        isAlly(): boolean;
        getPower(): number;
        isNone(): boolean;
        isEnemy(): boolean;
        isInvited(): boolean;
        isOwner(): boolean;
        static valueOf(name: string): this;
        static values(): Internal.TeamRank[];
        is(rank: Internal.TeamRank_): boolean;
        isMember(): boolean;
        isOfficer(): boolean;
        static readonly "OWNER" : Internal.TeamRank;
        static readonly "INVITED" : Internal.TeamRank;
        static readonly "ALLY" : Internal.TeamRank;
        static readonly "NAME_MAP" : Internal.NameMap<Internal.TeamRank>;
        static readonly "ENEMY" : Internal.TeamRank;
        static readonly "OFFICER" : Internal.TeamRank;
        static readonly "VALUES" : Internal.TeamRank[];
        static readonly "NONE" : Internal.TeamRank;
        static readonly "MEMBER" : Internal.TeamRank;
        get owner(): boolean;
        get ally(): boolean;
        get officer(): boolean;
        get invited(): boolean;
        get member(): boolean;
        get enemy(): boolean;
        get power(): number;
        get none(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamRank_ = "owner" | "ally" | "officer" | "invited" | "member" | "enemy" | "none" | TeamRank;
    /**
    * @javaClass net.minecraftforge.fml.ModContainer
    */
    abstract class ModContainer {
        static buildTransitionHandler<T>(arg0: Internal.ModContainer_, arg1: Internal.IModStateTransition$EventGenerator_<T>, arg2: Internal.BiFunction_<Internal.ModLoadingStage_, Internal.Throwable_, Internal.ModLoadingStage_>, arg3: Internal.Executor_): Internal.CompletableFuture<void>;
        registerExtensionPoint<T>(arg0: Internal.Class_<Internal.IExtensionPoint_<T>>, arg1: Internal.Supplier_<T>): void;
        getMod(): any;
        addConfig(arg0: Internal.ModConfig_): void;
        getNamespace(): string;
        getModId(): string;
        getModInfo(): Internal.IModInfo;
        getCurrentState(): Internal.ModLoadingStage;
        getCustomExtension<T>(arg0: Internal.Class_<Internal.IExtensionPoint_<T>>): Internal.Optional<T>;
        dispatchConfigEvent(arg0: Internal.IConfigEvent_): void;
        matches(arg0: any): boolean;
        get mod(): any;
        get modInfo(): Internal.IModInfo;
        get namespace(): string;
        get currentState(): Internal.ModLoadingStage;
        get modId(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModContainer_ = ModContainer;
    /**
    * @javaClass net.minecraft.client.resources.model.UnbakedModel
    */
    interface UnbakedModel {
    }
    type UnbakedModel_ = UnbakedModel;
    /**
    * @javaClass net.minecraftforge.common.util.NonNullFunction
    */
    interface NonNullFunction <T, R> {
        apply(arg0: T): R;
    }
    type NonNullFunction_<T, R> = ((arg0: T) => R) | NonNullFunction<T, R>;
    /**
    * @javaClass org.apache.maven.artifact.repository.Authentication
    */
    class Authentication {
        getPassphrase(): string;
        setPassword(arg0: string): void;
        getPassword(): string;
        setUsername(arg0: string): void;
        setPassphrase(arg0: string): void;
        setPrivateKey(arg0: string): void;
        getPrivateKey(): string;
        getUsername(): string;
        get privateKey(): string;
        get password(): string;
        get passphrase(): string;
        get username(): string;
        set privateKey(arg0: string);
        set password(arg0: string);
        set passphrase(arg0: string);
        set username(arg0: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Authentication_ = Authentication;
    /**
    * @javaClass com.mojang.datafixers.util.Either$Mu
    */
    class Either$Mu <R> implements Internal.K1 {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Either$Mu_<R> = Either$Mu<R>;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ItemToolTierEventJS
    */
    class ItemToolTierEventJS extends Internal.StartupEventJS {
        add(id: string, tier: Internal.Consumer_<Internal.MutableToolTier_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemToolTierEventJS_ = ItemToolTierEventJS;
    /**
    * @javaClass java.awt.dnd.DragSourceMotionListener
    */
    interface DragSourceMotionListener extends Internal.EventListener {
        dragMouseMoved(arg0: Internal.DragSourceDragEvent_): void;
    }
    type DragSourceMotionListener_ = ((arg0: Internal.DragSourceDragEvent) => void) | DragSourceMotionListener;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerContainerEvent$Close
    */
    class PlayerContainerEvent$Close extends Internal.PlayerContainerEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerContainerEvent$Close_ = PlayerContainerEvent$Close;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.PlayerEventJS
    */
    abstract class PlayerEventJS extends Internal.LivingEntityEventJS {
        addGameStage(stage: string): void;
        /**
        */
        getPlayer(): Internal.PlayerJS_<Internal.Player_>;
        getMinecraftPlayer(): Internal.Player;
        hasGameStage(stage: string): boolean;
        removeGameStage(stage: string): void;
        get minecraftPlayer(): Internal.Player;
        /**
        */
        get player(): Internal.PlayerJS_<Internal.Player_>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type PlayerEventJS_ = PlayerEventJS;
    /**
    * @javaClass io.netty.util.concurrent.EventExecutorGroup
    */
    interface EventExecutorGroup extends Internal.ScheduledExecutorService, Internal.Iterable<Internal.EventExecutor> {
        scheduleAtFixedRate(arg0: Internal.Runnable_, arg1: number, arg2: number, arg3: Internal.TimeUnit_): io.netty.util.concurrent.ScheduledFuture<any>;
        next(): Internal.EventExecutor;
        terminationFuture(): io.netty.util.concurrent.Future<any>;
        isShuttingDown(): boolean;
        schedule(arg0: Internal.Runnable_, arg1: number, arg2: Internal.TimeUnit_): io.netty.util.concurrent.ScheduledFuture<any>;
        schedule<V>(arg0: Internal.Callable_<V>, arg1: number, arg2: Internal.TimeUnit_): io.netty.util.concurrent.ScheduledFuture<V>;
        iterator(): Internal.Iterator<Internal.EventExecutor>;
        shutdownGracefully(): io.netty.util.concurrent.Future<any>;
        shutdownGracefully(arg0: number, arg1: number, arg2: Internal.TimeUnit_): io.netty.util.concurrent.Future<any>;
        submit<T>(arg0: Internal.Callable_<T>): io.netty.util.concurrent.Future<T>;
        submit(arg0: Internal.Runnable_): io.netty.util.concurrent.Future<any>;
        submit<T>(arg0: Internal.Runnable_, arg1: T): io.netty.util.concurrent.Future<T>;
        scheduleWithFixedDelay(arg0: Internal.Runnable_, arg1: number, arg2: number, arg3: Internal.TimeUnit_): io.netty.util.concurrent.ScheduledFuture<any>;
        shutdownNow(): Internal.List<Internal.Runnable>;
        shutdown(): void;
    }
    type EventExecutorGroup_ = EventExecutorGroup;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.EntityEventJS
    */
    abstract class EntityEventJS extends Internal.LevelEventJS {
        getLevel(): Internal.LevelJS;
        getEntity(): Internal.EntityJS;
        get level(): Internal.LevelJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityEventJS_ = EntityEventJS;
    /**
    * @javaClass java.lang.annotation.ElementType
    */
    class ElementType extends Internal.Enum<Internal.ElementType> {
        static valueOf(arg0: string): this;
        static values(): Internal.ElementType[];
        static readonly "ANNOTATION_TYPE" : Internal.ElementType;
        static readonly "MODULE" : Internal.ElementType;
        static readonly "LOCAL_VARIABLE" : Internal.ElementType;
        static readonly "FIELD" : Internal.ElementType;
        static readonly "PACKAGE" : Internal.ElementType;
        static readonly "TYPE_PARAMETER" : Internal.ElementType;
        static readonly "METHOD" : Internal.ElementType;
        static readonly "RECORD_COMPONENT" : Internal.ElementType;
        static readonly "TYPE_USE" : Internal.ElementType;
        static readonly "CONSTRUCTOR" : Internal.ElementType;
        static readonly "TYPE" : Internal.ElementType;
        static readonly "PARAMETER" : Internal.ElementType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ElementType_ = "local_variable" | "package" | "record_component" | "field" | "method" | "parameter" | "type_use" | "module" | "constructor" | "annotation_type" | "type_parameter" | "type" | ElementType;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.AbstractInt2ObjectMap
    */
    abstract class AbstractInt2ObjectMap <V> extends Internal.AbstractInt2ObjectFunction<V> implements Internal.Int2ObjectMap<V>, Internal.Serializable {
        containsKey(arg0: number): boolean;
        hashCode(): number;
        putAll(arg0: Internal.Map_<number, V>): void;
        values(): Internal.ObjectCollection<V>;
        equals(arg0: any): boolean;
        isEmpty(): boolean;
        toString(): string;
        keySet(): Internal.IntSet;
        containsValue(arg0: any): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractInt2ObjectMap_<V> = AbstractInt2ObjectMap<V>;
    /**
    * @javaClass dev.latvian.mods.kubejs.create.events.SpecialSpoutHandlerEvent$SpoutHandler
    */
    interface SpecialSpoutHandlerEvent$SpoutHandler {
        fillBlock(arg0: Internal.BlockContainerJS_, arg1: Internal.FluidStackJS_, arg2: boolean): number;
    }
    type SpecialSpoutHandlerEvent$SpoutHandler_ = ((arg0: Internal.BlockContainerJS, arg1: Internal.FluidStackJS, arg2: boolean) => number) | SpecialSpoutHandlerEvent$SpoutHandler;
    /**
    * @javaClass io.netty.channel.ChannelInboundHandlerAdapter
    */
    class ChannelInboundHandlerAdapter extends Internal.ChannelHandlerAdapter implements Internal.ChannelInboundHandler {
        channelInactive(arg0: Internal.ChannelHandlerContext_): void;
        channelUnregistered(arg0: Internal.ChannelHandlerContext_): void;
        channelReadComplete(arg0: Internal.ChannelHandlerContext_): void;
        exceptionCaught(arg0: Internal.ChannelHandlerContext_, arg1: Internal.Throwable_): void;
        channelActive(arg0: Internal.ChannelHandlerContext_): void;
        userEventTriggered(arg0: Internal.ChannelHandlerContext_, arg1: any): void;
        channelRegistered(arg0: Internal.ChannelHandlerContext_): void;
        channelRead(arg0: Internal.ChannelHandlerContext_, arg1: any): void;
        channelWritabilityChanged(arg0: Internal.ChannelHandlerContext_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChannelInboundHandlerAdapter_ = ChannelInboundHandlerAdapter;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2FloatFunction
    */
    interface Double2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2FloatFunction_ = ((arg0: number) => number) | Double2FloatFunction;
    /**
    * @javaClass java.lang.ModuleLayer
    */
    class ModuleLayer {
        findModule(arg0: string): Internal.Optional<Internal.Module>;
        static defineModulesWithManyLoaders(arg0: Internal.Configuration_, arg1: Internal.List_<Internal.ModuleLayer_>, arg2: Internal.ClassLoader_): Internal.ModuleLayer$Controller;
        defineModulesWithManyLoaders(arg0: Internal.Configuration_, arg1: Internal.ClassLoader_): this;
        findLoader(arg0: string): Internal.ClassLoader;
        configuration(): Internal.Configuration;
        toString(): string;
        static defineModulesWithOneLoader(arg0: Internal.Configuration_, arg1: Internal.List_<Internal.ModuleLayer_>, arg2: Internal.ClassLoader_): Internal.ModuleLayer$Controller;
        defineModulesWithOneLoader(arg0: Internal.Configuration_, arg1: Internal.ClassLoader_): this;
        static boot(): this;
        modules(): Internal.Set<Internal.Module>;
        defineModules(arg0: Internal.Configuration_, arg1: Internal.Function_<string, Internal.ClassLoader_>): this;
        static defineModules(arg0: Internal.Configuration_, arg1: Internal.List_<Internal.ModuleLayer_>, arg2: Internal.Function_<string, Internal.ClassLoader_>): Internal.ModuleLayer$Controller;
        parents(): Internal.List<Internal.ModuleLayer>;
        static empty(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleLayer_ = ModuleLayer;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.Rotate
    */
    interface Rotate <Self> {
        rotateZRadians(arg0: number): Self;
        rotate(arg0: number, arg1: Internal.Direction$Axis_): Self;
        rotate(arg0: Internal.Direction_, arg1: number): Self;
        rotateYRadians(arg0: number): Self;
        rotateXRadians(arg0: number): Self;
        multiplyRadians(arg0: Internal.Vector3f_, arg1: number): Self;
        multiply(arg0: Internal.Quaternion_): Self;
        multiply(arg0: Internal.Vector3f_, arg1: number): Self;
        rotateX(arg0: number): Self;
        rotateY(arg0: number): Self;
        rotateZ(arg0: number): Self;
        rotateToFace(arg0: Internal.Direction_): Self;
    }
    type Rotate_<Self> = ((arg0: Internal.Quaternion) => Self) | Rotate<Self>;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.CropBlockBuilder$ShapeBuilder
    */
    class CropBlockBuilder$ShapeBuilder {
        getShapes(): Internal.List<Internal.VoxelShape>;
        shape(age: number, minX: number, minY: number, minZ: number, maxX: number, maxY: number, maxZ: number): this;
        get shapes(): Internal.List<Internal.VoxelShape>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CropBlockBuilder$ShapeBuilder_ = CropBlockBuilder$ShapeBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemBuilder$ReleaseUsingCallback
    */
    interface ItemBuilder$ReleaseUsingCallback {
        releaseUsing(arg0: Internal.ItemStackJS_, arg1: Internal.LevelJS_, arg2: Internal.LivingEntityJS_, arg3: number): void;
    }
    type ItemBuilder$ReleaseUsingCallback_ = ((arg0: Internal.ItemStackJS, arg1: Internal.LevelJS, arg2: Internal.LivingEntityJS, arg3: number) => void) | ItemBuilder$ReleaseUsingCallback;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemModificationProperties
    */
    class ItemModificationProperties {
        setBurnTime(i: number): void;
        getAttributes(attribute: Internal.Attribute_): Internal.List<Internal.AttributeModifier>;
        setMaxStackSize(i: number): void;
        setArmorToughness(armorToughness: number): void;
        setMaxDamage(i: number): void;
        setCraftingRemainder(i: Internal.Item_): void;
        setFoodProperties(consumer: Internal.Consumer_<Internal.FoodBuilder_>): void;
        setRarity(r: Rarity_): void;
        setArmorKnockbackResistance(knockbackResistance: number): void;
        setTier(c: Internal.Consumer_<Internal.MutableToolTier_>): void;
        addAttribute(attribute: Internal.Attribute_, uuid: Internal.UUID_, name: string, d: number, operation: Internal.AttributeModifier$Operation_): void;
        setDigSpeed(speed: number): void;
        setAttackSpeed(attackSpeed: number): void;
        setArmorProtection(armorProtection: number): void;
        setFireResistant(b: boolean): void;
        getDigSpeed(): number;
        removeAttribute(attribute: Internal.Attribute_, uuid: Internal.UUID_): void;
        setAttackDamage(attackDamage: number): void;
        readonly "item" : Internal.ItemKJS;
        get digSpeed(): number;
        set maxStackSize(i: number);
        set maxDamage(i: number);
        set digSpeed(speed: number);
        set armorProtection(armorProtection: number);
        set fireResistant(b: boolean);
        set armorToughness(armorToughness: number);
        set tier(c: Internal.Consumer_<Internal.MutableToolTier_>);
        set armorKnockbackResistance(knockbackResistance: number);
        set burnTime(i: number);
        set attackSpeed(attackSpeed: number);
        set foodProperties(consumer: Internal.Consumer_<Internal.FoodBuilder_>);
        set craftingRemainder(i: Internal.Item_);
        set attackDamage(attackDamage: number);
        set rarity(r: Rarity_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemModificationProperties_ = ItemModificationProperties;
    /**
    * @javaClass mezz.jei.api.recipe.IFocusFactory
    */
    interface IFocusFactory {
        createFocus<V>(arg0: Internal.RecipeIngredientRole_, arg1: Internal.IIngredientType_<V>, arg2: V): Internal.IFocus<V>;
        createFocus<V>(arg0: Internal.IFocus$Mode_, arg1: V): Internal.IFocus<V>;
    }
    type IFocusFactory_ = IFocusFactory;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.LevelEventJS
    */
    abstract class LevelEventJS extends Internal.EventJS {
        getServer(): Internal.ServerJS;
        getLevel(): Internal.LevelJS;
        post(id: string): boolean;
        post(id: string, sub: string): boolean;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LevelEventJS_ = LevelEventJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.integration.forge.jei.InformationJEIEventJS
    */
    class InformationJEIEventJS extends Internal.EventJS {
        add(o: any, s: net.minecraft.network.chat.Component_[]): void;
        addForType<T>(type: Internal.IIngredientType_<T>, o: any, s: net.minecraft.network.chat.Component_[]): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InformationJEIEventJS_ = InformationJEIEventJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.predicate.BlockIDPredicate$PropertyObject
    */
    class BlockIDPredicate$PropertyObject extends Internal.Record {
        hashCode(): number;
        equals(o: any): boolean;
        property(): Internal.Property<any>;
        toString(): string;
        value(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockIDPredicate$PropertyObject_ = BlockIDPredicate$PropertyObject;
    /**
    * @javaClass dev.latvian.mods.rhino.Context$ClassShutterSetter
    */
    interface Context$ClassShutterSetter {
        setClassShutter(arg0: Internal.ClassShutter_): void;
        getClassShutter(): Internal.ClassShutter;
    }
    type Context$ClassShutterSetter_ = Context$ClassShutterSetter;
    /**
    * @javaClass java.awt.PageAttributes$MediaType
    */
    class PageAttributes$MediaType extends Internal.AttributeValue {
        static readonly "ISO_B0" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B1" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B2" : Internal.PageAttributes$MediaType;
        static readonly "NA_10X13_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B3" : Internal.PageAttributes$MediaType;
        static readonly "NA_NUMBER_14_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B4" : Internal.PageAttributes$MediaType;
        static readonly "ENV_INVITE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B5" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B6" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C10" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B7" : Internal.PageAttributes$MediaType;
        static readonly "INVITE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C8_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "A0" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B9" : Internal.PageAttributes$MediaType;
        static readonly "A1" : Internal.PageAttributes$MediaType;
        static readonly "A2" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B7" : Internal.PageAttributes$MediaType;
        static readonly "A3" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B8" : Internal.PageAttributes$MediaType;
        static readonly "A4" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C2_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "A5" : Internal.PageAttributes$MediaType;
        static readonly "A6" : Internal.PageAttributes$MediaType;
        static readonly "A7" : Internal.PageAttributes$MediaType;
        static readonly "A8" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B8" : Internal.PageAttributes$MediaType;
        static readonly "A9" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B9" : Internal.PageAttributes$MediaType;
        static readonly "PERSONAL_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C1" : Internal.PageAttributes$MediaType;
        static readonly "A10" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C2" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C3" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C4" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C5" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C6" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C7" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C8" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B1" : Internal.PageAttributes$MediaType;
        static readonly "NA_LETTER" : Internal.PageAttributes$MediaType;
        static readonly "ISO_2A0" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B2" : Internal.PageAttributes$MediaType;
        static readonly "ENV_6X9" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B0" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B5" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B6" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B3" : Internal.PageAttributes$MediaType;
        static readonly "B0" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B4" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C0" : Internal.PageAttributes$MediaType;
        static readonly "NA_NUMBER_9_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "B1" : Internal.PageAttributes$MediaType;
        static readonly "B2" : Internal.PageAttributes$MediaType;
        static readonly "B3" : Internal.PageAttributes$MediaType;
        static readonly "B4" : Internal.PageAttributes$MediaType;
        static readonly "B5" : Internal.PageAttributes$MediaType;
        static readonly "B6" : Internal.PageAttributes$MediaType;
        static readonly "B7" : Internal.PageAttributes$MediaType;
        static readonly "B8" : Internal.PageAttributes$MediaType;
        static readonly "B9" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C9" : Internal.PageAttributes$MediaType;
        static readonly "NA_7X9_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "MONARCH" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C3_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_9X11" : Internal.PageAttributes$MediaType;
        static readonly "ENV_ITALY" : Internal.PageAttributes$MediaType;
        static readonly "ENV_9X12" : Internal.PageAttributes$MediaType;
        static readonly "ENV_10X15" : Internal.PageAttributes$MediaType;
        static readonly "A" : Internal.PageAttributes$MediaType;
        static readonly "ENV_10X14" : Internal.PageAttributes$MediaType;
        static readonly "B" : Internal.PageAttributes$MediaType;
        static readonly "ENV_10X13" : Internal.PageAttributes$MediaType;
        static readonly "C" : Internal.PageAttributes$MediaType;
        static readonly "D" : Internal.PageAttributes$MediaType;
        static readonly "E" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C9_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "C0" : Internal.PageAttributes$MediaType;
        static readonly "C1" : Internal.PageAttributes$MediaType;
        static readonly "C2" : Internal.PageAttributes$MediaType;
        static readonly "C3" : Internal.PageAttributes$MediaType;
        static readonly "ISO_DESIGNATED_LONG_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "PERSONAL" : Internal.PageAttributes$MediaType;
        static readonly "C4" : Internal.PageAttributes$MediaType;
        static readonly "C5" : Internal.PageAttributes$MediaType;
        static readonly "C6" : Internal.PageAttributes$MediaType;
        static readonly "NA_10X14_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "C7" : Internal.PageAttributes$MediaType;
        static readonly "C8" : Internal.PageAttributes$MediaType;
        static readonly "C9" : Internal.PageAttributes$MediaType;
        static readonly "NA_NUMBER_10_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A0" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A1" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A2" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A3" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A4" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A5" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A6" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C1_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B5_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "NA_LEGAL" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A7" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C6_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A8" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A9" : Internal.PageAttributes$MediaType;
        static readonly "NA_NUMBER_11_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "STATEMENT" : Internal.PageAttributes$MediaType;
        static readonly "LETTER" : Internal.PageAttributes$MediaType;
        static readonly "ISO_A10" : Internal.PageAttributes$MediaType;
        static readonly "NA_9X11_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C5_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "QUARTO" : Internal.PageAttributes$MediaType;
        static readonly "ISO_DESIGNATED_LONG" : Internal.PageAttributes$MediaType;
        static readonly "NA_6X9_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C4_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "C10" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C10_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_4A0" : Internal.PageAttributes$MediaType;
        static readonly "ITALY" : Internal.PageAttributes$MediaType;
        static readonly "NA_NUMBER_12_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "INVOICE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_9" : Internal.PageAttributes$MediaType;
        static readonly "NA_9X12_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ITALY_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B4_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_PERSONAL" : Internal.PageAttributes$MediaType;
        static readonly "ISO_B10" : Internal.PageAttributes$MediaType;
        static readonly "JIS_B10" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C0_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "INVITE_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "NOTE" : Internal.PageAttributes$MediaType;
        static readonly "LEGAL" : Internal.PageAttributes$MediaType;
        static readonly "EXECUTIVE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_MONARCH" : Internal.PageAttributes$MediaType;
        static readonly "ENV_11" : Internal.PageAttributes$MediaType;
        static readonly "B10" : Internal.PageAttributes$MediaType;
        static readonly "ENV_12" : Internal.PageAttributes$MediaType;
        static readonly "ENV_10" : Internal.PageAttributes$MediaType;
        static readonly "ISO_C7_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_14" : Internal.PageAttributes$MediaType;
        static readonly "MONARCH_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "ENV_7X9" : Internal.PageAttributes$MediaType;
        static readonly "NA_10X15_ENVELOPE" : Internal.PageAttributes$MediaType;
        static readonly "TABLOID" : Internal.PageAttributes$MediaType;
        static readonly "LEDGER" : Internal.PageAttributes$MediaType;
        static readonly "FOLIO" : Internal.PageAttributes$MediaType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes$MediaType_ = PageAttributes$MediaType;
    /**
    * @javaClass net.minecraft.world.Difficulty
    */
    class Difficulty extends Internal.Enum<Internal.Difficulty> {
        static valueOf(arg0: string): this;
        static values(): Internal.Difficulty[];
        static readonly "EASY" : Internal.Difficulty;
        static readonly "PEACEFUL" : Internal.Difficulty;
        static readonly "HARD" : Internal.Difficulty;
        static readonly "NORMAL" : Internal.Difficulty;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Difficulty_ = "normal" | "hard" | "easy" | "peaceful" | Difficulty;
    /**
    * @javaClass net.minecraft.client.model.HeadedModel
    */
    interface HeadedModel {
    }
    type HeadedModel_ = HeadedModel;
    /**
    * @javaClass net.minecraftforge.entity.PartEntity
    */
    abstract class PartEntity <T> extends Internal.Entity {
        getParent(): T;
        get parent(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PartEntity_<T> = PartEntity<T>;
    /**
    * Fired by different tag when the server:
    * - loads
    * - ticks
    * - unloads
    * @javaClass dev.latvian.mods.kubejs.server.ServerEventJS
    */
    class ServerEventJS extends Internal.EventJS {
        getServer(): Internal.ServerJS;
        get server(): Internal.ServerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired by different tag when the server:
    * - loads
    * - ticks
    * - unloads
    */
    type ServerEventJS_ = ServerEventJS;
    /**
    * @javaClass com.jozufozu.flywheel.backend.model.DirectVertexConsumer
    */
    class DirectVertexConsumer implements Internal.VertexConsumer {
        split(arg0: number): this;
        memSetZero(): void;
        hasOverlay(): boolean;
        readonly "format" : Internal.VertexFormat;
        readonly "startPos" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DirectVertexConsumer_ = DirectVertexConsumer;
    /**
    * @javaClass net.minecraft.util.thread.ProcessorHandle
    */
    interface ProcessorHandle <Msg> extends Internal.AutoCloseable {
        close(): void;
    }
    type ProcessorHandle_<Msg> = ProcessorHandle<Msg>;
    /**
    * @javaClass com.mojang.datafixers.util.Function4
    */
    interface Function4 <T1, T2, T3, T4, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4): R;
        curry3(): Internal.Function3<T1, T2, T3, Internal.Function<T4, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.BiFunction<T3, T4, R>>;
        curry(): Internal.Function<T1, Internal.Function3<T2, T3, T4, R>>;
    }
    type Function4_<T1, T2, T3, T4, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4) => R) | Function4<T1, T2, T3, T4, R>;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.TagEventJS$TagWrapper
    */
    class TagEventJS$TagWrapper {
        getObjectIds(): Internal.Collection<ResourceLocation>;
        add(... ids: string[]): Internal.TagEventJS$TagWrapper<>;
        removeAll(): Internal.TagEventJS$TagWrapper<>;
        toString(): string;
        sort(): boolean;
        setPriorityList(o: any): void;
        remove(... ids: string[]): Internal.TagEventJS$TagWrapper<>;
        get objectIds(): Internal.Collection<ResourceLocation>;
        set priorityList(o: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TagEventJS$TagWrapper_ = TagEventJS$TagWrapper;
    /**
    * @javaClass java.lang.Readable
    */
    interface Readable {
        read(arg0: Internal.CharBuffer_): number;
    }
    type Readable_ = ((arg0: Internal.CharBuffer) => number) | Readable;
    /**
    * @javaClass java.lang.reflect.GenericDeclaration
    */
    interface GenericDeclaration extends Internal.AnnotatedElement {
        getTypeParameters(): any[];
    }
    type GenericDeclaration_ = (() => any[]) | GenericDeclaration;
    /**
    * @javaClass io.netty.channel.RecvByteBufAllocator
    */
    interface RecvByteBufAllocator {
        newHandle(): Internal.RecvByteBufAllocator$Handle;
    }
    type RecvByteBufAllocator_ = (() => Internal.RecvByteBufAllocator$Handle) | RecvByteBufAllocator;
    /**
    * @javaClass java.security.PrivilegedExceptionAction
    */
    interface PrivilegedExceptionAction <T> {
        run(): T;
    }
    type PrivilegedExceptionAction_<T> = (() => T) | PrivilegedExceptionAction<T>;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.input.Key
    */
    class Key {
        selectAll(): boolean;
        cut(): boolean;
        backspace(): boolean;
        deselectAll(): boolean;
        getInputMapping(): Internal.InputConstants$Key;
        esc(): boolean;
        is(k: number): boolean;
        enter(): boolean;
        paste(): boolean;
        copy(): boolean;
        escOrInventory(): boolean;
        readonly "keyCode" : number;
        readonly "modifiers" : Internal.KeyModifiers;
        readonly "scanCode" : number;
        get inputMapping(): Internal.InputConstants$Key;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Key_ = Key;
    /**
    * @javaClass net.minecraft.client.renderer.LevelRenderer
    */
    class LevelRenderer implements Internal.ResourceManagerReloadListener, Internal.AutoCloseable, Internal.LevelRendererAccessor {
        handler$zbk000$renderSky(arg0: Internal.PoseStack_, arg1: Internal.Matrix4f_, arg2: number, arg3: Internal.Camera_, arg4: boolean, arg5: Internal.Runnable_, arg6: Internal.CallbackInfo_): void;
        playStreamingMusic(arg0: Internal.SoundEvent_, arg1: BlockPos_, arg2: Internal.RecordItem_): void;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LevelRenderer_ = LevelRenderer;
    /**
    * @javaClass mezz.jei.api.helpers.IModIdHelper
    */
    interface IModIdHelper {
        isDisplayingModNameEnabled(): boolean;
        addModNameToIngredientTooltip<T>(arg0: Internal.List_<net.minecraft.network.chat.Component_>, arg1: T, arg2: Internal.IIngredientHelper_<T>): Internal.List<net.minecraft.network.chat.Component>;
        getFormattedModNameForModId(arg0: string): string;
        getModNameForModId(arg0: string): string;
    }
    type IModIdHelper_ = IModIdHelper;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ArmorItemBuilder$Boots
    */
    class ArmorItemBuilder$Boots extends Internal.ArmorItemBuilder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArmorItemBuilder$Boots_ = ArmorItemBuilder$Boots;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2ObjectFunction
    */
    interface Reference2ObjectFunction <K, V> extends it.unimi.dsi.fastutil.Function<K, V> {
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Reference2FloatFunction<K>;
        getOrDefault(arg0: any, arg1: V): V;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2ObjectFunction<V>;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2ObjectFunction<T, V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Reference2CharFunction<K>;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Reference2DoubleFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2ObjectFunction<T, V>;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Reference2ObjectFunction<K, T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2ObjectFunction<V>;
        get(arg0: any): V;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2ObjectFunction<V>;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Reference2ByteFunction<K>;
    }
    type Reference2ObjectFunction_<K, V> = ((arg0: any) => V) | Reference2ObjectFunction<K, V>;
    /**
    * @javaClass java.io.FilterOutputStream
    */
    class FilterOutputStream extends Internal.OutputStream {
        flush(): void;
        close(): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FilterOutputStream_ = FilterOutputStream;
    /**
    * @javaClass io.netty.channel.ChannelOutboundBuffer
    */
    class ChannelOutboundBuffer {
        currentProgress(): number;
        bytesBeforeUnwritable(): number;
        getUserDefinedWritability(arg0: number): boolean;
        isEmpty(): boolean;
        isWritable(): boolean;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        nioBufferCount(): number;
        removeBytes(arg0: number): void;
        addMessage(arg0: any, arg1: number, arg2: Internal.ChannelPromise_): void;
        remove(): boolean;
        remove(arg0: Internal.Throwable_): boolean;
        addFlush(): void;
        totalPendingWriteBytes(): number;
        forEachFlushedMessage(arg0: Internal.ChannelOutboundBuffer$MessageProcessor_): void;
        current(): any;
        setUserDefinedWritability(arg0: number, arg1: boolean): void;
        size(): number;
        nioBufferSize(): number;
        recycle(): void;
        progress(arg0: number): void;
        bytesBeforeWritable(): number;
        get empty(): boolean;
        get writable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChannelOutboundBuffer_ = ChannelOutboundBuffer;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.util.TooltipList
    */
    class TooltipList {
        add(component: net.minecraft.network.chat.Component_): void;
        blankLine(): void;
        string(text: string): void;
        styledTranslate(key: string, style: Internal.Style_, ... objects: any[]): void;
        styledString(text: string, color: Internal.ChatFormatting_): void;
        styledString(text: string, style: Internal.Style_): void;
        reset(): void;
        shouldRender(): boolean;
        render(mStack: Internal.PoseStack_, mouseX: number, mouseY: number, screenWidth: number, screenHeight: number, font: net.minecraft.client.gui.Font_): void;
        translate(key: string, ... objects: any[]): void;
        "backgroundColor" : number;
        "yOffset" : number;
        "zOffsetItemTooltip" : number;
        "xOffset" : number;
        "zOffset" : number;
        "borderColorStart" : number;
        "borderColorEnd" : number;
        "maxWidth" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TooltipList_ = TooltipList;
    /**
    * Fired when the gift loot table (cat, villager, etc.) is registering.
    * @javaClass dev.latvian.mods.kubejs.loot.GiftLootEventJS
    */
    class GiftLootEventJS extends Internal.LootEventJS {
        addGift(id: ResourceLocation_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getType(): string;
        getDirectory(): string;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the gift loot table (cat, villager, etc.) is registering.
    */
    type GiftLootEventJS_ = GiftLootEventJS;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityEvent$EnteringSection
    */
    class EntityEvent$EnteringSection extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getOldPos(): Internal.SectionPos;
        getPackedOldPos(): number;
        getNewPos(): Internal.SectionPos;
        getPackedNewPos(): number;
        didChunkChange(): boolean;
        get packedOldPos(): number;
        get listenerList(): Internal.ListenerList;
        get oldPos(): Internal.SectionPos;
        get packedNewPos(): number;
        get newPos(): Internal.SectionPos;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityEvent$EnteringSection_ = EntityEvent$EnteringSection;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.util.BooleanConsumer
    */
    interface BooleanConsumer {
        accept(arg0: boolean): void;
    }
    type BooleanConsumer_ = ((arg0: boolean) => void) | BooleanConsumer;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$ElementType
    */
    class RenderGameOverlayEvent$ElementType extends Internal.Enum<Internal.RenderGameOverlayEvent$ElementType> {
        static valueOf(arg0: string): this;
        static values(): Internal.RenderGameOverlayEvent$ElementType[];
        static readonly "ALL" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "CHAT" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "TEXT" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "BOSSINFO" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "PLAYER_LIST" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "LAYER" : Internal.RenderGameOverlayEvent$ElementType;
        static readonly "DEBUG" : Internal.RenderGameOverlayEvent$ElementType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$ElementType_ = "all" | "bossinfo" | "debug" | "chat" | "text" | "player_list" | "layer" | RenderGameOverlayEvent$ElementType;
    /**
    * @javaClass java.time.zone.ZoneOffsetTransitionRule$TimeDefinition
    */
    class ZoneOffsetTransitionRule$TimeDefinition extends Internal.Enum<Internal.ZoneOffsetTransitionRule$TimeDefinition> {
        static valueOf(arg0: string): this;
        static values(): Internal.ZoneOffsetTransitionRule$TimeDefinition[];
        createDateTime(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_, arg2: Internal.ZoneOffset_): Internal.LocalDateTime;
        static readonly "WALL" : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        static readonly "UTC" : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        static readonly "STANDARD" : Internal.ZoneOffsetTransitionRule$TimeDefinition;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneOffsetTransitionRule$TimeDefinition_ = "standard" | "utc" | "wall" | ZoneOffsetTransitionRule$TimeDefinition;
    /**
    * @javaClass java.util.concurrent.TimeUnit
    */
    class TimeUnit extends Internal.Enum<Internal.TimeUnit> {
        toChronoUnit(): Internal.ChronoUnit;
        timedJoin(arg0: Internal.Thread_, arg1: number): void;
        timedWait(arg0: any, arg1: number): void;
        static valueOf(arg0: string): this;
        static values(): Internal.TimeUnit[];
        convert(arg0: Internal.Duration_): number;
        convert(arg0: number, arg1: Internal.TimeUnit_): number;
        toSeconds(arg0: number): number;
        sleep(arg0: number): void;
        toNanos(arg0: number): number;
        toMinutes(arg0: number): number;
        toHours(arg0: number): number;
        static of(arg0: Internal.ChronoUnit_): this;
        toMillis(arg0: number): number;
        toDays(arg0: number): number;
        toMicros(arg0: number): number;
        static readonly "MILLISECONDS" : Internal.TimeUnit;
        static readonly "MICROSECONDS" : Internal.TimeUnit;
        static readonly "HOURS" : Internal.TimeUnit;
        static readonly "SECONDS" : Internal.TimeUnit;
        static readonly "NANOSECONDS" : Internal.TimeUnit;
        static readonly "DAYS" : Internal.TimeUnit;
        static readonly "MINUTES" : Internal.TimeUnit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TimeUnit_ = "milliseconds" | "seconds" | "hours" | "minutes" | "days" | "nanoseconds" | "microseconds" | TimeUnit;
    /**
    * @javaClass com.prunoideae.recipe.RuneAltarRecipeJS
    */
    class RuneAltarRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RuneAltarRecipeJS_ = RuneAltarRecipeJS;
    /**
    * @javaClass net.minecraft.world.level.material.Fluid
    */
    abstract class Fluid extends Internal.ForgeRegistryEntry<Internal.Fluid> implements Internal.IForgeFluid, Internal.InjectedFluidExtension {
        getAttributes(): Internal.FluidAttributes;
        get attributes(): Internal.FluidAttributes;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Fluid_ = Special.Fluid | Fluid;
    /**
    * @javaClass java.lang.NamedPackage
    */
    class NamedPackage {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NamedPackage_ = NamedPackage;
    /**
    * @javaClass net.minecraft.world.item.context.UseOnContext
    */
    class UseOnContext {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UseOnContext_ = UseOnContext;
    /**
    * @javaClass com.google.common.collect.AbstractMultimap
    */
    abstract class AbstractMultimap <K, V> implements Internal.Multimap<K, V> {
        containsEntry(arg0: any, arg1: any): boolean;
        asMap(): Internal.Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.Collection<V>;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: any, arg1: any): boolean;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        hashCode(): number;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): boolean;
        putAll(arg0: Internal.Multimap_<K, V>): boolean;
        equals(arg0: any): boolean;
        toString(): string;
        keySet(): Internal.Set<K>;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractMultimap_<K, V> = AbstractMultimap<K, V>;
    /**
    * @javaClass net.minecraftforge.common.BiomeDictionary$Type
    */
    class BiomeDictionary$Type {
        static getAll(): Internal.Collection<Internal.BiomeDictionary$Type>;
        getName(): string;
        static getType(arg0: string, ... arg1: Internal.BiomeDictionary$Type_[]): this;
        toString(): string;
        static fromVanilla(arg0: Internal.Biome$BiomeCategory_): this;
        static hasType(arg0: string): boolean;
        static readonly "SNOWY" : Internal.BiomeDictionary$Type;
        static readonly "BEACH" : Internal.BiomeDictionary$Type;
        static readonly "UNDERGROUND" : Internal.BiomeDictionary$Type;
        static readonly "SAVANNA" : Internal.BiomeDictionary$Type;
        static readonly "MESA" : Internal.BiomeDictionary$Type;
        static readonly "RARE" : Internal.BiomeDictionary$Type;
        static readonly "SPOOKY" : Internal.BiomeDictionary$Type;
        static readonly "WET" : Internal.BiomeDictionary$Type;
        static readonly "SPARSE" : Internal.BiomeDictionary$Type;
        static readonly "MOUNTAIN" : Internal.BiomeDictionary$Type;
        static readonly "DRY" : Internal.BiomeDictionary$Type;
        static readonly "RIVER" : Internal.BiomeDictionary$Type;
        static readonly "MAGICAL" : Internal.BiomeDictionary$Type;
        static readonly "NETHER" : Internal.BiomeDictionary$Type;
        static readonly "WATER" : Internal.BiomeDictionary$Type;
        static readonly "DENSE" : Internal.BiomeDictionary$Type;
        static readonly "JUNGLE" : Internal.BiomeDictionary$Type;
        static readonly "SANDY" : Internal.BiomeDictionary$Type;
        static readonly "OCEAN" : Internal.BiomeDictionary$Type;
        static readonly "HILLS" : Internal.BiomeDictionary$Type;
        static readonly "HOT" : Internal.BiomeDictionary$Type;
        static readonly "FOREST" : Internal.BiomeDictionary$Type;
        static readonly "MUSHROOM" : Internal.BiomeDictionary$Type;
        static readonly "OVERWORLD" : Internal.BiomeDictionary$Type;
        static readonly "PLATEAU" : Internal.BiomeDictionary$Type;
        static readonly "PLAINS" : Internal.BiomeDictionary$Type;
        static readonly "SWAMP" : Internal.BiomeDictionary$Type;
        static readonly "PEAK" : Internal.BiomeDictionary$Type;
        static readonly "END" : Internal.BiomeDictionary$Type;
        static readonly "COLD" : Internal.BiomeDictionary$Type;
        static readonly "DEAD" : Internal.BiomeDictionary$Type;
        static readonly "MODIFIED" : Internal.BiomeDictionary$Type;
        static readonly "VOID" : Internal.BiomeDictionary$Type;
        static readonly "LUSH" : Internal.BiomeDictionary$Type;
        static readonly "CONIFEROUS" : Internal.BiomeDictionary$Type;
        static readonly "SLOPE" : Internal.BiomeDictionary$Type;
        static readonly "WASTELAND" : Internal.BiomeDictionary$Type;
        get all(): Internal.Collection<Internal.BiomeDictionary$Type>;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeDictionary$Type_ = BiomeDictionary$Type;
    /**
    * @javaClass net.minecraft.world.level.BaseSpawner
    */
    abstract class BaseSpawner {
        getSpawnerEntity(): Internal.Entity;
        getSpawnerBlockEntity(): Internal.BlockEntity;
        get spawnerEntity(): Internal.Entity;
        get spawnerBlockEntity(): Internal.BlockEntity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseSpawner_ = BaseSpawner;
    /**
    * @javaClass java.time.chrono.AbstractChronology
    */
    abstract class AbstractChronology implements Internal.Chronology {
        resolveDate(arg0: Internal.Map_<Internal.TemporalField_, number>, arg1: Internal.ResolverStyle_): Internal.ChronoLocalDate;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        compareTo(arg0: Internal.Chronology_): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractChronology_ = AbstractChronology;
    /**
    * @javaClass com.mojang.blaze3d.vertex.BufferBuilder
    */
    class BufferBuilder extends Internal.DefaultedVertexConsumer implements Internal.BufferVertexConsumer, Internal.BufferBuilderExtension {
        flywheel$getVertices(): number;
        flywheel$injectForRender(arg0: Internal.ByteBuffer_, arg1: Internal.VertexFormat_, arg2: number): void;
        flywheel$freeBuffer(): void;
        getVertexFormat(): Internal.VertexFormat;
        putBulkData(arg0: Internal.ByteBuffer_): void;
        flywheel$appendBufferUnsafe(arg0: Internal.ByteBuffer_): void;
        get vertexFormat(): Internal.VertexFormat;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferBuilder_ = BufferBuilder;
    /**
    * @javaClass java.nio.file.spi.FileSystemProvider
    */
    abstract class FileSystemProvider {
        isSameFile(arg0: Internal.Path_, arg1: Internal.Path_): boolean;
        getFileStore(arg0: Internal.Path_): Internal.FileStore;
        newByteChannel(arg0: Internal.Path_, arg1: Internal.Set_<Internal.OpenOption_>, ... arg2: any[]): Internal.SeekableByteChannel;
        newAsynchronousFileChannel(arg0: Internal.Path_, arg1: Internal.Set_<Internal.OpenOption_>, arg2: Internal.ExecutorService_, ... arg3: any[]): Internal.AsynchronousFileChannel;
        getFileAttributeView<V>(arg0: Internal.Path_, arg1: Internal.Class_<V>, ... arg2: any[]): V;
        createSymbolicLink(arg0: Internal.Path_, arg1: Internal.Path_, ... arg2: any[]): void;
        static installedProviders(): Internal.List<Internal.FileSystemProvider>;
        delete(arg0: Internal.Path_): void;
        createLink(arg0: Internal.Path_, arg1: Internal.Path_): void;
        setAttribute(arg0: Internal.Path_, arg1: string, arg2: any, ... arg3: any[]): void;
        newFileChannel(arg0: Internal.Path_, arg1: Internal.Set_<Internal.OpenOption_>, ... arg2: any[]): Internal.FileChannel;
        newInputStream(arg0: Internal.Path_, ... arg1: Internal.OpenOption_[]): Internal.InputStream;
        readAttributes<A>(arg0: Internal.Path_, arg1: Internal.Class_<A>, ... arg2: any[]): A;
        readAttributes(arg0: Internal.Path_, arg1: string, ... arg2: any[]): Internal.Map<string, any>;
        newOutputStream(arg0: Internal.Path_, ... arg1: Internal.OpenOption_[]): Internal.OutputStream;
        getPath(arg0: Internal.URI_): Internal.Path;
        createDirectory(arg0: Internal.Path_, ... arg1: any[]): void;
        copy(arg0: Internal.Path_, arg1: Internal.Path_, ... arg2: any[]): void;
        move(arg0: Internal.Path_, arg1: Internal.Path_, ... arg2: any[]): void;
        getScheme(): string;
        newFileSystem(arg0: Internal.URI_, arg1: Internal.Map_<string, any>): Internal.FileSystem;
        newFileSystem(arg0: Internal.Path_, arg1: Internal.Map_<string, any>): Internal.FileSystem;
        deleteIfExists(arg0: Internal.Path_): boolean;
        newDirectoryStream(arg0: Internal.Path_, arg1: Internal.DirectoryStream$Filter_<Internal.Path_>): Internal.DirectoryStream<Internal.Path>;
        getFileSystem(arg0: Internal.URI_): Internal.FileSystem;
        checkAccess(arg0: Internal.Path_, ... arg1: any[]): void;
        readSymbolicLink(arg0: Internal.Path_): Internal.Path;
        isHidden(arg0: Internal.Path_): boolean;
        get scheme(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileSystemProvider_ = FileSystemProvider;
    /**
    * @javaClass java.lang.constant.DirectMethodHandleDesc
    */
    interface DirectMethodHandleDesc extends Internal.MethodHandleDesc {
        owner(): Internal.ClassDesc;
        kind(): Internal.DirectMethodHandleDesc$Kind;
        refKind(): number;
        isOwnerInterface(): boolean;
        lookupDescriptor(): string;
        methodName(): string;
    }
    type DirectMethodHandleDesc_ = DirectMethodHandleDesc;
    /**
    * @javaClass net.minecraftforge.client.event.RenderNameplateEvent
    */
    class RenderNameplateEvent extends Internal.EntityEvent {
        getEntityRenderer(): Internal.EntityRenderer<any>;
        getPartialTick(): number;
        getListenerList(): Internal.ListenerList;
        getMultiBufferSource(): Internal.MultiBufferSource;
        setContent(arg0: net.minecraft.network.chat.Component_): void;
        getContent(): net.minecraft.network.chat.Component;
        hasResult(): boolean;
        getOriginalContent(): net.minecraft.network.chat.Component;
        getPackedLight(): number;
        getPoseStack(): Internal.PoseStack;
        get entityRenderer(): Internal.EntityRenderer<any>;
        get multiBufferSource(): Internal.MultiBufferSource;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get content(): net.minecraft.network.chat.Component;
        get originalContent(): net.minecraft.network.chat.Component;
        get partialTick(): number;
        get packedLight(): number;
        set content(arg0: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderNameplateEvent_ = RenderNameplateEvent;
    /**
    * @javaClass net.minecraft.world.level.pathfinder.BlockPathTypes
    */
    class BlockPathTypes extends Internal.Enum<Internal.BlockPathTypes> {
        static valueOf(arg0: string): this;
        static values(): Internal.BlockPathTypes[];
        getDanger(): this;
        static readonly "DAMAGE_CACTUS" : Internal.BlockPathTypes;
        static readonly "LAVA" : Internal.BlockPathTypes;
        static readonly "DANGER_POWDER_SNOW" : Internal.BlockPathTypes;
        static readonly "LEAVES" : Internal.BlockPathTypes;
        static readonly "BLOCKED" : Internal.BlockPathTypes;
        static readonly "WALKABLE" : Internal.BlockPathTypes;
        static readonly "DANGER_CACTUS" : Internal.BlockPathTypes;
        static readonly "TRAPDOOR" : Internal.BlockPathTypes;
        static readonly "BREACH" : Internal.BlockPathTypes;
        static readonly "POWDER_SNOW" : Internal.BlockPathTypes;
        static readonly "DOOR_WOOD_CLOSED" : Internal.BlockPathTypes;
        static readonly "DANGER_FIRE" : Internal.BlockPathTypes;
        static readonly "DAMAGE_FIRE" : Internal.BlockPathTypes;
        static readonly "WATER" : Internal.BlockPathTypes;
        static readonly "WATER_BORDER" : Internal.BlockPathTypes;
        static readonly "WALKABLE_DOOR" : Internal.BlockPathTypes;
        static readonly "DOOR_IRON_CLOSED" : Internal.BlockPathTypes;
        static readonly "FENCE" : Internal.BlockPathTypes;
        static readonly "OPEN" : Internal.BlockPathTypes;
        static readonly "RAIL" : Internal.BlockPathTypes;
        static readonly "DAMAGE_OTHER" : Internal.BlockPathTypes;
        static readonly "DOOR_OPEN" : Internal.BlockPathTypes;
        static readonly "UNPASSABLE_RAIL" : Internal.BlockPathTypes;
        static readonly "COCOA" : Internal.BlockPathTypes;
        static readonly "DANGER_OTHER" : Internal.BlockPathTypes;
        static readonly "STICKY_HONEY" : Internal.BlockPathTypes;
        get danger(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockPathTypes_ = "damage_fire" | "damage_cactus" | "water_border" | "unpassable_rail" | "lava" | "door_open" | "blocked" | "leaves" | "danger_other" | "sticky_honey" | "damage_other" | "walkable_door" | "danger_fire" | "breach" | "danger_powder_snow" | "walkable" | "rail" | "water" | "cocoa" | "powder_snow" | "door_iron_closed" | "door_wood_closed" | "danger_cactus" | "trapdoor" | "fence" | "open" | BlockPathTypes;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.RewardType$GuiProvider
    */
    interface RewardType$GuiProvider {
        openCreationGui(arg0: Internal.Runnable_, arg1: Internal.Quest_, arg2: Internal.Consumer_<Internal.Reward_>): void;
    }
    type RewardType$GuiProvider_ = ((arg0: Internal.Runnable, arg1: Internal.Quest, arg2: Internal.Consumer<Internal.Reward>) => void) | RewardType$GuiProvider;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.PlayerAdvancementEventJS
    */
    class PlayerAdvancementEventJS extends Internal.PlayerEventJS {
        getAdvancement(): Internal.AdvancementJS;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get advancement(): Internal.AdvancementJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerAdvancementEventJS_ = PlayerAdvancementEventJS;
    /**
    * @javaClass javax.accessibility.AccessibleTable
    */
    interface AccessibleTable {
        getAccessibleRowHeader(): this;
        getSelectedAccessibleRows(): number[];
        getAccessibleColumnHeader(): this;
        getAccessibleColumnDescription(arg0: number): Internal.Accessible;
        getAccessibleSummary(): Internal.Accessible;
        setAccessibleRowDescription(arg0: number, arg1: Internal.Accessible_): void;
        setAccessibleColumnHeader(arg0: Internal.AccessibleTable_): void;
        getAccessibleRowDescription(arg0: number): Internal.Accessible;
        getAccessibleAt(arg0: number, arg1: number): Internal.Accessible;
        getSelectedAccessibleColumns(): number[];
        setAccessibleRowHeader(arg0: Internal.AccessibleTable_): void;
        getAccessibleRowExtentAt(arg0: number, arg1: number): number;
        getAccessibleColumnCount(): number;
        setAccessibleCaption(arg0: Internal.Accessible_): void;
        getAccessibleColumnExtentAt(arg0: number, arg1: number): number;
        getAccessibleRowCount(): number;
        isAccessibleSelected(arg0: number, arg1: number): boolean;
        setAccessibleColumnDescription(arg0: number, arg1: Internal.Accessible_): void;
        isAccessibleColumnSelected(arg0: number): boolean;
        getAccessibleCaption(): Internal.Accessible;
        setAccessibleSummary(arg0: Internal.Accessible_): void;
        isAccessibleRowSelected(arg0: number): boolean;
    }
    type AccessibleTable_ = AccessibleTable;
    /**
    * @javaClass java.nio.channels.GatheringByteChannel
    */
    interface GatheringByteChannel extends Internal.WritableByteChannel {
        write(arg0: Internal.ByteBuffer_[], arg1: number, arg2: number): number;
        write(arg0: Internal.ByteBuffer_[]): number;
    }
    type GatheringByteChannel_ = GatheringByteChannel;
    /**
    * @javaClass java.lang.ThreadGroup
    */
    class ThreadGroup implements Internal.Thread$UncaughtExceptionHandler {
        setMaxPriority(arg0: number): void;
        suspend(): void;
        activeCount(): number;
        resume(): void;
        getParent(): this;
        getName(): string;
        isDestroyed(): boolean;
        destroy(): void;
        parentOf(arg0: Internal.ThreadGroup_): boolean;
        list(): void;
        checkAccess(): void;
        setDaemon(arg0: boolean): void;
        allowThreadSuspension(arg0: boolean): boolean;
        getMaxPriority(): number;
        stop(): void;
        isDaemon(): boolean;
        interrupt(): void;
        activeGroupCount(): number;
        uncaughtException(arg0: Internal.Thread_, arg1: Internal.Throwable_): void;
        enumerate(arg0: Internal.ThreadGroup_[], arg1: boolean): number;
        enumerate(arg0: Internal.ThreadGroup_[]): number;
        enumerate(arg0: Internal.Thread_[]): number;
        enumerate(arg0: Internal.Thread_[], arg1: boolean): number;
        toString(): string;
        get parent(): this;
        get destroyed(): boolean;
        get maxPriority(): number;
        get name(): string;
        get daemon(): boolean;
        set maxPriority(arg0: number);
        set daemon(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ThreadGroup_ = ThreadGroup;
    /**
    * @javaClass io.netty.channel.MessageSizeEstimator$Handle
    */
    interface MessageSizeEstimator$Handle {
        size(arg0: any): number;
    }
    type MessageSizeEstimator$Handle_ = ((arg0: any) => number) | MessageSizeEstimator$Handle;
    /**
    * @javaClass net.minecraft.client.gui.screens.Screen
    */
    abstract class Screen extends Internal.AbstractContainerEventHandler implements Internal.Widget, Internal.AccessorScreen {
        renderComponentTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<Internal.FormattedText_>, arg2: number, arg3: number, arg4: net.minecraft.client.gui.Font_): void;
        renderComponentTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<Internal.FormattedText_>, arg2: number, arg3: number, arg4: net.minecraft.client.gui.Font_, arg5: Internal.ItemStack_): void;
        renderComponentTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<Internal.FormattedText_>, arg2: number, arg3: number, arg4: Internal.ItemStack_): void;
        renderTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<Internal.FormattedCharSequence_>, arg2: number, arg3: number, arg4: net.minecraft.client.gui.Font_): void;
        renderTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<net.minecraft.network.chat.Component_>, arg2: Internal.Optional_<Internal.TooltipComponent_>, arg3: number, arg4: number, arg5: Internal.ItemStack_): void;
        renderTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<net.minecraft.network.chat.Component_>, arg2: Internal.Optional_<Internal.TooltipComponent_>, arg3: number, arg4: number, arg5: net.minecraft.client.gui.Font_): void;
        renderTooltip(arg0: Internal.PoseStack_, arg1: Internal.List_<net.minecraft.network.chat.Component_>, arg2: Internal.Optional_<Internal.TooltipComponent_>, arg3: number, arg4: number, arg5: net.minecraft.client.gui.Font_, arg6: Internal.ItemStack_): void;
        handler$zcb000$getTooltipFromItem(arg0: Internal.ItemStack_, arg1: Internal.CallbackInfoReturnable_<any>): void;
        getMinecraft(): Internal.Minecraft;
        get minecraft(): Internal.Minecraft;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Screen_ = Screen;
    /**
    * @javaClass io.netty.channel.MessageSizeEstimator
    */
    interface MessageSizeEstimator {
        newHandle(): Internal.MessageSizeEstimator$Handle;
    }
    type MessageSizeEstimator_ = (() => Internal.MessageSizeEstimator$Handle) | MessageSizeEstimator;
    /**
    * @javaClass com.jozufozu.flywheel.event.RenderLayerEvent
    */
    class RenderLayerEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.ClientLevel;
        getCamX(): number;
        getType(): Internal.RenderType;
        getViewProjection(): Internal.Matrix4f;
        getLayer(): Internal.RenderLayer;
        toString(): string;
        getCamZ(): number;
        getCamY(): number;
        readonly "viewProjection" : Internal.Matrix4f;
        readonly "stack" : Internal.PoseStack;
        readonly "camY" : number;
        readonly "buffers" : Internal.RenderBuffers;
        readonly "camZ" : number;
        readonly "camX" : number;
        readonly "type" : Internal.RenderType;
        readonly "layer" : Internal.RenderLayer;
        get world(): Internal.ClientLevel;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLayerEvent_ = RenderLayerEvent;
    /**
    * @javaClass com.mojang.datafixers.Products$P15
    */
    class Products$P15 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function15_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function15_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P15_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> = Products$P15<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
    /**
    * @javaClass java.util.function.ToIntFunction
    */
    interface ToIntFunction <T> {
        applyAsInt(arg0: T): number;
    }
    type ToIntFunction_<T> = ((arg0: T) => number) | ToIntFunction<T>;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkWatchEvent$Watch
    */
    class ChunkWatchEvent$Watch extends Internal.ChunkWatchEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkWatchEvent$Watch_ = ChunkWatchEvent$Watch;
    /**
    * @javaClass net.minecraftforge.client.event.sound.PlaySoundSourceEvent
    */
    class PlaySoundSourceEvent extends Internal.SoundEvent$SoundSourceEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlaySoundSourceEvent_ = PlaySoundSourceEvent;
    /**
    * @javaClass net.minecraftforge.fml.config.ModConfig
    */
    class ModConfig {
        getSpec<T>(): Internal.IConfigSpec<T>;
        getFullPath(): Internal.Path;
        getType(): Internal.ModConfig$Type;
        getModId(): string;
        save(): void;
        getConfigData(): Internal.CommentedConfig;
        getHandler(): Internal.ConfigFileTypeHandler;
        acceptSyncedConfig(arg0: number[]): void;
        getFileName(): string;
        get fullPath(): Internal.Path;
        get handler(): Internal.ConfigFileTypeHandler;
        get fileName(): string;
        get configData(): Internal.CommentedConfig;
        get type(): Internal.ModConfig$Type;
        get spec(): Internal.IConfigSpec<T>;
        get modId(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModConfig_ = ModConfig;
    /**
    * @javaClass java.util.Locale$IsoCountryCode
    */
    abstract class Locale$IsoCountryCode extends Internal.Enum<Internal.Locale$IsoCountryCode> {
        static valueOf(arg0: string): this;
        static values(): Internal.Locale$IsoCountryCode[];
        static readonly "PART3" : Internal.Locale$IsoCountryCode;
        static readonly "PART1_ALPHA2" : Internal.Locale$IsoCountryCode;
        static readonly "PART1_ALPHA3" : Internal.Locale$IsoCountryCode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Locale$IsoCountryCode_ = "part3" | "part1_alpha2" | "part1_alpha3" | Locale$IsoCountryCode;
    /**
    * @javaClass net.minecraft.network.chat.FormattedText
    */
    interface FormattedText {
        getString(): string;
    }
    type FormattedText_ = FormattedText;
    /**
    * @javaClass io.netty.buffer.ByteBuf
    */
    abstract class ByteBuf implements Internal.ReferenceCounted, Internal.Comparable<Internal.ByteBuf> {
        asReadOnly(): this;
        markReaderIndex(): this;
        getByte(arg0: number): number;
        readDoubleLE(): number;
        writeZero(arg0: number): this;
        resetReaderIndex(): this;
        writeFloat(arg0: number): this;
        setLongLE(arg0: number, arg1: number): this;
        readRetainedSlice(arg0: number): this;
        slice(): this;
        slice(arg0: number, arg1: number): this;
        setDoubleLE(arg0: number, arg1: number): this;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        writeFloatLE(arg0: number): this;
        readInt(): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder_): this;
        writeMedium(arg0: number): this;
        resetWriterIndex(): this;
        writableBytes(): number;
        maxCapacity(): number;
        getUnsignedShort(arg0: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        nioBufferCount(): number;
        setInt(arg0: number, arg1: number): this;
        getInt(arg0: number): number;
        markWriterIndex(): this;
        isReadable(): boolean;
        isReadable(arg0: number): boolean;
        writeBoolean(arg0: boolean): this;
        setIntLE(arg0: number, arg1: number): this;
        writeLongLE(arg0: number): this;
        setShortLE(arg0: number, arg1: number): this;
        retain(arg0: number): this;
        retain(): this;
        isWritable(): boolean;
        isWritable(arg0: number): boolean;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): this;
        readCharSequence(arg0: number, arg1: Internal.Charset_): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(): this;
        copy(arg0: number, arg1: number): this;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number, arg1: boolean): number;
        ensureWritable(arg0: number): this;
        writeInt(arg0: number): this;
        readFloatLE(): number;
        getDoubleLE(arg0: number): number;
        hasArray(): boolean;
        memoryAddress(): number;
        maxFastWritableBytes(): number;
        readableBytes(): number;
        readSlice(arg0: number): this;
        getIntLE(arg0: number): number;
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        nioBuffers(): Internal.ByteBuffer[];
        forEachByteDesc(arg0: Internal.ByteProcessor_): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        skipBytes(arg0: number): this;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: any): boolean;
        setZero(arg0: number, arg1: number): this;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: Internal.OutputStream_, arg1: number): this;
        readBytes(arg0: Internal.ByteBuffer_): this;
        readBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        readBytes(arg0: Internal.GatheringByteChannel_, arg1: number): number;
        readBytes(arg0: number): this;
        readBytes(arg0: Internal.ByteBuf_): this;
        readBytes(arg0: Internal.ByteBuf_, arg1: number): this;
        readBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): this;
        readBytes(arg0: number[], arg1: number, arg2: number): this;
        readBytes(arg0: number[]): this;
        readBoolean(): boolean;
        toString(arg0: number, arg1: number, arg2: Internal.Charset_): string;
        toString(arg0: Internal.Charset_): string;
        toString(): string;
        retainedSlice(): this;
        retainedSlice(arg0: number, arg1: number): this;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): this;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): this;
        getFloatLE(arg0: number): number;
        readerIndex(arg0: number): this;
        readerIndex(): number;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset_): Internal.CharSequence;
        setShort(arg0: number, arg1: number): this;
        compareTo(arg0: Internal.ByteBuf_): number;
        getBytes(arg0: number, arg1: Internal.ByteBuf_): this;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): this;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): this;
        getBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel_, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream_, arg2: number): this;
        getBytes(arg0: number, arg1: number[]): this;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        getBytes(arg0: number, arg1: Internal.ByteBuffer_): this;
        unwrap(): this;
        setDouble(arg0: number, arg1: number): this;
        setChar(arg0: number, arg1: number): this;
        getUnsignedIntLE(arg0: number): number;
        setFloatLE(arg0: number, arg1: number): this;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): this;
        nioBuffer(): Internal.ByteBuffer;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        touch(): this;
        touch(arg0: any): this;
        discardSomeReadBytes(): this;
        duplicate(): this;
        writerIndex(arg0: number): this;
        writerIndex(): number;
        writeCharSequence(arg0: Internal.CharSequence_, arg1: Internal.Charset_): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        retainedDuplicate(): this;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): this;
        readMedium(): number;
        writeBytes(arg0: number[], arg1: number, arg2: number): this;
        writeBytes(arg0: Internal.ByteBuffer_): this;
        writeBytes(arg0: number[]): this;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number): this;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): this;
        writeBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        writeBytes(arg0: Internal.ScatteringByteChannel_, arg1: number): number;
        writeBytes(arg0: Internal.InputStream_, arg1: number): number;
        writeBytes(arg0: Internal.ByteBuf_): this;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        forEachByte(arg0: Internal.ByteProcessor_): number;
        setIndex(arg0: number, arg1: number): this;
        writeShort(arg0: number): this;
        getShortLE(arg0: number): number;
        alloc(): Internal.ByteBufAllocator;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): this;
        writeShortLE(arg0: number): this;
        maxWritableBytes(): number;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): this;
        writeIntLE(arg0: number): this;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence_, arg2: Internal.Charset_): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        setMediumLE(arg0: number, arg1: number): this;
        readIntLE(): number;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): this;
        setBytes(arg0: number, arg1: number[]): this;
        setBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel_, arg2: number): number;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        setBytes(arg0: number, arg1: Internal.ByteBuffer_): this;
        setBytes(arg0: number, arg1: Internal.InputStream_, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuf_): this;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): this;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): this;
        setFloat(arg0: number, arg1: number): this;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): this;
        clear(): this;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): this;
        writeChar(arg0: number): this;
        writeDoubleLE(arg0: number): this;
        isContiguous(): boolean;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        get readable(): boolean;
        get direct(): boolean;
        get readOnly(): boolean;
        get contiguous(): boolean;
        get writable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ByteBuf_ = ByteBuf;
    /**
    * @javaClass net.minecraftforge.forgespi.language.ModFileScanData
    */
    class ModFileScanData {
        getTargets(): Internal.Map<string, Internal.IModLanguageProvider$IModLanguageLoader>;
        addLanguageLoader(arg0: Internal.Map_<string, Internal.IModLanguageProvider$IModLanguageLoader_>): void;
        addModFileInfo(arg0: Internal.IModFileInfo_): void;
        getIModInfoData(): Internal.List<Internal.IModFileInfo>;
        getAnnotations(): Internal.Set<Internal.ModFileScanData$AnnotationData>;
        getClasses(): Internal.Set<Internal.ModFileScanData$ClassData>;
        static interestingAnnotations(): Internal.Predicate<org.objectweb.asm.Type>;
        get classes(): Internal.Set<Internal.ModFileScanData$ClassData>;
        get iModInfoData(): Internal.List<Internal.IModFileInfo>;
        get annotations(): Internal.Set<Internal.ModFileScanData$AnnotationData>;
        get targets(): Internal.Map<string, Internal.IModLanguageProvider$IModLanguageLoader>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModFileScanData_ = ModFileScanData;
    /**
    * @javaClass java.awt.geom.Dimension2D
    */
    abstract class Dimension2D implements Internal.Cloneable {
        getHeight(): number;
        setSize(arg0: number, arg1: number): void;
        setSize(arg0: Internal.Dimension2D_): void;
        clone(): any;
        getWidth(): number;
        get width(): number;
        get height(): number;
        set size(arg0: Internal.Dimension2D_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dimension2D_ = Dimension2D;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.input.MouseButton
    */
    class MouseButton {
        isRight(): boolean;
        isLeft(): boolean;
        hashCode(): number;
        static get(i: number): this;
        getId(): number;
        isMiddle(): boolean;
        static readonly "LEFT" : Internal.MouseButton;
        static readonly "NEXT" : Internal.MouseButton;
        static readonly "RIGHT" : Internal.MouseButton;
        static readonly "BACK" : Internal.MouseButton;
        readonly "id" : number;
        static readonly "MIDDLE" : Internal.MouseButton;
        get middle(): boolean;
        get left(): boolean;
        get right(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MouseButton_ = MouseButton;
    /**
    * @javaClass vazkii.botania.mixin.AccessorRecipeManager
    */
    interface AccessorRecipeManager {
        botania_getAll<C, T>(arg0: Internal.RecipeType_<T>): Internal.Map<ResourceLocation, Internal.Recipe<C>>;
    }
    type AccessorRecipeManager_ = ((arg0: Internal.RecipeType<T>) => Internal.Map<ResourceLocation, Internal.Recipe<C>>) | AccessorRecipeManager;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$StartTracking
    */
    class PlayerEvent$StartTracking extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getTarget(): Internal.Entity;
        get listenerList(): Internal.ListenerList;
        get target(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$StartTracking_ = PlayerEvent$StartTracking;
    /**
    * @javaClass mezz.jei.api.ingredients.IIngredientRenderer
    */
    interface IIngredientRenderer <T> {
        getHeight(): number;
        getTooltip(arg0: T, arg1: Internal.TooltipFlag_): Internal.List<net.minecraft.network.chat.Component>;
        getFontRenderer(arg0: Internal.Minecraft_, arg1: T): net.minecraft.client.gui.Font;
        getWidth(): number;
        render(arg0: Internal.PoseStack_, arg1: number, arg2: number, arg3: T): void;
        render(arg0: Internal.PoseStack_, arg1: T): void;
    }
    type IIngredientRenderer_<T> = ((arg0: T, arg1: Internal.TooltipFlag) => Internal.List<net.minecraft.network.chat.Component>) | IIngredientRenderer<T>;
    /**
    * @javaClass java.util.Vector
    */
    class Vector <E> extends Internal.AbstractList<E> implements Internal.List<E>, Internal.RandomAccess, Internal.Cloneable, Internal.Serializable {
        firstElement(): E;
        replaceAll(arg0: Internal.UnaryOperator_<E>): void;
        remove(arg0: number): E;
        remove(arg0: any): boolean;
        capacity(): number;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        iterator(): Internal.Iterator<E>;
        setSize(arg0: number): void;
        setElementAt(arg0: E, arg1: number): void;
        hashCode(): number;
        get(arg0: number): E;
        removeElementAt(arg0: number): void;
        elementAt(arg0: number): E;
        toArray<T>(arg0: T[]): T[];
        toArray(): any[];
        indexOf(arg0: any): number;
        indexOf(arg0: any, arg1: number): number;
        removeAllElements(): void;
        add(arg0: E): boolean;
        add(arg0: number, arg1: E): void;
        subList(arg0: number, arg1: number): Internal.List<E>;
        trimToSize(): void;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: Internal.Consumer_<E>): void;
        copyInto(arg0: any[]): void;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator_<E>): void;
        removeIf(arg0: Internal.Predicate_<E>): boolean;
        lastIndexOf(arg0: any, arg1: number): number;
        lastIndexOf(arg0: any): number;
        contains(arg0: any): boolean;
        insertElementAt(arg0: E, arg1: number): void;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection_<E>): boolean;
        addAll(arg0: Internal.Collection_<E>): boolean;
        lastElement(): E;
        elements(): Internal.Enumeration<E>;
        equals(arg0: any): boolean;
        clone(): any;
        listIterator(): Internal.ListIterator<E>;
        listIterator(arg0: number): Internal.ListIterator<E>;
        toString(): string;
        addElement(arg0: E): void;
        ensureCapacity(arg0: number): void;
        removeElement(arg0: any): boolean;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Vector_<E> = Vector<E>;
    /**
    * @javaClass dev.latvian.mods.rhino.SymbolScriptable
    */
    interface SymbolScriptable {
        get(arg0: Internal.Symbol_, arg1: Internal.Scriptable_): any;
        has(arg0: Internal.Symbol_, arg1: Internal.Scriptable_): boolean;
        delete(arg0: Internal.Symbol_): void;
        put(arg0: Internal.Symbol_, arg1: Internal.Scriptable_, arg2: any): void;
    }
    type SymbolScriptable_ = SymbolScriptable;
    /**
    * @javaClass com.google.common.collect.ImmutableMultimap$Builder
    */
    class ImmutableMultimap$Builder <K, V> {
        orderKeysBy(arg0: Internal.Comparator_<K>): Internal.ImmutableMultimap$Builder<K, V>;
        build(): Internal.ImmutableMultimap<K, V>;
        orderValuesBy(arg0: Internal.Comparator_<V>): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: Internal.Multimap_<K, V>): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: K, ... arg1: V[]): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): Internal.ImmutableMultimap$Builder<K, V>;
        putAll(arg0: Internal.Iterable_<Internal.Map$Entry_<K, V>>): Internal.ImmutableMultimap$Builder<K, V>;
        put(arg0: Internal.Map$Entry_<K, V>): Internal.ImmutableMultimap$Builder<K, V>;
        put(arg0: K, arg1: V): Internal.ImmutableMultimap$Builder<K, V>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMultimap$Builder_<K, V> = ImmutableMultimap$Builder<K, V>;
    /**
    * @javaClass com.google.gson.JsonElement
    */
    abstract class JsonElement {
        getAsFloat(): number;
        getAsBigInteger(): Internal.BigInteger;
        getAsByte(): number;
        getAsJsonObject(): Internal.JsonObject;
        getAsBigDecimal(): Internal.BigDecimal;
        getAsJsonNull(): Internal.JsonNull;
        getAsNumber(): Internal.Number;
        isJsonNull(): boolean;
        getAsCharacter(): string;
        getAsString(): string;
        isJsonArray(): boolean;
        getAsDouble(): number;
        getAsInt(): number;
        isJsonPrimitive(): boolean;
        deepCopy(): this;
        getAsLong(): number;
        getAsJsonArray(): Internal.JsonArray;
        getAsJsonPrimitive(): Internal.JsonPrimitive;
        isJsonObject(): boolean;
        getAsBoolean(): boolean;
        toString(): string;
        getAsShort(): number;
        get asByte(): number;
        get asBigInteger(): Internal.BigInteger;
        get asJsonObject(): Internal.JsonObject;
        get asCharacter(): string;
        get jsonPrimitive(): boolean;
        get asNumber(): Internal.Number;
        get asBigDecimal(): Internal.BigDecimal;
        get jsonNull(): boolean;
        get asFloat(): number;
        get asLong(): number;
        get asInt(): number;
        get asJsonPrimitive(): Internal.JsonPrimitive;
        get asJsonNull(): Internal.JsonNull;
        get asShort(): number;
        get asDouble(): number;
        get asJsonArray(): Internal.JsonArray;
        get asString(): string;
        get jsonObject(): boolean;
        get jsonArray(): boolean;
        get asBoolean(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JsonElement_ = JsonElement;
    /**
    * @javaClass com.mojang.brigadier.exceptions.BuiltInExceptionProvider
    */
    interface BuiltInExceptionProvider {
        readerExpectedInt(): Internal.SimpleCommandExceptionType;
        readerExpectedBool(): Internal.SimpleCommandExceptionType;
        readerExpectedStartOfQuote(): Internal.SimpleCommandExceptionType;
        dispatcherUnknownArgument(): Internal.SimpleCommandExceptionType;
        integerTooLow(): Internal.Dynamic2CommandExceptionType;
        doubleTooHigh(): Internal.Dynamic2CommandExceptionType;
        readerInvalidLong(): Internal.DynamicCommandExceptionType;
        dispatcherUnknownCommand(): Internal.SimpleCommandExceptionType;
        dispatcherParseException(): Internal.DynamicCommandExceptionType;
        longTooLow(): Internal.Dynamic2CommandExceptionType;
        floatTooLow(): Internal.Dynamic2CommandExceptionType;
        readerExpectedDouble(): Internal.SimpleCommandExceptionType;
        readerInvalidInt(): Internal.DynamicCommandExceptionType;
        readerExpectedLong(): Internal.SimpleCommandExceptionType;
        literalIncorrect(): Internal.DynamicCommandExceptionType;
        doubleTooLow(): Internal.Dynamic2CommandExceptionType;
        floatTooHigh(): Internal.Dynamic2CommandExceptionType;
        readerInvalidEscape(): Internal.DynamicCommandExceptionType;
        readerInvalidBool(): Internal.DynamicCommandExceptionType;
        readerInvalidFloat(): Internal.DynamicCommandExceptionType;
        readerExpectedSymbol(): Internal.DynamicCommandExceptionType;
        dispatcherExpectedArgumentSeparator(): Internal.SimpleCommandExceptionType;
        longTooHigh(): Internal.Dynamic2CommandExceptionType;
        readerInvalidDouble(): Internal.DynamicCommandExceptionType;
        integerTooHigh(): Internal.Dynamic2CommandExceptionType;
        readerExpectedEndOfQuote(): Internal.SimpleCommandExceptionType;
        readerExpectedFloat(): Internal.SimpleCommandExceptionType;
    }
    type BuiltInExceptionProvider_ = BuiltInExceptionProvider;
    /**
    * @javaClass dev.latvian.mods.rhino.IdFunctionObject
    */
    class IdFunctionObject extends Internal.BaseFunction {
        getFunctionName(): string;
        addAsProperty(target: Internal.Scriptable_): void;
        hasTag(tag: any): boolean;
        initFunction(name: string, scope: Internal.Scriptable_): void;
        methodId(): number;
        getTag(): any;
        getArity(): number;
        createObject(cx: Internal.Context_, scope: Internal.Scriptable_): Internal.Scriptable;
        unknown(): Internal.RuntimeException;
        getPrototype(): Internal.Scriptable;
        call(cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        markAsConstructor(prototypeProperty: Internal.Scriptable_): void;
        exportAsScopeProperty(): void;
        getLength(): number;
        get arity(): number;
        get functionName(): string;
        get length(): number;
        get tag(): any;
        get prototype(): Internal.Scriptable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IdFunctionObject_ = IdFunctionObject;
    /**
    * @javaClass net.minecraftforge.common.world.BiomeGenerationSettingsBuilder
    */
    class BiomeGenerationSettingsBuilder extends Internal.BiomeGenerationSettings$Builder {
        getFeatures(arg0: DecorationGenerationStep_): Internal.List<Internal.Holder<Internal.PlacedFeature>>;
        getCarvers(arg0: CarvingGenerationStep_): Internal.List<Internal.Holder<Internal.ConfiguredWorldCarver<any>>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BiomeGenerationSettingsBuilder_ = BiomeGenerationSettingsBuilder;
    /**
    * @javaClass com.jozufozu.flywheel.core.PartialModel
    */
    class PartialModel {
        getLocation(): ResourceLocation;
        static onModelRegistry(arg0: Internal.ModelRegistryEvent_): void;
        get(): Internal.BakedModel;
        static onModelBake(arg0: Internal.ModelBakeEvent_): void;
        get location(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PartialModel_ = PartialModel;
    /**
    * @javaClass java.awt.DisplayMode
    */
    class DisplayMode {
        getRefreshRate(): number;
        getHeight(): number;
        hashCode(): number;
        getBitDepth(): number;
        equals(arg0: Internal.DisplayMode_): boolean;
        equals(arg0: any): boolean;
        toString(): string;
        getWidth(): number;
        static readonly "BIT_DEPTH_MULTI" : -1;
        static readonly "REFRESH_RATE_UNKNOWN" : 0;
        get refreshRate(): number;
        get bitDepth(): number;
        get width(): number;
        get height(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DisplayMode_ = DisplayMode;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ConfigCallback
    */
    interface ConfigCallback {
        save(arg0: boolean): void;
    }
    type ConfigCallback_ = ((arg0: boolean) => void) | ConfigCallback;
    /**
    * @javaClass net.minecraft.world.level.block.state.properties.Property
    */
    abstract class Property <T> {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Property_<T> = Property<T>;
    /**
    * @javaClass dev.architectury.hooks.level.biome.ClimateProperties
    */
    interface ClimateProperties {
        getTemperatureModifier(): Internal.Biome$TemperatureModifier;
        getDownfall(): number;
        getTemperature(): number;
        getPrecipitation(): Internal.Biome$Precipitation;
    }
    type ClimateProperties_ = ClimateProperties;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.StonePressurePlateBlockBuilder
    */
    class StonePressurePlateBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StonePressurePlateBlockBuilder_ = StonePressurePlateBlockBuilder;
    /**
    * @javaClass java.util.concurrent.Callable
    */
    interface Callable <V> {
        call(): V;
    }
    type Callable_<V> = (() => V) | Callable<V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2BooleanFunction
    */
    interface Reference2BooleanFunction <K> extends it.unimi.dsi.fastutil.Function<K, boolean>, Internal.Predicate<K> {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: boolean): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Reference2LongFunction<K>;
        removeBoolean(arg0: any): boolean;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2BooleanFunction;
        getBoolean(arg0: any): boolean;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Reference2FloatFunction<K>;
        test(arg0: K): boolean;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2BooleanFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2BooleanFunction;
    }
    type Reference2BooleanFunction_<K> = ((arg0: any) => boolean) | Reference2BooleanFunction<K>;
    /**
    * @javaClass net.minecraft.world.food.FoodData
    */
    class FoodData {
        eat(arg0: Internal.Item_, arg1: Internal.ItemStack_, arg2: Internal.LivingEntity_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FoodData_ = FoodData;
    /**
    * @javaClass net.minecraft.tags.TagKey
    */
    class TagKey <T> extends Internal.Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TagKey_<T> = TagKey<T>;
    /**
    * @javaClass net.minecraftforge.forgespi.locating.IModFile
    */
    interface IModFile {
        getModFileInfo(): Internal.IModFileInfo;
        findResource(... arg0: string[]): Internal.Path;
        getModInfos(): Internal.List<Internal.IModInfo>;
        getLoaders(): Internal.List<Internal.IModLanguageProvider>;
        getType(): Internal.IModFile$Type;
        getFilePath(): Internal.Path;
        getScanResult(): Internal.ModFileScanData;
        setSecurityStatus(arg0: Internal.SecureJar$Status_): void;
        getLocator(): Internal.IModLocator;
        getSecureJar(): Internal.SecureJar;
        getSubstitutionMap(): Internal.Supplier<Internal.Map<string, any>>;
        getFileName(): string;
    }
    type IModFile_ = IModFile;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ObjectFunction
    */
    interface Long2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.LongFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Long2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Long2ObjectFunction_<V> = ((arg0: number) => V) | Long2ObjectFunction<V>;
    /**
    * @javaClass net.minecraftforge.registries.tags.ITag
    */
    interface ITag <V> extends Internal.Iterable<V> {
        getKey(): Internal.TagKey<V>;
        contains(arg0: V): boolean;
        size(): number;
        isBound(): boolean;
        stream(): Internal.Stream<V>;
        getRandomElement(arg0: Internal.Random_): Internal.Optional<V>;
        isEmpty(): boolean;
    }
    type ITag_<V> = ITag<V>;
    /**
    * @javaClass java.awt.Dialog$ModalExclusionType
    */
    class Dialog$ModalExclusionType extends Internal.Enum<Internal.Dialog$ModalExclusionType> {
        static valueOf(arg0: string): this;
        static values(): Internal.Dialog$ModalExclusionType[];
        static readonly "APPLICATION_EXCLUDE" : Internal.Dialog$ModalExclusionType;
        static readonly "NO_EXCLUDE" : Internal.Dialog$ModalExclusionType;
        static readonly "TOOLKIT_EXCLUDE" : Internal.Dialog$ModalExclusionType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dialog$ModalExclusionType_ = "no_exclude" | "toolkit_exclude" | "application_exclude" | Dialog$ModalExclusionType;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseClickedEvent$Pre
    */
    class ScreenEvent$MouseClickedEvent$Pre extends Internal.ScreenEvent$MouseClickedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseClickedEvent$Pre_ = ScreenEvent$MouseClickedEvent$Pre;
    /**
    * @javaClass java.security.PrivilegedAction
    */
    interface PrivilegedAction <T> {
        run(): T;
    }
    type PrivilegedAction_<T> = (() => T) | PrivilegedAction<T>;
    /**
    * @javaClass java.awt.event.InputEvent
    */
    abstract class InputEvent extends Internal.ComponentEvent {
        isConsumed(): boolean;
        static getModifiersExText(arg0: number): string;
        isControlDown(): boolean;
        isAltGraphDown(): boolean;
        isMetaDown(): boolean;
        static getMaskForButton(arg0: number): number;
        getWhen(): number;
        consume(): void;
        getModifiersEx(): number;
        getModifiers(): number;
        isAltDown(): boolean;
        isShiftDown(): boolean;
        static readonly "BUTTON1_MASK" : 16;
        static readonly "SHIFT_MASK" : 1;
        static readonly "META_DOWN_MASK" : 256;
        static readonly "BUTTON3_DOWN_MASK" : 4096;
        static readonly "SHIFT_DOWN_MASK" : 64;
        static readonly "CTRL_DOWN_MASK" : 128;
        static readonly "ALT_GRAPH_MASK" : 32;
        static readonly "BUTTON2_DOWN_MASK" : 2048;
        static readonly "ALT_GRAPH_DOWN_MASK" : 8192;
        static readonly "BUTTON2_MASK" : 8;
        static readonly "BUTTON3_MASK" : 4;
        static readonly "CTRL_MASK" : 2;
        static readonly "ALT_MASK" : 8;
        static readonly "META_MASK" : 4;
        static readonly "ALT_DOWN_MASK" : 512;
        static readonly "BUTTON1_DOWN_MASK" : 1024;
        get consumed(): boolean;
        get altDown(): boolean;
        get controlDown(): boolean;
        get modifiersEx(): number;
        get shiftDown(): boolean;
        get metaDown(): boolean;
        get modifiers(): number;
        get when(): number;
        get altGraphDown(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent_ = InputEvent;
    /**
    * @javaClass com.jozufozu.flywheel.util.box.CoordinateConsumer
    */
    interface CoordinateConsumer {
        consume(arg0: number, arg1: number, arg2: number): void;
    }
    type CoordinateConsumer_ = ((arg0: number, arg1: number, arg2: number) => void) | CoordinateConsumer;
    /**
    * @javaClass vazkii.botania.mixin.AccessorGoalSelector
    */
    interface AccessorGoalSelector {
        getAvailableGoals(): Internal.Set<Internal.WrappedGoal>;
    }
    type AccessorGoalSelector_ = (() => Internal.Set<Internal.WrappedGoal>) | AccessorGoalSelector;
    /**
    * @javaClass net.minecraft.util.thread.BlockableEventLoop
    */
    abstract class BlockableEventLoop <R> implements Internal.ProfilerMeasured, Internal.ProcessorHandle<R>, Internal.Executor {
        execute(arg0: Internal.Runnable_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockableEventLoop_<R> = BlockableEventLoop<R>;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModInfo$DependencySide
    */
    class IModInfo$DependencySide extends Internal.Enum<Internal.IModInfo$DependencySide> {
        static valueOf(arg0: string): this;
        static values(): Internal.IModInfo$DependencySide[];
        isCorrectSide(): boolean;
        static readonly "SERVER" : Internal.IModInfo$DependencySide;
        static readonly "CLIENT" : Internal.IModInfo$DependencySide;
        static readonly "BOTH" : Internal.IModInfo$DependencySide;
        get correctSide(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IModInfo$DependencySide_ = "server" | "client" | "both" | IModInfo$DependencySide;
    /**
    * @javaClass java.awt.event.HierarchyListener
    */
    interface HierarchyListener extends Internal.EventListener {
        hierarchyChanged(arg0: Internal.HierarchyEvent_): void;
    }
    type HierarchyListener_ = ((arg0: Internal.HierarchyEvent) => void) | HierarchyListener;
    /**
    * @javaClass dev.latvian.mods.rhino.ContextFactory
    */
    class ContextFactory {
        enterContext(): Internal.Context;
        enterContext(cx: Internal.Context_): Internal.Context;
        call<T>(action: Internal.ContextAction_<T>): T;
        isSealed(): boolean;
        seal(): void;
        static getGlobal(): this;
        getApplicationClassLoader(): Internal.ClassLoader;
        removeListener(listener: Internal.ContextFactory$Listener_): void;
        setExtraProperty(key: string, value: any): void;
        getExtraProperty(key: string): any;
        addListener(listener: Internal.ContextFactory$Listener_): void;
        get sealed(): boolean;
        get applicationClassLoader(): Internal.ClassLoader;
        get global(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContextFactory_ = ContextFactory;
    /**
    * @javaClass java.awt.Event
    */
    class Event implements Internal.Serializable {
        controlDown(): boolean;
        shiftDown(): boolean;
        metaDown(): boolean;
        toString(): string;
        translate(arg0: number, arg1: number): void;
        static readonly "DOWN" : 1005;
        static readonly "PRINT_SCREEN" : 1020;
        static readonly "BACK_SPACE" : 8;
        "when" : number;
        static readonly "MOUSE_UP" : 502;
        static readonly "SCROLL_ABSOLUTE" : 605;
        static readonly "KEY_RELEASE" : 402;
        static readonly "MOUSE_DRAG" : 506;
        static readonly "UP" : 1004;
        static readonly "SCROLL_PAGE_UP" : 603;
        "id" : number;
        static readonly "LIST_DESELECT" : 702;
        static readonly "LOAD_FILE" : 1002;
        static readonly "MOUSE_EXIT" : 505;
        static readonly "LEFT" : 1006;
        static readonly "F1" : 1008;
        static readonly "MOUSE_DOWN" : 501;
        static readonly "F2" : 1009;
        static readonly "F3" : 1010;
        static readonly "F4" : 1011;
        static readonly "F5" : 1012;
        static readonly "F6" : 1013;
        static readonly "SAVE_FILE" : 1003;
        static readonly "F7" : 1014;
        static readonly "F8" : 1015;
        static readonly "F9" : 1016;
        static readonly "NUM_LOCK" : 1023;
        static readonly "MOUSE_ENTER" : 504;
        static readonly "SCROLL_END" : 607;
        static readonly "END" : 1001;
        static readonly "INSERT" : 1025;
        static readonly "WINDOW_DEICONIFY" : 204;
        static readonly "GOT_FOCUS" : 1004;
        static readonly "WINDOW_DESTROY" : 201;
        static readonly "SCROLL_BEGIN" : 606;
        static readonly "CAPS_LOCK" : 1022;
        static readonly "SCROLL_LINE_DOWN" : 602;
        static readonly "WINDOW_EXPOSE" : 202;
        "clickCount" : number;
        static readonly "SHIFT_MASK" : 1;
        static readonly "KEY_ACTION" : 403;
        static readonly "ENTER" : 10;
        static readonly "LOST_FOCUS" : 1005;
        "modifiers" : number;
        static readonly "PAUSE" : 1024;
        static readonly "KEY_PRESS" : 401;
        static readonly "DELETE" : 127;
        static readonly "LIST_SELECT" : 701;
        "arg" : any;
        static readonly "CTRL_MASK" : 2;
        static readonly "ALT_MASK" : 8;
        static readonly "RIGHT" : 1007;
        static readonly "WINDOW_MOVED" : 205;
        "key" : number;
        "evt" : Internal.Event;
        static readonly "PGDN" : 1003;
        static readonly "F10" : 1017;
        static readonly "WINDOW_ICONIFY" : 203;
        static readonly "F12" : 1019;
        static readonly "SCROLL_LINE_UP" : 601;
        static readonly "F11" : 1018;
        static readonly "ESCAPE" : 27;
        "target" : any;
        static readonly "MOUSE_MOVE" : 503;
        static readonly "SCROLL_LOCK" : 1021;
        static readonly "TAB" : 9;
        static readonly "PGUP" : 1002;
        static readonly "SCROLL_PAGE_DOWN" : 604;
        static readonly "ACTION_EVENT" : 1001;
        "x" : number;
        "y" : number;
        static readonly "KEY_ACTION_RELEASE" : 404;
        static readonly "META_MASK" : 4;
        static readonly "HOME" : 1000;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Event_ = Event;
    /**
    * @javaClass dev.latvian.mods.rhino.Script
    */
    interface Script {
        exec(arg0: Internal.Context_, arg1: Internal.Scriptable_): any;
    }
    type Script_ = ((arg0: Internal.Context, arg1: Internal.Scriptable) => any) | Script;
    /**
    * @javaClass java.time.temporal.TemporalField
    */
    interface TemporalField {
        resolve(arg0: Internal.Map_<Internal.TemporalField_, number>, arg1: Internal.TemporalAccessor_, arg2: Internal.ResolverStyle_): Internal.TemporalAccessor;
        getBaseUnit(): Internal.TemporalUnit;
        rangeRefinedBy(arg0: Internal.TemporalAccessor_): Internal.ValueRange;
        getDisplayName(arg0: Internal.Locale_): string;
        isTimeBased(): boolean;
        adjustInto<R>(arg0: R, arg1: number): R;
        range(): Internal.ValueRange;
        getRangeUnit(): Internal.TemporalUnit;
        toString(): string;
        isDateBased(): boolean;
        getFrom(arg0: Internal.TemporalAccessor_): number;
        isSupportedBy(arg0: Internal.TemporalAccessor_): boolean;
    }
    type TemporalField_ = TemporalField;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootContextUser
    */
    interface LootContextUser {
    }
    type LootContextUser_ = LootContextUser;
    /**
    * @javaClass com.mojang.math.Vector3f
    */
    class Vector3f {
        setY(arg0: number): void;
        setX(arg0: number): void;
        set(arg0: number[]): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        setZ(arg0: number): void;
        set x(arg0: number);
        set y(arg0: number);
        set z(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Vector3f_ = Vector3f;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$PlayerLoggedInEvent
    */
    class PlayerEvent$PlayerLoggedInEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$PlayerLoggedInEvent_ = PlayerEvent$PlayerLoggedInEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.EntityArrayList
    */
    class EntityArrayList extends Internal.ArrayList<Internal.EntityJS> implements Internal.MessageSender {
        filter(filter: Internal.Predicate_<Internal.EntityJS_>): this;
        sendData(channel: string, data: Internal.CompoundTag_): void;
        getLevel(): Internal.LevelJS;
        setStatusMessage(message: net.minecraft.network.chat.Component_): void;
        getName(): net.minecraft.network.chat.Component;
        getDisplayName(): net.minecraft.network.chat.Component;
        getFirst(): Internal.EntityJS;
        tell(message: net.minecraft.network.chat.Component_): void;
        playSound(id: Internal.SoundEvent_): void;
        playSound(id: Internal.SoundEvent_, volume: number, pitch: number): void;
        runCommand(command: string): number;
        kill(): void;
        runCommandSilent(command: string): number;
        get level(): Internal.LevelJS;
        get displayName(): net.minecraft.network.chat.Component;
        get name(): net.minecraft.network.chat.Component;
        get first(): Internal.EntityJS;
        set statusMessage(message: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityArrayList_ = EntityArrayList;
    /**
    * @javaClass java.io.DataOutputStream
    */
    class DataOutputStream extends Internal.FilterOutputStream implements Internal.DataOutput {
        writeInt(arg0: number): void;
        writeByte(arg0: number): void;
        writeFloat(arg0: number): void;
        writeChar(arg0: number): void;
        writeLong(arg0: number): void;
        writeBytes(arg0: string): void;
        size(): number;
        flush(): void;
        writeUTF(arg0: string): void;
        writeShort(arg0: number): void;
        writeChars(arg0: string): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number): void;
        writeBoolean(arg0: boolean): void;
        writeDouble(arg0: number): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataOutputStream_ = DataOutputStream;
    /**
    * @javaClass dev.latvian.mods.rhino.CustomProperty
    */
    interface CustomProperty {
        get(): any;
    }
    type CustomProperty_ = (() => any) | CustomProperty;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$Pre
    */
    class RenderGameOverlayEvent$Pre extends Internal.RenderGameOverlayEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$Pre_ = RenderGameOverlayEvent$Pre;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorMinecraft
    */
    interface AccessorMinecraft {
        getItemColors(): Internal.ItemColors;
    }
    type AccessorMinecraft_ = (() => Internal.ItemColors) | AccessorMinecraft;
    /**
    * @javaClass java.lang.constant.MethodHandleDesc
    */
    interface MethodHandleDesc extends Internal.ConstantDesc {
        ofMethod(arg0: Internal.DirectMethodHandleDesc$Kind_, arg1: Internal.ClassDesc_, arg2: string, arg3: Internal.MethodTypeDesc_): Internal.DirectMethodHandleDesc;
        invocationType(): Internal.MethodTypeDesc;
        ofConstructor(arg0: Internal.ClassDesc_, ... arg1: Internal.ClassDesc_[]): Internal.DirectMethodHandleDesc;
        of(arg0: Internal.DirectMethodHandleDesc$Kind_, arg1: Internal.ClassDesc_, arg2: string, arg3: string): Internal.DirectMethodHandleDesc;
        equals(arg0: any): boolean;
        ofField(arg0: Internal.DirectMethodHandleDesc$Kind_, arg1: Internal.ClassDesc_, arg2: string, arg3: Internal.ClassDesc_): Internal.DirectMethodHandleDesc;
        asType(arg0: Internal.MethodTypeDesc_): this;
    }
    type MethodHandleDesc_ = MethodHandleDesc;
    /**
    * @javaClass java.util.Stack
    */
    class Stack <E> extends Internal.Vector<E> {
        pop(): E;
        search(arg0: any): number;
        push(arg0: E): E;
        peek(): E;
        empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Stack_<E> = Stack<E>;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkEvent
    */
    class ChunkEvent extends Internal.WorldEvent {
        getListenerList(): Internal.ListenerList;
        getChunk(): Internal.ChunkAccess;
        get listenerList(): Internal.ListenerList;
        get chunk(): Internal.ChunkAccess;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkEvent_ = ChunkEvent;
    /**
    * @javaClass com.mojang.brigadier.context.SuggestionContext
    */
    class SuggestionContext <S> {
        readonly "parent" : Internal.CommandNode<S>;
        readonly "startPos" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SuggestionContext_<S> = SuggestionContext<S>;
    /**
    * @javaClass net.minecraft.client.gui.Gui
    */
    class Gui extends Internal.GuiComponent {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Gui_ = Gui;
    /**
    * @javaClass net.minecraft.world.entity.monster.Enemy
    */
    interface Enemy {
    }
    type Enemy_ = Enemy;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingDestroyBlockEvent
    */
    class LivingDestroyBlockEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getState(): Internal.BlockState;
        getPos(): BlockPos;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get pos(): BlockPos;
        get state(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingDestroyBlockEvent_ = LivingDestroyBlockEvent;
    /**
    * @javaClass java.lang.AutoCloseable
    */
    interface AutoCloseable {
        close(): void;
    }
    type AutoCloseable_ = (() => void) | AutoCloseable;
    /**
    * @javaClass com.jozufozu.flywheel.backend.gl.GlNumericType
    */
    class GlNumericType extends Internal.Enum<Internal.GlNumericType> {
        getGlEnum(): number;
        static valueOf(arg0: string): this;
        castAndBuffer(arg0: Internal.ByteBuffer_, arg1: number): void;
        static values(): Internal.GlNumericType[];
        static byName(arg0: string): this;
        toString(): string;
        getTypeName(): string;
        getByteWidth(): number;
        static readonly "UBYTE" : Internal.GlNumericType;
        static readonly "FLOAT" : Internal.GlNumericType;
        static readonly "BYTE" : Internal.GlNumericType;
        static readonly "USHORT" : Internal.GlNumericType;
        static readonly "UINT" : Internal.GlNumericType;
        static readonly "INT" : Internal.GlNumericType;
        static readonly "SHORT" : Internal.GlNumericType;
        get glEnum(): number;
        get byteWidth(): number;
        get typeName(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GlNumericType_ = "ubyte" | "byte" | "short" | "ushort" | "float" | "uint" | "int" | GlNumericType;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2BooleanFunction
    */
    interface Int2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.IntPredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Int2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2BooleanFunction;
    }
    type Int2BooleanFunction_ = ((arg0: number) => boolean) | Int2BooleanFunction;
    /**
    * @javaClass vazkii.botania.mixin.AccessorSoundType
    */
    interface AccessorSoundType {
        botania_getBreakSound(): Internal.SoundEvent;
    }
    type AccessorSoundType_ = (() => Internal.SoundEvent) | AccessorSoundType;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ArmorItemBuilder$Helmet
    */
    class ArmorItemBuilder$Helmet extends Internal.ArmorItemBuilder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArmorItemBuilder$Helmet_ = ArmorItemBuilder$Helmet;
    /**
    * @javaClass net.minecraftforge.server.permission.handler.IPermissionHandler
    */
    interface IPermissionHandler {
        getOfflinePermission<T>(arg0: Internal.UUID_, arg1: Internal.PermissionNode_<T>, ... arg2: any[]): T;
        getPermission<T>(arg0: Internal.ServerPlayer_, arg1: Internal.PermissionNode_<T>, ... arg2: any[]): T;
        getIdentifier(): ResourceLocation;
        getRegisteredNodes(): Internal.Set<Internal.PermissionNode<any>>;
    }
    type IPermissionHandler_ = IPermissionHandler;
    /**
    * @javaClass java.util.function.IntSupplier
    */
    interface IntSupplier {
        getAsInt(): number;
    }
    type IntSupplier_ = (() => number) | IntSupplier;
    /**
    * @javaClass java.awt.event.ComponentEvent
    */
    class ComponentEvent extends Internal.AWTEvent {
        paramString(): string;
        getComponent(): Internal.Component;
        static readonly "COMPONENT_MOVED" : 100;
        static readonly "COMPONENT_SHOWN" : 102;
        static readonly "COMPONENT_HIDDEN" : 103;
        static readonly "COMPONENT_LAST" : 103;
        static readonly "COMPONENT_FIRST" : 100;
        static readonly "COMPONENT_RESIZED" : 101;
        get component(): Internal.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ComponentEvent_ = ComponentEvent;
    /**
    * @javaClass com.simibubi.create.foundation.utility.IPartialSafeNBT
    */
    interface IPartialSafeNBT {
        writeSafe(arg0: Internal.CompoundTag_): void;
    }
    type IPartialSafeNBT_ = ((arg0: Internal.CompoundTag) => void) | IPartialSafeNBT;
    /**
    * @javaClass dev.architectury.core.RegistryEntry
    */
    class RegistryEntry <T> implements Internal.IForgeRegistryEntry<any> {
        getRegistryType(): typeof T;
        getRegistryName(): ResourceLocation;
        setRegistryName(name: ResourceLocation_): T;
        get registryType(): typeof T;
        get registryName(): ResourceLocation;
        set registryName(name: ResourceLocation_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEntry_<T> = RegistryEntry<T>;
    /**
    * @javaClass java.util.Map$Entry
    */
    interface Map$Entry <K, V> {
        getKey(): K;
        getValue(): V;
        hashCode(): number;
        setValue(arg0: V): V;
        equals(arg0: any): boolean;
        comparingByValue<K, V>(): Internal.Comparator<Internal.Map$Entry<K, V>>;
        comparingByValue<K, V>(arg0: Internal.Comparator_<V>): Internal.Comparator<Internal.Map$Entry<K, V>>;
        copyOf<K, V>(arg0: Internal.Map$Entry_<K, V>): Internal.Map$Entry<K, V>;
        comparingByKey<K, V>(arg0: Internal.Comparator_<K>): Internal.Comparator<Internal.Map$Entry<K, V>>;
        comparingByKey<K, V>(): Internal.Comparator<Internal.Map$Entry<K, V>>;
    }
    type Map$Entry_<K, V> = Map$Entry<K, V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2LongFunction
    */
    interface Long2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Long2FloatFunction;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Long2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2LongFunction;
    }
    type Long2LongFunction_ = ((arg0: number) => number) | Long2LongFunction;
    /**
    * @javaClass java.awt.AttributeValue
    */
    abstract class AttributeValue {
        hashCode(): number;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AttributeValue_ = AttributeValue;
    /**
    * @javaClass java.awt.FocusTraversalPolicy
    */
    abstract class FocusTraversalPolicy {
        getInitialComponent(arg0: Internal.Window_): Internal.Component;
        getComponentBefore(arg0: Internal.Container_, arg1: Internal.Component_): Internal.Component;
        getFirstComponent(arg0: Internal.Container_): Internal.Component;
        getLastComponent(arg0: Internal.Container_): Internal.Component;
        getComponentAfter(arg0: Internal.Container_, arg1: Internal.Component_): Internal.Component;
        getDefaultComponent(arg0: Internal.Container_): Internal.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FocusTraversalPolicy_ = FocusTraversalPolicy;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2BooleanFunction
    */
    interface Short2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.IntPredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Short2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2BooleanFunction;
    }
    type Short2BooleanFunction_ = ((arg0: number) => boolean) | Short2BooleanFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.NameMap
    */
    class NameMap <E> implements Internal.Iterable<E> {
        getPrevious(value: E): E;
        read(data: Internal.FriendlyByteBuf_): E;
        getName(value: E): string;
        getIndex(e: E): number;
        offset(value: E, index: number): E;
        getNullable(s: string): E;
        getColor(value: E): Internal.Color4I;
        getNext(value: E): E;
        withDefault(def: E): Internal.NameMap<E>;
        getIcon(v: E): Internal.Icon;
        iterator(): Internal.Iterator<E>;
        getRandom(rand: Internal.Random_): E;
        size(): number;
        getDisplayName(value: E): net.minecraft.network.chat.Component;
        static of<T>(defaultValue: T, values: Internal.List_<T>): Internal.NameMap$Builder<T>;
        static of<T>(defaultValue: T, values: T[]): Internal.NameMap$Builder<T>;
        get(s: string): E;
        get(index: number): E;
        getStringIndex(s: string): number;
        write(data: Internal.FriendlyByteBuf_, object: E): void;
        readonly "defaultValue" : E;
        readonly "keys" : Internal.List<string>;
        readonly "values" : Internal.List<E>;
        readonly "map" : Internal.Map<string, E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NameMap_<E> = NameMap<E>;
    /**
    * @javaClass com.mojang.serialization.Decoder$Boxed
    */
    interface Decoder$Boxed <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.Dynamic_<T>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
    }
    type Decoder$Boxed_<A> = ((arg0: Internal.Dynamic<T>) => Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>) | Decoder$Boxed<A>;
    /**
    * @javaClass java.awt.LayoutManager
    */
    interface LayoutManager {
        preferredLayoutSize(arg0: Internal.Container_): Internal.Dimension;
        removeLayoutComponent(arg0: Internal.Component_): void;
        minimumLayoutSize(arg0: Internal.Container_): Internal.Dimension;
        layoutContainer(arg0: Internal.Container_): void;
        addLayoutComponent(arg0: string, arg1: Internal.Component_): void;
    }
    type LayoutManager_ = LayoutManager;
    /**
    * @javaClass net.minecraftforge.client.event.sound.SoundEvent$SoundSourceEvent
    */
    class SoundEvent$SoundSourceEvent extends net.minecraftforge.client.event.sound.SoundEvent {
        getListenerList(): Internal.ListenerList;
        getName(): string;
        getChannel(): com.mojang.blaze3d.audio.Channel;
        getSound(): Internal.SoundInstance;
        get listenerList(): Internal.ListenerList;
        get sound(): Internal.SoundInstance;
        get name(): string;
        get channel(): com.mojang.blaze3d.audio.Channel;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundEvent$SoundSourceEvent_ = SoundEvent$SoundSourceEvent;
    /**
    * @javaClass mezz.jei.api.ingredients.ITypedIngredient
    */
    interface ITypedIngredient <T> {
        getIngredient(): T;
        getIngredient<V>(arg0: Internal.IIngredientType_<V>): Internal.Optional<V>;
        getType(): Internal.IIngredientType<T>;
        getItemStack(): Internal.Optional<Internal.ItemStack>;
    }
    type ITypedIngredient_<T> = ITypedIngredient<T>;
    /**
    * @javaClass org.apache.maven.artifact.resolver.filter.ArtifactFilter
    */
    interface ArtifactFilter {
        include(arg0: Internal.Artifact_): boolean;
    }
    type ArtifactFilter_ = ((arg0: Internal.Artifact) => boolean) | ArtifactFilter;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.Movable
    */
    interface Movable {
        drawMoved(matrixStack: Internal.PoseStack_): void;
        getHeight(): number;
        getX(): number;
        move(arg0: Internal.Chapter_, arg1: number, arg2: number): void;
        getY(): number;
        getShape(): string;
        getWidth(): number;
        getChapter(): Internal.Chapter;
    }
    type Movable_ = Movable;
    /**
    * @javaClass dev.latvian.mods.rhino.RhinoException
    */
    abstract class RhinoException extends Internal.RuntimeException {
        getScriptStackTrace(): string;
        getScriptStackTrace(limit: number, functionName: string): string;
        initLineSource(lineSource: string): void;
        printStackTrace(s: Internal.PrintStream_): void;
        printStackTrace(s: Internal.PrintWriter_): void;
        columnNumber(): number;
        getScriptStack(): any[];
        getScriptStack(limit: number, hideFunction: string): any[];
        lineSource(): string;
        initSourceName(sourceName: string): void;
        initColumnNumber(columnNumber: number): void;
        initLineNumber(lineNumber: number): void;
        getMessage(): string;
        details(): string;
        sourceName(): string;
        lineNumber(): number;
        get scriptStack(): any[];
        get scriptStackTrace(): string;
        get message(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RhinoException_ = RhinoException;
    /**
    * @javaClass net.minecraft.world.level.LevelSimulatedRW
    */
    interface LevelSimulatedRW extends Internal.LevelSimulatedReader, Internal.LevelWriter {
    }
    type LevelSimulatedRW_ = LevelSimulatedRW;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.ModifyRecipeCraftingGrid
    */
    class ModifyRecipeCraftingGrid {
        getPlayer(): Internal.PlayerJS<any>;
        getHeight(): number;
        find(ingredient: Internal.IngredientJS_, skip: number): Internal.ItemStackJS;
        find(ingredient: Internal.IngredientJS_): Internal.ItemStackJS;
        getMenu(): Internal.AbstractContainerMenu;
        get(index: number): Internal.ItemStackJS;
        getWidth(): number;
        findAll(): Internal.List<Internal.ItemStackJS>;
        findAll(ingredient: Internal.IngredientJS_): Internal.List<Internal.ItemStackJS>;
        get width(): number;
        get menu(): Internal.AbstractContainerMenu;
        get player(): Internal.PlayerJS<any>;
        get height(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModifyRecipeCraftingGrid_ = ModifyRecipeCraftingGrid;
    /**
    * @javaClass mezz.jei.api.runtime.IIngredientFilter
    */
    interface IIngredientFilter {
        setFilterText(arg0: string): void;
        getFilterText(): string;
        getFilteredItemStacks(): Internal.List<Internal.ItemStack>;
        getFilteredIngredients<T>(arg0: Internal.IIngredientType_<T>): Internal.List<T>;
    }
    type IIngredientFilter_ = IIngredientFilter;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Opens$Modifier
    */
    class ModuleDescriptor$Opens$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Opens$Modifier> {
        static valueOf(arg0: string): this;
        static values(): Internal.ModuleDescriptor$Opens$Modifier[];
        static readonly "SYNTHETIC" : Internal.ModuleDescriptor$Opens$Modifier;
        static readonly "MANDATED" : Internal.ModuleDescriptor$Opens$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Opens$Modifier_ = "synthetic" | "mandated" | ModuleDescriptor$Opens$Modifier;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModInfo$ModVersion
    */
    interface IModInfo$ModVersion {
        getModId(): string;
        getOrdering(): Internal.IModInfo$Ordering;
        getSide(): Internal.IModInfo$DependencySide;
        getVersionRange(): Internal.VersionRange;
        getOwner(): Internal.IModInfo;
        isMandatory(): boolean;
        setOwner(arg0: Internal.IModInfo_): void;
    }
    type IModInfo$ModVersion_ = IModInfo$ModVersion;
    /**
    * @javaClass java.awt.SecondaryLoop
    */
    interface SecondaryLoop {
        exit(): boolean;
        enter(): boolean;
    }
    type SecondaryLoop_ = SecondaryLoop;
    /**
    * @javaClass dev.latvian.mods.kubejs.command.CommandRegistryEventJS
    */
    class CommandRegistryEventJS extends Internal.ServerEventJS {
        isForSinglePlayer(): boolean;
        isForMultiPlayer(): boolean;
        getArguments(): typeof Internal.ArgumentTypeWrapper;
        getCommands(): typeof Internal.Commands;
        getBuiltinSuggestions(): Internal.SharedSuggestionProvider;
        register(command: Internal.LiteralArgumentBuilder_<Internal.CommandSourceStack_>): Internal.LiteralCommandNode<Internal.CommandSourceStack>;
        readonly "selection" : Internal.Commands$CommandSelection;
        readonly "dispatcher" : Internal.CommandDispatcher<Internal.CommandSourceStack>;
        get forSinglePlayer(): boolean;
        get arguments(): typeof Internal.ArgumentTypeWrapper;
        get forMultiPlayer(): boolean;
        get builtinSuggestions(): Internal.SharedSuggestionProvider;
        get commands(): typeof Internal.Commands;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandRegistryEventJS_ = CommandRegistryEventJS;
    /**
    * @javaClass java.awt.Graphics
    */
    abstract class Graphics {
        drawOval(arg0: number, arg1: number, arg2: number, arg3: number): void;
        fillArc(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        getClipRect(): Internal.Rectangle;
        fillRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        translate(arg0: number, arg1: number): void;
        drawString(arg0: string, arg1: number, arg2: number): void;
        drawString(arg0: Internal.AttributedCharacterIterator_, arg1: number, arg2: number): void;
        getFontMetrics(arg0: Internal.Font_): Internal.FontMetrics;
        getFontMetrics(): Internal.FontMetrics;
        draw3DRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
        fillPolygon(arg0: number[], arg1: number[], arg2: number): void;
        fillPolygon(arg0: Internal.Polygon_): void;
        getClipBounds(arg0: Internal.Rectangle_): Internal.Rectangle;
        getClipBounds(): Internal.Rectangle;
        drawChars(arg0: string[], arg1: number, arg2: number, arg3: number, arg4: number): void;
        drawRoundRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        fill3DRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: boolean): void;
        create(arg0: number, arg1: number, arg2: number, arg3: number): this;
        create(): this;
        setClip(arg0: Internal.Shape_): void;
        setClip(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setFont(arg0: Internal.Font_): void;
        drawPolyline(arg0: number[], arg1: number[], arg2: number): void;
        fillRoundRect(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        clipRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        getColor(): Internal.Color;
        drawArc(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        drawLine(arg0: number, arg1: number, arg2: number, arg3: number): void;
        copyArea(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): void;
        drawBytes(arg0: number[], arg1: number, arg2: number, arg3: number, arg4: number): void;
        clearRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: Internal.Color_, arg10: Internal.ImageObserver_): boolean;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.ImageObserver_): boolean;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: Internal.ImageObserver_): boolean;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: Internal.Color_, arg4: Internal.ImageObserver_): boolean;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: Internal.Color_, arg6: Internal.ImageObserver_): boolean;
        drawImage(arg0: Internal.Image_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number, arg9: Internal.ImageObserver_): boolean;
        setPaintMode(): void;
        setColor(arg0: Internal.Color_): void;
        hitClip(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        getClip(): Internal.Shape;
        getFont(): Internal.Font;
        dispose(): void;
        toString(): string;
        finalize(): void;
        fillOval(arg0: number, arg1: number, arg2: number, arg3: number): void;
        drawRect(arg0: number, arg1: number, arg2: number, arg3: number): void;
        setXORMode(arg0: Internal.Color_): void;
        drawPolygon(arg0: number[], arg1: number[], arg2: number): void;
        drawPolygon(arg0: Internal.Polygon_): void;
        get color(): Internal.Color;
        get clipBounds(): Internal.Rectangle;
        get fontMetrics(): Internal.FontMetrics;
        get clip(): Internal.Shape;
        get font(): Internal.Font;
        set color(arg0: Internal.Color_);
        set xORMode(arg0: Internal.Color_);
        set clip(arg0: Internal.Shape_);
        set font(arg0: Internal.Font_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Graphics_ = Graphics;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseDragEvent$Post
    */
    class ScreenEvent$MouseDragEvent$Post extends Internal.ScreenEvent$MouseDragEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseDragEvent$Post_ = ScreenEvent$MouseDragEvent$Post;
    /**
    * @javaClass net.minecraftforge.client.event.MovementInputUpdateEvent
    */
    class MovementInputUpdateEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getInput(): Internal.Input;
        get input(): Internal.Input;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MovementInputUpdateEvent_ = MovementInputUpdateEvent;
    /**
    * @javaClass net.minecraftforge.eventbus.api.EventPriority
    */
    class EventPriority extends Internal.Enum<Internal.EventPriority> implements Internal.IEventListener {
        static valueOf(arg0: string): this;
        static values(): Internal.EventPriority[];
        invoke(arg0: net.minecraftforge.eventbus.api.Event_): void;
        static readonly "LOWEST" : Internal.EventPriority;
        static readonly "HIGH" : Internal.EventPriority;
        static readonly "LOW" : Internal.EventPriority;
        static readonly "HIGHEST" : Internal.EventPriority;
        static readonly "NORMAL" : Internal.EventPriority;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventPriority_ = "normal" | "high" | "highest" | "low" | "lowest" | EventPriority;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.DefaultChapterGroup
    */
    class DefaultChapterGroup extends Internal.ChapterGroup {
        getAltTitle(): net.minecraft.network.chat.Component;
        getAltIcon(): Internal.Icon;
        get altTitle(): net.minecraft.network.chat.Component;
        get altIcon(): Internal.Icon;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DefaultChapterGroup_ = DefaultChapterGroup;
    /**
    * @javaClass net.minecraft.client.renderer.texture.TextureAtlasSprite
    */
    class TextureAtlasSprite implements Internal.AutoCloseable {
        getPixelRGBA(arg0: number, arg1: number, arg2: number): number;
        toString(): string;
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextureAtlasSprite_ = TextureAtlasSprite;
    /**
    * @javaClass com.mojang.serialization.MapLike
    */
    interface MapLike <T> {
        entries(): Internal.Stream<com.mojang.datafixers.util.Pair<T, T>>;
        get(arg0: T): T;
        get(arg0: string): T;
        forMap<T>(arg0: Internal.Map_<T, T>, arg1: Internal.DynamicOps_<T>): Internal.MapLike<T>;
    }
    type MapLike_<T> = MapLike<T>;
    /**
    * @javaClass java.nio.Buffer
    */
    abstract class Buffer {
        hasArray(): boolean;
        hasRemaining(): boolean;
        clear(): this;
        duplicate(): this;
        remaining(): number;
        capacity(): number;
        isReadOnly(): boolean;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): any;
        limit(arg0: number): this;
        limit(): number;
        reset(): this;
        arrayOffset(): number;
        position(): number;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        mark(): this;
        get direct(): boolean;
        get readOnly(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Buffer_ = Buffer;
    /**
    * @javaClass dev.latvian.mods.kubejs.RegistryObjectBuilderTypes
    */
    class RegistryObjectBuilderTypes <T> {
        static add<T>(key: Internal.ResourceKey_<Internal.Registry_<T>>, baseClass: Internal.Class_<any>): Internal.RegistryObjectBuilderTypes<T>;
        addType(type: string, builderType: Internal.Class_<Internal.BuilderBase_<T>>, factory: Internal.RegistryObjectBuilderTypes$BuilderFactory_<T>, isDefault: boolean): void;
        addType(type: string, builderType: Internal.Class_<Internal.BuilderBase_<T>>, factory: Internal.RegistryObjectBuilderTypes$BuilderFactory_<T>): void;
        bypassServerOnly(): Internal.RegistryObjectBuilderTypes<T>;
        addBuilder(builder: Internal.BuilderBase_<T>): void;
        getCurrent(): Internal.BuilderBase<T>;
        getDefaultType(): Internal.RegistryObjectBuilderTypes$BuilderType<T>;
        static readonly "BLOCK_ENTITY_TYPE" : Internal.RegistryObjectBuilderTypes<Internal.BlockEntityType<any>>;
        static readonly "CUSTOM_STAT" : Internal.RegistryObjectBuilderTypes<ResourceLocation>;
        static readonly "ENCHANTMENT" : Internal.RegistryObjectBuilderTypes<Internal.Enchantment>;
        static readonly "POINT_OF_INTEREST_TYPE" : Internal.RegistryObjectBuilderTypes<Internal.PoiType>;
        readonly "types" : Internal.Map<string, Internal.RegistryObjectBuilderTypes$BuilderType<T>>;
        static readonly "MOTIVE" : Internal.RegistryObjectBuilderTypes<Internal.Motive>;
        static readonly "VILLAGER_TYPE" : Internal.RegistryObjectBuilderTypes<Internal.VillagerType>;
        static readonly "ALL_BUILDERS" : [undefined, undefined, undefined, undefined, undefined];
        static readonly "PARTICLE_TYPE" : Internal.RegistryObjectBuilderTypes<Internal.ParticleType<any>>;
        readonly "objects" : Internal.Map<ResourceLocation, Internal.BuilderBase<T>>;
        static readonly "BLOCK" : Internal.RegistryObjectBuilderTypes<Internal.Block>;
        static readonly "ENTITY_TYPE" : Internal.RegistryObjectBuilderTypes<Internal.EntityType<any>>;
        readonly "registryKey" : Internal.ResourceKey<Internal.Registry<T>>;
        static readonly "ITEM" : Internal.RegistryObjectBuilderTypes<Internal.Item>;
        readonly "objectBaseClass" : typeof T;
        static readonly "VILLAGER_PROFESSION" : Internal.RegistryObjectBuilderTypes<Internal.VillagerProfession>;
        "current" : Internal.BuilderBase<T>;
        static readonly "FLUID" : Internal.RegistryObjectBuilderTypes<Internal.Fluid>;
        static readonly "SOUND_EVENT" : Internal.RegistryObjectBuilderTypes<Internal.SoundEvent>;
        static readonly "POTION" : Internal.RegistryObjectBuilderTypes<Internal.Potion>;
        readonly "deferredRegister" : Internal.DeferredRegister<T>;
        static readonly "MOB_EFFECT" : Internal.RegistryObjectBuilderTypes<Internal.MobEffect>;
        static readonly "MAP" : {};
        get defaultType(): Internal.RegistryObjectBuilderTypes$BuilderType<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryObjectBuilderTypes_<T> = RegistryObjectBuilderTypes<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.EnchantmentBuilder$DamageProtectionFunction
    */
    interface EnchantmentBuilder$DamageProtectionFunction {
        getDamageProtection(arg0: number, arg1: Internal.DamageSource_): number;
    }
    type EnchantmentBuilder$DamageProtectionFunction_ = ((arg0: number, arg1: Internal.DamageSource) => number) | EnchantmentBuilder$DamageProtectionFunction;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModInfo$Ordering
    */
    class IModInfo$Ordering extends Internal.Enum<Internal.IModInfo$Ordering> {
        static valueOf(arg0: string): this;
        static values(): Internal.IModInfo$Ordering[];
        static readonly "BEFORE" : Internal.IModInfo$Ordering;
        static readonly "AFTER" : Internal.IModInfo$Ordering;
        static readonly "NONE" : Internal.IModInfo$Ordering;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IModInfo$Ordering_ = "before" | "after" | "none" | IModInfo$Ordering;
    /**
    * @javaClass java.util.function.DoubleFunction
    */
    interface DoubleFunction <R> {
        apply(arg0: number): R;
    }
    type DoubleFunction_<R> = ((arg0: number) => R) | DoubleFunction<R>;
    /**
    * @javaClass net.minecraft.world.entity.SpawnPlacements$Type
    */
    class SpawnPlacements$Type extends Internal.Enum<Internal.SpawnPlacements$Type> implements Internal.IExtensibleEnum {
        canSpawnAt(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.EntityType_<any>): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.SpawnPlacements$Type[];
        static create(arg0: string, arg1: Internal.TriPredicate_<Internal.LevelReader_, BlockPos_, Internal.EntityType_<Internal.Mob_>>): this;
        static readonly "IN_LAVA" : Internal.SpawnPlacements$Type;
        static readonly "IN_WATER" : Internal.SpawnPlacements$Type;
        static readonly "ON_GROUND" : Internal.SpawnPlacements$Type;
        static readonly "NO_RESTRICTIONS" : Internal.SpawnPlacements$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SpawnPlacements$Type_ = "no_restrictions" | "in_lava" | "on_ground" | "in_water" | SpawnPlacements$Type;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorModelManager
    */
    interface AccessorModelManager {
        getBakedRegistry(): Internal.Map<ResourceLocation, Internal.BakedModel>;
    }
    type AccessorModelManager_ = (() => Internal.Map<ResourceLocation, Internal.BakedModel>) | AccessorModelManager;
    /**
    * @javaClass mezz.jei.api.ingredients.IIngredients
    */
    interface IIngredients {
        setOutputs<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.List_<T>): void;
        setInputs<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.List_<T>): void;
        getOutputs<T>(arg0: Internal.IIngredientType_<T>): Internal.List<Internal.List<T>>;
        setOutputLists<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.List_<Internal.List_<T>>): void;
        setInputIngredients(arg0: Internal.List_<Internal.Ingredient_>): void;
        setInputLists<T>(arg0: Internal.IIngredientType_<T>, arg1: Internal.List_<Internal.List_<T>>): void;
        getInputs<T>(arg0: Internal.IIngredientType_<T>): Internal.List<Internal.List<T>>;
        setOutput<T>(arg0: Internal.IIngredientType_<T>, arg1: T): void;
        setInput<T>(arg0: Internal.IIngredientType_<T>, arg1: T): void;
    }
    type IIngredients_ = IIngredients;
    /**
    * @javaClass java.awt.Insets
    */
    class Insets implements Internal.Cloneable, Internal.Serializable {
        set(arg0: number, arg1: number, arg2: number, arg3: number): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        clone(): any;
        toString(): string;
        "top" : number;
        "left" : number;
        "bottom" : number;
        "right" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Insets_ = Insets;
    /**
    * @javaClass dev.latvian.mods.kubejs.fluid.FluidBlockBuilder
    */
    class FluidBlockBuilder extends Internal.BlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        item(i: Internal.Consumer_<Internal.BlockItemBuilder_>): Internal.BlockBuilder;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidBlockBuilder_ = FluidBlockBuilder;
    /**
    * @javaClass com.mojang.datafixers.Products$P2
    */
    class Products$P2 <F, T1, T2> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.BiFunction_<T1, T2, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.BiFunction_<T1, T2, R>>): Internal.App<F, R>;
        and<T3, T4, T5, T6, T7>(arg0: Internal.Products$P5_<F, T3, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T3, T4, T5, T6, T7, T8>(arg0: Internal.Products$P6_<F, T3, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T3>(arg0: Internal.App_<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        and<T3, T4>(arg0: Internal.Products$P2_<F, T3, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T3, T4, T5>(arg0: Internal.Products$P3_<F, T3, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T3, T4, T5, T6>(arg0: Internal.Products$P4_<F, T3, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P2_<F, T1, T2> = Products$P2<F, T1, T2>;
    /**
    * @javaClass mezz.jei.api.recipe.IRecipeCategoriesLookup
    */
    interface IRecipeCategoriesLookup {
        limitFocus(arg0: Internal.Collection_<Internal.IFocus_<any>>): this;
        includeHidden(): this;
        get(): Internal.Stream<Internal.IRecipeCategory<any>>;
        limitTypes(arg0: Internal.Collection_<mezz.jei.api.recipe.RecipeType_<any>>): this;
    }
    type IRecipeCategoriesLookup_ = IRecipeCategoriesLookup;
    /**
    * @javaClass mezz.jei.api.gui.drawable.IDrawable
    */
    interface IDrawable {
        getHeight(): number;
        getWidth(): number;
        draw(arg0: Internal.PoseStack_, arg1: number, arg2: number): void;
        draw(arg0: Internal.PoseStack_): void;
    }
    type IDrawable_ = IDrawable;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.ingredientaction.IngredientAction
    */
    abstract class IngredientAction extends Internal.IngredientActionFilter {
        static readList(buf: Internal.FriendlyByteBuf_): Internal.List<Internal.IngredientAction>;
        toJson(): Internal.JsonObject;
        toJson(json: Internal.JsonObject_): void;
        transform(arg0: Internal.ItemStack_, arg1: number, arg2: Internal.CraftingContainer_): Internal.ItemStack;
        static writeList(buf: Internal.FriendlyByteBuf_, list: Internal.List_<Internal.IngredientAction_>): void;
        getType(): string;
        static getRemaining(container: Internal.CraftingContainer_, index: number, ingredientActions: Internal.List_<Internal.IngredientAction_>): Internal.ItemStack;
        static parseList(json: Internal.JsonElement_): Internal.List<Internal.IngredientAction>;
        static readonly "FACTORY_MAP" : {"damage":any,"custom":any,"keep":any,"replace":any};
        get type(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IngredientAction_ = IngredientAction;
    /**
    * @javaClass com.simibubi.create.api.event.TileEntityBehaviourEvent
    */
    class TileEntityBehaviourEvent <T> extends Internal.GenericEvent<T> {
        getListenerList(): Internal.ListenerList;
        getTileEntity(): T;
        attach(arg0: Internal.TileEntityBehaviour_): void;
        getGenericType(): Internal.Type;
        getBlockState(): Internal.BlockState;
        remove(arg0: Internal.BehaviourType_<any>): Internal.TileEntityBehaviour;
        get blockState(): Internal.BlockState;
        get listenerList(): Internal.ListenerList;
        get genericType(): Internal.Type;
        get tileEntity(): T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TileEntityBehaviourEvent_<T> = TileEntityBehaviourEvent<T>;
    /**
    * @javaClass net.minecraftforge.server.permission.nodes.PermissionNode
    */
    class PermissionNode <T> {
        getDefaultResolver(): Internal.PermissionNode$PermissionResolver<T>;
        getType(): Internal.PermissionType<T>;
        hashCode(): number;
        equals(arg0: any): boolean;
        setInformation(arg0: net.minecraft.network.chat.Component_, arg1: net.minecraft.network.chat.Component_): this;
        getDynamics(): any[];
        getNodeName(): string;
        getReadableName(): net.minecraft.network.chat.Component;
        getDescription(): net.minecraft.network.chat.Component;
        get nodeName(): string;
        get dynamics(): any[];
        get readableName(): net.minecraft.network.chat.Component;
        get defaultResolver(): Internal.PermissionNode$PermissionResolver<T>;
        get description(): net.minecraft.network.chat.Component;
        get type(): Internal.PermissionType<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionNode_<T> = PermissionNode<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.command.ArgumentTypeWrapper
    */
    class ArgumentTypeWrapper extends Internal.Enum<Internal.ArgumentTypeWrapper> {
        static valueOf(name: string): this;
        getResult(context: Internal.CommandContext_<Internal.CommandSourceStack_>, input: string): any;
        static values(): Internal.ArgumentTypeWrapper[];
        create(event: Internal.CommandRegistryEventJS_): Internal.ArgumentType<any>;
        create(): Internal.ArgumentType<any>;
        static byName(name: ResourceLocation_): typeof any;
        static printAll(): void;
        static readonly "ROTATION" : Internal.ArgumentTypeWrapper;
        static readonly "VEC2_CENTERED" : Internal.ArgumentTypeWrapper;
        static readonly "FLOAT" : Internal.ArgumentTypeWrapper;
        static readonly "PARTICLE" : Internal.ArgumentTypeWrapper;
        static readonly "INT_RANGE" : Internal.ArgumentTypeWrapper;
        static readonly "BLOCK_STATE" : Internal.ArgumentTypeWrapper;
        static readonly "NBT_TAG" : Internal.ArgumentTypeWrapper;
        static readonly "NBT_PATH" : Internal.ArgumentTypeWrapper;
        static readonly "ANGLE" : Internal.ArgumentTypeWrapper;
        static readonly "ITEM_PREDICATE" : Internal.ArgumentTypeWrapper;
        static readonly "BLOCK_POS_LOADED" : Internal.ArgumentTypeWrapper;
        static readonly "BLOCK_POS" : Internal.ArgumentTypeWrapper;
        static readonly "MESSAGE" : Internal.ArgumentTypeWrapper;
        static readonly "ITEM_SLOT" : Internal.ArgumentTypeWrapper;
        static readonly "ENTITY" : Internal.ArgumentTypeWrapper;
        static readonly "BLOCK_PREDICATE" : Internal.ArgumentTypeWrapper;
        static readonly "DIMENSION" : Internal.ArgumentTypeWrapper;
        static readonly "VEC2" : Internal.ArgumentTypeWrapper;
        static readonly "COLOR" : Internal.ArgumentTypeWrapper;
        static readonly "VEC3" : Internal.ArgumentTypeWrapper;
        static readonly "ITEM_STACK" : Internal.ArgumentTypeWrapper;
        static readonly "SWIZZLE" : Internal.ArgumentTypeWrapper;
        static readonly "DOUBLE" : Internal.ArgumentTypeWrapper;
        static readonly "ENTITIES" : Internal.ArgumentTypeWrapper;
        static readonly "UUID" : Internal.ArgumentTypeWrapper;
        static readonly "INTEGER" : Internal.ArgumentTypeWrapper;
        static readonly "LONG" : Internal.ArgumentTypeWrapper;
        static readonly "WORD" : Internal.ArgumentTypeWrapper;
        static readonly "ITEM_ENCHANTMENT" : Internal.ArgumentTypeWrapper;
        static readonly "VEC3_CENTERED" : Internal.ArgumentTypeWrapper;
        static readonly "TIME" : Internal.ArgumentTypeWrapper;
        static readonly "GREEDY_STRING" : Internal.ArgumentTypeWrapper;
        static readonly "NBT_COMPOUND" : Internal.ArgumentTypeWrapper;
        static readonly "BOOLEAN" : Internal.ArgumentTypeWrapper;
        static readonly "PLAYER" : Internal.ArgumentTypeWrapper;
        static readonly "RESOURCE_LOCATION" : Internal.ArgumentTypeWrapper;
        static readonly "FLOAT_RANGE" : Internal.ArgumentTypeWrapper;
        static readonly "PLAYERS" : Internal.ArgumentTypeWrapper;
        static readonly "ENTITY_SUMMON" : Internal.ArgumentTypeWrapper;
        static readonly "GAME_PROFILE" : Internal.ArgumentTypeWrapper;
        static readonly "COLUMN_POS" : Internal.ArgumentTypeWrapper;
        static readonly "STRING" : Internal.ArgumentTypeWrapper;
        static readonly "COMPONENT" : Internal.ArgumentTypeWrapper;
        static readonly "MOB_EFFECT" : Internal.ArgumentTypeWrapper;
        static readonly "ENTITY_ANCHOR" : Internal.ArgumentTypeWrapper;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArgumentTypeWrapper_ = "swizzle" | "nbt_path" | "string" | "color" | "item_slot" | "integer" | "mob_effect" | "float" | "uuid" | "long" | "resource_location" | "block_pos_loaded" | "block_predicate" | "game_profile" | "angle" | "particle" | "int_range" | "dimension" | "nbt_compound" | "player" | "double" | "greedy_string" | "players" | "float_range" | "block_pos" | "rotation" | "vec3" | "vec2" | "message" | "nbt_tag" | "column_pos" | "vec2_centered" | "vec3_centered" | "component" | "boolean" | "item_enchantment" | "entities" | "block_state" | "entity_summon" | "item_stack" | "entity_anchor" | "time" | "word" | "entity" | "item_predicate" | ArgumentTypeWrapper;
    /**
    * @javaClass net.minecraft.client.renderer.culling.Frustum
    */
    class Frustum {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Frustum_ = Frustum;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$InitScreenEvent$Post
    */
    class ScreenEvent$InitScreenEvent$Post extends Internal.ScreenEvent$InitScreenEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$InitScreenEvent$Post_ = ScreenEvent$InitScreenEvent$Post;
    /**
    * @javaClass java.util.EnumSet
    */
    abstract class EnumSet <E> extends Internal.AbstractSet<E> implements Internal.Cloneable, Internal.Serializable {
        static allOf<E>(arg0: Internal.Class_<E>): Internal.EnumSet<E>;
        static complementOf<E>(arg0: Internal.EnumSet_<E>): Internal.EnumSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E): Internal.EnumSet<E>;
        static of<E>(arg0: E, arg1: E): Internal.EnumSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.EnumSet<E>;
        static of<E>(arg0: E, ... arg1: E[]): Internal.EnumSet<E>;
        static of<E>(arg0: E): Internal.EnumSet<E>;
        static of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.EnumSet<E>;
        clone(): Internal.EnumSet<E>;
        static range<E>(arg0: E, arg1: E): Internal.EnumSet<E>;
        static noneOf<E>(arg0: Internal.Class_<E>): Internal.EnumSet<E>;
        static copyOf<E>(arg0: Internal.Collection_<E>): Internal.EnumSet<E>;
        static copyOf<E>(arg0: Internal.EnumSet_<E>): Internal.EnumSet<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnumSet_<E> = EnumSet<E>;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptFile
    */
    class ScriptFile implements Internal.Comparable<Internal.ScriptFile> {
        getError(): Internal.Throwable;
        load(): boolean;
        compareTo(o: Internal.ScriptFile_): number;
        readonly "source" : ((arg0: Internal.ScriptFileInfo) => Internal.InputStream);
        readonly "pack" : Internal.ScriptPack;
        readonly "info" : Internal.ScriptFileInfo;
        get error(): Internal.Throwable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptFile_ = ScriptFile;
    /**
    * @javaClass com.prunoideae.recipe.PetalRecipeJS
    */
    class PetalRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PetalRecipeJS_ = PetalRecipeJS;
    /**
    * @javaClass net.minecraft.client.particle.ParticleEngine
    */
    class ParticleEngine implements Internal.PreparableReloadListener, Internal.ParticleEngineAccessor {
        addBlockHitEffects(arg0: BlockPos_, arg1: Internal.BlockHitResult_): void;
        render(arg0: Internal.PoseStack_, arg1: Internal.MultiBufferSource$BufferSource_, arg2: Internal.LightTexture_, arg3: Internal.Camera_, arg4: number, arg5: Internal.Frustum_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParticleEngine_ = ParticleEngine;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatIterable
    */
    interface FloatIterable extends Internal.Iterable<number> {
        iterator(): Internal.FloatIterator;
        spliterator(): Internal.FloatSpliterator;
        forEach(arg0: Internal.FloatConsumer_): void;
        forEach(arg0: Internal.Consumer_<number>): void;
        forEach(arg0: Internal.DoubleConsumer_): void;
        doubleSpliterator(): Internal.DoubleSpliterator;
        doubleIterator(): Internal.DoubleIterator;
    }
    type FloatIterable_ = (() => Internal.FloatIterator) | FloatIterable;
    /**
    * @javaClass com.mojang.math.Vector4f
    */
    class Vector4f {
        setW(arg0: number): void;
        setY(arg0: number): void;
        setX(arg0: number): void;
        set(arg0: number[]): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        setZ(arg0: number): void;
        set w(arg0: number);
        set x(arg0: number);
        set y(arg0: number);
        set z(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Vector4f_ = Vector4f;
    /**
    * @javaClass java.util.stream.Stream
    */
    interface Stream <T> extends Internal.BaseStream<T, Internal.Stream<T>> {
        ofNullable<T>(arg0: T): Internal.Stream<T>;
        takeWhile(arg0: Internal.Predicate_<T>): Internal.Stream<T>;
        distinct(): Internal.Stream<T>;
        findFirst(): Internal.Optional<T>;
        skip(arg0: number): Internal.Stream<T>;
        toList(): Internal.List<T>;
        allMatch(arg0: Internal.Predicate_<T>): boolean;
        mapMultiToDouble(arg0: Internal.BiConsumer_<T, Internal.DoubleConsumer_>): Internal.DoubleStream;
        empty<T>(): Internal.Stream<T>;
        mapMulti<R>(arg0: Internal.BiConsumer_<T, Internal.Consumer_<R>>): Internal.Stream<R>;
        flatMapToInt(arg0: Internal.Function_<T, Internal.IntStream_>): Internal.IntStream;
        min(arg0: Internal.Comparator_<T>): Internal.Optional<T>;
        flatMapToLong(arg0: Internal.Function_<T, Internal.LongStream_>): Internal.LongStream;
        mapToLong(arg0: Internal.ToLongFunction_<T>): Internal.LongStream;
        noneMatch(arg0: Internal.Predicate_<T>): boolean;
        findAny(): Internal.Optional<T>;
        of<T>(... arg0: T[]): Internal.Stream<T>;
        of<T>(arg0: T): Internal.Stream<T>;
        limit(arg0: number): Internal.Stream<T>;
        builder<T>(): Internal.Stream$Builder<T>;
        toArray(): any[];
        toArray<A>(arg0: Internal.IntFunction_<A[]>): A[];
        forEachOrdered(arg0: Internal.Consumer_<T>): void;
        generate<T>(arg0: Internal.Supplier_<T>): Internal.Stream<T>;
        anyMatch(arg0: Internal.Predicate_<T>): boolean;
        map<R>(arg0: Internal.Function_<T, R>): Internal.Stream<R>;
        mapToDouble(arg0: Internal.ToDoubleFunction_<T>): Internal.DoubleStream;
        iterate<T>(arg0: T, arg1: Internal.UnaryOperator_<T>): Internal.Stream<T>;
        iterate<T>(arg0: T, arg1: Internal.Predicate_<T>, arg2: Internal.UnaryOperator_<T>): Internal.Stream<T>;
        mapMultiToLong(arg0: Internal.BiConsumer_<T, Internal.LongConsumer_>): Internal.LongStream;
        mapMultiToInt(arg0: Internal.BiConsumer_<T, Internal.IntConsumer_>): Internal.IntStream;
        reduce<U>(arg0: U, arg1: Internal.BiFunction_<U, T, U>, arg2: Internal.BinaryOperator_<U>): U;
        reduce(arg0: T, arg1: Internal.BinaryOperator_<T>): T;
        reduce(arg0: Internal.BinaryOperator_<T>): Internal.Optional<T>;
        max(arg0: Internal.Comparator_<T>): Internal.Optional<T>;
        forEach(arg0: Internal.Consumer_<T>): void;
        count(): number;
        concat<T>(arg0: Internal.Stream_<T>, arg1: Internal.Stream_<T>): Internal.Stream<T>;
        dropWhile(arg0: Internal.Predicate_<T>): Internal.Stream<T>;
        flatMapToDouble(arg0: Internal.Function_<T, Internal.DoubleStream_>): Internal.DoubleStream;
        peek(arg0: Internal.Consumer_<T>): Internal.Stream<T>;
        flatMap<R>(arg0: Internal.Function_<T, Internal.Stream_<R>>): Internal.Stream<R>;
        filter(arg0: Internal.Predicate_<T>): Internal.Stream<T>;
        sorted(): Internal.Stream<T>;
        sorted(arg0: Internal.Comparator_<T>): Internal.Stream<T>;
        mapToInt(arg0: Internal.ToIntFunction_<T>): Internal.IntStream;
        collect<R>(arg0: Internal.Supplier_<R>, arg1: Internal.BiConsumer_<R, T>, arg2: Internal.BiConsumer_<R, R>): R;
        collect<R, A>(arg0: Internal.Collector_<T, A, R>): R;
    }
    type Stream_<T> = Stream<T>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.PartyTeam
    */
    class PartyTeam extends Internal.Team {
        listAllies(source: Internal.CommandSourceStack_): number;
        getHighestRank(playerId: Internal.UUID_): Internal.TeamRank;
        deserializeNBT(tag: Internal.CompoundTag_): void;
        getOwner(): Internal.UUID;
        removeAlly(source: Internal.CommandSourceStack_, players: Internal.Collection_<Internal.GameProfile_>): number;
        kick(from: Internal.ServerPlayer_, players: Internal.Collection_<Internal.GameProfile_>): number;
        getOwnerPlayer(): Internal.ServerPlayer;
        isOwner(profile: Internal.UUID_): boolean;
        getType(): Internal.TeamType;
        leave(player: Internal.ServerPlayer_): number;
        addAlly(source: Internal.CommandSourceStack_, players: Internal.Collection_<Internal.GameProfile_>): number;
        transferOwnership(from: Internal.ServerPlayer_, to: Internal.ServerPlayer_): number;
        invite(from: Internal.ServerPlayer_, players: Internal.Collection_<Internal.GameProfile_>): number;
        join(source: Internal.CommandSourceStack_): number;
        get owner(): Internal.UUID;
        get ownerPlayer(): Internal.ServerPlayer;
        get type(): Internal.TeamType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PartyTeam_ = PartyTeam;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.PlayerJS
    */
    abstract class PlayerJS <P> extends Internal.LivingEntityJS implements Internal.WithAttachedData {
        getXpLevel(): number;
        isPlayer(): boolean;
        getStats(): Internal.PlayerStatsJS;
        sendData(channel: string, data: Internal.CompoundTag_): void;
        getPlayer(): Internal.PlayerJS<any>;
        sendInventoryUpdate(): void;
        /**
        */
        paint(arg0: TSDoc.Paintable): void;
        addXPLevels(l: number): void;
        getSaturation(): number;
        setXpLevel(l: number): void;
        closeInventory(): void;
        getOpenInventory(): Internal.AbstractContainerMenu;
        setAirSupply(air: number): void;
        getStages(): Internal.Stages;
        setSelectedSlot(index: number): void;
        getInventory(): Internal.InventoryJS;
        boostElytraFlight(): void;
        addXP(xp: number): void;
        addFood(f: number, m: number): void;
        getData(): Internal.AttachedData;
        give(item: Internal.ItemStackJS_): void;
        setStatusMessage(message: net.minecraft.network.chat.Component_): void;
        giveInHand(item: Internal.ItemStackJS_): void;
        getAirSupply(): number;
        getProfile(): Internal.GameProfile;
        isCreativeMode(): boolean;
        getFoodData(): Internal.FoodData;
        isMiningBlock(): boolean;
        getSelectedSlot(): number;
        setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
        isSpectator(): boolean;
        spawn(): void;
        getXp(): number;
        addItemCooldown(item: Internal.Item_, ticks: number): void;
        addExhaustion(exhaustion: number): void;
        getMouseItem(): Internal.ItemStackJS;
        setMouseItem(item: Internal.ItemStackJS_): void;
        setFoodLevel(foodLevel: number): void;
        toString(): string;
        getFoodLevel(): number;
        setSaturation(saturation: number): void;
        isFake(): boolean;
        setXp(xp: number): void;
        getMaxAirSupply(): number;
        readonly "minecraftPlayer" : P;
        get openInventory(): Internal.AbstractContainerMenu;
        get data(): Internal.AttachedData;
        get xpLevel(): number;
        get profile(): Internal.GameProfile;
        get creativeMode(): boolean;
        get inventory(): Internal.InventoryJS;
        get airSupply(): number;
        get saturation(): number;
        get maxAirSupply(): number;
        get stats(): Internal.PlayerStatsJS;
        get miningBlock(): boolean;
        get selectedSlot(): number;
        get mouseItem(): Internal.ItemStackJS;
        get stages(): Internal.Stages;
        get spectator(): boolean;
        get xp(): number;
        get fake(): boolean;
        get foodLevel(): number;
        get player(): Internal.PlayerJS<any>;
        get foodData(): Internal.FoodData;
        set saturation(saturation: number);
        set selectedSlot(index: number);
        set xpLevel(l: number);
        set mouseItem(item: Internal.ItemStackJS_);
        set xp(xp: number);
        set foodLevel(foodLevel: number);
        set statusMessage(message: net.minecraft.network.chat.Component_);
        set airSupply(air: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type PlayerJS_<P> = PlayerJS<P>;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.CommentedFileConfig
    */
    interface CommentedFileConfig extends Internal.CommentedConfig, Internal.FileConfig {
        of(arg0: string): this;
        of(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        of(arg0: Internal.Path_): this;
        of(arg0: string, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        of(arg0: Internal.File_): this;
        of(arg0: Internal.File_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        builder(arg0: string): Internal.CommentedFileConfigBuilder;
        builder(arg0: Internal.Path_): Internal.CommentedFileConfigBuilder;
        builder(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): Internal.CommentedFileConfigBuilder;
        builder(arg0: Internal.File_): Internal.CommentedFileConfigBuilder;
        builder(arg0: string, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): Internal.CommentedFileConfigBuilder;
        builder(arg0: Internal.File_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): Internal.CommentedFileConfigBuilder;
        ofConcurrent(arg0: Internal.File_): this;
        ofConcurrent(arg0: Internal.File_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        ofConcurrent(arg0: string, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        ofConcurrent(arg0: Internal.Path_): this;
        ofConcurrent(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        ofConcurrent(arg0: string): this;
        checked(): this;
    }
    type CommentedFileConfig_ = CommentedFileConfig;
    /**
    * @javaClass io.netty.channel.ChannelOutboundBuffer$MessageProcessor
    */
    interface ChannelOutboundBuffer$MessageProcessor {
        processMessage(arg0: any): boolean;
    }
    type ChannelOutboundBuffer$MessageProcessor_ = ((arg0: any) => boolean) | ChannelOutboundBuffer$MessageProcessor;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LootingLevelEvent
    */
    class LootingLevelEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getLootingLevel(): number;
        getDamageSource(): Internal.DamageSource;
        setLootingLevel(arg0: number): void;
        get listenerList(): Internal.ListenerList;
        get damageSource(): Internal.DamageSource;
        get lootingLevel(): number;
        set lootingLevel(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootingLevelEvent_ = LootingLevelEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.EnchantmentBuilder$DamageBonusFunction
    */
    interface EnchantmentBuilder$DamageBonusFunction {
        getDamageBonus(arg0: number, arg1: string): number;
    }
    type EnchantmentBuilder$DamageBonusFunction_ = ((arg0: number, arg1: string) => number) | EnchantmentBuilder$DamageBonusFunction;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ObjectMap
    */
    interface Long2ObjectMap <V> extends Internal.Long2ObjectFunction<V>, Internal.Map<number, V> {
        long2ObjectEntrySet(): Internal.ObjectSet<Internal.Long2ObjectMap$Entry<V>>;
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        entrySet(): Internal.ObjectSet<Internal.Map$Entry<number, V>>;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<number, V>): void;
        computeIfAbsent(arg0: number, arg1: Internal.Long2ObjectFunction_<V>): V;
        computeIfAbsent(arg0: number, arg1: Internal.LongFunction_<V>): V;
        values(): Internal.ObjectCollection<V>;
        replace(arg0: number, arg1: V, arg2: V): boolean;
        replace(arg0: number, arg1: V): V;
        clear(): void;
        computeIfAbsentPartial(arg0: number, arg1: Internal.Long2ObjectFunction_<V>): V;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number, arg1: any): boolean;
        compute(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        computeIfPresent(arg0: number, arg1: Internal.BiFunction_<number, V, V>): V;
        size(): number;
        merge(arg0: number, arg1: V, arg2: Internal.BiFunction_<V, V, V>): V;
        get(arg0: any): V;
        keySet(): Internal.LongSet;
        putIfAbsent(arg0: number, arg1: V): V;
    }
    type Long2ObjectMap_<V> = Long2ObjectMap<V>;
    /**
    * @javaClass java.time.OffsetDateTime
    */
    class OffsetDateTime implements Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.OffsetDateTime>, Internal.Serializable {
        plusHours(arg0: number): this;
        isEqual(arg0: Internal.OffsetDateTime_): boolean;
        toLocalTime(): Internal.LocalTime;
        compareTo(arg0: Internal.OffsetDateTime_): number;
        withOffsetSameLocal(arg0: Internal.ZoneOffset_): this;
        getDayOfWeek(): Internal.DayOfWeek;
        plusSeconds(arg0: number): this;
        getMinute(): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        getMonth(): Internal.Month;
        plusNanos(arg0: number): this;
        atZoneSameInstant(arg0: Internal.ZoneId_): Internal.ZonedDateTime;
        withHour(arg0: number): this;
        plusMonths(arg0: number): this;
        plusYears(arg0: number): this;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        format(arg0: Internal.DateTimeFormatter_): string;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
        getYear(): number;
        toEpochSecond(): number;
        toLocalDateTime(): Internal.LocalDateTime;
        withDayOfMonth(arg0: number): this;
        withMonth(arg0: number): this;
        isAfter(arg0: Internal.OffsetDateTime_): boolean;
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        toOffsetTime(): Internal.OffsetTime;
        minusHours(arg0: number): this;
        getOffset(): Internal.ZoneOffset;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        withYear(arg0: number): this;
        plusMinutes(arg0: number): this;
        minusMinutes(arg0: number): this;
        plusDays(arg0: number): this;
        atZoneSimilarLocal(arg0: Internal.ZoneId_): Internal.ZonedDateTime;
        hashCode(): number;
        static now(arg0: Internal.Clock_): this;
        static now(): this;
        static now(arg0: Internal.ZoneId_): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneOffset_): this;
        static of(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_): this;
        static of(arg0: Internal.LocalDate_, arg1: Internal.LocalTime_, arg2: Internal.ZoneOffset_): this;
        get(arg0: Internal.TemporalField_): number;
        getDayOfYear(): number;
        plusWeeks(arg0: number): this;
        getHour(): number;
        withMinute(arg0: number): this;
        getMonthValue(): number;
        toZonedDateTime(): Internal.ZonedDateTime;
        minusYears(arg0: number): this;
        minusWeeks(arg0: number): this;
        withDayOfYear(arg0: number): this;
        static parse(arg0: Internal.CharSequence_): this;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        toInstant(): Internal.Instant;
        isBefore(arg0: Internal.OffsetDateTime_): boolean;
        minusDays(arg0: number): this;
        withNano(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        minusMonths(arg0: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        toLocalDate(): Internal.LocalDate;
        withOffsetSameInstant(arg0: Internal.ZoneOffset_): this;
        equals(arg0: any): boolean;
        getSecond(): number;
        static timeLineOrder(): Internal.Comparator<Internal.OffsetDateTime>;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        getDayOfMonth(): number;
        minusSeconds(arg0: number): this;
        withSecond(arg0: number): this;
        static readonly "MIN" : Internal.OffsetDateTime;
        static readonly "MAX" : Internal.OffsetDateTime;
        get dayOfWeek(): Internal.DayOfWeek;
        get month(): Internal.Month;
        get offset(): Internal.ZoneOffset;
        get hour(): number;
        get year(): number;
        get dayOfYear(): number;
        get dayOfMonth(): number;
        get monthValue(): number;
        get nano(): number;
        get minute(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OffsetDateTime_ = OffsetDateTime;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ByteFunction
    */
    interface Long2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.LongToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Long2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2ByteFunction;
    }
    type Long2ByteFunction_ = ((arg0: number) => number) | Long2ByteFunction;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$Text
    */
    class RenderGameOverlayEvent$Text extends Internal.RenderGameOverlayEvent$Pre {
        getListenerList(): Internal.ListenerList;
        getRight(): Internal.ArrayList<string>;
        getLeft(): Internal.ArrayList<string>;
        get listenerList(): Internal.ListenerList;
        get left(): Internal.ArrayList<string>;
        get right(): Internal.ArrayList<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$Text_ = RenderGameOverlayEvent$Text;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.CustomStatBuilder
    */
    class CustomStatBuilder extends Internal.BuilderBase<ResourceLocation> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<ResourceLocation>;
        createObject(): ResourceLocation;
        get registryType(): Internal.RegistryObjectBuilderTypes<ResourceLocation>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CustomStatBuilder_ = CustomStatBuilder;
    /**
    * @javaClass net.minecraft.world.entity.MobSpawnType
    */
    class MobSpawnType extends Internal.Enum<Internal.MobSpawnType> {
        static valueOf(arg0: string): this;
        static values(): Internal.MobSpawnType[];
        static readonly "CONVERSION" : Internal.MobSpawnType;
        static readonly "STRUCTURE" : Internal.MobSpawnType;
        static readonly "BUCKET" : Internal.MobSpawnType;
        static readonly "DISPENSER" : Internal.MobSpawnType;
        static readonly "SPAWNER" : Internal.MobSpawnType;
        static readonly "EVENT" : Internal.MobSpawnType;
        static readonly "MOB_SUMMONED" : Internal.MobSpawnType;
        static readonly "NATURAL" : Internal.MobSpawnType;
        static readonly "SPAWN_EGG" : Internal.MobSpawnType;
        static readonly "PATROL" : Internal.MobSpawnType;
        static readonly "CHUNK_GENERATION" : Internal.MobSpawnType;
        static readonly "BREEDING" : Internal.MobSpawnType;
        static readonly "REINFORCEMENT" : Internal.MobSpawnType;
        static readonly "COMMAND" : Internal.MobSpawnType;
        static readonly "TRIGGERED" : Internal.MobSpawnType;
        static readonly "JOCKEY" : Internal.MobSpawnType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MobSpawnType_ = "patrol" | "triggered" | "natural" | "chunk_generation" | "spawn_egg" | "jockey" | "structure" | "command" | "bucket" | "dispenser" | "spawner" | "mob_summoned" | "reinforcement" | "event" | "breeding" | "conversion" | MobSpawnType;
    /**
    * @javaClass java.lang.reflect.Method
    */
    class Method extends Internal.Executable {
        getName(): string;
        getParameterCount(): number;
        getGenericReturnType(): Internal.Type;
        isSynthetic(): boolean;
        getParameterTypes(): Internal.Class<any>[];
        invoke(arg0: any, ... arg1: any[]): any;
        isBridge(): boolean;
        getGenericExceptionTypes(): Internal.Type[];
        getDefaultValue(): any;
        getDeclaredAnnotations(): Internal.Annotation[];
        getDeclaringClass(): typeof any;
        hashCode(): number;
        toGenericString(): string;
        getTypeParameters(): any[];
        getModifiers(): number;
        setAccessible(arg0: boolean): void;
        isVarArgs(): boolean;
        getExceptionTypes(): Internal.Class<any>[];
        isDefault(): boolean;
        getGenericParameterTypes(): Internal.Type[];
        getReturnType(): typeof any;
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        equals(arg0: any): boolean;
        toString(): string;
        getAnnotatedReturnType(): Internal.AnnotatedType;
        getParameterAnnotations(): Internal.Annotation[][];
        get declaredAnnotations(): Internal.Annotation[];
        get annotatedReturnType(): Internal.AnnotatedType;
        get parameterTypes(): Internal.Class<any>[];
        get parameterCount(): number;
        get defaultValue(): any;
        get modifiers(): number;
        get typeParameters(): any[];
        get declaringClass(): typeof any;
        get varArgs(): boolean;
        get synthetic(): boolean;
        get genericParameterTypes(): Internal.Type[];
        get default(): boolean;
        get exceptionTypes(): Internal.Class<any>[];
        get name(): string;
        get genericReturnType(): Internal.Type;
        get genericExceptionTypes(): Internal.Type[];
        get bridge(): boolean;
        get parameterAnnotations(): Internal.Annotation[][];
        get returnType(): typeof any;
        set accessible(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Method_ = Method;
    /**
    * @javaClass java.lang.Module
    */
    class Module implements Internal.AnnotatedElement {
        getDescriptor(): Internal.ModuleDescriptor;
        getName(): string;
        addReads(arg0: Internal.Module_): this;
        canRead(arg0: Internal.Module_): boolean;
        getLayer(): Internal.ModuleLayer;
        getResourceAsStream(arg0: string): Internal.InputStream;
        addUses(arg0: Internal.Class_<any>): this;
        addExports(arg0: string, arg1: Internal.Module_): this;
        getClassLoader(): Internal.ClassLoader;
        isNamed(): boolean;
        getAnnotations(): Internal.Annotation[];
        canUse(arg0: Internal.Class_<any>): boolean;
        getDeclaredAnnotations(): Internal.Annotation[];
        isOpen(arg0: string): boolean;
        isOpen(arg0: string, arg1: Internal.Module_): boolean;
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        isExported(arg0: string, arg1: Internal.Module_): boolean;
        isExported(arg0: string): boolean;
        getPackages(): Internal.Set<string>;
        toString(): string;
        addOpens(arg0: string, arg1: Internal.Module_): this;
        get declaredAnnotations(): Internal.Annotation[];
        get named(): boolean;
        get classLoader(): Internal.ClassLoader;
        get name(): string;
        get annotations(): Internal.Annotation[];
        get descriptor(): Internal.ModuleDescriptor;
        get packages(): Internal.Set<string>;
        get layer(): Internal.ModuleLayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Module_ = Module;
    /**
    * @javaClass java.security.Guard
    */
    interface Guard {
        checkGuard(arg0: any): void;
    }
    type Guard_ = ((arg0: any) => void) | Guard;
    /**
    * @javaClass java.util.stream.DoubleStream
    */
    interface DoubleStream extends Internal.BaseStream<number, Internal.DoubleStream> {
        average(): Internal.OptionalDouble;
        sequential(): this;
        takeWhile(arg0: Internal.DoublePredicate_): this;
        distinct(): this;
        findFirst(): Internal.OptionalDouble;
        sum(): number;
        skip(arg0: number): this;
        allMatch(arg0: Internal.DoublePredicate_): boolean;
        mapToObj<U>(arg0: Internal.DoubleFunction_<U>): Internal.Stream<U>;
        empty(): this;
        mapMulti(arg0: Internal.DoubleStream$DoubleMapMultiConsumer_): this;
        iterator(): Internal.PrimitiveIterator$OfDouble;
        min(): Internal.OptionalDouble;
        mapToLong(arg0: Internal.DoubleToLongFunction_): Internal.LongStream;
        parallel(): this;
        noneMatch(arg0: Internal.DoublePredicate_): boolean;
        findAny(): Internal.OptionalDouble;
        of(... arg0: number[]): this;
        of(arg0: number): this;
        limit(arg0: number): this;
        builder(): Internal.DoubleStream$Builder;
        toArray(): number[];
        forEachOrdered(arg0: Internal.DoubleConsumer_): void;
        generate(arg0: Internal.DoubleSupplier_): this;
        anyMatch(arg0: Internal.DoublePredicate_): boolean;
        map(arg0: Internal.DoubleUnaryOperator_): this;
        iterate(arg0: number, arg1: Internal.DoublePredicate_, arg2: Internal.DoubleUnaryOperator_): this;
        iterate(arg0: number, arg1: Internal.DoubleUnaryOperator_): this;
        reduce(arg0: number, arg1: Internal.DoubleBinaryOperator_): number;
        reduce(arg0: Internal.DoubleBinaryOperator_): Internal.OptionalDouble;
        spliterator(): Internal.Spliterator$OfDouble;
        max(): Internal.OptionalDouble;
        forEach(arg0: Internal.DoubleConsumer_): void;
        count(): number;
        concat(arg0: Internal.DoubleStream_, arg1: Internal.DoubleStream_): this;
        dropWhile(arg0: Internal.DoublePredicate_): this;
        peek(arg0: Internal.DoubleConsumer_): this;
        flatMap(arg0: Internal.DoubleFunction_<Internal.DoubleStream_>): this;
        filter(arg0: Internal.DoublePredicate_): this;
        sorted(): this;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.DoubleSummaryStatistics;
        mapToInt(arg0: Internal.DoubleToIntFunction_): Internal.IntStream;
        collect<R>(arg0: Internal.Supplier_<R>, arg1: Internal.ObjDoubleConsumer_<R>, arg2: Internal.BiConsumer_<R, R>): R;
    }
    type DoubleStream_ = DoubleStream;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Tick
    */
    class LivingEntityUseItemEvent$Tick extends Internal.LivingEntityUseItemEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityUseItemEvent$Tick_ = LivingEntityUseItemEvent$Tick;
    /**
    * @javaClass java.beans.PropertyChangeEvent
    */
    class PropertyChangeEvent extends Internal.EventObject {
        setPropagationId(arg0: any): void;
        toString(): string;
        getPropagationId(): any;
        getOldValue(): any;
        getNewValue(): any;
        getPropertyName(): string;
        get newValue(): any;
        get propertyName(): string;
        get oldValue(): any;
        get propagationId(): any;
        set propagationId(arg0: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PropertyChangeEvent_ = PropertyChangeEvent;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseScrollEvent$Pre
    */
    class ScreenEvent$MouseScrollEvent$Pre extends Internal.ScreenEvent$MouseScrollEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseScrollEvent$Pre_ = ScreenEvent$MouseScrollEvent$Pre;
    /**
    * @javaClass net.minecraft.world.level.LevelWriter
    */
    interface LevelWriter {
    }
    type LevelWriter_ = LevelWriter;
    /**
    * @javaClass com.jozufozu.flywheel.event.BeginFrameEvent
    */
    class BeginFrameEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.ClientLevel;
        getCameraPos(): Vec3;
        getFrustum(): Internal.Frustum;
        getCamera(): Internal.Camera;
        get cameraPos(): Vec3;
        get world(): Internal.ClientLevel;
        get listenerList(): Internal.ListenerList;
        get frustum(): Internal.Frustum;
        get camera(): Internal.Camera;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BeginFrameEvent_ = BeginFrameEvent;
    /**
    * @javaClass net.minecraft.world.entity.npc.VillagerType
    */
    class VillagerType {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VillagerType_ = Special.VillagerType | VillagerType;
    /**
    * @javaClass java.lang.invoke.MethodHandle
    */
    abstract class MethodHandle implements Internal.Constable {
        asCollector(arg0: number, arg1: Internal.Class_<any>, arg2: number): this;
        asCollector(arg0: Internal.Class_<any>, arg1: number): this;
        asSpreader(arg0: Internal.Class_<any>, arg1: number): this;
        asSpreader(arg0: number, arg1: Internal.Class_<any>, arg2: number): this;
        withVarargs(arg0: boolean): this;
        invokeExact(... arg0: any[]): any;
        invoke(... arg0: any[]): any;
        type(): Internal.MethodType;
        describeConstable(): Internal.Optional<Internal.MethodHandleDesc>;
        bindTo(arg0: any): this;
        asVarargsCollector(arg0: Internal.Class_<any>): this;
        asType(arg0: Internal.MethodType_): this;
        invokeWithArguments(... arg0: any[]): any;
        invokeWithArguments(arg0: Internal.List_<any>): any;
        isVarargsCollector(): boolean;
        asFixedArity(): this;
        toString(): string;
        get varargsCollector(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MethodHandle_ = MethodHandle;
    /**
    * @javaClass dev.latvian.mods.kubejs.loot.ConditionContainer
    */
    interface ConditionContainer {
        entityScores(entity: Internal.LootContext$EntityTarget_, scores: Internal.Map_<string, any>): this;
        killedByPlayer(): this;
        survivesExplosion(): this;
        randomChance(chance: number): this;
        randomChanceWithLooting(chance: number, multiplier: number): this;
        addCondition(arg0: Internal.JsonObject_): this;
        entityProperties(entity: Internal.LootContext$EntityTarget_, properties: Internal.JsonObject_): this;
    }
    type ConditionContainer_ = ((arg0: Internal.JsonObject) => Internal.ConditionContainer) | ConditionContainer;
    /**
    * @javaClass java.awt.PageAttributes$OriginType
    */
    class PageAttributes$OriginType extends Internal.AttributeValue {
        static readonly "PRINTABLE" : Internal.PageAttributes$OriginType;
        static readonly "PHYSICAL" : Internal.PageAttributes$OriginType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PageAttributes$OriginType_ = PageAttributes$OriginType;
    /**
    * @javaClass mezz.jei.api.ingredients.IIngredientType
    */
    interface IIngredientType <T> {
        getIngredientClass(): typeof T;
    }
    type IIngredientType_<T> = (() => Internal.Class<T>) | IIngredientType<T>;
    /**
    * @javaClass com.mojang.serialization.Decoder$Simple
    */
    interface Decoder$Simple <A> {
        decoder(): Internal.Decoder<A>;
        decode<T>(arg0: Internal.Dynamic_<T>): Internal.DataResult<A>;
    }
    type Decoder$Simple_<A> = ((arg0: Internal.Dynamic<T>) => Internal.DataResult<A>) | Decoder$Simple<A>;
    /**
    * @javaClass java.util.PrimitiveIterator$OfLong
    */
    interface PrimitiveIterator$OfLong extends Internal.PrimitiveIterator<number, Internal.LongConsumer> {
        next(): number;
        forEachRemaining(arg0: Internal.LongConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        nextLong(): number;
    }
    type PrimitiveIterator$OfLong_ = (() => number) | PrimitiveIterator$OfLong;
    /**
    * @javaClass java.nio.channels.spi.AbstractInterruptibleChannel
    */
    abstract class AbstractInterruptibleChannel implements Internal.Channel, Internal.InterruptibleChannel {
        isOpen(): boolean;
        close(): void;
        get open(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractInterruptibleChannel_ = AbstractInterruptibleChannel;
    /**
    * @javaClass java.nio.channels.FileChannel$MapMode
    */
    class FileChannel$MapMode {
        toString(): string;
        static readonly "READ_ONLY" : Internal.FileChannel$MapMode;
        static readonly "READ_WRITE" : Internal.FileChannel$MapMode;
        static readonly "PRIVATE" : Internal.FileChannel$MapMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileChannel$MapMode_ = FileChannel$MapMode;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2FloatFunction
    */
    interface Short2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2FloatFunction;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2FloatFunction;
    }
    type Short2FloatFunction_ = ((arg0: number) => number) | Short2FloatFunction;
    /**
    * @javaClass com.mojang.serialization.Compressable
    */
    interface Compressable extends Internal.Keyable {
        compressor<T>(arg0: Internal.DynamicOps_<T>): Internal.KeyCompressor<T>;
    }
    type Compressable_ = ((arg0: Internal.DynamicOps<T>) => Internal.KeyCompressor<T>) | Compressable;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.FireworksJS
    */
    class FireworksJS {
        static of(o: any): this;
        createFireworkRocket(w: Internal.Level_, x: number, y: number, z: number): Internal.FireworkRocketEntity;
        "flight" : number;
        "lifetime" : number;
        readonly "explosions" : Internal.List<Internal.FireworksJS$Explosion>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FireworksJS_ = FireworksJS;
    /**
    * @javaClass net.minecraft.core.SectionPos
    */
    class SectionPos extends Vec3i {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SectionPos_ = SectionPos;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Opens
    */
    class ModuleDescriptor$Opens implements Internal.Comparable<Internal.ModuleDescriptor$Opens> {
        hashCode(): number;
        equals(arg0: any): boolean;
        isQualified(): boolean;
        toString(): string;
        source(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Opens_): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Opens$Modifier>;
        targets(): Internal.Set<string>;
        get qualified(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Opens_ = ModuleDescriptor$Opens;
    /**
    * @javaClass java.lang.Comparable
    */
    interface Comparable <T> {
        compareTo(arg0: T): number;
    }
    type Comparable_<T> = ((arg0: T) => number) | Comparable<T>;
    /**
    * @javaClass java.math.BigInteger
    */
    class BigInteger extends Internal.Number implements Internal.Comparable<Internal.BigInteger> {
        bitLength(): number;
        getLowestSetBit(): number;
        longValueExact(): number;
        mod(arg0: Internal.BigInteger_): this;
        byteValueExact(): number;
        gcd(arg0: Internal.BigInteger_): this;
        setBit(arg0: number): this;
        compareTo(arg0: Internal.BigInteger_): number;
        shortValueExact(): number;
        longValue(): number;
        sqrtAndRemainder(): Internal.BigInteger[];
        not(): this;
        shiftLeft(arg0: number): this;
        min(arg0: Internal.BigInteger_): this;
        sqrt(): this;
        and(arg0: Internal.BigInteger_): this;
        hashCode(): number;
        pow(arg0: number): this;
        clearBit(arg0: number): this;
        xor(arg0: Internal.BigInteger_): this;
        divide(arg0: Internal.BigInteger_): this;
        multiply(arg0: Internal.BigInteger_): this;
        signum(): number;
        add(arg0: Internal.BigInteger_): this;
        flipBit(arg0: number): this;
        or(arg0: Internal.BigInteger_): this;
        max(arg0: Internal.BigInteger_): this;
        static valueOf(arg0: number): this;
        intValue(): number;
        subtract(arg0: Internal.BigInteger_): this;
        floatValue(): number;
        isProbablePrime(arg0: number): boolean;
        doubleValue(): number;
        nextProbablePrime(): this;
        testBit(arg0: number): boolean;
        shiftRight(arg0: number): this;
        abs(): this;
        divideAndRemainder(arg0: Internal.BigInteger_): Internal.BigInteger[];
        negate(): this;
        toByteArray(): number[];
        equals(arg0: any): boolean;
        toString(arg0: number): string;
        toString(): string;
        bitCount(): number;
        static probablePrime(arg0: number, arg1: Internal.Random_): this;
        modPow(arg0: Internal.BigInteger_, arg1: Internal.BigInteger_): this;
        remainder(arg0: Internal.BigInteger_): this;
        intValueExact(): number;
        andNot(arg0: Internal.BigInteger_): this;
        modInverse(arg0: Internal.BigInteger_): this;
        static readonly "ZERO" : Internal.BigInteger;
        static readonly "ONE" : Internal.BigInteger;
        static readonly "TEN" : Internal.BigInteger;
        static readonly "TWO" : Internal.BigInteger;
        get lowestSetBit(): number;
        set bit(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BigInteger_ = BigInteger;
    /**
    * @javaClass com.simibubi.create.content.schematics.ISpecialBlockEntityItemRequirement
    */
    interface ISpecialBlockEntityItemRequirement {
        getRequiredItems(arg0: Internal.BlockState_): Internal.ItemRequirement;
    }
    type ISpecialBlockEntityItemRequirement_ = ((arg0: Internal.BlockState) => Internal.ItemRequirement) | ISpecialBlockEntityItemRequirement;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent$IdMappingEvent$ModRemapping
    */
    class RegistryEvent$IdMappingEvent$ModRemapping {
        readonly "registry" : ResourceLocation;
        readonly "newId" : number;
        readonly "oldId" : number;
        readonly "key" : ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent$IdMappingEvent$ModRemapping_ = RegistryEvent$IdMappingEvent$ModRemapping;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingConversionEvent$Post
    */
    class LivingConversionEvent$Post extends Internal.LivingConversionEvent {
        getListenerList(): Internal.ListenerList;
        getOutcome(): Internal.LivingEntity;
        get listenerList(): Internal.ListenerList;
        get outcome(): Internal.LivingEntity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingConversionEvent$Post_ = LivingConversionEvent$Post;
    /**
    * @javaClass com.mojang.datafixers.kinds.Kind1
    */
    interface Kind1 <F, Mu> extends Internal.App<Mu, F> {
        unbox<F, Proof>(arg0: Internal.App_<Proof, F>): Internal.Kind1<F, Proof>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>): Internal.Products$P11<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>): Internal.Products$P10<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>): Internal.Products$P9<F, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>, arg11: Internal.App_<F, T12>, arg12: Internal.App_<F, T13>, arg13: Internal.App_<F, T14>, arg14: Internal.App_<F, T15>, arg15: Internal.App_<F, T16>): Internal.Products$P16<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>, arg11: Internal.App_<F, T12>, arg12: Internal.App_<F, T13>, arg13: Internal.App_<F, T14>, arg14: Internal.App_<F, T15>): Internal.Products$P15<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>, arg11: Internal.App_<F, T12>, arg12: Internal.App_<F, T13>, arg13: Internal.App_<F, T14>): Internal.Products$P14<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>, arg11: Internal.App_<F, T12>, arg12: Internal.App_<F, T13>): Internal.Products$P13<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
        group<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>, arg8: Internal.App_<F, T9>, arg9: Internal.App_<F, T10>, arg10: Internal.App_<F, T11>, arg11: Internal.App_<F, T12>): Internal.Products$P12<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
        group<T1, T2, T3>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>): Internal.Products$P3<F, T1, T2, T3>;
        group<T1, T2>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>): Internal.Products$P2<F, T1, T2>;
        group<T1>(arg0: Internal.App_<F, T1>): Internal.Products$P1<F, T1>;
        group<T1, T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>, arg7: Internal.App_<F, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        group<T1, T2, T3, T4, T5, T6, T7>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>, arg6: Internal.App_<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        group<T1, T2, T3, T4, T5, T6>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>, arg5: Internal.App_<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        group<T1, T2, T3, T4, T5>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>, arg4: Internal.App_<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        group<T1, T2, T3, T4>(arg0: Internal.App_<F, T1>, arg1: Internal.App_<F, T2>, arg2: Internal.App_<F, T3>, arg3: Internal.App_<F, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
    }
    type Kind1_<F, Mu> = Kind1<F, Mu>;
    /**
    * @javaClass mezz.jei.api.gui.builder.IIngredientAcceptor
    */
    interface IIngredientAcceptor <THIS> {
        addIngredients(arg0: Internal.Ingredient_): THIS;
        addIngredients<I>(arg0: Internal.IIngredientType_<I>, arg1: Internal.List_<I>): THIS;
        addIngredient<I>(arg0: Internal.IIngredientType_<I>, arg1: I): THIS;
        addFluidStack(arg0: Internal.Fluid_, arg1: number, arg2: Internal.CompoundTag_): THIS;
        addFluidStack(arg0: Internal.Fluid_, arg1: number): THIS;
        addIngredientsUnsafe(arg0: Internal.List_<any>): THIS;
        addItemStack(arg0: Internal.ItemStack_): THIS;
        addItemStacks(arg0: Internal.List_<Internal.ItemStack_>): THIS;
    }
    type IIngredientAcceptor_<THIS> = IIngredientAcceptor<THIS>;
    /**
    * @javaClass net.minecraft.world.entity.Mob
    */
    abstract class Mob extends Internal.LivingEntity implements Internal.AccessorMob {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Mob_ = Mob;
    /**
    * @javaClass java.nio.channels.FileChannel
    */
    abstract class FileChannel extends Internal.AbstractInterruptibleChannel implements Internal.SeekableByteChannel, Internal.GatheringByteChannel, Internal.ScatteringByteChannel {
        transferFrom(arg0: Internal.ReadableByteChannel_, arg1: number, arg2: number): number;
        read(arg0: Internal.ByteBuffer_): number;
        read(arg0: Internal.ByteBuffer_, arg1: number): number;
        read(arg0: Internal.ByteBuffer_[]): number;
        read(arg0: Internal.ByteBuffer_[], arg1: number, arg2: number): number;
        truncate(arg0: number): this;
        size(): number;
        lock(): Internal.FileLock;
        lock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        force(arg0: boolean): void;
        position(arg0: number): this;
        position(): number;
        transferTo(arg0: number, arg1: number, arg2: Internal.WritableByteChannel_): number;
        write(arg0: Internal.ByteBuffer_, arg1: number): number;
        write(arg0: Internal.ByteBuffer_): number;
        write(arg0: Internal.ByteBuffer_[], arg1: number, arg2: number): number;
        write(arg0: Internal.ByteBuffer_[]): number;
        map(arg0: Internal.FileChannel$MapMode_, arg1: number, arg2: number): Internal.MappedByteBuffer;
        tryLock(arg0: number, arg1: number, arg2: boolean): Internal.FileLock;
        tryLock(): Internal.FileLock;
        static open(arg0: Internal.Path_, arg1: Internal.Set_<Internal.OpenOption_>, ... arg2: any[]): this;
        static open(arg0: Internal.Path_, ... arg1: Internal.OpenOption_[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileChannel_ = FileChannel;
    /**
    * @javaClass net.minecraft.world.entity.monster.EnderMan
    */
    class EnderMan extends Internal.Monster implements Internal.NeutralMob {
        handler$zdn000$curio$isLookingAtMe(arg0: Internal.Player_, arg1: Internal.CallbackInfoReturnable_<any>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnderMan_ = EnderMan;
    /**
    * @javaClass java.util.concurrent.Executor
    */
    interface Executor {
        execute(arg0: Internal.Runnable_): void;
    }
    type Executor_ = ((arg0: Internal.Runnable) => void) | Executor;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.IGuiIngredientGroup
    */
    interface IGuiIngredientGroup <T> {
        init(arg0: number, arg1: boolean, arg2: Internal.IIngredientRenderer_<T>, arg3: number, arg4: number, arg5: number, arg6: number, arg7: number, arg8: number): void;
        init(arg0: number, arg1: boolean, arg2: number, arg3: number): void;
        set(arg0: number, arg1: T): void;
        set(arg0: number, arg1: Internal.List_<T>): void;
        set(arg0: Internal.IIngredients_): void;
        getGuiIngredients(): Internal.Map<number, Internal.IGuiIngredient<T>>;
        addTooltipCallback(arg0: Internal.ITooltipCallback_<T>): void;
        setOverrideDisplayFocus(arg0: Internal.IFocus_<T>): void;
        setBackground(arg0: number, arg1: Internal.IDrawable_): void;
    }
    type IGuiIngredientGroup_<T> = IGuiIngredientGroup<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.properties.RemoveSpawnsProperties
    */
    class RemoveSpawnsProperties {
        "mobs" : ((arg0: Internal.MobCategory, arg1: Internal.MobSpawnSettings$SpawnerData) => boolean);
        "biomes" : ((arg0: Internal.BiomeModifications$BiomeContext) => boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RemoveSpawnsProperties_ = RemoveSpawnsProperties;
    /**
    * @javaClass dev.latvian.mods.rhino.WrapFactory
    */
    class WrapFactory {
        wrapAsJavaObject(cx: Internal.Context_, scope: Internal.Scriptable_, javaObject: any, staticType: Internal.Class_<any>): Internal.Scriptable;
        setJavaPrimitiveWrap(value: boolean): void;
        wrapJavaClass(cx: Internal.Context_, scope: Internal.Scriptable_, javaClass: Internal.Class_<any>): Internal.Scriptable;
        isJavaPrimitiveWrap(): boolean;
        wrapNewObject(cx: Internal.Context_, scope: Internal.Scriptable_, obj: any): Internal.Scriptable;
        wrap(cx: Internal.Context_, scope: Internal.Scriptable_, obj: any, staticType: Internal.Class_<any>): any;
        get javaPrimitiveWrap(): boolean;
        set javaPrimitiveWrap(value: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WrapFactory_ = WrapFactory;
    /**
    * @javaClass java.util.function.LongPredicate
    */
    interface LongPredicate {
        or(arg0: Internal.LongPredicate_): this;
        test(arg0: number): boolean;
        and(arg0: Internal.LongPredicate_): this;
        negate(): this;
    }
    type LongPredicate_ = ((arg0: number) => boolean) | LongPredicate;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$FogDensity
    */
    class EntityViewRenderEvent$FogDensity extends Internal.EntityViewRenderEvent$FogEvent {
        getListenerList(): Internal.ListenerList;
        getDensity(): number;
        isCancelable(): boolean;
        setDensity(arg0: number): void;
        get cancelable(): boolean;
        get density(): number;
        get listenerList(): Internal.ListenerList;
        set density(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$FogDensity_ = EntityViewRenderEvent$FogDensity;
    /**
    * @javaClass com.jozufozu.flywheel.api.vertex.VertexType
    */
    interface VertexType {
        createWriter(arg0: Internal.ByteBuffer_): Internal.VertexWriter;
        getLayout(): Internal.BufferLayout;
        getStride(): number;
        byteOffset(arg0: number): number;
        createReader(arg0: Internal.ByteBuffer_, arg1: number): Internal.VertexList;
        getShaderHeader(): string;
    }
    type VertexType_ = VertexType;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.ModelGenerator$Element
    */
    class ModelGenerator$Element {
        toJson(): Internal.JsonObject;
        face(direction: Internal.Direction_, consumer: Internal.Consumer_<Internal.ModelGenerator$Face_>): void;
        box(b: Internal.AABB_): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelGenerator$Element_ = ModelGenerator$Element;
    /**
    * @javaClass java.awt.Shape
    */
    interface Shape {
        contains(arg0: Internal.Rectangle2D_): boolean;
        contains(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        contains(arg0: number, arg1: number): boolean;
        contains(arg0: Internal.Point2D_): boolean;
        getPathIterator(arg0: Internal.AffineTransform_): Internal.PathIterator;
        getPathIterator(arg0: Internal.AffineTransform_, arg1: number): Internal.PathIterator;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number): boolean;
        intersects(arg0: Internal.Rectangle2D_): boolean;
        getBounds2D(): Internal.Rectangle2D;
        getBounds(): Internal.Rectangle;
    }
    type Shape_ = Shape;
    /**
    * @javaClass com.jozufozu.flywheel.util.ClientLevelExtension
    */
    interface ClientLevelExtension {
        cast(arg0: Internal.ClientLevel_): this;
        flywheel$getAllLoadedEntities(): Internal.Iterable<Internal.Entity>;
    }
    type ClientLevelExtension_ = (() => Internal.Iterable<Internal.Entity>) | ClientLevelExtension;
    /**
    * @javaClass java.io.Externalizable
    */
    interface Externalizable extends Internal.Serializable {
        writeExternal(arg0: Internal.ObjectOutput_): void;
        readExternal(arg0: Internal.ObjectInput_): void;
    }
    type Externalizable_ = Externalizable;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.RecipeFunction
    */
    class RecipeFunction extends Internal.BaseFunction implements Internal.WrappedJS {
        call(cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args0: any[]): Internal.RecipeJS;
        createRecipe(args0: any[]): Internal.RecipeJS;
        toString(): string;
        readonly "typeID" : ResourceLocation;
        readonly "type" : Internal.RecipeTypeJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeFunction_ = RecipeFunction;
    /**
    * @javaClass net.minecraft.server.packs.resources.ResourceManager
    */
    interface ResourceManager extends Internal.ResourceProvider {
    }
    type ResourceManager_ = ResourceManager;
    /**
    * @javaClass dev.latvian.mods.kubejs.fluid.FlowingFluidBuilder
    */
    class FlowingFluidBuilder extends Internal.BuilderBase<Internal.Fluid> {
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.Fluid>;
        createObject(): Internal.Fluid;
        readonly "fluidBuilder" : Internal.FluidBuilder;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.Fluid>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FlowingFluidBuilder_ = FlowingFluidBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.RecipeTypeJS
    */
    class RecipeTypeJS {
        getMod(): string;
        hashCode(): number;
        equals(obj: any): boolean;
        isCustom(): boolean;
        getId(): ResourceLocation;
        toString(): string;
        readonly "factory" : (() => Internal.RecipeJS);
        readonly "serializer" : Internal.RecipeSerializer<any>;
        get mod(): string;
        get custom(): boolean;
        get id(): ResourceLocation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeTypeJS_ = RecipeTypeJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.ObjectCollection
    */
    interface ObjectCollection <K> extends Internal.Collection<K>, Internal.ObjectIterable<K> {
        iterator(): Internal.ObjectIterator<K>;
        spliterator(): Internal.ObjectSpliterator<K>;
    }
    type ObjectCollection_<K> = (() => Internal.ObjectIterator<K>) | ObjectCollection<K>;
    /**
    * @javaClass java.nio.charset.CharsetEncoder
    */
    abstract class CharsetEncoder {
        encode(arg0: Internal.CharBuffer_, arg1: Internal.ByteBuffer_, arg2: boolean): Internal.CoderResult;
        encode(arg0: Internal.CharBuffer_): Internal.ByteBuffer;
        charset(): Internal.Charset;
        onUnmappableCharacter(arg0: Internal.CodingErrorAction_): this;
        maxBytesPerChar(): number;
        isLegalReplacement(arg0: number[]): boolean;
        unmappableCharacterAction(): Internal.CodingErrorAction;
        malformedInputAction(): Internal.CodingErrorAction;
        flush(arg0: Internal.ByteBuffer_): Internal.CoderResult;
        canEncode(arg0: Internal.CharSequence_): boolean;
        canEncode(arg0: string): boolean;
        averageBytesPerChar(): number;
        onMalformedInput(arg0: Internal.CodingErrorAction_): this;
        reset(): this;
        replacement(): number[];
        replaceWith(arg0: number[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CharsetEncoder_ = CharsetEncoder;
    /**
    * @javaClass net.minecraft.world.entity.Entity
    */
    abstract class Entity extends Internal.CapabilityProvider<Internal.Entity> implements Internal.Nameable, Internal.EntityAccess, Internal.CommandSource, Internal.IForgeEntity, Internal.EntityKJS, Internal.AccessorEntity {
        getPersistentDataKJS(): Internal.CompoundTag;
        canUpdate(): boolean;
        canUpdate(arg0: boolean): void;
        captureDrops(): Internal.Collection<Internal.ItemEntity>;
        captureDrops(arg0: Internal.Collection_<Internal.ItemEntity_>): Internal.Collection<Internal.ItemEntity>;
        onRemovedFromWorld(): void;
        getPersistentData(): Internal.CompoundTag;
        getEyeHeightAccess(arg0: Internal.Pose_, arg1: Internal.EntityDimensions_): number;
        changeDimension(arg0: Internal.ServerLevel_, arg1: Internal.ITeleporter_): this;
        canRiderInteract(): boolean;
        hashCode(): number;
        onAddedToWorld(): void;
        equals(arg0: any): boolean;
        toString(): string;
        canTrample(arg0: Internal.BlockState_, arg1: BlockPos_, arg2: number): boolean;
        revive(): void;
        isAddedToWorld(): boolean;
        get persistentDataKJS(): Internal.CompoundTag;
        get persistentData(): Internal.CompoundTag;
        get addedToWorld(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Entity_ = Entity;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.DoubleSpliterator
    */
    interface DoubleSpliterator extends Internal.Spliterator$OfDouble {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: it.unimi.dsi.fastutil.doubles.DoubleConsumer_): boolean;
        getComparator(): Internal.DoubleComparator;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.doubles.DoubleConsumer_): void;
    }
    type DoubleSpliterator_ = (() => Internal.DoubleSpliterator) | DoubleSpliterator;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2FloatFunction
    */
    interface Reference2FloatFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2FloatFunction;
        getFloat(arg0: any): number;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Float2FloatFunction_): Internal.Reference2FloatFunction<K>;
        removeFloat(arg0: any): number;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2FloatFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2FloatFunction;
    }
    type Reference2FloatFunction_<K> = ((arg0: any) => number) | Reference2FloatFunction<K>;
    /**
    * @javaClass com.mojang.math.Vector3d
    */
    class Vector3d {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Vector3d_ = Vector3d;
    /**
    * @javaClass java.time.format.FormatStyle
    */
    class FormatStyle extends Internal.Enum<Internal.FormatStyle> {
        static valueOf(arg0: string): this;
        static values(): Internal.FormatStyle[];
        static readonly "MEDIUM" : Internal.FormatStyle;
        static readonly "FULL" : Internal.FormatStyle;
        static readonly "LONG" : Internal.FormatStyle;
        static readonly "SHORT" : Internal.FormatStyle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FormatStyle_ = "short" | "medium" | "long" | "full" | FormatStyle;
    /**
    * Fired when you need to modify recipes.
    * @javaClass dev.latvian.mods.kubejs.recipe.RecipeEventJS
    */
    class RecipeEventJS extends Internal.EventJS {
        printTypes(): void;
        containsRecipe(filter: Internal.RecipeFilter_): boolean;
        getRecipeFunction(id: string): Internal.RecipeFunction;
        /**
        */
        custom(o: {type: Special.RecipeType}): Internal.RecipeJS;
        countRecipes(filter: Internal.RecipeFilter_): number;
        forEachRecipe(filter: Internal.RecipeFilter_, consumer: Internal.Consumer_<Internal.RecipeJS_>): void;
        forEachRecipeAsync(filter: Internal.RecipeFilter_, consumer: Internal.Consumer_<Internal.RecipeJS_>): void;
        /**
        * Remove recipe(s) by given recipe filter.
        *
        * Please note that some of the recipes are not removable from KubeJS side.
        *
        * An example is tipped arrows, because they do not have actual recipe registered in datapack.
        */
        remove(filter: Internal.RecipeFilter_): number;
        addRecipe(r: Internal.RecipeJS_, type: Internal.RecipeTypeJS_, args1: Internal.ListJS_): Internal.RecipeJS;
        printExamples(type: string): void;
        replaceOutput(ingredient: Internal.IngredientJS_, with_: Internal.ItemStackJS_): number;
        replaceOutput(filter: Internal.RecipeFilter_, ingredient: Internal.IngredientJS_, with_: Internal.ItemStackJS_, exact: boolean): number;
        replaceOutput(filter: Internal.RecipeFilter_, ingredient: Internal.IngredientJS_, with_: Internal.ItemStackJS_): number;
        stage(filter: Internal.RecipeFilter_, stage: string): void;
        replaceInput(ingredient: Internal.IngredientJS_, with_: Internal.IngredientJS_): number;
        replaceInput(filter: Internal.RecipeFilter_, ingredient: Internal.IngredientJS_, with_: Internal.IngredientJS_, exact: boolean): number;
        replaceInput(filter: Internal.RecipeFilter_, ingredient: Internal.IngredientJS_, with_: Internal.IngredientJS_): number;
        printAllTypes(): void;
        customFilter(filter: Internal.RecipeFilter_): Internal.RecipeFilter;
        /**
        * Holds all the recipes collected from documents.
        */
        getRecipes(): Document.RecipeHolder;
        setItemErrors(b: boolean): void;
        static "instance" : null;
        static "modifyResultCallbackMap" : {};
        static readonly "FORGE_CONDITIONAL" : "forge:conditional";
        static "customIngredientMap" : {};
        /**
        * Holds all the recipes collected from documents.
        */
        get recipes(): Document.RecipeHolder;
        set itemErrors(b: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Furnaces.
        */
        smelting(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Smokers.
        */
        smoking(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Blast Furnaces.
        */
        blasting(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a shaped crafting recipe.
        */
        shaped(output: Internal.ItemStackJS_, pattern: Internal.IngredientJS_[][]): Internal.ShapedRecipeJS_;
        /**
        * Adds a shaped crafting recipe.
        */
        shaped(output: Internal.ItemStackJS_, pattern: string[], items: {[key: string]: Internal.IngredientJS_}): Internal.ShapedRecipeJS_;
        /**
        * Adds a shapeless crafting recipe.
        */
        shapeless(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[]): Internal.ShapelessRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Campfire.
        */
        campfireCooking(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a stonecutting recipe.
        */
        stonecutting(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_): Internal.StonecuttingRecipeJS_;
        /**
        * Adds a smithing recipe.
        */
        smithing(output: Internal.ItemStackJS_, base: Internal.IngredientJS_, addition: Internal.IngredientJS_): Internal.SmithingRecipeJS_;
    }
    /**
    * Fired when you need to modify recipes.
    */
    type RecipeEventJS_ = RecipeEventJS;
    /**
    * @javaClass io.netty.channel.ChannelPromise
    */
    interface ChannelPromise extends Internal.ChannelFuture, Internal.Promise<void> {
        unvoid(): this;
        setFailure(arg0: Internal.Throwable_): this;
        setSuccess(arg0: void): this;
        setSuccess(): this;
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        trySuccess(): boolean;
        syncUninterruptibly(): this;
        await(): this;
        channel(): io.netty.channel.Channel;
        awaitUninterruptibly(): this;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        sync(): this;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
    }
    type ChannelPromise_ = ChannelPromise;
    /**
    * @javaClass vazkii.botania.mixin.AccessorMobEffect
    */
    interface AccessorMobEffect {
        getType(): Internal.MobEffectCategory;
    }
    type AccessorMobEffect_ = (() => Internal.MobEffectCategory) | AccessorMobEffect;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLivingEvent$Post
    */
    class RenderLivingEvent$Post <T, M> extends Internal.RenderLivingEvent<T, M> {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLivingEvent$Post_<T, M> = RenderLivingEvent$Post<T, M>;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.ClientTeamManager
    */
    class ClientTeamManager {
        init(self: Internal.UUID_, messages: Internal.List_<Internal.TeamMessage_>): void;
        getName(id: Internal.UUID_): net.minecraft.network.chat.Component;
        getTeam(id: Internal.UUID_): Internal.ClientTeam;
        getKnownPlayer(id: Internal.UUID_): Internal.KnownClientPlayer;
        getId(): Internal.UUID;
        write(buffer: Internal.FriendlyByteBuf_, now: number): void;
        readonly "knownPlayers" : Internal.Map<Internal.UUID, Internal.KnownClientPlayer>;
        "selfTeam" : Internal.ClientTeam;
        "invalid" : boolean;
        static "INSTANCE" : Internal.ClientTeamManager;
        readonly "teamMap" : Internal.Map<Internal.UUID, Internal.ClientTeam>;
        "selfKnownPlayer" : Internal.KnownClientPlayer;
        get id(): Internal.UUID;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientTeamManager_ = ClientTeamManager;
    /**
    * @javaClass net.minecraft.world.level.LevelHeightAccessor
    */
    interface LevelHeightAccessor {
    }
    type LevelHeightAccessor_ = LevelHeightAccessor;
    /**
    * @javaClass io.netty.channel.ChannelPipeline
    */
    interface ChannelPipeline extends Internal.ChannelInboundInvoker, Internal.ChannelOutboundInvoker, Internal.Iterable<Internal.Map$Entry<string, Internal.ChannelHandler>> {
        fireChannelWritabilityChanged(): this;
        channel(): io.netty.channel.Channel;
        replace(arg0: Internal.ChannelHandler_, arg1: string, arg2: Internal.ChannelHandler_): this;
        replace(arg0: string, arg1: string, arg2: Internal.ChannelHandler_): Internal.ChannelHandler;
        replace<T>(arg0: Internal.Class_<T>, arg1: string, arg2: Internal.ChannelHandler_): T;
        fireExceptionCaught(arg0: Internal.Throwable_): this;
        fireChannelActive(): this;
        removeLast(): Internal.ChannelHandler;
        remove(arg0: string): Internal.ChannelHandler;
        remove<T>(arg0: Internal.Class_<T>): T;
        remove(arg0: Internal.ChannelHandler_): this;
        addLast(arg0: string, arg1: Internal.ChannelHandler_): this;
        addLast(arg0: Internal.EventExecutorGroup_, arg1: string, arg2: Internal.ChannelHandler_): this;
        addLast(... arg0: Internal.ChannelHandler_[]): this;
        addLast(arg0: Internal.EventExecutorGroup_, ... arg1: Internal.ChannelHandler_[]): this;
        addAfter(arg0: string, arg1: string, arg2: Internal.ChannelHandler_): this;
        addAfter(arg0: Internal.EventExecutorGroup_, arg1: string, arg2: string, arg3: Internal.ChannelHandler_): this;
        flush(): this;
        removeFirst(): Internal.ChannelHandler;
        get<T>(arg0: Internal.Class_<T>): T;
        get(arg0: string): Internal.ChannelHandler;
        context(arg0: Internal.Class_<Internal.ChannelHandler_>): Internal.ChannelHandlerContext;
        context(arg0: string): Internal.ChannelHandlerContext;
        context(arg0: Internal.ChannelHandler_): Internal.ChannelHandlerContext;
        firstContext(): Internal.ChannelHandlerContext;
        fireChannelInactive(): this;
        fireChannelReadComplete(): this;
        last(): Internal.ChannelHandler;
        fireChannelRegistered(): this;
        fireChannelRead(arg0: any): this;
        addBefore(arg0: string, arg1: string, arg2: Internal.ChannelHandler_): this;
        addBefore(arg0: Internal.EventExecutorGroup_, arg1: string, arg2: string, arg3: Internal.ChannelHandler_): this;
        names(): Internal.List<string>;
        toMap(): Internal.Map<string, Internal.ChannelHandler>;
        fireUserEventTriggered(arg0: any): this;
        fireChannelUnregistered(): this;
        lastContext(): Internal.ChannelHandlerContext;
        addFirst(arg0: string, arg1: Internal.ChannelHandler_): this;
        addFirst(arg0: Internal.EventExecutorGroup_, arg1: string, arg2: Internal.ChannelHandler_): this;
        addFirst(arg0: Internal.EventExecutorGroup_, ... arg1: Internal.ChannelHandler_[]): this;
        addFirst(... arg0: Internal.ChannelHandler_[]): this;
        first(): Internal.ChannelHandler;
    }
    type ChannelPipeline_ = ChannelPipeline;
    /**
    * @javaClass java.lang.Runnable
    */
    interface Runnable {
        run(): void;
    }
    type Runnable_ = (() => void) | Runnable;
    /**
    * @javaClass net.minecraftforge.forgespi.locating.IModLocator
    */
    interface IModLocator {
        initArguments(arg0: Internal.Map_<string, any>): void;
        scanMods(arg0: Internal.Iterable_<Internal.IModFile_>): Internal.List<Internal.IModFile>;
        scanMods(): Internal.List<Internal.IModFile>;
        isValid(arg0: Internal.IModFile_): boolean;
        name(): string;
        scanFile(arg0: Internal.IModFile_, arg1: Internal.Consumer_<Internal.Path_>): void;
    }
    type IModLocator_ = IModLocator;
    /**
    * @javaClass net.minecraft.world.level.CommonLevelAccessor
    */
    interface CommonLevelAccessor extends Internal.EntityGetter, Internal.LevelReader, Internal.LevelSimulatedRW {
    }
    type CommonLevelAccessor_ = CommonLevelAccessor;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2BooleanFunction
    */
    interface Byte2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.IntPredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2BooleanFunction;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Byte2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2BooleanFunction;
    }
    type Byte2BooleanFunction_ = ((arg0: number) => boolean) | Byte2BooleanFunction;
    /**
    * @javaClass com.jozufozu.flywheel.util.box.GridAlignedBB
    */
    class GridAlignedBB implements Internal.ImmutableBox {
        setMinY(arg0: number): this;
        intersects(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number): boolean;
        setMinX(arg0: number): this;
        setMinZ(arg0: number): this;
        forEachContained(arg0: Internal.CoordinateConsumer_): void;
        nextPowerOf2(): void;
        fixMinMax(): void;
        translate(arg0: Vec3i_): void;
        translate(arg0: number, arg1: number, arg2: number): void;
        empty(): boolean;
        setMin(arg0: Vec3i_): this;
        setMin(arg0: number, arg1: number, arg2: number): this;
        mirrorAbout(arg0: Internal.Direction$Axis_): void;
        hashCode(): number;
        static ofRadius(arg0: number): this;
        static from(arg0: Internal.SectionPos_): this;
        static from(arg0: Internal.AABB_): this;
        static from(arg0: number, arg1: number): this;
        static from(arg0: BlockPos_, arg1: BlockPos_): this;
        static from(arg0: BlockPos_): this;
        copy(): this;
        intersectAssign(arg0: Internal.ImmutableBox_): void;
        setMax(arg0: Vec3i_): this;
        setMax(arg0: number, arg1: number, arg2: number): this;
        grow(arg0: number): void;
        grow(arg0: number, arg1: number, arg2: number): void;
        intersect(arg0: Internal.ImmutableBox_): this;
        nextPowerOf2Centered(): void;
        getMaxX(): number;
        getMaxY(): number;
        union(arg0: Internal.ImmutableBox_): Internal.ImmutableBox;
        static containingAll(arg0: Internal.Collection_<BlockPos_>): Internal.ImmutableBox;
        getMaxZ(): number;
        sizeX(): number;
        contains(arg0: Internal.ImmutableBox_): boolean;
        unionAssign(arg0: Internal.ImmutableBox_): void;
        unionAssign(arg0: Internal.AABB_): void;
        setMaxZ(arg0: number): this;
        toAABB(): Internal.AABB;
        equals(arg0: any): boolean;
        setMaxY(arg0: number): this;
        toString(): string;
        setMaxX(arg0: number): this;
        getMinZ(): number;
        getMinX(): number;
        sizeY(): number;
        assign(arg0: BlockPos_, arg1: BlockPos_): this;
        assign(arg0: Internal.AABB_): void;
        assign(arg0: Internal.ImmutableBox_): void;
        getMinY(): number;
        sameAs(arg0: Internal.ImmutableBox_): boolean;
        sameAs(arg0: Internal.AABB_): boolean;
        sizeZ(): number;
        get minY(): number;
        get maxZ(): number;
        get minX(): number;
        get maxY(): number;
        get maxX(): number;
        get minZ(): number;
        set min(arg0: Vec3i_);
        set minY(arg0: number);
        set maxZ(arg0: number);
        set max(arg0: Vec3i_);
        set minX(arg0: number);
        set maxY(arg0: number);
        set maxX(arg0: number);
        set minZ(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GridAlignedBB_ = GridAlignedBB;
    /**
    * @javaClass net.minecraft.world.level.block.Rotation
    */
    class Rotation extends Internal.Enum<Internal.Rotation> {
        static valueOf(arg0: string): this;
        static values(): Internal.Rotation[];
        static readonly "COUNTERCLOCKWISE_90" : Internal.Rotation;
        static readonly "CLOCKWISE_90" : Internal.Rotation;
        static readonly "CLOCKWISE_180" : Internal.Rotation;
        static readonly "NONE" : Internal.Rotation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Rotation_ = "clockwise_90" | "clockwise_180" | "none" | "counterclockwise_90" | Rotation;
    /**
    * @javaClass net.minecraft.client.renderer.RenderType
    */
    abstract class RenderType extends Internal.RenderStateShard implements Internal.AccessorRenderType, Internal.RenderTypeExtension {
        flywheel$getDrawBuffer(): Internal.DrawBuffer;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderType_ = RenderType;
    /**
    * @javaClass net.minecraftforge.common.capabilities.CapabilityDispatcher
    */
    class CapabilityDispatcher implements Internal.INBTSerializable<Internal.CompoundTag>, Internal.ICapabilityProvider {
        serializeNBT(): Internal.CompoundTag;
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        deserializeNBT(arg0: Internal.CompoundTag_): void;
        invalidate(): void;
        areCompatible(arg0: Internal.CapabilityDispatcher_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CapabilityDispatcher_ = CapabilityDispatcher;
    /**
    * @javaClass java.awt.image.WritableRenderedImage
    */
    interface WritableRenderedImage extends Internal.RenderedImage {
        getWritableTileIndices(): Internal.Point[];
        getWritableTile(arg0: number, arg1: number): Internal.WritableRaster;
        removeTileObserver(arg0: Internal.TileObserver_): void;
        setData(arg0: Internal.Raster_): void;
        hasTileWriters(): boolean;
        isTileWritable(arg0: number, arg1: number): boolean;
        releaseWritableTile(arg0: number, arg1: number): void;
        addTileObserver(arg0: Internal.TileObserver_): void;
    }
    type WritableRenderedImage_ = WritableRenderedImage;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Requires
    */
    class ModuleDescriptor$Requires implements Internal.Comparable<Internal.ModuleDescriptor$Requires> {
        compiledVersion(): Internal.Optional<Internal.ModuleDescriptor$Version>;
        hashCode(): number;
        equals(arg0: any): boolean;
        rawCompiledVersion(): Internal.Optional<string>;
        name(): string;
        toString(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Requires_): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Requires$Modifier>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Requires_ = ModuleDescriptor$Requires;
    /**
    * @javaClass net.minecraftforge.client.event.ContainerScreenEvent$DrawBackground
    */
    class ContainerScreenEvent$DrawBackground extends Internal.ContainerScreenEvent {
        getMouseY(): number;
        getListenerList(): Internal.ListenerList;
        getMouseX(): number;
        getPoseStack(): Internal.PoseStack;
        get mouseX(): number;
        get listenerList(): Internal.ListenerList;
        get mouseY(): number;
        get poseStack(): Internal.PoseStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContainerScreenEvent$DrawBackground_ = ContainerScreenEvent$DrawBackground;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.FireworkRocketEntityKJS
    */
    interface FireworkRocketEntityKJS {
        setLifetimeKJS(arg0: number): void;
    }
    type FireworkRocketEntityKJS_ = ((arg0: number) => void) | FireworkRocketEntityKJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptType
    */
    class ScriptType extends Internal.Enum<Internal.ScriptType> {
        isServer(): boolean;
        static valueOf(name: string): this;
        static of(level: Internal.LevelReader_): this;
        static values(): Internal.ScriptType[];
        isClient(): boolean;
        getLogFile(): Internal.Path;
        readonly "console" : Internal.ConsoleJS;
        readonly "manager" : (() => Internal.ScriptManager);
        static readonly "SERVER" : Internal.ScriptType;
        readonly "executor" : Internal.ExecutorService;
        readonly "warnings" : Internal.List<string>;
        readonly "name" : string;
        static readonly "STARTUP" : Internal.ScriptType;
        static readonly "CLIENT" : Internal.ScriptType;
        readonly "errors" : Internal.List<string>;
        get server(): boolean;
        get logFile(): Internal.Path;
        get client(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptType_ = "server" | "startup" | "client" | ScriptType;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.task.TaskType$Provider
    */
    interface TaskType$Provider {
        create(arg0: Internal.Quest_): Internal.Task;
    }
    type TaskType$Provider_ = ((arg0: Internal.Quest) => Internal.Task) | TaskType$Provider;
    /**
    * @javaClass com.prunoideae.recipe.ElvenTradeRecipeJS
    */
    class ElvenTradeRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ElvenTradeRecipeJS_ = ElvenTradeRecipeJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.painter.PainterObject
    */
    abstract class PainterObject implements Internal.SpecialEquality {
        hashCode(): number;
        equals(o: any): boolean;
        update(tag: Internal.CompoundTag_): void;
        toString(): string;
        id(i: string): this;
        specialEquals(o: any, shallow: boolean): boolean;
        "parent" : Internal.PainterObjectStorage;
        "visible" : Internal.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PainterObject_ = PainterObject;
    /**
    * @javaClass dev.architectury.event.forge.EventHandlerImplCommon$WorldEventAttachment
    */
    interface EventHandlerImplCommon$WorldEventAttachment {
        architectury$getAttachedLevel(): Internal.LevelAccessor;
        architectury$attachLevel(arg0: Internal.LevelAccessor_): void;
    }
    type EventHandlerImplCommon$WorldEventAttachment_ = EventHandlerImplCommon$WorldEventAttachment;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2ReferenceFunction
    */
    interface Object2ReferenceFunction <K, V> extends it.unimi.dsi.fastutil.Function<K, V> {
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Object2FloatFunction<K>;
        getOrDefault(arg0: any, arg1: V): V;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2ReferenceFunction<V>;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2ReferenceFunction<T, V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Object2CharFunction<K>;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Object2DoubleFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2ReferenceFunction<T, V>;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Object2ObjectFunction<K, T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2ReferenceFunction<V>;
        get(arg0: any): V;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2ReferenceFunction<V>;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Object2ByteFunction<K>;
    }
    type Object2ReferenceFunction_<K, V> = ((arg0: any) => V) | Object2ReferenceFunction<K, V>;
    /**
    * @javaClass net.minecraft.world.item.alchemy.Potion
    */
    class Potion extends Internal.ForgeRegistryEntry<Internal.Potion> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Potion_ = Special.Potion | Potion;
    /**
    * @javaClass dev.latvian.mods.rhino.ExternalArrayData
    */
    interface ExternalArrayData {
        setArrayElement(arg0: number, arg1: any): void;
        getArrayLength(): number;
        getArrayElement(arg0: number): any;
    }
    type ExternalArrayData_ = ExternalArrayData;
    /**
    * @javaClass dev.latvian.mods.kubejs.net.PainterUpdatedEventJS
    */
    class PainterUpdatedEventJS extends Internal.ClientEventJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PainterUpdatedEventJS_ = PainterUpdatedEventJS;
    /**
    * @javaClass com.mojang.brigadier.StringReader
    */
    class StringReader implements Internal.ImmutableStringReader {
        getCursor(): number;
        readStringUntil(arg0: string): string;
        getTotalLength(): number;
        read(): string;
        static isAllowedInUnquotedString(arg0: string): boolean;
        canRead(): boolean;
        canRead(arg0: number): boolean;
        getRemaining(): string;
        getRead(): string;
        readString(): string;
        skip(): void;
        getString(): string;
        peek(): string;
        peek(arg0: number): string;
        expect(arg0: string): void;
        getRemainingLength(): number;
        readLong(): number;
        readDouble(): number;
        readUnquotedString(): string;
        static isQuotedStringStart(arg0: string): boolean;
        readFloat(): number;
        static isAllowedNumber(arg0: string): boolean;
        setCursor(arg0: number): void;
        readBoolean(): boolean;
        readQuotedString(): string;
        readInt(): number;
        skipWhitespace(): void;
        get cursor(): number;
        get string(): string;
        get totalLength(): number;
        get remaining(): string;
        get remainingLength(): number;
        set cursor(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StringReader_ = StringReader;
    /**
    * @javaClass com.mojang.brigadier.tree.RootCommandNode
    */
    class RootCommandNode <S> extends Internal.CommandNode<S> {
        listSuggestions(arg0: Internal.CommandContext_<S>, arg1: Internal.SuggestionsBuilder_): Internal.CompletableFuture<Internal.Suggestions>;
        getName(): string;
        createBuilder(): Internal.ArgumentBuilder<S, any>;
        isValidInput(arg0: string): boolean;
        equals(arg0: any): boolean;
        getExamples(): Internal.Collection<string>;
        getUsageText(): string;
        toString(): string;
        parse(arg0: Internal.StringReader_, arg1: Internal.CommandContextBuilder_<S>): void;
        get examples(): Internal.Collection<string>;
        get name(): string;
        get usageText(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RootCommandNode_<S> = RootCommandNode<S>;
    /**
    * @javaClass com.mojang.datafixers.Products$P4
    */
    class Products$P4 <F, T1, T2, T3, T4> {
        t4(): Internal.App<F, T4>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function4_<T1, T2, T3, T4, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function4_<T1, T2, T3, T4, R>>): Internal.App<F, R>;
        and<T5, T6, T7>(arg0: Internal.Products$P3_<F, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T5, T6, T7, T8>(arg0: Internal.Products$P4_<F, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T5, T6>(arg0: Internal.Products$P2_<F, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        and<T5>(arg0: Internal.App_<F, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P4_<F, T1, T2, T3, T4> = Products$P4<F, T1, T2, T3, T4>;
    /**
    * @javaClass net.minecraft.commands.Commands
    */
    class Commands {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Commands_ = Commands;
    /**
    * @javaClass net.minecraftforge.event.AddReloadListenerEvent
    */
    class AddReloadListenerEvent extends net.minecraftforge.eventbus.api.Event {
        getListeners(): Internal.List<Internal.PreparableReloadListener>;
        getListenerList(): Internal.ListenerList;
        getConditionContext(): Internal.ICondition$IContext;
        getServerResources(): Internal.ReloadableServerResources;
        addListener(arg0: Internal.PreparableReloadListener_): void;
        get listeners(): Internal.List<Internal.PreparableReloadListener>;
        get listenerList(): Internal.ListenerList;
        get conditionContext(): Internal.ICondition$IContext;
        get serverResources(): Internal.ReloadableServerResources;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AddReloadListenerEvent_ = AddReloadListenerEvent;
    /**
    * @javaClass java.net.ContentHandler
    */
    abstract class ContentHandler {
        getContent(arg0: Internal.URLConnection_): any;
        getContent(arg0: Internal.URLConnection_, arg1: Internal.Class_[]): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContentHandler_ = ContentHandler;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorRenderBuffers
    */
    interface AccessorRenderBuffers {
        getEntityBuilders(): Internal.SortedMap<Internal.RenderType, Internal.BufferBuilder>;
    }
    type AccessorRenderBuffers_ = (() => Internal.SortedMap<Internal.RenderType, Internal.BufferBuilder>) | AccessorRenderBuffers;
    /**
    * @javaClass com.electronwill.nightconfig.core.CommentedConfig
    */
    interface CommentedConfig extends Internal.UnmodifiableCommentedConfig, Internal.Config {
        putAllComments(arg0: Internal.Map_<string, Internal.UnmodifiableCommentedConfig$CommentNode_>): void;
        putAllComments(arg0: Internal.UnmodifiableCommentedConfig_): void;
        entrySet(): Internal.Set<Internal.CommentedConfig$Entry>;
        commentMap(): Internal.Map<string, string>;
        unmodifiable(): Internal.UnmodifiableCommentedConfig;
        concurrentCopy(arg0: Internal.UnmodifiableCommentedConfig_): this;
        concurrentCopy(arg0: Internal.UnmodifiableCommentedConfig_, arg1: Internal.ConfigFormat_<any>): this;
        concurrentCopy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.ConfigFormat_<any>): this;
        concurrentCopy(arg0: Internal.UnmodifiableConfig_): this;
        inMemoryConcurrent(): this;
        inMemory(): this;
        clearComments(): void;
        of(arg0: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        of(arg0: Internal.Supplier_<Internal.Map_<string, any>>, arg1: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        ofConcurrent(arg0: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        setComment(arg0: string, arg1: string): string;
        setComment(arg0: Internal.List_<string>, arg1: string): string;
        checked(): this;
        fake(arg0: Internal.Config_): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.ConfigFormat_<any>): this;
        copy(arg0: Internal.UnmodifiableConfig_): this;
        copy(arg0: Internal.UnmodifiableCommentedConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>, arg2: Internal.ConfigFormat_<Internal.CommentedConfig_>): this;
        copy(arg0: Internal.UnmodifiableCommentedConfig_, arg1: Internal.ConfigFormat_<any>): this;
        copy(arg0: Internal.UnmodifiableCommentedConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>, arg2: Internal.ConfigFormat_<any>): this;
        copy(arg0: Internal.UnmodifiableCommentedConfig_): this;
        createSubConfig(): this;
        removeComment(arg0: string): string;
        removeComment(arg0: Internal.List_<string>): string;
        wrap(arg0: Internal.Map_<string, any>, arg1: Internal.ConfigFormat_<any>): this;
    }
    type CommentedConfig_ = CommentedConfig;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardCharTypedEvent$Pre
    */
    class ScreenEvent$KeyboardCharTypedEvent$Pre extends Internal.ScreenEvent$KeyboardCharTypedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardCharTypedEvent$Pre_ = ScreenEvent$KeyboardCharTypedEvent$Pre;
    /**
    * @javaClass net.minecraft.server.players.PlayerList
    */
    abstract class PlayerList {
        addPlayer(arg0: Internal.ServerPlayer_): boolean;
        removePlayer(arg0: Internal.ServerPlayer_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerList_ = PlayerList;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeItem
    */
    interface IForgeItem {
        canElytraFly(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_): boolean;
        setDamage(arg0: Internal.ItemStack_, arg1: number): void;
        canPerformAction(arg0: Internal.ItemStack_, arg1: Internal.ToolAction_): boolean;
        damageItem<T>(arg0: Internal.ItemStack_, arg1: number, arg2: T, arg3: Internal.Consumer_<T>): number;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_): boolean;
        getItemEnchantability(arg0: Internal.ItemStack_): number;
        shouldCauseReequipAnimation(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_, arg2: boolean): boolean;
        getXpRepairRatio(arg0: Internal.ItemStack_): number;
        readShareTag(arg0: Internal.ItemStack_, arg1: Internal.CompoundTag_): void;
        onEntityItemUpdate(arg0: Internal.ItemStack_, arg1: Internal.ItemEntity_): boolean;
        getDamage(arg0: Internal.ItemStack_): number;
        isBookEnchantable(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_): boolean;
        canDisableShield(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_, arg2: Internal.LivingEntity_, arg3: Internal.LivingEntity_): boolean;
        onUsingTick(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_, arg2: number): void;
        isPiglinCurrency(arg0: Internal.ItemStack_): boolean;
        getCreativeTabs(): Internal.Collection<Internal.CreativeModeTab>;
        createEntity(arg0: Internal.Level_, arg1: Internal.Entity_, arg2: Internal.ItemStack_): Internal.Entity;
        getSweepHitBox(arg0: Internal.ItemStack_, arg1: Internal.Player_, arg2: Internal.Entity_): Internal.AABB;
        isRepairable(arg0: Internal.ItemStack_): boolean;
        getShareTag(arg0: Internal.ItemStack_): Internal.CompoundTag;
        getBurnTime(arg0: Internal.ItemStack_, arg1: Internal.RecipeType_<any>): number;
        onDroppedByPlayer(arg0: Internal.ItemStack_, arg1: Internal.Player_): boolean;
        isDamageable(arg0: Internal.ItemStack_): boolean;
        onEntitySwing(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_): boolean;
        elytraFlightTick(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_, arg2: number): boolean;
        getAttributeModifiers(arg0: EquipmentSlot_, arg1: Internal.ItemStack_): Internal.Multimap<Internal.Attribute, Internal.AttributeModifier>;
        onLeftClickEntity(arg0: Internal.ItemStack_, arg1: Internal.Player_, arg2: Internal.Entity_): boolean;
        canEquip(arg0: Internal.ItemStack_, arg1: EquipmentSlot_, arg2: Internal.Entity_): boolean;
        onBlockStartBreak(arg0: Internal.ItemStack_, arg1: BlockPos_, arg2: Internal.Player_): boolean;
        onHorseArmorTick(arg0: Internal.ItemStack_, arg1: Internal.Level_, arg2: Internal.Mob_): void;
        canContinueUsing(arg0: Internal.ItemStack_, arg1: Internal.ItemStack_): boolean;
        getEntityLifespan(arg0: Internal.ItemStack_, arg1: Internal.Level_): number;
        getDefaultTooltipHideFlags(arg0: Internal.ItemStack_): number;
        getArmorTexture(arg0: Internal.ItemStack_, arg1: Internal.Entity_, arg2: EquipmentSlot_, arg3: string): string;
        hasCustomEntity(arg0: Internal.ItemStack_): boolean;
        getHighlightTip(arg0: Internal.ItemStack_, arg1: net.minecraft.network.chat.Component_): net.minecraft.network.chat.Component;
        canWalkOnPowderedSnow(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_): boolean;
        getMaxDamage(arg0: Internal.ItemStack_): number;
        getCreatorModId(arg0: Internal.ItemStack_): string;
        isDamaged(arg0: Internal.ItemStack_): boolean;
        onArmorTick(arg0: Internal.ItemStack_, arg1: Internal.Level_, arg2: Internal.Player_): void;
        hasContainerItem(arg0: Internal.ItemStack_): boolean;
        getFoodProperties(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_): Internal.FoodProperties;
        doesSneakBypassUse(arg0: Internal.ItemStack_, arg1: Internal.LevelReader_, arg2: BlockPos_, arg3: Internal.Player_): boolean;
        onItemUseFirst(arg0: Internal.ItemStack_, arg1: Internal.UseOnContext_): Internal.InteractionResult;
        getContainerItem(arg0: Internal.ItemStack_): Internal.ItemStack;
        onDestroyed(arg0: Internal.ItemEntity_, arg1: Internal.DamageSource_): void;
        isCorrectToolForDrops(arg0: Internal.ItemStack_, arg1: Internal.BlockState_): boolean;
        getEquipmentSlot(arg0: Internal.ItemStack_): EquipmentSlot;
        getItemStackLimit(arg0: Internal.ItemStack_): number;
        initCapabilities(arg0: Internal.ItemStack_, arg1: Internal.CompoundTag_): Internal.ICapabilityProvider;
        makesPiglinsNeutral(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_): boolean;
        isEnderMask(arg0: Internal.ItemStack_, arg1: Internal.Player_, arg2: Internal.EnderMan_): boolean;
        canApplyAtEnchantingTable(arg0: Internal.ItemStack_, arg1: Internal.Enchantment_): boolean;
    }
    type IForgeItem_ = ((arg0: Internal.ItemStack) => boolean) | IForgeItem;
    /**
    * @javaClass net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource
    */
    interface BiomeManager$NoiseBiomeSource {
    }
    type BiomeManager$NoiseBiomeSource_ = BiomeManager$NoiseBiomeSource;
    /**
    * @javaClass vazkii.botania.mixin.AccessorLivingEntity
    */
    interface AccessorLivingEntity {
        setUseItemRemaining(arg0: number): void;
        callCreateLootContext(arg0: boolean, arg1: Internal.DamageSource_): Internal.LootContext$Builder;
    }
    type AccessorLivingEntity_ = AccessorLivingEntity;
    /**
    * @javaClass java.util.concurrent.ScheduledExecutorService
    */
    interface ScheduledExecutorService extends Internal.ExecutorService {
        scheduleAtFixedRate(arg0: Internal.Runnable_, arg1: number, arg2: number, arg3: Internal.TimeUnit_): Internal.ScheduledFuture<any>;
        schedule(arg0: Internal.Runnable_, arg1: number, arg2: Internal.TimeUnit_): Internal.ScheduledFuture<any>;
        schedule<V>(arg0: Internal.Callable_<V>, arg1: number, arg2: Internal.TimeUnit_): Internal.ScheduledFuture<V>;
        scheduleWithFixedDelay(arg0: Internal.Runnable_, arg1: number, arg2: number, arg3: Internal.TimeUnit_): Internal.ScheduledFuture<any>;
    }
    type ScheduledExecutorService_ = ScheduledExecutorService;
    /**
    * @javaClass java.nio.FloatBuffer
    */
    abstract class FloatBuffer extends Internal.Buffer implements Internal.Comparable<Internal.FloatBuffer> {
        hasArray(): boolean;
        compact(): this;
        clear(): this;
        duplicate(): this;
        compareTo(arg0: Internal.FloatBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.FloatBuffer_, arg2: number, arg3: number): this;
        put(arg0: Internal.FloatBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        mismatch(arg0: Internal.FloatBuffer_): number;
        equals(arg0: any): boolean;
        get(): number;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        reset(): this;
        arrayOffset(): number;
        toString(): string;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        static wrap(arg0: number[]): this;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        mark(): this;
        order(): Internal.ByteOrder;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FloatBuffer_ = FloatBuffer;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.PlayerStatsJS
    */
    class PlayerStatsJS {
        getPlayTime(): number;
        getPlayer(): Internal.PlayerJS<any>;
        getDamageAbsorbed(): number;
        getWalkDistance(): number;
        getCrouchDistance(): number;
        getItemsPickedUp(item: Internal.Item_): number;
        getFishCaught(): number;
        getDamageDealt_absorbed(): number;
        getDeaths(): number;
        getSwimDistance(): number;
        getItemsCrafted(item: Internal.Item_): number;
        getBlocksMined(block: Internal.Block_): number;
        getPlayerKills(): number;
        getDamageDealt_resisted(): number;
        get(id: ResourceLocation_): number;
        getTimeSinceDeath(): number;
        getDamageBlocked_by_shield(): number;
        getKilled(entity: Internal.EntityType_<any>): number;
        getTimeCrouchTime(): number;
        getDamageTaken(): number;
        add(id: ResourceLocation_, value: number): void;
        getItemsDropped(item: Internal.Item_): number;
        set(id: ResourceLocation_, value: number): void;
        getJumps(): number;
        getDamageResisted(): number;
        getAnimalsBred(): number;
        getItemsBroken(item: Internal.Item_): number;
        getMobKills(): number;
        getSprintDistance(): number;
        getTimeSinceRest(): number;
        getKilledBy(entity: Internal.EntityType_<any>): number;
        getDamageDealt(): number;
        getItemsUsed(item: Internal.Item_): number;
        get playerKills(): number;
        get animalsBred(): number;
        get walkDistance(): number;
        get damageDealt_resisted(): number;
        get crouchDistance(): number;
        get damageAbsorbed(): number;
        get damageResisted(): number;
        get jumps(): number;
        get damageDealt_absorbed(): number;
        get timeSinceDeath(): number;
        get timeCrouchTime(): number;
        get damageBlocked_by_shield(): number;
        get fishCaught(): number;
        get mobKills(): number;
        get sprintDistance(): number;
        get timeSinceRest(): number;
        get swimDistance(): number;
        get playTime(): number;
        get deaths(): number;
        get damageDealt(): number;
        get player(): Internal.PlayerJS<any>;
        get damageTaken(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerStatsJS_ = PlayerStatsJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.gen.properties.RemoveOresProperties
    */
    class RemoveOresProperties {
        "biomes" : ((arg0: Internal.BiomeModifications$BiomeContext) => boolean);
        "blocks" : ((arg0: Internal.BlockState) => boolean);
        "worldgenLayer" : DecorationGenerationStep;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RemoveOresProperties_ = RemoveOresProperties;
    /**
    * @javaClass java.util.Optional
    */
    class Optional <T> {
        or(arg0: Internal.Supplier_<Internal.Optional_<T>>): Internal.Optional<T>;
        static ofNullable<T>(arg0: T): Internal.Optional<T>;
        isEmpty(): boolean;
        isPresent(): boolean;
        orElse(arg0: T): T;
        orElseThrow<X>(arg0: Internal.Supplier_<X>): T;
        orElseThrow(): T;
        static empty<T>(): Internal.Optional<T>;
        flatMap<U>(arg0: Internal.Function_<T, Internal.Optional_<U>>): Internal.Optional<U>;
        filter(arg0: Internal.Predicate_<T>): Internal.Optional<T>;
        orElseGet(arg0: Internal.Supplier_<T>): T;
        stream(): Internal.Stream<T>;
        hashCode(): number;
        ifPresentOrElse(arg0: Internal.Consumer_<T>, arg1: Internal.Runnable_): void;
        ifPresent(arg0: Internal.Consumer_<T>): void;
        static of<T>(arg0: T): Internal.Optional<T>;
        equals(arg0: any): boolean;
        get(): T;
        toString(): string;
        map<U>(arg0: Internal.Function_<T, U>): Internal.Optional<U>;
        get present(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Optional_<T> = Optional<T>;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerXpEvent
    */
    class PlayerXpEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerXpEvent_ = PlayerXpEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.RegistryObjectBuilderTypes$BuilderType
    */
    class RegistryObjectBuilderTypes$BuilderType <T> extends Internal.Record {
        factory(): Internal.RegistryObjectBuilderTypes$BuilderFactory<T>;
        builderClass(): typeof Internal.BuilderBase<T>;
        hashCode(): number;
        equals(o: any): boolean;
        toString(): string;
        type(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryObjectBuilderTypes$BuilderType_<T> = RegistryObjectBuilderTypes$BuilderType<T>;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntComparator
    */
    interface IntComparator extends Internal.Comparator<number> {
        compare(arg0: number, arg1: number): number;
        thenComparing(arg0: Internal.Comparator_<number>): Internal.Comparator<number>;
        thenComparing(arg0: Internal.IntComparator_): this;
        reversed(): this;
    }
    type IntComparator_ = ((arg0: number, arg1: number) => number) | IntComparator;
    /**
    * @javaClass net.minecraft.world.level.chunk.ChunkGenerator
    */
    abstract class ChunkGenerator implements Internal.BiomeManager$NoiseBiomeSource {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkGenerator_ = ChunkGenerator;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.predicate.BlockEntityPredicate
    */
    class BlockEntityPredicate implements Internal.BlockPredicate {
        data(cd: Internal.BlockEntityPredicateDataCheck_): this;
        toString(): string;
        check(block: Internal.BlockContainerJS_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEntityPredicate_ = BlockEntityPredicate;
    /**
    * @javaClass net.minecraft.world.item.Tier
    */
    interface Tier {
        getTag(): Internal.TagKey<Internal.Block>;
    }
    type Tier_ = Tier;
    /**
    * @javaClass java.awt.font.TextAttribute
    */
    class TextAttribute extends Internal.AttributedCharacterIterator$Attribute {
        static readonly "WEIGHT_BOLD" : 2.0;
        static readonly "UNDERLINE_LOW_GRAY" : 4;
        static readonly "NUMERIC_SHAPING" : Internal.TextAttribute;
        static readonly "WIDTH_SEMI_CONDENSED" : 0.875;
        static readonly "WIDTH_REGULAR" : 1.0;
        static readonly "SWAP_COLORS" : Internal.TextAttribute;
        static readonly "WIDTH_SEMI_EXTENDED" : 1.25;
        static readonly "RUN_DIRECTION" : Internal.TextAttribute;
        static readonly "WIDTH_EXTENDED" : 1.5;
        static readonly "CHAR_REPLACEMENT" : Internal.TextAttribute;
        static readonly "BIDI_EMBEDDING" : Internal.TextAttribute;
        static readonly "UNDERLINE_LOW_DASHED" : 5;
        static readonly "INPUT_METHOD_HIGHLIGHT" : Internal.TextAttribute;
        static readonly "STRIKETHROUGH_ON" : true;
        static readonly "TRANSFORM" : Internal.TextAttribute;
        static readonly "WEIGHT" : Internal.TextAttribute;
        static readonly "SWAP_COLORS_ON" : true;
        static readonly "JUSTIFICATION_FULL" : 1.0;
        static readonly "WEIGHT_HEAVY" : 2.25;
        static readonly "SIZE" : Internal.TextAttribute;
        static readonly "POSTURE_REGULAR" : 0.0;
        static readonly "KERNING_ON" : 1;
        static readonly "BACKGROUND" : Internal.TextAttribute;
        static readonly "RUN_DIRECTION_LTR" : false;
        static readonly "RUN_DIRECTION_RTL" : true;
        static readonly "WIDTH_CONDENSED" : 0.75;
        static readonly "LIGATURES_ON" : 1;
        static readonly "SUPERSCRIPT" : Internal.TextAttribute;
        static readonly "JUSTIFICATION" : Internal.TextAttribute;
        static readonly "KERNING" : Internal.TextAttribute;
        static readonly "WEIGHT_SEMIBOLD" : 1.25;
        static readonly "LIGATURES" : Internal.TextAttribute;
        static readonly "WEIGHT_DEMILIGHT" : 0.875;
        static readonly "WEIGHT_ULTRABOLD" : 2.75;
        static readonly "JUSTIFICATION_NONE" : 0.0;
        static readonly "UNDERLINE_LOW_ONE_PIXEL" : 1;
        static readonly "UNDERLINE_ON" : 0;
        static readonly "POSTURE_OBLIQUE" : 0.2;
        static readonly "WEIGHT_REGULAR" : 1.0;
        static readonly "WIDTH" : Internal.TextAttribute;
        static readonly "SUPERSCRIPT_SUPER" : 1;
        static readonly "UNDERLINE" : Internal.TextAttribute;
        static readonly "FAMILY" : Internal.TextAttribute;
        static readonly "WEIGHT_LIGHT" : 0.75;
        static readonly "POSTURE" : Internal.TextAttribute;
        static readonly "TRACKING_LOOSE" : 0.04;
        static readonly "WEIGHT_EXTRA_LIGHT" : 0.5;
        static readonly "TRACKING" : Internal.TextAttribute;
        static readonly "INPUT_METHOD_UNDERLINE" : Internal.TextAttribute;
        static readonly "TRACKING_TIGHT" : -0.04;
        static readonly "UNDERLINE_LOW_DOTTED" : 3;
        static readonly "SUPERSCRIPT_SUB" : -1;
        static readonly "FONT" : Internal.TextAttribute;
        static readonly "FOREGROUND" : Internal.TextAttribute;
        static readonly "STRIKETHROUGH" : Internal.TextAttribute;
        static readonly "WEIGHT_DEMIBOLD" : 1.75;
        static readonly "WEIGHT_EXTRABOLD" : 2.5;
        static readonly "WEIGHT_MEDIUM" : 1.5;
        static readonly "UNDERLINE_LOW_TWO_PIXEL" : 2;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextAttribute_ = TextAttribute;
    /**
    * @javaClass com.jozufozu.flywheel.backend.gl.buffer.VecBuffer
    */
    class VecBuffer {
        putVec2(arg0: number, arg1: number): this;
        putVec3(arg0: number, arg1: number, arg2: number): this;
        putVec4(arg0: number, arg1: number, arg2: number, arg3: number): this;
        putInt(arg0: number): this;
        putColor(arg0: number, arg1: number, arg2: number, arg3: number): this;
        put(arg0: number): this;
        put(arg0: Internal.FloatBuffer_): this;
        put(arg0: Internal.ByteBuffer_): this;
        putByteArray(arg0: number[]): this;
        unwrap(): Internal.ByteBuffer;
        putFloat(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        position(arg0: number): this;
        position(): number;
        putShort(arg0: number): this;
        putFloatArray(arg0: number[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VecBuffer_ = VecBuffer;
    /**
    * @javaClass net.minecraft.world.item.crafting.RecipeManager
    */
    class RecipeManager extends Internal.SimpleJsonResourceReloadListener implements Internal.RecipeManagerAccessor, Internal.AccessorRecipeManager {
        static fromJson(arg0: ResourceLocation_, arg1: Internal.JsonObject_, arg2: Internal.ICondition$IContext_): Internal.Recipe<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeManager_ = RecipeManager;
    /**
    * @javaClass net.minecraftforge.network.NetworkEvent$Context
    */
    class NetworkEvent$Context {
        getNetworkManager(): Internal.Connection;
        getDirection(): Internal.NetworkDirection;
        enqueueWork(arg0: Internal.Runnable_): Internal.CompletableFuture<void>;
        setPacketHandled(arg0: boolean): void;
        getSender(): Internal.ServerPlayer;
        attr<T>(arg0: Internal.AttributeKey_<T>): io.netty.util.Attribute<T>;
        getPacketDispatcher(): Internal.NetworkEvent$PacketDispatcher;
        getPacketHandled(): boolean;
        get networkManager(): Internal.Connection;
        get sender(): Internal.ServerPlayer;
        get packetHandled(): boolean;
        get direction(): Internal.NetworkDirection;
        get packetDispatcher(): Internal.NetworkEvent$PacketDispatcher;
        set packetHandled(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NetworkEvent$Context_ = NetworkEvent$Context;
    /**
    * @javaClass net.minecraft.client.model.Model
    */
    abstract class Model {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Model_ = Model;
    /**
    * @javaClass java.awt.JobAttributes$DefaultSelectionType
    */
    class JobAttributes$DefaultSelectionType extends Internal.AttributeValue {
        static readonly "ALL" : Internal.JobAttributes$DefaultSelectionType;
        static readonly "SELECTION" : Internal.JobAttributes$DefaultSelectionType;
        static readonly "RANGE" : Internal.JobAttributes$DefaultSelectionType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes$DefaultSelectionType_ = JobAttributes$DefaultSelectionType;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.ScrollBar
    */
    class ScrollBar extends dev.ftb.mods.ftblibrary.ui.Widget {
        setCanAlwaysScrollPlane(v: boolean): void;
        setScrollStep(s: number): void;
        mouseScrolled(scroll: number): boolean;
        getMaxValue(): number;
        getMappedValue(max: number): number;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        drawScrollBar(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        canMouseScroll(): boolean;
        onMoved(): void;
        mousePressed(button: Internal.MouseButton_): boolean;
        addMouseOverText(list: Internal.TooltipList_): void;
        setMaxValue(max: number): void;
        getValue(): number;
        getMinValue(): number;
        showValueOnMouseOver(): boolean;
        canMouseScrollPlane(): boolean;
        drawBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        setValue(v: number): void;
        getScrollBarSize(): number;
        getScrollStep(): number;
        setCanAlwaysScroll(v: boolean): void;
        setMinValue(min: number): void;
        readonly "plane" : Internal.ScrollBar$Plane;
        get minValue(): number;
        get maxValue(): number;
        get scrollStep(): number;
        get scrollBarSize(): number;
        get value(): number;
        set canAlwaysScroll(v: boolean);
        set canAlwaysScrollPlane(v: boolean);
        set minValue(min: number);
        set maxValue(max: number);
        set scrollStep(s: number);
        set value(v: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScrollBar_ = ScrollBar;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2CharFunction
    */
    interface Byte2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2CharFunction;
    }
    type Byte2CharFunction_ = ((arg0: number) => string) | Byte2CharFunction;
    /**
    * @javaClass java.util.ResourceBundle$Control
    */
    class ResourceBundle$Control {
        static getNoFallbackControl(arg0: Internal.List_<string>): this;
        static getControl(arg0: Internal.List_<string>): this;
        toBundleName(arg0: string, arg1: Internal.Locale_): string;
        needsReload(arg0: string, arg1: Internal.Locale_, arg2: string, arg3: Internal.ClassLoader_, arg4: Internal.ResourceBundle_, arg5: number): boolean;
        toResourceName(arg0: string, arg1: string): string;
        newBundle(arg0: string, arg1: Internal.Locale_, arg2: string, arg3: Internal.ClassLoader_, arg4: boolean): Internal.ResourceBundle;
        getFormats(arg0: string): Internal.List<string>;
        getTimeToLive(arg0: string, arg1: Internal.Locale_): number;
        getFallbackLocale(arg0: string, arg1: Internal.Locale_): Internal.Locale;
        getCandidateLocales(arg0: string, arg1: Internal.Locale_): Internal.List<Internal.Locale>;
        static readonly "FORMAT_PROPERTIES" : ["java.properties"];
        static readonly "TTL_DONT_CACHE" : -1;
        static readonly "FORMAT_DEFAULT" : ["java.class", "java.properties"];
        static readonly "TTL_NO_EXPIRATION_CONTROL" : -2;
        static readonly "FORMAT_CLASS" : ["java.class"];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ResourceBundle$Control_ = ResourceBundle$Control;
    /**
    * @javaClass java.util.stream.DoubleStream$Builder
    */
    interface DoubleStream$Builder extends Internal.DoubleConsumer {
        add(arg0: number): this;
        build(): Internal.DoubleStream;
        accept(arg0: number): void;
    }
    type DoubleStream$Builder_ = DoubleStream$Builder;
    /**
    * @javaClass java.awt.dnd.DropTargetListener
    */
    interface DropTargetListener extends Internal.EventListener {
        drop(arg0: Internal.DropTargetDropEvent_): void;
        dragEnter(arg0: Internal.DropTargetDragEvent_): void;
        dropActionChanged(arg0: Internal.DropTargetDragEvent_): void;
        dragOver(arg0: Internal.DropTargetDragEvent_): void;
        dragExit(arg0: Internal.DropTargetEvent_): void;
    }
    type DropTargetListener_ = DropTargetListener;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2ReferenceFunction
    */
    interface Byte2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Byte2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Byte2ReferenceFunction_<V> = ((arg0: number) => V) | Byte2ReferenceFunction<V>;
    /**
    * @javaClass com.jozufozu.flywheel.api.vertex.VertexList
    */
    interface VertexList {
        getLight(arg0: number): number;
        getG(arg0: number): number;
        isEmpty(): boolean;
        getR(arg0: number): number;
        getVertexCount(): number;
        getU(arg0: number): number;
        getV(arg0: number): number;
        getX(arg0: number): number;
        getY(arg0: number): number;
        getZ(arg0: number): number;
        getNZ(arg0: number): number;
        getNY(arg0: number): number;
        getA(arg0: number): number;
        getNX(arg0: number): number;
        getB(arg0: number): number;
    }
    type VertexList_ = VertexList;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.minecraft.ShapelessRecipeJS
    */
    class ShapelessRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ShapelessRecipeJS_ = ShapelessRecipeJS;
    /**
    * @javaClass org.slf4j.Logger
    */
    interface Logger {
        warn(arg0: Internal.Marker_, arg1: string, arg2: Internal.Throwable_): void;
        warn(arg0: Internal.Marker_, arg1: string, ... arg2: any[]): void;
        warn(arg0: Internal.Marker_, arg1: string, arg2: any, arg3: any): void;
        warn(arg0: string, arg1: any): void;
        warn(arg0: string): void;
        warn(arg0: string, ... arg1: any[]): void;
        warn(arg0: string, arg1: any, arg2: any): void;
        warn(arg0: string, arg1: Internal.Throwable_): void;
        warn(arg0: Internal.Marker_, arg1: string): void;
        warn(arg0: Internal.Marker_, arg1: string, arg2: any): void;
        trace(arg0: Internal.Marker_, arg1: string): void;
        trace(arg0: Internal.Marker_, arg1: string, arg2: any): void;
        trace(arg0: Internal.Marker_, arg1: string, arg2: any, arg3: any): void;
        trace(arg0: string, arg1: any): void;
        trace(arg0: string, arg1: any, arg2: any): void;
        trace(arg0: string, ... arg1: any[]): void;
        trace(arg0: string): void;
        trace(arg0: string, arg1: Internal.Throwable_): void;
        trace(arg0: Internal.Marker_, arg1: string, ... arg2: any[]): void;
        trace(arg0: Internal.Marker_, arg1: string, arg2: Internal.Throwable_): void;
        debug(arg0: Internal.Marker_, arg1: string, ... arg2: any[]): void;
        debug(arg0: string, ... arg1: any[]): void;
        debug(arg0: string, arg1: any): void;
        debug(arg0: string): void;
        debug(arg0: Internal.Marker_, arg1: string): void;
        debug(arg0: string, arg1: any, arg2: any): void;
        debug(arg0: Internal.Marker_, arg1: string, arg2: any, arg3: any): void;
        debug(arg0: Internal.Marker_, arg1: string, arg2: any): void;
        debug(arg0: Internal.Marker_, arg1: string, arg2: Internal.Throwable_): void;
        debug(arg0: string, arg1: Internal.Throwable_): void;
        getName(): string;
        isInfoEnabled(): boolean;
        isInfoEnabled(arg0: Internal.Marker_): boolean;
        isErrorEnabled(): boolean;
        isErrorEnabled(arg0: Internal.Marker_): boolean;
        isTraceEnabled(): boolean;
        isTraceEnabled(arg0: Internal.Marker_): boolean;
        isWarnEnabled(arg0: Internal.Marker_): boolean;
        isWarnEnabled(): boolean;
        isDebugEnabled(): boolean;
        isDebugEnabled(arg0: Internal.Marker_): boolean;
        error(arg0: string, arg1: any): void;
        error(arg0: string): void;
        error(arg0: string, arg1: any, arg2: any): void;
        error(arg0: string, ... arg1: any[]): void;
        error(arg0: Internal.Marker_, arg1: string, ... arg2: any[]): void;
        error(arg0: Internal.Marker_, arg1: string, arg2: any, arg3: any): void;
        error(arg0: Internal.Marker_, arg1: string, arg2: any): void;
        error(arg0: Internal.Marker_, arg1: string): void;
        error(arg0: string, arg1: Internal.Throwable_): void;
        error(arg0: Internal.Marker_, arg1: string, arg2: Internal.Throwable_): void;
        info(arg0: string, arg1: any, arg2: any): void;
        info(arg0: string, ... arg1: any[]): void;
        info(arg0: string, arg1: Internal.Throwable_): void;
        info(arg0: string, arg1: any): void;
        info(arg0: string): void;
        info(arg0: Internal.Marker_, arg1: string, arg2: Internal.Throwable_): void;
        info(arg0: Internal.Marker_, arg1: string, ... arg2: any[]): void;
        info(arg0: Internal.Marker_, arg1: string, arg2: any, arg3: any): void;
        info(arg0: Internal.Marker_, arg1: string, arg2: any): void;
        info(arg0: Internal.Marker_, arg1: string): void;
    }
    type Logger_ = Logger;
    /**
    * @javaClass net.minecraft.client.gui.GuiComponent
    */
    abstract class GuiComponent {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GuiComponent_ = GuiComponent;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$Post
    */
    class RenderGameOverlayEvent$Post extends Internal.RenderGameOverlayEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$Post_ = RenderGameOverlayEvent$Post;
    /**
    * @javaClass net.minecraft.world.Nameable
    */
    interface Nameable {
    }
    type Nameable_ = Nameable;
    /**
    * @javaClass dev.latvian.mods.unit.function.FunctionFactory
    */
    class FunctionFactory extends Internal.Record {
        maxArgs(): number;
        hashCode(): number;
        supplier(): Internal.FunctionFactory$FuncSupplier;
        static of(name: string, args: number, supplier: Internal.FunctionFactory$FuncSupplier_): this;
        static of(name: string, minArgs: number, maxArgs: number, supplier: Internal.FunctionFactory$FuncSupplier_): this;
        equals(o: any): boolean;
        static of0(name: string, supplier: Internal.Supplier_<Internal.Unit_>): this;
        name(): string;
        create(args: Internal.Unit_[]): Internal.Unit;
        static of2(name: string, supplier: Internal.FunctionFactory$Arg2_): this;
        toString(): string;
        static of1(name: string, supplier: Internal.FunctionFactory$Arg1_): this;
        static of3(name: string, supplier: Internal.FunctionFactory$Arg3_): this;
        minArgs(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FunctionFactory_ = FunctionFactory;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.MutableArmorTier
    */
    class MutableArmorTier implements Internal.ArmorMaterial {
        setName(name: string): void;
        setEquipSound(e: Internal.SoundEvent_): void;
        setRepairIngredient(in_: Internal.IngredientJS_): void;
        setDurabilityMultiplier(m: number): void;
        getKnockbackResistance(): number;
        getToughness(): number;
        setSlotProtections(p: number[]): void;
        getEnchantmentValue(): number;
        setEnchantmentValue(i: number): void;
        setKnockbackResistance(f: number): void;
        getVanillaRepairIngredient(): Internal.Ingredient;
        getEquipSound(): Internal.SoundEvent;
        setToughness(f: number): void;
        readonly "parent" : Internal.ArmorMaterial;
        get equipSound(): Internal.SoundEvent;
        get vanillaRepairIngredient(): Internal.Ingredient;
        get enchantmentValue(): number;
        get toughness(): number;
        get knockbackResistance(): number;
        set repairIngredient(in_: Internal.IngredientJS_);
        set equipSound(e: Internal.SoundEvent_);
        set durabilityMultiplier(m: number);
        set slotProtections(p: number[]);
        set enchantmentValue(i: number);
        set name(name: string);
        set toughness(f: number);
        set knockbackResistance(f: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MutableArmorTier_ = MutableArmorTier;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2ReferenceFunction
    */
    interface Long2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.LongFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Long2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Long2ReferenceFunction_<V> = ((arg0: number) => V) | Long2ReferenceFunction<V>;
    /**
    * @javaClass com.mojang.math.Matrix3f
    */
    class Matrix3f implements Internal.MatrixWrite {
        multiplyBackward(arg0: Internal.Matrix3f_): void;
        hashCode(): number;
        flywheel$writeUnsafe(arg0: number): void;
        equals(arg0: any): boolean;
        flywheel$write(arg0: Internal.VecBuffer_): void;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Matrix3f_ = Matrix3f;
    /**
    * @javaClass java.util.function.IntConsumer
    */
    interface IntConsumer {
        andThen(arg0: Internal.IntConsumer_): this;
        accept(arg0: number): void;
    }
    type IntConsumer_ = ((arg0: number) => void) | IntConsumer;
    /**
    * @javaClass java.awt.GraphicsConfiguration
    */
    abstract class GraphicsConfiguration {
        createCompatibleVolatileImage(arg0: number, arg1: number): Internal.VolatileImage;
        createCompatibleVolatileImage(arg0: number, arg1: number, arg2: Internal.ImageCapabilities_): Internal.VolatileImage;
        createCompatibleVolatileImage(arg0: number, arg1: number, arg2: Internal.ImageCapabilities_, arg3: number): Internal.VolatileImage;
        createCompatibleVolatileImage(arg0: number, arg1: number, arg2: number): Internal.VolatileImage;
        getColorModel(): Internal.ColorModel;
        getColorModel(arg0: number): Internal.ColorModel;
        getNormalizingTransform(): Internal.AffineTransform;
        getImageCapabilities(): Internal.ImageCapabilities;
        getBufferCapabilities(): Internal.BufferCapabilities;
        createCompatibleImage(arg0: number, arg1: number, arg2: number): Internal.BufferedImage;
        createCompatibleImage(arg0: number, arg1: number): Internal.BufferedImage;
        getDefaultTransform(): Internal.AffineTransform;
        isTranslucencyCapable(): boolean;
        getDevice(): Internal.GraphicsDevice;
        getBounds(): Internal.Rectangle;
        get normalizingTransform(): Internal.AffineTransform;
        get translucencyCapable(): boolean;
        get defaultTransform(): Internal.AffineTransform;
        get bounds(): Internal.Rectangle;
        get colorModel(): Internal.ColorModel;
        get imageCapabilities(): Internal.ImageCapabilities;
        get bufferCapabilities(): Internal.BufferCapabilities;
        get device(): Internal.GraphicsDevice;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GraphicsConfiguration_ = GraphicsConfiguration;
    /**
    * @javaClass dev.latvian.mods.kubejs.stages.StageCreationEvent
    */
    class StageCreationEvent {
        getPlayer(): Internal.Player;
        setPlayerStages(s: Internal.Stages_): void;
        getPlayerStages(): Internal.Stages;
        get playerStages(): Internal.Stages;
        get player(): Internal.Player;
        set playerStages(s: Internal.Stages_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StageCreationEvent_ = StageCreationEvent;
    /**
    * @javaClass com.mojang.serialization.codecs.PrimitiveCodec
    */
    interface PrimitiveCodec <A> extends Internal.Codec<A> {
        encode<T>(arg0: A, arg1: Internal.DynamicOps_<T>, arg2: T): Internal.DataResult<T>;
        read<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<A>;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        write<T>(arg0: Internal.DynamicOps_<T>, arg1: A): T;
    }
    type PrimitiveCodec_<A> = PrimitiveCodec<A>;
    /**
    * @javaClass dev.latvian.mods.rhino.util.SpecialEquality
    */
    interface SpecialEquality {
        checkSpecialEquality(o: any, o1: any, shallow: boolean): boolean;
        specialEquals(o: any, shallow: boolean): boolean;
    }
    type SpecialEquality_ = SpecialEquality;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntOpenHashSet
    */
    class IntOpenHashSet extends Internal.AbstractIntSet implements Internal.Serializable, Internal.Cloneable, Internal.Hash {
        add(arg0: number): boolean;
        spliterator(): Internal.IntSpliterator;
        forEach(arg0: Internal.IntConsumer_): void;
        isEmpty(): boolean;
        clear(): void;
        static toSetWithExpectedSize(arg0: Internal.IntStream_, arg1: number): this;
        remove(arg0: number): boolean;
        static toSet(arg0: Internal.IntStream_): this;
        contains(arg0: number): boolean;
        iterator(): Internal.IntIterator;
        trim(): boolean;
        trim(arg0: number): boolean;
        size(): number;
        addAll(arg0: Internal.IntCollection_): boolean;
        addAll(arg0: Internal.Collection_<number>): boolean;
        hashCode(): number;
        static of(): this;
        static of(arg0: number): this;
        static of(arg0: number, arg1: number): this;
        static of(... arg0: number[]): this;
        static of(arg0: number, arg1: number, arg2: number): this;
        clone(): this;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IntOpenHashSet_ = IntOpenHashSet;
    /**
    * @javaClass java.util.function.IntPredicate
    */
    interface IntPredicate {
        or(arg0: Internal.IntPredicate_): this;
        test(arg0: number): boolean;
        and(arg0: Internal.IntPredicate_): this;
        negate(): this;
    }
    type IntPredicate_ = ((arg0: number) => boolean) | IntPredicate;
    /**
    * @javaClass net.minecraft.world.item.RecordItem
    */
    class RecordItem extends Internal.Item {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecordItem_ = RecordItem;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2LongFunction
    */
    interface Byte2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Byte2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Byte2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2LongFunction;
    }
    type Byte2LongFunction_ = ((arg0: number) => number) | Byte2LongFunction;
    /**
    * @javaClass com.google.common.collect.ImmutableMultiset$Builder
    */
    class ImmutableMultiset$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: E): Internal.ImmutableMultiset$Builder<E>;
        add(... arg0: E[]): Internal.ImmutableMultiset$Builder<E>;
        build(): Internal.ImmutableMultiset<E>;
        addAll(arg0: Internal.Iterable_<E>): Internal.ImmutableMultiset$Builder<E>;
        addAll(arg0: Internal.Iterator_<E>): Internal.ImmutableMultiset$Builder<E>;
        addCopies(arg0: E, arg1: number): Internal.ImmutableMultiset$Builder<E>;
        setCount(arg0: E, arg1: number): Internal.ImmutableMultiset$Builder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableMultiset$Builder_<E> = ImmutableMultiset$Builder<E>;
    /**
    * @javaClass java.util.function.LongUnaryOperator
    */
    interface LongUnaryOperator {
        applyAsLong(arg0: number): number;
        compose(arg0: Internal.LongUnaryOperator_): this;
        identity(): this;
        andThen(arg0: Internal.LongUnaryOperator_): this;
    }
    type LongUnaryOperator_ = ((arg0: number) => number) | LongUnaryOperator;
    /**
    * @javaClass java.util.AbstractMap
    */
    abstract class AbstractMap <K, V> implements Internal.Map<K, V> {
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        containsKey(arg0: any): boolean;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Map_<K, V>): void;
        equals(arg0: any): boolean;
        get(arg0: any): V;
        toString(): string;
        keySet(): Internal.Set<K>;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractMap_<K, V> = AbstractMap<K, V>;
    /**
    * @javaClass java.time.chrono.ChronoLocalDateTime
    */
    interface ChronoLocalDateTime <D> extends Internal.Temporal, Internal.TemporalAdjuster, Internal.Comparable<Internal.ChronoLocalDateTime<any>> {
        minus(arg0: Internal.TemporalAmount_): Internal.ChronoLocalDateTime<D>;
        minus(arg0: number, arg1: Internal.TemporalUnit_): Internal.ChronoLocalDateTime<D>;
        isEqual(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        toLocalTime(): Internal.LocalTime;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        format(arg0: Internal.DateTimeFormatter_): string;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        compareTo(arg0: Internal.ChronoLocalDateTime_<any>): number;
        atZone(arg0: Internal.ZoneId_): Internal.ChronoZonedDateTime<D>;
        toInstant(arg0: Internal.ZoneOffset_): Internal.Instant;
        isBefore(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): Internal.ChronoLocalDateTime<D>;
        plus(arg0: Internal.TemporalAmount_): Internal.ChronoLocalDateTime<D>;
        with(arg0: Internal.TemporalField_, arg1: number): Internal.ChronoLocalDateTime<D>;
        with(arg0: Internal.TemporalAdjuster_): Internal.ChronoLocalDateTime<D>;
        toLocalDate(): D;
        toEpochSecond(arg0: Internal.ZoneOffset_): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        timeLineOrder(): Internal.Comparator<Internal.ChronoLocalDateTime<any>>;
        from(arg0: Internal.TemporalAccessor_): Internal.ChronoLocalDateTime<any>;
        toString(): string;
        getChronology(): Internal.Chronology;
        isAfter(arg0: Internal.ChronoLocalDateTime_<any>): boolean;
    }
    type ChronoLocalDateTime_<D> = ChronoLocalDateTime<D>;
    /**
    * @javaClass net.minecraftforge.event.server.ServerStartingEvent
    */
    class ServerStartingEvent extends Internal.ServerLifecycleEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerStartingEvent_ = ServerStartingEvent;
    /**
    * @javaClass net.minecraft.commands.Commands$CommandSelection
    */
    class Commands$CommandSelection extends Internal.Enum<Internal.Commands$CommandSelection> {
        static valueOf(arg0: string): this;
        static values(): Internal.Commands$CommandSelection[];
        static readonly "ALL" : Internal.Commands$CommandSelection;
        static readonly "INTEGRATED" : Internal.Commands$CommandSelection;
        static readonly "DEDICATED" : Internal.Commands$CommandSelection;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Commands$CommandSelection_ = "all" | "dedicated" | "integrated" | Commands$CommandSelection;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatComparator
    */
    interface FloatComparator extends Internal.Comparator<number> {
        compare(arg0: number, arg1: number): number;
        thenComparing(arg0: Internal.Comparator_<number>): Internal.Comparator<number>;
        thenComparing(arg0: Internal.FloatComparator_): this;
        reversed(): this;
    }
    type FloatComparator_ = ((arg0: number, arg1: number) => number) | FloatComparator;
    /**
    * @javaClass net.minecraft.client.player.LocalPlayer
    */
    class LocalPlayer extends Internal.AbstractClientPlayer {
        handler$zgi000$noSwimmingWithHeavyBootsOn(arg0: Internal.CallbackInfoReturnable_<any>): void;
        updateSyncFields(arg0: Internal.LocalPlayer_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LocalPlayer_ = LocalPlayer;
    /**
    * @javaClass dev.latvian.mods.unit.VariableSet
    */
    class VariableSet implements Internal.UnitVariables {
        getVariables(): this;
        set(name: string, value: Internal.Unit_): this;
        set(name: string, value: number): this;
        get(entry: string): Internal.Unit;
        setMutable(name: string, initialValue: number): Internal.MutableNumberUnit;
        createSubset(): this;
        get variables(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VariableSet_ = VariableSet;
    /**
    * @javaClass dev.latvian.mods.rhino.IdEnumerationIterator
    */
    interface IdEnumerationIterator {
        enumerationIteratorNext(arg0: Internal.Context_, arg1: Internal.Consumer_<any>): boolean;
        enumerationIteratorHasNext(arg0: Internal.Context_, arg1: Internal.Consumer_<any>): boolean;
    }
    type IdEnumerationIterator_ = IdEnumerationIterator;
    /**
    * @javaClass net.minecraft.client.color.item.ItemColors
    */
    class ItemColors {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemColors_ = ItemColors;
    /**
    * @javaClass net.minecraftforge.client.IItemRenderProperties
    */
    interface IItemRenderProperties {
        getItemStackRenderer(): Internal.BlockEntityWithoutLevelRenderer;
        getBaseArmorModel(arg0: Internal.LivingEntity_, arg1: Internal.ItemStack_, arg2: EquipmentSlot_, arg3: Internal.HumanoidModel_<any>): Internal.Model;
        getFont(arg0: Internal.ItemStack_): net.minecraft.client.gui.Font;
        getArmorModel(arg0: Internal.LivingEntity_, arg1: Internal.ItemStack_, arg2: EquipmentSlot_, arg3: Internal.HumanoidModel_<any>): Internal.HumanoidModel<any>;
        renderHelmetOverlay(arg0: Internal.ItemStack_, arg1: Internal.Player_, arg2: number, arg3: number, arg4: number): void;
    }
    type IItemRenderProperties_ = IItemRenderProperties;
    /**
    * @javaClass net.minecraft.world.entity.HumanoidArm
    */
    class HumanoidArm extends Internal.Enum<Internal.HumanoidArm> {
        static valueOf(arg0: string): this;
        static values(): Internal.HumanoidArm[];
        toString(): string;
        static readonly "LEFT" : Internal.HumanoidArm;
        static readonly "RIGHT" : Internal.HumanoidArm;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HumanoidArm_ = "left" | "right" | HumanoidArm;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.ClientLevelJS
    */
    class ClientLevelJS extends Internal.LevelJS {
        getMinecraftPlayer(): Internal.LocalPlayer;
        getPlayerData(player: Internal.Player_): Internal.ClientPlayerDataJS;
        getSide(): Internal.ScriptType;
        getEntities(): Internal.EntityArrayList;
        toString(): string;
        static getInstance(): this;
        getMinecraft(): Internal.Minecraft;
        static setInstance(instance: Internal.ClientLevelJS_): void;
        getMinecraftLevel(): Internal.ClientLevel;
        readonly "clientPlayerData" : Internal.ClientPlayerDataJS;
        get minecraft(): Internal.Minecraft;
        get side(): Internal.ScriptType;
        get instance(): this;
        get entities(): Internal.EntityArrayList;
        get minecraftPlayer(): Internal.LocalPlayer;
        get minecraftLevel(): Internal.ClientLevel;
        set instance(instance: Internal.ClientLevelJS_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientLevelJS_ = ClientLevelJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2DoubleFunction
    */
    interface Object2DoubleFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToDoubleFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        applyAsDouble(arg0: K): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Object2ShortFunction<K>;
        getDouble(arg0: any): number;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Object2FloatFunction<K>;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2DoubleFunction<T>;
        removeDouble(arg0: any): number;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2DoubleFunction;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2DoubleFunction;
    }
    type Object2DoubleFunction_<K> = ((arg0: any) => number) | Object2DoubleFunction<K>;
    /**
    * @javaClass net.minecraft.world.level.biome.AmbientParticleSettings
    */
    class AmbientParticleSettings {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AmbientParticleSettings_ = AmbientParticleSettings;
    /**
    * @javaClass com.mojang.datafixers.util.Function5
    */
    interface Function5 <T1, T2, T3, T4, T5, R> {
        apply(arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5): R;
        curry3(): Internal.Function3<T1, T2, T3, Internal.BiFunction<T4, T5, R>>;
        curry4(): Internal.Function4<T1, T2, T3, T4, Internal.Function<T5, R>>;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function3<T3, T4, T5, R>>;
        curry(): Internal.Function<T1, Internal.Function4<T2, T3, T4, T5, R>>;
    }
    type Function5_<T1, T2, T3, T4, T5, R> = ((arg0: T1, arg1: T2, arg2: T3, arg3: T4, arg4: T5) => R) | Function5<T1, T2, T3, T4, T5, R>;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.FileConfig
    */
    interface FileConfig extends Internal.Config, Internal.AutoCloseable {
        load(): void;
        of(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<Internal.Config_>): this;
        of(arg0: Internal.File_): this;
        of(arg0: string, arg1: Internal.ConfigFormat_<any>): this;
        of(arg0: Internal.File_, arg1: Internal.ConfigFormat_<Internal.Config_>): this;
        of(arg0: string): this;
        of(arg0: Internal.Path_): this;
        save(): void;
        builder(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<any>): Internal.FileConfigBuilder;
        builder(arg0: Internal.File_, arg1: Internal.ConfigFormat_<any>): Internal.FileConfigBuilder;
        builder(arg0: Internal.Path_): Internal.FileConfigBuilder;
        builder(arg0: string, arg1: Internal.ConfigFormat_<any>): Internal.FileConfigBuilder;
        builder(arg0: string): Internal.FileConfigBuilder;
        builder(arg0: Internal.File_): Internal.FileConfigBuilder;
        ofConcurrent(arg0: Internal.File_, arg1: Internal.ConfigFormat_<any>): this;
        ofConcurrent(arg0: Internal.File_): this;
        ofConcurrent(arg0: string): this;
        ofConcurrent(arg0: string, arg1: Internal.ConfigFormat_<any>): this;
        ofConcurrent(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<any>): this;
        ofConcurrent(arg0: Internal.Path_): this;
        checked(): this;
        getNioPath(): Internal.Path;
        getFile(): Internal.File;
        close(): void;
    }
    type FileConfig_ = FileConfig;
    /**
    * @javaClass java.time.format.TextStyle
    */
    class TextStyle extends Internal.Enum<Internal.TextStyle> {
        asNormal(): this;
        static valueOf(arg0: string): this;
        isStandalone(): boolean;
        static values(): Internal.TextStyle[];
        asStandalone(): this;
        static readonly "SHORT_STANDALONE" : Internal.TextStyle;
        static readonly "NARROW_STANDALONE" : Internal.TextStyle;
        static readonly "FULL_STANDALONE" : Internal.TextStyle;
        static readonly "FULL" : Internal.TextStyle;
        static readonly "SHORT" : Internal.TextStyle;
        static readonly "NARROW" : Internal.TextStyle;
        get standalone(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextStyle_ = "short_standalone" | "narrow_standalone" | "short" | "narrow" | "full_standalone" | "full" | TextStyle;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2ShortFunction
    */
    interface Double2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2ShortFunction_ = ((arg0: number) => number) | Double2ShortFunction;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerContainerEvent
    */
    class PlayerContainerEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getContainer(): Internal.AbstractContainerMenu;
        get container(): Internal.AbstractContainerMenu;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerContainerEvent_ = PlayerContainerEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.generator.AssetJsonGenerator
    */
    class AssetJsonGenerator extends Internal.JsonGenerator {
        multipartState(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.MultipartBlockStateGenerator_>): void;
        blockState(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.VariantBlockStateGenerator_>): void;
        static asItemModelLocation(id: ResourceLocation_): ResourceLocation;
        blockModel(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.ModelGenerator_>): void;
        itemModel(id: ResourceLocation_, consumer: Internal.Consumer_<Internal.ModelGenerator_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AssetJsonGenerator_ = AssetJsonGenerator;
    /**
    * @javaClass mezz.jei.api.gui.drawable.IDrawableAnimated
    */
    interface IDrawableAnimated extends Internal.IDrawable {
    }
    type IDrawableAnimated_ = IDrawableAnimated;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$FieldOfView
    */
    class EntityViewRenderEvent$FieldOfView extends Internal.EntityViewRenderEvent {
        getListenerList(): Internal.ListenerList;
        setFOV(arg0: number): void;
        getFOV(): number;
        get listenerList(): Internal.ListenerList;
        get fOV(): number;
        set fOV(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$FieldOfView_ = EntityViewRenderEvent$FieldOfView;
    /**
    * @javaClass java.awt.event.WindowFocusListener
    */
    interface WindowFocusListener extends Internal.EventListener {
        windowLostFocus(arg0: Internal.WindowEvent_): void;
        windowGainedFocus(arg0: Internal.WindowEvent_): void;
    }
    type WindowFocusListener_ = WindowFocusListener;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$InitScreenEvent
    */
    class ScreenEvent$InitScreenEvent extends Internal.ScreenEvent {
        getListenerList(): Internal.ListenerList;
        getListenersList(): Internal.List<Internal.GuiEventListener>;
        removeListener(arg0: Internal.GuiEventListener_): void;
        addListener(arg0: Internal.GuiEventListener_): void;
        get listenersList(): Internal.List<Internal.GuiEventListener>;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$InitScreenEvent_ = ScreenEvent$InitScreenEvent;
    /**
    * @javaClass java.io.DataOutput
    */
    interface DataOutput {
        writeChar(arg0: number): void;
        writeInt(arg0: number): void;
        writeLong(arg0: number): void;
        writeByte(arg0: number): void;
        writeBytes(arg0: string): void;
        writeUTF(arg0: string): void;
        writeShort(arg0: number): void;
        writeChars(arg0: string): void;
        writeFloat(arg0: number): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
        writeBoolean(arg0: boolean): void;
        writeDouble(arg0: number): void;
    }
    type DataOutput_ = DataOutput;
    /**
    * @javaClass dev.latvian.mods.unit.token.UnitTokenStream
    */
    class UnitTokenStream {
        readFully(): Internal.UnitToken;
        nextToken(): Internal.UnitToken;
        peekToken(): Internal.UnitToken;
        toString(): string;
        ifNextToken(token: Internal.UnitToken_): boolean;
        getUnit(): Internal.Unit;
        readSingleToken(): Internal.UnitToken;
        readonly "charStream" : Internal.CharStream;
        readonly "input" : string;
        readonly "unit" : Internal.Unit;
        readonly "context" : Internal.UnitContext;
        readonly "inputStringPos" : Internal.ArrayList<number>;
        readonly "infix" : Internal.ArrayList<Internal.UnitToken>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnitTokenStream_ = UnitTokenStream;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.minecraft.StonecuttingRecipeJS
    */
    class StonecuttingRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StonecuttingRecipeJS_ = StonecuttingRecipeJS;
    /**
    * @javaClass java.awt.Component$BaselineResizeBehavior
    */
    class Component$BaselineResizeBehavior extends Internal.Enum<Internal.Component$BaselineResizeBehavior> {
        static valueOf(arg0: string): this;
        static values(): Internal.Component$BaselineResizeBehavior[];
        static readonly "OTHER" : Internal.Component$BaselineResizeBehavior;
        static readonly "CONSTANT_DESCENT" : Internal.Component$BaselineResizeBehavior;
        static readonly "CENTER_OFFSET" : Internal.Component$BaselineResizeBehavior;
        static readonly "CONSTANT_ASCENT" : Internal.Component$BaselineResizeBehavior;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Component$BaselineResizeBehavior_ = "other" | "center_offset" | "constant_descent" | "constant_ascent" | Component$BaselineResizeBehavior;
    /**
    * @javaClass net.minecraft.world.level.block.entity.BlockEntity
    */
    abstract class BlockEntity extends Internal.CapabilityProvider<Internal.BlockEntity> implements Internal.IForgeBlockEntity {
        getTileData(): Internal.CompoundTag;
        onChunkUnloaded(): void;
        get tileData(): Internal.CompoundTag;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEntity_ = BlockEntity;
    /**
    * @javaClass net.minecraftforge.client.event.RenderTooltipEvent$GatherComponents
    */
    class RenderTooltipEvent$GatherComponents extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getTooltipElements(): Internal.List<Internal.Either<Internal.FormattedText, Internal.TooltipComponent>>;
        getScreenWidth(): number;
        getItemStack(): Internal.ItemStack;
        setMaxWidth(arg0: number): void;
        isCancelable(): boolean;
        getScreenHeight(): number;
        getMaxWidth(): number;
        get screenWidth(): number;
        get itemStack(): Internal.ItemStack;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get screenHeight(): number;
        get tooltipElements(): Internal.List<Internal.Either<Internal.FormattedText, Internal.TooltipComponent>>;
        get maxWidth(): number;
        set maxWidth(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderTooltipEvent$GatherComponents_ = RenderTooltipEvent$GatherComponents;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.Translate
    */
    interface Translate <Self> {
        translateZ(arg0: number): Self;
        translateAll(arg0: number): Self;
        translateY(arg0: number): Self;
        translateX(arg0: number): Self;
        centre(): Self;
        unCentre(): Self;
        translateBack(arg0: number, arg1: number, arg2: number): Self;
        translateBack(arg0: Vec3i_): Self;
        translateBack(arg0: Vec3_): Self;
        translate(arg0: Internal.Vector3f_): Self;
        translate(arg0: Vec3_): Self;
        translate(arg0: Vec3i_): Self;
        translate(arg0: number, arg1: number, arg2: number): Self;
        nudge(arg0: number): Self;
    }
    type Translate_<Self> = ((arg0: number, arg1: number, arg2: number) => Self) | Translate<Self>;
    /**
    * @javaClass net.minecraft.world.entity.npc.VillagerProfession
    */
    class VillagerProfession extends Internal.ForgeRegistryEntry<Internal.VillagerProfession> {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VillagerProfession_ = Special.VillagerProfession | VillagerProfession;
    /**
    * @javaClass net.minecraftforge.event.entity.PlaySoundAtEntityEvent
    */
    class PlaySoundAtEntityEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getVolume(): number;
        getPitch(): number;
        setCategory(arg0: Internal.SoundSource_): void;
        getCategory(): Internal.SoundSource;
        setPitch(arg0: number): void;
        setSound(arg0: Internal.SoundEvent_): void;
        getDefaultVolume(): number;
        setVolume(arg0: number): void;
        isCancelable(): boolean;
        getDefaultPitch(): number;
        getSound(): Internal.SoundEvent;
        get volume(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get sound(): Internal.SoundEvent;
        get defaultPitch(): number;
        get pitch(): number;
        get defaultVolume(): number;
        get category(): Internal.SoundSource;
        set volume(arg0: number);
        set sound(arg0: Internal.SoundEvent_);
        set pitch(arg0: number);
        set category(arg0: Internal.SoundSource_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlaySoundAtEntityEvent_ = PlaySoundAtEntityEvent;
    /**
    * @javaClass com.mojang.datafixers.util.Function3
    */
    interface Function3 <T1, T2, T3, R> {
        apply(arg0: T1, arg1: T2, arg2: T3): R;
        curry2(): Internal.BiFunction<T1, T2, Internal.Function<T3, R>>;
        curry(): Internal.Function<T1, Internal.BiFunction<T2, T3, R>>;
    }
    type Function3_<T1, T2, T3, R> = ((arg0: T1, arg1: T2, arg2: T3) => R) | Function3<T1, T2, T3, R>;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent
    */
    abstract class EntityViewRenderEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getRenderer(): Internal.GameRenderer;
        getPartialTicks(): number;
        getCamera(): Internal.Camera;
        get renderer(): Internal.GameRenderer;
        get listenerList(): Internal.ListenerList;
        get camera(): Internal.Camera;
        get partialTicks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent_ = EntityViewRenderEvent;
    /**
    * @javaClass net.minecraft.client.renderer.entity.LivingEntityRenderer
    */
    abstract class LivingEntityRenderer <T, M> extends Internal.EntityRenderer<T> implements Internal.RenderLayerParent<T, M> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityRenderer_<T, M> = LivingEntityRenderer<T, M>;
    /**
    * @javaClass java.nio.channels.WritableByteChannel
    */
    interface WritableByteChannel extends Internal.Channel {
        write(arg0: Internal.ByteBuffer_): number;
    }
    type WritableByteChannel_ = ((arg0: Internal.ByteBuffer) => number) | WritableByteChannel;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingPackSizeEvent
    */
    class LivingPackSizeEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        setMaxPackSize(arg0: number): void;
        hasResult(): boolean;
        getMaxPackSize(): number;
        get maxPackSize(): number;
        get listenerList(): Internal.ListenerList;
        set maxPackSize(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingPackSizeEvent_ = LivingPackSizeEvent;
    /**
    * @javaClass com.mojang.datafixers.Products$P14
    */
    class Products$P14 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function14_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function14_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P14_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> = Products$P14<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
    /**
    * @javaClass net.minecraftforge.client.event.InputEvent$RawMouseEvent
    */
    class InputEvent$RawMouseEvent extends net.minecraftforge.client.event.InputEvent {
        getButton(): number;
        getListenerList(): Internal.ListenerList;
        getAction(): number;
        getModifiers(): number;
        isCancelable(): boolean;
        get button(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get action(): number;
        get modifiers(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent$RawMouseEvent_ = InputEvent$RawMouseEvent;
    /**
    * @javaClass com.mojang.brigadier.suggestion.SuggestionsBuilder
    */
    class SuggestionsBuilder {
        getRemainingLowerCase(): string;
        add(arg0: Internal.SuggestionsBuilder_): this;
        createOffset(arg0: number): this;
        getStart(): number;
        restart(): this;
        build(): Internal.Suggestions;
        buildFuture(): Internal.CompletableFuture<Internal.Suggestions>;
        getRemaining(): string;
        suggest(arg0: string): this;
        suggest(arg0: number, arg1: Internal.Message_): this;
        suggest(arg0: number): this;
        suggest(arg0: string, arg1: Internal.Message_): this;
        getInput(): string;
        get input(): string;
        get start(): number;
        get remainingLowerCase(): string;
        get remaining(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SuggestionsBuilder_ = SuggestionsBuilder;
    /**
    * @javaClass net.minecraftforge.common.capabilities.ICapabilityProviderImpl
    */
    interface ICapabilityProviderImpl <B> extends Internal.ICapabilityProvider {
        invalidateCaps(): void;
        areCapsCompatible(arg0: Internal.CapabilityProvider_<B>): boolean;
        areCapsCompatible(arg0: Internal.CapabilityDispatcher_): boolean;
        reviveCaps(): void;
    }
    type ICapabilityProviderImpl_<B> = ICapabilityProviderImpl<B>;
    /**
    * @javaClass com.mojang.brigadier.builder.LiteralArgumentBuilder
    */
    class LiteralArgumentBuilder <S> extends Internal.ArgumentBuilder<S, Internal.LiteralArgumentBuilder<S>> {
        getLiteral(): string;
        build(): Internal.LiteralCommandNode<S>;
        static literal<S>(arg0: string): Internal.LiteralArgumentBuilder<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LiteralArgumentBuilder_<S> = LiteralArgumentBuilder<S>;
    /**
    * @javaClass io.netty.util.ReferenceCounted
    */
    interface ReferenceCounted {
        refCnt(): number;
        release(): boolean;
        release(arg0: number): boolean;
        retain(): this;
        retain(arg0: number): this;
        touch(arg0: any): this;
        touch(): this;
    }
    type ReferenceCounted_ = ReferenceCounted;
    /**
    * @javaClass net.minecraftforge.client.event.ContainerScreenEvent
    */
    class ContainerScreenEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getContainerScreen(): Internal.AbstractContainerScreen<any>;
        get listenerList(): Internal.ListenerList;
        get containerScreen(): Internal.AbstractContainerScreen<any>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContainerScreenEvent_ = ContainerScreenEvent;
    /**
    * @javaClass net.minecraftforge.registries.IForgeRegistryEntry
    */
    interface IForgeRegistryEntry <V> {
        getRegistryType(): typeof V;
        getRegistryName(): ResourceLocation;
        setRegistryName(arg0: ResourceLocation_): V;
    }
    type IForgeRegistryEntry_<V> = IForgeRegistryEntry<V>;
    /**
    * @javaClass java.util.SortedMap
    */
    interface SortedMap <K, V> extends Internal.Map<K, V> {
        comparator(): Internal.Comparator<K>;
        entrySet(): Internal.Set<Internal.Map$Entry<K, V>>;
        firstKey(): K;
        subMap(arg0: K, arg1: K): Internal.SortedMap<K, V>;
        values(): Internal.Collection<V>;
        lastKey(): K;
        headMap(arg0: K): Internal.SortedMap<K, V>;
        keySet(): Internal.Set<K>;
        tailMap(arg0: K): Internal.SortedMap<K, V>;
    }
    type SortedMap_<K, V> = SortedMap<K, V>;
    /**
    * @javaClass net.minecraftforge.event.RegistryEvent
    */
    class RegistryEvent <T> extends Internal.GenericEvent<T> implements Internal.IModBusEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryEvent_<T> = RegistryEvent<T>;
    /**
    * @javaClass java.lang.Thread
    */
    class Thread implements Internal.Runnable {
        setName(arg0: string): void;
        getThreadGroup(): Internal.ThreadGroup;
        getName(): string;
        static getAllStackTraces(): Internal.Map<Internal.Thread, any[]>;
        static onSpinWait(): void;
        getId(): number;
        run(): void;
        setContextClassLoader(arg0: Internal.ClassLoader_): void;
        static sleep(arg0: number, arg1: number): void;
        static sleep(arg0: number): void;
        getStackTrace(): any[];
        isDaemon(): boolean;
        static yield(): void;
        interrupt(): void;
        static enumerate(arg0: Internal.Thread_[]): number;
        join(arg0: number): void;
        join(): void;
        join(arg0: number, arg1: number): void;
        suspend(): void;
        static activeCount(): number;
        resume(): void;
        static currentThread(): this;
        setUncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler_): void;
        isInterrupted(): boolean;
        static dumpStack(): void;
        static setDefaultUncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler_): void;
        start(): void;
        static interrupted(): boolean;
        getUncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        checkAccess(): void;
        static getDefaultUncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        isAlive(): boolean;
        setDaemon(arg0: boolean): void;
        static holdsLock(arg0: any): boolean;
        getState(): Internal.Thread$State;
        stop(): void;
        getContextClassLoader(): Internal.ClassLoader;
        getPriority(): number;
        countStackFrames(): number;
        toString(): string;
        setPriority(arg0: number): void;
        static readonly "MIN_PRIORITY" : 1;
        static readonly "MAX_PRIORITY" : 10;
        static readonly "NORM_PRIORITY" : 5;
        get defaultUncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        get allStackTraces(): Internal.Map<Internal.Thread, any[]>;
        get threadGroup(): Internal.ThreadGroup;
        get alive(): boolean;
        get contextClassLoader(): Internal.ClassLoader;
        get name(): string;
        get id(): number;
        get stackTrace(): any[];
        get state(): Internal.Thread$State;
        get priority(): number;
        get uncaughtExceptionHandler(): Internal.Thread$UncaughtExceptionHandler;
        get daemon(): boolean;
        set defaultUncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler_);
        set contextClassLoader(arg0: Internal.ClassLoader_);
        set name(arg0: string);
        set priority(arg0: number);
        set uncaughtExceptionHandler(arg0: Internal.Thread$UncaughtExceptionHandler_);
        set daemon(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Thread_ = Thread;
    /**
    * @javaClass com.mojang.datafixers.Products$P13
    */
    class Products$P13 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function13_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function13_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P13_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> = Products$P13<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityMobGriefingEvent
    */
    class EntityMobGriefingEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityMobGriefingEvent_ = EntityMobGriefingEvent;
    /**
    * @javaClass net.minecraftforge.client.event.RenderHandEvent
    */
    class RenderHandEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getMultiBufferSource(): Internal.MultiBufferSource;
        getHand(): Hand;
        getSwingProgress(): number;
        getPartialTicks(): number;
        getEquipProgress(): number;
        getItemStack(): Internal.ItemStack;
        isCancelable(): boolean;
        getInterpolatedPitch(): number;
        getPackedLight(): number;
        getPoseStack(): Internal.PoseStack;
        get itemStack(): Internal.ItemStack;
        get multiBufferSource(): Internal.MultiBufferSource;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get swingProgress(): number;
        get interpolatedPitch(): number;
        get equipProgress(): number;
        get hand(): Hand;
        get partialTicks(): number;
        get packedLight(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderHandEvent_ = RenderHandEvent;
    /**
    * @javaClass mezz.jei.api.gui.drawable.IDrawableStatic
    */
    interface IDrawableStatic extends Internal.IDrawable {
        draw(arg0: Internal.PoseStack_, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number): void;
    }
    type IDrawableStatic_ = ((arg0: Internal.PoseStack, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number) => void) | IDrawableStatic;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2ObjectFunction
    */
    interface Short2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Short2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2ShortFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Short2ObjectFunction_<V> = ((arg0: number) => V) | Short2ObjectFunction<V>;
    /**
    * @javaClass io.netty.channel.EventLoopGroup
    */
    interface EventLoopGroup extends Internal.EventExecutorGroup {
        next(): Internal.EventLoop;
        register(arg0: io.netty.channel.Channel_, arg1: Internal.ChannelPromise_): Internal.ChannelFuture;
        register(arg0: Internal.ChannelPromise_): Internal.ChannelFuture;
        register(arg0: io.netty.channel.Channel_): Internal.ChannelFuture;
    }
    type EventLoopGroup_ = EventLoopGroup;
    /**
    * @javaClass java.time.format.ResolverStyle
    */
    class ResolverStyle extends Internal.Enum<Internal.ResolverStyle> {
        static valueOf(arg0: string): this;
        static values(): Internal.ResolverStyle[];
        static readonly "STRICT" : Internal.ResolverStyle;
        static readonly "LENIENT" : Internal.ResolverStyle;
        static readonly "SMART" : Internal.ResolverStyle;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ResolverStyle_ = "strict" | "smart" | "lenient" | ResolverStyle;
    /**
    * @javaClass java.time.temporal.TemporalAdjuster
    */
    interface TemporalAdjuster {
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
    }
    type TemporalAdjuster_ = ((arg0: Internal.Temporal) => Internal.Temporal) | TemporalAdjuster;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongIterator
    */
    interface LongIterator extends Internal.PrimitiveIterator$OfLong {
        next(): number;
        skip(arg0: number): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): void;
        nextLong(): number;
    }
    type LongIterator_ = (() => number) | LongIterator;
    /**
    * @javaClass java.awt.EventQueue
    */
    class EventQueue {
        static getCurrentEvent(): Internal.AWTEvent;
        createSecondaryLoop(): Internal.SecondaryLoop;
        static getMostRecentEventTime(): number;
        peekEvent(arg0: number): Internal.AWTEvent;
        peekEvent(): Internal.AWTEvent;
        getNextEvent(): Internal.AWTEvent;
        static invokeAndWait(arg0: Internal.Runnable_): void;
        static isDispatchThread(): boolean;
        static invokeLater(arg0: Internal.Runnable_): void;
        push(arg0: Internal.EventQueue_): void;
        postEvent(arg0: Internal.AWTEvent_): void;
        get dispatchThread(): boolean;
        get currentEvent(): Internal.AWTEvent;
        get mostRecentEventTime(): number;
        get nextEvent(): Internal.AWTEvent;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventQueue_ = EventQueue;
    /**
    * @javaClass appeng.mixins.unlitquad.BakedQuadAccessor
    */
    interface BakedQuadAccessor {
        getSprite(): Internal.TextureAtlasSprite;
    }
    type BakedQuadAccessor_ = (() => Internal.TextureAtlasSprite) | BakedQuadAccessor;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2ShortFunction
    */
    interface Int2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Int2CharFunction;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2ShortFunction;
    }
    type Int2ShortFunction_ = ((arg0: number) => number) | Int2ShortFunction;
    /**
    * @javaClass java.awt.font.GlyphJustificationInfo
    */
    class GlyphJustificationInfo {
        readonly "growRightLimit" : number;
        static readonly "PRIORITY_WHITESPACE" : 1;
        readonly "shrinkLeftLimit" : number;
        readonly "weight" : number;
        readonly "shrinkRightLimit" : number;
        readonly "shrinkAbsorb" : boolean;
        readonly "growPriority" : number;
        static readonly "PRIORITY_KASHIDA" : 0;
        readonly "growAbsorb" : boolean;
        static readonly "PRIORITY_NONE" : 3;
        readonly "growLeftLimit" : number;
        static readonly "PRIORITY_INTERCHAR" : 2;
        readonly "shrinkPriority" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GlyphJustificationInfo_ = GlyphJustificationInfo;
    /**
    * @javaClass java.text.CharacterIterator
    */
    interface CharacterIterator extends Internal.Cloneable {
        next(): string;
        current(): string;
        getIndex(): number;
        previous(): string;
        last(): string;
        setIndex(arg0: number): string;
        getEndIndex(): number;
        clone(): any;
        getBeginIndex(): number;
        first(): string;
    }
    type CharacterIterator_ = CharacterIterator;
    /**
    * Fired when the generic loot table is registering.
    * Note that this is unused.
    * @javaClass dev.latvian.mods.kubejs.loot.GenericLootEventJS
    */
    class GenericLootEventJS extends Internal.LootEventJS {
        addGeneric(id: ResourceLocation_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getType(): string;
        getDirectory(): string;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the generic loot table is registering.
    * Note that this is unused.
    */
    type GenericLootEventJS_ = GenericLootEventJS;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Exports
    */
    class ModuleDescriptor$Exports implements Internal.Comparable<Internal.ModuleDescriptor$Exports> {
        hashCode(): number;
        equals(arg0: any): boolean;
        isQualified(): boolean;
        toString(): string;
        source(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Exports_): number;
        modifiers(): Internal.Set<Internal.ModuleDescriptor$Exports$Modifier>;
        targets(): Internal.Set<string>;
        get qualified(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Exports_ = ModuleDescriptor$Exports;
    /**
    * @javaClass net.minecraftforge.server.permission.events.PermissionGatherEvent$Nodes
    */
    class PermissionGatherEvent$Nodes extends Internal.PermissionGatherEvent {
        getListenerList(): Internal.ListenerList;
        getNodes(): Internal.Collection<Internal.PermissionNode<any>>;
        addNodes(arg0: Internal.Iterable_<Internal.PermissionNode_<any>>): void;
        addNodes(... arg0: Internal.PermissionNode_<any>[]): void;
        get nodes(): Internal.Collection<Internal.PermissionNode<any>>;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PermissionGatherEvent$Nodes_ = PermissionGatherEvent$Nodes;
    /**
    * @javaClass dev.latvian.mods.kubejs.integration.forge.jei.JEISubtypesEventJS
    */
    class JEISubtypesEventJS extends Internal.EventJS {
        useNBTKey(items: Internal.IngredientJS_, key: string): void;
        useNBT(items: Internal.IngredientJS_): void;
        registerInterpreter(id: any, interpreter: Internal.JEISubtypesEventJS$Interpreter_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JEISubtypesEventJS_ = JEISubtypesEventJS;
    /**
    * @javaClass com.mojang.brigadier.CommandDispatcher
    */
    class CommandDispatcher <S> {
        getSmartUsage(arg0: Internal.CommandNode_<S>, arg1: S): Internal.Map<Internal.CommandNode<S>, string>;
        findAmbiguities(arg0: Internal.AmbiguityConsumer_<S>): void;
        setConsumer(arg0: Internal.ResultConsumer_<S>): void;
        getCompletionSuggestions(arg0: Internal.ParseResults_<S>): Internal.CompletableFuture<Internal.Suggestions>;
        getCompletionSuggestions(arg0: Internal.ParseResults_<S>, arg1: number): Internal.CompletableFuture<Internal.Suggestions>;
        getPath(arg0: Internal.CommandNode_<S>): Internal.Collection<string>;
        getAllUsage(arg0: Internal.CommandNode_<S>, arg1: S, arg2: boolean): string[];
        findNode(arg0: Internal.Collection_<string>): Internal.CommandNode<S>;
        parse(arg0: Internal.StringReader_, arg1: S): Internal.ParseResults<S>;
        parse(arg0: string, arg1: S): Internal.ParseResults<S>;
        getRoot(): Internal.RootCommandNode<S>;
        execute(arg0: Internal.ParseResults_<S>): number;
        execute(arg0: Internal.StringReader_, arg1: S): number;
        execute(arg0: string, arg1: S): number;
        register(arg0: Internal.LiteralArgumentBuilder_<S>): Internal.LiteralCommandNode<S>;
        static readonly "ARGUMENT_SEPARATOR" : " ";
        static readonly "ARGUMENT_SEPARATOR_CHAR" : " ";
        get root(): Internal.RootCommandNode<S>;
        set consumer(arg0: Internal.ResultConsumer_<S>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandDispatcher_<S> = CommandDispatcher<S>;
    /**
    * @javaClass java.security.CodeSource
    */
    class CodeSource implements Internal.Serializable {
        getLocation(): Internal.URL;
        getCodeSigners(): any[];
        hashCode(): number;
        equals(arg0: any): boolean;
        getCertificates(): any[];
        toString(): string;
        implies(arg0: Internal.CodeSource_): boolean;
        get codeSigners(): any[];
        get certificates(): any[];
        get location(): Internal.URL;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CodeSource_ = CodeSource;
    /**
    * @javaClass com.mojang.serialization.Lifecycle
    */
    class Lifecycle {
        add(arg0: Internal.Lifecycle_): this;
        static stable(): this;
        static deprecated(arg0: number): this;
        static experimental(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Lifecycle_ = Lifecycle;
    /**
    * @javaClass java.io.DataInput
    */
    interface DataInput {
        readLine(): string;
        readChar(): string;
        skipBytes(arg0: number): number;
        readLong(): number;
        readUTF(): string;
        readShort(): number;
        readDouble(): number;
        readFully(arg0: number[]): void;
        readFully(arg0: number[], arg1: number, arg2: number): void;
        readFloat(): number;
        readBoolean(): boolean;
        readByte(): number;
        readInt(): number;
        readUnsignedByte(): number;
        readUnsignedShort(): number;
    }
    type DataInput_ = DataInput;
    /**
    * @javaClass com.simibubi.create.foundation.tileEntity.behaviour.BehaviourType
    */
    class BehaviourType <T> {
        getName(): string;
        hashCode(): number;
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BehaviourType_<T> = BehaviourType<T>;
    /**
    * @javaClass java.awt.event.MouseEvent
    */
    class MouseEvent extends Internal.InputEvent {
        translatePoint(arg0: number, arg1: number): void;
        static getMouseModifiersText(arg0: number): string;
        getPoint(): Internal.Point;
        getButton(): number;
        paramString(): string;
        getX(): number;
        getY(): number;
        getYOnScreen(): number;
        getLocationOnScreen(): Internal.Point;
        getClickCount(): number;
        getModifiersEx(): number;
        getXOnScreen(): number;
        isPopupTrigger(): boolean;
        static readonly "MOUSE_FIRST" : 500;
        static readonly "MOUSE_MOVED" : 503;
        static readonly "MOUSE_WHEEL" : 507;
        static readonly "MOUSE_PRESSED" : 501;
        static readonly "MOUSE_LAST" : 507;
        static readonly "NOBUTTON" : 0;
        static readonly "BUTTON2" : 2;
        static readonly "BUTTON3" : 3;
        static readonly "BUTTON1" : 1;
        static readonly "MOUSE_RELEASED" : 502;
        static readonly "MOUSE_EXITED" : 505;
        static readonly "MOUSE_CLICKED" : 500;
        static readonly "MOUSE_ENTERED" : 504;
        static readonly "MOUSE_DRAGGED" : 506;
        get button(): number;
        get clickCount(): number;
        get modifiersEx(): number;
        get popupTrigger(): boolean;
        get x(): number;
        get locationOnScreen(): Internal.Point;
        get y(): number;
        get yOnScreen(): number;
        get xOnScreen(): number;
        get point(): Internal.Point;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MouseEvent_ = MouseEvent;
    /**
    * @javaClass dev.architectury.registry.registries.Registries
    */
    class Registries {
        forRegistry<T>(key: Internal.ResourceKey_<Internal.Registry_<T>>, callback: Internal.Consumer_<Internal.Registrar_<T>>): void;
        getModId(): string;
        get<T>(registry: Internal.Registry_<T>): Internal.Registrar<T>;
        static get(modId: string): this;
        get<T>(key: Internal.ResourceKey_<Internal.Registry_<T>>): Internal.Registrar<T>;
        builder<T>(registryId: ResourceLocation_, ... typeGetter: T[]): Internal.RegistrarBuilder<T>;
        static getRegistryName<T>(object: T): ResourceLocation;
        static getId<T>(object: T, fallback: Internal.Registry_<T>): ResourceLocation;
        static getId<T>(object: T, fallback: Internal.ResourceKey_<Internal.Registry_<T>>): ResourceLocation;
        get modId(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Registries_ = Registries;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2ObjectFunction
    */
    interface Double2ObjectFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Object2ShortFunction_<V>): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2ObjectFunction<V>;
        andThenInt(arg0: Internal.Object2IntFunction_<V>): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2ObjectFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Object2DoubleFunction_<V>): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Object2ObjectFunction_<V, T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Object2LongFunction_<V>): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2ObjectFunction<V>;
        andThenByte(arg0: Internal.Object2ByteFunction_<V>): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Object2FloatFunction_<V>): Internal.Double2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2ObjectFunction<V>;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2ObjectFunction<V>;
        andThenChar(arg0: Internal.Object2CharFunction_<V>): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2ObjectFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2ObjectFunction<V>;
        andThenReference<T>(arg0: Internal.Object2ReferenceFunction_<V, T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2ObjectFunction<V>;
        composeDouble(arg0: Internal.Double2DoubleFunction_): Internal.Double2ObjectFunction<V>;
    }
    type Double2ObjectFunction_<V> = ((arg0: number) => V) | Double2ObjectFunction<V>;
    /**
    * @javaClass net.minecraftforge.event.CommandEvent
    */
    class CommandEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getException(): Internal.Throwable;
        getParseResults(): Internal.ParseResults<Internal.CommandSourceStack>;
        isCancelable(): boolean;
        setException(arg0: Internal.Throwable_): void;
        setParseResults(arg0: Internal.ParseResults_<Internal.CommandSourceStack_>): void;
        get exception(): Internal.Throwable;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get parseResults(): Internal.ParseResults<Internal.CommandSourceStack>;
        set exception(arg0: Internal.Throwable_);
        set parseResults(arg0: Internal.ParseResults_<Internal.CommandSourceStack_>);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandEvent_ = CommandEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$NameFormat
    */
    class PlayerEvent$NameFormat extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getDisplayname(): net.minecraft.network.chat.Component;
        setDisplayname(arg0: net.minecraft.network.chat.Component_): void;
        getUsername(): net.minecraft.network.chat.Component;
        get listenerList(): Internal.ListenerList;
        get displayname(): net.minecraft.network.chat.Component;
        get username(): net.minecraft.network.chat.Component;
        set displayname(arg0: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$NameFormat_ = PlayerEvent$NameFormat;
    /**
    * @javaClass com.mojang.serialization.Encoder
    */
    interface Encoder <A> {
        encode<T>(arg0: A, arg1: Internal.DynamicOps_<T>, arg2: T): Internal.DataResult<T>;
        flatComap<B>(arg0: Internal.Function_<B, Internal.DataResult_<A>>): Internal.Encoder<B>;
        comap<B>(arg0: Internal.Function_<B, A>): Internal.Encoder<B>;
        fieldOf(arg0: string): Internal.MapEncoder<A>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.Encoder<A>;
        error<A>(arg0: string): Internal.Encoder<A>;
        encodeStart<T>(arg0: Internal.DynamicOps_<T>, arg1: A): Internal.DataResult<T>;
        empty<A>(): Internal.MapEncoder<A>;
    }
    type Encoder_<A> = ((arg0: A, arg1: Internal.DynamicOps<T>, arg2: any) => Internal.DataResult<T>) | Encoder<A>;
    /**
    * @javaClass mezz.jei.api.gui.ingredient.ICraftingGridHelper
    */
    interface ICraftingGridHelper {
        setOutputs<T>(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.IIngredientType_<T>, arg2: Internal.List_<T>): void;
        setInputs<T>(arg0: Internal.IGuiIngredientGroup_<T>, arg1: Internal.List_<Internal.List_<T>>, arg2: number, arg3: number): void;
        setInputs<T>(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.IIngredientType_<T>, arg2: Internal.List_<Internal.List_<T>>, arg3: number, arg4: number): void;
        setInputs<T>(arg0: Internal.IGuiIngredientGroup_<T>, arg1: Internal.List_<Internal.List_<T>>): void;
        setInputs<T>(arg0: Internal.List_<Internal.IRecipeSlotBuilder_>, arg1: Internal.IIngredientType_<T>, arg2: Internal.List_<Internal.List_<T>>, arg3: number, arg4: number): void;
        createAndSetOutputs<T>(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.IIngredientType_<T>, arg2: Internal.List_<T>): Internal.IRecipeSlotBuilder;
        createAndSetOutputs(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.List_<Internal.ItemStack_>): Internal.IRecipeSlotBuilder;
        createAndSetInputs(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.List_<Internal.List_<Internal.ItemStack_>>, arg2: number, arg3: number): Internal.List<Internal.IRecipeSlotBuilder>;
        createAndSetInputs<T>(arg0: Internal.IRecipeLayoutBuilder_, arg1: Internal.IIngredientType_<T>, arg2: Internal.List_<Internal.List_<T>>, arg3: number, arg4: number): Internal.List<Internal.IRecipeSlotBuilder>;
    }
    type ICraftingGridHelper_ = ICraftingGridHelper;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeLevel
    */
    interface IForgeLevel extends Internal.ICapabilityProvider {
        increaseMaxEntityRadius(arg0: number): number;
        getMaxEntityRadius(): number;
        getPartEntities(): Internal.Collection<Internal.PartEntity<any>>;
    }
    type IForgeLevel_ = IForgeLevel;
    /**
    * @javaClass java.time.chrono.ChronoZonedDateTime
    */
    interface ChronoZonedDateTime <D> extends Internal.Temporal, Internal.Comparable<Internal.ChronoZonedDateTime<any>> {
        minus(arg0: number, arg1: Internal.TemporalUnit_): Internal.ChronoZonedDateTime<D>;
        minus(arg0: Internal.TemporalAmount_): Internal.ChronoZonedDateTime<D>;
        isEqual(arg0: Internal.ChronoZonedDateTime_<any>): boolean;
        getOffset(): Internal.ZoneOffset;
        toLocalTime(): Internal.LocalTime;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        compareTo(arg0: Internal.ChronoZonedDateTime_<any>): number;
        withLaterOffsetAtOverlap(): Internal.ChronoZonedDateTime<D>;
        hashCode(): number;
        get(arg0: Internal.TemporalField_): number;
        withZoneSameLocal(arg0: Internal.ZoneId_): Internal.ChronoZonedDateTime<D>;
        withEarlierOffsetAtOverlap(): Internal.ChronoZonedDateTime<D>;
        from(arg0: Internal.TemporalAccessor_): Internal.ChronoZonedDateTime<any>;
        getChronology(): Internal.Chronology;
        withZoneSameInstant(arg0: Internal.ZoneId_): Internal.ChronoZonedDateTime<D>;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        format(arg0: Internal.DateTimeFormatter_): string;
        getZone(): Internal.ZoneId;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        toInstant(): Internal.Instant;
        isBefore(arg0: Internal.ChronoZonedDateTime_<any>): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): Internal.ChronoZonedDateTime<D>;
        plus(arg0: Internal.TemporalAmount_): Internal.ChronoZonedDateTime<D>;
        getLong(arg0: Internal.TemporalField_): number;
        with(arg0: Internal.TemporalAdjuster_): Internal.ChronoZonedDateTime<D>;
        with(arg0: Internal.TemporalField_, arg1: number): Internal.ChronoZonedDateTime<D>;
        toLocalDate(): D;
        toEpochSecond(): number;
        toLocalDateTime(): Internal.ChronoLocalDateTime<D>;
        equals(arg0: any): boolean;
        timeLineOrder(): Internal.Comparator<Internal.ChronoZonedDateTime<any>>;
        toString(): string;
        isAfter(arg0: Internal.ChronoZonedDateTime_<any>): boolean;
    }
    type ChronoZonedDateTime_<D> = ChronoZonedDateTime<D>;
    /**
    * @javaClass java.awt.GraphicsDevice
    */
    abstract class GraphicsDevice {
        getConfigurations(): Internal.GraphicsConfiguration[];
        isFullScreenSupported(): boolean;
        setDisplayMode(arg0: Internal.DisplayMode_): void;
        setFullScreenWindow(arg0: Internal.Window_): void;
        getFullScreenWindow(): Internal.Window;
        getAvailableAcceleratedMemory(): number;
        getDefaultConfiguration(): Internal.GraphicsConfiguration;
        isDisplayChangeSupported(): boolean;
        getDisplayMode(): Internal.DisplayMode;
        getIDstring(): string;
        getType(): number;
        getBestConfiguration(arg0: Internal.GraphicsConfigTemplate_): Internal.GraphicsConfiguration;
        isWindowTranslucencySupported(arg0: Internal.GraphicsDevice$WindowTranslucency_): boolean;
        getDisplayModes(): Internal.DisplayMode[];
        static readonly "TYPE_IMAGE_BUFFER" : 2;
        static readonly "TYPE_RASTER_SCREEN" : 0;
        static readonly "TYPE_PRINTER" : 1;
        get fullScreenSupported(): boolean;
        get availableAcceleratedMemory(): number;
        get iDstring(): string;
        get configurations(): Internal.GraphicsConfiguration[];
        get displayChangeSupported(): boolean;
        get displayModes(): Internal.DisplayMode[];
        get fullScreenWindow(): Internal.Window;
        get type(): number;
        get displayMode(): Internal.DisplayMode;
        get defaultConfiguration(): Internal.GraphicsConfiguration;
        set fullScreenWindow(arg0: Internal.Window_);
        set displayMode(arg0: Internal.DisplayMode_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GraphicsDevice_ = GraphicsDevice;
    /**
    * @javaClass java.awt.datatransfer.Clipboard
    */
    class Clipboard {
        getName(): string;
        addFlavorListener(arg0: Internal.FlavorListener_): void;
        isDataFlavorAvailable(arg0: Internal.DataFlavor_): boolean;
        getAvailableDataFlavors(): Internal.DataFlavor[];
        getFlavorListeners(): Internal.FlavorListener[];
        getContents(arg0: any): Internal.Transferable;
        removeFlavorListener(arg0: Internal.FlavorListener_): void;
        setContents(arg0: Internal.Transferable_, arg1: Internal.ClipboardOwner_): void;
        getData(arg0: Internal.DataFlavor_): any;
        get flavorListeners(): Internal.FlavorListener[];
        get availableDataFlavors(): Internal.DataFlavor[];
        get name(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Clipboard_ = Clipboard;
    /**
    * @javaClass java.nio.file.attribute.AttributeView
    */
    interface AttributeView {
        name(): string;
    }
    type AttributeView_ = (() => string) | AttributeView;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent$PreLayer
    */
    class RenderGameOverlayEvent$PreLayer extends Internal.RenderGameOverlayEvent$Pre {
        getListenerList(): Internal.ListenerList;
        getOverlay(): Internal.IIngameOverlay;
        get overlay(): Internal.IIngameOverlay;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent$PreLayer_ = RenderGameOverlayEvent$PreLayer;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Provides
    */
    class ModuleDescriptor$Provides implements Internal.Comparable<Internal.ModuleDescriptor$Provides> {
        service(): string;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        compareTo(arg0: Internal.ModuleDescriptor$Provides_): number;
        providers(): Internal.List<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Provides_ = ModuleDescriptor$Provides;
    /**
    * @javaClass java.awt.RenderingHints
    */
    class RenderingHints implements Internal.Map<any, any>, Internal.Cloneable {
        add(arg0: Internal.RenderingHints_): void;
        entrySet(): Internal.Set<Internal.Map$Entry<any, any>>;
        containsKey(arg0: any): boolean;
        values(): Internal.Collection<any>;
        isEmpty(): boolean;
        clear(): void;
        containsValue(arg0: any): boolean;
        put(arg0: any, arg1: any): any;
        remove(arg0: any): any;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Map_<any, any>): void;
        equals(arg0: any): boolean;
        get(arg0: any): any;
        clone(): any;
        toString(): string;
        keySet(): Internal.Set<any>;
        static readonly "VALUE_TEXT_ANTIALIAS_LCD_VRGB" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_LCD_VBGR" : any;
        static readonly "KEY_FRACTIONALMETRICS" : Internal.RenderingHints$Key;
        static readonly "VALUE_RESOLUTION_VARIANT_SIZE_FIT" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_DEFAULT" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_OFF" : any;
        static readonly "VALUE_ANTIALIAS_OFF" : any;
        static readonly "VALUE_INTERPOLATION_BICUBIC" : any;
        static readonly "VALUE_COLOR_RENDER_QUALITY" : any;
        static readonly "VALUE_COLOR_RENDER_DEFAULT" : any;
        static readonly "VALUE_STROKE_DEFAULT" : any;
        static readonly "VALUE_RENDER_DEFAULT" : any;
        static readonly "VALUE_RENDER_QUALITY" : any;
        static readonly "KEY_ALPHA_INTERPOLATION" : Internal.RenderingHints$Key;
        static readonly "KEY_DITHERING" : Internal.RenderingHints$Key;
        static readonly "VALUE_FRACTIONALMETRICS_OFF" : any;
        static readonly "VALUE_ANTIALIAS_DEFAULT" : any;
        static readonly "VALUE_ALPHA_INTERPOLATION_SPEED" : any;
        static readonly "KEY_TEXT_ANTIALIASING" : Internal.RenderingHints$Key;
        static readonly "VALUE_TEXT_ANTIALIAS_GASP" : any;
        static readonly "KEY_TEXT_LCD_CONTRAST" : Internal.RenderingHints$Key;
        static readonly "VALUE_RENDER_SPEED" : any;
        static readonly "VALUE_FRACTIONALMETRICS_ON" : any;
        static readonly "VALUE_RESOLUTION_VARIANT_DEFAULT" : any;
        static readonly "KEY_ANTIALIASING" : Internal.RenderingHints$Key;
        static readonly "VALUE_DITHER_ENABLE" : any;
        static readonly "KEY_STROKE_CONTROL" : Internal.RenderingHints$Key;
        static readonly "VALUE_STROKE_PURE" : any;
        static readonly "KEY_RENDERING" : Internal.RenderingHints$Key;
        static readonly "VALUE_DITHER_DEFAULT" : any;
        static readonly "KEY_RESOLUTION_VARIANT" : Internal.RenderingHints$Key;
        static readonly "VALUE_INTERPOLATION_BILINEAR" : any;
        static readonly "VALUE_ALPHA_INTERPOLATION_QUALITY" : any;
        static readonly "VALUE_RESOLUTION_VARIANT_BASE" : any;
        static readonly "KEY_COLOR_RENDERING" : Internal.RenderingHints$Key;
        static readonly "VALUE_RESOLUTION_VARIANT_DPI_FIT" : any;
        static readonly "VALUE_ANTIALIAS_ON" : any;
        static readonly "VALUE_STROKE_NORMALIZE" : any;
        static readonly "VALUE_FRACTIONALMETRICS_DEFAULT" : any;
        static readonly "VALUE_INTERPOLATION_NEAREST_NEIGHBOR" : any;
        static readonly "VALUE_DITHER_DISABLE" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_LCD_HRGB" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_LCD_HBGR" : any;
        static readonly "KEY_INTERPOLATION" : Internal.RenderingHints$Key;
        static readonly "VALUE_ALPHA_INTERPOLATION_DEFAULT" : any;
        static readonly "VALUE_TEXT_ANTIALIAS_ON" : any;
        static readonly "VALUE_COLOR_RENDER_SPEED" : any;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderingHints_ = RenderingHints;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.minecraft.CookingRecipeJS
    */
    class CookingRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        xp(xp: number): this;
        create(args: Internal.ListJS_): void;
        cookingTime(time: number): this;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CookingRecipeJS_ = CookingRecipeJS;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemModelPropertiesEventJS$ItemPropertiesCallback
    */
    interface ItemModelPropertiesEventJS$ItemPropertiesCallback {
        accept(arg0: Internal.ItemStackJS_, arg1: Internal.LevelJS_, arg2: Internal.EntityJS_, arg3: number): number;
    }
    type ItemModelPropertiesEventJS$ItemPropertiesCallback_ = ((arg0: Internal.ItemStackJS, arg1: Internal.LevelJS, arg2: Internal.EntityJS, arg3: number) => number) | ItemModelPropertiesEventJS$ItemPropertiesCallback;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkDataEvent$Save
    */
    class ChunkDataEvent$Save extends Internal.ChunkDataEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkDataEvent$Save_ = ChunkDataEvent$Save;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.VariantBlockStateGenerator$Variant
    */
    class VariantBlockStateGenerator$Variant {
        toJson(): Internal.JsonElement;
        model(s: string): Internal.VariantBlockStateGenerator$Model;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VariantBlockStateGenerator$Variant_ = VariantBlockStateGenerator$Variant;
    /**
    * @javaClass java.util.function.LongSupplier
    */
    interface LongSupplier {
        getAsLong(): number;
    }
    type LongSupplier_ = (() => number) | LongSupplier;
    /**
    * @javaClass net.minecraft.network.chat.TextColor
    */
    class TextColor implements dev.latvian.mods.rhino.mod.util.color.Color {
        getRgbJS(): number;
        hashCode(): number;
        equals(arg0: any): boolean;
        getArgbJS(): number;
        getSerializeJS(): string;
        toString(): string;
        get rgbJS(): number;
        get argbJS(): number;
        get serializeJS(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TextColor_ = TextColor;
    /**
    * @javaClass java.time.chrono.IsoEra
    */
    class IsoEra extends Internal.Enum<Internal.IsoEra> implements Internal.Era {
        getValue(): number;
        static valueOf(arg0: string): this;
        static of(arg0: number): this;
        static values(): Internal.IsoEra[];
        static readonly "CE" : Internal.IsoEra;
        static readonly "BCE" : Internal.IsoEra;
        get value(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IsoEra_ = "ce" | "bce" | IsoEra;
    /**
    * @javaClass net.minecraft.core.particles.ParticleType
    */
    abstract class ParticleType <T> extends Internal.ForgeRegistryEntry<Internal.ParticleType<any>> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParticleType_<T> = Special.ParticleType | ParticleType<T>;
    /**
    * @javaClass java.nio.channels.ScatteringByteChannel
    */
    interface ScatteringByteChannel extends Internal.ReadableByteChannel {
        read(arg0: Internal.ByteBuffer_[], arg1: number, arg2: number): number;
        read(arg0: Internal.ByteBuffer_[]): number;
    }
    type ScatteringByteChannel_ = ScatteringByteChannel;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2ByteFunction
    */
    interface Float2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Float2IntFunction;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2ByteFunction;
    }
    type Float2ByteFunction_ = ((arg0: number) => number) | Float2ByteFunction;
    /**
    * @javaClass com.mojang.brigadier.suggestion.Suggestion
    */
    class Suggestion implements Internal.Comparable<Internal.Suggestion> {
        expand(arg0: string, arg1: Internal.StringRange_): this;
        getTooltip(): Internal.Message;
        apply(arg0: string): string;
        getRange(): Internal.StringRange;
        getText(): string;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        compareTo(arg0: Internal.Suggestion_): number;
        compareToIgnoreCase(arg0: Internal.Suggestion_): number;
        get tooltip(): Internal.Message;
        get range(): Internal.StringRange;
        get text(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Suggestion_ = Suggestion;
    /**
    * @javaClass com.mojang.math.Transformation
    */
    class Transformation implements Internal.IForgeTransformation {
        getNormalMatrix(): Internal.Matrix3f;
        hashCode(): number;
        equals(arg0: any): boolean;
        get normalMatrix(): Internal.Matrix3f;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Transformation_ = Transformation;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2LongFunction
    */
    interface Object2LongFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToLongFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        removeLong(arg0: any): number;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Long2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Object2FloatFunction<K>;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Object2CharFunction<K>;
        getLong(arg0: any): number;
        applyAsLong(arg0: K): number;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2LongFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2LongFunction;
    }
    type Object2LongFunction_<K> = ((arg0: any) => number) | Object2LongFunction<K>;
    /**
    * @javaClass dev.latvian.mods.kubejs.script.ScriptFileInfo
    */
    class ScriptFileInfo {
        getPackMode(): string;
        getProperty(s: string, def: string): string;
        getPriority(): number;
        preload(source: Internal.ScriptSource_): Internal.Throwable;
        isIgnored(): boolean;
        readonly "file" : string;
        readonly "location" : string;
        readonly "id" : ResourceLocation;
        readonly "pack" : Internal.ScriptPackInfo;
        get ignored(): boolean;
        get packMode(): string;
        get priority(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScriptFileInfo_ = ScriptFileInfo;
    /**
    * @javaClass net.minecraft.world.item.Item
    */
    class Item extends Internal.ForgeRegistryEntry<Internal.Item> implements Internal.ItemLike, Internal.IForgeItem, Internal.ItemFTBL, Internal.InjectedItemExtension, Internal.ItemKJS {
        isRepairable(arg0: Internal.ItemStack_): boolean;
        setBurnTime(i: number): void;
        getRenderPropertiesInternal(): any;
        setItemBuilderKJS(b: Internal.ItemBuilder_): void;
        getTypeData(): Internal.CompoundTag;
        /**
        */
        getId(): Special.Item & `${string}:${string}`;
        toString(): string;
        initializeClient(arg0: Internal.Consumer_<Internal.IItemRenderProperties_>): void;
        getItemBuilderKJS(): Internal.ItemBuilder;
        get renderPropertiesInternal(): any;
        get itemBuilderKJS(): Internal.ItemBuilder;
        /**
        */
        get id(): Special.Item & `${string}:${string}`;
        get typeData(): Internal.CompoundTag;
        set itemBuilderKJS(b: Internal.ItemBuilder_);
        set burnTime(i: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type Item_ = Special.Item | Item;
    /**
    * @javaClass dev.latvian.mods.rhino.classdata.MethodInfo
    */
    class MethodInfo {
        toString(): string;
        "method" : Internal.Method;
        "signature" : Internal.MethodSignature;
        "bean" : string;
        "isHidden" : boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MethodInfo_ = MethodInfo;
    /**
    * @javaClass net.minecraft.world.entity.ai.goal.GoalSelector
    */
    class GoalSelector implements Internal.AccessorGoalSelector {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GoalSelector_ = GoalSelector;
    /**
    * @javaClass dev.latvian.mods.kubejs.util.ConsoleJS
    */
    class ConsoleJS {
        printObject(o: any, tree: boolean): void;
        printObject(o: any): void;
        infof(message: any, ... args: any[]): void;
        log(message: any): void;
        setMuted(m: boolean): void;
        errorf(message: string, ... args: any[]): void;
        error(message: string, throwable: Internal.Throwable_): void;
        error(message: any): void;
        error(message: string, throwable: Internal.Throwable_, skip: Internal.Pattern_): void;
        debugf(message: string, ... args: any[]): void;
        trace(): void;
        flush(): void;
        setWriteToFile(m: boolean): void;
        setLineNumber(b: boolean): void;
        warnf(message: string, ... args: any[]): void;
        getScriptLine(): number;
        info(message: any): void;
        group(): void;
        getMuted(): boolean;
        debug(message: any): void;
        printStackTrace(throwable: Internal.Throwable_, skip: Internal.Pattern_): void;
        getLogger(): Internal.Logger;
        shouldPrintDebug(): boolean;
        setDebugEnabled(m: boolean): void;
        resetFile(): void;
        warn(message: string, throwable: Internal.Throwable_): void;
        warn(message: any): void;
        warn(message: string, throwable: Internal.Throwable_, skip: Internal.Pattern_): void;
        getDebugEnabled(): boolean;
        groupEnd(): void;
        printClass(className: string, tree: boolean): void;
        printClass(className: string): void;
        getWriteToFile(): boolean;
        static "SERVER" : Internal.ConsoleJS;
        static "STARTUP" : Internal.ConsoleJS;
        static "CLIENT" : Internal.ConsoleJS;
        get scriptLine(): number;
        get writeToFile(): boolean;
        get logger(): Internal.Logger;
        get debugEnabled(): boolean;
        get muted(): boolean;
        set writeToFile(m: boolean);
        set debugEnabled(m: boolean);
        set lineNumber(b: boolean);
        set muted(m: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConsoleJS_ = ConsoleJS;
    /**
    * @javaClass java.util.ArrayList
    */
    class ArrayList <E> extends Internal.AbstractList<E> implements Internal.List<E>, Internal.RandomAccess, Internal.Cloneable, Internal.Serializable {
        replaceAll(arg0: Internal.UnaryOperator_<E>): void;
        remove(arg0: any): boolean;
        remove(arg0: number): E;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        iterator(): Internal.Iterator<E>;
        hashCode(): number;
        get(arg0: number): E;
        toArray(): any[];
        toArray<T>(arg0: T[]): T[];
        indexOf(arg0: any): number;
        add(arg0: E): boolean;
        add(arg0: number, arg1: E): void;
        subList(arg0: number, arg1: number): Internal.List<E>;
        trimToSize(): void;
        set(arg0: number, arg1: E): E;
        spliterator(): Internal.Spliterator<E>;
        forEach(arg0: Internal.Consumer_<E>): void;
        isEmpty(): boolean;
        clear(): void;
        sort(arg0: Internal.Comparator_<E>): void;
        removeIf(arg0: Internal.Predicate_<E>): boolean;
        lastIndexOf(arg0: any): number;
        contains(arg0: any): boolean;
        size(): number;
        addAll(arg0: number, arg1: Internal.Collection_<E>): boolean;
        addAll(arg0: Internal.Collection_<E>): boolean;
        equals(arg0: any): boolean;
        clone(): any;
        listIterator(): Internal.ListIterator<E>;
        listIterator(arg0: number): Internal.ListIterator<E>;
        ensureCapacity(arg0: number): void;
        retainAll(arg0: Internal.Collection_<any>): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArrayList_<E> = ArrayList<E>;
    /**
    * @javaClass com.mojang.serialization.DynamicLike
    */
    abstract class DynamicLike <T> {
        createIntList(arg0: Internal.IntStream_): Internal.Dynamic<any>;
        createLong(arg0: number): Internal.Dynamic<T>;
        createDouble(arg0: number): Internal.Dynamic<T>;
        getElementGeneric(arg0: T, arg1: T): T;
        getElementGeneric(arg0: T): Internal.DataResult<T>;
        asLongStreamOpt(): Internal.DataResult<Internal.LongStream>;
        createLongList(arg0: Internal.LongStream_): Internal.Dynamic<any>;
        readMap<K, V>(arg0: Internal.Decoder_<K>, arg1: Internal.Decoder_<V>): Internal.DataResult<Internal.List<com.mojang.datafixers.util.Pair<K, V>>>;
        readMap<K, V>(arg0: Internal.Decoder_<K>, arg1: Internal.Function_<K, Internal.Decoder_<V>>): Internal.DataResult<Internal.List<com.mojang.datafixers.util.Pair<K, V>>>;
        readMap<R>(arg0: Internal.DataResult_<R>, arg1: Internal.Function3_<R, Internal.Dynamic_<T>, Internal.Dynamic_<T>, Internal.DataResult_<R>>): Internal.DataResult<R>;
        asListOpt<U>(arg0: Internal.Function_<Internal.Dynamic_<T>, U>): Internal.DataResult<Internal.List<U>>;
        asStreamOpt(): Internal.DataResult<Internal.Stream<Internal.Dynamic<T>>>;
        asMap<K, V>(arg0: Internal.Function_<Internal.Dynamic_<T>, K>, arg1: Internal.Function_<Internal.Dynamic_<T>, V>): Internal.Map<K, V>;
        createShort(arg0: number): Internal.Dynamic<T>;
        asIntStream(): Internal.IntStream;
        createByteList(arg0: Internal.ByteBuffer_): Internal.Dynamic<any>;
        asByteBuffer(): Internal.ByteBuffer;
        asFloat(arg0: number): number;
        decode<A>(arg0: Internal.Decoder_<A>): Internal.DataResult<com.mojang.datafixers.util.Pair<A, T>>;
        asIntStreamOpt(): Internal.DataResult<Internal.IntStream>;
        asLongStream(): Internal.LongStream;
        createBoolean(arg0: boolean): Internal.Dynamic<T>;
        asList<U>(arg0: Internal.Function_<Internal.Dynamic_<T>, U>): Internal.List<U>;
        asInt(arg0: number): number;
        readList<E>(arg0: Internal.Decoder_<E>): Internal.DataResult<Internal.List<E>>;
        readList<E>(arg0: Internal.Function_<Internal.Dynamic_<any>, Internal.DataResult_<E>>): Internal.DataResult<Internal.List<E>>;
        emptyList(): Internal.Dynamic<T>;
        asShort(arg0: number): number;
        get(arg0: string): Internal.OptionalDynamic<T>;
        emptyMap(): Internal.Dynamic<T>;
        createNumeric(arg0: Internal.Number_): Internal.Dynamic<T>;
        asString(arg0: string): string;
        asString(): Internal.DataResult<string>;
        asByte(arg0: number): number;
        createList(arg0: Internal.Stream_<Internal.Dynamic_<any>>): Internal.Dynamic<T>;
        asByteBufferOpt(): Internal.DataResult<Internal.ByteBuffer>;
        read<A>(arg0: Internal.Decoder_<A>): Internal.DataResult<A>;
        asNumber(arg0: Internal.Number_): Internal.Number;
        asNumber(): Internal.DataResult<Internal.Number>;
        getGeneric(arg0: T): Internal.DataResult<T>;
        asMapOpt(): Internal.DataResult<Internal.Stream<com.mojang.datafixers.util.Pair<Internal.Dynamic<T>, Internal.Dynamic<T>>>>;
        asMapOpt<K, V>(arg0: Internal.Function_<Internal.Dynamic_<T>, K>, arg1: Internal.Function_<Internal.Dynamic_<T>, V>): Internal.DataResult<Internal.Map<K, V>>;
        createString(arg0: string): Internal.Dynamic<T>;
        asStream(): Internal.Stream<Internal.Dynamic<T>>;
        createMap(arg0: Internal.Map_<Internal.Dynamic_<any>, Internal.Dynamic_<any>>): Internal.Dynamic<T>;
        createFloat(arg0: number): Internal.Dynamic<T>;
        asLong(arg0: number): number;
        createByte(arg0: number): Internal.Dynamic<T>;
        getOps(): Internal.DynamicOps<T>;
        getElement(arg0: string): Internal.DataResult<T>;
        getElement(arg0: string, arg1: T): T;
        asDouble(arg0: number): number;
        createInt(arg0: number): Internal.Dynamic<T>;
        asBoolean(arg0: boolean): boolean;
        get ops(): Internal.DynamicOps<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DynamicLike_<T> = DynamicLike<T>;
    /**
    * @javaClass net.minecraft.world.level.block.Block
    */
    class Block extends Internal.BlockBehaviour implements Internal.ItemLike, Internal.IForgeBlock, Internal.InjectedBlockExtension {
        getRenderPropertiesInternal(): any;
        canSustainPlant(arg0: Internal.BlockState_, arg1: Internal.BlockGetter_, arg2: BlockPos_, arg3: Internal.Direction_, arg4: Internal.IPlantable_): boolean;
        getId(): string;
        toString(): string;
        initializeClient(arg0: Internal.Consumer_<Internal.IBlockRenderProperties_>): void;
        get renderPropertiesInternal(): any;
        get id(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Block_ = Special.Block | Block;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.ClientPlayerJS
    */
    class ClientPlayerJS extends Internal.PlayerJS<Internal.Player> {
        getStats(): Internal.PlayerStatsJS;
        sendData(channel: string, data: Internal.CompoundTag_): void;
        paint(tag: Internal.CompoundTag_): void;
        rayTrace(distance: number): Internal.RayTraceResultJS;
        isSelf(): boolean;
        isMiningBlock(): boolean;
        get stats(): Internal.PlayerStatsJS;
        get miningBlock(): boolean;
        get self(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type ClientPlayerJS_ = ClientPlayerJS;
    /**
    * @javaClass java.awt.Transparency
    */
    interface Transparency {
        getTransparency(): number;
    }
    type Transparency_ = (() => number) | Transparency;
    /**
    * @javaClass net.minecraftforge.event.entity.player.AdvancementEvent
    */
    class AdvancementEvent extends Internal.PlayerEvent {
        getAdvancement(): Internal.Advancement;
        getListenerList(): Internal.ListenerList;
        get advancement(): Internal.Advancement;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AdvancementEvent_ = AdvancementEvent;
    /**
    * @javaClass com.simibubi.create.foundation.tileEntity.CachedRenderBBTileEntity
    */
    abstract class CachedRenderBBTileEntity extends Internal.SyncedTileEntity {
        getRenderBoundingBox(): Internal.AABB;
        get renderBoundingBox(): Internal.AABB;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CachedRenderBBTileEntity_ = CachedRenderBBTileEntity;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.snbt.SNBTCompoundTag
    */
    class SNBTCompoundTag extends Internal.CompoundTag {
        getCompound(string: string): this;
        isBoolean(key: string): boolean;
        putNumber(key: string, number: Internal.Number_): void;
        getList<T>(key: string, type: Internal.Class_<T>): Internal.List<T>;
        static of(tag: Internal.Tag_): this;
        getComment(key: string): string;
        comment(key: string, ... comment: string[]): void;
        comment(key: string, comment: string): void;
        singleLine(): void;
        singleLine(key: string): void;
        getNullableList(key: string, type: number): Internal.ListTag;
        putNull(key: string): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SNBTCompoundTag_ = SNBTCompoundTag;
    /**
    * @javaClass java.awt.image.ImageConsumer
    */
    interface ImageConsumer {
        imageComplete(arg0: number): void;
        setPixels(arg0: number, arg1: number, arg2: number, arg3: number, arg4: Internal.ColorModel_, arg5: number[], arg6: number, arg7: number): void;
        setProperties(arg0: Internal.Hashtable_<any, any>): void;
        setDimensions(arg0: number, arg1: number): void;
        setHints(arg0: number): void;
        setColorModel(arg0: Internal.ColorModel_): void;
    }
    type ImageConsumer_ = ImageConsumer;
    /**
    * @javaClass java.awt.Cursor
    */
    class Cursor implements Internal.Serializable {
        getName(): string;
        getType(): number;
        static getSystemCustomCursor(arg0: string): this;
        static getPredefinedCursor(arg0: number): this;
        static getDefaultCursor(): this;
        toString(): string;
        static readonly "N_RESIZE_CURSOR" : 8;
        static readonly "S_RESIZE_CURSOR" : 9;
        static readonly "TEXT_CURSOR" : 2;
        static readonly "NW_RESIZE_CURSOR" : 6;
        static readonly "W_RESIZE_CURSOR" : 10;
        static readonly "SE_RESIZE_CURSOR" : 5;
        static readonly "CUSTOM_CURSOR" : -1;
        static readonly "NE_RESIZE_CURSOR" : 7;
        static readonly "SW_RESIZE_CURSOR" : 4;
        static readonly "DEFAULT_CURSOR" : 0;
        static readonly "CROSSHAIR_CURSOR" : 1;
        static readonly "E_RESIZE_CURSOR" : 11;
        static readonly "HAND_CURSOR" : 12;
        static readonly "WAIT_CURSOR" : 3;
        static readonly "MOVE_CURSOR" : 13;
        get name(): string;
        get type(): number;
        get defaultCursor(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Cursor_ = Cursor;
    /**
    * @javaClass java.io.FileFilter
    */
    interface FileFilter {
        accept(arg0: Internal.File_): boolean;
    }
    type FileFilter_ = ((arg0: Internal.File) => boolean) | FileFilter;
    /**
    * @javaClass net.minecraft.world.item.enchantment.EnchantmentCategory
    */
    class EnchantmentCategory extends Internal.Enum<Internal.EnchantmentCategory> implements Internal.IExtensibleEnum {
        static valueOf(arg0: string): this;
        static values(): Internal.EnchantmentCategory[];
        static create(arg0: string, arg1: Internal.Predicate_<Internal.Item_>): this;
        static readonly "ARMOR_HEAD" : Internal.EnchantmentCategory;
        static readonly "BREAKABLE" : Internal.EnchantmentCategory;
        static readonly "ARMOR" : Internal.EnchantmentCategory;
        static readonly "ARMOR_LEGS" : Internal.EnchantmentCategory;
        static readonly "FISHING_ROD" : Internal.EnchantmentCategory;
        static readonly "BOW" : Internal.EnchantmentCategory;
        static readonly "ARMOR_FEET" : Internal.EnchantmentCategory;
        static readonly "TRIDENT" : Internal.EnchantmentCategory;
        static readonly "VANISHABLE" : Internal.EnchantmentCategory;
        static readonly "ARMOR_CHEST" : Internal.EnchantmentCategory;
        static readonly "WEARABLE" : Internal.EnchantmentCategory;
        static readonly "WEAPON" : Internal.EnchantmentCategory;
        static readonly "DIGGER" : Internal.EnchantmentCategory;
        static readonly "CROSSBOW" : Internal.EnchantmentCategory;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnchantmentCategory_ = "fishing_rod" | "wearable" | "trident" | "crossbow" | "armor_chest" | "vanishable" | "bow" | "digger" | "weapon" | "armor" | "armor_legs" | "armor_head" | "armor_feet" | "breakable" | EnchantmentCategory;
    /**
    * @javaClass com.jozufozu.flywheel.core.layout.BufferLayout
    */
    class BufferLayout {
        getStride(): number;
        getLayoutItems(): Internal.List<Internal.LayoutItem>;
        static builder(): Internal.BufferLayout$Builder;
        getAttributeCount(): number;
        get layoutItems(): Internal.List<Internal.LayoutItem>;
        get attributeCount(): number;
        get stride(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BufferLayout_ = BufferLayout;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.InventoryJS
    */
    class InventoryJS {
        getBlock(level: Internal.LevelJS_): Internal.BlockContainerJS;
        countNonEmpty(ingredient: Internal.IngredientJS_): number;
        countNonEmpty(): number;
        set(slot: number, item: Internal.ItemStack_): void;
        markDirty(): void;
        count(): number;
        count(ingredient: Internal.IngredientJS_): number;
        isEmpty(): boolean;
        clear(): void;
        clear(ingredient: Internal.IngredientJS_): void;
        isItemValid(slot: number, item: Internal.ItemStack_): boolean;
        insert(slot: number, item: Internal.ItemStack_, simulate: boolean): Internal.ItemStackJS;
        getWidth(): number;
        getHeight(): number;
        getSize(): number;
        extract(slot: number, amount: number, simulate: boolean): Internal.ItemStackJS;
        find(ingredient: Internal.IngredientJS_): number;
        find(): number;
        getSlotLimit(slot: number): number;
        get(slot: number): Internal.ItemStackJS;
        toString(): string;
        readonly "minecraftInventory" : Internal.ItemHandler;
        get size(): number;
        get width(): number;
        get empty(): boolean;
        get height(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InventoryJS_ = InventoryJS;
    /**
    * @javaClass java.time.temporal.Temporal
    */
    interface Temporal extends Internal.TemporalAccessor {
        with(arg0: Internal.TemporalField_, arg1: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        plus(arg0: Internal.TemporalAmount_): this;
    }
    type Temporal_ = Temporal;
    /**
    * @javaClass dev.architectury.extensions.injected.InjectedGameEventExtension
    */
    interface InjectedGameEventExtension extends Internal.InjectedRegistryEntryExtension<Internal.GameEvent> {
        arch$holder(): Internal.Holder<Internal.GameEvent>;
    }
    type InjectedGameEventExtension_ = InjectedGameEventExtension;
    /**
    * @javaClass java.math.RoundingMode
    */
    class RoundingMode extends Internal.Enum<Internal.RoundingMode> {
        static valueOf(arg0: string): this;
        static valueOf(arg0: number): this;
        static values(): Internal.RoundingMode[];
        static readonly "DOWN" : Internal.RoundingMode;
        static readonly "FLOOR" : Internal.RoundingMode;
        static readonly "UNNECESSARY" : Internal.RoundingMode;
        static readonly "CEILING" : Internal.RoundingMode;
        static readonly "HALF_EVEN" : Internal.RoundingMode;
        static readonly "UP" : Internal.RoundingMode;
        static readonly "HALF_UP" : Internal.RoundingMode;
        static readonly "HALF_DOWN" : Internal.RoundingMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RoundingMode_ = "ceiling" | "half_down" | "half_up" | "unnecessary" | "up" | "floor" | "down" | "half_even" | RoundingMode;
    /**
    * @javaClass dev.latvian.mods.kubejs.generator.DataJsonGenerator
    */
    class DataJsonGenerator extends Internal.JsonGenerator {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataJsonGenerator_ = DataJsonGenerator;
    /**
    * @javaClass net.minecraftforge.server.permission.handler.IPermissionHandlerFactory
    */
    interface IPermissionHandlerFactory {
        create(arg0: Internal.Collection_<Internal.PermissionNode_<any>>): Internal.IPermissionHandler;
    }
    type IPermissionHandlerFactory_ = ((arg0: Internal.Collection<Internal.PermissionNode<any>>) => Internal.IPermissionHandler) | IPermissionHandlerFactory;
    /**
    * @javaClass java.lang.Throwable
    */
    class Throwable implements Internal.Serializable {
        addSuppressed(arg0: Internal.Throwable_): void;
        setStackTrace(arg0: any[]): void;
        getStackTrace(): any[];
        printStackTrace(): void;
        printStackTrace(arg0: Internal.PrintWriter_): void;
        printStackTrace(arg0: Internal.PrintStream_): void;
        getLocalizedMessage(): string;
        initCause(arg0: Internal.Throwable_): this;
        getMessage(): string;
        getSuppressed(): Internal.Throwable[];
        toString(): string;
        getCause(): this;
        fillInStackTrace(): this;
        get localizedMessage(): string;
        get cause(): this;
        get stackTrace(): any[];
        get suppressed(): Internal.Throwable[];
        get message(): string;
        set stackTrace(arg0: any[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Throwable_ = Throwable;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.minecraft.SmithingRecipeJS
    */
    class SmithingRecipeJS extends Internal.RecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SmithingRecipeJS_ = SmithingRecipeJS;
    /**
    * @javaClass java.time.LocalDate
    */
    class LocalDate implements Internal.Temporal, Internal.TemporalAdjuster, Internal.ChronoLocalDate, Internal.Serializable {
        atStartOfDay(): Internal.LocalDateTime;
        atStartOfDay(arg0: Internal.ZoneId_): Internal.ZonedDateTime;
        toEpochDay(): number;
        isEqual(arg0: Internal.ChronoLocalDate_): boolean;
        compareTo(arg0: Internal.ChronoLocalDate_): number;
        getDayOfWeek(): Internal.DayOfWeek;
        lengthOfMonth(): number;
        getEra(): Internal.IsoEra;
        static from(arg0: Internal.TemporalAccessor_): this;
        static ofYearDay(arg0: number, arg1: number): this;
        getMonth(): Internal.Month;
        plusMonths(arg0: number): this;
        plusYears(arg0: number): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        format(arg0: Internal.DateTimeFormatter_): string;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: Internal.TemporalAmount_): this;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        atTime(arg0: Internal.LocalTime_): Internal.LocalDateTime;
        atTime(arg0: number, arg1: number): Internal.LocalDateTime;
        atTime(arg0: Internal.OffsetTime_): Internal.OffsetDateTime;
        atTime(arg0: number, arg1: number, arg2: number, arg3: number): Internal.LocalDateTime;
        atTime(arg0: number, arg1: number, arg2: number): Internal.LocalDateTime;
        getYear(): number;
        toEpochSecond(arg0: Internal.LocalTime_, arg1: Internal.ZoneOffset_): number;
        withDayOfMonth(arg0: number): this;
        withMonth(arg0: number): this;
        isAfter(arg0: Internal.ChronoLocalDate_): boolean;
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        datesUntil(arg0: Internal.LocalDate_): Internal.Stream<Internal.LocalDate>;
        datesUntil(arg0: Internal.LocalDate_, arg1: Internal.Period_): Internal.Stream<Internal.LocalDate>;
        adjustInto(arg0: Internal.Temporal_): Internal.Temporal;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        withYear(arg0: number): this;
        lengthOfYear(): number;
        plusDays(arg0: number): this;
        hashCode(): number;
        static now(arg0: Internal.ZoneId_): this;
        static now(arg0: Internal.Clock_): this;
        static now(): this;
        static of(arg0: number, arg1: Internal.Month_, arg2: number): this;
        static of(arg0: number, arg1: number, arg2: number): this;
        get(arg0: Internal.TemporalField_): number;
        getDayOfYear(): number;
        plusWeeks(arg0: number): this;
        getChronology(): Internal.IsoChronology;
        static ofEpochDay(arg0: number): this;
        getMonthValue(): number;
        minusYears(arg0: number): this;
        minusWeeks(arg0: number): this;
        withDayOfYear(arg0: number): this;
        isLeapYear(): boolean;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        static parse(arg0: Internal.CharSequence_): this;
        isBefore(arg0: Internal.ChronoLocalDate_): boolean;
        minusDays(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        minusMonths(arg0: number): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        equals(arg0: any): boolean;
        until(arg0: Internal.ChronoLocalDate_): Internal.Period;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        getDayOfMonth(): number;
        static readonly "MIN" : Internal.LocalDate;
        static readonly "MAX" : Internal.LocalDate;
        static readonly "EPOCH" : Internal.LocalDate;
        get dayOfWeek(): Internal.DayOfWeek;
        get month(): Internal.Month;
        get era(): Internal.IsoEra;
        get year(): number;
        get dayOfYear(): number;
        get dayOfMonth(): number;
        get monthValue(): number;
        get chronology(): Internal.IsoChronology;
        get leapYear(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LocalDate_ = LocalDate;
    /**
    * @javaClass java.awt.Stroke
    */
    interface Stroke {
        createStrokedShape(arg0: Internal.Shape_): Internal.Shape;
    }
    type Stroke_ = ((arg0: Internal.Shape) => Internal.Shape) | Stroke;
    /**
    * @javaClass java.util.jar.Manifest
    */
    class Manifest implements Internal.Cloneable {
        getAttributes(arg0: string): Internal.Attributes;
        read(arg0: Internal.InputStream_): void;
        getEntries(): Internal.Map<string, Internal.Attributes>;
        hashCode(): number;
        equals(arg0: any): boolean;
        clear(): void;
        clone(): any;
        getMainAttributes(): Internal.Attributes;
        write(arg0: Internal.OutputStream_): void;
        get entries(): Internal.Map<string, Internal.Attributes>;
        get mainAttributes(): Internal.Attributes;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Manifest_ = Manifest;
    /**
    * @javaClass mezz.jei.api.runtime.IBookmarkOverlay
    */
    interface IBookmarkOverlay {
        getItemStackUnderMouse(): Internal.ItemStack;
        getIngredientUnderMouse<T>(arg0: Internal.IIngredientType_<T>): T;
        getIngredientUnderMouse(): Internal.Optional<Internal.ITypedIngredient<any>>;
    }
    type IBookmarkOverlay_ = IBookmarkOverlay;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2CharFunction
    */
    interface Object2CharFunction <K> extends it.unimi.dsi.fastutil.Function<K, string>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Object2ShortFunction<K>;
        removeChar(arg0: any): string;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: string): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Object2LongFunction<K>;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Object2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): Internal.Object2CharFunction<K>;
        getChar(arg0: any): string;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2CharFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2CharFunction;
    }
    type Object2CharFunction_<K> = ((arg0: any) => string) | Object2CharFunction<K>;
    /**
    * @javaClass java.nio.charset.CodingErrorAction
    */
    class CodingErrorAction {
        toString(): string;
        static readonly "REPORT" : Internal.CodingErrorAction;
        static readonly "IGNORE" : Internal.CodingErrorAction;
        static readonly "REPLACE" : Internal.CodingErrorAction;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CodingErrorAction_ = CodingErrorAction;
    /**
    * @javaClass dev.latvian.mods.rhino.util.Remapper
    */
    interface Remapper {
        remapMethod(arg0: Internal.Class_<any>, arg1: Internal.Method_, arg2: string): string;
        unmapClass(arg0: string): string;
        getMappedClass(from: Internal.Class_<any>): string;
        getMappedField(from: Internal.Class_<any>, field: Internal.Field_): string;
        getMappedField(from: Internal.Class_<any>, field: Internal.Field_, fieldName: string): string;
        getMappedMethod(from: Internal.Class_<any>, method: Internal.Method_, methodString: string): string;
        getMappedMethod(from: Internal.Class_<any>, method: Internal.Method_): string;
        remapField(arg0: Internal.Class_<any>, arg1: Internal.Field_, arg2: string): string;
        getTypeName(type: string, remap: Internal.Function_<string, string>): string;
        getTypeName(type: string): string;
        getUnmappedClass(from: string): string;
        remapClass(arg0: Internal.Class_<any>, arg1: string): string;
    }
    type Remapper_ = Remapper;
    /**
    * @javaClass java.util.Locale$Category
    */
    class Locale$Category extends Internal.Enum<Internal.Locale$Category> {
        static valueOf(arg0: string): this;
        static values(): Internal.Locale$Category[];
        static readonly "DISPLAY" : Internal.Locale$Category;
        static readonly "FORMAT" : Internal.Locale$Category;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Locale$Category_ = "display" | "format" | Locale$Category;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.Theme
    */
    class Theme {
        drawCheckboxBackground(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, radioButton: boolean): void;
        drawTextBox(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        drawWidget(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_): void;
        listFormattedStringToWidth(text: Internal.FormattedText_, width: number): Internal.List<Internal.FormattedText>;
        getStringWidth(text: Internal.FormattedText_): number;
        getStringWidth(text: Internal.FormattedCharSequence_): number;
        getStringWidth(text: string): number;
        trimStringToWidth(text: string, width: number): string;
        trimStringToWidth(text: Internal.FormattedText_, width: number): Internal.FormattedText;
        drawHorizontalTab(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, selected: boolean): void;
        drawScrollBar(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_, vertical: boolean): void;
        getFontHeight(): number;
        drawString(matrixStack: Internal.PoseStack_, text: any, x: number, y: number, flags: number): number;
        drawString(matrixStack: Internal.PoseStack_, text: any, x: number, y: number): number;
        drawString(matrixStack: Internal.PoseStack_, text: any, x: number, y: number, color: Internal.Color4I_, flags: number): number;
        drawGui(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_): void;
        drawCheckbox(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_, selected: boolean, radioButton: boolean): void;
        drawScrollBarBackground(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_): void;
        drawSlot(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_): void;
        trimStringToWidthReverse(text: string, width: number): string;
        getContentColor(type: Internal.WidgetType_): Internal.Color4I;
        getFont(): net.minecraft.client.gui.Font;
        drawContainerSlot(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        getInvertedContentColor(): Internal.Color4I;
        drawPanelBackground(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        drawButton(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number, type: Internal.WidgetType_): void;
        drawContextMenuBackground(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        static readonly "MOUSE_OVER" : 16;
        static readonly "BACKGROUND_SQUARES" : Internal.ImageIcon;
        static readonly "CENTERED" : 4;
        static readonly "SHADOW" : 2;
        static readonly "CENTERED_V" : 32;
        static readonly "DARK" : 1;
        static "renderDebugBoxes" : false;
        static readonly "UNICODE" : 8;
        static readonly "DEFAULT" : Internal.Theme;
        get invertedContentColor(): Internal.Color4I;
        get fontHeight(): number;
        get font(): net.minecraft.client.gui.Font;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Theme_ = Theme;
    /**
    * @javaClass dev.latvian.mods.unit.MutableNumberUnit
    */
    class MutableNumberUnit extends Internal.Unit {
        set(value: number): void;
        get(variables: Internal.UnitVariables_): number;
        toString(builder: Internal.StringBuilder_): void;
        "value" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MutableNumberUnit_ = MutableNumberUnit;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkWatchEvent
    */
    class ChunkWatchEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.ServerPlayer;
        getWorld(): Internal.ServerLevel;
        getPos(): Internal.ChunkPos;
        get world(): Internal.ServerLevel;
        get listenerList(): Internal.ListenerList;
        get pos(): Internal.ChunkPos;
        get player(): Internal.ServerPlayer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkWatchEvent_ = ChunkWatchEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.ObjectSet
    */
    interface ObjectSet <K> extends Internal.ObjectCollection<K>, Internal.Set<K> {
        iterator(): Internal.ObjectIterator<K>;
        spliterator(): Internal.ObjectSpliterator<K>;
        of<K>(arg0: K, arg1: K): Internal.ObjectSet<K>;
        of<K>(... arg0: K[]): Internal.ObjectSet<K>;
        of<K>(arg0: K, arg1: K, arg2: K): Internal.ObjectSet<K>;
        of<K>(): Internal.ObjectSet<K>;
        of<K>(arg0: K): Internal.ObjectSet<K>;
    }
    type ObjectSet_<K> = (() => Internal.ObjectIterator<K>) | ObjectSet<K>;
    /**
    * @javaClass net.minecraftforge.common.capabilities.ICapabilitySerializable
    */
    interface ICapabilitySerializable <T> extends Internal.ICapabilityProvider, Internal.INBTSerializable<T> {
    }
    type ICapabilitySerializable_<T> = ICapabilitySerializable<T>;
    /**
    * @javaClass net.minecraftforge.fml.IExtensionPoint
    */
    interface IExtensionPoint <T> {
    }
    type IExtensionPoint_<T> = IExtensionPoint<T>;
    /**
    * @javaClass net.minecraft.server.packs.resources.ResourceProvider
    */
    interface ResourceProvider {
    }
    type ResourceProvider_ = ResourceProvider;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyReleasedEvent
    */
    abstract class ScreenEvent$KeyboardKeyReleasedEvent extends Internal.ScreenEvent$KeyboardKeyEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyReleasedEvent_ = ScreenEvent$KeyboardKeyReleasedEvent;
    /**
    * @javaClass net.minecraftforge.network.PlayMessages$SpawnEntity
    */
    class PlayMessages$SpawnEntity {
        static encode(arg0: Internal.PlayMessages$SpawnEntity_, arg1: Internal.FriendlyByteBuf_): void;
        getAdditionalData(): Internal.FriendlyByteBuf;
        static handle(arg0: Internal.PlayMessages$SpawnEntity_, arg1: Internal.Supplier_<Internal.NetworkEvent$Context_>): void;
        getEntity(): Internal.Entity;
        static decode(arg0: Internal.FriendlyByteBuf_): this;
        getHeadYaw(): number;
        getTypeId(): number;
        getYaw(): number;
        getPitch(): number;
        getVelY(): number;
        getVelZ(): number;
        getVelX(): number;
        getUuid(): Internal.UUID;
        getPosZ(): number;
        getEntityId(): number;
        getPosX(): number;
        getPosY(): number;
        get headYaw(): number;
        get velZ(): number;
        get entityId(): number;
        get velY(): number;
        get velX(): number;
        get uuid(): Internal.UUID;
        get yaw(): number;
        get posX(): number;
        get posY(): number;
        get posZ(): number;
        get typeId(): number;
        get additionalData(): Internal.FriendlyByteBuf;
        get pitch(): number;
        get entity(): Internal.Entity;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayMessages$SpawnEntity_ = PlayMessages$SpawnEntity;
    /**
    * @javaClass net.minecraft.world.InteractionResult
    */
    class InteractionResult extends Internal.Enum<Internal.InteractionResult> {
        static valueOf(arg0: string): this;
        static values(): Internal.InteractionResult[];
        static readonly "SUCCESS" : Internal.InteractionResult;
        static readonly "PASS" : Internal.InteractionResult;
        static readonly "CONSUME_PARTIAL" : Internal.InteractionResult;
        static readonly "CONSUME" : Internal.InteractionResult;
        static readonly "FAIL" : Internal.InteractionResult;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InteractionResult_ = "fail" | "pass" | "success" | "consume" | "consume_partial" | InteractionResult;
    /**
    * @javaClass com.mojang.datafixers.Products$P1
    */
    class Products$P1 <F, T1> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function_<T1, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function_<T1, R>>): Internal.App<F, R>;
        and<T2, T3, T4, T5, T6, T7>(arg0: Internal.Products$P6_<F, T2, T3, T4, T5, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T2, T3, T4, T5, T6, T7, T8>(arg0: Internal.Products$P7_<F, T2, T3, T4, T5, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T2, T3, T4, T5>(arg0: Internal.Products$P4_<F, T2, T3, T4, T5>): Internal.Products$P5<F, T1, T2, T3, T4, T5>;
        and<T2, T3>(arg0: Internal.Products$P2_<F, T2, T3>): Internal.Products$P3<F, T1, T2, T3>;
        and<T2, T3, T4>(arg0: Internal.Products$P3_<F, T2, T3, T4>): Internal.Products$P4<F, T1, T2, T3, T4>;
        and<T2>(arg0: Internal.App_<F, T2>): Internal.Products$P2<F, T1, T2>;
        and<T2, T3, T4, T5, T6>(arg0: Internal.Products$P5_<F, T2, T3, T4, T5, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        t1(): Internal.App<F, T1>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P1_<F, T1> = Products$P1<F, T1>;
    /**
    * @javaClass java.awt.im.InputContext
    */
    class InputContext {
        isCompositionEnabled(): boolean;
        setCharacterSubsets(arg0: any[]): void;
        dispatchEvent(arg0: Internal.AWTEvent_): void;
        setCompositionEnabled(arg0: boolean): void;
        endComposition(): void;
        reconvert(): void;
        removeNotify(arg0: Internal.Component_): void;
        getInputMethodControlObject(): any;
        dispose(): void;
        selectInputMethod(arg0: Internal.Locale_): boolean;
        static getInstance(): this;
        getLocale(): Internal.Locale;
        get inputMethodControlObject(): any;
        get compositionEnabled(): boolean;
        get instance(): this;
        get locale(): Internal.Locale;
        set compositionEnabled(arg0: boolean);
        set characterSubsets(arg0: any[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputContext_ = InputContext;
    /**
    * @javaClass net.minecraft.client.renderer.texture.AtlasSet
    */
    class AtlasSet implements Internal.AutoCloseable {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AtlasSet_ = AtlasSet;
    /**
    * @javaClass net.minecraft.world.scores.Scoreboard
    */
    class Scoreboard {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Scoreboard_ = Scoreboard;
    /**
    * @javaClass dev.architectury.hooks.level.biome.BiomeProperties
    */
    interface BiomeProperties {
        getSpawnProperties(): Internal.SpawnProperties;
        getGenerationProperties(): Internal.GenerationProperties;
        getEffectsProperties(): Internal.EffectsProperties;
        getClimateProperties(): Internal.ClimateProperties;
        getCategory(): Internal.Biome$BiomeCategory;
    }
    type BiomeProperties_ = BiomeProperties;
    /**
    * @javaClass io.netty.channel.ChannelInboundInvoker
    */
    interface ChannelInboundInvoker {
        fireChannelRead(arg0: any): this;
        fireChannelInactive(): this;
        fireChannelReadComplete(): this;
        fireChannelWritabilityChanged(): this;
        fireExceptionCaught(arg0: Internal.Throwable_): this;
        fireChannelActive(): this;
        fireUserEventTriggered(arg0: any): this;
        fireChannelUnregistered(): this;
        fireChannelRegistered(): this;
    }
    type ChannelInboundInvoker_ = ChannelInboundInvoker;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Version
    */
    class ModuleDescriptor$Version implements Internal.Comparable<Internal.ModuleDescriptor$Version> {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        static parse(arg0: string): this;
        compareTo(arg0: Internal.ModuleDescriptor$Version_): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Version_ = ModuleDescriptor$Version;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.Tristate
    */
    class Tristate extends Internal.Enum<Internal.Tristate> {
        isTrue(): boolean;
        isDefault(): boolean;
        static read(nbt: Internal.CompoundTag_, key: string): this;
        static read(buffer: Internal.FriendlyByteBuf_): this;
        static valueOf(name: string): this;
        static values(): Internal.Tristate[];
        get(def: boolean): boolean;
        isFalse(): boolean;
        getOpposite(): this;
        toString(): string;
        write(buffer: Internal.FriendlyByteBuf_): void;
        write(nbt: Internal.CompoundTag_, key: string): void;
        readonly "result" : Internal.InteractionResult;
        readonly "color" : Internal.Color4I;
        static readonly "NAME_MAP" : Internal.NameMap<Internal.Tristate>;
        readonly "displayName" : string;
        readonly "name" : string;
        readonly "icon" : Internal.Icon;
        static readonly "TRUE" : Internal.Tristate;
        static readonly "FALSE" : Internal.Tristate;
        static readonly "VALUES" : Internal.Tristate[];
        static readonly "DEFAULT" : Internal.Tristate;
        get default(): boolean;
        get true(): boolean;
        get false(): boolean;
        get opposite(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Tristate_ = "default" | "false" | "true" | Tristate;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.predicate.BlockIDPredicate
    */
    class BlockIDPredicate implements Internal.BlockPredicate {
        getBlockProperties(): Internal.List<Internal.BlockIDPredicate$PropertyObject>;
        with(key: string, value: string): this;
        checkState(state: Internal.BlockState_): boolean;
        toString(): string;
        check(b: Internal.BlockContainerJS_): boolean;
        getBlockState(): Internal.BlockState;
        get blockState(): Internal.BlockState;
        get blockProperties(): Internal.List<Internal.BlockIDPredicate$PropertyObject>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockIDPredicate_ = BlockIDPredicate;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$WorldTickEvent
    */
    class TickEvent$WorldTickEvent extends Internal.TickEvent {
        getListenerList(): Internal.ListenerList;
        haveTime(): boolean;
        readonly "world" : Internal.Level;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$WorldTickEvent_ = TickEvent$WorldTickEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.BlockItemBuilder
    */
    class BlockItemBuilder extends Internal.ItemBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        getTranslationKeyGroup(): string;
        createObject(): Internal.Item;
        "blockBuilder" : Internal.BlockBuilder;
        get translationKeyGroup(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockItemBuilder_ = BlockItemBuilder;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.TeamData
    */
    class TeamData {
        clearCachedProgress(): void;
        setCanEdit(mode: boolean): boolean;
        setProgress(task: Internal.Task_, progress: number): void;
        save(): void;
        resetProgress(task: Internal.Task_): void;
        getProgress(task: Internal.Task_): number;
        getProgress(task: number): number;
        getCanEdit(): boolean;
        serializeNBT(): Internal.SNBTCompoundTag;
        getRewardClaimTime(player: Internal.UUID_, reward: Internal.Reward_): Internal.Date;
        getClaimType(player: Internal.UUID_, reward: Internal.Reward_): Internal.RewardClaimType;
        setStarted(id: number, time: Internal.Date_): boolean;
        canStartTasks(quest: Internal.Quest_): boolean;
        deleteReward(reward: Internal.Reward_): void;
        isLocked(): boolean;
        static get(player: Internal.Player_): this;
        getStartedTime(id: number): Internal.Date;
        setAutoPin(auto: boolean): void;
        getCompletedTime(id: number): Internal.Date;
        write(buffer: Internal.FriendlyByteBuf_, self: boolean): void;
        isCompleted(object: Internal.QuestObject_): boolean;
        setQuestPinned(id: number, pinned: boolean): void;
        isQuestPinned(id: number): boolean;
        read(buffer: Internal.FriendlyByteBuf_, self: boolean): void;
        hasUnclaimedRewards(player: Internal.UUID_, object: Internal.QuestObject_): boolean;
        getRelativeProgress(object: Internal.QuestObject_): number;
        checkAutoCompletion(quest: Internal.Quest_): void;
        deserializeNBT(nbt: Internal.SNBTCompoundTag_): void;
        isStarted(object: Internal.QuestObject_): boolean;
        setCompleted(id: number, time: Internal.Date_): boolean;
        addProgress(task: Internal.Task_, p: number): void;
        setLocked(b: boolean): boolean;
        copyData(from: Internal.TeamData_): void;
        mergeData(from: Internal.TeamData_): void;
        resetReward(player: Internal.UUID_, reward: Internal.Reward_): boolean;
        areDependenciesComplete(quest: Internal.Quest_): boolean;
        getOnlineMembers(): Internal.List<Internal.ServerPlayer>;
        getAutoPin(): boolean;
        isRewardClaimed(player: Internal.UUID_, reward: Internal.Reward_): boolean;
        claimReward(player: Internal.UUID_, reward: Internal.Reward_, date: number): boolean;
        claimReward(player: Internal.ServerPlayer_, reward: Internal.Reward_, notify: boolean): void;
        toString(): string;
        "file" : Internal.QuestFile;
        readonly "pinnedQuests" : Internal.LongOpenHashSet;
        static "VERSION" : 1;
        "name" : string;
        "shouldSave" : boolean;
        readonly "uuid" : Internal.UUID;
        get onlineMembers(): Internal.List<Internal.ServerPlayer>;
        get canEdit(): boolean;
        get locked(): boolean;
        get autoPin(): boolean;
        set canEdit(mode: boolean);
        set locked(b: boolean);
        set autoPin(auto: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamData_ = TeamData;
    /**
    * @javaClass net.minecraft.world.level.Explosion
    */
    class Explosion {
        getPosition(): Vec3;
        getExploder(): Internal.Entity;
        get exploder(): Internal.Entity;
        get position(): Vec3;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Explosion_ = Explosion;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.Float2IntFunction
    */
    interface Float2IntFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Int2ShortFunction_): Internal.Float2ShortFunction;
        composeByte(arg0: Internal.Byte2FloatFunction_): Internal.Byte2IntFunction;
        andThenInt(arg0: Internal.Int2IntFunction_): this;
        composeReference<T>(arg0: Internal.Reference2FloatFunction_<T>): Internal.Reference2IntFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Int2DoubleFunction_): Internal.Float2DoubleFunction;
        andThenObject<T>(arg0: Internal.Int2ObjectFunction_<T>): Internal.Float2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Int2LongFunction_): Internal.Float2LongFunction;
        composeLong(arg0: Internal.Long2FloatFunction_): Internal.Long2IntFunction;
        andThenByte(arg0: Internal.Int2ByteFunction_): Internal.Float2ByteFunction;
        andThenFloat(arg0: Internal.Int2FloatFunction_): Internal.Float2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2FloatFunction_): Internal.Int2IntFunction;
        composeFloat(arg0: Internal.Float2FloatFunction_): this;
        andThenChar(arg0: Internal.Int2CharFunction_): Internal.Float2CharFunction;
        composeObject<T>(arg0: Internal.Object2FloatFunction_<T>): Internal.Object2IntFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2FloatFunction_): Internal.Short2IntFunction;
        andThenReference<T>(arg0: Internal.Int2ReferenceFunction_<T>): Internal.Float2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2FloatFunction_): Internal.Char2IntFunction;
        composeDouble(arg0: Internal.Double2FloatFunction_): Internal.Double2IntFunction;
    }
    type Float2IntFunction_ = ((arg0: number) => number) | Float2IntFunction;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Object2BooleanFunction
    */
    interface Object2BooleanFunction <K> extends it.unimi.dsi.fastutil.Function<K, boolean>, Internal.Predicate<K> {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Object2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ObjectFunction_<K>): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Object2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ObjectFunction_<T, K>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: boolean): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Object2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Object2ObjectFunction<K, T>;
        get(arg0: any): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Object2LongFunction<K>;
        removeBoolean(arg0: any): boolean;
        composeLong(arg0: Internal.Long2ObjectFunction_<K>): Internal.Long2BooleanFunction;
        getBoolean(arg0: any): boolean;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Object2ByteFunction<K>;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Object2FloatFunction<K>;
        test(arg0: K): boolean;
        composeInt(arg0: Internal.Int2ObjectFunction_<K>): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2ObjectFunction_<K>): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Object2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ObjectFunction_<T, K>): Internal.Object2BooleanFunction<T>;
        composeShort(arg0: Internal.Short2ObjectFunction_<K>): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Object2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ObjectFunction_<K>): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2ObjectFunction_<K>): Internal.Double2BooleanFunction;
    }
    type Object2BooleanFunction_<K> = ((arg0: any) => boolean) | Object2BooleanFunction<K>;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingDeathEvent
    */
    class LivingDeathEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        getSource(): Internal.DamageSource;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get source(): Internal.DamageSource;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingDeathEvent_ = LivingDeathEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$ItemPickupEvent
    */
    class PlayerEvent$ItemPickupEvent extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getOriginalEntity(): Internal.ItemEntity;
        getStack(): Internal.ItemStack;
        get stack(): Internal.ItemStack;
        get originalEntity(): Internal.ItemEntity;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$ItemPickupEvent_ = PlayerEvent$ItemPickupEvent;
    /**
    * @javaClass mezz.jei.api.recipe.category.IRecipeCategory
    */
    interface IRecipeCategory <T> {
        getTooltipStrings(arg0: T, arg1: number, arg2: number): Internal.List<net.minecraft.network.chat.Component>;
        getTooltipStrings(arg0: T, arg1: Internal.IRecipeSlotsView_, arg2: number, arg3: number): Internal.List<net.minecraft.network.chat.Component>;
        setRecipe(arg0: Internal.IRecipeLayoutBuilder_, arg1: T, arg2: Internal.IFocusGroup_): void;
        setRecipe(arg0: Internal.IRecipeLayout_, arg1: T, arg2: Internal.IIngredients_): void;
        setRecipe(arg0: Internal.IRecipeLayoutBuilder_, arg1: T, arg2: Internal.List_<Internal.IFocus_<any>>): void;
        getRegistryName(arg0: T): ResourceLocation;
        draw(arg0: T, arg1: Internal.PoseStack_, arg2: number, arg3: number): void;
        draw(arg0: T, arg1: Internal.IRecipeSlotsView_, arg2: Internal.PoseStack_, arg3: number, arg4: number): void;
        handleInput(arg0: T, arg1: number, arg2: number, arg3: Internal.InputConstants$Key_): boolean;
        isHandled(arg0: T): boolean;
        getIcon(): Internal.IDrawable;
        getUid(): ResourceLocation;
        getTitle(): net.minecraft.network.chat.Component;
        getRecipeType(): mezz.jei.api.recipe.RecipeType<T>;
        handleClick(arg0: T, arg1: number, arg2: number, arg3: number): boolean;
        setIngredients(arg0: T, arg1: Internal.IIngredients_): void;
        getRecipeClass(): typeof T;
        getBackground(): Internal.IDrawable;
    }
    type IRecipeCategory_<T> = IRecipeCategory<T>;
    /**
    * @javaClass net.minecraftforge.client.gui.ForgeIngameGui
    */
    class ForgeIngameGui extends Internal.Gui {
        setupOverlayRenderState(arg0: boolean, arg1: boolean): void;
        setupOverlayRenderState(arg0: boolean, arg1: boolean, arg2: ResourceLocation_): void;
        renderFood(arg0: number, arg1: number, arg2: Internal.PoseStack_): void;
        renderHealth(arg0: number, arg1: number, arg2: Internal.PoseStack_): void;
        shouldDrawSurvivalElements(): boolean;
        static readonly "SCOREBOARD_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "ARMOR_LEVEL_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "SPYGLASS_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "SUBTITLES_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "BOSS_HEALTH_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "SLEEP_FADE_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        "right_height" : number;
        static readonly "HOTBAR_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "PLAYER_HEALTH_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "VIGNETTE_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "JUMP_BAR_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "RECORD_OVERLAY_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "TITLE_TEXT_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "AIR_LEVEL_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "ITEM_NAME_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "FROSTBITE_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "FPS_GRAPH_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "PORTAL_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static "rayTraceDistance" : 20.0;
        static readonly "PLAYER_LIST_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        "left_height" : number;
        static readonly "CROSSHAIR_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "POTION_ICONS_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "EXPERIENCE_BAR_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "CHAT_PANEL_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "MOUNT_HEALTH_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "HUD_TEXT_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "HELMET_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        static readonly "FOOD_LEVEL_ELEMENT" : ((arg0: Internal.ForgeIngameGui, arg1: Internal.PoseStack, arg2: number, arg3: number, arg4: number) => void);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForgeIngameGui_ = ForgeIngameGui;
    /**
    * @javaClass net.minecraftforge.network.NetworkDirection
    */
    class NetworkDirection extends Internal.Enum<Internal.NetworkDirection> {
        getReceptionSide(): Internal.LogicalSide;
        getEvent(arg0: Internal.ICustomPacket_<any>, arg1: Internal.Supplier_<Internal.NetworkEvent$Context_>): Internal.NetworkEvent;
        static directionFor<T>(arg0: Internal.Class_<T>): this;
        buildPacket<T>(arg0: Internal.Pair_<Internal.FriendlyByteBuf_, number>, arg1: ResourceLocation_): Internal.ICustomPacket<T>;
        static valueOf(arg0: string): this;
        static values(): Internal.NetworkDirection[];
        reply(): this;
        getOriginationSide(): Internal.LogicalSide;
        static readonly "LOGIN_TO_CLIENT" : Internal.NetworkDirection;
        static readonly "PLAY_TO_SERVER" : Internal.NetworkDirection;
        static readonly "LOGIN_TO_SERVER" : Internal.NetworkDirection;
        static readonly "PLAY_TO_CLIENT" : Internal.NetworkDirection;
        get receptionSide(): Internal.LogicalSide;
        get originationSide(): Internal.LogicalSide;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NetworkDirection_ = "play_to_server" | "login_to_client" | "play_to_client" | "login_to_server" | NetworkDirection;
    /**
    * @javaClass net.minecraft.world.level.entity.EntityAccess
    */
    interface EntityAccess {
    }
    type EntityAccess_ = EntityAccess;
    /**
    * @javaClass net.minecraftforge.fml.DeferredWorkQueue
    */
    class DeferredWorkQueue {
        static lookup(arg0: Internal.Optional_<Internal.ModLoadingStage_>): Internal.Optional<Internal.DeferredWorkQueue>;
        runTasks(): void;
        enqueueWork<T>(arg0: Internal.ModContainer_, arg1: Internal.Supplier_<T>): Internal.CompletableFuture<T>;
        enqueueWork(arg0: Internal.ModContainer_, arg1: Internal.Runnable_): Internal.CompletableFuture<void>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DeferredWorkQueue_ = DeferredWorkQueue;
    /**
    * Fired by different tag when the level:
    * - loads
    * - ticks
    * - unloads
    * @javaClass dev.latvian.mods.kubejs.level.SimpleLevelEventJS
    */
    class SimpleLevelEventJS extends Internal.LevelEventJS {
        getLevel(): Internal.LevelJS;
        get level(): Internal.LevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired by different tag when the level:
    * - loads
    * - ticks
    * - unloads
    */
    type SimpleLevelEventJS_ = SimpleLevelEventJS;
    /**
    * @javaClass net.minecraft.ChatFormatting
    */
    class ChatFormatting extends Internal.Enum<Internal.ChatFormatting> implements dev.latvian.mods.rhino.mod.util.color.Color {
        getRgbJS(): number;
        static valueOf(arg0: string): this;
        static values(): Internal.ChatFormatting[];
        getArgbJS(): number;
        toString(): string;
        static readonly "ITALIC" : Internal.ChatFormatting;
        static readonly "GOLD" : Internal.ChatFormatting;
        static readonly "GRAY" : Internal.ChatFormatting;
        static readonly "AQUA" : Internal.ChatFormatting;
        static readonly "WHITE" : Internal.ChatFormatting;
        static readonly "BLUE" : Internal.ChatFormatting;
        static readonly "OBFUSCATED" : Internal.ChatFormatting;
        static readonly "DARK_AQUA" : Internal.ChatFormatting;
        static readonly "RESET" : Internal.ChatFormatting;
        static readonly "DARK_BLUE" : Internal.ChatFormatting;
        static readonly "GREEN" : Internal.ChatFormatting;
        static readonly "UNDERLINE" : Internal.ChatFormatting;
        static readonly "RED" : Internal.ChatFormatting;
        static readonly "DARK_PURPLE" : Internal.ChatFormatting;
        static readonly "STRIKETHROUGH" : Internal.ChatFormatting;
        static readonly "DARK_RED" : Internal.ChatFormatting;
        static readonly "LIGHT_PURPLE" : Internal.ChatFormatting;
        static readonly "BLACK" : Internal.ChatFormatting;
        static readonly "BOLD" : Internal.ChatFormatting;
        static readonly "DARK_GREEN" : Internal.ChatFormatting;
        static readonly "YELLOW" : Internal.ChatFormatting;
        static readonly "DARK_GRAY" : Internal.ChatFormatting;
        get rgbJS(): number;
        get argbJS(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChatFormatting_ = "dark_red" | "green" | "underline" | "dark_green" | "black" | "yellow" | "bold" | "italic" | "dark_blue" | "dark_purple" | "gold" | "red" | "aqua" | "gray" | "light_purple" | "blue" | "white" | "dark_aqua" | "dark_gray" | "reset" | "strikethrough" | "obfuscated" | ChatFormatting;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyPressedEvent$Pre
    */
    class ScreenEvent$KeyboardKeyPressedEvent$Pre extends Internal.ScreenEvent$KeyboardKeyPressedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyPressedEvent$Pre_ = ScreenEvent$KeyboardKeyPressedEvent$Pre;
    /**
    * @javaClass net.minecraft.client.sounds.SoundEngine
    */
    class SoundEngine {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundEngine_ = SoundEngine;
    /**
    * @javaClass net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver
    */
    class ConfiguredWorldCarver <WC> extends Internal.Record {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfiguredWorldCarver_<WC> = Special.ConfiguredWorldCarver | ConfiguredWorldCarver<WC>;
    /**
    * @javaClass vazkii.botania.api.mana.ManaItemsEvent
    */
    class ManaItemsEvent extends net.minecraftforge.eventbus.api.Event {
        getItems(): Internal.List<Internal.ItemStack>;
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.Player;
        get listenerList(): Internal.ListenerList;
        get items(): Internal.List<Internal.ItemStack>;
        get player(): Internal.Player;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ManaItemsEvent_ = ManaItemsEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.VariantBlockStateGenerator$Model
    */
    class VariantBlockStateGenerator$Model {
        toJson(): Internal.JsonObject;
        uvlock(): this;
        x(_x: number): this;
        y(_y: number): this;
        model(s: string): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VariantBlockStateGenerator$Model_ = VariantBlockStateGenerator$Model;
    /**
    * @javaClass net.minecraft.world.level.storage.loot.LootPool
    */
    class LootPool {
        setRolls(arg0: Internal.NumberProvider_): void;
        freeze(): void;
        getName(): string;
        getBonusRolls(): Internal.NumberProvider;
        setBonusRolls(arg0: Internal.NumberProvider_): void;
        getRolls(): Internal.NumberProvider;
        isFrozen(): boolean;
        get name(): string;
        get frozen(): boolean;
        get rolls(): Internal.NumberProvider;
        get bonusRolls(): Internal.NumberProvider;
        set rolls(arg0: Internal.NumberProvider_);
        set bonusRolls(arg0: Internal.NumberProvider_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootPool_ = LootPool;
    /**
    * @javaClass java.util.Locale$FilteringMode
    */
    class Locale$FilteringMode extends Internal.Enum<Internal.Locale$FilteringMode> {
        static valueOf(arg0: string): this;
        static values(): Internal.Locale$FilteringMode[];
        static readonly "IGNORE_EXTENDED_RANGES" : Internal.Locale$FilteringMode;
        static readonly "MAP_EXTENDED_RANGES" : Internal.Locale$FilteringMode;
        static readonly "AUTOSELECT_FILTERING" : Internal.Locale$FilteringMode;
        static readonly "REJECT_EXTENDED_RANGES" : Internal.Locale$FilteringMode;
        static readonly "EXTENDED_FILTERING" : Internal.Locale$FilteringMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Locale$FilteringMode_ = "extended_filtering" | "reject_extended_ranges" | "map_extended_ranges" | "ignore_extended_ranges" | "autoselect_filtering" | Locale$FilteringMode;
    /**
    * @javaClass com.electronwill.nightconfig.core.io.ConfigParser
    */
    interface ConfigParser <C> {
        getFormat(): Internal.ConfigFormat<C>;
        parse(arg0: Internal.Path_, arg1: Internal.FileNotFoundAction_): C;
        parse(arg0: Internal.File_, arg1: Internal.Config_, arg2: Internal.ParsingMode_, arg3: Internal.FileNotFoundAction_, arg4: Internal.Charset_): void;
        parse(arg0: Internal.File_, arg1: Internal.Config_, arg2: Internal.ParsingMode_, arg3: Internal.FileNotFoundAction_): void;
        parse(arg0: Internal.File_, arg1: Internal.FileNotFoundAction_, arg2: Internal.Charset_): C;
        parse(arg0: Internal.URL_, arg1: Internal.Config_, arg2: Internal.ParsingMode_): void;
        parse(arg0: Internal.URL_): C;
        parse(arg0: Internal.Path_, arg1: Internal.Config_, arg2: Internal.ParsingMode_, arg3: Internal.FileNotFoundAction_, arg4: Internal.Charset_): void;
        parse(arg0: Internal.Path_, arg1: Internal.Config_, arg2: Internal.ParsingMode_, arg3: Internal.FileNotFoundAction_): void;
        parse(arg0: Internal.Path_, arg1: Internal.FileNotFoundAction_, arg2: Internal.Charset_): C;
        parse(arg0: string, arg1: Internal.Config_, arg2: Internal.ParsingMode_): void;
        parse(arg0: string): C;
        parse(arg0: Internal.Reader_, arg1: Internal.Config_, arg2: Internal.ParsingMode_): void;
        parse(arg0: Internal.Reader_): C;
        parse(arg0: Internal.File_, arg1: Internal.FileNotFoundAction_): C;
        parse(arg0: Internal.InputStream_, arg1: Internal.Config_, arg2: Internal.ParsingMode_, arg3: Internal.Charset_): void;
        parse(arg0: Internal.InputStream_, arg1: Internal.Config_, arg2: Internal.ParsingMode_): void;
        parse(arg0: Internal.InputStream_, arg1: Internal.Charset_): C;
        parse(arg0: Internal.InputStream_): C;
    }
    type ConfigParser_<C> = ConfigParser<C>;
    /**
    * @javaClass java.awt.PrintJob
    */
    abstract class PrintJob {
        end(): void;
        finalize(): void;
        getGraphics(): Internal.Graphics;
        getPageDimension(): Internal.Dimension;
        getPageResolution(): number;
        lastPageFirst(): boolean;
        get pageDimension(): Internal.Dimension;
        get graphics(): Internal.Graphics;
        get pageResolution(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PrintJob_ = PrintJob;
    /**
    * @javaClass mezz.jei.api.helpers.IGuiHelper
    */
    interface IGuiHelper {
        createDrawable(arg0: ResourceLocation_, arg1: number, arg2: number, arg3: number, arg4: number): Internal.IDrawableStatic;
        createCraftingGridHelper(arg0: number): Internal.ICraftingGridHelper;
        drawableBuilder(arg0: ResourceLocation_, arg1: number, arg2: number, arg3: number, arg4: number): Internal.IDrawableBuilder;
        createTickTimer(arg0: number, arg1: number, arg2: boolean): Internal.ITickTimer;
        createAnimatedDrawable(arg0: Internal.IDrawableStatic_, arg1: number, arg2: Internal.IDrawableAnimated$StartDirection_, arg3: boolean): Internal.IDrawableAnimated;
        createDrawableItemStack(arg0: Internal.ItemStack_): Internal.IDrawable;
        createBlankDrawable(arg0: number, arg1: number): Internal.IDrawableStatic;
        createDrawableIngredient<V>(arg0: Internal.IIngredientType_<V>, arg1: V): Internal.IDrawable;
        createDrawableIngredient<V>(arg0: V): Internal.IDrawable;
        getSlotDrawable(): Internal.IDrawableStatic;
    }
    type IGuiHelper_ = IGuiHelper;
    /**
    * @javaClass com.simibubi.create.foundation.advancement.CreateAdvancement
    */
    class CreateAdvancement {
        awardTo(arg0: Internal.Player_): void;
        isAlreadyAwardedTo(arg0: Internal.Player_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CreateAdvancement_ = CreateAdvancement;
    /**
    * @javaClass com.mojang.serialization.KeyCompressor
    */
    class KeyCompressor <T> {
        decompress(arg0: number): T;
        size(): number;
        compress(arg0: T): number;
        compress(arg0: string): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type KeyCompressor_<T> = KeyCompressor<T>;
    /**
    * @javaClass com.mojang.serialization.DynamicOps
    */
    interface DynamicOps <T> {
        updateGeneric(arg0: T, arg1: T, arg2: Internal.Function_<T, T>): T;
        listBuilder(): Internal.ListBuilder<T>;
        createIntList(arg0: Internal.IntStream_): T;
        createLong(arg0: number): T;
        createDouble(arg0: number): T;
        createLongList(arg0: Internal.LongStream_): T;
        createShort(arg0: number): T;
        mergeToList(arg0: T, arg1: Internal.List_<T>): Internal.DataResult<T>;
        mergeToList(arg0: T, arg1: T): Internal.DataResult<T>;
        update(arg0: T, arg1: string, arg2: Internal.Function_<T, T>): T;
        createByteList(arg0: Internal.ByteBuffer_): T;
        getByteBuffer(arg0: T): Internal.DataResult<Internal.ByteBuffer>;
        withDecoder<E>(arg0: Internal.Decoder_<E>): Internal.Function<T, Internal.DataResult<com.mojang.datafixers.util.Pair<E, T>>>;
        createBoolean(arg0: boolean): T;
        remove(arg0: T, arg1: string): T;
        getMapValues(arg0: T): Internal.DataResult<Internal.Stream<com.mojang.datafixers.util.Pair<T, T>>>;
        empty(): T;
        withParser<E>(arg0: Internal.Decoder_<E>): Internal.Function<T, Internal.DataResult<E>>;
        mergeToMap(arg0: T, arg1: T, arg2: T): Internal.DataResult<T>;
        mergeToMap(arg0: T, arg1: Internal.Map_<T, T>): Internal.DataResult<T>;
        mergeToMap(arg0: T, arg1: Internal.MapLike_<T>): Internal.DataResult<T>;
        convertList<U>(arg0: Internal.DynamicOps_<U>, arg1: T): U;
        emptyList(): T;
        getIntStream(arg0: T): Internal.DataResult<Internal.IntStream>;
        getList(arg0: T): Internal.DataResult<Internal.Consumer<Internal.Consumer<T>>>;
        getLongStream(arg0: T): Internal.DataResult<Internal.LongStream>;
        get(arg0: T, arg1: string): Internal.DataResult<T>;
        getMapEntries(arg0: T): Internal.DataResult<Internal.Consumer<Internal.BiConsumer<T, T>>>;
        emptyMap(): T;
        getBooleanValue(arg0: T): Internal.DataResult<boolean>;
        createNumeric(arg0: Internal.Number_): T;
        getStream(arg0: T): Internal.DataResult<Internal.Stream<T>>;
        convertMap<U>(arg0: Internal.DynamicOps_<U>, arg1: T): U;
        mergeToPrimitive(arg0: T, arg1: T): Internal.DataResult<T>;
        getStringValue(arg0: T): Internal.DataResult<string>;
        createList(arg0: Internal.Stream_<T>): T;
        withEncoder<E>(arg0: Internal.Encoder_<E>): Internal.Function<E, Internal.DataResult<T>>;
        set(arg0: T, arg1: string, arg2: T): T;
        getGeneric(arg0: T, arg1: T): Internal.DataResult<T>;
        createString(arg0: string): T;
        convertTo<U>(arg0: Internal.DynamicOps_<U>, arg1: T): U;
        createMap(arg0: Internal.Stream_<com.mojang.datafixers.util.Pair_<T, T>>): T;
        createMap(arg0: Internal.Map_<T, T>): T;
        mapBuilder(): Internal.RecordBuilder<T>;
        getMap(arg0: T): Internal.DataResult<Internal.MapLike<T>>;
        createFloat(arg0: number): T;
        createByte(arg0: number): T;
        createInt(arg0: number): T;
        compressMaps(): boolean;
        getNumberValue(arg0: T): Internal.DataResult<Internal.Number>;
        getNumberValue(arg0: T, arg1: Internal.Number_): Internal.Number;
    }
    type DynamicOps_<T> = DynamicOps<T>;
    /**
    * @javaClass java.awt.GraphicsConfigTemplate
    */
    abstract class GraphicsConfigTemplate implements Internal.Serializable {
        isGraphicsConfigSupported(arg0: Internal.GraphicsConfiguration_): boolean;
        getBestConfiguration(arg0: Internal.GraphicsConfiguration_[]): Internal.GraphicsConfiguration;
        static readonly "UNNECESSARY" : 3;
        static readonly "PREFERRED" : 2;
        static readonly "REQUIRED" : 1;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GraphicsConfigTemplate_ = GraphicsConfigTemplate;
    /**
    * @javaClass java.awt.event.InputMethodListener
    */
    interface InputMethodListener extends Internal.EventListener {
        inputMethodTextChanged(arg0: Internal.InputMethodEvent_): void;
        caretPositionChanged(arg0: Internal.InputMethodEvent_): void;
    }
    type InputMethodListener_ = InputMethodListener;
    /**
    * @javaClass dev.latvian.mods.kubejs.server.ServerJS
    */
    class ServerJS implements Internal.MessageSender, Internal.WithAttachedData {
        getAdvancement(id: ResourceLocation_): Internal.AdvancementJS;
        getPlayer(selector: Internal.PlayerSelector_): Internal.ServerPlayerJS;
        getName(): net.minecraft.network.chat.Component;
        updateWorldList(): void;
        getFakePlayer(selector: Internal.PlayerSelector_): Internal.ServerPlayerJS;
        release(): void;
        tell(message: net.minecraft.network.chat.Component_): void;
        getAllLevels(): Internal.List<Internal.ServerLevelJS>;
        getHardcore(): boolean;
        getMotd(): string;
        getOverworld(): Internal.ServerLevelJS;
        runCommandSilent(command: string): number;
        scheduleInTicks(ticks: number, event: Internal.IScheduledEventCallback_): Internal.ScheduledEvent;
        scheduleInTicks(ticks: number, data: any, event: Internal.IScheduledEventCallback_): Internal.ScheduledEvent;
        isRunning(): boolean;
        setMotd(text: net.minecraft.network.chat.Component_): void;
        runCommand(command: string): number;
        isSinglePlayer(): boolean;
        getPlayers(): Internal.EntityArrayList;
        getData(): Internal.AttachedData;
        setStatusMessage(message: net.minecraft.network.chat.Component_): void;
        sendDataToAll(channel: string, data: Internal.CompoundTag_): void;
        isDedicated(): boolean;
        schedule(timer: number, event: Internal.IScheduledEventCallback_): Internal.ScheduledEvent;
        schedule(timer: number, data: any, event: Internal.IScheduledEventCallback_): Internal.ScheduledEvent;
        getLevel(dimension: ResourceLocation_): Internal.ServerLevelJS;
        getMinecraftServer(): Internal.MinecraftServer;
        stop(): void;
        getDisplayName(): net.minecraft.network.chat.Component;
        getEntities(): Internal.EntityArrayList;
        getEntities(filter: string): Internal.EntityArrayList;
        toString(): string;
        static "instance" : Internal.ServerJS;
        readonly "persistentData" : Internal.CompoundTag;
        "overworld" : Internal.ServerLevelJS;
        get running(): boolean;
        get singlePlayer(): boolean;
        get motd(): string;
        get dedicated(): boolean;
        get allLevels(): Internal.List<Internal.ServerLevelJS>;
        get data(): Internal.AttachedData;
        get hardcore(): boolean;
        get entities(): Internal.EntityArrayList;
        get players(): Internal.EntityArrayList;
        get displayName(): net.minecraft.network.chat.Component;
        get name(): net.minecraft.network.chat.Component;
        get minecraftServer(): Internal.MinecraftServer;
        set statusMessage(message: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerJS_ = ServerJS;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.loot.LootCrate
    */
    class LootCrate {
        readData(nbt: Internal.CompoundTag_): void;
        getStringID(): string;
        readNetData(data: Internal.FriendlyByteBuf_): void;
        createStack(): Internal.ItemStack;
        writeData(nbt: Internal.CompoundTag_): void;
        writeNetData(data: Internal.FriendlyByteBuf_): void;
        getConfig(config: Internal.ConfigGroup_): void;
        static "LOOT_CRATES" : {};
        "stringID" : string;
        "itemName" : string;
        "drops" : Internal.EntityWeight;
        "color" : Internal.Color4I;
        "glow" : boolean;
        readonly "table" : Internal.RewardTable;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LootCrate_ = LootCrate;
    /**
    * @javaClass net.minecraft.stats.Stat
    */
    class Stat <T> extends Internal.ObjectiveCriteria {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Stat_<T> = Stat<T>;
    /**
    * @javaClass net.minecraft.world.level.block.state.BlockBehaviour
    */
    abstract class BlockBehaviour extends Internal.ForgeRegistryEntry<Internal.Block> implements Internal.BlockKJS {
        getBlockBuilderKJS(): Internal.BlockBuilder;
        setBlockBuilderKJS(b: Internal.BlockBuilder_): void;
        getTypeData(): Internal.CompoundTag;
        get blockBuilderKJS(): Internal.BlockBuilder;
        get typeData(): Internal.CompoundTag;
        set blockBuilderKJS(b: Internal.BlockBuilder_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockBehaviour_ = BlockBehaviour;
    /**
    * @javaClass java.util.stream.BaseStream
    */
    interface BaseStream <T, S> extends Internal.AutoCloseable {
        unordered(): S;
        onClose(arg0: Internal.Runnable_): S;
        iterator(): Internal.Iterator<T>;
        parallel(): S;
        spliterator(): Internal.Spliterator<T>;
        sequential(): S;
        isParallel(): boolean;
        close(): void;
    }
    type BaseStream_<T, S> = BaseStream<T, S>;
    /**
    * @javaClass java.awt.event.ActionListener
    */
    interface ActionListener extends Internal.EventListener {
        actionPerformed(arg0: Internal.ActionEvent_): void;
    }
    type ActionListener_ = ((arg0: Internal.ActionEvent) => void) | ActionListener;
    /**
    * Fired when the player:
    * - opens the inventory
    * - closes the inventory
    * @javaClass dev.latvian.mods.kubejs.player.InventoryEventJS
    */
    class InventoryEventJS extends Internal.PlayerEventJS {
        getInventoryContainer(): Internal.AbstractContainerMenu;
        getEntity(): Internal.EntityJS;
        get inventoryContainer(): Internal.AbstractContainerMenu;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the player:
    * - opens the inventory
    * - closes the inventory
    */
    type InventoryEventJS_ = InventoryEventJS;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.RewardType$Provider
    */
    interface RewardType$Provider {
        create(arg0: Internal.Quest_): Internal.Reward;
    }
    type RewardType$Provider_ = ((arg0: Internal.Quest) => Internal.Reward) | RewardType$Provider;
    /**
    * @javaClass io.netty.util.ByteProcessor
    */
    interface ByteProcessor {
        process(arg0: number): boolean;
    }
    type ByteProcessor_ = ((arg0: number) => boolean) | ByteProcessor;
    /**
    * @javaClass net.minecraft.world.level.BlockAndTintGetter
    */
    interface BlockAndTintGetter extends Internal.BlockGetter {
    }
    type BlockAndTintGetter_ = BlockAndTintGetter;
    /**
    * @javaClass io.netty.channel.ChannelProgressivePromise
    */
    interface ChannelProgressivePromise extends Internal.ProgressivePromise<void>, Internal.ChannelProgressiveFuture, Internal.ChannelPromise {
        unvoid(): this;
        setFailure(arg0: Internal.Throwable_): this;
        setSuccess(): this;
        setSuccess(arg0: void): this;
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        syncUninterruptibly(): this;
        setProgress(arg0: number, arg1: number): this;
        await(): this;
        awaitUninterruptibly(): this;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>[]): this;
        sync(): this;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<void>>): this;
    }
    type ChannelProgressivePromise_ = ChannelProgressivePromise;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$MouseClickedEvent
    */
    abstract class ScreenEvent$MouseClickedEvent extends Internal.ScreenEvent$MouseInputEvent {
        getButton(): number;
        getListenerList(): Internal.ListenerList;
        get button(): number;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$MouseClickedEvent_ = ScreenEvent$MouseClickedEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.OrderedCompoundTag
    */
    class OrderedCompoundTag extends Internal.CompoundTag {
        readonly "tagMap" : Internal.Map<string, (() => string)>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type OrderedCompoundTag_ = OrderedCompoundTag;
    /**
    * @javaClass java.net.URLStreamHandler
    */
    abstract class URLStreamHandler {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type URLStreamHandler_ = URLStreamHandler;
    /**
    * @javaClass java.util.Spliterator$OfLong
    */
    interface Spliterator$OfLong extends Internal.Spliterator$OfPrimitive<number, Internal.LongConsumer, Internal.Spliterator$OfLong> {
        trySplit(): this;
        tryAdvance(arg0: Internal.Consumer_<number>): boolean;
        tryAdvance(arg0: Internal.LongConsumer_): boolean;
        forEachRemaining(arg0: Internal.LongConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
    }
    type Spliterator$OfLong_ = Spliterator$OfLong;
    /**
    * @javaClass java.util.stream.Collector
    */
    interface Collector <T, A, R> {
        characteristics(): Internal.Set<Internal.Collector$Characteristics>;
        supplier(): Internal.Supplier<A>;
        of<T, A, R>(arg0: Internal.Supplier_<A>, arg1: Internal.BiConsumer_<A, T>, arg2: Internal.BinaryOperator_<A>, arg3: Internal.Function_<A, R>, ... arg4: Internal.Collector$Characteristics_[]): Internal.Collector<T, A, R>;
        of<T, R>(arg0: Internal.Supplier_<R>, arg1: Internal.BiConsumer_<R, T>, arg2: Internal.BinaryOperator_<R>, ... arg3: Internal.Collector$Characteristics_[]): Internal.Collector<T, R, R>;
        finisher(): Internal.Function<A, R>;
        accumulator(): Internal.BiConsumer<A, T>;
        combiner(): Internal.BinaryOperator<A>;
    }
    type Collector_<T, A, R> = Collector<T, A, R>;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModLanguageProvider
    */
    interface IModLanguageProvider {
        consumeLifecycleEvent<R>(arg0: Internal.Supplier_<R>): void;
        name(): string;
        getFileVisitor(): Internal.Consumer<Internal.ModFileScanData>;
    }
    type IModLanguageProvider_ = IModLanguageProvider;
    /**
    * @javaClass net.minecraft.world.level.ChunkPos
    */
    class ChunkPos {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkPos_ = ChunkPos;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.RandomTickCallbackJS
    */
    class RandomTickCallbackJS {
        getServer(): Internal.ServerJS;
        getLevel(): Internal.LevelJS;
        "random" : Internal.Random;
        "block" : Internal.BlockContainerJS;
        get server(): Internal.ServerJS;
        get level(): Internal.LevelJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RandomTickCallbackJS_ = RandomTickCallbackJS;
    /**
    * @javaClass com.prunoideae.recipe.BrewRecipeJS
    */
    class BrewRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BrewRecipeJS_ = BrewRecipeJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.Long2BooleanFunction
    */
    interface Long2BooleanFunction extends it.unimi.dsi.fastutil.Function<number, boolean>, Internal.LongPredicate {
        getOrDefault(arg0: any, arg1: boolean): boolean;
        getOrDefault(arg0: number, arg1: boolean): boolean;
        andThenShort(arg0: Internal.Boolean2ShortFunction_): Internal.Long2ShortFunction;
        composeByte(arg0: Internal.Byte2LongFunction_): Internal.Byte2BooleanFunction;
        andThenInt(arg0: Internal.Boolean2IntFunction_): Internal.Long2IntFunction;
        composeReference<T>(arg0: Internal.Reference2LongFunction_<T>): Internal.Reference2BooleanFunction<T>;
        andThen<T>(arg0: Internal.Function_<boolean, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: boolean): boolean;
        remove(arg0: number): boolean;
        remove(arg0: any): boolean;
        defaultReturnValue(arg0: boolean): void;
        defaultReturnValue(): boolean;
        andThenDouble(arg0: Internal.Boolean2DoubleFunction_): Internal.Long2DoubleFunction;
        andThenObject<T>(arg0: Internal.Boolean2ObjectFunction_<T>): Internal.Long2ObjectFunction<T>;
        get(arg0: any): boolean;
        get(arg0: number): boolean;
        andThenLong(arg0: Internal.Boolean2LongFunction_): Internal.Long2LongFunction;
        composeLong(arg0: Internal.Long2LongFunction_): this;
        andThenByte(arg0: Internal.Boolean2ByteFunction_): Internal.Long2ByteFunction;
        andThenFloat(arg0: Internal.Boolean2FloatFunction_): Internal.Long2FloatFunction;
        test(arg0: number): boolean;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2LongFunction_): Internal.Int2BooleanFunction;
        composeFloat(arg0: Internal.Float2LongFunction_): Internal.Float2BooleanFunction;
        andThenChar(arg0: Internal.Boolean2CharFunction_): Internal.Long2CharFunction;
        composeObject<T>(arg0: Internal.Object2LongFunction_<T>): Internal.Object2BooleanFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, boolean>;
        composeShort(arg0: Internal.Short2LongFunction_): Internal.Short2BooleanFunction;
        andThenReference<T>(arg0: Internal.Boolean2ReferenceFunction_<T>): Internal.Long2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2LongFunction_): Internal.Char2BooleanFunction;
        composeDouble(arg0: Internal.Double2LongFunction_): Internal.Double2BooleanFunction;
    }
    type Long2BooleanFunction_ = ((arg0: number) => boolean) | Long2BooleanFunction;
    /**
    * @javaClass dev.ftb.mods.ftbteams.data.TeamManager
    */
    class TeamManager {
        getInternalPlayerTeam(uuid: Internal.UUID_): Internal.PlayerTeam;
        getName(id: Internal.UUID_): net.minecraft.network.chat.Component;
        getKnownPlayers(): Internal.Map<Internal.UUID, Internal.PlayerTeam>;
        save(): void;
        getTeamMap(): Internal.Map<Internal.UUID, Internal.Team>;
        getId(): Internal.UUID;
        serializeNBT(): Internal.SNBTCompoundTag;
        load(): void;
        getServer(): Internal.MinecraftServer;
        getTeamNameMap(): Internal.Map<string, Internal.Team>;
        createServerTeam(player: Internal.ServerPlayer_, name: string): Internal.ServerTeam;
        syncAll(): void;
        arePlayersInSameTeam(player1: Internal.ServerPlayer_, player2: Internal.ServerPlayer_): boolean;
        getExtraData(): Internal.CompoundTag;
        createServer(source: Internal.CommandSourceStack_, name: string): Internal.Pair<number, Internal.ServerTeam>;
        getPlayerTeamID(id: Internal.UUID_): Internal.UUID;
        sync(player: Internal.ServerPlayer_): void;
        sync(player: Internal.ServerPlayer_, self: Internal.Team_): void;
        createClientTeamManager(): Internal.ClientTeamManager;
        getTeams(): Internal.Collection<Internal.Team>;
        createPartyTeam(player: Internal.ServerPlayer_, name: string): Internal.PartyTeam;
        createParty(player: Internal.ServerPlayer_, name: string): Internal.Pair<number, Internal.PartyTeam>;
        getTeamByID(uuid: Internal.UUID_): Internal.Team;
        getPlayerTeam(player: Internal.ServerPlayer_): Internal.Team;
        getPlayerTeam(uuid: Internal.UUID_): Internal.Team;
        saveNow(): void;
        playerLoggedOut(player: Internal.ServerPlayer_): void;
        playerLoggedIn(player: Internal.ServerPlayer_, id: Internal.UUID_, name: string): void;
        readonly "server" : Internal.MinecraftServer;
        static readonly "FOLDER_NAME" : Internal.LevelResource;
        static "INSTANCE" : Internal.TeamManager;
        get teamNameMap(): Internal.Map<string, Internal.Team>;
        get knownPlayers(): Internal.Map<Internal.UUID, Internal.PlayerTeam>;
        get teams(): Internal.Collection<Internal.Team>;
        get extraData(): Internal.CompoundTag;
        get teamMap(): Internal.Map<Internal.UUID, Internal.Team>;
        get id(): Internal.UUID;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TeamManager_ = TeamManager;
    /**
    * @javaClass java.time.ZonedDateTime
    */
    class ZonedDateTime implements Internal.Temporal, Internal.ChronoZonedDateTime<Internal.LocalDate>, Internal.Serializable {
        plusHours(arg0: number): this;
        toLocalTime(): Internal.LocalTime;
        static ofLocal(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneId_, arg2: Internal.ZoneOffset_): this;
        getDayOfWeek(): Internal.DayOfWeek;
        static ofStrict(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_, arg2: Internal.ZoneId_): this;
        plusSeconds(arg0: number): this;
        getMinute(): number;
        static from(arg0: Internal.TemporalAccessor_): this;
        getMonth(): Internal.Month;
        plusNanos(arg0: number): this;
        withHour(arg0: number): this;
        plusMonths(arg0: number): this;
        plusYears(arg0: number): this;
        truncatedTo(arg0: Internal.TemporalUnit_): this;
        query<R>(arg0: Internal.TemporalQuery_<R>): R;
        minusNanos(arg0: number): this;
        getNano(): number;
        format(arg0: Internal.DateTimeFormatter_): string;
        getZone(): Internal.ZoneId;
        isSupported(arg0: Internal.TemporalUnit_): boolean;
        isSupported(arg0: Internal.TemporalField_): boolean;
        plus(arg0: Internal.TemporalAmount_): this;
        plus(arg0: number, arg1: Internal.TemporalUnit_): this;
        getYear(): number;
        toLocalDateTime(): Internal.LocalDateTime;
        withDayOfMonth(arg0: number): this;
        withMonth(arg0: number): this;
        toOffsetDateTime(): Internal.OffsetDateTime;
        static ofInstant(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_, arg2: Internal.ZoneId_): this;
        static ofInstant(arg0: Internal.Instant_, arg1: Internal.ZoneId_): this;
        minus(arg0: number, arg1: Internal.TemporalUnit_): this;
        minus(arg0: Internal.TemporalAmount_): this;
        withFixedOffsetZone(): this;
        minusHours(arg0: number): this;
        getOffset(): Internal.ZoneOffset;
        range(arg0: Internal.TemporalField_): Internal.ValueRange;
        withYear(arg0: number): this;
        plusMinutes(arg0: number): this;
        minusMinutes(arg0: number): this;
        plusDays(arg0: number): this;
        withLaterOffsetAtOverlap(): this;
        hashCode(): number;
        static now(): this;
        static now(arg0: Internal.Clock_): this;
        static now(arg0: Internal.ZoneId_): this;
        static of(arg0: Internal.LocalDate_, arg1: Internal.LocalTime_, arg2: Internal.ZoneId_): this;
        static of(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneId_): this;
        static of(arg0: number, arg1: number, arg2: number, arg3: number, arg4: number, arg5: number, arg6: number, arg7: Internal.ZoneId_): this;
        get(arg0: Internal.TemporalField_): number;
        withZoneSameLocal(arg0: Internal.ZoneId_): this;
        withEarlierOffsetAtOverlap(): this;
        getDayOfYear(): number;
        plusWeeks(arg0: number): this;
        getHour(): number;
        withMinute(arg0: number): this;
        getMonthValue(): number;
        minusYears(arg0: number): this;
        withZoneSameInstant(arg0: Internal.ZoneId_): this;
        minusWeeks(arg0: number): this;
        withDayOfYear(arg0: number): this;
        static parse(arg0: Internal.CharSequence_, arg1: Internal.DateTimeFormatter_): this;
        static parse(arg0: Internal.CharSequence_): this;
        minusDays(arg0: number): this;
        withNano(arg0: number): this;
        getLong(arg0: Internal.TemporalField_): number;
        minusMonths(arg0: number): this;
        with(arg0: Internal.TemporalField_, arg1: number): this;
        with(arg0: Internal.TemporalAdjuster_): this;
        toLocalDate(): Internal.LocalDate;
        equals(arg0: any): boolean;
        getSecond(): number;
        until(arg0: Internal.Temporal_, arg1: Internal.TemporalUnit_): number;
        toString(): string;
        getDayOfMonth(): number;
        minusSeconds(arg0: number): this;
        withSecond(arg0: number): this;
        get dayOfWeek(): Internal.DayOfWeek;
        get month(): Internal.Month;
        get offset(): Internal.ZoneOffset;
        get hour(): number;
        get zone(): Internal.ZoneId;
        get year(): number;
        get dayOfYear(): number;
        get dayOfMonth(): number;
        get monthValue(): number;
        get nano(): number;
        get minute(): number;
        get second(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZonedDateTime_ = ZonedDateTime;
    /**
    * @javaClass net.minecraft.client.resources.model.BakedModel
    */
    interface BakedModel extends Internal.IForgeBakedModel {
    }
    type BakedModel_ = BakedModel;
    /**
    * @javaClass dev.latvian.mods.itemfilters.api.FilterInfo
    */
    interface FilterInfo {
        pop(): void;
        add(arg0: net.minecraft.network.chat.Component_): void;
        push(): void;
    }
    type FilterInfo_ = FilterInfo;
    /**
    * @javaClass net.minecraftforge.client.extensions.IForgeMinecraft
    */
    interface IForgeMinecraft {
        popGuiLayer(): void;
        pushGuiLayer(arg0: Internal.Screen_): void;
    }
    type IForgeMinecraft_ = IForgeMinecraft;
    /**
    * @javaClass net.minecraftforge.event.server.ServerStartedEvent
    */
    class ServerStartedEvent extends Internal.ServerLifecycleEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerStartedEvent_ = ServerStartedEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.floats.FloatConsumer
    */
    interface FloatConsumer extends Internal.Consumer<number>, Internal.DoubleConsumer {
        andThen(arg0: Internal.Consumer_<number>): Internal.Consumer<number>;
        andThen(arg0: Internal.DoubleConsumer_): this;
        andThen(arg0: Internal.FloatConsumer_): this;
        accept(arg0: number): void;
    }
    type FloatConsumer_ = ((arg0: number) => void) | FloatConsumer;
    /**
    * @javaClass net.minecraft.world.entity.ai.goal.Goal
    */
    abstract class Goal {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Goal_ = Goal;
    /**
    * @javaClass java.util.concurrent.ExecutorService
    */
    interface ExecutorService extends Internal.Executor {
        submit(arg0: Internal.Runnable_): Internal.Future<any>;
        submit<T>(arg0: Internal.Runnable_, arg1: T): Internal.Future<T>;
        submit<T>(arg0: Internal.Callable_<T>): Internal.Future<T>;
        isTerminated(): boolean;
        invokeAll<T>(arg0: Internal.Collection_<Internal.Callable_<T>>): Internal.List<Internal.Future<T>>;
        invokeAll<T>(arg0: Internal.Collection_<Internal.Callable_<T>>, arg1: number, arg2: Internal.TimeUnit_): Internal.List<Internal.Future<T>>;
        awaitTermination(arg0: number, arg1: Internal.TimeUnit_): boolean;
        shutdownNow(): Internal.List<Internal.Runnable>;
        invokeAny<T>(arg0: Internal.Collection_<Internal.Callable_<T>>, arg1: number, arg2: Internal.TimeUnit_): T;
        invokeAny<T>(arg0: Internal.Collection_<Internal.Callable_<T>>): T;
        shutdown(): void;
        isShutdown(): boolean;
    }
    type ExecutorService_ = ExecutorService;
    /**
    * @javaClass java.awt.dnd.DropTargetEvent
    */
    class DropTargetEvent extends Internal.EventObject {
        getDropTargetContext(): Internal.DropTargetContext;
        get dropTargetContext(): Internal.DropTargetContext;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DropTargetEvent_ = DropTargetEvent;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntIterator
    */
    interface IntIterator extends Internal.PrimitiveIterator$OfInt {
        next(): number;
        skip(arg0: number): number;
        nextInt(): number;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        forEachRemaining(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): void;
    }
    type IntIterator_ = (() => number) | IntIterator;
    /**
    * Fired when player right clicks on an Block that is not fluid.
    *
    * Note that both main hand and off hand will be called if not cancelled.
    *
    * On cancellation, Result.SUCCESS is returned, thus making player swing his arm.
    * @javaClass dev.latvian.mods.kubejs.block.BlockRightClickEventJS
    */
    class BlockRightClickEventJS extends Internal.PlayerEventJS {
        getBlock(): Internal.BlockContainerJS;
        getHand(): Hand;
        getItem(): Internal.ItemStackJS;
        getFacing(): Internal.Direction;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get facing(): Internal.Direction;
        get block(): Internal.BlockContainerJS;
        get entity(): Internal.EntityJS;
        get hand(): Hand;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when player right clicks on an Block that is not fluid.
    *
    * Note that both main hand and off hand will be called if not cancelled.
    *
    * On cancellation, Result.SUCCESS is returned, thus making player swing his arm.
    */
    type BlockRightClickEventJS_ = BlockRightClickEventJS;
    /**
    * @javaClass com.google.common.collect.Multimap
    */
    interface Multimap <K, V> {
        containsEntry(arg0: any, arg1: any): boolean;
        asMap(): Internal.Map<K, Internal.Collection<V>>;
        keys(): Internal.Multiset<K>;
        containsKey(arg0: any): boolean;
        forEach(arg0: Internal.BiConsumer_<K, V>): void;
        values(): Internal.Collection<V>;
        isEmpty(): boolean;
        clear(): void;
        replaceValues(arg0: K, arg1: Internal.Iterable_<V>): Internal.Collection<V>;
        containsValue(arg0: any): boolean;
        put(arg0: K, arg1: V): boolean;
        remove(arg0: any, arg1: any): boolean;
        removeAll(arg0: any): Internal.Collection<V>;
        entries(): Internal.Collection<Internal.Map$Entry<K, V>>;
        size(): number;
        hashCode(): number;
        putAll(arg0: Internal.Multimap_<K, V>): boolean;
        putAll(arg0: K, arg1: Internal.Iterable_<V>): boolean;
        equals(arg0: any): boolean;
        get(arg0: K): Internal.Collection<V>;
        keySet(): Internal.Set<K>;
    }
    type Multimap_<K, V> = Multimap<K, V>;
    /**
    * @javaClass net.minecraftforge.fluids.FluidStack
    */
    class FluidStack {
        getRawFluid(): Internal.Fluid;
        getOrCreateChildTag(arg0: string): Internal.CompoundTag;
        getChildTag(arg0: string): Internal.CompoundTag;
        static readFromPacket(arg0: Internal.FriendlyByteBuf_): this;
        containsFluid(arg0: Internal.FluidStack_): boolean;
        hashCode(): number;
        setTag(arg0: Internal.CompoundTag_): void;
        copy(): this;
        setAmount(arg0: number): void;
        writeToNBT(arg0: Internal.CompoundTag_): Internal.CompoundTag;
        isFluidEqual(arg0: Internal.FluidStack_): boolean;
        isFluidEqual(arg0: Internal.ItemStack_): boolean;
        getAmount(): number;
        removeChildTag(arg0: string): void;
        isFluidStackIdentical(arg0: Internal.FluidStack_): boolean;
        grow(arg0: number): void;
        hasTag(): boolean;
        static loadFluidStackFromNBT(arg0: Internal.CompoundTag_): this;
        shrink(arg0: number): void;
        getTranslationKey(): string;
        isEmpty(): boolean;
        getTag(): Internal.CompoundTag;
        getOrCreateTag(): Internal.CompoundTag;
        writeToPacket(arg0: Internal.FriendlyByteBuf_): void;
        getDisplayName(): net.minecraft.network.chat.Component;
        equals(arg0: any): boolean;
        getFluid(): Internal.Fluid;
        static areFluidStackTagsEqual(arg0: Internal.FluidStack_, arg1: Internal.FluidStack_): boolean;
        static readonly "CODEC" : Internal.Codec<Internal.FluidStack>;
        static readonly "EMPTY" : Internal.FluidStack;
        get orCreateTag(): Internal.CompoundTag;
        get rawFluid(): Internal.Fluid;
        get amount(): number;
        get translationKey(): string;
        get displayName(): net.minecraft.network.chat.Component;
        get fluid(): Internal.Fluid;
        get tag(): Internal.CompoundTag;
        get empty(): boolean;
        set amount(arg0: number);
        set tag(arg0: Internal.CompoundTag_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidStack_ = FluidStack;
    /**
    * @javaClass net.minecraft.client.renderer.RenderStateShard
    */
    abstract class RenderStateShard {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderStateShard_ = RenderStateShard;
    /**
    * @javaClass java.lang.invoke.VarHandle$AccessMode
    */
    class VarHandle$AccessMode extends Internal.Enum<Internal.VarHandle$AccessMode> {
        static valueOf(arg0: string): this;
        static valueFromMethodName(arg0: string): this;
        static values(): Internal.VarHandle$AccessMode[];
        methodName(): string;
        static readonly "WEAK_COMPARE_AND_SET" : Internal.VarHandle$AccessMode;
        static readonly "GET_VOLATILE" : Internal.VarHandle$AccessMode;
        static readonly "SET" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_OR_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_ADD" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_SET" : Internal.VarHandle$AccessMode;
        static readonly "GET_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_ADD_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_AND_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_XOR_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_ADD_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_OR_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "SET_OPAQUE" : Internal.VarHandle$AccessMode;
        static readonly "WEAK_COMPARE_AND_SET_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "COMPARE_AND_SET" : Internal.VarHandle$AccessMode;
        static readonly "COMPARE_AND_EXCHANGE_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_AND" : Internal.VarHandle$AccessMode;
        static readonly "SET_VOLATILE" : Internal.VarHandle$AccessMode;
        static readonly "COMPARE_AND_EXCHANGE_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_XOR" : Internal.VarHandle$AccessMode;
        static readonly "WEAK_COMPARE_AND_SET_PLAIN" : Internal.VarHandle$AccessMode;
        static readonly "SET_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "COMPARE_AND_EXCHANGE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_OR" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_AND_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "WEAK_COMPARE_AND_SET_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_SET_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "GET" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_SET_ACQUIRE" : Internal.VarHandle$AccessMode;
        static readonly "GET_AND_BITWISE_XOR_RELEASE" : Internal.VarHandle$AccessMode;
        static readonly "GET_OPAQUE" : Internal.VarHandle$AccessMode;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VarHandle$AccessMode_ = "weak_compare_and_set_acquire" | "get_acquire" | "get_and_bitwise_xor_release" | "get_and_set_acquire" | "get_and_set_release" | "get_and_bitwise_or_release" | "compare_and_exchange_release" | "get" | "get_and_add_acquire" | "get_and_bitwise_and_acquire" | "get_and_bitwise_or" | "set" | "set_release" | "compare_and_exchange_acquire" | "compare_and_exchange" | "set_opaque" | "get_and_bitwise_or_acquire" | "get_opaque" | "compare_and_set" | "get_volatile" | "set_volatile" | "weak_compare_and_set" | "get_and_bitwise_xor_acquire" | "get_and_bitwise_and_release" | "get_and_bitwise_and" | "weak_compare_and_set_release" | "get_and_add_release" | "weak_compare_and_set_plain" | "get_and_set" | "get_and_add" | "get_and_bitwise_xor" | VarHandle$AccessMode;
    /**
    * @javaClass java.lang.module.ModuleDescriptor$Modifier
    */
    class ModuleDescriptor$Modifier extends Internal.Enum<Internal.ModuleDescriptor$Modifier> {
        static valueOf(arg0: string): this;
        static values(): Internal.ModuleDescriptor$Modifier[];
        static readonly "AUTOMATIC" : Internal.ModuleDescriptor$Modifier;
        static readonly "SYNTHETIC" : Internal.ModuleDescriptor$Modifier;
        static readonly "MANDATED" : Internal.ModuleDescriptor$Modifier;
        static readonly "OPEN" : Internal.ModuleDescriptor$Modifier;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModuleDescriptor$Modifier_ = "synthetic" | "automatic" | "mandated" | "open" | ModuleDescriptor$Modifier;
    /**
    * @javaClass java.awt.datatransfer.Transferable
    */
    interface Transferable {
        isDataFlavorSupported(arg0: Internal.DataFlavor_): boolean;
        getTransferData(arg0: Internal.DataFlavor_): any;
        getTransferDataFlavors(): Internal.DataFlavor[];
    }
    type Transferable_ = Transferable;
    /**
    * @javaClass cpw.mods.jarhandling.SecureJar
    */
    interface SecureJar {
        getProviders(): Internal.List<Internal.SecureJar$Provider>;
        getManifest(): Internal.Manifest;
        findFile(arg0: string): Internal.Optional<Internal.URI>;
        getTrustedManifestEntries(arg0: string): Internal.Attributes;
        getPrimaryPath(): Internal.Path;
        verifyPath(arg0: Internal.Path_): Internal.SecureJar$Status;
        getManifestSigners(): any[];
        getFileStatus(arg0: string): Internal.SecureJar$Status;
        getPath(arg0: string, ... arg1: string[]): Internal.Path;
        getPackages(): Internal.Set<string>;
        name(): string;
        from(arg0: Internal.Function_<Internal.SecureJar_, Internal.JarMetadata_>, arg1: Internal.BiPredicate_<string, string>, ... arg2: Internal.Path_[]): this;
        from(arg0: Internal.BiPredicate_<string, string>, ... arg1: Internal.Path_[]): this;
        from(... arg0: Internal.Path_[]): this;
        from(arg0: Internal.Supplier_<Internal.Manifest_>, arg1: Internal.Function_<Internal.SecureJar_, Internal.JarMetadata_>, ... arg2: Internal.Path_[]): this;
        from(arg0: Internal.Supplier_<Internal.Manifest_>, arg1: Internal.Function_<Internal.SecureJar_, Internal.JarMetadata_>, arg2: Internal.BiPredicate_<string, string>, ... arg3: Internal.Path_[]): this;
        from(arg0: Internal.Function_<Internal.SecureJar_, Internal.JarMetadata_>, ... arg1: Internal.Path_[]): this;
        getRootPath(): Internal.Path;
        hasSecurityData(): boolean;
    }
    type SecureJar_ = SecureJar;
    /**
    * @javaClass net.minecraft.world.level.CollisionGetter
    */
    interface CollisionGetter extends Internal.BlockGetter {
    }
    type CollisionGetter_ = CollisionGetter;
    /**
    * @javaClass java.net.Proxy$Type
    */
    class Proxy$Type extends Internal.Enum<Internal.Proxy$Type> {
        static valueOf(arg0: string): this;
        static values(): Internal.Proxy$Type[];
        static readonly "SOCKS" : Internal.Proxy$Type;
        static readonly "HTTP" : Internal.Proxy$Type;
        static readonly "DIRECT" : Internal.Proxy$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Proxy$Type_ = "socks" | "direct" | "http" | Proxy$Type;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeCommandSourceStack
    */
    interface IForgeCommandSourceStack {
        getAdvancement(arg0: ResourceLocation_): Internal.Advancement;
        getRecipeManager(): Internal.RecipeManager;
        getUnsidedLevel(): Internal.Level;
        getScoreboard(): Internal.Scoreboard;
    }
    type IForgeCommandSourceStack_ = IForgeCommandSourceStack;
    /**
    * @javaClass java.time.temporal.TemporalUnit
    */
    interface TemporalUnit {
        isDurationEstimated(): boolean;
        getDuration(): Internal.Duration;
        isTimeBased(): boolean;
        addTo<R>(arg0: R, arg1: number): R;
        toString(): string;
        isDateBased(): boolean;
        between(arg0: Internal.Temporal_, arg1: Internal.Temporal_): number;
        isSupportedBy(arg0: Internal.Temporal_): boolean;
    }
    type TemporalUnit_ = TemporalUnit;
    /**
    * @javaClass javax.accessibility.AccessibleAction
    */
    interface AccessibleAction {
        getAccessibleActionDescription(arg0: number): string;
        doAccessibleAction(arg0: number): boolean;
        getAccessibleActionCount(): number;
    }
    type AccessibleAction_ = AccessibleAction;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.HoeItemBuilder
    */
    class HoeItemBuilder extends Internal.HandheldItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type HoeItemBuilder_ = HoeItemBuilder;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeItemStack
    */
    interface IForgeItemStack extends Internal.ICapabilitySerializable<Internal.CompoundTag> {
        canElytraFly(arg0: Internal.LivingEntity_): boolean;
        canEquip(arg0: EquipmentSlot_, arg1: Internal.Entity_): boolean;
        canPerformAction(arg0: Internal.ToolAction_): boolean;
        onBlockStartBreak(arg0: BlockPos_, arg1: Internal.Player_): boolean;
        onHorseArmorTick(arg0: Internal.Level_, arg1: Internal.Mob_): void;
        shouldCauseBlockBreakReset(arg0: Internal.ItemStack_): boolean;
        getItemEnchantability(): number;
        getEntityLifespan(arg0: Internal.Level_): number;
        serializeNBT(): Internal.CompoundTag;
        getXpRepairRatio(): number;
        getHighlightTip(arg0: net.minecraft.network.chat.Component_): net.minecraft.network.chat.Component;
        readShareTag(arg0: Internal.CompoundTag_): void;
        canWalkOnPowderedSnow(arg0: Internal.LivingEntity_): boolean;
        onEntityItemUpdate(arg0: Internal.ItemEntity_): boolean;
        onArmorTick(arg0: Internal.Level_, arg1: Internal.Player_): void;
        isBookEnchantable(arg0: Internal.ItemStack_): boolean;
        hasContainerItem(): boolean;
        getFoodProperties(arg0: Internal.LivingEntity_): Internal.FoodProperties;
        canDisableShield(arg0: Internal.ItemStack_, arg1: Internal.LivingEntity_, arg2: Internal.LivingEntity_): boolean;
        doesSneakBypassUse(arg0: Internal.LevelReader_, arg1: BlockPos_, arg2: Internal.Player_): boolean;
        onItemUseFirst(arg0: Internal.UseOnContext_): Internal.InteractionResult;
        getContainerItem(): Internal.ItemStack;
        onUsingTick(arg0: Internal.LivingEntity_, arg1: number): void;
        isPiglinCurrency(): boolean;
        getSweepHitBox(arg0: Internal.Player_, arg1: Internal.Entity_): Internal.AABB;
        onDestroyed(arg0: Internal.ItemEntity_, arg1: Internal.DamageSource_): void;
        isRepairable(): boolean;
        getEquipmentSlot(): EquipmentSlot;
        getShareTag(): Internal.CompoundTag;
        getBurnTime(arg0: Internal.RecipeType_<any>): number;
        onDroppedByPlayer(arg0: Internal.Player_): boolean;
        onEntitySwing(arg0: Internal.LivingEntity_): boolean;
        equals(arg0: Internal.ItemStack_, arg1: boolean): boolean;
        elytraFlightTick(arg0: Internal.LivingEntity_, arg1: number): boolean;
        makesPiglinsNeutral(arg0: Internal.LivingEntity_): boolean;
        isEnderMask(arg0: Internal.Player_, arg1: Internal.EnderMan_): boolean;
        areShareTagsEqual(arg0: Internal.ItemStack_): boolean;
        canApplyAtEnchantingTable(arg0: Internal.Enchantment_): boolean;
    }
    type IForgeItemStack_ = IForgeItemStack;
    /**
    * @javaClass com.jozufozu.flywheel.backend.model.ElementBuffer
    */
    class ElementBuffer {
        bind(): void;
        unbind(): void;
        readonly "eboIndexType" : Internal.GlNumericType;
        readonly "elementCount" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ElementBuffer_ = ElementBuffer;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2ShortFunction
    */
    interface Byte2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Byte2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2ShortFunction;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2ShortFunction;
    }
    type Byte2ShortFunction_ = ((arg0: number) => number) | Byte2ShortFunction;
    /**
    * @javaClass mezz.jei.api.runtime.IRecipesGui
    */
    interface IRecipesGui {
        showCategories(arg0: Internal.List_<ResourceLocation_>): void;
        showTypes(arg0: Internal.List_<mezz.jei.api.recipe.RecipeType_<any>>): void;
        show<V>(arg0: Internal.IFocus_<V>): void;
        show(arg0: Internal.List_<Internal.IFocus_<any>>): void;
        getIngredientUnderMouse<T>(arg0: Internal.IIngredientType_<T>): T;
    }
    type IRecipesGui_ = IRecipesGui;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.FileNotFoundAction
    */
    interface FileNotFoundAction {
        run(arg0: Internal.Path_, arg1: Internal.ConfigFormat_<any>): boolean;
        copyResource(arg0: string): this;
        copyData(arg0: Internal.File_): this;
        copyData(arg0: Internal.URL_): this;
        copyData(arg0: Internal.InputStream_): this;
        copyData(arg0: Internal.Path_): this;
    }
    type FileNotFoundAction_ = ((arg0: Internal.Path, arg1: Internal.ConfigFormat<any>) => boolean) | FileNotFoundAction;
    /**
    * @javaClass net.minecraftforge.common.capabilities.Capability
    */
    class Capability <T> {
        orEmpty<R>(arg0: Internal.Capability_<R>, arg1: Internal.LazyOptional_<T>): Internal.LazyOptional<R>;
        getName(): string;
        isRegistered(): boolean;
        addListener(arg0: Internal.Consumer_<Internal.Capability_<T>>): Internal.Capability<T>;
        get name(): string;
        get registered(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Capability_<T> = Capability<T>;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.ContextMenu
    */
    class ContextMenu extends Internal.Panel {
        drawBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        alignWidgets(): void;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        addWidgets(): void;
        mousePressed(button: Internal.MouseButton_): boolean;
        "hasIcons" : boolean;
        readonly "items" : Internal.List<Internal.ContextMenuItem>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContextMenu_ = ContextMenu;
    /**
    * @javaClass net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener
    */
    abstract class SimpleJsonResourceReloadListener extends Internal.SimplePreparableReloadListener<Internal.Map<ResourceLocation, Internal.JsonElement>> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SimpleJsonResourceReloadListener_ = SimpleJsonResourceReloadListener;
    /**
    * @javaClass dev.latvian.mods.rhino.NativeJavaClass
    */
    class NativeJavaClass extends Internal.NativeJavaObject implements dev.latvian.mods.rhino.Function {
        call(cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        hasInstance(value: Internal.Scriptable_): boolean;
        get(name: string, start: Internal.Scriptable_): any;
        getIds(): any[];
        toString(): string;
        getClassObject(): typeof any;
        construct(cx: Internal.Context_, scope: Internal.Scriptable_, args: any[]): Internal.Scriptable;
        has(name: string, start: Internal.Scriptable_): boolean;
        getClassName(): string;
        put(name: string, start: Internal.Scriptable_, value: any): void;
        getDefaultValue(hint: Internal.Class_<any>): any;
        get classObject(): typeof any;
        get ids(): any[];
        get className(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NativeJavaClass_ = NativeJavaClass;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemTooltipEventJS$StaticTooltipHandlerFromJS
    */
    interface ItemTooltipEventJS$StaticTooltipHandlerFromJS {
        accept(arg0: Internal.ItemStackJS_, arg1: boolean, arg2: Internal.List_<any>): void;
    }
    type ItemTooltipEventJS$StaticTooltipHandlerFromJS_ = ((arg0: Internal.ItemStackJS, arg1: boolean, arg2: Internal.List<any>) => void) | ItemTooltipEventJS$StaticTooltipHandlerFromJS;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent$NeighborNotifyEvent
    */
    class BlockEvent$NeighborNotifyEvent extends Internal.BlockEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        getForceRedstoneUpdate(): boolean;
        getNotifiedSides(): Internal.EnumSet<Internal.Direction>;
        get cancelable(): boolean;
        get notifiedSides(): Internal.EnumSet<Internal.Direction>;
        get listenerList(): Internal.ListenerList;
        get forceRedstoneUpdate(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent$NeighborNotifyEvent_ = BlockEvent$NeighborNotifyEvent;
    /**
    * @javaClass net.minecraft.server.level.ServerLevel
    */
    class ServerLevel extends Internal.Level implements Internal.WorldGenLevel, com.simibubi.create.foundation.mixin.accessor.ServerLevelAccessor {
        toString(): string;
        removeEntityComplete(arg0: Internal.Entity_, arg1: boolean): void;
        getPartEntities(): Internal.Collection<Internal.PartEntity<any>>;
        removeEntity(arg0: Internal.Entity_): void;
        removeEntity(arg0: Internal.Entity_, arg1: boolean): void;
        close(): void;
        removePlayer(arg0: Internal.ServerPlayer_, arg1: boolean): void;
        get partEntities(): Internal.Collection<Internal.PartEntity<any>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ServerLevel_ = ServerLevel;
    /**
    * @javaClass javax.accessibility.AccessibleValue
    */
    interface AccessibleValue {
        getMinimumAccessibleValue(): Internal.Number;
        setCurrentAccessibleValue(arg0: Internal.Number_): boolean;
        getCurrentAccessibleValue(): Internal.Number;
        getMaximumAccessibleValue(): Internal.Number;
    }
    type AccessibleValue_ = AccessibleValue;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.MobEffectBuilder
    */
    abstract class MobEffectBuilder extends Internal.BuilderBase<Internal.MobEffect> {
        /**
        */
        modifyAttribute(attribute: Internal.Attribute_, identifier: string, d: number, operation: Internal.AttributeModifier$Operation_): this;
        color(col: dev.latvian.mods.rhino.mod.util.color.Color_): this;
        getTranslationKeyGroup(): string;
        beneficial(): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.MobEffect>;
        effectTick(effectTick: Internal.MobEffectBuilder$EffectTickCallback_): this;
        category(c: Internal.MobEffectCategory_): this;
        harmful(): this;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.MobEffect>;
        get translationKeyGroup(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type MobEffectBuilder_ = MobEffectBuilder;
    /**
    * @javaClass java.awt.im.InputMethodHighlight
    */
    class InputMethodHighlight {
        getStyle(): Internal.Map<Internal.TextAttribute, any>;
        getState(): number;
        getVariation(): number;
        isSelected(): boolean;
        static readonly "UNSELECTED_CONVERTED_TEXT_HIGHLIGHT" : Internal.InputMethodHighlight;
        static readonly "SELECTED_CONVERTED_TEXT_HIGHLIGHT" : Internal.InputMethodHighlight;
        static readonly "RAW_TEXT" : 0;
        static readonly "CONVERTED_TEXT" : 1;
        static readonly "UNSELECTED_RAW_TEXT_HIGHLIGHT" : Internal.InputMethodHighlight;
        static readonly "SELECTED_RAW_TEXT_HIGHLIGHT" : Internal.InputMethodHighlight;
        get style(): Internal.Map<Internal.TextAttribute, any>;
        get state(): number;
        get variation(): number;
        get selected(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputMethodHighlight_ = InputMethodHighlight;
    /**
    * @javaClass net.minecraft.client.resources.model.ModelState
    */
    interface ModelState extends Internal.IForgeModelState {
    }
    type ModelState_ = ModelState;
    /**
    * Fired when a block is broken by player. This will not be fired by other means, like TNT.
    *
    * On fabric, the experience returned is always `null`.
    * @javaClass dev.latvian.mods.kubejs.block.BlockBreakEventJS
    */
    class BlockBreakEventJS extends Internal.PlayerEventJS {
        getBlock(): Internal.BlockContainerJS;
        getXp(): number;
        getEntity(): Internal.EntityJS;
        setXp(xp: number): void;
        canCancel(): boolean;
        get xp(): number;
        get block(): Internal.BlockContainerJS;
        get entity(): Internal.EntityJS;
        set xp(xp: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when a block is broken by player. This will not be fired by other means, like TNT.
    *
    * On fabric, the experience returned is always `null`.
    */
    type BlockBreakEventJS_ = BlockBreakEventJS;
    /**
    * @javaClass java.util.PrimitiveIterator$OfDouble
    */
    interface PrimitiveIterator$OfDouble extends Internal.PrimitiveIterator<number, Internal.DoubleConsumer> {
        next(): number;
        forEachRemaining(arg0: Internal.DoubleConsumer_): void;
        forEachRemaining(arg0: Internal.Consumer_<number>): void;
        nextDouble(): number;
    }
    type PrimitiveIterator$OfDouble_ = (() => number) | PrimitiveIterator$OfDouble;
    /**
    * @javaClass net.minecraftforge.client.event.EntityViewRenderEvent$FogEvent
    */
    class EntityViewRenderEvent$FogEvent extends Internal.EntityViewRenderEvent {
        getListenerList(): Internal.ListenerList;
        getMode(): Internal.FogRenderer$FogMode;
        get mode(): Internal.FogRenderer$FogMode;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityViewRenderEvent$FogEvent_ = EntityViewRenderEvent$FogEvent;
    /**
    * @javaClass com.mojang.math.Quaternion
    */
    class Quaternion {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Quaternion_ = Quaternion;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeMobEffect
    */
    interface IForgeMobEffect {
        getCurativeItems(): Internal.List<Internal.ItemStack>;
        getSortOrder(arg0: Internal.MobEffectInstance_): number;
    }
    type IForgeMobEffect_ = IForgeMobEffect;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingConversionEvent
    */
    class LivingConversionEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingConversionEvent_ = LivingConversionEvent;
    /**
    * @javaClass net.minecraft.network.FriendlyByteBuf
    */
    class FriendlyByteBuf extends Internal.ByteBuf implements Internal.IForgeFriendlyByteBuf {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        writeItemStack(arg0: Internal.ItemStack_, arg1: boolean): this;
        release(): boolean;
        release(arg0: number): boolean;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        readInt(): number;
        order(): Internal.ByteOrder;
        order(arg0: Internal.ByteOrder_): Internal.ByteBuf;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        maxCapacity(): number;
        getUnsignedShort(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        nioBufferCount(): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(): boolean;
        isReadable(arg0: number): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        retain(arg0: number): Internal.ByteBuf;
        retain(): Internal.ByteBuf;
        isWritable(): boolean;
        isWritable(arg0: number): boolean;
        readChar(): string;
        hasMemoryAddress(): boolean;
        capacity(): number;
        capacity(arg0: number): Internal.ByteBuf;
        readCharSequence(arg0: number, arg1: Internal.Charset_): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(): Internal.ByteBuf;
        copy(arg0: number, arg1: number): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number, arg1: boolean): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        writeInt(arg0: number): Internal.ByteBuf;
        hasArray(): boolean;
        memoryAddress(): number;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        nioBuffers(): Internal.ByteBuffer[];
        nioBuffers(arg0: number, arg1: number): Internal.ByteBuffer[];
        forEachByteDesc(arg0: Internal.ByteProcessor_): number;
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: any): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer_): Internal.ByteBuf;
        readBytes(arg0: Internal.OutputStream_, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel_, arg1: number): number;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_): Internal.ByteBuf;
        readBoolean(): boolean;
        toString(): string;
        toString(arg0: number, arg1: number, arg2: Internal.Charset_): string;
        toString(arg0: Internal.Charset_): string;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        retainedSlice(): Internal.ByteBuf;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        isDirect(): boolean;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        readerIndex(arg0: number): Internal.ByteBuf;
        readerIndex(): number;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset_): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: Internal.ByteBuf_): number;
        getBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuffer_): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.GatheringByteChannel_, arg2: number): number;
        getBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        getBytes(arg0: number, arg1: Internal.OutputStream_, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf_): Internal.ByteBuf;
        unwrap(): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        refCnt(): number;
        getUnsignedIntLE(arg0: number): number;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        nioBuffer(): Internal.ByteBuffer;
        touch(): Internal.ByteBuf;
        touch(arg0: any): Internal.ByteBuf;
        discardSomeReadBytes(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(): number;
        writerIndex(arg0: number): Internal.ByteBuf;
        writeCharSequence(arg0: Internal.CharSequence_, arg1: Internal.Charset_): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ByteBuf_): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuffer_): Internal.ByteBuf;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        writeBytes(arg0: Internal.ScatteringByteChannel_, arg1: number): number;
        writeBytes(arg0: Internal.InputStream_, arg1: number): number;
        forEachByte(arg0: Internal.ByteProcessor_): number;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        getShortLE(arg0: number): number;
        alloc(): Internal.ByteBufAllocator;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        writeShortLE(arg0: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        array(): number[];
        setCharSequence(arg0: number, arg1: Internal.CharSequence_, arg2: Internal.Charset_): number;
        hashCode(): number;
        internalNioBuffer(arg0: number, arg1: number): Internal.ByteBuffer;
        arrayOffset(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readIntLE(): number;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.InputStream_, arg2: number): number;
        setBytes(arg0: number, arg1: Internal.ByteBuf_): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.FileChannel_, arg2: number, arg3: number): number;
        setBytes(arg0: number, arg1: Internal.ScatteringByteChannel_, arg2: number): number;
        setBytes(arg0: number, arg1: number[], arg2: number, arg3: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuffer_): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number, arg3: number): Internal.ByteBuf;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        get readable(): boolean;
        get direct(): boolean;
        get readOnly(): boolean;
        get writable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FriendlyByteBuf_ = FriendlyByteBuf;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2LongFunction
    */
    interface Boolean2LongFunction extends it.unimi.dsi.fastutil.Function<boolean, number> {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: boolean, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<boolean, T>;
        put(arg0: boolean, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: boolean): number;
        defaultReturnValue(): number;
        defaultReturnValue(arg0: number): void;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Boolean2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Boolean2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: boolean): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Boolean2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Boolean2FloatFunction;
        containsKey(arg0: boolean): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Boolean2CharFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2LongFunction;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2LongFunction;
    }
    type Boolean2LongFunction_ = ((arg0: boolean) => number) | Boolean2LongFunction;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.Panel
    */
    abstract class Panel extends dev.ftb.mods.ftblibrary.ui.Widget {
        mouseDoubleClicked(button: Internal.MouseButton_): boolean;
        mouseScrolled(scroll: number): boolean;
        drawWidget(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, widget: dev.ftb.mods.ftblibrary.ui.Widget_, index: number, x: number, y: number, w: number, h: number): void;
        getContentHeight(): number;
        isDefaultScrollVertical(): boolean;
        align(layout: Internal.WidgetLayout_): number;
        mousePressed(button: Internal.MouseButton_): boolean;
        isMouseOverAnyWidget(): boolean;
        mouseReleased(button: Internal.MouseButton_): void;
        getScrollX(): number;
        getScrollY(): number;
        getContentWidth(): number;
        drawBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        setOffset(flag: boolean): void;
        clearWidgets(): void;
        drawOffsetBackground(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        updateMouseOver(mouseX: number, mouseY: number): void;
        keyReleased(key: Internal.Key_): void;
        getScrollStep(): number;
        add(widget: dev.ftb.mods.ftblibrary.ui.Widget_): void;
        onClosed(): void;
        getCursor(): Internal.CursorType;
        setScrollStep(s: number): void;
        keyPressed(key: Internal.Key_): boolean;
        getWidget(index: number): dev.ftb.mods.ftblibrary.ui.Widget;
        movePanelScroll(dx: number, dy: number): boolean;
        setOnlyInteractWithWidgetsInside(value: boolean): void;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        setOnlyRenderWidgetsInside(value: boolean): void;
        tick(): void;
        getOnlyInteractWithWidgetsInside(): boolean;
        getOnlyRenderWidgetsInside(): boolean;
        addWidgets(): void;
        addMouseOverText(list: Internal.TooltipList_): void;
        getX(): number;
        getY(): number;
        addAll(list: Internal.Iterable_<dev.ftb.mods.ftblibrary.ui.Widget_>): void;
        scrollPanel(scroll: number): boolean;
        refreshWidgets(): void;
        isOffset(): boolean;
        alignWidgets(): void;
        charTyped(c: string, modifiers: Internal.KeyModifiers_): boolean;
        setScrollX(scroll: number): void;
        getIngredientUnderMouse(): any;
        setScrollY(scroll: number): void;
        "attachedScrollbar" : Internal.PanelScrollBar;
        "contentWidthExtra" : number;
        readonly "widgets" : Internal.List<dev.ftb.mods.ftblibrary.ui.Widget>;
        "contentHeightExtra" : number;
        get cursor(): Internal.CursorType;
        get ingredientUnderMouse(): any;
        get defaultScrollVertical(): boolean;
        get onlyInteractWithWidgetsInside(): boolean;
        get offset(): boolean;
        get scrollStep(): number;
        get contentHeight(): number;
        get contentWidth(): number;
        get onlyRenderWidgetsInside(): boolean;
        get mouseOverAnyWidget(): boolean;
        get x(): number;
        get y(): number;
        get scrollY(): number;
        get scrollX(): number;
        set onlyInteractWithWidgetsInside(value: boolean);
        set offset(flag: boolean);
        set onlyRenderWidgetsInside(value: boolean);
        set scrollY(scroll: number);
        set scrollStep(s: number);
        set scrollX(scroll: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Panel_ = Panel;
    /**
    * @javaClass net.minecraft.world.item.BucketItem
    */
    class BucketItem extends Internal.Item implements Internal.DispensibleContainerItem, Internal.InjectedBucketItemExtension {
        initCapabilities(arg0: Internal.ItemStack_, arg1: Internal.CompoundTag_): Internal.ICapabilityProvider;
        getFluid(): Internal.Fluid;
        get fluid(): Internal.Fluid;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BucketItem_ = BucketItem;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.ingredientaction.CustomIngredientActionCallback
    */
    interface CustomIngredientActionCallback {
        transform(arg0: Internal.ItemStackJS_, arg1: number, arg2: Internal.InventoryJS_): any;
    }
    type CustomIngredientActionCallback_ = ((arg0: Internal.ItemStackJS, arg1: number, arg2: Internal.InventoryJS) => any) | CustomIngredientActionCallback;
    /**
    * @javaClass java.util.function.ToLongFunction
    */
    interface ToLongFunction <T> {
        applyAsLong(arg0: T): number;
    }
    type ToLongFunction_<T> = ((arg0: T) => number) | ToLongFunction<T>;
    /**
    * @javaClass com.mojang.brigadier.AmbiguityConsumer
    */
    interface AmbiguityConsumer <S> {
        ambiguous(arg0: Internal.CommandNode_<S>, arg1: Internal.CommandNode_<S>, arg2: Internal.CommandNode_<S>, arg3: Internal.Collection_<string>): void;
    }
    type AmbiguityConsumer_<S> = ((arg0: Internal.CommandNode<S>, arg1: Internal.CommandNode<S>, arg2: Internal.CommandNode<S>, arg3: Internal.Collection<string>) => void) | AmbiguityConsumer<S>;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.Scale
    */
    interface Scale <Self> {
        scale(arg0: number, arg1: number, arg2: number): Self;
        scale(arg0: number): Self;
    }
    type Scale_<Self> = ((arg0: number, arg1: number, arg2: number) => Self) | Scale<Self>;
    /**
    * @javaClass net.minecraftforge.eventbus.api.IEventListener
    */
    interface IEventListener {
        listenerName(): string;
        invoke(arg0: net.minecraftforge.eventbus.api.Event_): void;
    }
    type IEventListener_ = ((arg0: net.minecraftforge.eventbus.api.Event) => void) | IEventListener;
    /**
    * @javaClass net.minecraft.world.level.biome.Biome$Precipitation
    */
    class Biome$Precipitation extends Internal.Enum<Internal.Biome$Precipitation> implements Internal.StringRepresentable {
        static valueOf(arg0: string): this;
        static values(): Internal.Biome$Precipitation[];
        static readonly "RAIN" : Internal.Biome$Precipitation;
        static readonly "SNOW" : Internal.Biome$Precipitation;
        static readonly "NONE" : Internal.Biome$Precipitation;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Biome$Precipitation_ = "rain" | "snow" | "none" | Biome$Precipitation;
    /**
    * @javaClass net.minecraft.network.protocol.Packet
    */
    interface Packet <T> {
    }
    type Packet_<T> = Packet<T>;
    /**
    * @javaClass java.time.zone.ZoneOffsetTransition
    */
    class ZoneOffsetTransition implements Internal.Comparable<Internal.ZoneOffsetTransition>, Internal.Serializable {
        getDateTimeAfter(): Internal.LocalDateTime;
        getDateTimeBefore(): Internal.LocalDateTime;
        getOffsetAfter(): Internal.ZoneOffset;
        getOffsetBefore(): Internal.ZoneOffset;
        compareTo(arg0: Internal.ZoneOffsetTransition_): number;
        getInstant(): Internal.Instant;
        isGap(): boolean;
        getDuration(): Internal.Duration;
        toEpochSecond(): number;
        hashCode(): number;
        static of(arg0: Internal.LocalDateTime_, arg1: Internal.ZoneOffset_, arg2: Internal.ZoneOffset_): this;
        equals(arg0: any): boolean;
        isOverlap(): boolean;
        toString(): string;
        isValidOffset(arg0: Internal.ZoneOffset_): boolean;
        get duration(): Internal.Duration;
        get overlap(): boolean;
        get gap(): boolean;
        get dateTimeBefore(): Internal.LocalDateTime;
        get offsetAfter(): Internal.ZoneOffset;
        get dateTimeAfter(): Internal.LocalDateTime;
        get offsetBefore(): Internal.ZoneOffset;
        get instant(): Internal.Instant;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZoneOffsetTransition_ = ZoneOffsetTransition;
    /**
    * @javaClass java.io.PrintStream
    */
    class PrintStream extends Internal.FilterOutputStream implements Internal.Appendable, Internal.Closeable {
        charset(): Internal.Charset;
        print(arg0: boolean): void;
        print(arg0: string): void;
        print(arg0: number): void;
        print(arg0: string[]): void;
        print(arg0: any): void;
        println(arg0: string): void;
        println(arg0: any): void;
        println(arg0: number): void;
        println(arg0: string[]): void;
        println(arg0: boolean): void;
        println(): void;
        writeBytes(arg0: number[]): void;
        flush(): void;
        format(arg0: Internal.Locale_, arg1: string, ... arg2: any[]): this;
        format(arg0: string, ... arg1: any[]): this;
        checkError(): boolean;
        close(): void;
        write(arg0: number[]): void;
        write(arg0: number): void;
        write(arg0: number[], arg1: number, arg2: number): void;
        append(arg0: Internal.CharSequence_): this;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string): this;
        printf(arg0: Internal.Locale_, arg1: string, ... arg2: any[]): this;
        printf(arg0: string, ... arg1: any[]): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PrintStream_ = PrintStream;
    /**
    * @javaClass io.netty.buffer.AbstractByteBuf
    */
    abstract class AbstractByteBuf extends Internal.ByteBuf {
        asReadOnly(): Internal.ByteBuf;
        markReaderIndex(): Internal.ByteBuf;
        getByte(arg0: number): number;
        writeZero(arg0: number): Internal.ByteBuf;
        resetReaderIndex(): Internal.ByteBuf;
        writeFloat(arg0: number): Internal.ByteBuf;
        setLongLE(arg0: number, arg1: number): Internal.ByteBuf;
        readRetainedSlice(arg0: number): Internal.ByteBuf;
        slice(): Internal.ByteBuf;
        slice(arg0: number, arg1: number): Internal.ByteBuf;
        getMediumLE(arg0: number): number;
        readUnsignedIntLE(): number;
        readInt(): number;
        order(arg0: Internal.ByteOrder_): Internal.ByteBuf;
        writeMedium(arg0: number): Internal.ByteBuf;
        resetWriterIndex(): Internal.ByteBuf;
        writableBytes(): number;
        maxCapacity(): number;
        getUnsignedShort(arg0: number): number;
        bytesBefore(arg0: number, arg1: number): number;
        bytesBefore(arg0: number, arg1: number, arg2: number): number;
        bytesBefore(arg0: number): number;
        setInt(arg0: number, arg1: number): Internal.ByteBuf;
        getInt(arg0: number): number;
        markWriterIndex(): Internal.ByteBuf;
        isReadable(arg0: number): boolean;
        isReadable(): boolean;
        writeBoolean(arg0: boolean): Internal.ByteBuf;
        setIntLE(arg0: number, arg1: number): Internal.ByteBuf;
        writeLongLE(arg0: number): Internal.ByteBuf;
        setShortLE(arg0: number, arg1: number): Internal.ByteBuf;
        isWritable(arg0: number): boolean;
        isWritable(): boolean;
        readChar(): string;
        readCharSequence(arg0: number, arg1: Internal.Charset_): Internal.CharSequence;
        isReadOnly(): boolean;
        readUnsignedShortLE(): number;
        readDouble(): number;
        readFloat(): number;
        getLongLE(arg0: number): number;
        getBoolean(arg0: number): boolean;
        copy(): Internal.ByteBuf;
        readShortLE(): number;
        readUnsignedMedium(): number;
        ensureWritable(arg0: number): Internal.ByteBuf;
        ensureWritable(arg0: number, arg1: boolean): number;
        writeInt(arg0: number): Internal.ByteBuf;
        readableBytes(): number;
        readSlice(arg0: number): Internal.ByteBuf;
        getIntLE(arg0: number): number;
        nioBuffers(): Internal.ByteBuffer[];
        forEachByteDesc(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        forEachByteDesc(arg0: Internal.ByteProcessor_): number;
        skipBytes(arg0: number): Internal.ByteBuf;
        getLong(arg0: number): number;
        readLong(): number;
        readShort(): number;
        equals(arg0: any): boolean;
        setZero(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedMedium(arg0: number): number;
        readBytes(arg0: number[]): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_): Internal.ByteBuf;
        readBytes(arg0: number): Internal.ByteBuf;
        readBytes(arg0: Internal.GatheringByteChannel_, arg1: number): number;
        readBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        readBytes(arg0: Internal.OutputStream_, arg1: number): Internal.ByteBuf;
        readBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_, arg1: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): Internal.ByteBuf;
        readBytes(arg0: Internal.ByteBuffer_): Internal.ByteBuf;
        readBoolean(): boolean;
        toString(): string;
        toString(arg0: number, arg1: number, arg2: Internal.Charset_): string;
        toString(arg0: Internal.Charset_): string;
        retainedSlice(): Internal.ByteBuf;
        retainedSlice(arg0: number, arg1: number): Internal.ByteBuf;
        readMediumLE(): number;
        setMedium(arg0: number, arg1: number): Internal.ByteBuf;
        setBoolean(arg0: number, arg1: boolean): Internal.ByteBuf;
        readerIndex(arg0: number): Internal.ByteBuf;
        readerIndex(): number;
        getCharSequence(arg0: number, arg1: number, arg2: Internal.Charset_): Internal.CharSequence;
        setShort(arg0: number, arg1: number): Internal.ByteBuf;
        compareTo(arg0: Internal.ByteBuf_): number;
        getBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): Internal.ByteBuf;
        getBytes(arg0: number, arg1: Internal.ByteBuf_): Internal.ByteBuf;
        getBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setDouble(arg0: number, arg1: number): Internal.ByteBuf;
        setChar(arg0: number, arg1: number): Internal.ByteBuf;
        getUnsignedIntLE(arg0: number): number;
        getUnsignedInt(arg0: number): number;
        indexOf(arg0: number, arg1: number, arg2: number): number;
        writeByte(arg0: number): Internal.ByteBuf;
        nioBuffer(): Internal.ByteBuffer;
        discardSomeReadBytes(): Internal.ByteBuf;
        duplicate(): Internal.ByteBuf;
        writerIndex(): number;
        writerIndex(arg0: number): Internal.ByteBuf;
        writeCharSequence(arg0: Internal.CharSequence_, arg1: Internal.Charset_): number;
        readUnsignedInt(): number;
        getUnsignedShortLE(arg0: number): number;
        retainedDuplicate(): Internal.ByteBuf;
        getChar(arg0: number): string;
        setLong(arg0: number, arg1: number): Internal.ByteBuf;
        readMedium(): number;
        writeBytes(arg0: Internal.ScatteringByteChannel_, arg1: number): number;
        writeBytes(arg0: Internal.InputStream_, arg1: number): number;
        writeBytes(arg0: Internal.ByteBuffer_): Internal.ByteBuf;
        writeBytes(arg0: number[], arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: number[]): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf_): Internal.ByteBuf;
        writeBytes(arg0: Internal.FileChannel_, arg1: number, arg2: number): number;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number, arg2: number): Internal.ByteBuf;
        writeBytes(arg0: Internal.ByteBuf_, arg1: number): Internal.ByteBuf;
        forEachByte(arg0: number, arg1: number, arg2: Internal.ByteProcessor_): number;
        forEachByte(arg0: Internal.ByteProcessor_): number;
        setIndex(arg0: number, arg1: number): Internal.ByteBuf;
        writeShort(arg0: number): Internal.ByteBuf;
        getShortLE(arg0: number): number;
        getMedium(arg0: number): number;
        readUnsignedShort(): number;
        setByte(arg0: number, arg1: number): Internal.ByteBuf;
        writeShortLE(arg0: number): Internal.ByteBuf;
        maxWritableBytes(): number;
        getDouble(arg0: number): number;
        getFloat(arg0: number): number;
        writeLong(arg0: number): Internal.ByteBuf;
        writeIntLE(arg0: number): Internal.ByteBuf;
        setCharSequence(arg0: number, arg1: Internal.CharSequence_, arg2: Internal.Charset_): number;
        hashCode(): number;
        setMediumLE(arg0: number, arg1: number): Internal.ByteBuf;
        readIntLE(): number;
        readUnsignedByte(): number;
        readLongLE(): number;
        readUnsignedMediumLE(): number;
        writeDouble(arg0: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf_, arg2: number): Internal.ByteBuf;
        setBytes(arg0: number, arg1: Internal.ByteBuf_): Internal.ByteBuf;
        setBytes(arg0: number, arg1: number[]): Internal.ByteBuf;
        setFloat(arg0: number, arg1: number): Internal.ByteBuf;
        getShort(arg0: number): number;
        writeMediumLE(arg0: number): Internal.ByteBuf;
        clear(): Internal.ByteBuf;
        getUnsignedByte(arg0: number): number;
        discardReadBytes(): Internal.ByteBuf;
        writeChar(arg0: number): Internal.ByteBuf;
        getUnsignedMediumLE(arg0: number): number;
        readByte(): number;
        get readable(): boolean;
        get readOnly(): boolean;
        get writable(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AbstractByteBuf_ = AbstractByteBuf;
    /**
    * @javaClass net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest
    */
    abstract class RuleTest {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RuleTest_ = RuleTest;
    /**
    * @javaClass com.mojang.authlib.GameProfile
    */
    class GameProfile {
        getName(): string;
        isLegacy(): boolean;
        hashCode(): number;
        getProperties(): Internal.PropertyMap;
        equals(arg0: any): boolean;
        getId(): Internal.UUID;
        toString(): string;
        isComplete(): boolean;
        get legacy(): boolean;
        get name(): string;
        get id(): Internal.UUID;
        get complete(): boolean;
        get properties(): Internal.PropertyMap;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GameProfile_ = GameProfile;
    /**
    * @javaClass net.minecraftforge.event.DifficultyChangeEvent
    */
    class DifficultyChangeEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getOldDifficulty(): Internal.Difficulty;
        getDifficulty(): Internal.Difficulty;
        get difficulty(): Internal.Difficulty;
        get listenerList(): Internal.ListenerList;
        get oldDifficulty(): Internal.Difficulty;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DifficultyChangeEvent_ = DifficultyChangeEvent;
    /**
    * @javaClass net.minecraft.core.HolderSet
    */
    interface HolderSet <T> extends Internal.Iterable<Internal.Holder<T>> {
    }
    type HolderSet_<T> = HolderSet<T>;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.icon.ImageIcon
    */
    class ImageIcon extends Internal.Icon {
        bindTexture(): void;
        createPixelBuffer(): Internal.PixelBuffer;
        hashCode(): number;
        withColor(color: Internal.Color4I_): this;
        equals(o: any): boolean;
        withUV(u0: number, v0: number, u1: number, v1: number): this;
        toString(): string;
        draw(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        copy(): this;
        hasPixelBuffer(): boolean;
        withTint(c: Internal.Color4I_): this;
        "minU" : number;
        "maxV" : number;
        "maxU" : number;
        "color" : Internal.Color4I;
        readonly "texture" : ResourceLocation;
        static readonly "MISSING_IMAGE" : ResourceLocation;
        "minV" : number;
        "tileSize" : number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImageIcon_ = ImageIcon;
    /**
    * @javaClass java.awt.PopupMenu
    */
    class PopupMenu extends Internal.Menu {
        getParent(): Internal.MenuContainer;
        addNotify(): void;
        show(arg0: Internal.Component_, arg1: number, arg2: number): void;
        getAccessibleContext(): Internal.AccessibleContext;
        get accessibleContext(): Internal.AccessibleContext;
        get parent(): Internal.MenuContainer;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PopupMenu_ = PopupMenu;
    /**
    * @javaClass java.nio.file.attribute.FileAttributeView
    */
    interface FileAttributeView extends Internal.AttributeView {
    }
    type FileAttributeView_ = FileAttributeView;
    /**
    * @javaClass java.time.temporal.ChronoUnit
    */
    class ChronoUnit extends Internal.Enum<Internal.ChronoUnit> implements Internal.TemporalUnit {
        isDurationEstimated(): boolean;
        getDuration(): Internal.Duration;
        static valueOf(arg0: string): this;
        isTimeBased(): boolean;
        static values(): Internal.ChronoUnit[];
        addTo<R>(arg0: R, arg1: number): R;
        toString(): string;
        isDateBased(): boolean;
        between(arg0: Internal.Temporal_, arg1: Internal.Temporal_): number;
        isSupportedBy(arg0: Internal.Temporal_): boolean;
        static readonly "FOREVER" : Internal.ChronoUnit;
        static readonly "MICROS" : Internal.ChronoUnit;
        static readonly "SECONDS" : Internal.ChronoUnit;
        static readonly "DECADES" : Internal.ChronoUnit;
        static readonly "MILLENNIA" : Internal.ChronoUnit;
        static readonly "DAYS" : Internal.ChronoUnit;
        static readonly "MILLIS" : Internal.ChronoUnit;
        static readonly "HALF_DAYS" : Internal.ChronoUnit;
        static readonly "MONTHS" : Internal.ChronoUnit;
        static readonly "YEARS" : Internal.ChronoUnit;
        static readonly "HOURS" : Internal.ChronoUnit;
        static readonly "WEEKS" : Internal.ChronoUnit;
        static readonly "NANOS" : Internal.ChronoUnit;
        static readonly "CENTURIES" : Internal.ChronoUnit;
        static readonly "MINUTES" : Internal.ChronoUnit;
        static readonly "ERAS" : Internal.ChronoUnit;
        get duration(): Internal.Duration;
        get durationEstimated(): boolean;
        get timeBased(): boolean;
        get dateBased(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChronoUnit_ = "centuries" | "hours" | "weeks" | "months" | "nanos" | "minutes" | "millennia" | "years" | "eras" | "seconds" | "micros" | "days" | "decades" | "half_days" | "millis" | "forever" | ChronoUnit;
    /**
    * @javaClass java.lang.Number
    */
    abstract class Number implements Internal.Serializable {
        intValue(): number;
        floatValue(): number;
        shortValue(): number;
        doubleValue(): number;
        longValue(): number;
        byteValue(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Number_ = Number;
    /**
    * @javaClass java.util.function.DoubleBinaryOperator
    */
    interface DoubleBinaryOperator {
        applyAsDouble(arg0: number, arg1: number): number;
    }
    type DoubleBinaryOperator_ = ((arg0: number, arg1: number) => number) | DoubleBinaryOperator;
    /**
    * @javaClass dev.latvian.mods.rhino.Scriptable
    */
    interface Scriptable extends Internal.IdEnumerationIterator {
        enumerationIteratorNext(cx: Internal.Context_, currentId: Internal.Consumer_<any>): boolean;
        getTypeOf(): Internal.MemberType;
        hasInstance(arg0: Internal.Scriptable_): boolean;
        setParentScope(arg0: Internal.Scriptable_): void;
        getIds(): any[];
        getAllIds(): any[];
        delete(arg0: string): void;
        delete(arg0: number): void;
        put(arg0: number, arg1: Internal.Scriptable_, arg2: any): void;
        put(arg0: string, arg1: Internal.Scriptable_, arg2: any): void;
        getDefaultValue(arg0: Internal.Class_<any>): any;
        setPrototype(arg0: Internal.Scriptable_): void;
        getPrototype(): this;
        get(arg0: number, arg1: Internal.Scriptable_): any;
        get(arg0: string, arg1: Internal.Scriptable_): any;
        enumerationIteratorHasNext(cx: Internal.Context_, currentId: Internal.Consumer_<any>): boolean;
        has(arg0: string, arg1: Internal.Scriptable_): boolean;
        has(arg0: number, arg1: Internal.Scriptable_): boolean;
        getClassName(): string;
        getParentScope(): this;
    }
    type Scriptable_ = Scriptable;
    /**
    * @javaClass net.minecraft.util.FormattedCharSequence
    */
    interface FormattedCharSequence {
    }
    type FormattedCharSequence_ = FormattedCharSequence;
    /**
    * @javaClass com.electronwill.nightconfig.core.Config
    */
    interface Config extends Internal.UnmodifiableConfig {
        add(arg0: Internal.List_<string>, arg1: any): boolean;
        add(arg0: string, arg1: any): boolean;
        set<T>(arg0: string, arg1: any): T;
        set<T>(arg0: Internal.List_<string>, arg1: any): T;
        inMemoryUniversal(): this;
        entrySet(): Internal.Set<Internal.Config$Entry>;
        clear(): void;
        update(arg0: Internal.List_<string>, arg1: any): void;
        update(arg0: string, arg1: any): void;
        getDefaultMapCreator<T>(arg0: boolean, arg1: boolean): Internal.Supplier<Internal.Map<string, T>>;
        getDefaultMapCreator<T>(arg0: boolean): Internal.Supplier<Internal.Map<string, T>>;
        remove<T>(arg0: Internal.List_<string>): T;
        remove<T>(arg0: string): T;
        setInsertionOrderPreserved(arg0: boolean): void;
        inMemoryUniversalConcurrent(): this;
        removeAll(arg0: Internal.UnmodifiableConfig_): void;
        unmodifiable(): Internal.UnmodifiableConfig;
        concurrentCopy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.ConfigFormat_<any>): this;
        concurrentCopy(arg0: Internal.UnmodifiableConfig_): this;
        inMemoryConcurrent(): this;
        addAll(arg0: Internal.UnmodifiableConfig_): void;
        inMemory(): this;
        isInsertionOrderPreserved(): boolean;
        putAll(arg0: Internal.UnmodifiableConfig_): void;
        of(arg0: Internal.ConfigFormat_<Internal.Config_>): this;
        of(arg0: Internal.Supplier_<Internal.Map_<string, any>>, arg1: Internal.ConfigFormat_<any>): this;
        ofConcurrent(arg0: Internal.ConfigFormat_<Internal.Config_>): this;
        valueMap(): Internal.Map<string, any>;
        checked(): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.Supplier_<Internal.Map_<string, any>>, arg2: Internal.ConfigFormat_<any>): this;
        copy(arg0: Internal.UnmodifiableConfig_, arg1: Internal.ConfigFormat_<any>): this;
        copy(arg0: Internal.UnmodifiableConfig_): this;
        createSubConfig(): this;
        wrap(arg0: Internal.Map_<string, any>, arg1: Internal.ConfigFormat_<any>): this;
    }
    type Config_ = Config;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2DoubleFunction
    */
    interface Short2DoubleFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Double2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2DoubleFunction;
        andThenInt(arg0: Internal.Double2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2DoubleFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Double2DoubleFunction_): this;
        andThenObject<T>(arg0: Internal.Double2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Double2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2DoubleFunction;
        andThenByte(arg0: Internal.Double2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Double2FloatFunction_): Internal.Short2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2DoubleFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2DoubleFunction;
        andThenChar(arg0: Internal.Double2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2DoubleFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Double2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2DoubleFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2DoubleFunction;
    }
    type Short2DoubleFunction_ = ((arg0: number) => number) | Short2DoubleFunction;
    /**
    * @javaClass net.minecraftforge.common.util.NonNullPredicate
    */
    interface NonNullPredicate <T> {
        test(arg0: T): boolean;
    }
    type NonNullPredicate_<T> = ((arg0: T) => boolean) | NonNullPredicate<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.DetectorBlock$Builder
    */
    class DetectorBlock$Builder extends Internal.BlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        detectorId(id: string): this;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DetectorBlock$Builder_ = DetectorBlock$Builder;
    /**
    * @javaClass net.minecraft.client.model.AgeableListModel
    */
    abstract class AgeableListModel <E> extends Internal.EntityModel<E> implements Internal.AgeableListModelAccessor {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AgeableListModel_<E> = AgeableListModel<E>;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLevelLastEvent
    */
    class RenderLevelLastEvent extends net.minecraftforge.eventbus.api.Event {
        getPartialTick(): number;
        getListenerList(): Internal.ListenerList;
        getStartNanos(): number;
        getLevelRenderer(): Internal.LevelRenderer;
        getProjectionMatrix(): Internal.Matrix4f;
        getPoseStack(): Internal.PoseStack;
        get projectionMatrix(): Internal.Matrix4f;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get levelRenderer(): Internal.LevelRenderer;
        get startNanos(): number;
        get partialTick(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLevelLastEvent_ = RenderLevelLastEvent;
    /**
    * @javaClass net.minecraftforge.network.NetworkEvent$PacketDispatcher
    */
    class NetworkEvent$PacketDispatcher {
        sendPacket(arg0: ResourceLocation_, arg1: Internal.FriendlyByteBuf_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NetworkEvent$PacketDispatcher_ = NetworkEvent$PacketDispatcher;
    /**
    * @javaClass net.minecraft.world.inventory.CraftingContainer
    */
    class CraftingContainer implements net.minecraft.world.Container, Internal.StackedContentsCompatible {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CraftingContainer_ = CraftingContainer;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.AdvancementJS
    */
    class AdvancementJS {
        hasDisplay(): boolean;
        getChildren(): Internal.Set<Internal.AdvancementJS>;
        getParent(): this;
        getTitle(): net.minecraft.network.chat.Component;
        hashCode(): number;
        equals(o: any): boolean;
        getId(): ResourceLocation;
        toString(): string;
        id(): ResourceLocation;
        getDisplayText(): net.minecraft.network.chat.Component;
        addChild(a: Internal.AdvancementJS_): void;
        getDescription(): net.minecraft.network.chat.Component;
        readonly "advancement" : Internal.Advancement;
        get parent(): this;
        get displayText(): net.minecraft.network.chat.Component;
        get children(): Internal.Set<Internal.AdvancementJS>;
        get description(): net.minecraft.network.chat.Component;
        get title(): net.minecraft.network.chat.Component;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AdvancementJS_ = AdvancementJS;
    /**
    * @javaClass java.nio.charset.CharsetDecoder
    */
    abstract class CharsetDecoder {
        averageCharsPerByte(): number;
        charset(): Internal.Charset;
        maxCharsPerByte(): number;
        onUnmappableCharacter(arg0: Internal.CodingErrorAction_): this;
        isCharsetDetected(): boolean;
        decode(arg0: Internal.ByteBuffer_): Internal.CharBuffer;
        decode(arg0: Internal.ByteBuffer_, arg1: Internal.CharBuffer_, arg2: boolean): Internal.CoderResult;
        isAutoDetecting(): boolean;
        unmappableCharacterAction(): Internal.CodingErrorAction;
        detectedCharset(): Internal.Charset;
        malformedInputAction(): Internal.CodingErrorAction;
        flush(arg0: Internal.CharBuffer_): Internal.CoderResult;
        onMalformedInput(arg0: Internal.CodingErrorAction_): this;
        reset(): this;
        replacement(): string;
        replaceWith(arg0: string): this;
        get autoDetecting(): boolean;
        get charsetDetected(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CharsetDecoder_ = CharsetDecoder;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.IOpenableScreen
    */
    interface IOpenableScreen extends Internal.Runnable {
        closeGui(openPrevScreen: boolean): void;
        closeGui(): void;
        openContextMenu(panel: Internal.Panel_): void;
        openGui(): void;
        openGuiLater(): void;
        run(): void;
        openAfter(runnable: Internal.Runnable_): Internal.Runnable;
        closeContextMenu(): void;
    }
    type IOpenableScreen_ = (() => void) | IOpenableScreen;
    /**
    * @javaClass net.minecraft.network.chat.ClickEvent
    */
    class ClickEvent implements Internal.JsonSerializable {
        toJson(): Internal.JsonElement;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClickEvent_ = ClickEvent;
    /**
    * @javaClass net.minecraft.world.entity.EntityDimensions
    */
    class EntityDimensions {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityDimensions_ = EntityDimensions;
    /**
    * @javaClass net.minecraftforge.event.village.VillagerTradesEvent
    */
    class VillagerTradesEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getType(): Internal.VillagerProfession;
        getTrades(): Internal.Int2ObjectMap<Internal.List<Internal.VillagerTrades$ItemListing>>;
        get listenerList(): Internal.ListenerList;
        get trades(): Internal.Int2ObjectMap<Internal.List<Internal.VillagerTrades$ItemListing>>;
        get type(): Internal.VillagerProfession;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VillagerTradesEvent_ = VillagerTradesEvent;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.ConfigValue
    */
    abstract class ConfigValue <T> implements Internal.Comparable<Internal.ConfigValue<T>> {
        init(g: Internal.ConfigGroup_, i: string, v: T, c: Internal.Consumer_<T>, def: T): Internal.ConfigValue<T>;
        getName(): string;
        setCanEdit(e: boolean): Internal.ConfigValue<T>;
        isEqual(v1: T, v2: T): boolean;
        getColor(v: T): Internal.Color4I;
        addInfo(list: Internal.TooltipList_): void;
        compareTo(o: Internal.ConfigValue_<T>): number;
        getCanEdit(): boolean;
        getIcon(v: T): Internal.Icon;
        setIcon(i: Internal.Icon_): Internal.ConfigValue<T>;
        setOrder(o: number): Internal.ConfigValue<T>;
        getNameKey(): string;
        setNameKey(key: string): Internal.ConfigValue<T>;
        getTooltip(): string;
        getStringForGUI(v: T): net.minecraft.network.chat.Component;
        onClicked(arg0: Internal.MouseButton_, arg1: Internal.ConfigCallback_): void;
        getPath(): string;
        setCurrentValue(v: T): boolean;
        copy(value: T): T;
        static info(key: string, value: any): net.minecraft.network.chat.Component;
        "defaultValue" : T;
        "id" : string;
        static readonly "NULL_TEXT" : Internal.TextComponent;
        "setter" : ((arg0: T) => void);
        "value" : T;
        "group" : Internal.ConfigGroup;
        get path(): string;
        get nameKey(): string;
        get canEdit(): boolean;
        get name(): string;
        get tooltip(): string;
        set nameKey(key: string);
        set canEdit(e: boolean);
        set icon(i: Internal.Icon_);
        set currentValue(v: T);
        set order(o: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ConfigValue_<T> = ConfigValue<T>;
    /**
    * @javaClass com.google.common.collect.BaseImmutableMultimap
    */
    abstract class BaseImmutableMultimap <K, V> extends Internal.AbstractMultimap<K, V> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BaseImmutableMultimap_<K, V> = BaseImmutableMultimap<K, V>;
    /**
    * @javaClass com.prunoideae.custom.BasicBrewJS$Builder
    */
    class BasicBrewJS$Builder extends Internal.BrewBuilder {
        createObject(): Internal.Brew;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
        /**
        */
        effect(effect: ResourceLocation_, duration: number, amplifier: number): Internal.BrewBuilder_;
        /**
        */
        effect(effect: ResourceLocation_, duration: number, amplifier: number, ambient: boolean, visible: boolean): Internal.BrewBuilder_;
        /**
        */
        effect(effect: ResourceLocation_, duration: number, amplifier: number, ambient: boolean, visible: boolean, showIcon: boolean): Internal.BrewBuilder_;
        /**
        */
        effect(effect: ResourceLocation_): Internal.BrewBuilder_;
        /**
        * fuck
        */
        effect(effect: ResourceLocation_, duration: number): Internal.BrewBuilder_;
        /**
        */
        effect(effect: ResourceLocation_, duration: number, amplifier: number, ambient: boolean): Internal.BrewBuilder_;
    }
    /**
    */
    type BasicBrewJS$Builder_ = BasicBrewJS$Builder;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLivingEvent
    */
    abstract class RenderLivingEvent <T, M> extends net.minecraftforge.eventbus.api.Event {
        getPartialTick(): number;
        getListenerList(): Internal.ListenerList;
        getRenderer(): Internal.LivingEntityRenderer<T, M>;
        getMultiBufferSource(): Internal.MultiBufferSource;
        getEntity(): Internal.LivingEntity;
        getPackedLight(): number;
        getPoseStack(): Internal.PoseStack;
        get renderer(): Internal.LivingEntityRenderer<T, M>;
        get multiBufferSource(): Internal.MultiBufferSource;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get entity(): Internal.LivingEntity;
        get partialTick(): number;
        get packedLight(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLivingEvent_<T, M> = RenderLivingEvent<T, M>;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2LongFunction
    */
    interface Short2LongFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToLongFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Long2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2LongFunction;
        andThenInt(arg0: Internal.Long2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2LongFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Long2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Long2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Long2LongFunction_): this;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2LongFunction;
        andThenByte(arg0: Internal.Long2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Long2FloatFunction_): Internal.Short2FloatFunction;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2LongFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2LongFunction;
        andThenChar(arg0: Internal.Long2CharFunction_): Internal.Short2CharFunction;
        applyAsLong(arg0: number): number;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2LongFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Long2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2LongFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2LongFunction;
    }
    type Short2LongFunction_ = ((arg0: number) => number) | Short2LongFunction;
    /**
    * @javaClass net.minecraftforge.event.entity.living.PotionEvent$PotionExpiryEvent
    */
    class PotionEvent$PotionExpiryEvent extends Internal.PotionEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PotionEvent$PotionExpiryEvent_ = PotionEvent$PotionExpiryEvent;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyPressedEvent$Post
    */
    class ScreenEvent$KeyboardKeyPressedEvent$Post extends Internal.ScreenEvent$KeyboardKeyPressedEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyPressedEvent$Post_ = ScreenEvent$KeyboardKeyPressedEvent$Post;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.reward.RewardAutoClaim
    */
    class RewardAutoClaim extends Internal.Enum<Internal.RewardAutoClaim> {
        static valueOf(name: string): this;
        static values(): Internal.RewardAutoClaim[];
        static readonly "DISABLED" : Internal.RewardAutoClaim;
        static readonly "NO_TOAST" : Internal.RewardAutoClaim;
        static readonly "INVISIBLE" : Internal.RewardAutoClaim;
        static readonly "NAME_MAP" : Internal.NameMap<Internal.RewardAutoClaim>;
        static readonly "NAME_MAP_NO_DEFAULT" : Internal.NameMap<Internal.RewardAutoClaim>;
        static readonly "ENABLED" : Internal.RewardAutoClaim;
        "id" : string;
        static readonly "DEFAULT" : Internal.RewardAutoClaim;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RewardAutoClaim_ = "default" | "invisible" | "disabled" | "enabled" | "no_toast" | RewardAutoClaim;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingSpawnEvent$SpecialSpawn
    */
    class LivingSpawnEvent$SpecialSpawn extends Internal.LivingSpawnEvent {
        getListenerList(): Internal.ListenerList;
        getSpawner(): Internal.BaseSpawner;
        isCancelable(): boolean;
        getSpawnReason(): Internal.MobSpawnType;
        get spawnReason(): Internal.MobSpawnType;
        get spawner(): Internal.BaseSpawner;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingSpawnEvent$SpecialSpawn_ = LivingSpawnEvent$SpecialSpawn;
    /**
    * @javaClass cpw.mods.jarhandling.SecureJar$Status
    */
    class SecureJar$Status extends Internal.Enum<Internal.SecureJar$Status> {
        static valueOf(arg0: string): this;
        static values(): Internal.SecureJar$Status[];
        static readonly "UNVERIFIED" : Internal.SecureJar$Status;
        static readonly "NONE" : Internal.SecureJar$Status;
        static readonly "INVALID" : Internal.SecureJar$Status;
        static readonly "VERIFIED" : Internal.SecureJar$Status;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SecureJar$Status_ = "invalid" | "verified" | "unverified" | "none" | SecureJar$Status;
    /**
    * @javaClass net.minecraft.client.renderer.GameRenderer
    */
    class GameRenderer implements Internal.ResourceManagerReloadListener, Internal.AutoCloseable, Internal.GameRendererAccessor {
        close(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GameRenderer_ = GameRenderer;
    /**
    * @javaClass net.minecraftforge.forgespi.language.IModInfo
    */
    interface IModInfo {
        getLogoFile(): Internal.Optional<string>;
        getVersion(): Internal.ArtifactVersion;
        getLogoBlur(): boolean;
        getNamespace(): string;
        getDisplayName(): string;
        getModId(): string;
        getDependencies(): Internal.List<Internal.IModInfo$ModVersion>;
        getOwningFile(): Internal.IModFileInfo;
        getModProperties(): Internal.Map<string, any>;
        getDescription(): string;
        getUpdateURL(): Internal.Optional<Internal.URL>;
        getConfig(): Internal.IConfigurable;
    }
    type IModInfo_ = IModInfo;
    /**
    * @javaClass javax.accessibility.AccessibleRelationSet
    */
    class AccessibleRelationSet {
        add(arg0: Internal.AccessibleRelation_): boolean;
        contains(arg0: string): boolean;
        size(): number;
        addAll(arg0: Internal.AccessibleRelation_[]): void;
        get(arg0: string): Internal.AccessibleRelation;
        toArray(): Internal.AccessibleRelation[];
        clear(): void;
        toString(): string;
        remove(arg0: Internal.AccessibleRelation_): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleRelationSet_ = AccessibleRelationSet;
    /**
    * @javaClass com.mojang.datafixers.Products$P6
    */
    class Products$P6 <F, T1, T2, T3, T4, T5, T6> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        t6(): Internal.App<F, T6>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function6_<T1, T2, T3, T4, T5, T6, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function6_<T1, T2, T3, T4, T5, T6, R>>): Internal.App<F, R>;
        and<T7>(arg0: Internal.App_<F, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T7, T8>(arg0: Internal.Products$P2_<F, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P6_<F, T1, T2, T3, T4, T5, T6> = Products$P6<F, T1, T2, T3, T4, T5, T6>;
    /**
    * @javaClass net.minecraftforge.network.NetworkEvent
    */
    class NetworkEvent extends net.minecraftforge.eventbus.api.Event {
        getPayload(): Internal.FriendlyByteBuf;
        getListenerList(): Internal.ListenerList;
        getLoginIndex(): number;
        getSource(): Internal.Supplier<Internal.NetworkEvent$Context>;
        get payload(): Internal.FriendlyByteBuf;
        get listenerList(): Internal.ListenerList;
        get loginIndex(): number;
        get source(): Internal.Supplier<Internal.NetworkEvent$Context>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NetworkEvent_ = NetworkEvent;
    /**
    * @javaClass java.awt.JobAttributes
    */
    class JobAttributes implements Internal.Cloneable {
        setSidesToDefault(): void;
        getDefaultSelection(): Internal.JobAttributes$DefaultSelectionType;
        getDestination(): Internal.JobAttributes$DestinationType;
        getMaxPage(): number;
        setMultipleDocumentHandling(arg0: Internal.JobAttributes$MultipleDocumentHandlingType_): void;
        setSides(arg0: Internal.JobAttributes$SidesType_): void;
        getPageRanges(): number[][];
        setDestination(arg0: Internal.JobAttributes$DestinationType_): void;
        getMultipleDocumentHandling(): Internal.JobAttributes$MultipleDocumentHandlingType;
        getDialog(): Internal.JobAttributes$DialogType;
        setDefaultSelection(arg0: Internal.JobAttributes$DefaultSelectionType_): void;
        setFileName(arg0: string): void;
        setMultipleDocumentHandlingToDefault(): void;
        hashCode(): number;
        setCopies(arg0: number): void;
        setMinPage(arg0: number): void;
        setPageRanges(arg0: number[][]): void;
        setMaxPage(arg0: number): void;
        getFileName(): string;
        getCopies(): number;
        set(arg0: Internal.JobAttributes_): void;
        setPrinter(arg0: string): void;
        getSides(): Internal.JobAttributes$SidesType;
        getFromPage(): number;
        getToPage(): number;
        setToPage(arg0: number): void;
        setDialog(arg0: Internal.JobAttributes$DialogType_): void;
        getPrinter(): string;
        equals(arg0: any): boolean;
        clone(): any;
        setCopiesToDefault(): void;
        toString(): string;
        setFromPage(arg0: number): void;
        getMinPage(): number;
        get fileName(): string;
        get defaultSelection(): Internal.JobAttributes$DefaultSelectionType;
        get printer(): string;
        get destination(): Internal.JobAttributes$DestinationType;
        get minPage(): number;
        get multipleDocumentHandling(): Internal.JobAttributes$MultipleDocumentHandlingType;
        get pageRanges(): number[][];
        get dialog(): Internal.JobAttributes$DialogType;
        get copies(): number;
        get fromPage(): number;
        get sides(): Internal.JobAttributes$SidesType;
        get maxPage(): number;
        get toPage(): number;
        set pageRanges(arg0: number[][]);
        set dialog(arg0: Internal.JobAttributes$DialogType_);
        set fileName(arg0: string);
        set copies(arg0: number);
        set defaultSelection(arg0: Internal.JobAttributes$DefaultSelectionType_);
        set fromPage(arg0: number);
        set printer(arg0: string);
        set destination(arg0: Internal.JobAttributes$DestinationType_);
        set minPage(arg0: number);
        set sides(arg0: Internal.JobAttributes$SidesType_);
        set multipleDocumentHandling(arg0: Internal.JobAttributes$MultipleDocumentHandlingType_);
        set maxPage(arg0: number);
        set toPage(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type JobAttributes_ = JobAttributes;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.task.Task
    */
    abstract class Task extends Internal.QuestObject {
        autoSubmitOnPlayerTick(): number;
        addTitleInMouseOverText(): boolean;
        deleteChildren(): void;
        submitTask(teamData: Internal.TeamData_, player: Internal.ServerPlayer_, craftedItem: Internal.ItemStack_): void;
        submitTask(teamData: Internal.TeamData_, player: Internal.ServerPlayer_): void;
        createSubGroup(group: Internal.ConfigGroup_): Internal.ConfigGroup;
        forceProgress(teamData: Internal.TeamData_, progressChange: Internal.ProgressChange_): void;
        drawGUI(teamData: Internal.TeamData_, matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        getRelativeProgressFromChildren(data: Internal.TeamData_): number;
        submitItemsOnInventoryChange(): boolean;
        getAltIcon(): Internal.Icon;
        getObjectType(): Internal.QuestObjectType;
        getParentID(): number;
        editedFromGUI(): void;
        refreshJEI(): number;
        getQuestChapter(): Internal.Chapter;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        getQuestFile(): Internal.QuestFile;
        getButtonText(): Internal.MutableComponent;
        formatProgress(teamData: Internal.TeamData_, progress: number): string;
        checkOnLogin(): boolean;
        formatMaxProgress(): string;
        addMouseOverText(list: Internal.TooltipList_, teamData: Internal.TeamData_): void;
        onStarted(data: Internal.QuestProgressEventData_<any>): void;
        getIngredient(): any;
        getAltTitle(): net.minecraft.network.chat.Component;
        getType(): Internal.TaskType;
        onButtonClicked(button: Internal.Button_, canClick: boolean): void;
        getMaxProgress(): number;
        deleteSelf(): void;
        consumesResources(): boolean;
        onCreated(): void;
        cacheProgress(): boolean;
        canInsertItem(): boolean;
        hideProgressNumbers(): boolean;
        readonly "quest" : Internal.Quest;
        get buttonText(): Internal.MutableComponent;
        get ingredient(): any;
        get maxProgress(): number;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get type(): Internal.TaskType;
        get parentID(): number;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        get questChapter(): Internal.Chapter;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Task_ = Task;
    /**
    * @javaClass net.minecraftforge.event.entity.living.ZombieEvent
    */
    class ZombieEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getSummoner(): Internal.Zombie;
        get listenerList(): Internal.ListenerList;
        get summoner(): Internal.Zombie;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ZombieEvent_ = ZombieEvent;
    /**
    * @javaClass java.lang.module.ModuleReader
    */
    interface ModuleReader extends Internal.Closeable {
        read(arg0: string): Internal.Optional<Internal.ByteBuffer>;
        release(arg0: Internal.ByteBuffer_): void;
        find(arg0: string): Internal.Optional<Internal.URI>;
        list(): Internal.Stream<string>;
        close(): void;
        open(arg0: string): Internal.Optional<Internal.InputStream>;
    }
    type ModuleReader_ = ModuleReader;
    /**
    * @javaClass com.simibubi.create.foundation.tileEntity.SyncedTileEntity
    */
    abstract class SyncedTileEntity extends Internal.BlockEntity {
        writeClient(arg0: Internal.CompoundTag_): Internal.CompoundTag;
        causeBlockUpdate(): void;
        getUpdatePacket(): Internal.ClientboundBlockEntityDataPacket;
        sendData(): void;
        notifyUpdate(): void;
        containedChunk(): Internal.LevelChunk;
        packetTarget(): Internal.PacketDistributor$PacketTarget;
        onDataPacket(arg0: Internal.Connection_, arg1: Internal.ClientboundBlockEntityDataPacket_): void;
        readClient(arg0: Internal.CompoundTag_): void;
        handleUpdateTag(arg0: Internal.CompoundTag_): void;
        get updatePacket(): Internal.ClientboundBlockEntityDataPacket;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SyncedTileEntity_ = SyncedTileEntity;
    /**
    * @javaClass dev.latvian.mods.rhino.classdata.MethodSignature
    */
    class MethodSignature {
        hashCode(): number;
        static of(... types: Internal.Class_<any>[]): this;
        equals(obj: any): boolean;
        toString(): string;
        matches(actualArguments: Internal.MethodSignature_, cx: Internal.Context_): boolean;
        static readonly "FLOAT" : Internal.MethodSignature;
        readonly "types" : typeof any[];
        static readonly "CHAR" : Internal.MethodSignature;
        static readonly "OBJECT" : Internal.MethodSignature;
        static readonly "INT" : Internal.MethodSignature;
        static readonly "BOOLEAN" : Internal.MethodSignature;
        static readonly "SHORT" : Internal.MethodSignature;
        static readonly "BYTE" : Internal.MethodSignature;
        static readonly "STRING" : Internal.MethodSignature;
        static readonly "DOUBLE" : Internal.MethodSignature;
        static readonly "OBJECT_ARRAY" : Internal.MethodSignature;
        static readonly "EMPTY" : Internal.MethodSignature;
        static readonly "LONG" : Internal.MethodSignature;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MethodSignature_ = MethodSignature;
    /**
    * @javaClass com.jozufozu.flywheel.api.instance.Instance
    */
    interface Instance {
        getWorldPosition(): BlockPos;
    }
    type Instance_ = (() => BlockPos) | Instance;
    /**
    * @javaClass net.minecraft.client.renderer.entity.RenderLayerParent
    */
    interface RenderLayerParent <T, M> {
    }
    type RenderLayerParent_<T, M> = RenderLayerParent<T, M>;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2ByteFunction
    */
    interface Reference2ByteFunction <K> extends it.unimi.dsi.fastutil.Function<K, number>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: number): number;
        getByte(arg0: any): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Reference2ShortFunction<K>;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2ByteFunction;
        removeByte(arg0: any): number;
        andThenByte(arg0: Internal.Byte2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Reference2CharFunction<K>;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2ByteFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2ByteFunction;
    }
    type Reference2ByteFunction_<K> = ((arg0: any) => number) | Reference2ByteFunction<K>;
    /**
    * @javaClass net.minecraft.util.valueproviders.IntProvider
    */
    abstract class IntProvider {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IntProvider_ = IntProvider;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2CharFunction
    */
    interface Short2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2CharFunction;
    }
    type Short2CharFunction_ = ((arg0: number) => string) | Short2CharFunction;
    /**
    * @javaClass dev.latvian.mods.rhino.Context
    */
    class Context {
        static throwAsScriptRuntimeEx(e: Internal.Throwable_): Internal.RuntimeException;
        isSealed(): boolean;
        callFunctionWithContinuations(function_: dev.latvian.mods.rhino.Callable_, scope: Internal.Scriptable_, args: any[]): any;
        createClassLoader(parent: Internal.ClassLoader_): Internal.GeneratedClassLoader;
        executeScriptWithContinuations(script: Internal.Script_, scope: Internal.Scriptable_): any;
        getClassShutterSetter(): Internal.Context$ClassShutterSetter;
        getApplicationClassLoader(): Internal.ClassLoader;
        evaluateReader(scope: Internal.Scriptable_, in_: Internal.Reader_, sourceName: string, lineno: number, securityDomain: any): any;
        getTypeWrappers(): Internal.TypeWrappers;
        setRemapper(remapper: Internal.Remapper_): void;
        addCustomJavaToJsWrapper<T>(predicate: Internal.Predicate_<T>, provider: Internal.CustomJavaToJsWrapperProvider_<T>): void;
        addCustomJavaToJsWrapper<T>(type: Internal.Class_<T>, provider: Internal.CustomJavaToJsWrapperProvider_<T>): void;
        static javaToJS(value: any, scope: Internal.Scriptable_): any;
        compileReader(in_: Internal.Reader_, sourceName: string, lineno: number, securityDomain: any): Internal.Script;
        static toBoolean(value: any): boolean;
        static enter(): this;
        resumeContinuation(continuation: any, scope: Internal.Scriptable_, functionResult: any): any;
        captureContinuation(): Internal.ContinuationPending;
        static reportRuntimeError0(messageId: string): Internal.EvaluatorException;
        static reportRuntimeError1(messageId: string, arg1: any): Internal.EvaluatorException;
        static reportRuntimeError2(messageId: string, arg1: any, arg2: any): Internal.EvaluatorException;
        static reportRuntimeError3(messageId: string, arg1: any, arg2: any, arg3: any): Internal.EvaluatorException;
        static reportRuntimeError(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): Internal.EvaluatorException;
        static reportRuntimeError(message: string): Internal.EvaluatorException;
        hasTypeWrappers(): boolean;
        getInstructionObserverThreshold(): number;
        getThreadLocal(key: any): any;
        getRemapper(): Internal.Remapper;
        removePropertyChangeListener(l: Internal.PropertyChangeListener_): void;
        static getUndefinedValue(): any;
        putThreadLocal(key: any, value: any): void;
        setClassShutter(shutter: Internal.ClassShutter_): void;
        static exit(): void;
        getClassDataCache(): Internal.ClassDataCache;
        getElements(object: Internal.Scriptable_): any[];
        setInstructionObserverThreshold(threshold: number): void;
        static reportRuntimeError4(messageId: string, arg1: any, arg2: any, arg3: any, arg4: any): Internal.EvaluatorException;
        hasFeature(featureIndex: number): boolean;
        initSafeStandardObjects(): Internal.ScriptableObject;
        initSafeStandardObjects(scope: Internal.ScriptableObject_): Internal.Scriptable;
        initSafeStandardObjects(scope: Internal.ScriptableObject_, sealed: boolean): Internal.ScriptableObject;
        static toNumber(value: any): number;
        setLocale(loc: Internal.Locale_): Internal.Locale;
        initStandardObjects(): Internal.ScriptableObject;
        initStandardObjects(scope: Internal.ScriptableObject_, sealed: boolean): Internal.ScriptableObject;
        initStandardObjects(scope: Internal.ScriptableObject_): Internal.Scriptable;
        isStrictMode(): boolean;
        setApplicationClassLoader(loader: Internal.ClassLoader_): void;
        getWrapFactory(): Internal.WrapFactory;
        seal(sealKey: any): void;
        setGenerateObserverCount(generateObserverCount: boolean): void;
        setWrapFactory(wrapFactory: Internal.WrapFactory_): void;
        evaluateString(scope: Internal.Scriptable_, source: string, sourceName: string, lineno: number, securityDomain: any): any;
        compileFunction(scope: Internal.Scriptable_, source: string, sourceName: string, lineno: number, securityDomain: any): dev.latvian.mods.rhino.Function;
        setErrorReporter(reporter: Internal.ErrorReporter_): Internal.ErrorReporter;
        getClassShutter(): Internal.ClassShutter;
        newObject(scope: Internal.Scriptable_, constructorName: string, args: any[]): Internal.Scriptable;
        newObject(scope: Internal.Scriptable_, constructorName: string): Internal.Scriptable;
        newObject(scope: Internal.Scriptable_): Internal.Scriptable;
        static jsToJava(cx: Internal.Context_, value: any, desiredType: Internal.Class_<any>): any;
        static jsToJava(value: any, desiredType: Internal.Class_<any>): any;
        static toObject(value: any, scope: Internal.Scriptable_): Internal.Scriptable;
        static getSourcePositionFromStack(linep: number[]): string;
        wrapCustomJavaToJs(javaObject: any): Internal.CustomJavaToJsWrapper;
        addPropertyChangeListener(l: Internal.PropertyChangeListener_): void;
        static reportWarning(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): void;
        static reportWarning(message: string): void;
        static reportWarning(message: string, t: Internal.Throwable_): void;
        setLanguageVersion(version: number): void;
        stringIsCompilableUnit(source: string): boolean;
        removeThreadLocal(key: any): void;
        static getCurrentContext(): this;
        newArray(scope: Internal.Scriptable_, length: number): Internal.Scriptable;
        newArray(scope: Internal.Scriptable_, elements: any[]): Internal.Scriptable;
        static reportError(message: string, sourceName: string, lineno: number, lineSource: string, lineOffset: number): void;
        static reportError(message: string): void;
        getFactory(): Internal.ContextFactory;
        getErrorReporter(): Internal.ErrorReporter;
        static call(factory: Internal.ContextFactory_, callable: dev.latvian.mods.rhino.Callable_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        getMaximumInterpreterStackDepth(): number;
        setMaximumInterpreterStackDepth(max: number): void;
        compileString(source: string, sourceName: string, lineno: number, securityDomain: any): Internal.Script;
        static toString(value: any): string;
        unseal(sealKey: any): void;
        getLocale(): Internal.Locale;
        static getContext(): this;
        static enterWithNewFactory(): this;
        getImplementationVersion(): string;
        static readonly "FEATURE_INTEGER_WITHOUT_DECIMAL_PLACE" : 18;
        static readonly "FEATURE_ENHANCED_JAVA_ACCESS" : 13;
        static readonly "FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER" : 3;
        static readonly "FEATURE_DYNAMIC_SCOPE" : 7;
        static readonly "FEATURE_LITTLE_ENDIAN" : 19;
        static readonly "FEATURE_THREAD_SAFE_OBJECTS" : 17;
        "generateObserverCount" : boolean;
        static readonly "FEATURE_STRICT_MODE" : 11;
        static readonly "FEATURE_WARNING_AS_ERROR" : 12;
        static readonly "FEATURE_STRICT_EVAL" : 9;
        static readonly "FEATURE_LOCATION_INFORMATION_IN_ERROR" : 10;
        static readonly "errorReporterProperty" : "error reporter";
        static readonly "FEATURE_V8_EXTENSIONS" : 14;
        static readonly "FEATURE_STRICT_VARS" : 8;
        static readonly "FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME" : 2;
        static readonly "FEATURE_PARENT_PROTO_PROPERTIES" : 5;
        static readonly "languageVersionProperty" : "language version";
        static readonly "emptyArgs" : any[];
        get factory(): Internal.ContextFactory;
        get undefinedValue(): any;
        get implementationVersion(): string;
        get currentContext(): this;
        get sealed(): boolean;
        get strictMode(): boolean;
        get maximumInterpreterStackDepth(): number;
        get classDataCache(): Internal.ClassDataCache;
        get locale(): Internal.Locale;
        get typeWrappers(): Internal.TypeWrappers;
        get classShutterSetter(): Internal.Context$ClassShutterSetter;
        get remapper(): Internal.Remapper;
        get errorReporter(): Internal.ErrorReporter;
        get applicationClassLoader(): Internal.ClassLoader;
        get wrapFactory(): Internal.WrapFactory;
        get context(): this;
        get instructionObserverThreshold(): number;
        get classShutter(): Internal.ClassShutter;
        set remapper(remapper: Internal.Remapper_);
        set errorReporter(reporter: Internal.ErrorReporter_);
        set languageVersion(version: number);
        set applicationClassLoader(loader: Internal.ClassLoader_);
        set wrapFactory(wrapFactory: Internal.WrapFactory_);
        set maximumInterpreterStackDepth(max: number);
        set locale(loc: Internal.Locale_);
        set instructionObserverThreshold(threshold: number);
        set classShutter(shutter: Internal.ClassShutter_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Context_ = Context;
    /**
    * @javaClass java.io.Writer
    */
    abstract class Writer implements Internal.Appendable, Internal.Closeable, Internal.Flushable {
        flush(): void;
        static nullWriter(): this;
        close(): void;
        write(arg0: string, arg1: number, arg2: number): void;
        write(arg0: number): void;
        write(arg0: string): void;
        write(arg0: string[], arg1: number, arg2: number): void;
        write(arg0: string[]): void;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: string): this;
        append(arg0: Internal.CharSequence_): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Writer_ = Writer;
    /**
    * @javaClass net.minecraftforge.client.event.RenderArmEvent
    */
    class RenderArmEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getPlayer(): Internal.AbstractClientPlayer;
        getMultiBufferSource(): Internal.MultiBufferSource;
        isCancelable(): boolean;
        getArm(): Internal.HumanoidArm;
        getPackedLight(): number;
        getPoseStack(): Internal.PoseStack;
        get multiBufferSource(): Internal.MultiBufferSource;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get arm(): Internal.HumanoidArm;
        get player(): Internal.AbstractClientPlayer;
        get packedLight(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderArmEvent_ = RenderArmEvent;
    /**
    * Fired when you need to add, change tags of things.
    *
    * However, due to the type erasure of Java, Probe can not determine what
    * can be used here, please refer to the tag string itself.
    * @javaClass dev.latvian.mods.kubejs.server.TagEventJS
    */
    class TagEventJS <T> extends Internal.EventJS {
        add(tag: ResourceLocation_, ... ids: string[]): Internal.TagEventJS$TagWrapper<>;
        removeAll(tag: ResourceLocation_): Internal.TagEventJS$TagWrapper<>;
        post(event: string): void;
        getType(): string;
        removeAllTagsFrom(... ids: string[]): void;
        get(id: ResourceLocation_): Internal.TagEventJS$TagWrapper<>;
        setGlobalPriorityList(o: any): void;
        remove(tag: ResourceLocation_, ... ids: string[]): Internal.TagEventJS$TagWrapper<>;
        get type(): string;
        set globalPriorityList(o: any);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when you need to add, change tags of things.
    *
    * However, due to the type erasure of Java, Probe can not determine what
    * can be used here, please refer to the tag string itself.
    */
    type TagEventJS_<T> = TagEventJS<T>;
    /**
    * @javaClass com.mojang.datafixers.Products$P10
    */
    class Products$P10 <F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function10_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function10_<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>>): Internal.App<F, R>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P10_<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> = Products$P10<F, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityJoinWorldEvent
    */
    class EntityJoinWorldEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        loadedFromDisk(): boolean;
        getWorld(): Internal.Level;
        isCancelable(): boolean;
        get world(): Internal.Level;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityJoinWorldEvent_ = EntityJoinWorldEvent;
    /**
    * @javaClass java.util.function.Predicate
    */
    interface Predicate <T> {
        not<T>(arg0: Internal.Predicate_<T>): Internal.Predicate<T>;
        or(arg0: Internal.Predicate_<T>): Internal.Predicate<T>;
        test(arg0: T): boolean;
        and(arg0: Internal.Predicate_<T>): Internal.Predicate<T>;
        negate(): Internal.Predicate<T>;
        isEqual<T>(arg0: any): Internal.Predicate<T>;
    }
    type Predicate_<T> = ((arg0: T) => boolean) | Predicate<T>;
    /**
    * @javaClass java.time.temporal.TemporalQuery
    */
    interface TemporalQuery <R> {
        queryFrom(arg0: Internal.TemporalAccessor_): R;
    }
    type TemporalQuery_<R> = ((arg0: Internal.TemporalAccessor) => R) | TemporalQuery<R>;
    /**
    * @javaClass com.electronwill.nightconfig.core.UnmodifiableConfig
    */
    interface UnmodifiableConfig {
        getShortOrElse(arg0: string, arg1: number): number;
        getShortOrElse(arg0: Internal.List_<string>, arg1: number): number;
        getByte(arg0: Internal.List_<string>): number;
        getByte(arg0: string): number;
        getEnum<T>(arg0: string, arg1: Internal.Class_<T>): T;
        getEnum<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_): T;
        getEnum<T>(arg0: string, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_): T;
        getEnum<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>): T;
        getLongOrElse(arg0: Internal.List_<string>, arg1: number): number;
        getLongOrElse(arg0: string, arg1: number): number;
        getLongOrElse(arg0: Internal.List_<string>, arg1: Internal.LongSupplier_): number;
        getLongOrElse(arg0: string, arg1: Internal.LongSupplier_): number;
        getByteOrElse(arg0: string, arg1: number): number;
        getByteOrElse(arg0: Internal.List_<string>, arg1: number): number;
        get<T>(arg0: string): T;
        get<T>(arg0: Internal.List_<string>): T;
        valueMap(): Internal.Map<string, any>;
        getEnumOrElse<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_, arg3: Internal.Supplier_<T>): T;
        getEnumOrElse<T>(arg0: string, arg1: T, arg2: Internal.EnumGetMethod_): T;
        getEnumOrElse<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>, arg2: Internal.Supplier_<T>): T;
        getEnumOrElse<T>(arg0: string, arg1: Internal.Class_<T>, arg2: Internal.Supplier_<T>): T;
        getEnumOrElse<T>(arg0: string, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_, arg3: Internal.Supplier_<T>): T;
        getEnumOrElse<T>(arg0: Internal.List_<string>, arg1: T): T;
        getEnumOrElse<T>(arg0: Internal.List_<string>, arg1: T, arg2: Internal.EnumGetMethod_): T;
        getEnumOrElse<T>(arg0: string, arg1: T): T;
        getOrElse<T>(arg0: Internal.List_<string>, arg1: T): T;
        getOrElse<T>(arg0: string, arg1: Internal.Supplier_<T>): T;
        getOrElse<T>(arg0: string, arg1: T): T;
        getOrElse<T>(arg0: Internal.List_<string>, arg1: Internal.Supplier_<T>): T;
        getIntOrElse(arg0: string, arg1: Internal.IntSupplier_): number;
        getIntOrElse(arg0: string, arg1: number): number;
        getIntOrElse(arg0: Internal.List_<string>, arg1: Internal.IntSupplier_): number;
        getIntOrElse(arg0: Internal.List_<string>, arg1: number): number;
        entrySet(): Internal.Set<Internal.UnmodifiableConfig$Entry>;
        apply<T>(arg0: string): T;
        apply<T>(arg0: Internal.List_<string>): T;
        getShort(arg0: string): number;
        getShort(arg0: Internal.List_<string>): number;
        configFormat(): Internal.ConfigFormat<any>;
        isEmpty(): boolean;
        getOptionalInt(arg0: Internal.List_<string>): Internal.OptionalInt;
        getOptionalInt(arg0: string): Internal.OptionalInt;
        getCharOrElse(arg0: string, arg1: string): string;
        getCharOrElse(arg0: Internal.List_<string>, arg1: string): string;
        getLong(arg0: string): number;
        getLong(arg0: Internal.List_<string>): number;
        getInt(arg0: string): number;
        getInt(arg0: Internal.List_<string>): number;
        getChar(arg0: string): string;
        getChar(arg0: Internal.List_<string>): string;
        getOptional<T>(arg0: Internal.List_<string>): Internal.Optional<T>;
        getOptional<T>(arg0: string): Internal.Optional<T>;
        contains(arg0: Internal.List_<string>): boolean;
        contains(arg0: string): boolean;
        size(): number;
        isNull(arg0: Internal.List_<string>): boolean;
        isNull(arg0: string): boolean;
        getRaw<T>(arg0: Internal.List_<string>): T;
        getRaw<T>(arg0: string): T;
        getOptionalEnum<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>): Internal.Optional<T>;
        getOptionalEnum<T>(arg0: string, arg1: Internal.Class_<T>): Internal.Optional<T>;
        getOptionalEnum<T>(arg0: string, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_): Internal.Optional<T>;
        getOptionalEnum<T>(arg0: Internal.List_<string>, arg1: Internal.Class_<T>, arg2: Internal.EnumGetMethod_): Internal.Optional<T>;
        getOptionalLong(arg0: string): Internal.OptionalLong;
        getOptionalLong(arg0: Internal.List_<string>): Internal.OptionalLong;
    }
    type UnmodifiableConfig_ = UnmodifiableConfig;
    /**
    * @javaClass vazkii.botania.common.PlayerAccess
    */
    interface PlayerAccess {
        botania$setCritTarget(arg0: Internal.LivingEntity_): void;
    }
    type PlayerAccess_ = ((arg0: Internal.LivingEntity) => void) | PlayerAccess;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2ByteFunction
    */
    interface Double2ByteFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.DoubleToIntFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Byte2ShortFunction_): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2ByteFunction;
        andThenInt(arg0: Internal.Byte2IntFunction_): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2ByteFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Byte2DoubleFunction_): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Byte2ObjectFunction_<T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Byte2LongFunction_): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2ByteFunction;
        andThenByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenFloat(arg0: Internal.Byte2FloatFunction_): Internal.Double2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2ByteFunction;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2ByteFunction;
        andThenChar(arg0: Internal.Byte2CharFunction_): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2ByteFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2ByteFunction;
        andThenReference<T>(arg0: Internal.Byte2ReferenceFunction_<T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2ByteFunction;
        composeDouble(arg0: Internal.Double2DoubleFunction_): this;
    }
    type Double2ByteFunction_ = ((arg0: number) => number) | Double2ByteFunction;
    /**
    * @javaClass com.jozufozu.flywheel.event.ReloadRenderersEvent
    */
    class ReloadRenderersEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.ClientLevel;
        get world(): Internal.ClientLevel;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ReloadRenderersEvent_ = ReloadRenderersEvent;
    /**
    * @javaClass net.minecraftforge.event.world.BlockEvent
    */
    class BlockEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.LevelAccessor;
        getState(): Internal.BlockState;
        getPos(): BlockPos;
        get world(): Internal.LevelAccessor;
        get listenerList(): Internal.ListenerList;
        get pos(): BlockPos;
        get state(): Internal.BlockState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BlockEvent_ = BlockEvent;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingSpawnEvent$AllowDespawn
    */
    class LivingSpawnEvent$AllowDespawn extends Internal.LivingSpawnEvent {
        getListenerList(): Internal.ListenerList;
        hasResult(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingSpawnEvent$AllowDespawn_ = LivingSpawnEvent$AllowDespawn;
    /**
    * @javaClass java.security.Principal
    */
    interface Principal {
        getName(): string;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        implies(arg0: Internal.Subject_): boolean;
    }
    type Principal_ = Principal;
    /**
    * @javaClass dev.latvian.mods.kubejs.misc.ParticleTypeBuilder
    */
    class ParticleTypeBuilder extends Internal.BuilderBase<Internal.ParticleType<any>> {
        overrideLimiter(o: boolean): this;
        getRegistryType(): Internal.RegistryObjectBuilderTypes<Internal.ParticleType<any>>;
        deserializer(d: Internal.ParticleOptions$Deserializer_<any>): this;
        createObject(): Internal.ParticleType<any>;
        get registryType(): Internal.RegistryObjectBuilderTypes<Internal.ParticleType<any>>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParticleTypeBuilder_ = ParticleTypeBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.PickaxeItemBuilder
    */
    class PickaxeItemBuilder extends Internal.HandheldItemBuilder {
        createObject(): Internal.Item;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PickaxeItemBuilder_ = PickaxeItemBuilder;
    /**
    * @javaClass net.minecraftforge.api.distmarker.Dist
    */
    class Dist extends Internal.Enum<Internal.Dist> {
        isDedicatedServer(): boolean;
        static valueOf(arg0: string): this;
        static values(): Internal.Dist[];
        isClient(): boolean;
        static readonly "DEDICATED_SERVER" : Internal.Dist;
        static readonly "CLIENT" : Internal.Dist;
        get dedicatedServer(): boolean;
        get client(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Dist_ = "dedicated_server" | "client" | Dist;
    /**
    * @javaClass net.minecraft.world.entity.projectile.ItemSupplier
    */
    interface ItemSupplier {
    }
    type ItemSupplier_ = ItemSupplier;
    /**
    * @javaClass java.awt.dnd.DragSourceDropEvent
    */
    class DragSourceDropEvent extends Internal.DragSourceEvent {
        getDropSuccess(): boolean;
        getDropAction(): number;
        get dropSuccess(): boolean;
        get dropAction(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragSourceDropEvent_ = DragSourceDropEvent;
    /**
    * @javaClass net.minecraftforge.common.util.NonNullConsumer
    */
    interface NonNullConsumer <T> {
        accept(arg0: T): void;
    }
    type NonNullConsumer_<T> = ((arg0: T) => void) | NonNullConsumer<T>;
    /**
    * @javaClass net.minecraft.world.entity.LivingEntity
    */
    abstract class LivingEntity extends Internal.Entity implements Internal.LivingEntityKJS, Internal.AccessorLivingEntity, Internal.LivingEntityAccessor {
        invalidateCaps(): void;
        handler$zdo000$curio$canFreeze(arg0: Internal.CallbackInfoReturnable_<any>): void;
        shouldRiderFaceForward(arg0: Internal.Player_): boolean;
        getCapability<T>(arg0: Internal.Capability_<T>, arg1: Internal.Direction_): Internal.LazyOptional<T>;
        curePotionEffects(arg0: Internal.ItemStack_): boolean;
        reviveCaps(): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntity_ = LivingEntity;
    /**
    * @javaClass dev.latvian.mods.kubejs.RegistryObjectBuilderTypes$RegistryEventJS
    */
    class RegistryObjectBuilderTypes$RegistryEventJS <T> extends Internal.StartupEventJS {
        create(id: string, type: string): Internal.BuilderBase<T>;
        create(id: string): Internal.BuilderBase<T>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RegistryObjectBuilderTypes$RegistryEventJS_<T> = RegistryObjectBuilderTypes$RegistryEventJS<T>;
    /**
    * Fired when the block loot table is registering.
    * @javaClass dev.latvian.mods.kubejs.loot.BlockLootEventJS
    */
    class BlockLootEventJS extends Internal.LootEventJS {
        addSimpleBlock(blocks: BlockStatePredicate_, item: Internal.ItemStack_): void;
        addSimpleBlock(blocks: BlockStatePredicate_): void;
        build(blocks: BlockStatePredicate_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getType(): string;
        addBlock(blocks: BlockStatePredicate_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getDirectory(): string;
        modifyBlock(blocks: BlockStatePredicate_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the block loot table is registering.
    */
    type BlockLootEventJS_ = BlockLootEventJS;
    /**
    * @javaClass net.minecraft.world.level.entity.EntityTickList
    */
    class EntityTickList {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityTickList_ = EntityTickList;
    /**
    * @javaClass net.minecraft.world.Clearable
    */
    interface Clearable {
    }
    type Clearable_ = Clearable;
    /**
    * @javaClass cpw.mods.jarhandling.SecureJar$Provider
    */
    class SecureJar$Provider extends Internal.Record {
        static fromPath(arg0: Internal.Path_, arg1: Internal.BiPredicate_<string, string>): this;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        serviceName(): string;
        providers(): Internal.List<string>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SecureJar$Provider_ = SecureJar$Provider;
    /**
    * @javaClass com.jozufozu.flywheel.util.transform.Transform
    */
    interface Transform <Self> extends Internal.Translate<Self>, Internal.Rotate<Self>, Internal.Scale<Self> {
        mulNormal(arg0: Internal.Matrix3f_): Self;
        transform(arg0: Internal.PoseStack_): Self;
        transform(arg0: Internal.Matrix4f_, arg1: Internal.Matrix3f_): Self;
        rotateCentered(arg0: Internal.Direction_, arg1: number): Self;
        rotateCentered(arg0: Internal.Quaternion_): Self;
        mulPose(arg0: Internal.Matrix4f_): Self;
    }
    type Transform_<Self> = Transform<Self>;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2ShortFunction
    */
    interface Short2ShortFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        andThenShort(arg0: Internal.Short2ShortFunction_): this;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2ShortFunction;
        andThenInt(arg0: Internal.Short2IntFunction_): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2ShortFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: any): number;
        remove(arg0: number): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Short2DoubleFunction_): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Short2ObjectFunction_<T>): Internal.Short2ObjectFunction<T>;
        identity(): this;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Short2LongFunction_): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2ShortFunction;
        andThenByte(arg0: Internal.Short2ByteFunction_): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Short2FloatFunction_): Internal.Short2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2ShortFunction;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2ShortFunction;
        andThenChar(arg0: Internal.Short2CharFunction_): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2ShortFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ShortFunction_): this;
        andThenReference<T>(arg0: Internal.Short2ReferenceFunction_<T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2ShortFunction;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2ShortFunction;
    }
    type Short2ShortFunction_ = ((arg0: number) => number) | Short2ShortFunction;
    /**
    * @javaClass com.electronwill.nightconfig.core.UnmodifiableCommentedConfig$Entry
    */
    interface UnmodifiableCommentedConfig$Entry extends Internal.UnmodifiableConfig$Entry {
        getComment(): string;
    }
    type UnmodifiableCommentedConfig$Entry_ = (() => string) | UnmodifiableCommentedConfig$Entry;
    /**
    * @javaClass net.minecraftforge.common.extensions.IForgeBucketPickup
    */
    interface IForgeBucketPickup {
        getPickupSound(arg0: Internal.BlockState_): Internal.Optional<Internal.SoundEvent>;
    }
    type IForgeBucketPickup_ = IForgeBucketPickup;
    /**
    * @javaClass net.minecraftforge.forgespi.locating.IModFile$Type
    */
    class IModFile$Type extends Internal.Enum<Internal.IModFile$Type> {
        static valueOf(arg0: string): this;
        static values(): Internal.IModFile$Type[];
        static readonly "MOD" : Internal.IModFile$Type;
        static readonly "GAMELIBRARY" : Internal.IModFile$Type;
        static readonly "LIBRARY" : Internal.IModFile$Type;
        static readonly "LANGPROVIDER" : Internal.IModFile$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IModFile$Type_ = "gamelibrary" | "mod" | "library" | "langprovider" | IModFile$Type;
    /**
    * @javaClass net.minecraft.client.resources.model.ModelResourceLocation
    */
    class ModelResourceLocation extends ResourceLocation {
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ModelResourceLocation_ = ModelResourceLocation;
    /**
    * @javaClass com.simibubi.create.foundation.fluid.FluidIngredient
    */
    abstract class FluidIngredient implements Internal.Predicate<Internal.FluidStack> {
        serialize(): Internal.JsonObject;
        static fromTag(arg0: Internal.TagKey_<Internal.Fluid_>, arg1: number): this;
        static read(arg0: Internal.FriendlyByteBuf_): this;
        test(arg0: Internal.FluidStack_): boolean;
        getRequiredAmount(): number;
        static isFluidIngredient(arg0: Internal.JsonElement_): boolean;
        static fromFluid(arg0: Internal.Fluid_, arg1: number): this;
        write(arg0: Internal.FriendlyByteBuf_): void;
        static fromFluidStack(arg0: Internal.FluidStack_): this;
        static deserialize(arg0: Internal.JsonElement_): this;
        getMatchingFluidStacks(): Internal.List<Internal.FluidStack>;
        "matchingFluidStacks" : Internal.List<Internal.FluidStack>;
        static readonly "EMPTY" : Internal.FluidIngredient;
        get requiredAmount(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidIngredient_ = FluidIngredient;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.TeamPropertyType$FromNet
    */
    interface TeamPropertyType$FromNet <Y> {
        apply(arg0: ResourceLocation_, arg1: Internal.FriendlyByteBuf_): Internal.TeamProperty<Y>;
    }
    type TeamPropertyType$FromNet_<Y> = ((arg0: ResourceLocation, arg1: Internal.FriendlyByteBuf) => Internal.TeamProperty<Y>) | TeamPropertyType$FromNet<Y>;
    /**
    * @javaClass java.awt.font.FontRenderContext
    */
    class FontRenderContext {
        isTransformed(): boolean;
        usesFractionalMetrics(): boolean;
        hashCode(): number;
        equals(arg0: any): boolean;
        equals(arg0: Internal.FontRenderContext_): boolean;
        getTransformType(): number;
        getFractionalMetricsHint(): any;
        getTransform(): Internal.AffineTransform;
        isAntiAliased(): boolean;
        getAntiAliasingHint(): any;
        get transform(): Internal.AffineTransform;
        get antiAliased(): boolean;
        get transformed(): boolean;
        get transformType(): number;
        get fractionalMetricsHint(): any;
        get antiAliasingHint(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FontRenderContext_ = FontRenderContext;
    /**
    * @javaClass java.text.ParsePosition
    */
    class ParsePosition {
        getIndex(): number;
        setIndex(arg0: number): void;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        setErrorIndex(arg0: number): void;
        getErrorIndex(): number;
        get errorIndex(): number;
        get index(): number;
        set errorIndex(arg0: number);
        set index(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParsePosition_ = ParsePosition;
    /**
    * @javaClass com.electronwill.nightconfig.core.UnmodifiableCommentedConfig$CommentNode
    */
    class UnmodifiableCommentedConfig$CommentNode {
        getChildren(): Internal.Map<string, Internal.UnmodifiableCommentedConfig$CommentNode>;
        getComment(): string;
        get children(): Internal.Map<string, Internal.UnmodifiableCommentedConfig$CommentNode>;
        get comment(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type UnmodifiableCommentedConfig$CommentNode_ = UnmodifiableCommentedConfig$CommentNode;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$BackgroundDrawnEvent
    */
    class ScreenEvent$BackgroundDrawnEvent extends Internal.ScreenEvent {
        getListenerList(): Internal.ListenerList;
        getPoseStack(): Internal.PoseStack;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$BackgroundDrawnEvent_ = ScreenEvent$BackgroundDrawnEvent;
    /**
    * @javaClass java.nio.file.WatchService
    */
    interface WatchService extends Internal.Closeable {
        take(): Internal.WatchKey;
        poll(arg0: number, arg1: Internal.TimeUnit_): Internal.WatchKey;
        poll(): Internal.WatchKey;
        close(): void;
    }
    type WatchService_ = WatchService;
    /**
    * @javaClass it.unimi.dsi.fastutil.bytes.Byte2FloatFunction
    */
    interface Byte2FloatFunction extends it.unimi.dsi.fastutil.Function<number, number>, Internal.IntToDoubleFunction {
        getOrDefault(arg0: any, arg1: number): number;
        getOrDefault(arg0: number, arg1: number): number;
        applyAsDouble(arg0: number): number;
        andThenShort(arg0: Internal.Float2ShortFunction_): Internal.Byte2ShortFunction;
        composeByte(arg0: Internal.Byte2ByteFunction_): this;
        andThenInt(arg0: Internal.Float2IntFunction_): Internal.Byte2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ByteFunction_<T>): Internal.Reference2FloatFunction<T>;
        andThen<T>(arg0: Internal.Function_<number, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: number): number;
        remove(arg0: number): number;
        remove(arg0: any): number;
        defaultReturnValue(arg0: number): void;
        defaultReturnValue(): number;
        andThenDouble(arg0: Internal.Float2DoubleFunction_): Internal.Byte2DoubleFunction;
        andThenObject<T>(arg0: Internal.Float2ObjectFunction_<T>): Internal.Byte2ObjectFunction<T>;
        get(arg0: any): number;
        get(arg0: number): number;
        andThenLong(arg0: Internal.Float2LongFunction_): Internal.Byte2LongFunction;
        composeLong(arg0: Internal.Long2ByteFunction_): Internal.Long2FloatFunction;
        andThenByte(arg0: Internal.Float2ByteFunction_): Internal.Byte2ByteFunction;
        andThenFloat(arg0: Internal.Float2FloatFunction_): this;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2ByteFunction_): Internal.Int2FloatFunction;
        composeFloat(arg0: Internal.Float2ByteFunction_): Internal.Float2FloatFunction;
        andThenChar(arg0: Internal.Float2CharFunction_): Internal.Byte2CharFunction;
        composeObject<T>(arg0: Internal.Object2ByteFunction_<T>): Internal.Object2FloatFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, number>;
        composeShort(arg0: Internal.Short2ByteFunction_): Internal.Short2FloatFunction;
        andThenReference<T>(arg0: Internal.Float2ReferenceFunction_<T>): Internal.Byte2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ByteFunction_): Internal.Char2FloatFunction;
        composeDouble(arg0: Internal.Double2ByteFunction_): Internal.Double2FloatFunction;
    }
    type Byte2FloatFunction_ = ((arg0: number) => number) | Byte2FloatFunction;
    /**
    * @javaClass net.minecraft.world.entity.monster.Zombie
    */
    class Zombie extends Internal.Monster {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Zombie_ = Zombie;
    /**
    * @javaClass dev.latvian.mods.kubejs.recipe.RecipeTypeRegistryEventJS
    */
    class RecipeTypeRegistryEventJS extends Internal.EventJS {
        registerShaped(id: ResourceLocation_): void;
        registerShapeless(id: ResourceLocation_): void;
        ignore(id: ResourceLocation_): void;
        register(id: ResourceLocation_, f: Internal.Supplier_<Internal.RecipeJS_>): void;
        register(type: Internal.RecipeTypeJS_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeTypeRegistryEventJS_ = RecipeTypeRegistryEventJS;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$DrawScreenEvent$Post
    */
    class ScreenEvent$DrawScreenEvent$Post extends Internal.ScreenEvent$DrawScreenEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$DrawScreenEvent$Post_ = ScreenEvent$DrawScreenEvent$Post;
    /**
    * Fired when the inventory of player is changed.
    * @javaClass dev.latvian.mods.kubejs.player.InventoryChangedEventJS
    */
    class InventoryChangedEventJS extends Internal.PlayerEventJS {
        getSlot(): number;
        getItem(): Internal.ItemStackJS;
        getEntity(): Internal.EntityJS;
        get item(): Internal.ItemStackJS;
        get slot(): number;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the inventory of player is changed.
    */
    type InventoryChangedEventJS_ = InventoryChangedEventJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.Double2ReferenceFunction
    */
    interface Double2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.DoubleFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Double2ShortFunction;
        composeByte(arg0: Internal.Byte2DoubleFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Double2IntFunction;
        composeReference<T>(arg0: Internal.Reference2DoubleFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Double2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Double2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Double2LongFunction;
        composeLong(arg0: Internal.Long2DoubleFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Double2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Double2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2DoubleFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2DoubleFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Double2CharFunction;
        composeObject<T>(arg0: Internal.Object2DoubleFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2DoubleFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Double2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2DoubleFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2DoubleFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Double2ReferenceFunction_<V> = ((arg0: number) => V) | Double2ReferenceFunction<V>;
    /**
    * @javaClass java.nio.LongBuffer
    */
    abstract class LongBuffer extends Internal.Buffer implements Internal.Comparable<Internal.LongBuffer> {
        hasArray(): boolean;
        compact(): this;
        clear(): this;
        duplicate(): this;
        compareTo(arg0: Internal.LongBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.LongBuffer_, arg2: number, arg3: number): this;
        put(arg0: Internal.LongBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        mismatch(arg0: Internal.LongBuffer_): number;
        equals(arg0: any): boolean;
        get(): number;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        reset(): this;
        arrayOffset(): number;
        toString(): string;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        static wrap(arg0: number[]): this;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        mark(): this;
        order(): Internal.ByteOrder;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LongBuffer_ = LongBuffer;
    /**
    * @javaClass vazkii.botania.mixin.client.AccessorAbstractContainerScreen
    */
    interface AccessorAbstractContainerScreen {
        getHoveredSlot(): Internal.Slot;
    }
    type AccessorAbstractContainerScreen_ = (() => Internal.Slot) | AccessorAbstractContainerScreen;
    /**
    * @javaClass dev.latvian.mods.kubejs.RegistryObjectBuilderTypes$BuilderFactory
    */
    interface RegistryObjectBuilderTypes$BuilderFactory <T> {
        createBuilder(arg0: ResourceLocation_): Internal.BuilderBase<T>;
    }
    type RegistryObjectBuilderTypes$BuilderFactory_<T> = ((arg0: ResourceLocation) => Internal.BuilderBase<T>) | RegistryObjectBuilderTypes$BuilderFactory<T>;
    /**
    * @javaClass java.awt.dnd.DragSource
    */
    class DragSource implements Internal.Serializable {
        removeDragSourceListener(arg0: Internal.DragSourceListener_): void;
        getListeners<T>(arg0: Internal.Class_<T>): T[];
        createDefaultDragGestureRecognizer(arg0: Internal.Component_, arg1: number, arg2: Internal.DragGestureListener_): Internal.DragGestureRecognizer;
        createDragGestureRecognizer<T>(arg0: Internal.Class_<T>, arg1: Internal.Component_, arg2: number, arg3: Internal.DragGestureListener_): T;
        static isDragImageSupported(): boolean;
        addDragSourceMotionListener(arg0: Internal.DragSourceMotionListener_): void;
        getDragSourceMotionListeners(): Internal.DragSourceMotionListener[];
        addDragSourceListener(arg0: Internal.DragSourceListener_): void;
        removeDragSourceMotionListener(arg0: Internal.DragSourceMotionListener_): void;
        static getDefaultDragSource(): this;
        getFlavorMap(): Internal.FlavorMap;
        static getDragThreshold(): number;
        startDrag(arg0: Internal.DragGestureEvent_, arg1: Internal.Cursor_, arg2: Internal.Image_, arg3: Internal.Point_, arg4: Internal.Transferable_, arg5: Internal.DragSourceListener_, arg6: Internal.FlavorMap_): void;
        startDrag(arg0: Internal.DragGestureEvent_, arg1: Internal.Cursor_, arg2: Internal.Transferable_, arg3: Internal.DragSourceListener_, arg4: Internal.FlavorMap_): void;
        startDrag(arg0: Internal.DragGestureEvent_, arg1: Internal.Cursor_, arg2: Internal.Image_, arg3: Internal.Point_, arg4: Internal.Transferable_, arg5: Internal.DragSourceListener_): void;
        startDrag(arg0: Internal.DragGestureEvent_, arg1: Internal.Cursor_, arg2: Internal.Transferable_, arg3: Internal.DragSourceListener_): void;
        getDragSourceListeners(): Internal.DragSourceListener[];
        static readonly "DefaultCopyNoDrop" : null;
        static readonly "DefaultMoveNoDrop" : null;
        static readonly "DefaultMoveDrop" : null;
        static readonly "DefaultLinkDrop" : null;
        static readonly "DefaultLinkNoDrop" : null;
        static readonly "DefaultCopyDrop" : null;
        get dragImageSupported(): boolean;
        get dragSourceMotionListeners(): Internal.DragSourceMotionListener[];
        get flavorMap(): Internal.FlavorMap;
        get dragThreshold(): number;
        get defaultDragSource(): this;
        get dragSourceListeners(): Internal.DragSourceListener[];
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DragSource_ = DragSource;
    /**
    * @javaClass java.net.SocketAddress
    */
    abstract class SocketAddress implements Internal.Serializable {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SocketAddress_ = SocketAddress;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ItemArmorTierEventJS
    */
    class ItemArmorTierEventJS extends Internal.StartupEventJS {
        add(id: string, parent: string, tier: Internal.Consumer_<Internal.MutableArmorTier_>): void;
        add(id: string, tier: Internal.Consumer_<Internal.MutableArmorTier_>): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemArmorTierEventJS_ = ItemArmorTierEventJS;
    /**
    * @javaClass com.mojang.datafixers.Products$P5
    */
    class Products$P5 <F, T1, T2, T3, T4, T5> {
        t4(): Internal.App<F, T4>;
        t5(): Internal.App<F, T5>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.Function5_<T1, T2, T3, T4, T5, R>): Internal.App<F, R>;
        apply<R>(arg0: Internal.Applicative_<F, any>, arg1: Internal.App_<F, Internal.Function5_<T1, T2, T3, T4, T5, R>>): Internal.App<F, R>;
        and<T6, T7>(arg0: Internal.Products$P2_<F, T6, T7>): Internal.Products$P7<F, T1, T2, T3, T4, T5, T6, T7>;
        and<T6, T7, T8>(arg0: Internal.Products$P3_<F, T6, T7, T8>): Internal.Products$P8<F, T1, T2, T3, T4, T5, T6, T7, T8>;
        and<T6>(arg0: Internal.App_<F, T6>): Internal.Products$P6<F, T1, T2, T3, T4, T5, T6>;
        t1(): Internal.App<F, T1>;
        t2(): Internal.App<F, T2>;
        t3(): Internal.App<F, T3>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Products$P5_<F, T1, T2, T3, T4, T5> = Products$P5<F, T1, T2, T3, T4, T5>;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEntityUseItemEvent$Finish
    */
    class LivingEntityUseItemEvent$Finish extends Internal.LivingEntityUseItemEvent {
        getListenerList(): Internal.ListenerList;
        setResultStack(arg0: Internal.ItemStack_): void;
        getResultStack(): Internal.ItemStack;
        get listenerList(): Internal.ListenerList;
        get resultStack(): Internal.ItemStack;
        set resultStack(arg0: Internal.ItemStack_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEntityUseItemEvent$Finish_ = LivingEntityUseItemEvent$Finish;
    /**
    * @javaClass net.minecraft.world.entity.ai.goal.WrappedGoal
    */
    class WrappedGoal extends Internal.Goal {
        hashCode(): number;
        equals(arg0: any): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WrappedGoal_ = WrappedGoal;
    /**
    * Fired when ticking on client side.
    * @javaClass dev.latvian.mods.kubejs.client.ClientTickEventJS
    */
    class ClientTickEventJS extends Internal.ClientEventJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when ticking on client side.
    */
    type ClientTickEventJS_ = ClientTickEventJS;
    /**
    * @javaClass java.awt.font.GlyphVector
    */
    abstract class GlyphVector implements Internal.Cloneable {
        setGlyphPosition(arg0: number, arg1: Internal.Point2D_): void;
        getGlyphCodes(arg0: number, arg1: number, arg2: number[]): number[];
        getGlyphPosition(arg0: number): Internal.Point2D;
        getGlyphPixelBounds(arg0: number, arg1: Internal.FontRenderContext_, arg2: number, arg3: number): Internal.Rectangle;
        getLogicalBounds(): Internal.Rectangle2D;
        getGlyphCharIndices(arg0: number, arg1: number, arg2: number[]): number[];
        getGlyphLogicalBounds(arg0: number): Internal.Shape;
        getPixelBounds(arg0: Internal.FontRenderContext_, arg1: number, arg2: number): Internal.Rectangle;
        getVisualBounds(): Internal.Rectangle2D;
        getNumGlyphs(): number;
        getGlyphTransform(arg0: number): Internal.AffineTransform;
        getGlyphCharIndex(arg0: number): number;
        getOutline(arg0: number, arg1: number): Internal.Shape;
        getOutline(): Internal.Shape;
        getGlyphJustificationInfo(arg0: number): Internal.GlyphJustificationInfo;
        performDefaultLayout(): void;
        getFontRenderContext(): Internal.FontRenderContext;
        getGlyphMetrics(arg0: number): Internal.GlyphMetrics;
        equals(arg0: Internal.GlyphVector_): boolean;
        getGlyphVisualBounds(arg0: number): Internal.Shape;
        getFont(): Internal.Font;
        getGlyphPositions(arg0: number, arg1: number, arg2: number[]): number[];
        getGlyphCode(arg0: number): number;
        getGlyphOutline(arg0: number): Internal.Shape;
        getGlyphOutline(arg0: number, arg1: number, arg2: number): Internal.Shape;
        setGlyphTransform(arg0: number, arg1: Internal.AffineTransform_): void;
        getLayoutFlags(): number;
        static readonly "FLAG_HAS_TRANSFORMS" : 1;
        static readonly "FLAG_HAS_POSITION_ADJUSTMENTS" : 2;
        static readonly "FLAG_MASK" : 15;
        static readonly "FLAG_COMPLEX_GLYPHS" : 8;
        static readonly "FLAG_RUN_RTL" : 4;
        get outline(): Internal.Shape;
        get logicalBounds(): Internal.Rectangle2D;
        get numGlyphs(): number;
        get fontRenderContext(): Internal.FontRenderContext;
        get visualBounds(): Internal.Rectangle2D;
        get font(): Internal.Font;
        get layoutFlags(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GlyphVector_ = GlyphVector;
    /**
    * @javaClass net.minecraftforge.client.event.RenderLivingEvent$Pre
    */
    class RenderLivingEvent$Pre <T, M> extends Internal.RenderLivingEvent<T, M> {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderLivingEvent$Pre_<T, M> = RenderLivingEvent$Pre<T, M>;
    /**
    * @javaClass java.util.RandomAccess
    */
    interface RandomAccess {
    }
    type RandomAccess_ = RandomAccess;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.math.PixelBuffer
    */
    class PixelBuffer {
        getSubimage(x: number, y: number, w: number, h: number): this;
        setPixels(p: number[]): void;
        setRGB(startX: number, startY: number, w: number, h: number, rgbArray: number[]): void;
        setRGB(startX: number, startY: number, buffer: Internal.PixelBuffer_): void;
        setRGB(x: number, y: number, col: number): void;
        getWidth(): number;
        fill(startX: number, startY: number, w: number, h: number, col: number): void;
        fill(col: number): void;
        toByteBuffer(alpha: boolean): Internal.ByteBuffer;
        getHeight(): number;
        toImage(type: number): Internal.BufferedImage;
        getPixels(): number[];
        hashCode(): number;
        equals(o: any): boolean;
        static from(img: Internal.BufferedImage_): this;
        static from(stream: Internal.InputStream_): this;
        copy(): this;
        getRGB(x: number, y: number): number;
        getRGB(startX: number, startY: number, w: number, h: number, p: number[]): number[];
        get pixels(): number[];
        get width(): number;
        get height(): number;
        set pixels(p: number[]);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PixelBuffer_ = PixelBuffer;
    /**
    * @javaClass dev.latvian.mods.itemfilters.item.ItemInventory
    */
    class ItemInventory implements net.minecraft.world.Container {
        getItems(): Internal.List<Internal.ItemStack>;
        save(): void;
        readonly "filter" : Internal.ItemStack;
        readonly "filterItem" : Internal.InventoryFilterItem;
        get items(): Internal.List<Internal.ItemStack>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemInventory_ = ItemInventory;
    /**
    * @javaClass java.nio.channels.ByteChannel
    */
    interface ByteChannel extends Internal.ReadableByteChannel, Internal.WritableByteChannel {
    }
    type ByteChannel_ = ByteChannel;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.custom.ArmorItemBuilder$Leggings
    */
    class ArmorItemBuilder$Leggings extends Internal.ArmorItemBuilder {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ArmorItemBuilder$Leggings_ = ArmorItemBuilder$Leggings;
    /**
    * @javaClass java.lang.reflect.AccessibleObject
    */
    class AccessibleObject implements Internal.AnnotatedElement {
        trySetAccessible(): boolean;
        isAccessible(): boolean;
        setAccessible(arg0: boolean): void;
        static setAccessible(arg0: Internal.AccessibleObject_[], arg1: boolean): void;
        getAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        getDeclaredAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        isAnnotationPresent(arg0: Internal.Class_<Internal.Annotation_>): boolean;
        canAccess(arg0: any): boolean;
        getDeclaredAnnotation<T>(arg0: Internal.Class_<T>): T;
        getAnnotations(): Internal.Annotation[];
        getDeclaredAnnotations(): Internal.Annotation[];
        get accessible(): boolean;
        get declaredAnnotations(): Internal.Annotation[];
        get annotations(): Internal.Annotation[];
        set accessible(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleObject_ = AccessibleObject;
    /**
    * @javaClass dev.latvian.mods.kubejs.item.ItemHandler
    */
    interface ItemHandler extends Internal.Iterable<Internal.ItemStack> {
        getHeight(): number;
        iterator(): Internal.Iterator<Internal.ItemStack>;
        extractItem(arg0: number, arg1: number, arg2: boolean): Internal.ItemStack;
        getSlotLimit(arg0: number): number;
        isItemValid(arg0: number, arg1: Internal.ItemStack_): boolean;
        getWidth(): number;
        getSlots(): number;
        getStackInSlot(arg0: number): Internal.ItemStack;
        insertItem(arg0: number, arg1: Internal.ItemStack_, arg2: boolean): Internal.ItemStack;
    }
    type ItemHandler_ = ItemHandler;
    /**
    * @javaClass java.nio.IntBuffer
    */
    abstract class IntBuffer extends Internal.Buffer implements Internal.Comparable<Internal.IntBuffer> {
        hasArray(): boolean;
        compact(): this;
        clear(): this;
        duplicate(): this;
        compareTo(arg0: Internal.IntBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: number[]): this;
        put(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        put(arg0: number, arg1: number[]): this;
        put(arg0: number[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.IntBuffer_, arg2: number, arg3: number): this;
        put(arg0: Internal.IntBuffer_): this;
        put(arg0: number, arg1: number): this;
        put(arg0: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        slice(arg0: number, arg1: number): this;
        slice(): this;
        array(): number[];
        hashCode(): number;
        mismatch(arg0: Internal.IntBuffer_): number;
        equals(arg0: any): boolean;
        get(): number;
        get(arg0: number, arg1: number[]): this;
        get(arg0: number): number;
        get(arg0: number, arg1: number[], arg2: number, arg3: number): this;
        get(arg0: number[], arg1: number, arg2: number): this;
        get(arg0: number[]): this;
        limit(arg0: number): this;
        reset(): this;
        arrayOffset(): number;
        toString(): string;
        position(arg0: number): this;
        flip(): this;
        isDirect(): boolean;
        static wrap(arg0: number[]): this;
        static wrap(arg0: number[], arg1: number, arg2: number): this;
        mark(): this;
        order(): Internal.ByteOrder;
        get direct(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type IntBuffer_ = IntBuffer;
    /**
    * @javaClass net.minecraft.server.packs.resources.ResourceManagerReloadListener
    */
    interface ResourceManagerReloadListener extends Internal.PreparableReloadListener {
    }
    type ResourceManagerReloadListener_ = ResourceManagerReloadListener;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.icon.Color4I
    */
    class Color4I extends Internal.Icon {
        redf(): number;
        addBrightness(percent: number): this;
        static rgba(col: number): this;
        static rgba(r: number, g: number, b: number, a: number): this;
        rgba(): number;
        withAlpha(a: number): this;
        static getChatFormattingColor(formatting: Internal.ChatFormatting_): this;
        static getChatFormattingColor(id: number): this;
        lerp(col: Internal.Color4I_, m: number): this;
        static rgb(color: Vec3_): this;
        static rgb(r: number, g: number, b: number): this;
        rgb(): number;
        static rgb(col: number): this;
        withTint(col: Internal.Color4I_): this;
        redi(): number;
        createPixelBuffer(): Internal.PixelBuffer;
        hashCode(): number;
        bluei(): number;
        mutable(): Internal.MutableColor4I;
        bluef(): number;
        copy(): this;
        hasPixelBuffer(): boolean;
        getJson(): Internal.JsonElement;
        alphaf(): number;
        withColor(color: Internal.Color4I_): Internal.Icon;
        alphai(): number;
        draw(matrixStack: Internal.PoseStack_, x: number, y: number, w: number, h: number): void;
        whiteIfEmpty(): this;
        toStyle(): Internal.Style;
        isMutable(): boolean;
        static hsb(h: number, s: number, b: number): this;
        equals(o: any): boolean;
        withAlphaf(alpha: number): this;
        static fromJson(element: Internal.JsonElement_): this;
        greenf(): number;
        static get256(id: number): this;
        toString(): string;
        static fromString(s: string): this;
        greeni(): number;
        static readonly "RED" : Internal.Color4I;
        static readonly "GRAY" : Internal.Color4I;
        static readonly "WHITE" : Internal.Color4I;
        static readonly "LIGHT_RED" : Internal.Color4I;
        static readonly "BLUE" : Internal.Color4I;
        static readonly "LIGHT_BLUE" : Internal.Color4I;
        static readonly "LIGHT_GREEN" : Internal.Color4I;
        static readonly "BLACK" : Internal.Color4I;
        static readonly "DARK_GRAY" : Internal.Color4I;
        static readonly "GREEN" : Internal.Color4I;
        get json(): Internal.JsonElement;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Color4I_ = Color4I;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.SlabBlockBuilder
    */
    class SlabBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SlabBlockBuilder_ = SlabBlockBuilder;
    /**
    * @javaClass net.minecraftforge.client.model.pipeline.IVertexProducer
    */
    interface IVertexProducer {
        pipe(arg0: Internal.IVertexConsumer_): void;
    }
    type IVertexProducer_ = ((arg0: Internal.IVertexConsumer) => void) | IVertexProducer;
    /**
    * @javaClass org.apache.maven.artifact.versioning.VersionRange
    */
    class VersionRange {
        matchVersion(arg0: Internal.List_<Internal.ArtifactVersion_>): Internal.ArtifactVersion;
        static createFromVersionSpec(arg0: string): this;
        hasRestrictions(): boolean;
        containsVersion(arg0: Internal.ArtifactVersion_): boolean;
        getSelectedVersion(arg0: Internal.Artifact_): Internal.ArtifactVersion;
        restrict(arg0: Internal.VersionRange_): this;
        cloneOf(): this;
        hashCode(): number;
        isSelectedVersionKnown(arg0: Internal.Artifact_): boolean;
        equals(arg0: any): boolean;
        getRecommendedVersion(): Internal.ArtifactVersion;
        toString(): string;
        getRestrictions(): Internal.List<Internal.Restriction>;
        static createFromVersion(arg0: string): this;
        get recommendedVersion(): Internal.ArtifactVersion;
        get restrictions(): Internal.List<Internal.Restriction>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type VersionRange_ = VersionRange;
    /**
    * @javaClass net.minecraft.world.entity.npc.VillagerTrades$ItemListing
    */
    interface VillagerTrades$ItemListing {
    }
    type VillagerTrades$ItemListing_ = VillagerTrades$ItemListing;
    /**
    * @javaClass dev.latvian.mods.kubejs.level.BlockContainerJS
    */
    class BlockContainerJS implements Internal.SpecialEquality {
        spawnFireworks(fireworks: Internal.FireworksJS_): void;
        getBiomeId(): ResourceLocation;
        getItem(): Internal.ItemStackJS;
        getTags(): Internal.Collection<ResourceLocation>;
        getUp(): this;
        /**
        */
        getId(): Special.Block & `${string}:${string}`;
        clearCache(): void;
        getCanSeeSky(): boolean;
        getEast(): this;
        popItemFromFace(item: Internal.ItemStack_, dir: Internal.Direction_): void;
        canSeeSkyFromBelowWater(): boolean;
        getNorth(): this;
        getPos(): BlockPos;
        setEntityData(tag: Internal.CompoundTag_): void;
        getDimension(): ResourceLocation;
        mergeEntityData(tag: Internal.CompoundTag_): void;
        getEntityId(): string;
        getInventory(facing: Internal.Direction_): Internal.InventoryJS;
        getInventory(): Internal.InventoryJS;
        getBlockLight(): number;
        getLight(): number;
        getWest(): this;
        getPlayersInRadius(): Internal.EntityArrayList;
        getPlayersInRadius(radius: number): Internal.EntityArrayList;
        /**
        */
        set(id: Special.Block, properties: Internal.Map_<any, any>): void;
        /**
        */
        set(id: Special.Block, properties: Internal.Map_<any, any>, flags: number): void;
        /**
        */
        set(id: Special.Block): void;
        hasTag(tag: ResourceLocation_): boolean;
        offset(x: number, y: number, z: number): this;
        offset(f: Internal.Direction_): this;
        offset(f: Internal.Direction_, d: number): this;
        getDown(): this;
        getProperties(): Internal.Map<string, string>;
        createExplosion(): Internal.ExplosionJS;
        getEntity(): Internal.BlockEntity;
        setBlockState(state: Internal.BlockState_, flags: number): void;
        createEntity(id: ResourceLocation_): Internal.EntityJS;
        getMaterial(): Internal.MaterialJS;
        getSouth(): this;
        spawnLightning(effectOnly: boolean): void;
        spawnLightning(effectOnly: boolean, player: Internal.EntityJS_): void;
        getLevel(): Internal.LevelJS;
        getX(): number;
        getY(): number;
        getZ(): number;
        popItem(item: Internal.ItemStack_): void;
        getEntityData(): Internal.CompoundTag;
        equals(obj: any): boolean;
        getTypeData(): Internal.CompoundTag;
        getDrops(): Internal.List<Internal.ItemStackJS>;
        getDrops(entity: Internal.EntityJS_, heldItem: Internal.ItemStack_): Internal.List<Internal.ItemStackJS>;
        toString(): string;
        getBlockState(): Internal.BlockState;
        getSkyLight(): number;
        specialEquals(o: any, shallow: boolean): boolean;
        readonly "minecraftLevel" : Internal.Level;
        get blockState(): Internal.BlockState;
        get biomeId(): ResourceLocation;
        get south(): this;
        get playersInRadius(): Internal.EntityArrayList;
        get north(): this;
        get skyLight(): number;
        get inventory(): Internal.InventoryJS;
        get down(): this;
        get east(): this;
        get drops(): Internal.List<Internal.ItemStackJS>;
        get pos(): BlockPos;
        get blockLight(): number;
        get west(): this;
        get up(): this;
        /**
        */
        get id(): Special.Block & `${string}:${string}`;
        get dimension(): ResourceLocation;
        get item(): Internal.ItemStackJS;
        get level(): Internal.LevelJS;
        get canSeeSky(): boolean;
        get entityId(): string;
        get typeData(): Internal.CompoundTag;
        get tags(): Internal.Collection<ResourceLocation>;
        get material(): Internal.MaterialJS;
        get light(): number;
        get x(): number;
        get y(): number;
        get z(): number;
        get properties(): Internal.Map<string, string>;
        get entity(): Internal.BlockEntity;
        get entityData(): Internal.CompoundTag;
        set entityData(tag: Internal.CompoundTag_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type BlockContainerJS_ = BlockContainerJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.booleans.Boolean2ReferenceFunction
    */
    interface Boolean2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<boolean, V> {
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Boolean2FloatFunction;
        getOrDefault(arg0: any, arg1: V): V;
        getOrDefault(arg0: boolean, arg1: V): V;
        containsKey(arg0: any): boolean;
        containsKey(arg0: boolean): boolean;
        composeInt(arg0: Internal.Int2BooleanFunction_): Internal.Int2ReferenceFunction<V>;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Boolean2ShortFunction;
        composeByte(arg0: Internal.Byte2BooleanFunction_): Internal.Byte2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2BooleanFunction_): Internal.Float2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Boolean2IntFunction;
        composeReference<T>(arg0: Internal.Reference2BooleanFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Boolean2CharFunction;
        put(arg0: boolean, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: boolean): V;
        defaultReturnValue(arg0: V): void;
        defaultReturnValue(): V;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Boolean2DoubleFunction;
        composeObject<T>(arg0: Internal.Object2BooleanFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Boolean2ObjectFunction<T>;
        compose<T>(arg0: Internal.Function_<T, boolean>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2BooleanFunction_): Internal.Short2ReferenceFunction<V>;
        get(arg0: any): V;
        get(arg0: boolean): V;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Boolean2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2BooleanFunction_): Internal.Char2ReferenceFunction<V>;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Boolean2LongFunction;
        composeLong(arg0: Internal.Long2BooleanFunction_): Internal.Long2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2BooleanFunction_): Internal.Double2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Boolean2ByteFunction;
    }
    type Boolean2ReferenceFunction_<V> = ((arg0: boolean) => V) | Boolean2ReferenceFunction<V>;
    /**
    * @javaClass java.lang.module.Configuration
    */
    class Configuration {
        findModule(arg0: string): Internal.Optional<Internal.ResolvedModule>;
        resolve(arg0: Internal.ModuleFinder_, arg1: Internal.ModuleFinder_, arg2: Internal.Collection_<string>): this;
        static resolve(arg0: Internal.ModuleFinder_, arg1: Internal.List_<Internal.Configuration_>, arg2: Internal.ModuleFinder_, arg3: Internal.Collection_<string>): this;
        toString(): string;
        static resolveAndBind(arg0: Internal.ModuleFinder_, arg1: Internal.List_<Internal.Configuration_>, arg2: Internal.ModuleFinder_, arg3: Internal.Collection_<string>): this;
        resolveAndBind(arg0: Internal.ModuleFinder_, arg1: Internal.ModuleFinder_, arg2: Internal.Collection_<string>): this;
        modules(): Internal.Set<Internal.ResolvedModule>;
        parents(): Internal.List<Internal.Configuration>;
        static empty(): this;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Configuration_ = Configuration;
    /**
    * @javaClass io.netty.channel.EventLoop
    */
    interface EventLoop extends Internal.OrderedEventExecutor, Internal.EventLoopGroup {
        parent(): Internal.EventLoopGroup;
    }
    type EventLoop_ = (() => Internal.EventLoopGroup) | EventLoop;
    /**
    * @javaClass net.minecraft.world.item.ItemStack
    */
    class ItemStack extends Internal.CapabilityProvider<Internal.ItemStack> implements Internal.IForgeItemStack, Internal.ItemStackKJS, Internal.ItemFiltersStack {
        onItemUseFirst(arg0: Internal.UseOnContext_): Internal.InteractionResult;
        deserializeNBT(arg0: Internal.CompoundTag_): void;
        getItemFiltersData(): any;
        toString(): string;
        removeTagKJS(): void;
        get itemFiltersData(): any;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    */
    type ItemStack_ = Internal.ItemStackJS_ | ItemStack;
    /**
    * @javaClass com.google.common.collect.ImmutableList$Builder
    */
    class ImmutableList$Builder <E> extends Internal.ImmutableCollection$Builder<E> {
        add(arg0: E): Internal.ImmutableList$Builder<E>;
        add(... arg0: E[]): Internal.ImmutableList$Builder<E>;
        build(): Internal.ImmutableList<E>;
        addAll(arg0: Internal.Iterator_<E>): Internal.ImmutableList$Builder<E>;
        addAll(arg0: Internal.Iterable_<E>): Internal.ImmutableList$Builder<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ImmutableList$Builder_<E> = ImmutableList$Builder<E>;
    /**
    * @javaClass java.nio.CharBuffer
    */
    abstract class CharBuffer extends Internal.Buffer implements Internal.Comparable<Internal.CharBuffer>, Internal.Appendable, Internal.CharSequence, Internal.Readable {
        compact(): this;
        compareTo(arg0: Internal.CharBuffer_): number;
        asReadOnlyBuffer(): this;
        put(arg0: Internal.CharBuffer_): this;
        put(arg0: string, arg1: number, arg2: number): this;
        put(arg0: number, arg1: string[]): this;
        put(arg0: number, arg1: string): this;
        put(arg0: number, arg1: string[], arg2: number, arg3: number): this;
        put(arg0: string[]): this;
        put(arg0: string[], arg1: number, arg2: number): this;
        put(arg0: number, arg1: Internal.CharBuffer_, arg2: number, arg3: number): this;
        put(arg0: string): this;
        slice(): this;
        slice(arg0: number, arg1: number): this;
        array(): string[];
        hashCode(): number;
        get(): string;
        get(arg0: number): string;
        get(arg0: string[], arg1: number, arg2: number): this;
        get(arg0: string[]): this;
        get(arg0: number, arg1: string[]): this;
        get(arg0: number, arg1: string[], arg2: number, arg3: number): this;
        limit(arg0: number): this;
        arrayOffset(): number;
        flip(): this;
        order(): Internal.ByteOrder;
        hasArray(): boolean;
        read(arg0: Internal.CharBuffer_): number;
        isEmpty(): boolean;
        clear(): this;
        length(): number;
        duplicate(): this;
        subSequence(arg0: number, arg1: number): this;
        static allocate(arg0: number): this;
        rewind(): this;
        mismatch(arg0: Internal.CharBuffer_): number;
        equals(arg0: any): boolean;
        reset(): this;
        toString(): string;
        position(arg0: number): this;
        isDirect(): boolean;
        static wrap(arg0: string[], arg1: number, arg2: number): this;
        static wrap(arg0: string[]): this;
        static wrap(arg0: Internal.CharSequence_): this;
        static wrap(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        mark(): this;
        chars(): Internal.IntStream;
        charAt(arg0: number): string;
        append(arg0: Internal.CharSequence_, arg1: number, arg2: number): this;
        append(arg0: Internal.CharSequence_): this;
        append(arg0: string): this;
        get direct(): boolean;
        get empty(): boolean;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CharBuffer_ = CharBuffer;
    /**
    * @javaClass net.minecraft.client.gui.narration.NarrationSupplier
    */
    interface NarrationSupplier {
    }
    type NarrationSupplier_ = NarrationSupplier;
    /**
    * @javaClass java.awt.dnd.DropTargetContext
    */
    class DropTargetContext implements Internal.Serializable {
        getComponent(): Internal.Component;
        dropComplete(arg0: boolean): void;
        getDropTarget(): Internal.DropTarget;
        get component(): Internal.Component;
        get dropTarget(): Internal.DropTarget;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DropTargetContext_ = DropTargetContext;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingHealEvent
    */
    class LivingHealEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        setAmount(arg0: number): void;
        getAmount(): number;
        get amount(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        set amount(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingHealEvent_ = LivingHealEvent;
    /**
    * @javaClass dev.ftb.mods.ftbteams.property.ColorProperty
    */
    class ColorProperty extends Internal.TeamProperty<Internal.Color4I> {
        getType(): Internal.TeamPropertyType<Internal.Color4I>;
        toString(value: Internal.Color4I_): string;
        fromString(string: string): Internal.Optional<Internal.Color4I>;
        config(config: Internal.ConfigGroup_, value: Internal.TeamPropertyValue_<Internal.Color4I_>): void;
        write(buf: Internal.FriendlyByteBuf_): void;
        get type(): Internal.TeamPropertyType<Internal.Color4I>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ColorProperty_ = ColorProperty;
    /**
    * @javaClass java.awt.event.ComponentListener
    */
    interface ComponentListener extends Internal.EventListener {
        componentHidden(arg0: Internal.ComponentEvent_): void;
        componentResized(arg0: Internal.ComponentEvent_): void;
        componentShown(arg0: Internal.ComponentEvent_): void;
        componentMoved(arg0: Internal.ComponentEvent_): void;
    }
    type ComponentListener_ = ComponentListener;
    /**
    * @javaClass net.minecraftforge.registries.tags.IReverseTag
    */
    interface IReverseTag <V> {
        getTagKeys(): Internal.Stream<Internal.TagKey<V>>;
        containsTag(arg0: Internal.TagKey_<V>): boolean;
        containsTag(arg0: Internal.ITag_<V>): boolean;
    }
    type IReverseTag_<V> = IReverseTag<V>;
    /**
    * @javaClass net.minecraftforge.client.event.RenderGameOverlayEvent
    */
    class RenderGameOverlayEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getWindow(): com.mojang.blaze3d.platform.Window;
        getType(): Internal.RenderGameOverlayEvent$ElementType;
        getPartialTicks(): number;
        isCancelable(): boolean;
        getMatrixStack(): Internal.PoseStack;
        get matrixStack(): Internal.PoseStack;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get window(): com.mojang.blaze3d.platform.Window;
        get type(): Internal.RenderGameOverlayEvent$ElementType;
        get partialTicks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderGameOverlayEvent_ = RenderGameOverlayEvent;
    /**
    * @javaClass java.nio.channels.CompletionHandler
    */
    interface CompletionHandler <V, A> {
        failed(arg0: Internal.Throwable_, arg1: A): void;
        completed(arg0: V, arg1: A): void;
    }
    type CompletionHandler_<V, A> = CompletionHandler<V, A>;
    /**
    * @javaClass java.util.stream.LongStream
    */
    interface LongStream extends Internal.BaseStream<number, Internal.LongStream> {
        average(): Internal.OptionalDouble;
        sequential(): this;
        takeWhile(arg0: Internal.LongPredicate_): this;
        distinct(): this;
        range(arg0: number, arg1: number): this;
        findFirst(): Internal.OptionalLong;
        sum(): number;
        skip(arg0: number): this;
        allMatch(arg0: Internal.LongPredicate_): boolean;
        mapToObj<U>(arg0: Internal.LongFunction_<U>): Internal.Stream<U>;
        empty(): this;
        mapMulti(arg0: Internal.LongStream$LongMapMultiConsumer_): this;
        iterator(): Internal.PrimitiveIterator$OfLong;
        asDoubleStream(): Internal.DoubleStream;
        min(): Internal.OptionalLong;
        parallel(): this;
        noneMatch(arg0: Internal.LongPredicate_): boolean;
        findAny(): Internal.OptionalLong;
        of(arg0: number): this;
        of(... arg0: number[]): this;
        limit(arg0: number): this;
        builder(): Internal.LongStream$Builder;
        toArray(): number[];
        forEachOrdered(arg0: Internal.LongConsumer_): void;
        generate(arg0: Internal.LongSupplier_): this;
        anyMatch(arg0: Internal.LongPredicate_): boolean;
        map(arg0: Internal.LongUnaryOperator_): this;
        mapToDouble(arg0: Internal.LongToDoubleFunction_): Internal.DoubleStream;
        iterate(arg0: number, arg1: Internal.LongPredicate_, arg2: Internal.LongUnaryOperator_): this;
        iterate(arg0: number, arg1: Internal.LongUnaryOperator_): this;
        reduce(arg0: Internal.LongBinaryOperator_): Internal.OptionalLong;
        reduce(arg0: number, arg1: Internal.LongBinaryOperator_): number;
        spliterator(): Internal.Spliterator$OfLong;
        max(): Internal.OptionalLong;
        forEach(arg0: Internal.LongConsumer_): void;
        count(): number;
        concat(arg0: Internal.LongStream_, arg1: Internal.LongStream_): this;
        dropWhile(arg0: Internal.LongPredicate_): this;
        peek(arg0: Internal.LongConsumer_): this;
        flatMap(arg0: Internal.LongFunction_<Internal.LongStream_>): this;
        filter(arg0: Internal.LongPredicate_): this;
        sorted(): this;
        boxed(): Internal.Stream<number>;
        summaryStatistics(): Internal.LongSummaryStatistics;
        rangeClosed(arg0: number, arg1: number): this;
        mapToInt(arg0: Internal.LongToIntFunction_): Internal.IntStream;
        collect<R>(arg0: Internal.Supplier_<R>, arg1: Internal.ObjLongConsumer_<R>, arg2: Internal.BiConsumer_<R, R>): R;
    }
    type LongStream_ = LongStream;
    /**
    * @javaClass net.minecraft.world.level.block.LiquidBlock
    */
    class LiquidBlock extends Internal.Block implements Internal.BucketPickup {
        getFluid(): Internal.FlowingFluid;
        get fluid(): Internal.FlowingFluid;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LiquidBlock_ = LiquidBlock;
    /**
    * @javaClass net.minecraftforge.client.event.ScreenEvent$KeyboardKeyPressedEvent
    */
    abstract class ScreenEvent$KeyboardKeyPressedEvent extends Internal.ScreenEvent$KeyboardKeyEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ScreenEvent$KeyboardKeyPressedEvent_ = ScreenEvent$KeyboardKeyPressedEvent;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.PlayerKJS
    */
    interface PlayerKJS {
        setStagesKJS(arg0: Internal.Stages_): void;
        getStagesRawKJS(): Internal.Stages;
        getStagesKJS(): Internal.Stages;
    }
    type PlayerKJS_ = PlayerKJS;
    /**
    * Fired when a block is placed.
    *
    * Note that the entity can be `null`, if the placer is a dispenser, etc.
    * @javaClass dev.latvian.mods.kubejs.block.BlockPlaceEventJS
    */
    class BlockPlaceEventJS extends Internal.EntityEventJS {
        getLevel(): Internal.LevelJS;
        getBlock(): Internal.BlockContainerJS;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get level(): Internal.LevelJS;
        get block(): Internal.BlockContainerJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when a block is placed.
    *
    * Note that the entity can be `null`, if the placer is a dispenser, etc.
    */
    type BlockPlaceEventJS_ = BlockPlaceEventJS;
    /**
    * @javaClass java.awt.dnd.DropTargetDragEvent
    */
    class DropTargetDragEvent extends Internal.DropTargetEvent {
        getDropAction(): number;
        getCurrentDataFlavorsAsList(): Internal.List<Internal.DataFlavor>;
        getLocation(): Internal.Point;
        isDataFlavorSupported(arg0: Internal.DataFlavor_): boolean;
        rejectDrag(): void;
        acceptDrag(arg0: number): void;
        getCurrentDataFlavors(): Internal.DataFlavor[];
        getSourceActions(): number;
        getTransferable(): Internal.Transferable;
        get sourceActions(): number;
        get transferable(): Internal.Transferable;
        get location(): Internal.Point;
        get currentDataFlavors(): Internal.DataFlavor[];
        get dropAction(): number;
        get currentDataFlavorsAsList(): Internal.List<Internal.DataFlavor>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DropTargetDragEvent_ = DropTargetDragEvent;
    /**
    * @javaClass dev.latvian.mods.rhino.util.CustomJavaToJsWrapperProvider
    */
    interface CustomJavaToJsWrapperProvider <T> {
        create(arg0: T): Internal.CustomJavaToJsWrapper;
    }
    type CustomJavaToJsWrapperProvider_<T> = ((arg0: T) => Internal.CustomJavaToJsWrapper) | CustomJavaToJsWrapperProvider<T>;
    /**
    * @javaClass dev.latvian.mods.kubejs.player.ClientPlayerDataJS
    */
    class ClientPlayerDataJS extends Internal.PlayerDataJS<Internal.Player, Internal.ClientPlayerJS> {
        getLevel(): Internal.ClientLevelJS;
        getPlayer(): Internal.ClientPlayerJS;
        getMinecraftPlayer(): Internal.Player;
        getName(): string;
        getProfile(): Internal.GameProfile;
        getId(): Internal.UUID;
        getOverworld(): Internal.LevelJS;
        get level(): Internal.ClientLevelJS;
        get minecraftPlayer(): Internal.Player;
        get profile(): Internal.GameProfile;
        get name(): string;
        get id(): Internal.UUID;
        get overworld(): Internal.LevelJS;
        get player(): Internal.ClientPlayerJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientPlayerDataJS_ = ClientPlayerDataJS;
    /**
    * @javaClass net.minecraftforge.common.ToolAction
    */
    class ToolAction {
        static get(arg0: string): this;
        name(): string;
        static getActions(): Internal.Collection<Internal.ToolAction>;
        toString(): string;
        get actions(): Internal.Collection<Internal.ToolAction>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ToolAction_ = ToolAction;
    /**
    * @javaClass com.mojang.serialization.DataResult$PartialResult
    */
    class DataResult$PartialResult <R> {
        flatMap<R2>(arg0: Internal.Function_<R, Internal.DataResult$PartialResult_<R2>>): Internal.DataResult$PartialResult<R2>;
        hashCode(): number;
        equals(arg0: any): boolean;
        toString(): string;
        message(): string;
        map<R2>(arg0: Internal.Function_<R, R2>): Internal.DataResult$PartialResult<R2>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataResult$PartialResult_<R> = DataResult$PartialResult<R>;
    /**
    * @javaClass net.minecraftforge.client.event.DrawSelectionEvent
    */
    class DrawSelectionEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getMultiBufferSource(): Internal.MultiBufferSource;
        getTarget(): Internal.HitResult;
        getPartialTicks(): number;
        getLevelRenderer(): Internal.LevelRenderer;
        getCamera(): Internal.Camera;
        isCancelable(): boolean;
        getPoseStack(): Internal.PoseStack;
        get multiBufferSource(): Internal.MultiBufferSource;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get poseStack(): Internal.PoseStack;
        get levelRenderer(): Internal.LevelRenderer;
        get camera(): Internal.Camera;
        get target(): Internal.HitResult;
        get partialTicks(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DrawSelectionEvent_ = DrawSelectionEvent;
    /**
    * @javaClass com.mojang.serialization.DataResult$Mu
    */
    class DataResult$Mu implements Internal.K1 {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type DataResult$Mu_ = DataResult$Mu;
    /**
    * @javaClass net.minecraft.util.thread.ReentrantBlockableEventLoop
    */
    abstract class ReentrantBlockableEventLoop <R> extends Internal.BlockableEventLoop<R> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ReentrantBlockableEventLoop_<R> = ReentrantBlockableEventLoop<R>;
    /**
    * @javaClass com.mojang.blaze3d.platform.WindowEventHandler
    */
    interface WindowEventHandler {
    }
    type WindowEventHandler_ = WindowEventHandler;
    /**
    * @javaClass com.google.common.collect.ForwardingObject
    */
    abstract class ForwardingObject {
        toString(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ForwardingObject_ = ForwardingObject;
    /**
    * @javaClass io.netty.util.concurrent.ProgressiveFuture
    */
    interface ProgressiveFuture <V> extends io.netty.util.concurrent.Future<V> {
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.ProgressiveFuture<V>;
        syncUninterruptibly(): Internal.ProgressiveFuture<V>;
        await(): Internal.ProgressiveFuture<V>;
        awaitUninterruptibly(): Internal.ProgressiveFuture<V>;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.ProgressiveFuture<V>;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): Internal.ProgressiveFuture<V>;
        sync(): Internal.ProgressiveFuture<V>;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): Internal.ProgressiveFuture<V>;
    }
    type ProgressiveFuture_<V> = ProgressiveFuture<V>;
    /**
    * @javaClass net.minecraftforge.event.entity.item.ItemExpireEvent
    */
    class ItemExpireEvent extends Internal.ItemEvent {
        getListenerList(): Internal.ListenerList;
        getExtraLife(): number;
        isCancelable(): boolean;
        setExtraLife(arg0: number): void;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get extraLife(): number;
        set extraLife(arg0: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemExpireEvent_ = ItemExpireEvent;
    /**
    * @javaClass com.mojang.serialization.Codec
    */
    interface Codec <A> extends Internal.Encoder<A>, Internal.Decoder<A> {
        flatComapMap<S>(arg0: Internal.Function_<A, S>, arg1: Internal.Function_<S, Internal.DataResult_<A>>): Internal.Codec<S>;
        dispatch<E>(arg0: Internal.Function_<E, A>, arg1: Internal.Function_<A, Internal.Codec_<E>>): Internal.Codec<E>;
        dispatch<E>(arg0: string, arg1: Internal.Function_<E, A>, arg2: Internal.Function_<A, Internal.Codec_<E>>): Internal.Codec<E>;
        deprecated(arg0: number): Internal.Codec<A>;
        dispatchMap<E>(arg0: Internal.Function_<E, A>, arg1: Internal.Function_<A, Internal.Codec_<E>>): Internal.MapCodec<E>;
        dispatchMap<E>(arg0: string, arg1: Internal.Function_<E, A>, arg2: Internal.Function_<A, Internal.Codec_<E>>): Internal.MapCodec<E>;
        mapPair<F, S>(arg0: Internal.MapCodec_<F>, arg1: Internal.MapCodec_<S>): Internal.MapCodec<com.mojang.datafixers.util.Pair<F, S>>;
        comapFlatMap<S>(arg0: Internal.Function_<A, Internal.DataResult_<S>>, arg1: Internal.Function_<S, A>): Internal.Codec<S>;
        checkRange<N>(arg0: N, arg1: N): Internal.Function<N, Internal.DataResult<N>>;
        promotePartial(arg0: Internal.Consumer_<string>): Internal.Codec<A>;
        either<F, S>(arg0: Internal.Codec_<F>, arg1: Internal.Codec_<S>): Internal.Codec<Internal.Either<F, S>>;
        flatXmap<S>(arg0: Internal.Function_<A, Internal.DataResult_<S>>, arg1: Internal.Function_<S, Internal.DataResult_<A>>): Internal.Codec<S>;
        of<A>(arg0: Internal.MapEncoder_<A>, arg1: Internal.MapDecoder_<A>, arg2: Internal.Supplier_<string>): Internal.MapCodec<A>;
        of<A>(arg0: Internal.MapEncoder_<A>, arg1: Internal.MapDecoder_<A>): Internal.MapCodec<A>;
        of<A>(arg0: Internal.Encoder_<A>, arg1: Internal.Decoder_<A>, arg2: string): Internal.Codec<A>;
        of<A>(arg0: Internal.Encoder_<A>, arg1: Internal.Decoder_<A>): Internal.Codec<A>;
        fieldOf(arg0: string): Internal.MapCodec<A>;
        listOf(): Internal.Codec<Internal.List<A>>;
        xmap<S>(arg0: Internal.Function_<A, S>, arg1: Internal.Function_<S, A>): Internal.Codec<S>;
        optionalFieldOf(arg0: string, arg1: A): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string): Internal.MapCodec<Internal.Optional<A>>;
        optionalFieldOf(arg0: string, arg1: A, arg2: Internal.Lifecycle_): Internal.MapCodec<A>;
        optionalFieldOf(arg0: string, arg1: Internal.Lifecycle_, arg2: A, arg3: Internal.Lifecycle_): Internal.MapCodec<A>;
        unboundedMap<K, V>(arg0: Internal.Codec_<K>, arg1: Internal.Codec_<V>): Internal.UnboundedMapCodec<K, V>;
        compoundList<K, V>(arg0: Internal.Codec_<K>, arg1: Internal.Codec_<V>): Internal.Codec<Internal.List<com.mojang.datafixers.util.Pair<K, V>>>;
        intRange(arg0: number, arg1: number): Internal.Codec<number>;
        floatRange(arg0: number, arg1: number): Internal.Codec<number>;
        partialDispatch<E>(arg0: string, arg1: Internal.Function_<E, Internal.DataResult_<A>>, arg2: Internal.Function_<A, Internal.DataResult_<Internal.Codec_<E>>>): Internal.Codec<E>;
        mapEither<F, S>(arg0: Internal.MapCodec_<F>, arg1: Internal.MapCodec_<S>): Internal.MapCodec<Internal.Either<F, S>>;
        simpleMap<K, V>(arg0: Internal.Codec_<K>, arg1: Internal.Codec_<V>, arg2: Internal.Keyable_): Internal.SimpleMapCodec<K, V>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.Codec<A>;
        list<E>(arg0: Internal.Codec_<E>): Internal.Codec<Internal.List<E>>;
        orElse(arg0: A): Internal.Codec<A>;
        orElse(arg0: Internal.Consumer_<string>, arg1: A): Internal.Codec<A>;
        orElse(arg0: Internal.UnaryOperator_<string>, arg1: A): Internal.Codec<A>;
        pair<F, S>(arg0: Internal.Codec_<F>, arg1: Internal.Codec_<S>): Internal.Codec<com.mojang.datafixers.util.Pair<F, S>>;
        unit<A>(arg0: Internal.Supplier_<A>): Internal.Codec<A>;
        unit<A>(arg0: A): Internal.Codec<A>;
        optionalField<F>(arg0: string, arg1: Internal.Codec_<F>): Internal.MapCodec<Internal.Optional<F>>;
        dispatchStable<E>(arg0: Internal.Function_<E, A>, arg1: Internal.Function_<A, Internal.Codec_<E>>): Internal.Codec<E>;
        orElseGet(arg0: Internal.Consumer_<string>, arg1: Internal.Supplier_<A>): Internal.Codec<A>;
        orElseGet(arg0: Internal.Supplier_<A>): Internal.Codec<A>;
        orElseGet(arg0: Internal.UnaryOperator_<string>, arg1: Internal.Supplier_<A>): Internal.Codec<A>;
        stable(): Internal.Codec<A>;
        mapResult(arg0: Internal.Codec$ResultFunction_<A>): Internal.Codec<A>;
        doubleRange(arg0: number, arg1: number): Internal.Codec<number>;
    }
    type Codec_<A> = Codec<A>;
    /**
    * @javaClass dev.latvian.mods.kubejs.client.ClientWrapper
    */
    class ClientWrapper {
        getLevel(): Internal.ClientLevelJS;
        getPlayer(): Internal.ClientPlayerJS;
        isKeyDown(key: number): boolean;
        getCurrentScreen(): Internal.Screen;
        setTitle(t: string): void;
        getCurrentWorldName(): string;
        getMinecraft(): Internal.Minecraft;
        setCurrentScreen(gui: Internal.Screen_): void;
        get minecraft(): Internal.Minecraft;
        get currentScreen(): Internal.Screen;
        get level(): Internal.ClientLevelJS;
        get player(): Internal.ClientPlayerJS;
        get currentWorldName(): string;
        set currentScreen(gui: Internal.Screen_);
        set title(t: string);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientWrapper_ = ClientWrapper;
    /**
    * @javaClass com.mojang.brigadier.tree.CommandNode
    */
    abstract class CommandNode <S> implements Internal.Comparable<Internal.CommandNode<S>> {
        getRelevantNodes(arg0: Internal.StringReader_): Internal.Collection<Internal.CommandNode<S>>;
        getRedirectModifier(): Internal.RedirectModifier<S>;
        getName(): string;
        getRedirect(): Internal.CommandNode<S>;
        getCommand(): Internal.Command<S>;
        getChild(arg0: string): Internal.CommandNode<S>;
        getExamples(): Internal.Collection<string>;
        getUsageText(): string;
        parse(arg0: Internal.StringReader_, arg1: Internal.CommandContextBuilder_<S>): void;
        compareTo(arg0: Internal.CommandNode_<S>): number;
        isFork(): boolean;
        canUse(arg0: S): boolean;
        getChildren(): Internal.Collection<Internal.CommandNode<S>>;
        findAmbiguities(arg0: Internal.AmbiguityConsumer_<S>): void;
        getRequirement(): Internal.Predicate<S>;
        listSuggestions(arg0: Internal.CommandContext_<S>, arg1: Internal.SuggestionsBuilder_): Internal.CompletableFuture<Internal.Suggestions>;
        createBuilder(): Internal.ArgumentBuilder<S, any>;
        hashCode(): number;
        equals(arg0: any): boolean;
        addChild(arg0: Internal.CommandNode_<S>): void;
        get redirect(): Internal.CommandNode<S>;
        get fork(): boolean;
        get examples(): Internal.Collection<string>;
        get children(): Internal.Collection<Internal.CommandNode<S>>;
        get name(): string;
        get usageText(): string;
        get requirement(): Internal.Predicate<S>;
        get redirectModifier(): Internal.RedirectModifier<S>;
        get command(): Internal.Command<S>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CommandNode_<S> = CommandNode<S>;
    /**
    * @javaClass it.unimi.dsi.fastutil.shorts.Short2ReferenceFunction
    */
    interface Short2ReferenceFunction <V> extends it.unimi.dsi.fastutil.Function<number, V>, Internal.IntFunction<V> {
        getOrDefault(arg0: number, arg1: V): V;
        getOrDefault(arg0: any, arg1: V): V;
        andThenShort(arg0: Internal.Reference2ShortFunction_<V>): Internal.Short2ShortFunction;
        composeByte(arg0: Internal.Byte2ShortFunction_): Internal.Byte2ReferenceFunction<V>;
        andThenInt(arg0: Internal.Reference2IntFunction_<V>): Internal.Short2IntFunction;
        composeReference<T>(arg0: Internal.Reference2ShortFunction_<T>): Internal.Reference2ReferenceFunction<T, V>;
        put(arg0: number, arg1: V): V;
        remove(arg0: any): V;
        remove(arg0: number): V;
        defaultReturnValue(): V;
        defaultReturnValue(arg0: V): void;
        andThenDouble(arg0: Internal.Reference2DoubleFunction_<V>): Internal.Short2DoubleFunction;
        andThenObject<T>(arg0: Internal.Reference2ObjectFunction_<V, T>): Internal.Short2ObjectFunction<T>;
        get(arg0: any): V;
        get(arg0: number): V;
        andThenLong(arg0: Internal.Reference2LongFunction_<V>): Internal.Short2LongFunction;
        composeLong(arg0: Internal.Long2ShortFunction_): Internal.Long2ReferenceFunction<V>;
        andThenByte(arg0: Internal.Reference2ByteFunction_<V>): Internal.Short2ByteFunction;
        andThenFloat(arg0: Internal.Reference2FloatFunction_<V>): Internal.Short2FloatFunction;
        apply(arg0: number): V;
        containsKey(arg0: number): boolean;
        containsKey(arg0: any): boolean;
        composeInt(arg0: Internal.Int2ShortFunction_): Internal.Int2ReferenceFunction<V>;
        composeFloat(arg0: Internal.Float2ShortFunction_): Internal.Float2ReferenceFunction<V>;
        andThenChar(arg0: Internal.Reference2CharFunction_<V>): Internal.Short2CharFunction;
        composeObject<T>(arg0: Internal.Object2ShortFunction_<T>): Internal.Object2ReferenceFunction<T, V>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, V>;
        composeShort(arg0: Internal.Short2ShortFunction_): Internal.Short2ReferenceFunction<V>;
        andThenReference<T>(arg0: Internal.Reference2ReferenceFunction_<V, T>): Internal.Short2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2ShortFunction_): Internal.Char2ReferenceFunction<V>;
        composeDouble(arg0: Internal.Double2ShortFunction_): Internal.Double2ReferenceFunction<V>;
    }
    type Short2ReferenceFunction_<V> = ((arg0: number) => V) | Short2ReferenceFunction<V>;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.Int2CharFunction
    */
    interface Int2CharFunction extends it.unimi.dsi.fastutil.Function<number, string>, Internal.IntUnaryOperator {
        getOrDefault(arg0: any, arg1: string): string;
        getOrDefault(arg0: number, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Int2ShortFunction;
        composeByte(arg0: Internal.Byte2IntFunction_): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Int2IntFunction;
        composeReference<T>(arg0: Internal.Reference2IntFunction_<T>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<number, T>;
        put(arg0: number, arg1: string): string;
        remove(arg0: number): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Int2DoubleFunction;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Int2ObjectFunction<T>;
        get(arg0: any): string;
        get(arg0: number): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Int2LongFunction;
        composeLong(arg0: Internal.Long2IntFunction_): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Int2ByteFunction;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Int2FloatFunction;
        applyAsInt(arg0: number): number;
        containsKey(arg0: any): boolean;
        containsKey(arg0: number): boolean;
        composeInt(arg0: Internal.Int2IntFunction_): this;
        composeFloat(arg0: Internal.Float2IntFunction_): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): this;
        composeObject<T>(arg0: Internal.Object2IntFunction_<T>): Internal.Object2CharFunction<T>;
        compose<T>(arg0: Internal.Function_<T, number>): Internal.Function<T, string>;
        composeShort(arg0: Internal.Short2IntFunction_): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Int2ReferenceFunction<T>;
        composeChar(arg0: Internal.Char2IntFunction_): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2IntFunction_): Internal.Double2CharFunction;
    }
    type Int2CharFunction_ = ((arg0: number) => string) | Int2CharFunction;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.forge.MissingMappingEventJS
    */
    class MissingMappingEventJS <T> extends Internal.EventJS {
        warn(key: ResourceLocation_): void;
        fail(key: ResourceLocation_): void;
        ignore(key: ResourceLocation_): void;
        remap(key: ResourceLocation_, value: ResourceLocation_): void;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type MissingMappingEventJS_<T> = MissingMappingEventJS<T>;
    /**
    * @javaClass dev.ftb.mods.ftbquests.integration.kubejs.FTBQuestsKubeJSPlayerData
    */
    class FTBQuestsKubeJSPlayerData extends Internal.FTBQuestsKubeJSTeamData {
        getFile(): Internal.QuestFile;
        getData(): Internal.TeamData;
        get file(): Internal.QuestFile;
        get data(): Internal.TeamData;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FTBQuestsKubeJSPlayerData_ = FTBQuestsKubeJSPlayerData;
    /**
    * @javaClass vazkii.botania.mixin.AccessorDamageSource
    */
    interface AccessorDamageSource {
        botania_setBypassArmor(): Internal.DamageSource;
    }
    type AccessorDamageSource_ = (() => Internal.DamageSource) | AccessorDamageSource;
    /**
    * @javaClass java.awt.Window$Type
    */
    class Window$Type extends Internal.Enum<Internal.Window$Type> {
        static valueOf(arg0: string): this;
        static values(): Internal.Window$Type[];
        static readonly "POPUP" : Internal.Window$Type;
        static readonly "UTILITY" : Internal.Window$Type;
        static readonly "NORMAL" : Internal.Window$Type;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Window$Type_ = "normal" | "popup" | "utility" | Window$Type;
    /**
    * @javaClass net.minecraftforge.network.PacketDistributor$PacketTarget
    */
    class PacketDistributor$PacketTarget {
        getDirection(): Internal.NetworkDirection;
        send(arg0: Internal.Packet_<any>): void;
        get direction(): Internal.NetworkDirection;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PacketDistributor$PacketTarget_ = PacketDistributor$PacketTarget;
    /**
    * @javaClass com.mojang.brigadier.Command
    */
    interface Command <S> {
        run(arg0: Internal.CommandContext_<S>): number;
    }
    type Command_<S> = ((arg0: Internal.CommandContext<S>) => number) | Command<S>;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.ObjectSpliterator
    */
    interface ObjectSpliterator <K> extends Internal.Spliterator<K> {
        trySplit(): Internal.ObjectSpliterator<K>;
        skip(arg0: number): number;
    }
    type ObjectSpliterator_<K> = (() => Internal.ObjectSpliterator<K>) | ObjectSpliterator<K>;
    /**
    * @javaClass com.electronwill.nightconfig.core.file.GenericBuilder
    */
    abstract class GenericBuilder <Base, Result> {
        charset(arg0: Internal.Charset_): Internal.GenericBuilder<Base, Result>;
        autosave(): Internal.GenericBuilder<Base, Result>;
        preserveInsertionOrder(): Internal.GenericBuilder<Base, Result>;
        backingMapCreator(arg0: Internal.Supplier_<Internal.Map_<string, any>>): Internal.GenericBuilder<Base, Result>;
        parsingMode(arg0: Internal.ParsingMode_): Internal.GenericBuilder<Base, Result>;
        build(): Result;
        defaultData(arg0: Internal.Path_): Internal.GenericBuilder<Base, Result>;
        defaultData(arg0: Internal.URL_): Internal.GenericBuilder<Base, Result>;
        defaultData(arg0: Internal.File_): Internal.GenericBuilder<Base, Result>;
        concurrent(): Internal.GenericBuilder<Base, Result>;
        onFileNotFound(arg0: Internal.FileNotFoundAction_): Internal.GenericBuilder<Base, Result>;
        autoreload(): Internal.GenericBuilder<Base, Result>;
        defaultResource(arg0: string): Internal.GenericBuilder<Base, Result>;
        sync(): Internal.GenericBuilder<Base, Result>;
        writingMode(arg0: Internal.WritingMode_): Internal.GenericBuilder<Base, Result>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type GenericBuilder_<Base, Result> = GenericBuilder<Base, Result>;
    /**
    * @javaClass dev.latvian.mods.kubejs.entity.CheckLivingEntitySpawnEventJS
    */
    class CheckLivingEntitySpawnEventJS extends Internal.LivingEntityEventJS {
        getLevel(): Internal.LevelJS;
        getBlock(): Internal.BlockContainerJS;
        getType(): Internal.MobSpawnType;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        readonly "x" : number;
        readonly "y" : number;
        readonly "z" : number;
        readonly "type" : Internal.MobSpawnType;
        get level(): Internal.LevelJS;
        get block(): Internal.BlockContainerJS;
        get entity(): Internal.EntityJS;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type CheckLivingEntitySpawnEventJS_ = CheckLivingEntitySpawnEventJS;
    /**
    * @javaClass net.minecraftforge.event.TickEvent$Phase
    */
    class TickEvent$Phase extends Internal.Enum<Internal.TickEvent$Phase> {
        static valueOf(arg0: string): this;
        static values(): Internal.TickEvent$Phase[];
        static readonly "START" : Internal.TickEvent$Phase;
        static readonly "END" : Internal.TickEvent$Phase;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type TickEvent$Phase_ = "start" | "end" | TickEvent$Phase;
    /**
    * @javaClass mezz.jei.api.gui.drawable.IDrawableBuilder
    */
    interface IDrawableBuilder {
        setTextureSize(arg0: number, arg1: number): this;
        buildAnimated(arg0: number, arg1: Internal.IDrawableAnimated$StartDirection_, arg2: boolean): Internal.IDrawableAnimated;
        buildAnimated(arg0: Internal.ITickTimer_, arg1: Internal.IDrawableAnimated$StartDirection_): Internal.IDrawableAnimated;
        trim(arg0: number, arg1: number, arg2: number, arg3: number): this;
        build(): Internal.IDrawableStatic;
        addPadding(arg0: number, arg1: number, arg2: number, arg3: number): this;
    }
    type IDrawableBuilder_ = IDrawableBuilder;
    /**
    * @javaClass dev.latvian.mods.kubejs.core.ItemKJS
    */
    interface ItemKJS {
        setFoodPropertiesKJS(properties: Internal.FoodProperties_): void;
        setFireResistantKJS(b: boolean): void;
        getTypeDataKJS(): Internal.CompoundTag;
        setMaxDamageKJS(i: number): void;
        setItemBuilderKJS(b: Internal.ItemBuilder_): void;
        setCraftingRemainderKJS(i: Internal.Item_): void;
        setBurnTimeKJS(i: number): void;
        getItemBuilderKJS(): Internal.ItemBuilder;
        setRarityKJS(r: Rarity_): void;
        setMaxStackSizeKJS(i: number): void;
    }
    type ItemKJS_ = ItemKJS;
    /**
    * @javaClass it.unimi.dsi.fastutil.objects.Reference2CharFunction
    */
    interface Reference2CharFunction <K> extends it.unimi.dsi.fastutil.Function<K, string>, Internal.ToIntFunction<K> {
        getOrDefault(arg0: any, arg1: string): string;
        andThenShort(arg0: Internal.Char2ShortFunction_): Internal.Reference2ShortFunction<K>;
        removeChar(arg0: any): string;
        composeByte(arg0: Internal.Byte2ReferenceFunction_<K>): Internal.Byte2CharFunction;
        andThenInt(arg0: Internal.Char2IntFunction_): Internal.Reference2IntFunction<K>;
        composeReference<T>(arg0: Internal.Reference2ReferenceFunction_<T, K>): Internal.Reference2CharFunction<T>;
        andThen<T>(arg0: Internal.Function_<string, T>): Internal.Function<K, T>;
        put(arg0: K, arg1: string): string;
        remove(arg0: any): string;
        defaultReturnValue(arg0: string): void;
        defaultReturnValue(): string;
        andThenDouble(arg0: Internal.Char2DoubleFunction_): Internal.Reference2DoubleFunction<K>;
        andThenObject<T>(arg0: Internal.Char2ObjectFunction_<T>): Internal.Reference2ObjectFunction<K, T>;
        get(arg0: any): string;
        andThenLong(arg0: Internal.Char2LongFunction_): Internal.Reference2LongFunction<K>;
        composeLong(arg0: Internal.Long2ReferenceFunction_<K>): Internal.Long2CharFunction;
        andThenByte(arg0: Internal.Char2ByteFunction_): Internal.Reference2ByteFunction<K>;
        andThenFloat(arg0: Internal.Char2FloatFunction_): Internal.Reference2FloatFunction<K>;
        applyAsInt(arg0: K): number;
        composeInt(arg0: Internal.Int2ReferenceFunction_<K>): Internal.Int2CharFunction;
        composeFloat(arg0: Internal.Float2ReferenceFunction_<K>): Internal.Float2CharFunction;
        andThenChar(arg0: Internal.Char2CharFunction_): Internal.Reference2CharFunction<K>;
        getChar(arg0: any): string;
        composeObject<T>(arg0: Internal.Object2ReferenceFunction_<T, K>): Internal.Object2CharFunction<T>;
        composeShort(arg0: Internal.Short2ReferenceFunction_<K>): Internal.Short2CharFunction;
        andThenReference<T>(arg0: Internal.Char2ReferenceFunction_<T>): Internal.Reference2ReferenceFunction<K, T>;
        composeChar(arg0: Internal.Char2ReferenceFunction_<K>): Internal.Char2CharFunction;
        composeDouble(arg0: Internal.Double2ReferenceFunction_<K>): Internal.Double2CharFunction;
    }
    type Reference2CharFunction_<K> = ((arg0: any) => string) | Reference2CharFunction<K>;
    /**
    * @javaClass dev.latvian.mods.rhino.NativeContinuation
    */
    class NativeContinuation extends Internal.IdScriptableObject implements dev.latvian.mods.rhino.Function {
        call(cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        static init(cx: Internal.Context_, scope: Internal.Scriptable_, sealed: boolean): void;
        getImplementation(): any;
        static equalImplementations(c1: Internal.NativeContinuation_, c2: Internal.NativeContinuation_): boolean;
        execIdCall(f: Internal.IdFunctionObject_, cx: Internal.Context_, scope: Internal.Scriptable_, thisObj: Internal.Scriptable_, args: any[]): any;
        construct(cx: Internal.Context_, scope: Internal.Scriptable_, args: any[]): Internal.Scriptable;
        getClassName(): string;
        initImplementation(implementation: any): void;
        static isContinuationConstructor(f: Internal.IdFunctionObject_): boolean;
        get implementation(): any;
        get className(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type NativeContinuation_ = NativeContinuation;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.EnumConfig
    */
    class EnumConfig <E> extends Internal.ConfigWithVariants<E> {
        getIteration(v: E, next: boolean): E;
        getStringForGUI(v: E): net.minecraft.network.chat.Component;
        onClicked(button: Internal.MouseButton_, callback: Internal.ConfigCallback_): void;
        getColor(v: E): Internal.Color4I;
        addInfo(list: Internal.TooltipList_): void;
        getIcon(v: E): Internal.Icon;
        readonly "nameMap" : Internal.NameMap<E>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EnumConfig_<E> = EnumConfig<E>;
    /**
    * @javaClass com.mojang.serialization.MapDecoder
    */
    interface MapDecoder <A> extends Internal.Keyable {
        flatMap<B>(arg0: Internal.Function_<A, Internal.DataResult_<B>>): Internal.MapDecoder<B>;
        compressedDecode<T>(arg0: Internal.DynamicOps_<T>, arg1: T): Internal.DataResult<A>;
        decoder(): Internal.Decoder<A>;
        withLifecycle(arg0: Internal.Lifecycle_): Internal.MapDecoder<A>;
        decode<T>(arg0: Internal.DynamicOps_<T>, arg1: Internal.MapLike_<T>): Internal.DataResult<A>;
        map<B>(arg0: Internal.Function_<A, B>): Internal.MapDecoder<B>;
        ap<E>(arg0: Internal.MapDecoder_<Internal.Function_<A, E>>): Internal.MapDecoder<E>;
        compressor<T>(arg0: Internal.DynamicOps_<T>): Internal.KeyCompressor<T>;
    }
    type MapDecoder_<A> = MapDecoder<A>;
    /**
    * @javaClass com.simibubi.create.content.schematics.ItemRequirement$StackRequirement
    */
    class ItemRequirement$StackRequirement {
        matches(arg0: Internal.ItemStack_): boolean;
        readonly "stack" : Internal.ItemStack;
        readonly "usage" : Internal.ItemRequirement$ItemUseType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ItemRequirement$StackRequirement_ = ItemRequirement$StackRequirement;
    /**
    * @javaClass net.minecraft.world.level.ServerLevelAccessor
    */
    interface ServerLevelAccessor extends Internal.LevelAccessor {
    }
    type ServerLevelAccessor_ = ServerLevelAccessor;
    /**
    * Fired when the chest loot table is registering.
    * @javaClass dev.latvian.mods.kubejs.loot.ChestLootEventJS
    */
    class ChestLootEventJS extends Internal.LootEventJS {
        getType(): string;
        addChest(id: ResourceLocation_, b: Internal.Consumer_<Internal.LootBuilder_>): void;
        getDirectory(): string;
        get type(): string;
        get directory(): string;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when the chest loot table is registering.
    */
    type ChestLootEventJS_ = ChestLootEventJS;
    /**
    * Fired when player right clicks on an Entity.
    *
    * Note that both main hand and off hand will be called if not cancelled.
    *
    * On cancellation, Result.SUCCESS is returned, thus making player swing his arm.
    * @javaClass dev.latvian.mods.kubejs.item.ItemEntityInteractEventJS
    */
    class ItemEntityInteractEventJS extends Internal.PlayerEventJS {
        getTarget(): Internal.EntityJS;
        getHand(): Hand;
        getItem(): Internal.ItemStackJS;
        getEntity(): Internal.EntityJS;
        canCancel(): boolean;
        get item(): Internal.ItemStackJS;
        get entity(): Internal.EntityJS;
        get target(): Internal.EntityJS;
        get hand(): Hand;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    /**
    * Fired when player right clicks on an Entity.
    *
    * Note that both main hand and off hand will be called if not cancelled.
    *
    * On cancellation, Result.SUCCESS is returned, thus making player swing his arm.
    */
    type ItemEntityInteractEventJS_ = ItemEntityInteractEventJS;
    /**
    * @javaClass net.minecraftforge.event.entity.EntityLeaveWorldEvent
    */
    class EntityLeaveWorldEvent extends Internal.EntityEvent {
        getListenerList(): Internal.ListenerList;
        getWorld(): Internal.Level;
        get world(): Internal.Level;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EntityLeaveWorldEvent_ = EntityLeaveWorldEvent;
    /**
    * @javaClass net.minecraftforge.event.village.WandererTradesEvent
    */
    class WandererTradesEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getGenericTrades(): Internal.List<Internal.VillagerTrades$ItemListing>;
        getRareTrades(): Internal.List<Internal.VillagerTrades$ItemListing>;
        get genericTrades(): Internal.List<Internal.VillagerTrades$ItemListing>;
        get listenerList(): Internal.ListenerList;
        get rareTrades(): Internal.List<Internal.VillagerTrades$ItemListing>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WandererTradesEvent_ = WandererTradesEvent;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.config.BooleanConfig
    */
    class BooleanConfig extends Internal.ConfigWithVariants<boolean> {
        getIteration(v: boolean, next: boolean): boolean;
        getStringForGUI(v: boolean): net.minecraft.network.chat.Component;
        getColor(v: boolean): Internal.Color4I;
        getIcon(v: boolean): Internal.Icon;
        static readonly "TRUE_TEXT" : Internal.TextComponent;
        static readonly "FALSE_TEXT" : Internal.TextComponent;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type BooleanConfig_ = BooleanConfig;
    /**
    * @javaClass net.minecraft.world.level.chunk.ChunkAccess
    */
    abstract class ChunkAccess implements Internal.BlockGetter, Internal.BiomeManager$NoiseBiomeSource, Internal.FeatureAccess {
        getWorldForge(): Internal.LevelAccessor;
        get worldForge(): Internal.LevelAccessor;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkAccess_ = ChunkAccess;
    /**
    * @javaClass net.minecraft.world.inventory.Slot
    */
    class Slot {
        getSlotIndex(): number;
        isSameInventory(arg0: Internal.Slot_): boolean;
        setBackground(arg0: ResourceLocation_, arg1: ResourceLocation_): this;
        get slotIndex(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Slot_ = Slot;
    /**
    * @javaClass dev.latvian.mods.kubejs.event.EventsJS$ScriptEventHandler
    */
    class EventsJS$ScriptEventHandler {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type EventsJS$ScriptEventHandler_ = EventsJS$ScriptEventHandler;
    /**
    * @javaClass mezz.jei.api.recipe.IRecipeManager
    */
    interface IRecipeManager {
        unhideRecipes<T>(arg0: mezz.jei.api.recipe.RecipeType_<T>, arg1: Internal.Collection_<T>): void;
        unhideRecipeCategory(arg0: mezz.jei.api.recipe.RecipeType_<any>): void;
        unhideRecipeCategory(arg0: ResourceLocation_): void;
        createRecipeLayoutDrawable<T>(arg0: Internal.IRecipeCategory_<T>, arg1: T, arg2: Internal.IFocus_<any>): Internal.IRecipeLayoutDrawable;
        addRecipes<T>(arg0: mezz.jei.api.recipe.RecipeType_<T>, arg1: Internal.List_<T>): void;
        createRecipeLookup<R>(arg0: mezz.jei.api.recipe.RecipeType_<R>): Internal.IRecipeLookup<R>;
        createRecipeCatalystLookup(arg0: mezz.jei.api.recipe.RecipeType_<any>): Internal.IRecipeCatalystLookup;
        createRecipeCategoryLookup(): Internal.IRecipeCategoriesLookup;
        getRecipeCategory(arg0: ResourceLocation_, arg1: boolean): Internal.IRecipeCategory<any>;
        getRecipeCategories(arg0: Internal.Collection_<Internal.IFocus_<any>>, arg1: boolean): Internal.List<Internal.IRecipeCategory<any>>;
        getRecipeCategories<V>(arg0: Internal.Collection_<ResourceLocation_>, arg1: Internal.IFocus_<V>, arg2: boolean): Internal.List<Internal.IRecipeCategory<any>>;
        getRecipeCategories<V>(arg0: Internal.IFocus_<V>, arg1: boolean): Internal.List<Internal.IRecipeCategory<any>>;
        hideRecipe<T>(arg0: T, arg1: ResourceLocation_): void;
        createFocus<V>(arg0: Internal.IFocus$Mode_, arg1: V): Internal.IFocus<V>;
        getRecipeCatalysts(arg0: Internal.IRecipeCategory_<any>, arg1: boolean): Internal.List<any>;
        addRecipe<T>(arg0: T, arg1: ResourceLocation_): void;
        hideRecipes<T>(arg0: mezz.jei.api.recipe.RecipeType_<T>, arg1: Internal.Collection_<T>): void;
        hideRecipeCategory(arg0: mezz.jei.api.recipe.RecipeType_<any>): void;
        hideRecipeCategory(arg0: ResourceLocation_): void;
        unhideRecipe<T>(arg0: T, arg1: ResourceLocation_): void;
        getRecipeCatalystsTyped(arg0: Internal.IRecipeCategory_<any>, arg1: boolean): Internal.List<Internal.ITypedIngredient<any>>;
        getRecipes<T, V>(arg0: Internal.IRecipeCategory_<T>, arg1: Internal.IFocus_<V>, arg2: boolean): Internal.List<T>;
        getRecipes<T>(arg0: Internal.IRecipeCategory_<T>, arg1: Internal.List_<Internal.IFocus_<any>>, arg2: boolean): Internal.List<T>;
    }
    type IRecipeManager_ = IRecipeManager;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongComparator
    */
    interface LongComparator extends Internal.Comparator<number> {
        compare(arg0: number, arg1: number): number;
        thenComparing(arg0: Internal.Comparator_<number>): Internal.Comparator<number>;
        thenComparing(arg0: Internal.LongComparator_): this;
        reversed(): this;
    }
    type LongComparator_ = ((arg0: number, arg1: number) => number) | LongComparator;
    /**
    * @javaClass com.mojang.brigadier.ParseResults
    */
    class ParseResults <S> {
        getExceptions(): Internal.Map<Internal.CommandNode<S>, Internal.CommandSyntaxException>;
        getReader(): Internal.ImmutableStringReader;
        getContext(): Internal.CommandContextBuilder<S>;
        get reader(): Internal.ImmutableStringReader;
        get context(): Internal.CommandContextBuilder<S>;
        get exceptions(): Internal.Map<Internal.CommandNode<S>, Internal.CommandSyntaxException>;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ParseResults_<S> = ParseResults<S>;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.ContextMenuItem
    */
    class ContextMenuItem implements Internal.Comparable<Internal.ContextMenuItem> {
        addMouseOverText(list: Internal.TooltipList_): void;
        setEnabled(v: boolean): this;
        setEnabled(v: Internal.BooleanSupplier_): this;
        setYesNo(s: net.minecraft.network.chat.Component_): this;
        onClicked(panel: Internal.Panel_, button: Internal.MouseButton_): void;
        compareTo(o: Internal.ContextMenuItem_): number;
        createWidget(panel: Internal.ContextMenu_): dev.ftb.mods.ftblibrary.ui.Widget;
        drawIcon(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        setCloseMenu(v: boolean): this;
        static readonly "SEPARATOR" : Internal.ContextMenuItem;
        "icon" : Internal.Icon;
        static readonly "TRUE" : (() => boolean);
        "callback" : (() => void);
        static readonly "FALSE" : (() => boolean);
        "title" : net.minecraft.network.chat.Component;
        "yesNoText" : net.minecraft.network.chat.Component;
        "closeMenu" : boolean;
        "enabled" : (() => boolean);
        set yesNo(s: net.minecraft.network.chat.Component_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ContextMenuItem_ = ContextMenuItem;
    /**
    * @javaClass net.minecraftforge.event.world.ChunkWatchEvent$UnWatch
    */
    class ChunkWatchEvent$UnWatch extends Internal.ChunkWatchEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChunkWatchEvent$UnWatch_ = ChunkWatchEvent$UnWatch;
    /**
    * @javaClass net.minecraftforge.client.event.ClientPlayerNetworkEvent$LoggedOutEvent
    */
    class ClientPlayerNetworkEvent$LoggedOutEvent extends Internal.ClientPlayerNetworkEvent {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ClientPlayerNetworkEvent$LoggedOutEvent_ = ClientPlayerNetworkEvent$LoggedOutEvent;
    /**
    * @javaClass java.lang.reflect.Field
    */
    class Field extends Internal.AccessibleObject implements Internal.Member {
        setByte(arg0: any, arg1: number): void;
        getByte(arg0: any): number;
        getName(): string;
        isSynthetic(): boolean;
        getDouble(arg0: any): number;
        setShort(arg0: any, arg1: number): void;
        getFloat(arg0: any): number;
        getDeclaredAnnotations(): Internal.Annotation[];
        setDouble(arg0: any, arg1: number): void;
        setChar(arg0: any, arg1: string): void;
        getDeclaringClass(): typeof any;
        getAnnotationsByType<T>(arg0: Internal.Class_<T>): T[];
        hashCode(): number;
        toGenericString(): string;
        get(arg0: any): any;
        getBoolean(arg0: any): boolean;
        getGenericType(): Internal.Type;
        getModifiers(): number;
        getAnnotatedType(): Internal.AnnotatedType;
        setFloat(arg0: any, arg1: number): void;
        set(arg0: any, arg1: any): void;
        setAccessible(arg0: boolean): void;
        getShort(arg0: any): number;
        setInt(arg0: any, arg1: number): void;
        getLong(arg0: any): number;
        getInt(arg0: any): number;
        getChar(arg0: any): string;
        setLong(arg0: any, arg1: number): void;
        getType(): typeof any;
        getAnnotation<T>(arg0: Internal.Class_<T>): T;
        equals(arg0: any): boolean;
        toString(): string;
        isEnumConstant(): boolean;
        setBoolean(arg0: any, arg1: boolean): void;
        get synthetic(): boolean;
        get declaredAnnotations(): Internal.Annotation[];
        get annotatedType(): Internal.AnnotatedType;
        get enumConstant(): boolean;
        get name(): string;
        get genericType(): Internal.Type;
        get modifiers(): number;
        get type(): typeof any;
        get declaringClass(): typeof any;
        set accessible(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Field_ = Field;
    /**
    * @javaClass java.nio.file.FileStore
    */
    abstract class FileStore {
        getTotalSpace(): number;
        getAttribute(arg0: string): any;
        getUsableSpace(): number;
        isReadOnly(): boolean;
        getBlockSize(): number;
        supportsFileAttributeView(arg0: Internal.Class_<Internal.FileAttributeView_>): boolean;
        supportsFileAttributeView(arg0: string): boolean;
        name(): string;
        type(): string;
        getUnallocatedSpace(): number;
        getFileStoreAttributeView<V>(arg0: Internal.Class_<V>): V;
        get unallocatedSpace(): number;
        get readOnly(): boolean;
        get totalSpace(): number;
        get usableSpace(): number;
        get blockSize(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FileStore_ = FileStore;
    /**
    * @javaClass javax.accessibility.AccessibleState
    */
    class AccessibleState extends Internal.AccessibleBundle {
        static readonly "ACTIVE" : Internal.AccessibleState;
        static readonly "MANAGES_DESCENDANTS" : Internal.AccessibleState;
        static readonly "EDITABLE" : Internal.AccessibleState;
        static readonly "FOCUSED" : Internal.AccessibleState;
        static readonly "CHECKED" : Internal.AccessibleState;
        static readonly "VISIBLE" : Internal.AccessibleState;
        static readonly "PRESSED" : Internal.AccessibleState;
        static readonly "SINGLE_LINE" : Internal.AccessibleState;
        static readonly "VERTICAL" : Internal.AccessibleState;
        static readonly "COLLAPSED" : Internal.AccessibleState;
        static readonly "INDETERMINATE" : Internal.AccessibleState;
        static readonly "ARMED" : Internal.AccessibleState;
        static readonly "SHOWING" : Internal.AccessibleState;
        static readonly "FOCUSABLE" : Internal.AccessibleState;
        static readonly "BUSY" : Internal.AccessibleState;
        static readonly "EXPANDED" : Internal.AccessibleState;
        static readonly "MULTISELECTABLE" : Internal.AccessibleState;
        static readonly "ICONIFIED" : Internal.AccessibleState;
        static readonly "RESIZABLE" : Internal.AccessibleState;
        static readonly "SELECTABLE" : Internal.AccessibleState;
        static readonly "EXPANDABLE" : Internal.AccessibleState;
        static readonly "MODAL" : Internal.AccessibleState;
        static readonly "SELECTED" : Internal.AccessibleState;
        static readonly "TRUNCATED" : Internal.AccessibleState;
        static readonly "OPAQUE" : Internal.AccessibleState;
        static readonly "ENABLED" : Internal.AccessibleState;
        static readonly "HORIZONTAL" : Internal.AccessibleState;
        static readonly "TRANSIENT" : Internal.AccessibleState;
        static readonly "MULTI_LINE" : Internal.AccessibleState;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type AccessibleState_ = AccessibleState;
    /**
    * @javaClass com.mojang.blaze3d.vertex.BufferVertexConsumer
    */
    interface BufferVertexConsumer extends Internal.VertexConsumer {
    }
    type BufferVertexConsumer_ = BufferVertexConsumer;
    /**
    * @javaClass net.minecraft.world.entity.projectile.FireworkRocketEntity
    */
    class FireworkRocketEntity extends Internal.Projectile implements Internal.ItemSupplier, Internal.FireworkRocketEntityKJS {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FireworkRocketEntity_ = FireworkRocketEntity;
    /**
    * @javaClass net.minecraftforge.event.entity.player.PlayerEvent$SaveToFile
    */
    class PlayerEvent$SaveToFile extends Internal.PlayerEvent {
        getListenerList(): Internal.ListenerList;
        getPlayerFile(arg0: string): Internal.File;
        getPlayerDirectory(): Internal.File;
        getPlayerUUID(): string;
        get playerUUID(): string;
        get playerDirectory(): Internal.File;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type PlayerEvent$SaveToFile_ = PlayerEvent$SaveToFile;
    /**
    * @javaClass net.minecraftforge.event.entity.living.LivingEvent$LivingUpdateEvent
    */
    class LivingEvent$LivingUpdateEvent extends Internal.LivingEvent {
        getListenerList(): Internal.ListenerList;
        isCancelable(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type LivingEvent$LivingUpdateEvent_ = LivingEvent$LivingUpdateEvent;
    /**
    * @javaClass com.jozufozu.flywheel.util.MatrixWrite
    */
    interface MatrixWrite {
        flywheel$writeUnsafe(arg0: number): void;
        flywheel$write(arg0: Internal.VecBuffer_): void;
    }
    type MatrixWrite_ = MatrixWrite;
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.WidgetType
    */
    class WidgetType extends Internal.Enum<Internal.WidgetType> {
        static valueOf(name: string): this;
        static values(): Internal.WidgetType[];
        static mouseOver(mouseOver: boolean): this;
        static readonly "DISABLED" : Internal.WidgetType;
        static readonly "MOUSE_OVER" : Internal.WidgetType;
        static readonly "NORMAL" : Internal.WidgetType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type WidgetType_ = "normal" | "mouse_over" | "disabled" | WidgetType;
    /**
    * @javaClass dev.latvian.mods.kubejs.block.custom.StairBlockBuilder
    */
    class StairBlockBuilder extends Internal.ShapedBlockBuilder {
        generateAssetJsons(generator: Internal.AssetJsonGenerator_): void;
        createObject(): Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type StairBlockBuilder_ = StairBlockBuilder;
    /**
    * @javaClass dev.ftb.mods.ftbquests.quest.ChapterGroup
    */
    class ChapterGroup extends Internal.QuestObject {
        isDefaultGroup(): boolean;
        editedFromGUI(): void;
        getIndex(): number;
        onCompleted(data: Internal.QuestProgressEventData_<any>): void;
        getFirstVisibleChapter(data: Internal.TeamData_): Internal.Chapter;
        getQuestFile(): Internal.QuestFile;
        isVisible(data: Internal.TeamData_): boolean;
        getConfig(config: Internal.ConfigGroup_): void;
        getChildren(): Internal.Collection<Internal.QuestObject>;
        getRelativeProgressFromChildren(data: Internal.TeamData_): number;
        getAltTitle(): net.minecraft.network.chat.Component;
        getAltIcon(): Internal.Icon;
        getVisibleChapters(data: Internal.TeamData_): Internal.List<Internal.Chapter>;
        getObjectType(): Internal.QuestObjectType;
        hasUnclaimedRewardsRaw(teamData: Internal.TeamData_, player: Internal.UUID_): boolean;
        deleteSelf(): void;
        clearCachedData(): void;
        onCreated(): void;
        readonly "file" : Internal.QuestFile;
        readonly "chapters" : Internal.List<Internal.Chapter>;
        "guiCollapsed" : boolean;
        get defaultGroup(): boolean;
        get children(): Internal.Collection<Internal.QuestObject>;
        get index(): number;
        get altTitle(): net.minecraft.network.chat.Component;
        get questFile(): Internal.QuestFile;
        get altIcon(): Internal.Icon;
        get objectType(): Internal.QuestObjectType;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ChapterGroup_ = ChapterGroup;
    /**
    * @javaClass net.minecraftforge.client.event.RenderTooltipEvent$Pre
    */
    class RenderTooltipEvent$Pre extends Internal.RenderTooltipEvent {
        getListenerList(): Internal.ListenerList;
        setY(arg0: number): void;
        setX(arg0: number): void;
        setFont(arg0: net.minecraft.client.gui.Font_): void;
        getScreenWidth(): number;
        isCancelable(): boolean;
        getScreenHeight(): number;
        get screenWidth(): number;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        get screenHeight(): number;
        set x(arg0: number);
        set y(arg0: number);
        set font(arg0: net.minecraft.client.gui.Font_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RenderTooltipEvent$Pre_ = RenderTooltipEvent$Pre;
    /**
    * @javaClass com.prunoideae.recipe.ManaInfusionRecipeJS
    */
    class ManaInfusionRecipeJS extends Internal.BotaniaRecipeJS {
        serialize(): void;
        create(args: Internal.ListJS_): void;
        deserialize(): void;
        "block" : Internal.Block;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type ManaInfusionRecipeJS_ = ManaInfusionRecipeJS;
    /**
    * @javaClass java.util.Set
    */
    interface Set <E> extends Internal.Collection<E> {
        add(arg0: E): boolean;
        spliterator(): Internal.Spliterator<E>;
        containsAll(arg0: Internal.Collection_<any>): boolean;
        isEmpty(): boolean;
        clear(): void;
        copyOf<E>(arg0: Internal.Collection_<E>): Internal.Set<E>;
        remove(arg0: any): boolean;
        removeAll(arg0: Internal.Collection_<any>): boolean;
        contains(arg0: any): boolean;
        iterator(): Internal.Iterator<E>;
        size(): number;
        addAll(arg0: Internal.Collection_<E>): boolean;
        hashCode(): number;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E): Internal.Set<E>;
        of<E>(arg0: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E, arg9: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E, arg8: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E, arg7: E): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E, arg3: E, arg4: E, arg5: E, arg6: E): Internal.Set<E>;
        of<E>(... arg0: E[]): Internal.Set<E>;
        of<E>(arg0: E, arg1: E, arg2: E): Internal.Set<E>;
        of<E>(): Internal.Set<E>;
        of<E>(arg0: E, arg1: E): Internal.Set<E>;
        equals(arg0: any): boolean;
        toArray<T>(arg0: T[]): T[];
        toArray(): any[];
        retainAll(arg0: Internal.Collection_<any>): boolean;
    }
    type Set_<E> = Set<E>;
    /**
    * @javaClass java.util.function.DoubleConsumer
    */
    interface DoubleConsumer {
        andThen(arg0: Internal.DoubleConsumer_): this;
        accept(arg0: number): void;
    }
    type DoubleConsumer_ = ((arg0: number) => void) | DoubleConsumer;
}
declare namespace org.apache.maven.repository.legacy.metadata {
    /**
    * @javaClass org.apache.maven.repository.legacy.metadata.ArtifactMetadata
    */
    interface ArtifactMetadata {
        getKey(): any;
        extendedToString(): string;
        getLocalFilename(arg0: Internal.ArtifactRepository_): string;
        storedInArtifactVersionDirectory(): boolean;
        storedInGroupDirectory(): boolean;
        merge(arg0: org.apache.maven.repository.legacy.metadata.ArtifactMetadata_): void;
        getBaseVersion(): string;
        storeInLocalRepository(arg0: Internal.ArtifactRepository_, arg1: Internal.ArtifactRepository_): void;
        getArtifactId(): string;
        getRemoteFilename(): string;
        getGroupId(): string;
    }
    type ArtifactMetadata_ = ArtifactMetadata;
}
declare namespace dev.latvian.mods.rhino.mod.util.color {
    /**
    * @javaClass dev.latvian.mods.rhino.mod.util.color.Color
    */
    interface Color extends Internal.SpecialEquality {
        getRgbJS(): number;
        createTextColorJS(): Internal.TextColor;
        getArgbJS(): number;
        getHexJS(): string;
        getSerializeJS(): string;
        getFireworkColorJS(): number;
        specialEquals(o: any, shallow: boolean): boolean;
    }
    type Color_ = (() => number) | Color;
}
declare namespace net.minecraft.network.chat {
    /**
    * @javaClass net.minecraft.network.chat.Component
    */
    interface Component extends Internal.Message, Internal.FormattedText {
        getString(): string;
    }
    type Component_ = Component;
}
declare namespace net.minecraft.client.gui {
    /**
    * @javaClass net.minecraft.client.gui.Font
    */
    class Font {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Font_ = Font;
}
declare namespace com.jozufozu.flywheel.core.model {
    /**
    * @javaClass com.jozufozu.flywheel.core.model.Model
    */
    interface Model {
        size(): number;
        getReader(): Internal.VertexList;
        getType(): Internal.VertexType;
        writeInto(arg0: Internal.ByteBuffer_): void;
        name(): string;
        vertexCount(): number;
        createEBO(): Internal.ElementBuffer;
        empty(): boolean;
    }
    type Model_ = Model;
}
declare namespace com.mojang.blaze3d.audio {
    /**
    * @javaClass com.mojang.blaze3d.audio.Channel
    */
    class Channel {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Channel_ = Channel;
}
declare namespace io.netty.util.concurrent {
    /**
    * @javaClass io.netty.util.concurrent.Future
    */
    interface Future <V> extends Internal.Future<V> {
        cancel(arg0: boolean): boolean;
        removeListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): io.netty.util.concurrent.Future<V>;
        syncUninterruptibly(): io.netty.util.concurrent.Future<V>;
        isCancellable(): boolean;
        await(arg0: number, arg1: Internal.TimeUnit_): boolean;
        await(arg0: number): boolean;
        await(): io.netty.util.concurrent.Future<V>;
        getNow(): V;
        cause(): Internal.Throwable;
        awaitUninterruptibly(arg0: number): boolean;
        awaitUninterruptibly(arg0: number, arg1: Internal.TimeUnit_): boolean;
        awaitUninterruptibly(): io.netty.util.concurrent.Future<V>;
        removeListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): io.netty.util.concurrent.Future<V>;
        addListeners(... arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>[]): io.netty.util.concurrent.Future<V>;
        sync(): io.netty.util.concurrent.Future<V>;
        isSuccess(): boolean;
        addListener(arg0: Internal.GenericFutureListener_<io.netty.util.concurrent.Future_<V>>): io.netty.util.concurrent.Future<V>;
    }
    type Future_<V> = Future<V>;
    /**
    * @javaClass io.netty.util.concurrent.ScheduledFuture
    */
    interface ScheduledFuture <V> extends io.netty.util.concurrent.Future<V>, Internal.ScheduledFuture<V> {
    }
    type ScheduledFuture_<V> = ScheduledFuture<V>;
}
declare namespace net.minecraft.world {
    /**
    * @javaClass net.minecraft.world.Container
    */
    interface Container extends Internal.Clearable {
    }
    type Container_ = Container;
}
declare namespace io.netty.channel {
    /**
    * @javaClass io.netty.channel.Channel
    */
    interface Channel extends Internal.AttributeMap, Internal.ChannelOutboundInvoker, Internal.Comparable<io.netty.channel.Channel> {
        parent(): this;
        metadata(): Internal.ChannelMetadata;
        read(): this;
        bytesBeforeUnwritable(): number;
        eventLoop(): Internal.EventLoop;
        isWritable(): boolean;
        isActive(): boolean;
        unsafe(): Internal.Channel$Unsafe;
        pipeline(): Internal.ChannelPipeline;
        isOpen(): boolean;
        closeFuture(): Internal.ChannelFuture;
        flush(): this;
        localAddress(): Internal.SocketAddress;
        isRegistered(): boolean;
        bytesBeforeWritable(): number;
        id(): Internal.ChannelId;
        alloc(): Internal.ByteBufAllocator;
        config(): Internal.ChannelConfig;
        remoteAddress(): Internal.SocketAddress;
    }
    type Channel_ = Channel;
}
declare namespace net.minecraft.world.level.material {
    /**
    * @javaClass net.minecraft.world.level.material.Material
    */
    class Material {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Material_ = Material;
}
declare namespace com.mojang.datafixers.util {
    /**
    * @javaClass com.mojang.datafixers.util.Unit
    */
    class Unit extends Internal.Enum<com.mojang.datafixers.util.Unit> {
        static valueOf(arg0: string): this;
        static values(): com.mojang.datafixers.util.Unit[];
        toString(): string;
        static readonly "INSTANCE" : com.mojang.datafixers.util.Unit;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Unit_ = "instance" | Unit;
    /**
    * @javaClass com.mojang.datafixers.util.Pair
    */
    class Pair <F, S> implements Internal.App<Internal.Pair$Mu<S>, F> {
        mapFirst<F2>(arg0: Internal.Function_<F, F2>): com.mojang.datafixers.util.Pair<F2, S>;
        swap(): com.mojang.datafixers.util.Pair<S, F>;
        static unbox<F, S>(arg0: Internal.App_<Internal.Pair$Mu_<S>, F>): com.mojang.datafixers.util.Pair<F, S>;
        getFirst(): F;
        hashCode(): number;
        static toMap<F, S>(): Internal.Collector<com.mojang.datafixers.util.Pair<F, S>, any, Internal.Map<F, S>>;
        static of<F, S>(arg0: F, arg1: S): com.mojang.datafixers.util.Pair<F, S>;
        equals(arg0: any): boolean;
        getSecond(): S;
        toString(): string;
        mapSecond<S2>(arg0: Internal.Function_<S, S2>): com.mojang.datafixers.util.Pair<F, S2>;
        get first(): F;
        get second(): S;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Pair_<F, S> = Pair<F, S>;
}
declare namespace dev.ftb.mods.ftblibrary.ui {
    /**
    * @javaClass dev.ftb.mods.ftblibrary.ui.Widget
    */
    class Widget implements Internal.IScreenWrapper {
        static isMouseButtonDown(button: Internal.MouseButton_): boolean;
        mouseDoubleClicked(button: Internal.MouseButton_): boolean;
        setY(v: number): void;
        collidesWith(x: number, y: number, w: number, h: number): boolean;
        setX(v: number): void;
        shouldDraw(): boolean;
        mouseScrolled(scroll: number): boolean;
        acceptGhostIngredient(ingredient: any): void;
        shouldAddMouseOverText(): boolean;
        isGhostIngredientTarget(ingredient: any): boolean;
        getGui(): Internal.BaseScreen;
        mousePressed(button: Internal.MouseButton_): boolean;
        setPos(x: number, y: number): void;
        mouseReleased(button: Internal.MouseButton_): void;
        getTitle(): net.minecraft.network.chat.Component;
        setSize(w: number, h: number): void;
        static getClipboardString(): string;
        getPartialTicks(): number;
        static isCtrlKeyDown(): boolean;
        static isKeyDown(key: number): boolean;
        updateMouseOver(mouseX: number, mouseY: number): void;
        keyReleased(key: Internal.Key_): void;
        static isShiftKeyDown(): boolean;
        static setClipboardString(string: string): void;
        getScreen(): com.mojang.blaze3d.platform.Window;
        getMouseY(): number;
        onClosed(): void;
        isMouseOver(): boolean;
        getCursor(): Internal.CursorType;
        keyPressed(key: Internal.Key_): boolean;
        getMouseX(): number;
        getWidgetType(): Internal.WidgetType;
        setPosAndSize(x: number, y: number, w: number, h: number): this;
        draw(matrixStack: Internal.PoseStack_, theme: Internal.Theme_, x: number, y: number, w: number, h: number): void;
        tick(): void;
        checkMouseOver(mouseX: number, mouseY: number): boolean;
        setHeight(v: number): void;
        setWidth(v: number): void;
        addMouseOverText(list: Internal.TooltipList_): void;
        getX(): number;
        getY(): number;
        playClickSound(): void;
        handleClick(scheme: string, path: string): boolean;
        handleClick(click: string): boolean;
        isEnabled(): boolean;
        charTyped(c: string, modifiers: Internal.KeyModifiers_): boolean;
        toString(): string;
        getIngredientUnderMouse(): any;
        "posX" : number;
        "parent" : Internal.Panel;
        "posY" : number;
        "width" : number;
        "height" : number;
        get cursor(): Internal.CursorType;
        get mouseX(): number;
        get ingredientUnderMouse(): any;
        get clipboardString(): string;
        get shiftKeyDown(): boolean;
        get mouseY(): number;
        get mouseOver(): boolean;
        get screen(): com.mojang.blaze3d.platform.Window;
        get title(): net.minecraft.network.chat.Component;
        get widgetType(): Internal.WidgetType;
        get enabled(): boolean;
        get ctrlKeyDown(): boolean;
        get x(): number;
        get y(): number;
        get gui(): Internal.BaseScreen;
        get partialTicks(): number;
        set clipboardString(string: string);
        set x(v: number);
        set y(v: number);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Widget_ = Widget;
}
declare namespace it.unimi.dsi.fastutil {
    /**
    * @javaClass it.unimi.dsi.fastutil.Function
    */
    interface Function <K, V> extends Internal.Function<K, V> {
        getOrDefault(arg0: any, arg1: V): V;
        size(): number;
        apply(arg0: K): V;
        containsKey(arg0: any): boolean;
        get(arg0: any): V;
        clear(): void;
        put(arg0: K, arg1: V): V;
        remove(arg0: any): V;
    }
    type Function_<K, V> = ((arg0: any) => V) | Function<K, V>;
}
declare namespace mezz.jei.api.recipe {
    /**
    * @javaClass mezz.jei.api.recipe.RecipeType
    */
    class RecipeType <T> {
        getUid(): ResourceLocation;
        hashCode(): number;
        equals(arg0: any): boolean;
        static create<T>(arg0: string, arg1: string, arg2: Internal.Class_<T>): mezz.jei.api.recipe.RecipeType<T>;
        toString(): string;
        getRecipeClass(): typeof T;
        get uid(): ResourceLocation;
        get recipeClass(): typeof T;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type RecipeType_<T> = RecipeType<T>;
}
declare namespace io.netty.util {
    /**
    * @javaClass io.netty.util.Attribute
    */
    interface Attribute <T> {
        set(arg0: T): void;
        compareAndSet(arg0: T, arg1: T): boolean;
        setIfAbsent(arg0: T): T;
        get(): T;
        getAndSet(arg0: T): T;
        getAndRemove(): T;
        key(): Internal.AttributeKey<T>;
        remove(): void;
    }
    type Attribute_<T> = Attribute<T>;
}
declare namespace net.minecraftforge.eventbus.api {
    /**
    * @javaClass net.minecraftforge.eventbus.api.Event
    */
    class Event {
        setCanceled(arg0: boolean): void;
        getListenerList(): Internal.ListenerList;
        isCanceled(): boolean;
        setResult(arg0: Internal.Event$Result_): void;
        getResult(): Internal.Event$Result;
        hasResult(): boolean;
        isCancelable(): boolean;
        getPhase(): Internal.EventPriority;
        setPhase(arg0: Internal.EventPriority_): void;
        get result(): Internal.Event$Result;
        get phase(): Internal.EventPriority;
        get canceled(): boolean;
        get cancelable(): boolean;
        get listenerList(): Internal.ListenerList;
        set phase(arg0: Internal.EventPriority_);
        set result(arg0: Internal.Event$Result_);
        set canceled(arg0: boolean);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Event_ = Event;
}
declare namespace dev.architectury.fluid {
    /**
    * @javaClass dev.architectury.fluid.FluidStack
    */
    class FluidStack {
        getRawFluidSupplier(): Internal.Supplier<Internal.Fluid>;
        getRawFluid(): Internal.Fluid;
        getName(): net.minecraft.network.chat.Component;
        isTagEqual(other: dev.architectury.fluid.FluidStack_): boolean;
        getOrCreateChildTag(childName: string): Internal.CompoundTag;
        copyWithAmount(amount: number): this;
        static empty(): this;
        getChildTag(childName: string): Internal.CompoundTag;
        hashCode(): number;
        static create(fluid: Internal.Fluid_, amount: number, tag: Internal.CompoundTag_): this;
        static create(fluid: Internal.Supplier_<Internal.Fluid_>, amount: number): this;
        static create(fluid: Internal.Supplier_<Internal.Fluid_>, amount: number, tag: Internal.CompoundTag_): this;
        static create(stack: dev.architectury.fluid.FluidStack_, amount: number): this;
        static create(fluid: Internal.Fluid_, amount: number): this;
        setTag(tag: Internal.CompoundTag_): void;
        copy(): this;
        setAmount(amount: number): void;
        write(buf: Internal.FriendlyByteBuf_): void;
        write(tag: Internal.CompoundTag_): Internal.CompoundTag;
        isFluidEqual(other: dev.architectury.fluid.FluidStack_): boolean;
        getAmount(): number;
        static init(): void;
        removeChildTag(childName: string): void;
        grow(amount: number): void;
        static read(buf: Internal.FriendlyByteBuf_): this;
        static read(tag: Internal.CompoundTag_): this;
        hasTag(): boolean;
        shrink(amount: number): void;
        getTranslationKey(): string;
        isEmpty(): boolean;
        getTag(): Internal.CompoundTag;
        isFluidStackEqual(other: dev.architectury.fluid.FluidStack_): boolean;
        static bucketAmount(): number;
        getOrCreateTag(): Internal.CompoundTag;
        equals(o: any): boolean;
        getFluid(): Internal.Fluid;
        get orCreateTag(): Internal.CompoundTag;
        get rawFluid(): Internal.Fluid;
        get amount(): number;
        get rawFluidSupplier(): Internal.Supplier<Internal.Fluid>;
        get translationKey(): string;
        get name(): net.minecraft.network.chat.Component;
        get fluid(): Internal.Fluid;
        get tag(): Internal.CompoundTag;
        set amount(amount: number);
        set tag(tag: Internal.CompoundTag_);
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type FluidStack_ = FluidStack;
}
declare namespace it.unimi.dsi.fastutil.ints {
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntPredicate
    */
    interface IntPredicate extends Internal.Predicate<number>, Internal.IntPredicate {
        or(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        or(arg0: Internal.IntPredicate_): this;
        or(arg0: it.unimi.dsi.fastutil.ints.IntPredicate_): this;
        test(arg0: number): boolean;
        and(arg0: Internal.IntPredicate_): this;
        and(arg0: it.unimi.dsi.fastutil.ints.IntPredicate_): this;
        and(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        negate(): this;
    }
    type IntPredicate_ = IntPredicate;
    /**
    * @javaClass it.unimi.dsi.fastutil.ints.IntConsumer
    */
    interface IntConsumer extends Internal.Consumer<number>, Internal.IntConsumer {
        andThen(arg0: Internal.IntConsumer_): this;
        andThen(arg0: Internal.Consumer_<number>): Internal.Consumer<number>;
        andThen(arg0: it.unimi.dsi.fastutil.ints.IntConsumer_): this;
        accept(arg0: number): void;
    }
    type IntConsumer_ = IntConsumer;
}
declare namespace org.objectweb.asm {
    /**
    * @javaClass org.objectweb.asm.Type
    */
    class Type {
        getDescriptor(): string;
        static getDescriptor(arg0: Internal.Class_<any>): string;
        getElementType(): this;
        static getArgumentTypes(arg0: string): org.objectweb.asm.Type[];
        static getArgumentTypes(arg0: Internal.Method_): org.objectweb.asm.Type[];
        getArgumentTypes(): org.objectweb.asm.Type[];
        static getArgumentsAndReturnSizes(arg0: string): number;
        getArgumentsAndReturnSizes(): number;
        getDimensions(): number;
        getSort(): number;
        getSize(): number;
        static getMethodDescriptor(arg0: org.objectweb.asm.Type_, ... arg1: org.objectweb.asm.Type_[]): string;
        static getMethodDescriptor(arg0: Internal.Method_): string;
        getReturnType(): this;
        static getReturnType(arg0: string): this;
        static getReturnType(arg0: Internal.Method_): this;
        getInternalName(): string;
        static getInternalName(arg0: Internal.Class_<any>): string;
        static getType(arg0: Internal.Class_<any>): this;
        static getType(arg0: string): this;
        static getType(arg0: Internal.Method_): this;
        static getType(arg0: Internal.Constructor_<any>): this;
        hashCode(): number;
        equals(arg0: any): boolean;
        static getConstructorDescriptor(arg0: Internal.Constructor_<any>): string;
        static getObjectType(arg0: string): this;
        static getMethodType(arg0: org.objectweb.asm.Type_, ... arg1: org.objectweb.asm.Type_[]): this;
        static getMethodType(arg0: string): this;
        toString(): string;
        getClassName(): string;
        getOpcode(arg0: number): number;
        static readonly "CHAR_TYPE" : org.objectweb.asm.Type;
        static readonly "FLOAT" : 6;
        static readonly "DOUBLE_TYPE" : org.objectweb.asm.Type;
        static readonly "ARRAY" : 9;
        static readonly "LONG_TYPE" : org.objectweb.asm.Type;
        static readonly "BYTE_TYPE" : org.objectweb.asm.Type;
        static readonly "CHAR" : 2;
        static readonly "VOID_TYPE" : org.objectweb.asm.Type;
        static readonly "OBJECT" : 10;
        static readonly "BOOLEAN_TYPE" : org.objectweb.asm.Type;
        static readonly "FLOAT_TYPE" : org.objectweb.asm.Type;
        static readonly "BOOLEAN" : 1;
        static readonly "INT" : 5;
        static readonly "SHORT" : 4;
        static readonly "BYTE" : 3;
        static readonly "METHOD" : 11;
        static readonly "SHORT_TYPE" : org.objectweb.asm.Type;
        static readonly "DOUBLE" : 8;
        static readonly "VOID" : 0;
        static readonly "LONG" : 7;
        static readonly "INT_TYPE" : org.objectweb.asm.Type;
        get argumentsAndReturnSizes(): number;
        get internalName(): string;
        get size(): number;
        get className(): string;
        get descriptor(): string;
        get argumentTypes(): org.objectweb.asm.Type[];
        get sort(): number;
        get elementType(): this;
        get returnType(): this;
        get dimensions(): number;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Type_ = Type;
}
declare namespace com.jozufozu.flywheel.api {
    /**
    * @javaClass com.jozufozu.flywheel.api.Material
    */
    interface Material <D> {
        getModel(arg0: Internal.BlockState_): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel_, arg1: Internal.BlockState_): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel_): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel_, arg1: Internal.BlockState_, arg2: Internal.Direction_): Internal.Instancer<D>;
        getModel(arg0: Internal.PartialModel_, arg1: Internal.BlockState_, arg2: Internal.Direction_, arg3: Internal.Supplier_<Internal.PoseStack_>): Internal.Instancer<D>;
        model(arg0: any, arg1: Internal.Supplier_<com.jozufozu.flywheel.core.model.Model_>): Internal.Instancer<D>;
    }
    type Material_<D> = ((arg0: any, arg1: Internal.Supplier<com.jozufozu.flywheel.core.model.Model>) => Internal.Instancer<D>) | Material<D>;
}
declare namespace net.minecraft.tags {
    /**
    * @javaClass net.minecraft.tags.Tag
    */
    class Tag <T> {
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type Tag_<T> = Tag<T>;
}
declare namespace it.unimi.dsi.fastutil.longs {
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongConsumer
    */
    interface LongConsumer extends Internal.Consumer<number>, Internal.LongConsumer {
        andThen(arg0: Internal.LongConsumer_): this;
        andThen(arg0: Internal.Consumer_<number>): Internal.Consumer<number>;
        andThen(arg0: it.unimi.dsi.fastutil.longs.LongConsumer_): this;
        accept(arg0: number): void;
    }
    type LongConsumer_ = LongConsumer;
    /**
    * @javaClass it.unimi.dsi.fastutil.longs.LongPredicate
    */
    interface LongPredicate extends Internal.Predicate<number>, Internal.LongPredicate {
        or(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        or(arg0: Internal.LongPredicate_): this;
        or(arg0: it.unimi.dsi.fastutil.longs.LongPredicate_): this;
        test(arg0: number): boolean;
        and(arg0: Internal.LongPredicate_): this;
        and(arg0: it.unimi.dsi.fastutil.longs.LongPredicate_): this;
        and(arg0: Internal.Predicate_<number>): Internal.Predicate<number>;
        negate(): this;
    }
    type LongPredicate_ = LongPredicate;
}
declare namespace net.minecraftforge.client.event.sound {
    /**
    * @javaClass net.minecraftforge.client.event.sound.SoundEvent
    */
    class SoundEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        getEngine(): Internal.SoundEngine;
        get listenerList(): Internal.ListenerList;
        get engine(): Internal.SoundEngine;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type SoundEvent_ = SoundEvent;
}
declare namespace dev.latvian.mods.rhino {
    /**
    * @javaClass dev.latvian.mods.rhino.Callable
    */
    interface Callable {
        call(arg0: Internal.Context_, arg1: Internal.Scriptable_, arg2: Internal.Scriptable_, arg3: any[]): any;
    }
    type Callable_ = ((arg0: Internal.Context, arg1: Internal.Scriptable, arg2: Internal.Scriptable, arg3: any[]) => any) | Callable;
    /**
    * @javaClass dev.latvian.mods.rhino.Function
    */
    interface Function extends Internal.Scriptable, dev.latvian.mods.rhino.Callable {
        call(arg0: Internal.Context_, arg1: Internal.Scriptable_, arg2: Internal.Scriptable_, arg3: any[]): any;
        construct(arg0: Internal.Context_, arg1: Internal.Scriptable_, arg2: any[]): Internal.Scriptable;
    }
    type Function_ = Function;
}
declare namespace it.unimi.dsi.fastutil.doubles {
    /**
    * @javaClass it.unimi.dsi.fastutil.doubles.DoubleConsumer
    */
    interface DoubleConsumer extends Internal.Consumer<number>, Internal.DoubleConsumer {
        andThen(arg0: Internal.DoubleConsumer_): this;
        andThen(arg0: Internal.Consumer_<number>): Internal.Consumer<number>;
        andThen(arg0: it.unimi.dsi.fastutil.doubles.DoubleConsumer_): this;
        accept(arg0: number): void;
    }
    type DoubleConsumer_ = DoubleConsumer;
}
declare namespace net.minecraftforge.client.event {
    /**
    * @javaClass net.minecraftforge.client.event.InputEvent
    */
    class InputEvent extends net.minecraftforge.eventbus.api.Event {
        getListenerList(): Internal.ListenerList;
        get listenerList(): Internal.ListenerList;
        /**
        * Internal constructor, this means that it's not valid and you will get an error if you use it.
        */
        protected constructor();
    }
    type InputEvent_ = InputEvent;
}
declare namespace Document {
    class CreateRecipes {
        /**
        * Creates a recipe for Crushing Wheels.
        *
        * Specifying chances on outputs will make them output with chance.
        */
        crushing(outputs: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Millstone.
        *
        * Specifying chances on outputs will make them output with chance.
        */
        milling(outputs: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Compacting.
        */
        compacting(output: Type.SelfOrArray<Type.ItemStackOrFluid>, inputs: Type.SelfOrArray<Type.IngredientOrFluid>): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Mixing.
        */
        mixing(output: Type.SelfOrArray<Type.ItemStackOrFluid>, inputs: Type.SelfOrArray<Type.IngredientOrFluid>): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Pressing.
        *
        * Pressing uses Depot or Belt as container, and can only have 1 item slot as input.
        *
        * Pressing is available as an Assembly step.
        */
        pressing(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Deploying.
        *
        * Deploying is available as an Assembly step.
        */
        deploying(output: Internal.ItemStackJS_, input: Internal.IngredientJS_[]): Internal.ItemApplicationRecipeJS_;
        /**
        * Creates a recipe for Cutting.
        *
        * Cutting is available as an Assembly step.
        */
        cutting(output: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Filling.
        *
        * Filling is available as an Assembly step.
        */
        filling(output: Internal.ItemStackJS_, input: Type.IngredientOrFluid[]): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Sequenced Assembly.
        *
        * The sequnce must use recipes which is available for Assembly.
        */
        sequenced_assembly(output: Internal.ItemStackJS_[], input: Internal.IngredientJS_, sequence: Internal.ProcessingRecipeJS_[]): Internal.SequencedAssemblyRecipeJS_;
        /**
        * Creates a recipe for Splashing.
        */
        splashing(output: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Haunting.
        */
        haunting(output: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Sandpaper Polishing.
        */
        sandpaper_polishing(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Mechanical Crafting.
        */
        mechanical_crafting(output: Internal.ItemStackJS_, pattern: string[], items: Internal.Map_<string, Internal.IngredientJS_>): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Emptying.
        */
        emptying(output: Type.ItemStackOrFluid[], input: Internal.IngredientJS_): Internal.ProcessingRecipeJS_;
        /**
        * Creates a recipe for Emptying.
        */
        item_application(output: Type.SelfOrArray<Internal.ItemStackJS_>, input: Internal.IngredientJS_[]): Internal.ItemApplicationRecipeJS_;
    }
    class RecipeHolder {
        readonly botania: Document.BotaniaRecipes;
        /**
        * All recipes from Create.
        */
        readonly create: Document.CreateRecipes;
        /**
        * All recipes from Minecraft.
        */
        readonly minecraft: Document.MinecraftRecipes;
    }
    class BotaniaRecipes {
        /**
        * Default mana is 100.
        */
        mana_infusion(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.ManaInfusionRecipeJS_;
        mana_infusion(output: Internal.ItemStackJS_, input: Internal.IngredientJS_, mana: number): Internal.ManaInfusionRecipeJS_;
        mana_infusion(output: Internal.ItemStackJS_, input: Internal.IngredientJS_, mana: number, catalyst: Internal.Block_): Internal.ManaInfusionRecipeJS_;
        /**
        * Default mana is 5,200, same as Basic Runes.
        */
        runic_altar(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[]): Internal.RuneAltarRecipeJS_;
        runic_altar(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[], mana: number): Internal.RuneAltarRecipeJS_;
        elven_trade(output: Internal.ItemStackJS_[], inputs: Internal.IngredientJS_): Internal.ElvenTradeRecipeJS_;
        pure_daisy(output: Internal.Block_, input: Internal.Block_): Internal.PureDaisyRecipeJS_;
        pure_daisy(output: Internal.Block_, input: Internal.Block_, time: number): Internal.PureDaisyRecipeJS_;
        brew(output: ResourceLocation_, inputs: Internal.IngredientJS_[]): Internal.BrewRecipeJS_;
        petal_apothecary(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[]): Internal.PetalRecipeJS_;
        /**
        * Default mana is 500,000, same as Terrasteel Ingot.
        */
        terra_plate(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[]): Internal.TerraPlateRecipeJS_;
        terra_plate(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[], mana: number): Internal.TerraPlateRecipeJS_;
        orechid(output: Internal.Block_, input: Internal.Block_, weight: number): Internal.OrechidRecipeJS_;
        orechid_ignem(output: Internal.Block_, input: Internal.Block_, weight: number): Internal.OrechidRecipeJS_;
        marimorphosis(output: Internal.Block_, input: Internal.Block_, weight: number, biomes: string[], biomeBonus: number): Internal.OrechidRecipeJS_;
    }
    class MinecraftRecipes {
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Furnaces.
        */
        smelting(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Smokers.
        */
        smoking(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Blast Furnaces.
        */
        blasting(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a shaped crafting recipe.
        */
        crafting_shaped(output: Internal.ItemStackJS_, pattern: Internal.IngredientJS_[][]): Internal.ShapedRecipeJS_;
        /**
        * Adds a shaped crafting recipe.
        */
        crafting_shaped(output: Internal.ItemStackJS_, pattern: string[], items: {[key: string]: Internal.IngredientJS_}): Internal.ShapedRecipeJS_;
        /**
        * Adds a shapeless crafting recipe.
        */
        crafting_shapeless(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_[]): Internal.ShapelessRecipeJS_;
        /**
        * Adds a smelting recipe to Minecraft.
        *
        * This is used by Campfire.
        */
        campfire_cooking(output: Internal.ItemStackJS_, input: Internal.IngredientJS_): Internal.CookingRecipeJS_;
        /**
        * Adds a stonecutting recipe.
        */
        stonecutting(output: Internal.ItemStackJS_, inputs: Internal.IngredientJS_): Internal.StonecuttingRecipeJS_;
        /**
        * Adds a smithing recipe.
        */
        smithing(output: Internal.ItemStackJS_, base: Internal.IngredientJS_, addition: Internal.IngredientJS_): Internal.SmithingRecipeJS_;
    }
}
declare namespace Type {
    type SelfOrArray<T> = T | T[];
    type ItemStackOrFluid = Internal.ItemStackJS_ | Internal.FluidStackJS_ | {amount: number, fluidTag: Special.FluidTag};
    type IngredientOrFluid = Internal.IngredientJS_ | Internal.FluidStackJS_;
}
declare namespace Special {
    type ItemTag = "minecraft:piglin_repellents" | "minecraft:signs" | "minecraft:wooden_fences" | "forge:glass/yellow" | "forge:cobblestone/infested" | "forge:raw_materials/gold" | "quark:reacharound_able" | "ae2:pattern_provider" | "minecraft:emerald_ores" | "forge:ore_rates/singular" | "botania:mana_dusts" | "lootr:chests" | "itemfilters:filters" | "forge:ore_bearing_ground/netherrack" | "forge:storage_blocks/coal" | "botania:functional_special_flowers" | "forge:storage_blocks/copper" | "ae2:quartz_sword" | "forge:ore_rates/dense" | "forge:plates/gold" | "forge:storage_blocks/lapis" | "botania:petals/magenta" | "forge:bones" | "botania:contributor_headflowers" | "create:stone_types/andesite" | "forge:glass/pink" | "minecraft:music_discs" | "forge:dusts/prismarine" | "botania:petals/green" | "botania:petals/red" | "forge:dyes/magenta" | "forge:wool/cyan" | "forge:leather" | "forge:ores/redstone" | "botania:misc_special_flowers" | "minecraft:rails" | "create:stone_types/asurine" | "ae2:p2p_attunements/redstone_p2p_tunnel" | "forge:dyes/purple" | "forge:glass_panes/lime" | "curios:belt" | "minecraft:walls" | "forge:glass/brown" | "forge:netherrack" | "forge:glass_panes/brown" | "create:stone_types/ochrum" | "forge:storage_blocks/terrasteel" | "minecraft:diamond_ores" | "forge:ores/copper" | "forge:stained_glass" | "minecraft:gold_ores" | "forge:glass/black" | "minecraft:saplings" | "forge:dough" | "forge:sandstone" | "minecraft:jungle_logs" | "forge:storage_blocks/certus_quartz" | "botania:dreamwood_logs" | "minecraft:stone_crafting_materials" | "minecraft:fences" | "forge:dusts" | "create:sleepers" | "ae2:memory_cards" | "forge:seeds/wheat" | "forge:raw_materials/zinc" | "minecraft:warped_stems" | "forge:dyes/gray" | "forge:glass/purple" | "minecraft:buttons" | "create:sandpaper" | "forge:sand/red" | "forge:glass_panes/blue" | "create:vanilla_stripped_wood" | "minecraft:lectern_books" | "forge:ingots/brass" | "ae2:p2p_attunements/fe_p2p_tunnel" | "forge:storage_blocks/elementium" | "botania:petals/orange" | "minecraft:piglin_food" | "forge:dyes/black" | "forge:wool/yellow" | "forge:sand" | "forge:silicon" | "minecraft:stairs" | "create:valve_handles" | "botania:lens" | "botania:rods" | "minecraft:sand" | "minecraft:arrows" | "forge:wool/light_blue" | "forge:nether_stars" | "forge:gems/lapis" | "botania:generating_special_flowers" | "forge:storage_blocks/redstone" | "forge:wool/magenta" | "ae2:quartz_pickaxe" | "forge:ingots/manasteel" | "minecraft:piglin_loved" | "botania:mana_using_items" | "forge:glass_panes/yellow" | "minecraft:redstone_ores" | "botania:terrasteel_nuggets" | "forge:wool/pink" | "forge:storage_blocks/netherite" | "forge:glass_panes/cyan" | "forge:glass/blue" | "forge:ore_bearing_ground/stone" | "minecraft:dark_oak_logs" | "forge:ingots/terrasteel" | "ae2:p2p_attunements/fluid_p2p_tunnel" | "minecraft:slabs" | "ae2:quartz_wrench" | "minecraft:beds" | "forge:raw_materials/copper" | "minecraft:spruce_logs" | "forge:end_stones" | "botania:petals" | "botania:livingwood_logs" | "forge:seeds" | "forge:storage_blocks/manasteel" | "forge:fence_gates/wooden" | "forge:storage_blocks/raw_copper" | "forge:dyes/pink" | "curios:head" | "ae2:smart_cable" | "botania:petals/light_gray" | "forge:wool/white" | "minecraft:leaves" | "create:stone_types/deepslate" | "forge:dyes/white" | "ae2:paint_balls" | "forge:beacon_payment" | "forge:dusts/glowstone" | "forge:crops/carrot" | "forge:plates/iron" | "forge:dyes/lime" | "create:blaze_burner_fuel/special" | "forge:ores_in_ground/deepslate" | "botania:terrasteel_ingots" | "ae2:all_quartz" | "forge:barrels" | "forge:storage_blocks/raw_gold" | "forge:ores_in_ground/stone" | "botania:runes" | "botania:manasteel_blocks" | "forge:wool/light_gray" | "botania:petals/brown" | "forge:ores/netherite_scrap" | "botania:petals/black" | "forge:cobblestone/deepslate" | "minecraft:ignored_by_piglin_babies" | "botania:terra_pick_blacklist" | "lootr:shulkers" | "minecraft:coals" | "forge:plates/brass" | "forge:glass_panes/light_blue" | "forge:glass/green" | "minecraft:logs_that_burn" | "ae2:covered_dense_cable" | "forge:gems/prismarine" | "create:stone_types/tuff" | "create:vanilla_stripped_logs" | "botania:disposable" | "curios:necklace" | "forge:dyes/orange" | "forge:storage_blocks/quartz" | "botania:special_flowers" | "quark:big_harvesting_hoes" | "forge:ingots/zinc" | "forge:dyes" | "forge:storage_blocks/gold" | "forge:wool/green" | "minecraft:wooden_buttons" | "minecraft:wooden_pressure_plates" | "minecraft:anvil" | "forge:nuggets/manasteel" | "forge:stripped_logs" | "forge:ingots/copper" | "minecraft:occludes_vibration_signals" | "create:modded_stripped_logs" | "ae2:all_quartz_dust" | "botania:magnet_ring_blacklist" | "minecraft:planks" | "curios:curio" | "forge:nuggets/iron" | "ae2:knife" | "lootr:trapped_chests" | "forge:wool/brown" | "forge:seeds/melon" | "curios:body" | "forge:dyes/cyan" | "create:pressurized_air_sources" | "forge:nuggets" | "forge:glass_panes/purple" | "forge:ingots/netherite" | "forge:glass_panes/gray" | "create:casing" | "forge:raw_materials" | "forge:glass" | "forge:chests" | "minecraft:banners" | "create:stone_types/dripstone" | "forge:ingots/elementium" | "minecraft:non_flammable_wood" | "forge:storage_blocks/diamond" | "forge:eggs" | "botania:elementium_nuggets" | "forge:cobblestone" | "forge:dusts/certus_quartz" | "forge:ores" | "create:create_ingots" | "forge:glass/magenta" | "forge:bookshelves" | "ae2:glass_cable" | "minecraft:beacon_payment_items" | "forge:glass/orange" | "forge:glass/silica" | "forge:glass/tinted" | "minecraft:terracotta" | "forge:dyes/red" | "forge:wool/purple" | "forge:gems/mana_diamond" | "forge:barrels/wooden" | "forge:buckets/honey" | "minecraft:stone_tool_materials" | "forge:stained_glass_panes" | "forge:glass_panes/colorless" | "botania:petals/yellow" | "forge:dyes/light_gray" | "forge:storage_blocks/raw_zinc" | "forge:ingots/brick" | "forge:glass_panes/pink" | "itemfilters:check_nbt" | "forge:glass_panes/magenta" | "create:stone_types/scoria" | "botania:petals/pink" | "create:stone_types/veridium" | "forge:ender_pearls" | "botania:floating_flowers" | "ae2:smart_dense_cable" | "forge:shears" | "ae2:all_nether_quartz" | "forge:wool/lime" | "forge:ore_rates/sparse" | "create:stone_types/scorchia" | "lootr:barrels" | "forge:dyes/brown" | "forge:glass/cyan" | "botania:elementium_blocks" | "forge:nuggets/gold" | "ae2:quartz_hoe" | "forge:ores/diamond" | "forge:plates" | "ae2:p2p_attunements/light_p2p_tunnel" | "minecraft:birch_logs" | "forge:storage_blocks/brass" | "forge:ore_bearing_ground/deepslate" | "forge:gems/certus_quartz" | "forge:raw_materials/iron" | "create:stone_types/diorite" | "botania:terrasteel_blocks" | "forge:gems/fluix" | "forge:glass/gray" | "forge:sand/colorless" | "ae2:quartz_shovel" | "botania:manasteel_nuggets" | "minecraft:oak_logs" | "ae2:covered_cable" | "ae2:all_certus_quartz" | "forge:dusts/fluix" | "forge:glass_panes/orange" | "forge:nuggets/brass" | "curios:ring" | "forge:flour/wheat" | "minecraft:wooden_stairs" | "minecraft:boats" | "forge:nuggets/copper" | "minecraft:stone_bricks" | "botania:glimmering_dreamwood_logs" | "ae2:quartz_axe" | "forge:ingots/nether_brick" | "forge:enchanting_fuels" | "ae2:p2p_attunements/item_p2p_tunnel" | "botania:petals/cyan" | "create:modded_stripped_wood" | "forge:wool/gray" | "forge:slimeballs" | "forge:dusts/mana" | "forge:cobblestone/normal" | "forge:tools/wrench" | "forge:ores/lapis" | "forge:glass_panes/red" | "forge:wool/red" | "ae2:all_fluix" | "forge:gems/dragonstone" | "forge:gems/amethyst" | "forge:glass_panes/black" | "minecraft:freeze_immune_wearables" | "ae2:interface" | "forge:feathers" | "forge:glass/white" | "forge:gems/emerald" | "forge:cobblestone/mossy" | "forge:ores/certus_quartz" | "create:crushed_ores" | "minecraft:dirt" | "forge:nuggets/elementium" | "forge:glass/lime" | "ae2:illuminated_panel" | "forge:wool/blue" | "forge:chests/wooden" | "forge:glass_panes/light_gray" | "forge:glass/light_blue" | "minecraft:acacia_logs" | "botania:double_mystical_flowers" | "forge:gunpowder" | "minecraft:small_flowers" | "minecraft:coal_ores" | "minecraft:wooden_doors" | "forge:ores/emerald" | "forge:flour" | "botania:special_floating_flowers" | "botania:petals/white" | "forge:glass_panes/green" | "minecraft:cluster_max_harvestables" | "create:stone_types/crimsite" | "forge:dusts/ender_pearl" | "forge:dyes/green" | "minecraft:logs" | "forge:mushrooms" | "create:stone_types/granite" | "minecraft:carpets" | "minecraft:wool" | "forge:glass/red" | "minecraft:creeper_drop_music_discs" | "forge:storage_blocks/iron" | "botania:petals/lime" | "forge:ores/coal" | "botania:petals/blue" | "forge:crops/beetroot" | "forge:crops/nether_wart" | "minecraft:wooden_slabs" | "minecraft:candles" | "forge:storage_blocks/amethyst" | "curios:charm" | "forge:gravel" | "forge:wool/black" | "forge:crops" | "forge:storage_blocks/raw_iron" | "botania:petals/purple" | "forge:ingots" | "forge:nuggets/terrasteel" | "ae2:metal_ingots" | "lootr:containers" | "botania:petals/gray" | "forge:storage_blocks/zinc" | "forge:ores/quartz" | "forge:glass_panes" | "forge:storage_blocks/emerald" | "forge:seeds/beetroot" | "minecraft:flowers" | "forge:gems" | "forge:glass/colorless" | "botania:loonium_blacklist" | "forge:string" | "forge:ores_in_ground/netherrack" | "forge:ores/gold" | "create:blaze_burner_fuel/regular" | "forge:chests/trapped" | "forge:plates/obsidian" | "minecraft:lapis_ores" | "botania:elementium_ingots" | "minecraft:soul_fire_base_blocks" | "forge:glass/light_gray" | "botania:mundane_floating_flowers" | "forge:ingots/gold" | "forge:glass_panes/white" | "minecraft:tall_flowers" | "create:toolboxes" | "forge:chests/ender" | "forge:dough/wheat" | "botania:mystical_flowers" | "forge:dyes/light_blue" | "forge:rods" | "forge:heads" | "forge:dusts/redstone" | "botania:dragonstone_gems" | "ae2:p2p_attunements/me_p2p_tunnel" | "minecraft:trapdoors" | "botania:manasteel_ingots" | "forge:fence_gates" | "botania:semi_disposable" | "forge:stripped_wood" | "forge:fences/wooden" | "forge:fences" | "forge:fences/nether_brick" | "minecraft:axolotl_tempt_items" | "create:seats" | "forge:plates/copper" | "botania:burst_viewers" | "minecraft:fox_food" | "minecraft:crimson_stems" | "forge:rods/wooden" | "forge:ingots/iron" | "forge:storage_blocks" | "forge:obsidian" | "forge:ores/iron" | "minecraft:doors" | "botania:mini_flowers" | "create:stone_types/calcite" | "minecraft:wooden_trapdoors" | "create:stone_types/limestone" | "forge:stone" | "forge:wool" | "create:upright_on_belt" | "forge:dyes/yellow" | "botania:mana_diamond_gems" | "forge:ores/zinc" | "botania:petals/light_blue" | "forge:gems/quartz" | "forge:crops/potato" | "forge:rods/blaze" | "botania:glimmering_livingwood_logs" | "forge:gems/diamond" | "forge:seeds/pumpkin" | "forge:wool/orange" | "forge:nuggets/zinc" | "minecraft:fishes" | "minecraft:iron_ores" | "forge:crops/wheat" | "minecraft:copper_ores" | "ae2:blacklisted/annihilation_plane" | "forge:dyes/blue";
    type FluidTag = "forge:honey" | "forge:milk" | "ae2:blacklisted/annihilation_plane" | "create:bottomless/deny" | "forge:chocolate" | "forge:tea" | "minecraft:water" | "minecraft:lava" | "create:bottomless/allow";
    type BlockTag = "minecraft:replaceable_plants" | "minecraft:valid_spawn" | "minecraft:wooden_doors" | "botania:enchanter_flowers" | "create:fan_transparent" | "botania:magnet_ring_blacklist" | "forge:wool/green" | "minecraft:dripstone_replaceable_blocks" | "forge:fence_gates/wooden" | "botania:laputa_immobile" | "minecraft:crimson_stems" | "minecraft:big_dripleaf_placeable" | "forge:wool/brown" | "minecraft:planks" | "forge:ore_rates/sparse" | "minecraft:bee_growables" | "forge:fence_gates" | "forge:wool" | "forge:wool/light_blue" | "forge:storage_blocks/amethyst" | "minecraft:stairs" | "forge:gravel" | "ae2:blacklisted/spatial" | "forge:chests/wooden" | "forge:glass/orange" | "forge:storage_blocks/iron" | "lootr:shulkers" | "forge:glass/gray" | "minecraft:climbable" | "forge:terracotta" | "forge:glass/black" | "minecraft:anvil" | "botania:misc_special_flowers" | "forge:fences" | "forge:stone" | "forge:storage_blocks/raw_copper" | "minecraft:needs_stone_tool" | "forge:netherrack" | "botania:ghost_rail_barrier" | "botania:manasteel_blocks" | "forge:wool/light_gray" | "botania:double_mystical_flowers" | "forge:storage_blocks/redstone" | "forge:glass/magenta" | "minecraft:wooden_buttons" | "botania:gaia_break_blacklist" | "botania:mystical_flowers" | "forge:storage_blocks/emerald" | "botania:corporea_spark_override" | "minecraft:wither_immune" | "forge:glass_panes/light_blue" | "create:valve_handles" | "create:ore_override_stone" | "minecraft:azalea_root_replaceable" | "forge:ores/coal" | "botania:mini_flowers" | "forge:storage_blocks/coal" | "minecraft:features_cannot_replace" | "minecraft:beds" | "minecraft:standing_signs" | "minecraft:lush_ground_replaceable" | "forge:glass/colorless" | "forge:storage_blocks/lapis" | "botania:functional_special_flowers" | "forge:glass_panes/colorless" | "forge:stained_glass_panes" | "minecraft:wart_blocks" | "minecraft:nylium" | "minecraft:corals" | "minecraft:shulker_boxes" | "create:passive_boiler_heaters" | "botania:shiny_flowers" | "minecraft:stone_pressure_plates" | "forge:wool/yellow" | "minecraft:small_dripleaf_placeable" | "forge:chests/ender" | "minecraft:non_flammable_wood" | "forge:glass_panes/yellow" | "minecraft:deepslate_ore_replaceables" | "minecraft:stone_bricks" | "forge:glass/brown" | "forge:storage_blocks/certus_quartz" | "forge:glass_panes/blue" | "minecraft:crystal_sound_blocks" | "forge:ores/redstone" | "ae2:blacklisted/annihilation_plane" | "forge:glass_panes/green" | "forge:glass_panes/purple" | "lootr:containers" | "minecraft:dragon_immune" | "forge:ores/emerald" | "minecraft:coral_plants" | "forge:wool/white" | "minecraft:tall_flowers" | "lootr:barrels" | "minecraft:stone_ore_replaceables" | "forge:ore_rates/dense" | "forge:storage_blocks" | "forge:glass/tinted" | "forge:wool/red" | "minecraft:enderman_holdable" | "forge:glass/lime" | "minecraft:ice" | "minecraft:leaves" | "forge:storage_blocks/quartz" | "forge:fences/nether_brick" | "forge:glass_panes/cyan" | "forge:storage_blocks/gold" | "minecraft:occludes_vibration_signals" | "minecraft:moss_replaceable" | "ae2:whitelisted/facades" | "minecraft:base_stone_overworld" | "minecraft:piglin_repellents" | "forge:glass_panes/lime" | "forge:glass/cyan" | "minecraft:azalea_grows_on" | "botania:weight_lens_whitelist" | "minecraft:infiniburn_nether" | "minecraft:signs" | "minecraft:needs_diamond_tool" | "forge:ores/lapis" | "botania:floating_flowers" | "forge:cobblestone/deepslate" | "forge:ores/iron" | "minecraft:gold_ores" | "forge:storage_blocks/zinc" | "minecraft:geode_invalid_blocks" | "forge:ore_bearing_ground/deepslate" | "forge:ores/zinc" | "minecraft:fence_gates" | "botania:glimmering_dreamwood_logs" | "minecraft:cauldrons" | "forge:ores/netherite_scrap" | "minecraft:parrots_spawnable_on" | "minecraft:wooden_stairs" | "minecraft:guarded_by_piglins" | "forge:barrels/wooden" | "minecraft:animals_spawnable_on" | "minecraft:emerald_ores" | "forge:stained_glass" | "forge:wool/purple" | "botania:special_flowers" | "forge:wool/pink" | "minecraft:redstone_ores" | "minecraft:candle_cakes" | "forge:wool/magenta" | "minecraft:underwater_bonemeals" | "minecraft:fences" | "minecraft:lapis_ores" | "minecraft:dirt" | "minecraft:birch_logs" | "minecraft:wolves_spawnable_on" | "minecraft:logs_that_burn" | "forge:wool/lime" | "forge:storage_blocks/raw_iron" | "minecraft:soul_fire_base_blocks" | "minecraft:wall_post_override" | "forge:wool/blue" | "minecraft:needs_iron_tool" | "forge:sand/colorless" | "create:windmill_sails" | "forge:storage_blocks/diamond" | "minecraft:wall_corals" | "forge:end_stones" | "minecraft:polar_bears_spawnable_on_in_frozen_ocean" | "forge:glass/light_gray" | "forge:fences/wooden" | "forge:storage_blocks/manasteel" | "minecraft:prevent_mob_spawning_inside" | "botania:mundane_floating_flowers" | "forge:mushrooms" | "forge:ores_in_ground/netherrack" | "minecraft:crops" | "forge:ores_in_ground/stone" | "minecraft:portals" | "minecraft:doors" | "minecraft:unstable_bottom_center" | "minecraft:wither_summon_base_blocks" | "minecraft:dark_oak_logs" | "forge:glass_panes/light_gray" | "minecraft:acacia_logs" | "forge:glass_panes/magenta" | "forge:ores/diamond" | "botania:terrasteel_blocks" | "forge:storage_blocks/raw_gold" | "forge:glass/purple" | "forge:glass_panes/orange" | "botania:glimmering_livingwood_logs" | "forge:enderman_place_on_blacklist" | "forge:glass/blue" | "forge:storage_blocks/copper" | "minecraft:inside_step_sound_blocks" | "forge:wool/black" | "lootr:chests" | "minecraft:soul_speed_blocks" | "create:casing" | "botania:dreamwood_logs" | "botania:terraformable" | "forge:glass_panes/pink" | "forge:cobblestone/normal" | "lootr:trapped_chests" | "forge:obsidian" | "quark:non_double_door" | "minecraft:saplings" | "forge:storage_blocks/raw_zinc" | "minecraft:mineable/pickaxe" | "forge:glass_panes/red" | "forge:glass/yellow" | "minecraft:mineable/shovel" | "forge:cobblestone/mossy" | "create:non_movable" | "minecraft:bamboo_plantable_on" | "minecraft:coral_blocks" | "botania:terra_plate_base" | "minecraft:rabbits_spawnable_on" | "create:seats" | "forge:storage_blocks/terrasteel" | "forge:sandstone" | "create:toolboxes" | "minecraft:mooshrooms_spawnable_on" | "minecraft:mineable/axe" | "minecraft:trapdoors" | "forge:ores" | "minecraft:carpets" | "create:safe_nbt" | "botania:special_floating_flowers" | "minecraft:logs" | "minecraft:beacon_base_blocks" | "forge:glass_panes" | "forge:storage_blocks/netherite" | "forge:glass/silica" | "forge:glass_panes/white" | "forge:storage_blocks/elementium" | "minecraft:strider_warm_blocks" | "minecraft:warped_stems" | "minecraft:mushroom_grow_block" | "forge:sand" | "minecraft:fall_damage_resetting" | "forge:ore_bearing_ground/stone" | "minecraft:walls" | "minecraft:coal_ores" | "minecraft:buttons" | "minecraft:wooden_pressure_plates" | "minecraft:pressure_plates" | "create:windowable" | "minecraft:wooden_slabs" | "minecraft:terracotta" | "minecraft:slabs" | "minecraft:spruce_logs" | "create:brittle" | "forge:cobblestone/infested" | "minecraft:infiniburn_overworld" | "forge:glass/light_blue" | "forge:ores/certus_quartz" | "forge:chests" | "botania:ender_air_convertable" | "minecraft:mineable/hoe" | "minecraft:wall_signs" | "forge:ores/gold" | "create:wrench_pickup" | "forge:wool/cyan" | "minecraft:iron_ores" | "minecraft:wool" | "minecraft:copper_ores" | "forge:glass/white" | "minecraft:banners" | "minecraft:wooden_trapdoors" | "forge:glass" | "forge:glass_panes/gray" | "botania:elementium_blocks" | "forge:cobblestone" | "minecraft:sand" | "minecraft:campfires" | "forge:relocation_not_supported" | "forge:glass/pink" | "minecraft:wooden_fences" | "forge:wool/gray" | "minecraft:rails" | "forge:ores_in_ground/deepslate" | "buzzier_bees:flower_blacklist" | "forge:glass/red" | "minecraft:cave_vines" | "forge:ores/copper" | "forge:ore_rates/singular" | "minecraft:snow" | "minecraft:flower_pots" | "forge:ore_bearing_ground/netherrack" | "minecraft:fire" | "minecraft:axolotls_spawnable_on" | "forge:glass/green" | "minecraft:hoglin_repellents" | "forge:wool/orange" | "minecraft:flowers" | "botania:livingwood_logs" | "minecraft:impermeable" | "minecraft:candles" | "forge:chests/trapped" | "forge:sand/red" | "forge:barrels" | "forge:storage_blocks/brass" | "minecraft:beehives" | "forge:ores/quartz" | "minecraft:diamond_ores" | "minecraft:foxes_spawnable_on" | "forge:glass_panes/black" | "minecraft:oak_logs" | "botania:generating_special_flowers" | "minecraft:infiniburn_end" | "minecraft:jungle_logs" | "minecraft:small_flowers" | "forge:glass_panes/brown" | "minecraft:goats_spawnable_on" | "minecraft:base_stone_nether" | "minecraft:lava_pool_stone_cannot_replace";
    type EntityTypeTag = "c:bosses" | "minecraft:axolotl_hunt_targets" | "botania:cocoon/rare" | "minecraft:axolotl_always_hostiles" | "botania:cocoon/common" | "minecraft:skeletons" | "minecraft:powder_snow_walkable_mobs" | "minecraft:raiders" | "minecraft:freeze_immune_entity_types" | "botania:cocoon/common_aquatic" | "minecraft:arrows" | "botania:shaded_mesa_blacklist" | "minecraft:freeze_hurts_extra_types" | "botania:cocoon/rare_aquatic" | "minecraft:impact_projectiles" | "minecraft:beehive_inhabitors";
    type Mod = "minecraft" | "rhino" | "jei" | "spacecatcustomprofessions" | "ae2" | "botania" | "villagespawnpoint" | "flywheel" | "curios" | "patchouli" | "create" | "collective" | "justenoughprofessions" | "naturescompass" | "tiab" | "customvillagertrades" | "hiddenrecipebook" | "appbot" | "iknowwhatimdoing" | "architectury" | "kubejs" | "ftblibrary" | "itemfilters" | "kubejs_botania" | "kubejs_create" | "lootr" | "probejs" | "ftbteams" | "ftbquests" | "forge" | "codechickenlib" | "enderstorage"
    type Ingredient = "kubejs:custom_predicate" | "kubejs:ignore_nbt" | "forge:compound" | "forge:nbt" | "forge:partial_nbt" | "forge:difference" | "forge:intersection" | "minecraft:item";
    type RecipeId = "botania:dreamwood_planks" | "botania:metamorphic_fungal_stone_wall" | "botania:star_sword" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_bricks_slab" | "create:compat/silentsgems/crushing/green_sapphire_ore" | "create:sequenced_assembly/precision_mechanism" | "create:polished_cut_asurine_stairs_from_stone_types_asurine_stonecutting" | "ae2:matter_cannon/nuggets/yttrium" | "botania:slab_recombine/shimmerrock" | "botania:alfheim_portal" | "create:milling/charcoal" | "create:cutting/compat/byg/mangrove_log" | "create:compat/silentsgems/crushing/yellow_diamond_ore" | "botania:dynamic/laputa_shard_upgrade" | "minecraft:red_wool" | "botania:ender_hand" | "minecraft:stonecutter" | "minecraft:bone_block" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_stone_slab" | "create:cutting/compat/biomesoplenty/cherry_wood" | "botania:mana_infusion/peony_to_dandelion" | "ae2:inscriber/certus_quartz_dust" | "minecraft:melon" | "create:cut_andesite_slab" | "create:cut_scorchia_wall" | "ae2:network/cables/dense_smart_green" | "create:cut_granite_wall" | "create:cut_ochrum_brick_slab_from_ochrum_stonecutting" | "minecraft:deepslate_brick_stairs_from_cobbled_deepslate_stonecutting" | "ae2:network/cells/item_storage_cell_256k_storage" | "create:polished_cut_deepslate_wall" | "create:smelting/glass_from_vertical_framed_glass" | "create:polished_cut_deepslate_slab_from_deepslate_stonecutting" | "minecraft:gold_nugget_from_blasting" | "create:oak_window" | "botania:pure_daisy/packed_ice" | "create:cut_crimsite_slab_recycling" | "create:milling/calcite" | "botania:petal_apothecary/hyacidus" | "create:compat/silentsgems/crushing/citrine_ore" | "create:layered_crimsite_from_crimsite_stonecutting" | "botania:missile_rod" | "create:crafting/kinetics/light_gray_seat" | "create:cut_diorite_from_stone_types_diorite_stonecutting" | "botania:stonecutting/metamorphic_forest_cobblestone_to_metamorphic_forest_cobblestone_slab" | "create:crushing/copper_ore" | "create:asurine_pillar_from_asurine_stonecutting" | "minecraft:cobblestone_wall" | "minecraft:lime_stained_glass_pane" | "minecraft:magenta_wool" | "botania:orechid/deepslate_gold_ore" | "minecraft:waxed_cut_copper_slab" | "create:deploying/waxed_exposed_copper_tile_stairs_from_adding_wax" | "create:haunting/lapis_recycling" | "minecraft:raw_copper" | "create:polished_cut_dripstone_from_dripstone_block_stonecutting" | "create:cut_scorchia_bricks_from_stone_types_scorchia_stonecutting" | "create:polished_cut_scoria_wall_from_scoria_stonecutting" | "create:cut_scorchia_slab_recycling" | "botania:metamorphic_forest_bricks_slab" | "botania:stonecutting/metamorphic_forest_bricks_to_metamorphic_forest_bricks_slab" | "minecraft:map_extending" | "minecraft:spruce_sign" | "botania:stonecutting/metamorphic_desert_bricks_to_chiseled_metamorphic_desert_bricks" | "botania:manasteel_leggings" | "minecraft:cut_copper_slab_from_copper_block_stonecutting" | "create:crushing/gravel" | "create:polished_cut_limestone_wall_from_limestone_stonecutting" | "create:crafting/kinetics/gearbox" | "create:crafting/logistics/brass_tunnel" | "botania:terrasteel_block" | "create:compat/silentsgems/crushing/onyx_ore" | "create:layered_andesite_from_andesite_stonecutting" | "create:small_crimsite_brick_slab_from_stone_types_crimsite_stonecutting" | "minecraft:glow_item_frame" | "minecraft:leather_helmet" | "minecraft:light_blue_bed" | "create:crafting/materials/sand_paper" | "ae2:network/parts/panels_semi_dark_monitor_alt" | "ae2:block_cutter/slabs/sky_stone_brick_slab" | "minecraft:chiseled_nether_bricks" | "create:cut_ochrum_wall_from_ochrum_stonecutting" | "create:layered_dripstone_from_dripstone_block_stonecutting" | "botania:stripped_dreamwood" | "botania:mana_infusion/tuff_to_calcite" | "minecraft:copper_block" | "create:cutting/spruce_wood" | "botania:floating_endoflame" | "create:cutting/compat/ars_nouveau/stripped_red_archwood_log" | "minecraft:nether_brick_stairs" | "create:compat/silentsgems/crushing/amethyst_ore" | "create:blasting/silver_ingot_compat_thermal" | "botania:elementium_sword" | "minecraft:purple_wool" | "botania:dye_black" | "create:deploying/waxed_oxidized_copper_tile_slab_from_adding_wax" | "botania:stonecutting/shimmerrock_to_shimmerrock_stairs" | "botania:floating_medumone" | "minecraft:magenta_bed" | "minecraft:oxidized_cut_copper_stairs_from_oxidized_copper_stonecutting" | "create:crushing/uranium_ore" | "botania:mana_infusion/mana_diamond" | "botania:stonecutting/blaze_quartz_to_chiseled_blaze_quartz" | "minecraft:green_stained_glass" | "minecraft:magenta_dye_from_blue_red_white_dye" | "create:cutting/crimson_hyphae" | "create:deploying/large_cogwheel" | "create:cut_granite_stairs_from_granite_stonecutting" | "create:cutting/compat/botania/stripped_dreamwood" | "botania:marimorphosis/metamorphic_mountain_stone" | "create:small_veridium_brick_slab_recycling" | "minecraft:sandstone_slab_from_sandstone_stonecutting" | "ae2:network/cables/covered_red" | "create:cut_granite_brick_slab_recycling" | "botania:runic_altar/sloth" | "create:cut_dripstone_brick_stairs_from_dripstone_block_stonecutting" | "ae2:tools/paintballs_lumen_black" | "minecraft:pink_terracotta" | "botania:metamorphic_taiga_bricks" | "create:crafting/kinetics/black_valve_handle_from_other_valve_handle" | "create:cut_scorchia_brick_stairs_from_scorchia_stonecutting" | "create:compat/environmental/milling/magenta_hibiscus" | "create:cut_limestone_stairs_from_limestone_stonecutting" | "ae2:materials/cardfuzzy" | "create:compat/ae2/milling/fluix_crystal" | "botania:manaweave_chestplate" | "ae2:network/cables/dense_smart_light_blue" | "botania:blaze_quartz" | "ae2:shaped/walls/chiseled_quartz_block" | "minecraft:cut_sandstone_slab" | "create:filling/chocolate_glazed_berries" | "create:small_andesite_bricks_from_stone_types_andesite_stonecutting" | "ae2:network/cables/smart_fluix_clean" | "ae2:network/parts/annihilation_plane_alt" | "ae2:network/blocks/energy_energy_cell" | "minecraft:acacia_door" | "create:cutting/compat/blue_skies/dusk_log" | "create:compat/tconstruct/milling/necrotic_bone" | "botania:bauble_box" | "botania:vial" | "botania:mana_infusion/stone_to_andesite" | "botania:metamorphic_mountain_bricks" | "minecraft:prismarine_stairs" | "minecraft:cyan_concrete_powder" | "botania:floating_clayconia_chibi" | "minecraft:mojang_banner_pattern" | "ae2:matter_cannon/nuggets/indium" | "botania:petal_apothecary/rannuncarpus" | "minecraft:fire_charge" | "minecraft:golden_hoe" | "create:cutting/stripped_warped_stem" | "ae2:tools/misctools_charged_staff" | "minecraft:white_dye" | "create:cut_deepslate_brick_slab_from_deepslate_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_hellbark_wood" | "create:crafting/kinetics/linear_chassisfrom_conversion" | "botania:orechid/deepslate_lapis_ore" | "botania:pink_petal_block" | "botania:floating_tigerseye" | "create:compat/silentsgems/crushing/sodalite_ore" | "create:compat/botania/milling/white_petal" | "botania:conversions/manasteel_to_nuggets" | "botania:mana_distributor" | "botania:floating_loonium" | "create:polished_cut_granite_slab" | "create:polished_cut_veridium_stairs" | "create:crafting/kinetics/cyan_seat_from_other_seat" | "create:cutting/compat/biomesoplenty/stripped_umbran_log" | "create:cutting/compat/byg/skyris_log" | "minecraft:stone_button" | "minecraft:brown_stained_glass" | "minecraft:tinted_glass" | "ae2:tools/paintballs_lumen_light_blue" | "ae2:network/wireless_terminal" | "botania:petal_apothecary/manastar" | "minecraft:sandstone" | "ae2:network/cells/spatial_storage_cell_2_cubed_storage" | "botania:pure_daisy/snow_block" | "create:layered_limestone_from_limestone_stonecutting" | "create:polished_cut_scoria_slab" | "minecraft:lodestone" | "botania:corporea_interceptor" | "ae2:misc/seeds_certus" | "create:crafting/kinetics/yellow_seat_from_other_seat" | "minecraft:purpur_block" | "create:cut_ochrum_from_stone_types_ochrum_stonecutting" | "minecraft:cut_copper_stairs_from_copper_block_stonecutting" | "ae2:tools/network_memory_card_brown" | "create:crafting/kinetics/speedometer" | "minecraft:polished_blackstone_slab" | "minecraft:stone_stairs" | "create:cut_diorite_bricks_from_diorite_stonecutting" | "minecraft:dried_kelp_block" | "create:cutting/compat/botania/dreamwood_log" | "botania:metamorphic_desert_stone_slab" | "botania:mossy_dreamwood_planks_vine" | "minecraft:quartz" | "create:cutting/compat/byg/stripped_ether_wood" | "minecraft:nether_brick_wall" | "ae2:network/cells/spatial_storage_cell_128_cubed_storage" | "create:cutting/compat/ars_nouveau/stripped_green_archwood_wood" | "create:deploying/waxed_weathered_copper_shingle_slab_from_adding_wax" | "minecraft:gray_concrete_powder" | "botania:orechid_ignem/nether_quartz_ore" | "botania:petal_apothecary/clayconia" | "create:polished_cut_dripstone_slab_from_stone_types_dripstone_stonecutting" | "minecraft:redstone_from_blasting_redstone_ore" | "create:splashing/mekanism/crushed_osmium_ore" | "botania:mana_infusion/dark_oak_log_to_oak_log" | "botania:open_bucket" | "botania:fabulous_pool" | "ae2:tools/paintballs_light_blue" | "minecraft:lime_candle" | "ae2:network/cables/covered_cyan" | "create:polished_cut_crimsite_stairs_from_crimsite_stonecutting" | "create:cutting/compat/byg/stripped_jacaranda_wood" | "create:polished_cut_limestone_from_limestone_stonecutting" | "minecraft:red_dye_from_beetroot" | "create:cutting/compat/twilightforest/stripped_mangrove_wood" | "ae2:block_cutter/slabs/sky_stone_slab" | "minecraft:waxed_weathered_cut_copper_stairs_from_waxed_weathered_cut_copper_stonecutting" | "ae2:network/parts/terminals" | "create:compat/atmospheric/splashing/arid_sand" | "botania:terrasteel_leggings" | "minecraft:orange_dye_from_orange_tulip" | "create:milling/peony" | "minecraft:pink_bed_from_white_bed" | "botania:incense_stick" | "create:small_asurine_bricks_from_stone_types_asurine_stonecutting" | "create:polished_cut_deepslate_stairs_from_stone_types_deepslate_stonecutting" | "create:cutting/compat/byg/green_enchanted_log" | "botania:lens_bounce" | "ae2:network/blocks/energy_energy_acceptor" | "create:cut_andesite_bricks_from_andesite_stonecutting" | "botania:petal_apothecary/dandelifeon" | "minecraft:blue_carpet" | "create:cutting/compat/byg/rainbow_eucalyptus_log" | "botania:petal_apothecary/medumone" | "botania:stonecutting/white_pavement_to_white_pavement_stairs" | "create:cut_dripstone_brick_slab" | "create:crushing/raw_lead_ore" | "create:cut_diorite_wall_from_stone_types_diorite_stonecutting" | "ae2:matter_cannon/nuggets/bismuth" | "minecraft:birch_stairs" | "minecraft:exposed_cut_copper_slab_from_exposed_cut_copper_stonecutting" | "ae2:network/blocks/spatial_anchor" | "create:item_application/brass_casing_from_log" | "create:compat/projectvibrantjourneys/cutting/stripped_redwood_log" | "create:small_limestone_brick_stairs_from_stone_types_limestone_stonecutting" | "create:splashing/light_gray_concrete_powder" | "create:cutting/compat/tconstruct/greenheart_log" | "botania:detector_light_relay" | "create:polished_cut_tuff_slab" | "botania:dynamic/cosmetic_remove" | "create:small_diorite_bricks_from_stone_types_diorite_stonecutting" | "ae2:network/crafting/cpu_crafting_monitor" | "botania:stonecutting/dark_quartz_to_dark_quartz_pillar" | "create:cut_granite_bricks_from_stone_types_granite_stonecutting" | "create:deploying/waxed_weathered_cut_copper_from_adding_wax" | "create:milling/andesite" | "minecraft:cooked_chicken_from_smoking" | "create:crafting/kinetics/chute" | "minecraft:cyan_glazed_terracotta" | "minecraft:stone_sword" | "create:crafting/kinetics/cyan_valve_handle_from_other_valve_handle" | "create:crafting/materials/small_rose_quartz_tilesfrom_conversion" | "minecraft:cut_red_sandstone_from_red_sandstone_stonecutting" | "minecraft:waxed_weathered_cut_copper_slab_from_waxed_weathered_copper_stonecutting" | "create:cut_ochrum_brick_stairs" | "create:cutting/compat/architects_palette/twisted_log" | "ae2:matter_cannon/nuggets/plutonium" | "botania:lens_explosive" | "ae2:network/blocks/storage_chest" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_stone_slab" | "minecraft:dripstone_block" | "create:splashing/crushed_gold_ore" | "minecraft:iron_hoe" | "minecraft:iron_ingot_from_iron_block" | "create:polished_cut_asurine_stairs" | "create:small_granite_brick_slab_from_granite_stonecutting" | "create:crafting/kinetics/fluid_tank" | "create:cutting/compat/hexcasting/akashic_log" | "create:cutting/compat/blue_skies/stripped_maple_log" | "create:smoking/bread" | "create:crushing/golden_horse_armor" | "create:cutting/stripped_jungle_log" | "create:compacting/blaze_cake" | "create:compat/simplefarming/crushing/sf_crush_barley" | "create:cutting/compat/blue_skies/starlit_log" | "minecraft:orange_stained_glass_pane_from_glass_pane" | "botania:stonecutting/mossy_livingrock_bricks_to_mossy_livingrock_bricks_wall" | "create:small_andesite_brick_stairs_from_andesite_stonecutting" | "botania:stonecutting/metamorphic_fungal_bricks_to_metamorphic_fungal_bricks_slab" | "minecraft:jungle_trapdoor" | "ae2:network/wireless_booster" | "ae2:tools/portable_fluid_cell_256k" | "botania:stonecutting/lavender_quartz_to_lavender_quartz_slab" | "create:compat/bop/milling/pink_hibiscus" | "ae2:tools/paintballs_orange" | "botania:metamorphic_forest_cobblestone_stairs" | "minecraft:banner_duplicate" | "create:cutting/compat/blue_skies/maple_log" | "minecraft:granite_stairs_from_granite_stonecutting" | "create:small_asurine_brick_stairs_from_stone_types_asurine_stonecutting" | "botania:smelt_rod" | "botania:toggle_light_relay" | "create:small_scoria_brick_stairs_from_scoria_stonecutting" | "minecraft:iron_ingot_from_nuggets" | "ae2:network/cables/dense_covered_purple" | "botania:red_pavement_slab" | "create:deploying/waxed_exposed_copper_tile_slab_from_adding_wax" | "create:polished_cut_scorchia_stairs_from_stone_types_scorchia_stonecutting" | "minecraft:golden_pickaxe" | "ae2:network/cables/dense_smart_blue" | "create:cutting/compat/byg/stripped_lament_log" | "botania:metamorphic_fungal_cobblestone_wall" | "minecraft:ladder" | "minecraft:polished_blackstone_slab_from_polished_blackstone_stonecutting" | "create:deploying/waxed_copper_tile_stairs_from_adding_wax" | "create:compat/endergetic/splashing/petrified_nether_corrock_crown" | "create:deploying/waxed_weathered_cut_copper_slab_from_adding_wax" | "create:filling/builders_tea" | "botania:dreamwood_fence" | "minecraft:redstone_torch" | "botania:mana_infusion/jungle_log_to_acacia_log" | "botania:orechid/gold_ore" | "minecraft:target" | "create:small_tuff_brick_stairs" | "minecraft:orange_carpet" | "create:crafting/kinetics/deployer" | "botania:stonecutting/metamorphic_mountain_cobblestone_to_metamorphic_mountain_cobblestone_stairs" | "minecraft:gray_bed" | "ae2:network/parts/export_bus" | "botania:mana_infusion/azalea_leaves_dupe" | "create:crafting/materials/andesite_alloy" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_stone_stairs" | "create:splashing/immersiveengineering/crushed_uranium_ore" | "minecraft:white_terracotta" | "create:campfire_cooking/bread" | "botania:tiny_planet_block" | "minecraft:diamond_from_blasting_deepslate_diamond_ore" | "botania:floating_vinculotus" | "botania:mana_detector" | "minecraft:armor_stand" | "botania:lavender_quartz_stairs" | "botania:corporea_funnel" | "create:cutting/compat/quark/azalea_wood" | "botania:petal_green_double" | "create:small_limestone_brick_wall" | "create:cutting/compat/tconstruct/skyroot_log" | "create:polished_cut_scorchia_wall_from_scorchia_stonecutting" | "minecraft:pink_stained_glass_pane" | "create:crushing/tuff" | "create:cut_limestone_wall" | "botania:stonecutting/corporea_block_to_corporea_brick" | "create:compat/silentsgems/crushing/morganite_ore" | "botania:runic_altar/earth" | "minecraft:blue_dye_from_cornflower" | "create:cut_calcite_brick_stairs_from_calcite_stonecutting" | "ae2:network/parts/panels_monitor" | "minecraft:quartz_slab_from_stonecutting" | "botania:stonecutting/elf_quartz_to_elf_quartz_stairs" | "minecraft:brown_banner" | "create:compat/botania/milling/red_petal" | "minecraft:warped_hyphae" | "create:cutting/compat/biomesoplenty/redwood_wood" | "botania:cosmetic_black_bowtie" | "create:cut_diorite_slab_recycling" | "create:cut_tuff_stairs_from_tuff_stonecutting" | "botania:chiseled_metamorphic_forest_bricks" | "create:small_limestone_brick_stairs_from_limestone_stonecutting" | "create:crimsite_pillar_from_stone_types_crimsite_stonecutting" | "create:cut_calcite_slab_from_stone_types_calcite_stonecutting" | "create:cutting/compat/blue_skies/stripped_frostbright_log" | "ae2:shaped/stairs/chiseled_quartz_block" | "create:cutting/compat/twilightforest/stripped_transformation_wood" | "minecraft:chiseled_stone_bricks_stone_from_stonecutting" | "create:milling/rose_bush" | "botania:red_string_fertilizer" | "minecraft:netherite_sword_smithing" | "create:cutting/compat/botania/glimmering_stripped_livingwood_log" | "ae2:network/cables/dense_smart_lime" | "botania:manasteel_axe" | "create:cutting/compat/ecologics/flowering_azalea_wood" | "create:crafting/kinetics/mechanical_crafter" | "minecraft:green_bed" | "create:layered_ochrum_from_stone_types_ochrum_stonecutting" | "create:small_dripstone_brick_slab_from_dripstone_block_stonecutting" | "create:blasting/iron_ingot_from_crushed" | "botania:stonecutting/livingrock_to_livingrock_slab" | "create:compat/environmental/milling/pink_hibiscus" | "minecraft:red_sandstone_slab_from_red_sandstone_stonecutting" | "ae2:block_cutter/slabs/fluix_slab" | "create:cut_crimsite_brick_stairs_from_crimsite_stonecutting" | "create:crushing/raw_osmium_ore" | "create:small_deepslate_brick_wall_from_stone_types_deepslate_stonecutting" | "ae2:tools/paintballs_red" | "botania:mana_infusion/cornflower_to_lily_of_the_valley" | "minecraft:magenta_concrete_powder" | "minecraft:red_dye_from_poppy" | "botania:stonecutting/metamorphic_mountain_cobblestone_to_metamorphic_mountain_cobblestone_slab" | "minecraft:prismarine_brick_slab_from_prismarine_stonecutting" | "create:small_diorite_brick_stairs_from_stone_types_diorite_stonecutting" | "create:crushing/silver_ore" | "minecraft:light_blue_candle" | "ae2:matter_cannon/nuggets/niobium" | "create:small_diorite_brick_wall_from_stone_types_diorite_stonecutting" | "minecraft:waxed_oxidized_cut_copper_stairs_from_waxed_oxidized_cut_copper_stonecutting" | "create:cutting/stripped_acacia_log" | "create:cut_veridium_stairs_from_veridium_stonecutting" | "minecraft:iron_ingot_from_blasting_deepslate_iron_ore" | "minecraft:gray_banner" | "botania:runic_altar/wrath" | "create:small_crimsite_brick_wall" | "minecraft:warped_stairs" | "minecraft:deepslate_tile_wall_from_deepslate_tiles_stonecutting" | "create:deploying/waxed_weathered_cut_copper_stairs_from_adding_wax" | "ae2:inscriber/calculation_processor_press" | "create:cut_diorite_from_diorite_stonecutting" | "create:splashing/orange_concrete_powder" | "minecraft:mossy_stone_brick_slab_from_mossy_stone_brick_stonecutting" | "create:small_calcite_brick_slab_from_stone_types_calcite_stonecutting" | "ae2:network/cells/fluid_storage_cell_16k_storage" | "botania:slab_recombine/metamorphic_mountain_cobblestone" | "ae2:tools/paintballs_gray" | "create:compat/ae2/milling/certus_quartz" | "ae2:matter_cannon/nuggets/sulfur" | "create:polished_cut_scoria_slab_from_stone_types_scoria_stonecutting" | "botania:slab_recombine/metamorphic_forest_cobblestone" | "minecraft:stone_bricks_from_stone_stonecutting" | "create:cutting/compat/quark/stripped_azalea_wood" | "minecraft:smooth_sandstone_slab" | "create:milling/oxeye_daisy" | "botania:chiseled_metamorphic_mesa_bricks" | "minecraft:rail" | "botania:apothecary_plains" | "botania:metamorphic_plains_bricks_slab" | "botania:mana_infusion/coal_dupe" | "botania:mana_infusion/flint_to_gunpowder" | "ae2:tools/paintballs_lumen_green" | "minecraft:diamond_sword" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_stone_slab" | "botania:corporea_index" | "create:cutting/compat/ars_nouveau/red_archwood_wood" | "botania:gray_petal_block" | "botania:metamorphic_mountain_cobblestone_slab" | "botania:mana_infusion/brick_deconstruct" | "minecraft:yellow_banner" | "botania:mana_infusion/cod_to_salmon" | "botania:petal_apothecary/bubbell" | "ae2:inscriber/fluix_dust" | "ae2:network/cells/fluid_storage_cell_256k" | "create:cutting/compat/byg/stripped_lament_wood" | "minecraft:purpur_stairs_from_purpur_block_stonecutting" | "minecraft:soul_lantern" | "create:compat/endergetic/cutting/poise_stem" | "botania:petal_cyan_double" | "minecraft:crimson_trapdoor" | "create:cut_veridium_bricks_from_stone_types_veridium_stonecutting" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_stone_stairs" | "create:crafting/kinetics/mysterious_cuckoo_clock" | "create:cutting/compat/byg/witch_hazel_log" | "minecraft:firework_star_fade" | "create:polished_cut_tuff_wall_from_tuff_stonecutting" | "botania:livingrock_slab" | "create:crafting/logistics/pulse_repeater" | "botania:mossy_livingrock_bricks" | "create:small_scoria_brick_slab_recycling" | "botania:terrasteel_boots" | "create:polished_cut_tuff_slab_recycling" | "minecraft:smooth_basalt" | "botania:corporea_brick" | "ae2:tools/network_memory_card_purple" | "create:compat/bop/milling/pink_daffodil" | "create:compat/environmental/milling/orange_hibiscus" | "botania:metamorphic_plains_cobblestone_wall" | "botania:slab_recombine/dreamwood" | "minecraft:polished_blackstone_from_blackstone_stonecutting" | "minecraft:blue_concrete_powder" | "minecraft:blue_stained_glass" | "minecraft:iron_ingot_from_smelting_deepslate_iron_ore" | "create:small_granite_brick_wall_from_stone_types_granite_stonecutting" | "create:oxidized_copper_tile_slab_from_oxidized_copper_tiles_stonecutting" | "create:cut_asurine_slab_from_asurine_stonecutting" | "botania:petal_apothecary/pollidisiac" | "create:cutting/compat/tconstruct/stripped_skyroot_log" | "minecraft:chiseled_deepslate_from_cobbled_deepslate_stonecutting" | "create:cut_limestone_brick_slab" | "create:cutting/compat/twilightforest/stripped_canopy_wood" | "minecraft:polished_blackstone_brick_stairs_from_polished_blackstone_bricks_stonecutting" | "botania:crafty_crate" | "create:small_crimsite_brick_wall_from_stone_types_crimsite_stonecutting" | "create:small_granite_brick_slab" | "create:copper_shingle_slab" | "ae2:matter_cannon/nuggets/silver" | "create:crushing/netherrack" | "minecraft:crimson_planks" | "botania:metamorphic_plains_stone_slab" | "botania:pattern_2_1" | "minecraft:smooth_red_sandstone" | "botania:pattern_2_2" | "botania:pattern_2_3" | "minecraft:blue_candle" | "create:cut_ochrum_wall" | "ae2:network/cables/dense_covered_pink" | "ae2:network/cables/glass_brown" | "create:cutting/compat/forbidden_arcanus/stripped_mysterywood_log" | "botania:red_string_relay" | "botania:glimmering_dreamwood" | "ae2:tools/portable_item_cell_256k" | "botania:glimmering_stripped_livingwood" | "minecraft:flower_banner_pattern" | "ae2:network/cells/item_storage_cell_16k_storage" | "minecraft:cyan_carpet_from_white_carpet" | "create:cut_ochrum_brick_wall_from_ochrum_stonecutting" | "ae2:network/parts/cable_anchor" | "create:crushing/asurine_recycling" | "botania:lavender_quartz_pillar" | "botania:elven_trade/elf_glass" | "create:cut_crimsite_brick_wall_from_stone_types_crimsite_stonecutting" | "minecraft:polished_blackstone_brick_slab_from_polished_blackstone_bricks_stonecutting" | "ae2:entropy/cool/flowing_water_snowball" | "botania:floating_dandelifeon" | "minecraft:gold_ingot_from_blasting_raw_gold" | "create:cutting/compat/byg/stripped_pine_wood" | "create:polished_cut_scorchia_slab_from_scorchia_stonecutting" | "minecraft:iron_nugget_from_blasting" | "botania:mana_infusion/glowstone_dupe" | "botania:green_pavement" | "minecraft:cut_red_sandstone_slab_from_red_sandstone_stonecutting" | "minecraft:gold_ingot_from_blasting_gold_ore" | "botania:mana_infusion/andesite_to_diorite" | "ae2:matter_cannon/nuggets/ruthenium" | "botania:mana_infusion/spruce_sapling_to_birch_sapling" | "botania:dark_quartz" | "create:small_diorite_brick_slab" | "create:compat/ae2/mixing/fluix_crystal" | "create:milling/azure_bluet" | "botania:pure_daisy/cobblestone" | "create:cutting/warped_hyphae" | "botania:brown_floating_flower" | "botania:stonecutting/corporea_block_to_corporea_brick_stairs" | "ae2:matter_cannon/nuggets/cerium" | "create:cutting/compat/blue_skies/cherry_log" | "minecraft:green_stained_glass_pane" | "create:cut_ochrum_brick_stairs_from_stone_types_ochrum_stonecutting" | "minecraft:green_bed_from_white_bed" | "minecraft:magenta_dye_from_blue_red_pink" | "create:smelting/zinc_ingot_from_raw_ore" | "create:compat/atmospheric/milling/gilia" | "minecraft:black_concrete_powder" | "botania:shimmerwood_planks" | "create:cut_andesite_from_andesite_stonecutting" | "minecraft:lime_carpet" | "ae2:matter_cannon/nuggets/tantalum" | "minecraft:purple_banner" | "minecraft:sugar_from_sugar_cane" | "create:polished_cut_diorite_slab_recycling" | "botania:chiseled_metamorphic_swamp_bricks" | "create:jungle_window_pane" | "botania:petal_brown" | "botania:slab_recombine/metamorphic_forest_bricks" | "ae2:network/parts/terminals_crafting" | "create:cut_dripstone_slab" | "botania:mana_spreader" | "minecraft:cooked_beef_from_campfire_cooking" | "minecraft:wooden_hoe" | "botania:floating_labellia" | "minecraft:quartz_pillar" | "itemfilters:always_true" | "create:cutting/compat/byg/ebony_wood" | "botania:slingshot" | "ae2:entropy/cool/water_ice" | "create:deploying/waxed_copper_shingles_from_adding_wax" | "ae2:network/cables/glass_gray" | "create:small_limestone_bricks_from_stone_types_limestone_stonecutting" | "ae2:tools/certus_quartz_pickaxe" | "botania:dye_green" | "botania:lens_tripwire" | "ae2:network/blocks/crystal_processing_charger" | "ae2:network/parts/energy_level_emitter" | "minecraft:waxed_cut_copper_from_honeycomb" | "botania:mana_infusion/piston_relay" | "botania:floating_marimorphosis" | "minecraft:waxed_oxidized_cut_copper_stairs" | "create:crushing/iron_ore" | "create:compat/environmental/pressing/podzol_path" | "botania:mana_infusion/dead_bush_to_grass" | "botania:stonecutting/corporea_block_to_corporea_stairs" | "create:compat/simplefarming/crushing/sf_crush_oat" | "create:small_tuff_brick_wall_from_tuff_stonecutting" | "minecraft:blue_dye" | "minecraft:polished_diorite_slab_from_polished_diorite_stonecutting" | "create:small_ochrum_brick_slab_from_ochrum_stonecutting" | "minecraft:blackstone_stairs_from_blackstone_stonecutting" | "create:compat/ae2/milling/sky_stone_block" | "create:crafting/copper/waxed_weathered_copper_shingle_slab_from_honeycomb" | "minecraft:piston" | "ae2:matter_cannon/nuggets/bromine" | "create:small_asurine_brick_slab_from_stone_types_asurine_stonecutting" | "create:compat/environmental/milling/pink_delphinium" | "create:weathered_copper_tile_stairs_from_weathered_copper_tiles_stonecutting" | "minecraft:white_banner" | "botania:lime_floating_flower" | "naturescompass:natures_compass" | "minecraft:smooth_quartz" | "botania:stonecutting/metamorphic_fungal_bricks_to_metamorphic_fungal_bricks_stairs" | "botania:mana_infusion/salmon_to_tropical_fish" | "botania:brew/overload" | "ae2:network/cells/item_storage_components_cell_16k_part" | "botania:virus_necrodermal" | "minecraft:light_gray_banner" | "botania:mana_bomb" | "create:milling/cocoa_beans" | "minecraft:cut_red_sandstone_slab_from_cut_red_sandstone_stonecutting" | "minecraft:wooden_axe" | "create:crafting/kinetics/train_trapdoor" | "botania:elven_trade/elf_quartz" | "create:cutting/compat/byg/ether_wood" | "create:smelting/glass_from_tiled_glass" | "botania:third_eye" | "create:cutting/compat/blue_skies/maple_wood" | "create:sequenced_assembly/sturdy_sheet" | "itemfilters:block" | "create:pressing/brass_ingot" | "botania:runic_altar/gluttony" | "botania:spell_cloth" | "create:cutting/compat/biomesoplenty/stripped_palm_log" | "botania:stonecutting/dark_quartz_to_dark_quartz_stairs" | "ae2:decorative/light_detector" | "botania:metamorphic_forest_cobblestone_slab" | "create:small_limestone_brick_slab_from_stone_types_limestone_stonecutting" | "botania:mana_diamond_block" | "create:smelting/ingot_silver_compat_immersiveengineering" | "minecraft:diorite_stairs_from_diorite_stonecutting" | "minecraft:trapped_chest" | "create:oak_window_pane" | "minecraft:stone_stairs_from_stone_stonecutting" | "create:polished_cut_ochrum_stairs_from_stone_types_ochrum_stonecutting" | "ae2:matter_cannon/nuggets/cadmium" | "create:cut_crimsite_bricks_from_crimsite_stonecutting" | "minecraft:dried_kelp" | "minecraft:polished_andesite_stairs_from_andesite_stonecutting" | "create:small_limestone_brick_stairs" | "create:cut_asurine_stairs" | "minecraft:iron_bars" | "ae2:matter_cannon/nuggets/meat" | "botania:shimmerwood_planks_slab" | "minecraft:green_glazed_terracotta" | "botania:cocoon" | "create:crafting/kinetics/copper_valve_handle" | "create:deploying/waxed_oxidized_cut_copper_stairs_from_adding_wax" | "minecraft:diamond_axe" | "create:small_scorchia_brick_stairs_from_stone_types_scorchia_stonecutting" | "create:smelting/nickel_ingot_compat_thermal" | "create:cutting/compat/byg/stripped_skyris_log" | "botania:brew/fire_resistance" | "create:cut_dripstone_brick_wall_from_dripstone_block_stonecutting" | "botania:stonecutting/metamorphic_swamp_cobblestone_to_metamorphic_swamp_cobblestone_stairs" | "create:compat/endergetic/splashing/petrified_overworld_corrock_block" | "create:crushing/raw_quicksilver_ore" | "create:cut_asurine_wall_from_asurine_stonecutting" | "botania:metamorphic_forest_bricks" | "create:compat/druidcraft/cutting/stripped_darkwood_log" | "ae2:matter_cannon/nuggets/copper" | "minecraft:dark_oak_pressure_plate" | "botania:stonecutting/red_quartz_to_red_quartz_pillar" | "create:compat/druidcraft/cutting/stripped_elder_log" | "botania:petal_apothecary/dreadthorn" | "create:splashing/purple_concrete_powder" | "create:cut_diorite_stairs_from_stone_types_diorite_stonecutting" | "create:cut_deepslate_slab" | "botania:stonecutting/metamorphic_fungal_stone_to_chiseled_metamorphic_fungal_bricks" | "botania:petal_gray" | "minecraft:purple_bed_from_white_bed" | "botania:mossy_dreamwood_planks" | "minecraft:tipped_arrow" | "minecraft:waxed_cut_copper" | "create:compat/bop/milling/wildflower" | "botania:marimorphosis/metamorphic_fungal_stone" | "create:polished_cut_dripstone_wall" | "minecraft:light_blue_carpet" | "minecraft:chiseled_polished_blackstone" | "create:crafting/curiosities/minecart_coupling" | "botania:fire_rod" | "botania:petal_pink_double" | "create:cut_deepslate_brick_slab" | "create:cutting/compat/ars_nouveau/stripped_purple_archwood_log" | "create:layered_scorchia_from_scorchia_stonecutting" | "create:polished_cut_granite_wall_from_stone_types_granite_stonecutting" | "create:cut_diorite_brick_stairs_from_diorite_stonecutting" | "create:cut_granite_stairs_from_stone_types_granite_stonecutting" | "ae2:inscriber/engineering_processor" | "botania:spawner_mover" | "minecraft:gold_ingot_from_smelting_deepslate_gold_ore" | "botania:petal_apothecary/jaded_amaranthus" | "create:cutting/stripped_spruce_wood" | "create:milling/cobblestone" | "create:milling/wheat" | "create:polished_cut_diorite_slab_from_stone_types_diorite_stonecutting" | "botania:cosmetic_red_ribbons" | "create:cut_dripstone_from_dripstone_block_stonecutting" | "create:compacting/honey" | "botania:elementium_shears" | "create:layered_andesite_from_stone_types_andesite_stonecutting" | "minecraft:red_banner" | "create:cut_ochrum_brick_wall_from_stone_types_ochrum_stonecutting" | "create:polished_cut_dripstone_stairs_from_dripstone_block_stonecutting" | "create:polished_cut_ochrum_slab_from_stone_types_ochrum_stonecutting" | "botania:bifrost_pane" | "minecraft:deepslate_tile_slab" | "create:cutting/compat/blue_skies/stripped_starlit_wood" | "create:cutting/compat/biomesoplenty/stripped_umbran_wood" | "ae2:misc/chests_sky_stone" | "create:milling/grass" | "create:compat/bop/milling/rose" | "botania:scorched_seeds" | "create:polished_cut_calcite_from_stone_types_calcite_stonecutting" | "create:compat/botania/milling/blue_petal" | "create:layered_diorite_from_diorite_stonecutting" | "minecraft:black_carpet" | "botania:gaia_pylon" | "botania:stonecutting/metamorphic_mesa_bricks_to_chiseled_metamorphic_mesa_bricks" | "botania:petal_orange_double" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_bricks_slab" | "botania:magenta_shiny_flower" | "botania:manasteel_chestplate" | "create:dark_oak_window" | "minecraft:deepslate_tile_stairs_from_deepslate_tiles_stonecutting" | "create:cutting/compat/byg/holly_log" | "botania:livingwood_stairs" | "botania:mana_infusion/quartz_dupe" | "create:small_dripstone_brick_wall_from_stone_types_dripstone_stonecutting" | "minecraft:warped_button" | "minecraft:waxed_oxidized_cut_copper_slab_from_honeycomb" | "create:crafting/palettes/scorchia" | "ae2:tools/paintballs_blue" | "botania:chiseled_elf_quartz" | "create:cut_crimsite_stairs" | "ae2:tools/paintballs_lime" | "botania:livingrock_bricks_slab" | "create:small_deepslate_brick_stairs_from_stone_types_deepslate_stonecutting" | "create:splashing/pink_concrete_powder" | "create:crafting/kinetics/sequenced_gearshift" | "create:cutting/compat/byg/stripped_mahogany_wood" | "create:splashing/mekanism/crushed_tin_ore" | "minecraft:torch" | "minecraft:polished_granite_stairs" | "minecraft:armor_dye" | "create:veridium_pillar_from_veridium_stonecutting" | "create:compat/atmospheric/milling/yucca_flower" | "ae2:entropy/cool/grass_block_dirt" | "create:compat/bop/milling/burning_blossom" | "ae2:matter_cannon/nuggets/titanium" | "create:granite_pillar_from_granite_stonecutting" | "create:cutting/compat/byg/stripped_aspen_wood" | "create:crafting/kinetics/black_seat" | "botania:orechid/diamond_ore" | "botania:petal_apothecary/hopperhock" | "create:cutting/compat/twilightforest/stripped_dark_log" | "create:polished_cut_veridium_stairs_from_stone_types_veridium_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_jacaranda_log" | "create:milling/allium" | "botania:mana_infusion/tropical_fish_to_pufferfish" | "create:small_diorite_brick_slab_from_diorite_stonecutting" | "minecraft:map" | "create:compat/traverse/cutting/stripped_fir_wood" | "create:cut_scorchia_stairs" | "minecraft:detector_rail" | "create:small_andesite_brick_slab_from_andesite_stonecutting" | "botania:manasteel_sword" | "create:cutting/compat/twilightforest/mining_wood" | "botania:spark_upgrade_dispersive" | "create:cutting/compat/biomesoplenty/jacaranda_log" | "botania:mana_infusion/oak_leaves_dupe" | "botania:metamorphic_mesa_bricks_stairs" | "create:crafting/copper/waxed_oxidized_copper_shingles_from_honeycomb" | "create:cut_crimsite_brick_slab_from_crimsite_stonecutting" | "create:cutting/compat/byg/palo_verde_log" | "create:cutting/compat/twilightforest/canopy_wood" | "botania:cosmetic_unicorn_horn" | "create:crafting/kinetics/copper_valve_handle_from_others" | "botania:dreamwood_wand" | "minecraft:crafting_table" | "create:brass_ladder_from_plates_brass_stonecutting" | "create:polished_cut_crimsite_wall_from_crimsite_stonecutting" | "minecraft:sandstone_wall" | "minecraft:green_stained_glass_pane_from_glass_pane" | "minecraft:cut_copper_slab" | "create:mechanical_crafting/wand_of_symmetry" | "create:cut_crimsite_brick_slab_from_stone_types_crimsite_stonecutting" | "botania:floating_rannuncarpus" | "minecraft:light_blue_wool" | "botania:stonecutting/metamorphic_forest_stone_to_chiseled_metamorphic_forest_bricks" | "create:cutting/compat/blue_skies/starlit_wood" | "minecraft:orange_wool" | "botania:brew/allure" | "create:milling/cactus" | "botania:teru_teru_bozu" | "create:cut_diorite_slab_from_diorite_stonecutting" | "create:cutting/stripped_warped_hyphae" | "create:compat/environmental/milling/yellow_hibiscus" | "minecraft:anvil" | "create:milling/clay" | "minecraft:stripped_acacia_wood" | "botania:brown_petal_block" | "botania:brew/bloodthirst" | "create:cutting/stripped_spruce_log" | "ae2:network/cables/smart_gray" | "create:cut_scorchia_brick_stairs" | "ae2:network/cables/dense_covered_white" | "botania:cosmetic_thick_eyebrows" | "create:polished_cut_andesite_stairs" | "botania:red_string_dispenser" | "botania:dreamwood_wall" | "create:crafting/logistics/pulse_extender" | "botania:glimmering_stripped_dreamwood_from_log" | "botania:slab_recombine/metamorphic_swamp_cobblestone" | "ae2:shaped/slabs/quartz_pillar" | "minecraft:orange_bed" | "ae2:tools/paintballs_lumen_purple" | "ae2:decorative/quartz_fixture" | "ae2:network/cells/item_storage_cell_16k" | "create:small_ochrum_brick_slab" | "botania:mana_infusion/poppy_to_blue_orchid" | "create:filling/glowstone" | "create:polished_cut_limestone_slab_from_stone_types_limestone_stonecutting" | "botania:mana_infusion/cocoa_beans_to_wheat_seeds" | "minecraft:black_glazed_terracotta" | "botania:sextant" | "botania:manasteel_helmet" | "botania:dye_orange" | "minecraft:carrot_on_a_stick" | "minecraft:red_stained_glass_pane" | "create:cutting/compat/byg/stripped_green_enchanted_wood" | "create:splashing/gravel" | "create:cutting/compat/byg/pine_wood" | "create:crafting/copper/waxed_copper_tile_stairs_from_honeycomb" | "ae2:network/blocks/quantum_ring" | "create:splashing/immersiveengineering/crushed_lead_ore" | "minecraft:brick_wall" | "create:crushing/raw_platinum_block" | "create:exposed_copper_shingle_slab" | "itemfilters:tag" | "create:cutting/compat/biomesoplenty/stripped_fir_log" | "minecraft:waxed_exposed_cut_copper_stairs_from_waxed_exposed_cut_copper_stonecutting" | "create:cut_tuff_brick_slab_from_stone_types_tuff_stonecutting" | "create:compat/botania/milling/yellow_petal" | "create:compat/botania/milling/black_petal" | "create:scorchia_pillar_from_scorchia_stonecutting" | "create:haunting/soul_lantern" | "botania:light_gray_floating_flower" | "minecraft:raw_iron_block" | "minecraft:dark_oak_planks" | "ae2:block_cutter/walls/chiseled_quartz_wall" | "minecraft:oak_button" | "create:compat/atmospheric/cutting/stripped_aspen_log" | "minecraft:granite_wall" | "create:polished_cut_asurine_from_asurine_stonecutting" | "create:small_scorchia_brick_wall_from_scorchia_stonecutting" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_bricks_stairs" | "botania:blaze_block" | "create:crushing/raw_lead_block" | "minecraft:polished_deepslate_wall_from_cobbled_deepslate_stonecutting" | "create:polished_cut_asurine_slab_from_stone_types_asurine_stonecutting" | "botania:floating_manastar" | "create:splashing/gray_concrete_powder" | "minecraft:exposed_cut_copper_from_exposed_copper_stonecutting" | "create:cutting/compat/hexcasting/akashic_log_stripped" | "botania:mana_infusion/grass_seeds" | "minecraft:mossy_cobblestone_slab_from_mossy_cobblestone_stonecutting" | "minecraft:diamond_helmet" | "create:cutting/compat/botania/dreamwood" | "minecraft:warped_fence" | "minecraft:light_blue_bed_from_white_bed" | "ae2:matter_cannon/nuggets/scandium" | "botania:stripped_dreamwood_wall" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_stone_stairs" | "minecraft:dark_oak_fence_gate" | "minecraft:waxed_exposed_cut_copper" | "create:crafting/copper/waxed_oxidized_copper_shingle_slab_from_honeycomb" | "botania:pure_daisy/livingrock" | "create:small_granite_brick_wall_from_granite_stonecutting" | "create:crushing/zinc_ore" | "minecraft:compass" | "tiab:time_in_a_bottle" | "create:cutting/compat/byg/stripped_willow_log" | "botania:stonecutting/corporea_block_to_corporea_brick_slab" | "botania:dye_purple" | "minecraft:item_frame" | "botania:mossy_livingrock_bricks_wall" | "create:cut_deepslate_brick_stairs_from_stone_types_deepslate_stonecutting" | "minecraft:iron_ingot_from_smelting_iron_ore" | "create:compat/silentsgems/crushing/fluorite_ore" | "minecraft:loom" | "minecraft:polished_granite_stairs_from_polished_granite_stonecutting" | "create:smelting/copper_ingot_from_crushed" | "botania:cell_block" | "create:small_deepslate_bricks_from_deepslate_stonecutting" | "botania:exchange_rod" | "botania:mana_infusion/mana_string" | "create:small_diorite_brick_slab_recycling" | "minecraft:pink_dye_from_pink_tulip" | "minecraft:arrow" | "create:small_calcite_brick_stairs" | "create:polished_cut_granite_wall_from_granite_stonecutting" | "create:cutting/compat/byg/stripped_witch_hazel_log" | "create:polished_cut_tuff_slab_from_tuff_stonecutting" | "ae2:shaped/stairs/quartz_pillar" | "botania:green_shiny_flower" | "botania:stonecutting/red_quartz_to_chiseled_red_quartz" | "create:compat/betterendforge/pressing/end_moss_path" | "minecraft:red_sandstone_stairs" | "botania:red_string_comparator" | "botania:chiseled_metamorphic_taiga_bricks" | "create:cut_granite_brick_wall_from_stone_types_granite_stonecutting" | "botania:orechid_ignem/nether_gold_ore" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_bricks" | "minecraft:gray_stained_glass_pane" | "create:cut_tuff_slab" | "minecraft:green_wool" | "botania:mana_infusion/ender_pearl_from_ghast_tear" | "create:cutting/compat/byg/palm_wood" | "botania:metamorphic_mesa_cobblestone_wall" | "minecraft:polished_blackstone" | "botania:crafting_halo" | "create:cut_tuff_brick_slab" | "create:crafting/copper/waxed_weathered_copper_tile_slab_from_honeycomb" | "create:crushing/coal_ore" | "botania:livingwood" | "botania:floating_hyacidus" | "create:cut_deepslate_slab_from_stone_types_deepslate_stonecutting" | "botania:horn_snow" | "botania:black_pavement_slab" | "create:compat/alexsmobs/emptying/lava_bottle" | "create:cutting/compat/ars_nouveau/stripped_blue_archwood_wood" | "botania:floating_tangleberrie" | "botania:gaia_spreader" | "create:cut_dripstone_brick_stairs" | "create:layered_veridium_from_stone_types_veridium_stonecutting" | "botania:mana_infusion/glowstone_deconstruct" | "minecraft:stone_axe" | "minecraft:jungle_button" | "botania:metamorphic_mountain_bricks_wall" | "botania:stonecutting/blue_pavement_to_blue_pavement_slab" | "botania:metamorphic_taiga_bricks_wall" | "botania:mana_pool" | "create:compat/autumnity/cutting/maple_log" | "create:crafting/kinetics/controls" | "create:polished_cut_crimsite_slab_from_stone_types_crimsite_stonecutting" | "minecraft:waxed_oxidized_copper_from_honeycomb" | "minecraft:spruce_trapdoor" | "create:cutting/compat/biomesoplenty/hellbark_log" | "ae2:tools/nether_quartz_pickaxe" | "minecraft:light_blue_stained_glass" | "create:compat/atmospheric/cutting/stripped_yucca_log" | "create:compat/silentsgems/crushing/ametrine_ore" | "create:cut_scoria_brick_stairs_from_stone_types_scoria_stonecutting" | "minecraft:respawn_anchor" | "create:polished_cut_ochrum_from_stone_types_ochrum_stonecutting" | "create:cutting/compat/byg/skyris_wood" | "botania:petal_gray_double" | "create:polished_cut_tuff_from_stone_types_tuff_stonecutting" | "minecraft:deepslate_brick_slab" | "botania:petal_yellow" | "create:cut_scorchia_slab_from_scorchia_stonecutting" | "minecraft:polished_blackstone_brick_stairs_from_blackstone_stonecutting" | "botania:metamorphic_plains_stone_stairs" | "create:cut_tuff_wall_from_stone_types_tuff_stonecutting" | "create:crushing/lapis_ore" | "botania:livingwood_wall" | "botania:metamorphic_mountain_cobblestone_stairs" | "botania:fabulous_pool_upgrade" | "create:small_dripstone_brick_wall" | "botania:yellow_shiny_flower" | "minecraft:dark_prismarine_stairs" | "create:polished_cut_asurine_from_stone_types_asurine_stonecutting" | "botania:petal_apothecary/kekimurus" | "create:compat/upgrade_aquatic/cutting/driftwood_log" | "create:cut_scoria_slab_from_stone_types_scoria_stonecutting" | "botania:slab_recombine/metamorphic_forest_stone" | "create:cut_scorchia_stairs_from_scorchia_stonecutting" | "ae2:tools/paintballs_purple" | "botania:cosmetic_lusitanic_shield" | "botania:floating_clayconia" | "create:cutting/compat/byg/stripped_skyris_wood" | "minecraft:polished_deepslate_stairs_from_cobbled_deepslate_stonecutting" | "create:cut_dripstone_brick_slab_recycling" | "minecraft:snow_block" | "create:cutting/compat/byg/mahogany_wood" | "ae2:network/cells/item_storage_cell_64k_storage" | "create:blasting/zinc_ingot_from_crushed" | "ae2:network/cables/covered_light_blue" | "minecraft:iron_axe" | "create:cut_crimsite_from_stone_types_crimsite_stonecutting" | "minecraft:cyan_wool" | "botania:dye_red" | "create:crafting/kinetics/fluid_valve" | "ae2:decorative/quartz_vibrant_glass" | "create:polished_cut_veridium_wall" | "minecraft:composter" | "minecraft:sandstone_stairs" | "botania:cosmetic_botanist_emblem" | "minecraft:jukebox" | "create:cut_crimsite_from_crimsite_stonecutting" | "create:layered_granite_from_stone_types_granite_stonecutting" | "ae2:tools/paintballs_lumen_orange" | "create:compat/endergetic/cutting/stripped_poise_stem" | "create:haunting/infested_cracked_stone_bricks" | "create:copper_tile_stairs" | "botania:metamorphic_taiga_stone_wall" | "minecraft:acacia_sign" | "minecraft:coarse_dirt" | "ae2:network/cables/smart_brown" | "botania:pattern_donut" | "minecraft:chest_minecart" | "create:cut_calcite_brick_slab_from_calcite_stonecutting" | "create:crafting/kinetics/white_seat" | "create:crushing/deepslate_coal_ore" | "botania:world_seed" | "botania:sunny_quartz_pillar" | "ae2:network/cables/covered_orange" | "minecraft:prismarine_slab" | "create:crafting/logistics/brass_funnel" | "create:weathered_copper_shingle_stairs_from_weathered_copper_shingles_stonecutting" | "minecraft:fermented_spider_eye" | "ae2:network/parts/panels_dark_monitor" | "create:compat/botania/milling/green_petal" | "minecraft:light_gray_glazed_terracotta" | "create:blasting/ingot_osmium_compat_mekanism" | "minecraft:magenta_terracotta" | "minecraft:baked_potato_from_campfire_cooking" | "create:cutting/compat/biomesoplenty/mahogany_log" | "create:milling/blue_orchid" | "create:cutting/compat/ecologics/flowering_azalea_log" | "ae2:tools/network_memory_card_orange" | "botania:stonecutting/shimmerrock_to_shimmerrock_slab" | "minecraft:deepslate_bricks_from_polished_deepslate_stonecutting" | "minecraft:gold_ingot_from_gold_block" | "create:compat/endergetic/splashing/petrified_end_corrock_block" | "botania:stonecutting/corporea_brick_to_corporea_brick_slab" | "minecraft:cobbled_deepslate_slab" | "create:crafting/appliances/dough" | "create:cutting/compat/biomesoplenty/stripped_redwood_wood" | "create:cut_deepslate_bricks_from_stone_types_deepslate_stonecutting" | "minecraft:iron_door" | "minecraft:purple_stained_glass_pane" | "create:cut_scoria_bricks_from_scoria_stonecutting" | "create:milling/granite" | "create:crushing/amethyst_block" | "ae2:tools/paintballs_lumen_gray" | "botania:corporea_block" | "create:small_tuff_brick_stairs_from_tuff_stonecutting" | "minecraft:chiseled_quartz_block" | "create:compat/projectvibrantjourneys/cutting/juniper_log" | "create:crafting/materials/rose_quartz_tilesfrom_conversion" | "botania:red_quartz" | "create:small_veridium_brick_stairs" | "create:blasting/ingot_lead_compat_mekanism" | "minecraft:cobblestone_stairs_from_cobblestone_stonecutting" | "create:cutting/compat/blue_skies/frostbright_wood" | "minecraft:crimson_door" | "botania:orange_petal_block" | "create:cut_andesite_bricks_from_stone_types_andesite_stonecutting" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_bricks_stairs" | "create:cutting/compat/biomesoplenty/magic_wood" | "minecraft:pink_wool" | "create:crafting/logistics/display_link" | "create:cut_scorchia_brick_slab" | "create:cut_crimsite_brick_stairs_from_stone_types_crimsite_stonecutting" | "ae2:network/cables/glass_white" | "create:deploying/waxed_copper_shingle_stairs_from_adding_wax" | "minecraft:end_stone_bricks" | "ae2:matter_cannon/nuggets/iron" | "create:compat/projectvibrantjourneys/cutting/stripped_mangrove_log" | "minecraft:red_stained_glass_pane_from_glass_pane" | "minecraft:waxed_cut_copper_stairs_from_waxed_copper_block_stonecutting" | "botania:dark_quartz_stairs" | "minecraft:black_candle" | "create:cutting/compat/byg/blue_enchanted_log" | "botania:lens_firework" | "ae2:network/cells/item_storage_cell_1k_storage" | "create:small_veridium_brick_stairs_from_stone_types_veridium_stonecutting" | "minecraft:smooth_quartz_stairs" | "create:crushing/iron_horse_armor" | "create:blasting/ingot_uranium_compat_mekanism" | "create:crushing/osmium_ore" | "botania:stonecutting/metamorphic_taiga_cobblestone_to_metamorphic_taiga_cobblestone_wall" | "create:small_tuff_brick_slab_from_tuff_stonecutting" | "create:crafting/kinetics/mechanical_mixer" | "create:cut_veridium_wall_from_stone_types_veridium_stonecutting" | "minecraft:lime_dye" | "create:cut_diorite_stairs_from_diorite_stonecutting" | "create:smelting/ingot_lead_compat_mekanism" | "minecraft:polished_diorite_stairs_from_polished_diorite_stonecutting" | "botania:dye_magenta" | "minecraft:oak_planks" | "create:crafting/appliances/diving_boots" | "create:polished_cut_scorchia_slab" | "minecraft:orange_candle" | "create:compat/neapolitan/emptying/milk_bottle" | "create:framed_glass_from_glass_colorless_stonecutting" | "botania:quartz_sunny" | "botania:flighttiara_5" | "botania:metamorphic_swamp_stone_wall" | "botania:flighttiara_4" | "botania:flighttiara_7" | "botania:mana_infusion/grass_to_fern" | "ae2:matter_cannon/nuggets/beef" | "botania:terrasteel_helmet" | "botania:flighttiara_6" | "minecraft:warped_sign" | "botania:flighttiara_1" | "botania:flighttiara_0" | "botania:metamorphic_forest_stone_wall" | "botania:stonecutting/sunny_quartz_to_sunny_quartz_stairs" | "botania:flighttiara_3" | "botania:flighttiara_2" | "botania:metamorphic_desert_bricks_wall" | "create:compat/projectvibrantjourneys/cutting/aspen_log" | "create:polished_cut_scoria_stairs_from_scoria_stonecutting" | "botania:red_quartz_slab" | "botania:flighttiara_8" | "ae2:matter_cannon/nuggets/tungsten" | "botania:infused_seeds" | "botania:lens_power" | "botania:pattern_1_1" | "botania:pattern_1_2" | "botania:pattern_1_3" | "create:polished_cut_diorite_wall" | "minecraft:stone_brick_wall" | "create:splashing/thermal/crushed_nickel_ore" | "minecraft:repair_item" | "minecraft:light_blue_dye_from_blue_white_dye" | "ae2:matter_cannon/nuggets/meatraw" | "create:crafting/kinetics/spout" | "minecraft:cyan_dye" | "create:polished_cut_tuff_wall_from_stone_types_tuff_stonecutting" | "botania:light_blue_floating_flower" | "minecraft:orange_terracotta" | "create:oxidized_copper_shingle_slab_from_oxidized_copper_shingles_stonecutting" | "create:cutting/compat/ars_nouveau/stripped_blue_archwood_log" | "botania:light_blue_petal_block" | "create:compat/traverse/cutting/fir_wood" | "create:haunting/soul_torch" | "botania:stonecutting/metamorphic_desert_cobblestone_to_metamorphic_desert_cobblestone_wall" | "create:crafting/kinetics/gray_seat_from_other_seat" | "create:cutting/compat/biomesoplenty/palm_wood" | "botania:floating_pure_daisy" | "minecraft:gold_block" | "minecraft:spruce_boat" | "create:splashing/blue_concrete_powder" | "create:cutting/compat/biomesoplenty/stripped_magic_log" | "botania:white_floating_flower" | "ae2:network/cables/dense_smart_cyan" | "minecraft:paper" | "botania:petal_apothecary/narslimmus" | "botania:elf_glass_pane" | "minecraft:lime_glazed_terracotta" | "botania:white_pavement" | "create:cut_scoria_brick_slab_recycling" | "botania:light_gray_shiny_flower" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_stone_wall" | "create:compat/neapolitan/crushing/ice" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_stone_wall" | "botania:conversions/terrasteel_block_deconstruct" | "create:cutting/compat/byg/nightshade_log" | "create:cutting/compat/byg/fir_log" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_stone_slab" | "botania:stonecutting/lavender_quartz_to_chiseled_lavender_quartz" | "botania:magenta_petal_block" | "create:cut_calcite_brick_wall" | "botania:stonecutting/metamorphic_mesa_stone_to_chiseled_metamorphic_mesa_bricks" | "minecraft:copper_ingot_from_blasting_raw_copper" | "minecraft:cut_red_sandstone_slab" | "botania:azulejo_0_alt" | "botania:incense_plate" | "ae2:matter_cannon/nuggets/vanadium" | "create:cutting/compat/tconstruct/bloodshroom_log" | "minecraft:dark_oak_button" | "create:crafting/kinetics/framed_glass_trapdoor" | "minecraft:emerald_from_smelting_deepslate_emerald_ore" | "create:cut_tuff_brick_slab_recycling" | "create:cut_asurine_brick_wall_from_stone_types_asurine_stonecutting" | "botania:metamorphic_swamp_stone_slab" | "create:cut_diorite_wall_from_diorite_stonecutting" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_bricks" | "botania:stonecutting/red_pavement_to_red_pavement_slab" | "botania:mana_infusion/solegnolia_chibi" | "botania:mana_infusion/mana_cookie" | "botania:stonecutting/metamorphic_mountain_bricks_to_metamorphic_mountain_bricks_slab" | "create:ornate_iron_window_pane" | "create:polished_cut_scorchia_stairs_from_scorchia_stonecutting" | "minecraft:raw_iron" | "botania:stonecutting/metamorphic_swamp_cobblestone_to_metamorphic_swamp_cobblestone_wall" | "botania:conversions/black_petal_block_deconstruct" | "minecraft:iron_nugget" | "create:splashing/immersiveengineering/crushed_aluminum_ore" | "botania:natura_pylon" | "botania:lime_petal_block" | "ae2:network/parts/panels_semi_dark_monitor" | "minecraft:cracked_deepslate_tiles" | "botania:stonecutting/mana_quartz_to_mana_quartz_pillar" | "create:compat/projectvibrantjourneys/cutting/mangrove_log" | "create:crushing/raw_copper_block" | "minecraft:waxed_oxidized_cut_copper_from_honeycomb" | "minecraft:cooked_rabbit" | "botania:mana_infusion/sweet_berries_to_glow_berries" | "minecraft:nether_wart_block" | "create:cut_scorchia_wall_from_scorchia_stonecutting" | "minecraft:magenta_banner" | "create:cut_tuff_wall_from_tuff_stonecutting" | "ae2:entropy/cool/stone_bricks_cracked_stone_bricks" | "botania:elven_trade/iron_return" | "create:cutting/compat/blue_skies/stripped_lunar_wood" | "create:crushing/diorite" | "create:cut_veridium_wall" | "itemfilters:always_false" | "create:compat/environmental/pressing/mycelium_path" | "create:crafting/kinetics/magenta_seat_from_other_seat" | "botania:stonecutting/metamorphic_mountain_cobblestone_to_metamorphic_mountain_cobblestone_wall" | "create:cutting/compat/integrateddynamics/menril_log" | "create:milling/lilac" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_bricks_wall" | "ae2:network/parts/toggle_bus_alt" | "minecraft:iron_block" | "create:cut_granite_brick_wall" | "ae2:network/cables/covered_brown" | "ae2:network/cells/item_storage_components_cell_64k_part" | "minecraft:dark_oak_door" | "minecraft:writable_book" | "create:compat/thermal/crushing/apatite_ore" | "create:cut_dripstone_brick_wall_from_stone_types_dripstone_stonecutting" | "botania:mana_infusion/calcite_to_deepslate" | "minecraft:golden_apple" | "botania:terra_sword" | "minecraft:diamond_pickaxe" | "minecraft:flower_pot" | "ae2:matter_cannon/nuggets/technetium" | "create:crafting/schematics/empty_schematic" | "minecraft:light_gray_dye_from_oxeye_daisy" | "create:crushing/deepslate_redstone_ore" | "create:small_deepslate_brick_slab_recycling" | "minecraft:polished_blackstone_bricks_from_blackstone_stonecutting" | "ae2:network/cables/smart_purple" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_stone_wall" | "botania:smelting/metamorphic_mountain_stone" | "botania:itemfinder" | "botania:stonecutting/yellow_pavement_to_yellow_pavement_stairs" | "create:exposed_copper_tile_stairs_from_exposed_copper_tiles_stonecutting" | "botania:glimmering_stripped_dreamwood" | "create:smelting/gold_ingot_from_crushed" | "minecraft:pink_glazed_terracotta" | "create:cutting/compat/twilightforest/transformation_wood" | "create:small_crimsite_brick_slab_recycling" | "botania:mana_infusion/apple_to_sweet_berries" | "minecraft:orange_stained_glass" | "create:polished_cut_diorite_stairs_from_diorite_stonecutting" | "botania:rainbow_rod" | "create:small_andesite_brick_slab_recycling" | "minecraft:exposed_cut_copper_slab" | "create:crafting/materials/rose_quartz" | "botania:elf_quartz_stairs" | "botania:metamorphic_desert_stone_wall" | "minecraft:polished_blackstone_wall" | "minecraft:copper_ingot_from_blasting_deepslate_copper_ore" | "botania:cosmetic_hyper_plus" | "minecraft:redstone_from_smelting_redstone_ore" | "botania:redstone_spreader" | "botania:lens_weight" | "botania:metamorphic_swamp_bricks_stairs" | "minecraft:suspicious_stew" | "botania:cosmetic_eyepatch" | "create:crafting/kinetics/controller_rail" | "create:cutting/compat/biomesoplenty/dead_wood" | "ae2:matter_cannon/nuggets/phosphorus" | "botania:stonecutting/metamorphic_swamp_bricks_to_metamorphic_swamp_bricks_wall" | "ae2:network/blocks/interfaces_interface" | "botania:red_floating_flower" | "ae2:matter_cannon/nuggets/electrum" | "minecraft:yellow_bed_from_white_bed" | "ae2:network/cables/smart_magenta" | "minecraft:golden_boots" | "create:compat/projectvibrantjourneys/cutting/stripped_baobab_log" | "minecraft:pink_dye_from_red_white_dye" | "minecraft:netherite_shovel_smithing" | "botania:cosmetic_questgiver_mark" | "create:crafting/kinetics/item_vault" | "create:cut_limestone_brick_wall_from_limestone_stonecutting" | "create:warped_window_pane" | "itemfilters:not" | "create:crafting/schematics/schematic_table" | "create:crafting/kinetics/clockwork_bearing" | "create:crafting/copper/waxed_weathered_copper_tile_stairs_from_honeycomb" | "botania:diva_charm" | "minecraft:polished_granite_slab" | "botania:stonecutting/metamorphic_mountain_bricks_to_chiseled_metamorphic_mountain_bricks" | "botania:dark_quartz_slab" | "create:compat/silentsgems/crushing/sunstone_ore" | "create:cut_deepslate_from_deepslate_stonecutting" | "create:cut_scoria_wall_from_scoria_stonecutting" | "create:cut_limestone_bricks_from_stone_types_limestone_stonecutting" | "minecraft:emerald" | "botania:mana_infusion/glowstone_dust_to_redstone" | "minecraft:wooden_pickaxe" | "botania:petal_apothecary/bergamute" | "create:small_asurine_brick_slab" | "ae2:network/crafting/cpu_crafting_accelerator" | "minecraft:nether_brick_wall_from_nether_bricks_stonecutting" | "minecraft:oxidized_cut_copper_slab_from_oxidized_cut_copper_stonecutting" | "botania:conversions/terrasteel_from_nugget" | "ae2:network/blocks/pattern_providers_interface" | "minecraft:oak_stairs" | "minecraft:smooth_red_sandstone_slab_from_smooth_red_sandstone_stonecutting" | "create:crushing/nether_gold_ore" | "botania:aura_ring_greater" | "minecraft:polished_blackstone_brick_stairs" | "create:cut_granite_brick_stairs" | "create:crafting/kinetics/mechanical_saw" | "ae2:network/cells/spatial_components_0" | "ae2:network/cells/spatial_components_1" | "minecraft:stick_from_bamboo_item" | "create:crafting/logistics/andesite_funnel" | "botania:swap_ring" | "create:crafting/kinetics/depot" | "create:cut_tuff_brick_wall_from_tuff_stonecutting" | "botania:mana_infusion/jungle_leaves_dupe" | "ae2:inscriber/logic_processor_press" | "minecraft:diamond_from_blasting_diamond_ore" | "create:small_asurine_brick_slab_from_asurine_stonecutting" | "botania:mana_infusion/snowball_dupe" | "botania:metamorphic_mountain_stone_stairs" | "botania:mana_infusion/dark_oak_leaves_dupe" | "create:compat/alexsmobs/filling/lava_bottle" | "create:compat/betterendforge/pressing/shadow_grass_path" | "create:compat/endergetic/splashing/petrified_end_corrock" | "create:crushing/tin_ore" | "minecraft:glass" | "botania:floating_tangleberrie_chibi" | "create:filling/honeyed_apple" | "botania:petal_apothecary/vinculotus" | "minecraft:end_stone_brick_stairs" | "create:small_andesite_brick_wall_from_stone_types_andesite_stonecutting" | "create:cut_asurine_brick_stairs_from_stone_types_asurine_stonecutting" | "minecraft:stripped_crimson_hyphae" | "ae2:tools/portable_fluid_cell_64k" | "minecraft:cyan_carpet" | "create:crushing/deepslate_zinc_ore" | "minecraft:polished_deepslate_stairs_from_polished_deepslate_stonecutting" | "botania:petal_apothecary/fallen_kanade" | "create:crafting/kinetics/nixie_tube" | "ae2:network/cables/smart_red" | "botania:light_relay" | "create:polished_cut_crimsite_from_stone_types_crimsite_stonecutting" | "botania:manasteel_hoe" | "minecraft:light_blue_concrete_powder" | "minecraft:smooth_sandstone_stairs_from_smooth_sandstone_stonecutting" | "minecraft:gray_bed_from_white_bed" | "botania:runic_altar/lust" | "minecraft:granite_stairs" | "ae2:network/cables/dense_covered_brown" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_stone_slab" | "minecraft:cyan_terracotta" | "botania:floating_rafflowsia" | "create:cutting/compat/byg/stripped_bulbis_stem" | "create:small_deepslate_brick_slab" | "create:cutting/compat/byg/stripped_bulbis_wood" | "create:compat/bop/milling/wilted_lily" | "create:haunting/infested_chiseled_stone_bricks" | "create:oxidized_copper_tile_stairs_from_oxidized_copper_tiles_stonecutting" | "minecraft:polished_deepslate_from_cobbled_deepslate_stonecutting" | "create:warped_window" | "botania:slab_recombine/livingwood_planks" | "create:cut_crimsite_wall_from_crimsite_stonecutting" | "botania:spawner_claw" | "create:polished_cut_deepslate_stairs_from_deepslate_stonecutting" | "botania:elven_trade/elementium_block" | "minecraft:light_gray_bed" | "botania:placeholder" | "botania:super_cloud_pendant" | "create:small_dripstone_brick_slab_recycling" | "botania:stonecutting/metamorphic_desert_cobblestone_to_metamorphic_desert_cobblestone_stairs" | "create:small_veridium_brick_slab" | "minecraft:black_stained_glass_pane" | "minecraft:prismarine_bricks" | "create:compat/silentsgems/crushing/phosphophyllite_ore" | "create:cutting/compat/tconstruct/skyroot_wood" | "botania:stonecutting/livingrock_to_livingrock_bricks_slab" | "minecraft:stone_bricks" | "create:small_ochrum_brick_wall_from_ochrum_stonecutting" | "create:crushing/raw_platinum_ore" | "create:cut_crimsite_brick_wall" | "ae2:tools/network_color_applicator" | "create:layered_granite_from_granite_stonecutting" | "ae2:tools/paintballs_cyan" | "botania:mana_infusion/red_tulip_to_orange_tulip" | "botania:stonecutting/metamorphic_fungal_bricks_to_chiseled_metamorphic_fungal_bricks" | "create:cutting/compat/biomesoplenty/stripped_magic_wood" | "create:deploying/waxed_oxidized_cut_copper_slab_from_adding_wax" | "create:cutting/spruce_log" | "ae2:matter_cannon/nuggets/fish" | "create:crushing/raw_uranium_block" | "botania:quartz_lavender" | "create:haunting/blackstone" | "create:cutting/compat/biomesoplenty/magic_log" | "minecraft:golden_axe" | "create:cutting/compat/biomesoplenty/stripped_cherry_log" | "botania:petal_yellow_double" | "create:cutting/compat/forbidden_arcanus/mysterywood_log" | "create:cut_scoria_from_scoria_stonecutting" | "create:polished_cut_ochrum_wall_from_ochrum_stonecutting" | "botania:mana_quartz_slab" | "minecraft:cyan_stained_glass" | "botania:stripped_livingwood_stairs" | "botania:metamorphic_plains_cobblestone_slab" | "botania:stonecutting/metamorphic_forest_cobblestone_to_metamorphic_forest_cobblestone_wall" | "create:polished_cut_veridium_stairs_from_veridium_stonecutting" | "create:small_scoria_brick_wall_from_stone_types_scoria_stonecutting" | "botania:stonecutting/elf_quartz_to_chiseled_elf_quartz" | "create:polished_cut_andesite_stairs_from_andesite_stonecutting" | "botania:dye_light_gray" | "minecraft:acacia_fence" | "botania:floating_bubbell_chibi" | "ae2:shaped/slabs/quartz_block" | "minecraft:cyan_banner" | "ae2:network/cables/smart_fluix" | "create:milling/lapis_lazuli" | "create:crafting/materials/copper_nugget" | "create:small_deepslate_brick_slab_from_stone_types_deepslate_stonecutting" | "minecraft:glistering_melon_slice" | "create:crafting/kinetics/magenta_seat" | "minecraft:warped_door" | "minecraft:snow" | "minecraft:acacia_fence_gate" | "botania:conversions/light_gray_petal_block_deconstruct" | "create:crafting/kinetics/gray_seat" | "create:cut_ochrum_slab" | "create:cutting/compat/biomesoplenty/hellbark_wood" | "create:crafting/kinetics/brown_seat" | "create:cut_crimsite_brick_slab_recycling" | "create:crafting/materials/zinc_ingot_from_decompacting" | "minecraft:magenta_carpet" | "ae2:block_cutter/stairs/quartz_pillar_stairs" | "create:small_asurine_brick_slab_recycling" | "botania:mana_infusion/clay_deconstruct" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_bricks_stairs" | "minecraft:blackstone_wall_from_blackstone_stonecutting" | "create:compat/upgrade_aquatic/crafting/tree_fertilizer" | "create:cutting/compat/blue_skies/stripped_dusk_wood" | "botania:petal_apothecary/bellethorn" | "botania:petal_apothecary/shulk_me_not" | "create:compat/silentsgems/crushing/kunzite_ore" | "create:small_diorite_brick_wall" | "botania:elven_trade/dreamwood" | "botania:elven_trade/elementium" | "botania:pure_daisy/livingwood" | "botania:slab_recombine/metamorphic_swamp_bricks" | "create:compat/upgrade_aquatic/cutting/stripped_river_log" | "create:cutting/compat/botania/livingwood_log" | "ae2:network/cables/glass_cyan" | "create:polished_cut_granite_from_stone_types_granite_stonecutting" | "botania:apothecary_desert" | "create:compat/autumnity/milling/autumn_crocus" | "create:polished_cut_diorite_slab_from_diorite_stonecutting" | "minecraft:emerald_from_smelting_emerald_ore" | "create:cutting/compat/blue_skies/stripped_cherry_log" | "minecraft:lectern" | "create:cutting/compat/byg/redwood_log" | "botania:petal_apothecary/tigerseye" | "botania:smelting/metamorphic_swamp_stone" | "create:cut_andesite_brick_wall" | "create:cutting/compat/ecologics/stripped_walnut_log" | "ae2:network/cables/smart_yellow" | "create:compat/silentsgems/crushing/moonstone_ore" | "minecraft:magenta_dye_from_allium" | "minecraft:smooth_stone_slab" | "ae2:materials/formationcore" | "create:milling/beetroot" | "botania:azulejo_0" | "botania:cosmetic_groucho_glasses" | "create:crafting/kinetics/sail_framefrom_conversion" | "create:compat/botania/milling/magenta_petal" | "botania:mana_glass_pane" | "create:crushing/raw_aluminum_block" | "botania:azulejo_7" | "botania:azulejo_8" | "create:crushing/wool" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_bricks_stairs" | "botania:azulejo_5" | "ae2:matter_cannon/nuggets/tin" | "botania:azulejo_6" | "botania:petal_blue_double" | "botania:azulejo_3" | "create:crimson_window" | "botania:azulejo_4" | "botania:cyan_floating_flower" | "botania:azulejo_1" | "botania:azulejo_2" | "minecraft:mossy_cobblestone_from_vine" | "ae2:matter_cannon/nuggets/uranium" | "minecraft:white_concrete_powder" | "botania:azulejo_9" | "minecraft:yellow_terracotta" | "botania:slab_recombine/yellow_pavement" | "create:cutting/compat/tconstruct/bloodshroom_wood" | "minecraft:chiseled_nether_bricks_from_nether_bricks_stonecutting" | "create:small_andesite_brick_stairs_from_stone_types_andesite_stonecutting" | "create:small_andesite_brick_wall" | "create:compat/silentsgems/crushing/jasper_ore" | "create:deploying/waxed_weathered_copper_shingles_from_adding_wax" | "botania:manaweave_helmet" | "create:crafting/kinetics/adjustable_chain_gearshift" | "create:crafting/kinetics/schedule" | "botania:mana_detector_old" | "ae2:matter_cannon/nuggets/zirconium" | "botania:cyan_shiny_flower" | "ae2:entropy/heat/water_air" | "create:cut_granite_brick_wall_from_granite_stonecutting" | "ae2:network/cables/glass_green" | "ae2:tools/fluix_hoe" | "botania:mana_infusion/netherrack_dupe" | "create:smelting/glass_from_framed_glass" | "botania:terrasteel_chestplate" | "create:cut_deepslate_wall_from_stone_types_deepslate_stonecutting" | "create:crafting/kinetics/steam_engine" | "create:crushing/raw_zinc" | "create:cutting/compat/byg/stripped_ebony_log" | "ae2:shaped/walls/quartz_block" | "minecraft:barrel" | "create:calcite_pillar_from_calcite_stonecutting" | "minecraft:polished_blackstone_slab_from_blackstone_stonecutting" | "create:cut_calcite_brick_stairs_from_stone_types_calcite_stonecutting" | "create:tuff_pillar_from_stone_types_tuff_stonecutting" | "create:cutting/dark_oak_log" | "ae2:network/blocks/energy_energy_acceptor_alt" | "create:cutting/compat/byg/stripped_redwood_log" | "create:compat/silentsgems/crushing/peridot_ore" | "create:cutting/compat/ecologics/stripped_azalea_wood" | "botania:dodge_ring" | "ae2:materials/basiccard" | "botania:laputa_shard" | "create:compat/atmospheric/cutting/yucca_log" | "minecraft:dark_prismarine_slab_from_dark_prismarine_stonecutting" | "create:cutting/compat/twilightforest/stripped_time_log" | "create:small_limestone_brick_slab_from_limestone_stonecutting" | "botania:stonecutting/mana_quartz_to_mana_quartz_stairs" | "botania:metamorphic_desert_cobblestone_slab" | "create:cut_asurine_wall_from_stone_types_asurine_stonecutting" | "minecraft:deepslate_brick_slab_from_polished_deepslate_stonecutting" | "botania:mana_infusion/acacia_sapling_to_dark_oak_sapling" | "botania:stonecutting/azulejo_13" | "create:oxidized_copper_shingle_stairs" | "botania:stonecutting/azulejo_12" | "botania:stonecutting/azulejo_11" | "botania:stonecutting/azulejo_10" | "create:crafting/kinetics/speedometerfrom_conversion" | "botania:cyan_petal_block" | "create:cutting/compat/tconstruct/stripped_skyroot_wood" | "botania:slab_recombine/livingrock_bricks" | "ae2:network/cables/glass_fluix" | "botania:cosmetic_witch_pin" | "minecraft:end_stone_brick_slab" | "minecraft:smithing_table" | "minecraft:deepslate_tile_slab_from_polished_deepslate_stonecutting" | "ae2:decorative/sky_stone_smooth" | "botania:mana_infusion/acacia_leaves_dupe" | "botania:petal_magenta_double" | "minecraft:cauldron" | "minecraft:pink_concrete_powder" | "create:cutting/compat/byg/stripped_blue_enchanted_wood" | "botania:glimmering_livingwood_from_log" | "botania:stonecutting/livingrock_bricks_to_chiseled_livingrock_bricks" | "botania:floating_orechid_ignem" | "botania:orechid/deepslate_diamond_ore" | "botania:pure_daisy/blue_ice" | "create:layered_scorchia_from_stone_types_scorchia_stonecutting" | "create:cut_dripstone_bricks_from_dripstone_block_stonecutting" | "ae2:tools/nether_quartz_cutting_knife" | "create:cutting/compat/biomesoplenty/stripped_jacaranda_wood" | "create:polished_cut_calcite_slab" | "create:cut_diorite_brick_slab_from_diorite_stonecutting" | "minecraft:diamond_shovel" | "minecraft:waxed_weathered_cut_copper_slab_from_honeycomb" | "ae2:block_cutter/walls/smooth_sky_stone_wall" | "create:compat/bop/milling/lavender" | "ae2:network/cables/dense_covered_magenta" | "botania:petal_white_double" | "minecraft:andesite_wall" | "minecraft:cobblestone_slab" | "create:oxidized_copper_shingle_stairs_from_oxidized_copper_shingles_stonecutting" | "create:cutting/compat/byg/cypress_log" | "create:polished_cut_calcite_slab_from_calcite_stonecutting" | "botania:stonecutting/azulejo_15" | "minecraft:gold_ingot_from_smelting_gold_ore" | "botania:stonecutting/azulejo_14" | "botania:chiseled_red_quartz" | "create:crushing/platinum_ore" | "minecraft:popped_chorus_fruit" | "create:cutting/compat/byg/stripped_nightshade_wood" | "botania:mana_infusion/soul_sand_dupe" | "botania:lavender_quartz" | "create:cut_asurine_brick_slab_from_stone_types_asurine_stonecutting" | "minecraft:minecart" | "create:compat/atmospheric/cutting/kousa_log" | "botania:mana_infusion/birch_leaves_dupe" | "ae2:matter_cannon/matter_ball" | "create:compat/silentsgems/crushing/black_diamond_ore" | "create:deploying/waxed_oxidized_copper_shingles_from_adding_wax" | "minecraft:chest" | "create:compat/silentsgems/crushing/cats_eye_ore" | "minecraft:gray_stained_glass" | "create:compat/bop/milling/glowflower" | "botania:metamorphic_fungal_cobblestone_stairs" | "create:cutting/compat/byg/bulbis_stem" | "create:cutting/compat/botania/glimmering_dreamwood_log" | "botania:dreamwood_fence_gate" | "minecraft:creeper_banner_pattern" | "create:cut_limestone_bricks_from_limestone_stonecutting" | "create:weathered_copper_tile_stairs" | "minecraft:red_bed" | "create:cutting/compat/twilightforest/stripped_mining_wood" | "minecraft:golden_shovel" | "botania:petal_apothecary/labellia" | "botania:conversions/cyan_petal_block_deconstruct" | "create:crafting/kinetics/smart_fluid_pipe" | "create:cutting/compat/quark/stripped_blossom_wood" | "ae2:blasting/silicon_from_certus_quartz_dust" | "ae2:network/cells/item_storage_cell_4k" | "ae2:tools/paintballs_lumen_light_gray" | "create:cut_crimsite_stairs_from_crimsite_stonecutting" | "minecraft:deepslate_bricks_from_cobbled_deepslate_stonecutting" | "create:compat/silentsgems/crushing/carnelian_ore" | "create:polished_cut_deepslate_from_deepslate_stonecutting" | "create:polished_cut_veridium_from_stone_types_veridium_stonecutting" | "botania:manasteel_pick" | "create:compacting/granite_from_flint" | "minecraft:brick_wall_from_bricks_stonecutting" | "create:compat/thermal/crushing/sulfur_ore" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_bricks_wall" | "create:cutting/compat/byg/bulbis_wood" | "create:milling/dripstone_block" | "ae2:network/wireless_part" | "ae2:materials/cardspeed" | "create:cutting/compat/byg/maple_log" | "botania:mana_infusion/oak_sapling_to_spruce_sapling" | "botania:apothecary_mountain" | "minecraft:brown_glazed_terracotta" | "botania:slab_recombine/black_pavement" | "create:cut_crimsite_slab_from_crimsite_stonecutting" | "minecraft:end_stone_brick_slab_from_end_stone_stonecutting" | "botania:holy_cloak" | "minecraft:orange_carpet_from_white_carpet" | "create:cut_asurine_stairs_from_stone_types_asurine_stonecutting" | "create:splashing/thermal/crushed_silver_ore" | "create:cut_scoria_wall" | "create:cutting/stripped_birch_log" | "minecraft:warped_trapdoor" | "create:compat/projectvibrantjourneys/cutting/stripped_pine_log" | "ae2:network/parts/annihilation_plane_alt2" | "create:compat/quark/splashing/iron_plate_rusting" | "minecraft:iron_boots" | "create:crafting/kinetics/fluid_pipe_vertical" | "ae2:network/cells/spatial_components" | "botania:white_pavement_slab" | "minecraft:diamond_chestplate" | "minecraft:golden_chestplate" | "create:crafting/kinetics/lime_valve_handle_from_other_valve_handle" | "botania:mana_infusion/pumpkin_seeds_to_cocoa_beans" | "botania:spark_upgrade_recessive" | "minecraft:copper_ingot_from_smelting_raw_copper" | "create:crafting/kinetics/mechanical_arm" | "create:cutting/compat/byg/fir_wood" | "ae2:network/cells/spatial_storage_cell_16_cubed_storage" | "create:cut_limestone_slab_from_limestone_stonecutting" | "create:splashing/thermal/crushed_tin_ore" | "create:cutting/compat/byg/lament_log" | "minecraft:netherite_ingot" | "botania:livingrock_bricks_stairs" | "minecraft:birch_sign" | "botania:dye_lime" | "minecraft:magenta_bed_from_white_bed" | "create:cut_diorite_bricks_from_stone_types_diorite_stonecutting" | "create:cutting/compat/byg/stripped_cherry_log" | "create:pressing/path" | "ae2:tools/paintballs_light_gray" | "ae2:network/cells/item_storage_cell_1k" | "create:cut_asurine_slab_from_stone_types_asurine_stonecutting" | "create:polished_cut_diorite_stairs" | "ae2:tools/nether_quartz_hoe" | "ae2:materials/cardcapacity" | "botania:spark_upgrade_isolated" | "minecraft:light_blue_terracotta" | "create:crafting/copper/waxed_exposed_copper_tile_stairs_from_honeycomb" | "minecraft:orange_dye_from_red_yellow" | "create:cutting/compat/botania/glimmering_livingwood_log" | "create:polished_cut_ochrum_stairs_from_ochrum_stonecutting" | "minecraft:spruce_stairs" | "botania:chiseled_metamorphic_plains_bricks" | "botania:red_pavement_stairs" | "botania:floating_hopperhock" | "create:layered_scoria_from_scoria_stonecutting" | "create:small_veridium_brick_stairs_from_veridium_stonecutting" | "create:cut_diorite_stairs" | "minecraft:jungle_sign" | "minecraft:cyan_candle" | "botania:elven_trade/dragonstone" | "ae2:tools/portable_item_cell_16k" | "create:deploying/waxed_cut_copper_from_adding_wax" | "botania:mossy_livingwood_planks_vine" | "create:polished_cut_veridium_slab_from_veridium_stonecutting" | "botania:conversions/light_blue_petal_block_deconstruct" | "create:crushing/deepslate_lapis_ore" | "botania:stonecutting/black_pavement_to_black_pavement_slab" | "botania:stonecutting/mossy_livingrock_bricks_to_mossy_livingrock_bricks_slab" | "create:cut_andesite_wall_from_andesite_stonecutting" | "create:cutting/compat/ecologics/azalea_wood" | "botania:runic_altar/autumn" | "minecraft:light_gray_dye_from_azure_bluet" | "botania:mana_infusion/mana_quartz_deconstruct" | "minecraft:light_gray_dye_from_white_tulip" | "botania:metamorphic_forest_cobblestone_wall" | "ae2:network/parts/formation_plane" | "botania:cosmetic_cat_ears" | "create:cutting/compat/blue_skies/bluebright_log" | "create:splashing/immersiveengineering/crushed_nickel_ore" | "create:compat/buzzier_bees/milling/pink_clover" | "create:crafting/kinetics/whisk" | "create:small_scoria_brick_slab" | "create:crafting/kinetics/mechanical_drill" | "create:cut_asurine_slab" | "create:cutting/compat/quark/azalea_log" | "create:polished_cut_scoria_wall" | "create:cut_dripstone_wall_from_stone_types_dripstone_stonecutting" | "minecraft:magenta_candle" | "create:cut_dripstone_brick_slab_from_dripstone_block_stonecutting" | "create:cut_tuff_bricks_from_tuff_stonecutting" | "create:small_calcite_brick_stairs_from_stone_types_calcite_stonecutting" | "create:crafting/kinetics/weighted_ejector" | "create:cutting/compat/twilightforest/twilight_oak_log" | "create:crushing/raw_uranium_ore" | "botania:petal_apothecary/spectranthemum" | "minecraft:light_gray_dye_from_black_white_dye" | "create:polished_cut_ochrum_wall" | "botania:brew/healing" | "minecraft:tnt_minecart" | "minecraft:acacia_planks" | "botania:mana_infusion/ice" | "minecraft:slime_block" | "create:item_application/copper_casing_from_wood" | "create:cutting/compat/byg/stripped_redwood_wood" | "botania:metamorphic_taiga_cobblestone_wall" | "botania:stonecutting/metamorphic_desert_bricks_to_metamorphic_desert_bricks_slab" | "create:splashing/stained_glass" | "create:cut_calcite_from_stone_types_calcite_stonecutting" | "minecraft:cooked_rabbit_from_campfire_cooking" | "create:cutting/compat/biomesoplenty/umbran_log" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_bricks_stairs" | "create:compat/projectvibrantjourneys/cutting/stripped_aspen_log" | "minecraft:brown_terracotta" | "botania:petal_apothecary/tangleberrie" | "create:polished_cut_limestone_stairs_from_stone_types_limestone_stonecutting" | "minecraft:blue_wool" | "botania:elf_quartz_pillar" | "minecraft:note_block" | "botania:dye_blue" | "create:smelting/scoria" | "create:small_dripstone_brick_stairs_from_dripstone_block_stonecutting" | "create:crushing/raw_nickel_block" | "create:crushing/prismarine_crystals" | "create:cut_granite_from_granite_stonecutting" | "create:polished_cut_scoria_stairs_from_stone_types_scoria_stonecutting" | "botania:stonecutting/metamorphic_mesa_bricks_to_metamorphic_mesa_bricks_stairs" | "create:layered_limestone_from_stone_types_limestone_stonecutting" | "botania:metamorphic_forest_stone_slab" | "create:small_limestone_brick_wall_from_stone_types_limestone_stonecutting" | "ae2:tools/nether_quartz_axe" | "create:compat/silentsgems/crushing/ruby_ore" | "minecraft:light_gray_carpet" | "ae2:block_cutter/slabs/quartz_pillar_slab" | "minecraft:weathered_cut_copper_slab_from_weathered_copper_stonecutting" | "minecraft:end_crystal" | "minecraft:magenta_stained_glass_pane_from_glass_pane" | "botania:orechid/deepslate_emerald_ore" | "minecraft:smooth_sandstone" | "create:splashing/green_concrete_powder" | "create:deploying/waxed_copper_tile_slab_from_adding_wax" | "minecraft:shulker_box" | "botania:chiseled_metamorphic_desert_bricks" | "create:cut_deepslate_wall_from_deepslate_stonecutting" | "botania:metamorphic_desert_bricks_slab" | "create:polished_cut_crimsite_wall_from_stone_types_crimsite_stonecutting" | "minecraft:diorite_wall" | "botania:pump" | "create:birch_window_pane" | "botania:dragonstone_block" | "ae2:network/cables/covered_blue" | "minecraft:white_carpet" | "minecraft:spruce_planks" | "minecraft:mossy_cobblestone_stairs_from_mossy_cobblestone_stonecutting" | "botania:marimorphosis/metamorphic_forest_stone" | "minecraft:polished_blackstone_bricks" | "minecraft:mossy_cobblestone_from_moss_block" | "minecraft:cracked_stone_bricks" | "create:blasting/nickel_ingot_compat_thermal" | "botania:floating_shulk_me_not" | "botania:unholy_cloak" | "create:small_granite_brick_stairs" | "ae2:network/parts/tunnels_me" | "create:scoria_pillar_from_scoria_stonecutting" | "minecraft:lantern" | "minecraft:waxed_cut_copper_slab_from_waxed_copper_block_stonecutting" | "botania:elven_trade/dragonstone_block" | "create:polished_cut_scorchia_wall_from_stone_types_scorchia_stonecutting" | "botania:metamorphic_taiga_bricks_stairs" | "ae2:network/cells/fluid_storage_cell_4k" | "minecraft:ender_chest" | "minecraft:magenta_stained_glass" | "create:cutting/compat/byg/willow_wood" | "itemfilters:item_group" | "minecraft:iron_trapdoor" | "minecraft:brown_candle" | "minecraft:deepslate_brick_wall" | "ae2:network/cables/dense_covered_yellow" | "create:crafting/kinetics/shaft" | "botania:mana_infusion/hopperhock_chibi" | "create:small_ochrum_brick_stairs_from_stone_types_ochrum_stonecutting" | "create:item_application/andesite_casing_from_log" | "botania:ender_dagger" | "ae2:network/blocks/storage_drive" | "ae2:tools/network_biometric_card" | "create:compat/silentsgems/crushing/moldavite_ore" | "botania:stonecutting/corporea_block_to_corporea_slab" | "create:crafting/kinetics/track_observer" | "minecraft:acacia_pressure_plate" | "create:cutting/compat/blue_skies/stripped_maple_wood" | "minecraft:lime_bed" | "create:cutting/compat/byg/stripped_maple_wood" | "create:cutting/compat/silentgear/stripped_netherwood_log" | "botania:knockback_belt" | "ae2:tools/network_memory_card_pink" | "botania:metamorphic_taiga_stone_slab" | "botania:elf_quartz_slab" | "create:crafting/materials/brass_block_from_compacting" | "minecraft:deepslate_brick_stairs_from_deepslate_bricks_stonecutting" | "create:blasting/zinc_ingot_from_ore" | "create:haunting/soul_soil" | "botania:shimmerrock_slab" | "botania:conversions/blazeblock_deconstruct" | "minecraft:lime_carpet_from_white_carpet" | "create:filling/compat/farmersdelight/milk_bottle" | "minecraft:lime_wool" | "minecraft:light_gray_wool" | "botania:stonecutting/metamorphic_plains_bricks_to_metamorphic_plains_bricks_slab" | "create:cut_asurine_brick_stairs" | "botania:marimorphosis/metamorphic_mesa_stone" | "create:cut_granite_from_stone_types_granite_stonecutting" | "minecraft:firework_rocket" | "create:cutting/warped_stem" | "create:polished_cut_tuff_slab_from_stone_types_tuff_stonecutting" | "minecraft:polished_andesite_slab_from_polished_andesite_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_mahogany_wood" | "botania:skydirt_rod" | "ae2:network/cables/glass_purple" | "ae2:network/cables/covered_lime" | "create:crafting/kinetics/steam_whistle" | "create:crafting/kinetics/gearshift" | "create:compat/betterendforge/pressing/pink_moss_path" | "create:compat/botania/milling/light_gray_petal" | "create:milling/tall_grass" | "ae2:network/parts/toggle_bus_inverted_alt" | "botania:metamorphic_mesa_cobblestone_stairs" | "botania:floating_exoflame" | "botania:cosmetic_red_glasses" | "minecraft:light_gray_dye_from_gray_white_dye" | "botania:pattern_framed_dreamwood" | "create:crushing/crimsite" | "create:crushing/tuff_recycling" | "create:polished_cut_scorchia_slab_recycling" | "ae2:network/cables/dense_covered_light_gray" | "botania:metamorphic_mesa_stone_wall" | "minecraft:magenta_dye_from_purple_and_pink" | "botania:mana_infusion/dark_oak_sapling_to_oak_sapling" | "minecraft:purpur_pillar" | "create:cutting/compat/ars_nouveau/green_archwood_log" | "create:cut_andesite_stairs_from_andesite_stonecutting" | "botania:mana_infusion/mycel_seeds" | "minecraft:stripped_birch_wood" | "botania:drum_wild" | "botania:mana_infusion/pufferfish_to_cod" | "create:polished_cut_calcite_wall_from_calcite_stonecutting" | "create:deploying/waxed_oxidized_copper_from_adding_wax" | "botania:petal_apothecary/nightshade_motif" | "minecraft:lime_banner" | "create:compat/druidcraft/crushing/amber_ore" | "create:cutting/compat/byg/mangrove_wood" | "itemfilters:mod" | "botania:pattern_framed_livingwood" | "minecraft:redstone_lamp" | "minecraft:deepslate_brick_wall_from_cobbled_deepslate_stonecutting" | "botania:mana_infusion/fern_to_dead_bush" | "create:compat/atmospheric/cutting/stripped_rosewood_log" | "botania:blue_shiny_flower" | "minecraft:end_rod" | "ae2:misc/meteors_sky_compass" | "create:polished_cut_andesite_wall" | "minecraft:cut_copper_from_copper_block_stonecutting" | "create:smelting/ingot_uranium_compat_immersiveengineering" | "minecraft:iron_ingot_from_blasting_iron_ore" | "minecraft:polished_andesite_stairs_from_polished_andesite_stonecutting" | "create:cutting/compat/biomesoplenty/fir_log" | "create:cutting/compat/biomesoplenty/stripped_hellbark_log" | "ae2:tools/certus_quartz_axe" | "create:polished_cut_andesite_slab_from_stone_types_andesite_stonecutting" | "create:polished_cut_veridium_wall_from_stone_types_veridium_stonecutting" | "create:cut_ochrum_bricks_from_ochrum_stonecutting" | "create:cut_scoria_from_stone_types_scoria_stonecutting" | "botania:blue_pavement_slab" | "botania:shimmerwood_planks_stairs" | "create:polished_cut_asurine_wall" | "create:polished_cut_veridium_slab_recycling" | "botania:floating_agricarnation_chibi" | "botania:black_hole_talisman" | "create:cutting/compat/ecologics/azalea_log" | "ae2:inscriber/sky_stone_dust" | "botania:spark_upgrade_dominant" | "botania:lens_gravity" | "ae2:tools/fluix_axe" | "minecraft:acacia_boat" | "botania:metamorphic_mountain_stone_slab" | "botania:stonecutting/metamorphic_taiga_cobblestone_to_metamorphic_taiga_cobblestone_stairs" | "create:crafting/schematics/schematic_and_quill" | "create:milling/bone" | "create:scoria_pillar_from_stone_types_scoria_stonecutting" | "botania:auto_crafting_halo" | "create:polished_cut_dripstone_stairs" | "create:compat/botania/milling/orange_petal" | "botania:diluted_pool" | "create:small_ochrum_brick_stairs" | "botania:stripped_livingwood_wall" | "minecraft:crimson_sign" | "create:cut_veridium_bricks_from_veridium_stonecutting" | "create:crafting/copper/waxed_copper_shingles_from_honeycomb" | "minecraft:painting" | "minecraft:stone_brick_slab" | "botania:avatar" | "create:cutting/compat/byg/palo_verde_wood" | "botania:runic_altar/air" | "ae2:tools/paintballs_lumen_blue" | "minecraft:polished_blackstone_pressure_plate" | "create:cutting/compat/ecologics/stripped_walnut_wood" | "create:small_andesite_brick_stairs" | "minecraft:dark_oak_wood" | "ae2:network/cables/glass_lime" | "botania:stonecutting/sunny_quartz_to_chiseled_sunny_quartz" | "create:crafting/kinetics/blue_seat_from_other_seat" | "create:small_ochrum_brick_slab_recycling" | "minecraft:stone_slab_from_stone_stonecutting" | "botania:brew/emptiness" | "botania:stonecutting/azulejo_6" | "botania:stonecutting/azulejo_5" | "botania:stonecutting/azulejo_8" | "botania:stonecutting/azulejo_7" | "botania:stonecutting/azulejo_9" | "botania:petal_apothecary/exoflame" | "minecraft:gray_glazed_terracotta" | "create:compat/projectvibrantjourneys/cutting/willow_log" | "minecraft:stone_brick_slab_from_stone_stonecutting" | "create:cut_calcite_wall" | "create:cutting/compat/biomesoplenty/stripped_cherry_wood" | "create:splashing/crushed_iron_ore" | "create:cut_granite_bricks_from_granite_stonecutting" | "ae2:network/crafting/64k_cpu_crafting_storage" | "minecraft:gold_ingot_from_nuggets" | "botania:stonecutting/azulejo_0" | "create:deploying/waxed_weathered_copper_shingle_stairs_from_adding_wax" | "botania:stonecutting/azulejo_2" | "botania:stonecutting/azulejo_1" | "create:cut_andesite_brick_wall_from_andesite_stonecutting" | "botania:stonecutting/azulejo_4" | "botania:stonecutting/azulejo_3" | "botania:floating_jiyuulia" | "create:splashing/mekanism/crushed_lead_ore" | "create:cutting/compat/byg/redwood_wood" | "minecraft:oak_trapdoor" | "create:cutting/compat/architects_palette/stripped_twisted_log" | "ae2:matter_cannon/nuggets/boron" | "botania:mana_infusion/gunpowder_to_flint" | "create:crafting/kinetics/pink_seat_from_other_seat" | "ae2:matter_cannon/nuggets/chicken" | "botania:dreamwood" | "minecraft:netherite_leggings_smithing" | "create:crimson_window_pane" | "create:cutting/compat/byg/imparius_stem" | "minecraft:waxed_cut_copper_slab_from_honeycomb" | "create:crafting/kinetics/placard" | "minecraft:birch_button" | "create:cutting/birch_log" | "create:polished_cut_granite_from_granite_stonecutting" | "create:crafting/kinetics/sticky_mechanical_piston" | "create:polished_cut_andesite_from_andesite_stonecutting" | "minecraft:stone_brick_stairs_from_stone_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_mahogany_log" | "botania:stonecutting/livingrock_bricks_to_livingrock_bricks_stairs" | "botania:dye_white" | "ae2:network/cables/dense_smart_brown" | "botania:conversions/red_petal_block_deconstruct" | "create:compat/druidcraft/milling/lavender" | "create:crushing/diamond_horse_armor" | "botania:pink_floating_flower" | "botania:stonecutting/livingrock_to_livingrock_bricks_stairs" | "create:cut_dripstone_bricks_from_stone_types_dripstone_stonecutting" | "botania:petal_pink" | "minecraft:weathered_cut_copper_stairs_from_weathered_copper_stonecutting" | "create:cut_scorchia_bricks_from_scorchia_stonecutting" | "minecraft:honey_bottle" | "botania:mana_infusion/azure_bluet_to_red_tulip" | "minecraft:cyan_bed" | "create:cutting/compat/twilightforest/mangrove_log" | "ae2:matter_cannon/nuggets/silicon" | "botania:petal_apothecary/orechid" | "botania:flare_chakram" | "minecraft:raw_copper_block" | "minecraft:polished_diorite_from_diorite_stonecutting" | "create:crafting/kinetics/white_valve_handle_from_other_valve_handle" | "create:crafting/kinetics/light_blue_seat_from_other_seat" | "ae2:tools/portable_item_cell_1k" | "create:crafting/kinetics/crafter_slot_cover" | "create:crafting/kinetics/gantry_shaft" | "ae2:tools/paintballs_lumen_lime" | "ae2:matter_cannon/nuggets/gallium" | "create:splashing/magma_block" | "create:crafting/materials/brass_ingot_from_decompacting" | "botania:stonecutting/metamorphic_swamp_stone_to_chiseled_metamorphic_swamp_bricks" | "ae2:network/cables/glass_blue" | "create:haunting/infested_deepslate" | "minecraft:lapis_lazuli" | "ae2:tools/portable_item_cell_4k" | "create:cut_calcite_bricks_from_calcite_stonecutting" | "ae2:matter_cannon/nuggets/magnesium" | "create:compat/simplefarming/crushing/sf_crush_rye" | "create:compat/silentsgems/crushing/tektite_ore" | "create:small_limestone_brick_slab_recycling" | "create:cut_deepslate_bricks_from_deepslate_stonecutting" | "minecraft:orange_stained_glass_pane" | "create:cut_asurine_stairs_from_asurine_stonecutting" | "minecraft:quartz_block" | "minecraft:brick" | "botania:glimmering_dreamwood_log" | "create:cut_limestone_brick_stairs_from_stone_types_limestone_stonecutting" | "create:cutting/compat/ars_nouveau/purple_archwood_log" | "botania:water_ring" | "create:compat/bop/milling/blue_hydrangea" | "botania:corporea_spark_master" | "create:polished_cut_scoria_slab_from_scoria_stonecutting" | "ae2:network/cells/fluid_storage_cell_1k" | "minecraft:coal" | "minecraft:gold_ingot_from_blasting_deepslate_gold_ore" | "botania:sunny_quartz_slab" | "botania:mana_infusion/beetroot_seeds_to_melon_seeds" | "botania:smelting/metamorphic_taiga_stone" | "create:cut_andesite_stairs" | "create:cutting/crimson_stem" | "botania:dynamic/keep_ivy" | "create:deploying/waxed_oxidized_copper_tiles_from_adding_wax" | "botania:dye_gray" | "create:cutting/compat/byg/stripped_cypress_log" | "create:cut_asurine_bricks_from_asurine_stonecutting" | "create:cut_calcite_stairs_from_calcite_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_fir_wood" | "create:cutting/compat/byg/baobab_wood" | "create:filling/blaze_cake" | "minecraft:light_gray_carpet_from_white_carpet" | "ae2:matter_cannon/nuggets/cesium" | "create:compat/betterendforge/pressing/chorus_nylium_path" | "create:cut_asurine_brick_stairs_from_asurine_stonecutting" | "create:cut_scorchia_from_scorchia_stonecutting" | "minecraft:smoker" | "botania:brew/invisibility" | "create:compat/silentsgems/crushing/malachite_ore" | "ae2:inscriber/silicon_print" | "create:cutting/compat/byg/baobab_log" | "botania:forest_eye" | "botania:lens_piston" | "create:polished_cut_scorchia_wall" | "botania:chiseled_dark_quartz" | "botania:mana_infusion/carrot_to_beetroot_seeds" | "create:deploying/waxed_weathered_copper_tile_slab_from_adding_wax" | "create:cut_veridium_stairs" | "create:crafting/kinetics/smart_chute" | "create:cutting/compat/ecologics/walnut_wood" | "minecraft:brown_dye" | "create:compat/upgrade_aquatic/milling/white_searocket" | "create:cut_veridium_brick_wall_from_veridium_stonecutting" | "minecraft:polished_blackstone_stairs_from_blackstone_stonecutting" | "minecraft:waxed_exposed_cut_copper_stairs_from_honeycomb" | "minecraft:brick_slab" | "create:cut_asurine_brick_slab_from_asurine_stonecutting" | "create:deploying/waxed_exposed_copper_shingle_stairs_from_adding_wax" | "botania:mana_infusion/mana_diamond_block" | "minecraft:bricks" | "minecraft:red_sandstone_slab" | "botania:yellow_pavement_stairs" | "botania:orechid/redstone_ore" | "botania:fel_pumpkin" | "botania:floating_bellethorn_chibi" | "ae2:matter_cannon/nuggets/invar" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_bricks" | "minecraft:yellow_glazed_terracotta" | "ae2:network/cells/fluid_storage_cell_64k_storage" | "ae2:misc/tank_sky_stone" | "minecraft:deepslate_tile_wall" | "create:polished_cut_diorite_stairs_from_stone_types_diorite_stonecutting" | "ae2:network/cables/network_memory_card_clean" | "minecraft:polished_deepslate_stairs" | "create:cut_scorchia_slab" | "create:small_deepslate_brick_wall_from_deepslate_stonecutting" | "minecraft:exposed_cut_copper" | "botania:mana_infusion/cobble_to_sand" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_stone_stairs" | "minecraft:waxed_exposed_cut_copper_slab_from_honeycomb" | "create:small_limestone_bricks_from_limestone_stonecutting" | "ae2:network/cells/fluid_storage_cell_16k" | "create:cutting/compat/ars_nouveau/purple_archwood_wood" | "botania:mana_infusion/hydroangeas_motif" | "minecraft:dark_oak_stairs" | "minecraft:jungle_pressure_plate" | "create:crafting/kinetics/orange_seat_from_other_seat" | "minecraft:white_candle" | "minecraft:polished_blackstone_brick_wall_from_polished_blackstone_bricks_stonecutting" | "botania:stonecutting/metamorphic_forest_cobblestone_to_metamorphic_forest_cobblestone_stairs" | "create:compat/ae2/milling/nether_quartz" | "create:cutting/compat/byg/aspen_wood" | "botania:dynamic/black_hole_talisman_extract" | "create:cut_veridium_brick_slab_recycling" | "botania:mushroom_11" | "botania:mushroom_10" | "ae2:network/crafting/1k_cpu_crafting_storage" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_bricks" | "minecraft:smooth_red_sandstone_stairs_from_smooth_red_sandstone_stonecutting" | "ae2:tools/paintballs_lumen_cyan" | "create:crushing/gold_ore" | "minecraft:cobbled_deepslate_wall_from_cobbled_deepslate_stonecutting" | "botania:mushroom_15" | "botania:mushroom_14" | "botania:mushroom_13" | "create:small_asurine_brick_stairs" | "botania:mushroom_12" | "ae2:network/cables/smart_pink" | "create:small_granite_brick_stairs_from_granite_stonecutting" | "create:smelting/zinc_ingot_from_ore" | "create:crafting/kinetics/mechanical_bearing" | "minecraft:golden_carrot" | "botania:pure_daisy/sand" | "minecraft:blue_banner" | "botania:fertilizer_dye" | "ae2:network/cells/fluid_cell_housing" | "botania:stonecutting/metamorphic_plains_bricks_to_metamorphic_plains_bricks_stairs" | "create:compat/atmospheric/cutting/grimwood_log" | "ae2:network/cables/dense_smart_yellow" | "create:polished_cut_limestone_wall_from_stone_types_limestone_stonecutting" | "minecraft:prismarine_wall" | "botania:petal_light_blue" | "botania:mana_infusion/potato_to_carrot" | "botania:stonecutting/red_pavement_to_red_pavement_stairs" | "create:small_scorchia_brick_slab_from_scorchia_stonecutting" | "create:crushing/leather_horse_armor" | "minecraft:glowstone" | "create:copper_tile_slab" | "create:crushing/nether_quartz_ore" | "botania:lens_speed" | "create:cut_deepslate_brick_stairs" | "botania:petal_apothecary/jiyuulia" | "create:cutting/compat/biomesoplenty/stripped_dead_wood" | "minecraft:red_nether_brick_wall" | "create:small_crimsite_brick_stairs" | "minecraft:chiseled_red_sandstone" | "botania:blue_floating_flower" | "botania:cloud_pendant" | "create:cutting/compat/twilightforest/stripped_time_wood" | "create:small_andesite_bricks_from_andesite_stonecutting" | "minecraft:magma_cream" | "botania:slime_bottle" | "botania:metamorphic_fungal_stone_slab" | "botania:slab_recombine/metamorphic_taiga_cobblestone" | "create:crafting/kinetics/attribute_filter" | "botania:azulejo_11" | "create:compat/projectvibrantjourneys/cutting/stripped_fir_log" | "botania:azulejo_10" | "botania:azulejo_13" | "create:filling/gunpowder" | "botania:azulejo_12" | "botania:azulejo_15" | "botania:dirt_rod" | "botania:azulejo_14" | "minecraft:blackstone_wall" | "create:cutting/compat/biomesoplenty/mahogany_wood" | "create:cutting/compat/blue_skies/frostbright_log" | "ae2:block_cutter/walls/sky_stone_wall" | "create:polished_cut_dripstone_stairs_from_stone_types_dripstone_stonecutting" | "botania:gaia_ingot" | "ae2:network/blocks/io_port" | "botania:lens_fire" | "botania:mana_infusion/melon_seeds_to_pumpkin_seeds" | "botania:marimorphosis/metamorphic_swamp_stone" | "minecraft:light_gray_candle" | "botania:metamorphic_mesa_bricks_slab" | "minecraft:cobbled_deepslate_stairs_from_cobbled_deepslate_stonecutting" | "create:crafting/kinetics/belt_connector" | "botania:petal_black_double" | "ae2:network/blocks/pattern_providers_interface_alt" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_bricks" | "minecraft:dried_kelp_from_smelting" | "ae2:misc/deconstruction_certus_quartz_block" | "botania:orechid/deepslate_copper_ore" | "create:crushing/deepslate_gold_ore" | "botania:red_quartz_stairs" | "create:compat/quark/crushing/moss_block" | "create:compat/silentsgems/crushing/spinel_ore" | "create:crafting/kinetics/purple_seat" | "ae2:inscriber/logic_processor" | "botania:mana_pylon" | "ae2:decorative/chiseled_quartz_block" | "create:cutting/compat/blue_skies/stripped_dusk_log" | "minecraft:deepslate_tile_stairs_from_cobbled_deepslate_stonecutting" | "minecraft:red_carpet_from_white_carpet" | "botania:bellows" | "create:crafting/materials/brass_ingot_from_compacting" | "botania:runic_altar/fire" | "minecraft:sea_lantern" | "botania:brew/clear" | "create:cut_calcite_brick_wall_from_calcite_stonecutting" | "create:weathered_copper_tile_slab" | "minecraft:exposed_cut_copper_stairs" | "create:polished_cut_granite_slab_from_granite_stonecutting" | "create:crafting/copper/waxed_exposed_copper_shingle_stairs_from_honeycomb" | "create:layered_deepslate_from_deepslate_stonecutting" | "create:polished_cut_calcite_stairs_from_stone_types_calcite_stonecutting" | "botania:slab_recombine/metamorphic_taiga_stone" | "botania:mana_infusion/bubbell_chibi" | "create:milling/sandstone" | "create:crushing/raw_silver_ore" | "minecraft:diamond_hoe" | "minecraft:jungle_boat" | "create:compat/silentsgems/crushing/tanzanite_ore" | "minecraft:light_weighted_pressure_plate" | "ae2:tools/paintballs_green" | "create:polished_cut_deepslate_from_stone_types_deepslate_stonecutting" | "minecraft:weathered_cut_copper" | "create:cutting/compat/tconstruct/stripped_bloodshroom_wood" | "create:cut_crimsite_stairs_from_stone_types_crimsite_stonecutting" | "create:cutting/compat/silentgear/netherwood_log" | "create:cutting/compat/biomesoplenty/palm_log" | "botania:floating_thermalily" | "ae2:matter_cannon/nuggets/platinum" | "create:polished_cut_limestone_stairs" | "minecraft:black_stained_glass_pane_from_glass_pane" | "minecraft:pink_banner" | "minecraft:blue_bed_from_white_bed" | "create:polished_cut_granite_stairs_from_stone_types_granite_stonecutting" | "create:cut_calcite_brick_slab_from_stone_types_calcite_stonecutting" | "create:deploying/waxed_exposed_copper_shingles_from_adding_wax" | "minecraft:copper_ingot_from_waxed_copper_block" | "minecraft:end_stone_brick_stairs_from_end_stone_brick_stonecutting" | "botania:apothecary_swamp" | "ae2:block_cutter/slabs/sky_stone_small_brick_slab" | "create:cutting/compat/hexcasting/akashic_wood" | "create:cut_deepslate_slab_recycling" | "minecraft:leather" | "create:polished_cut_ochrum_stairs" | "create:cutting/compat/twilightforest/canopy_log" | "botania:stonecutting/red_quartz_to_red_quartz_stairs" | "create:small_diorite_bricks_from_diorite_stonecutting" | "create:smelting/ingot_aluminum_compat_immersiveengineering" | "create:small_crimsite_bricks_from_crimsite_stonecutting" | "minecraft:waxed_cut_copper_stairs_from_honeycomb" | "create:cut_diorite_slab" | "create:splashing/ice" | "create:cut_diorite_brick_slab_recycling" | "botania:magnet_ring_greater" | "minecraft:acacia_trapdoor" | "botania:petal_apothecary/spectrolus" | "minecraft:stone_brick_wall_from_stone_bricks_stonecutting" | "botania:cosmetic_googly_eyes" | "minecraft:cut_copper_slab_from_cut_copper_stonecutting" | "create:cutting/compat/byg/stripped_witch_hazel_wood" | "create:crafting/kinetics/empty_blaze_burner" | "ae2:block_cutter/stairs/chiseled_quartz_stairs" | "minecraft:furnace" | "botania:smelting/metamorphic_mesa_stone" | "botania:slab_recombine/metamorphic_plains_cobblestone" | "botania:mana_infusion/red_quartz_deconstruct" | "botania:cosmetic_black_tie" | "minecraft:cracked_nether_bricks" | "create:crafting/kinetics/secondary_linear_chassisfrom_conversion" | "create:cut_crimsite_brick_wall_from_crimsite_stonecutting" | "minecraft:dark_prismarine_stairs_from_dark_prismarine_stonecutting" | "ae2:tools/matter_cannon" | "minecraft:purpur_pillar_from_purpur_block_stonecutting" | "ae2:network/blocks/quantum_link" | "ae2:network/parts/level_emitter" | "create:cut_andesite_stairs_from_stone_types_andesite_stonecutting" | "minecraft:activator_rail" | "botania:metamorphic_fungal_bricks_wall" | "create:crafting/kinetics/purple_valve_handle_from_other_valve_handle" | "ae2:network/cells/item_storage_components_cell_4k_part" | "minecraft:crimson_pressure_plate" | "create:splashing/crushed_copper_ore" | "create:small_calcite_bricks_from_stone_types_calcite_stonecutting" | "create:small_dripstone_bricks_from_dripstone_block_stonecutting" | "create:copper_shingle_stairs" | "create:compat/environmental/milling/bluebell" | "ae2:matter_cannon/nuggets/nickel" | "ae2:network/cables/glass_red" | "minecraft:copper_ingot_from_smelting_copper_ore" | "botania:mana_infusion/birch_sapling_to_jungle_sapling" | "ae2:matter_cannon/nuggets/sodium" | "create:veridium_pillar_from_stone_types_veridium_stonecutting" | "create:haunting/glow_berries" | "create:cutting/compat/byg/stripped_green_enchanted_log" | "botania:dynamic/cosmetic_attach" | "minecraft:red_sandstone" | "botania:terraform_rod" | "create:crafting/appliances/slime_ball" | "ae2:shaped/slabs/chiseled_quartz_block" | "create:small_granite_bricks_from_stone_types_granite_stonecutting" | "create:splashing/light_blue_concrete_powder" | "minecraft:iron_pickaxe" | "create:cutting/compat/botania/stripped_livingwood_log" | "minecraft:spruce_button" | "create:compat/environmental/milling/purple_delphinium" | "create:cut_andesite_from_stone_types_andesite_stonecutting" | "create:crafting/kinetics/white_sailfrom_conversion" | "ae2:network/cables/glass_orange" | "create:small_ochrum_bricks_from_ochrum_stonecutting" | "ae2:materials/cardinverter" | "botania:mossy_livingrock_bricks_slab" | "create:compat/atmospheric/milling/hot_monkey_brush" | "create:crafting/kinetics/cart_assembler" | "ae2:network/cells/fluid_storage_cell_256k_storage" | "botania:floating_bubbell" | "create:crushing/asurine" | "botania:conversions/manasteel_from_nuggets" | "minecraft:waxed_cut_copper_stairs_from_waxed_cut_copper_stonecutting" | "create:compat/thermal/crushing/niter_ore" | "minecraft:deepslate_tiles" | "minecraft:red_glazed_terracotta" | "create:cutting/compat/twilightforest/dark_wood" | "minecraft:birch_boat" | "botania:metamorphic_taiga_cobblestone_stairs" | "minecraft:polished_diorite_stairs" | "minecraft:nether_brick_stairs_from_nether_bricks_stonecutting" | "create:cutting/compat/byg/cypress_wood" | "create:cutting/oak_wood" | "minecraft:dark_oak_slab" | "minecraft:gray_carpet_from_white_carpet" | "create:cutting/compat/byg/stripped_willow_wood" | "botania:mana_infusion/agricarnation_chibi" | "create:cutting/compat/forbidden_arcanus/cherrywood" | "minecraft:pink_carpet_from_white_carpet" | "minecraft:lime_stained_glass" | "ae2:tools/paintballs_black" | "minecraft:netherite_helmet_smithing" | "create:crushing/raw_gold_block" | "create:layered_calcite_from_stone_types_calcite_stonecutting" | "create:cutting/compat/byg/stripped_cika_wood" | "minecraft:stone_brick_walls_from_stone_stonecutting" | "ae2:tools/nether_quartz_wrench" | "create:crafting/copper/waxed_exposed_copper_shingle_slab_from_honeycomb" | "create:crafting/kinetics/filter" | "create:cutting/compat/blue_skies/lunar_log" | "botania:petal_apothecary/hydroangeas" | "ae2:network/cables/covered_fluix_clean" | "create:small_scorchia_brick_stairs_from_scorchia_stonecutting" | "create:splashing/sand" | "botania:elementium_block" | "create:cutting/compat/blue_skies/lunar_wood" | "ae2:network/blocks/spatial_io_pylon" | "minecraft:yellow_dye_from_dandelion" | "botania:smelting/cracked_livingrock_bricks" | "create:small_calcite_brick_stairs_from_calcite_stonecutting" | "botania:cosmetic_anaglyph_glasses" | "create:cutting/compat/byg/green_enchanted_wood" | "botania:cobble_rod" | "minecraft:gray_candle" | "botania:aura_ring" | "minecraft:stripped_dark_oak_wood" | "botania:dreamwood_twig" | "create:mixing/lava_from_cobble" | "botania:floating_bergamute" | "create:splashing/wheat_flour" | "create:milling/red_tulip" | "create:asurine_pillar_from_stone_types_asurine_stonecutting" | "create:crafting/kinetics/item_drain" | "create:deepslate_pillar_from_stone_types_deepslate_stonecutting" | "create:small_veridium_bricks_from_veridium_stonecutting" | "create:crafting/materials/brass_nugget_from_decompacting" | "minecraft:birch_fence" | "botania:livingrock_stairs" | "create:cut_tuff_brick_wall" | "create:milling/coal" | "create:compat/bop/milling/goldenrod" | "botania:manaweave_boots" | "create:crafting/materials/zinc_ingot_from_compacting" | "minecraft:red_nether_brick_slab" | "create:crafting/appliances/crafting_blueprint" | "create:compat/botania/milling/gray_petal" | "botania:stonecutting/livingrock_to_livingrock_bricks_wall" | "botania:framed_livingwood" | "minecraft:cooked_salmon_from_campfire_cooking" | "botania:cosmetic_pink_flower_bud" | "create:crushing/veridium" | "ae2:tools/network_memory_card" | "botania:slab_recombine/metamorphic_mesa_bricks" | "create:cut_crimsite_brick_slab" | "ae2:network/cells/spatial_storage_cell_128_cubed" | "ae2:tools/paintballs_yellow" | "minecraft:polished_blackstone_brick_slab_from_blackstone_stonecutting" | "create:cut_ochrum_wall_from_stone_types_ochrum_stonecutting" | "minecraft:polished_blackstone_brick_wall_from_polished_blackstone_stonecutting" | "create:compat/silentsgems/crushing/alexandrite_ore" | "create:deploying/cogwheel" | "create:crafting/kinetics/green_valve_handle_from_other_valve_handle" | "create:cutting/compat/ars_nouveau/blue_archwood_log" | "create:horizontal_framed_glass_pane" | "minecraft:cut_sandstone_slab_from_cut_sandstone_stonecutting" | "botania:cosmetic_blue_butterfly" | "minecraft:sugar_from_honey_bottle" | "botania:mana_infusion/lily_of_the_valley_to_sunflower" | "botania:cosmetic_four_leaf_clover" | "botania:floating_gourmaryllis" | "botania:mana_infusion/cactus_to_slime" | "botania:dye_yellow" | "minecraft:black_wool" | "minecraft:spruce_fence_gate" | "botania:mana_infusion/gravel_dupe" | "minecraft:leather_chestplate" | "botania:petal_apothecary/daffomill" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_bricks_slab" | "minecraft:yellow_bed" | "botania:stonecutting/blaze_quartz_to_blaze_quartz_pillar" | "minecraft:beehive" | "minecraft:nether_brick_slab_from_nether_bricks_stonecutting" | "minecraft:white_stained_glass_pane_from_glass_pane" | "minecraft:waxed_cut_copper_slab_from_waxed_cut_copper_stonecutting" | "create:filling/grass_block" | "minecraft:cooked_salmon_from_smoking" | "botania:flask" | "minecraft:birch_wood" | "ae2:tools/network_memory_card_black" | "ae2:network/cables/dense_covered_fluix_clean" | "botania:slab_recombine/shimmerwood_planks" | "botania:metamorphic_taiga_bricks_slab" | "minecraft:scaffolding" | "create:small_calcite_brick_slab_from_calcite_stonecutting" | "minecraft:acacia_button" | "create:cutting/compat/blue_skies/crystallized_wood" | "botania:dreamwood_planks_stairs" | "minecraft:polished_granite_from_granite_stonecutting" | "create:polished_cut_dripstone_slab_recycling" | "create:crushing/glowstone" | "botania:stonecutting/corporea_brick_to_corporea_brick_wall" | "create:layered_crimsite_from_stone_types_crimsite_stonecutting" | "ae2:network/cables/covered_fluix" | "create:cut_dripstone_brick_slab_from_stone_types_dripstone_stonecutting" | "minecraft:purple_candle" | "botania:floating_bellethorn" | "create:small_asurine_brick_wall" | "create:cutting/compat/byg/stripped_ether_log" | "minecraft:lapis_lazuli_from_smelting_deepslate_lapis_ore" | "create:compat/silentsgems/crushing/benitoite_ore" | "create:mechanical_crafting/extendo_grip" | "botania:mana_infusion/mana_powder_dust" | "botania:slab_recombine/dreamwood_planks" | "minecraft:mossy_stone_brick_slab" | "botania:stonecutting/mossy_livingrock_bricks_to_mossy_livingrock_bricks_stairs" | "minecraft:andesite_slab" | "minecraft:polished_blackstone_wall_from_polished_blackstone_stonecutting" | "minecraft:honey_block" | "ae2:tools/nether_quartz_spade" | "create:cutting/compat/byg/stripped_holly_wood" | "botania:stonecutting/livingrock_to_chiseled_livingrock_bricks" | "create:cutting/compat/byg/jacaranda_wood" | "create:crafting/kinetics/large_cogwheel" | "create:crushing/raw_tin_block" | "ae2:network/cells/fluid_storage_cell_1k_storage" | "create:small_tuff_brick_slab" | "create:crafting/kinetics/metal_bracket" | "botania:white_petal_block" | "minecraft:cobblestone_stairs" | "botania:stonecutting/metamorphic_mesa_bricks_to_metamorphic_mesa_bricks_slab" | "ae2:matter_cannon/nuggets/lead" | "create:cut_dripstone_slab_from_stone_types_dripstone_stonecutting" | "create:cutting/stripped_oak_log" | "minecraft:stone_brick_stairs_from_stone_bricks_stonecutting" | "create:cutting/compat/byg/ether_log" | "create:cut_scorchia_brick_wall" | "botania:mana_quartz_pillar" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_stone_wall" | "botania:invisibility_cloak" | "create:crafting/curiosities/toolbox_dyeing" | "botania:elven_trade/dreamwood_log" | "ae2:tools/paintballs_lumen_red" | "botania:elven_spreader" | "ae2:shaped/slabs/fluix_block" | "create:crafting/kinetics/framed_glass_door" | "minecraft:coal_from_blasting_coal_ore" | "ae2:shaped/walls/sky_stone_small_brick" | "botania:obedience_stick" | "create:polished_cut_scoria_slab_recycling" | "minecraft:polished_basalt" | "botania:apothecary_taiga" | "create:cut_crimsite_bricks_from_stone_types_crimsite_stonecutting" | "create:mechanical_crafting/crushing_wheel" | "botania:stonecutting/metamorphic_desert_stone_to_chiseled_metamorphic_desert_bricks" | "create:cutting/compat/ecologics/stripped_coconut_wood" | "create:small_andesite_brick_slab" | "create:cutting/compat/biomesoplenty/redwood_log" | "botania:stonecutting/red_quartz_to_red_quartz_slab" | "create:crafting/kinetics/gantry_carriage" | "create:cutting/compat/byg/cika_log" | "create:crafting/copper/waxed_exposed_copper_tiles_from_honeycomb" | "botania:mana_infusion/tangleberrie_chibi" | "create:cut_andesite_slab_recycling" | "ae2:network/blocks/cell_workbench" | "minecraft:polished_andesite_slab" | "create:compat/buzzier_bees/milling/white_clover" | "create:splashing/magenta_concrete_powder" | "create:crafting/logistics/powered_latch" | "ae2:network/cables/dense_covered_lime" | "botania:conversions/magenta_petal_block_deconstruct" | "botania:metamorphic_fungal_bricks" | "create:ochrum_pillar_from_stone_types_ochrum_stonecutting" | "botania:yellow_floating_flower" | "botania:mana_fluxfield" | "ae2:matter_cannon/nuggets/meatcooked" | "botania:mana_infusion/lavender_quartz_deconstruct" | "botania:metamorphic_forest_bricks_stairs" | "minecraft:cracked_deepslate_bricks" | "create:cut_veridium_brick_wall_from_stone_types_veridium_stonecutting" | "create:deploying/waxed_oxidized_cut_copper_from_adding_wax" | "create:smelting/iron_ingot_from_crushed" | "ae2:shaped/slabs/sky_stone_block" | "create:crafting/kinetics/large_cogwheelfrom_little" | "botania:lens_damage" | "minecraft:yellow_candle" | "create:crafting/kinetics/track_signal" | "botania:floating_agricarnation" | "ae2:misc/seeds_fluix" | "botania:petal_apothecary/marimorphosis" | "create:deploying/waxed_exposed_copper_shingle_slab_from_adding_wax" | "minecraft:jungle_fence_gate" | "create:crushing/nickel_ore" | "create:cut_asurine_wall" | "create:crafting/kinetics/water_wheel" | "create:crafting/kinetics/yellow_valve_handle_from_other_valve_handle" | "create:cutting/compat/twilightforest/sorting_log" | "create:polished_cut_asurine_wall_from_stone_types_asurine_stonecutting" | "minecraft:repeater" | "minecraft:red_concrete_powder" | "create:compat/atmospheric/cutting/aspen_log" | "create:mixing/chocolate_melting" | "botania:conversions/manasteel_block_deconstruct" | "create:polished_cut_limestone_slab" | "botania:elementium_boots" | "create:compat/silentsgems/crushing/euclase_ore" | "botania:brew/absorption" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_bricks_stairs" | "botania:stonecutting/metamorphic_desert_bricks_to_metamorphic_desert_bricks_wall" | "create:weathered_copper_shingle_slab_from_weathered_copper_shingles_stonecutting" | "minecraft:iron_leggings" | "botania:lens_phantom" | "create:rose_quartz_block_from_rose_quartz_stonecutting" | "ae2:network/cables/dense_covered_fluix" | "create:crafting/materials/raw_zinc_block" | "botania:livingwood_slab" | "botania:mana_infusion/podzol_seeds" | "create:cutting/andesite_alloy" | "minecraft:magenta_carpet_from_white_carpet" | "create:pressing/copper_ingot" | "create:cut_diorite_slab_from_stone_types_diorite_stonecutting" | "minecraft:book_cloning" | "minecraft:polished_basalt_from_basalt_stonecutting" | "create:cutting/compat/ars_nouveau/stripped_purple_archwood_wood" | "create:limestone_pillar_from_limestone_stonecutting" | "create:cutting/compat/tconstruct/stripped_greenheart_log" | "ae2:tools/paintballs_white" | "botania:conversions/pink_petal_block_deconstruct" | "botania:floating_spectrolus" | "botania:stonecutting/metamorphic_desert_bricks_to_metamorphic_desert_bricks_stairs" | "botania:stonecutting/metamorphic_plains_cobblestone_to_metamorphic_plains_cobblestone_stairs" | "create:compat/traverse/cutting/fir_log" | "create:cutting/compat/twilightforest/transformation_log" | "botania:petal_apothecary/pure_daisy" | "create:cutting/compat/hexcasting/akashic_wood_stripped" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_bricks_wall" | "minecraft:polished_granite_slab_from_polished_granite_stonecutting" | "create:cut_andesite_wall_from_stone_types_andesite_stonecutting" | "minecraft:mushroom_stew" | "create:crafting/kinetics/analog_lever" | "botania:mana_infusion/oak_log_to_spruce_log" | "botania:stonecutting/metamorphic_plains_cobblestone_to_metamorphic_plains_cobblestone_slab" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_stone_slab" | "create:deploying/waxed_exposed_cut_copper_slab_from_adding_wax" | "create:smelting/zinc_ingot_from_crushed" | "botania:mana_infusion/pink_tulip_to_oxeye_daisy" | "minecraft:warped_planks" | "minecraft:red_nether_brick_wall_from_red_nether_bricks_stonecutting" | "botania:terra_axe" | "create:compat/projectvibrantjourneys/cutting/redwood_log" | "create:crafting/kinetics/sticker" | "ae2:shaped/stairs/fluix_block" | "ae2:decorative/fluix_block" | "ae2:network/cables/dense_covered_blue" | "create:polished_cut_calcite_from_calcite_stonecutting" | "minecraft:red_candle" | "create:compat/betterendforge/pressing/jungle_moss_path" | "create:polished_cut_scoria_stairs" | "create:crafting/logistics/content_observer" | "ae2:block_cutter/slabs/quartz_slab" | "create:copper_tile_stairs_from_copper_tiles_stonecutting" | "create:cutting/compat/integrateddynamics/menril_wood_stripped" | "minecraft:brown_carpet" | "create:cut_granite_brick_slab" | "minecraft:jungle_door" | "create:oxidized_copper_tile_slab" | "minecraft:prismarine_brick_slab" | "minecraft:nether_bricks" | "botania:stonecutting/metamorphic_mountain_stone_to_chiseled_metamorphic_mountain_bricks" | "botania:red_quartz_pillar" | "minecraft:iron_chestplate" | "botania:floating_entropinnyum" | "minecraft:crimson_fence" | "create:cut_limestone_brick_stairs_from_limestone_stonecutting" | "create:cutting/compat/ars_nouveau/green_archwood_wood" | "botania:mushroom_2" | "minecraft:oxidized_cut_copper_slab" | "create:cutting/compat/byg/fungal_imparius_hyphae" | "botania:mushroom_1" | "botania:mushroom_0" | "create:cut_veridium_slab" | "minecraft:lapis_lazuli_from_blasting_deepslate_lapis_ore" | "create:cut_dripstone_stairs_from_stone_types_dripstone_stonecutting" | "botania:stonecutting/metamorphic_plains_bricks_to_chiseled_metamorphic_plains_bricks" | "botania:petal_brown_double" | "botania:divining_rod" | "create:layered_asurine_from_asurine_stonecutting" | "minecraft:light_gray_stained_glass" | "botania:petal_green" | "ae2:network/cells/item_storage_components_cell_256k_part" | "minecraft:polished_andesite_from_andesite_stonecutting" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_bricks_stairs" | "create:cut_deepslate_brick_wall_from_deepslate_stonecutting" | "minecraft:crimson_stairs" | "botania:ender_eye_block" | "botania:reach_ring" | "create:cut_granite_slab_recycling" | "ae2:shaped/walls/fluix_block" | "create:deploying/waxed_oxidized_copper_shingle_stairs_from_adding_wax" | "botania:mushroom_9" | "botania:mushroom_8" | "create:crafting/kinetics/gray_valve_handle_from_other_valve_handle" | "botania:mushroom_7" | "botania:mushroom_6" | "botania:mushroom_5" | "minecraft:oak_pressure_plate" | "ae2:misc/chests_smooth_sky_stone" | "botania:mushroom_4" | "minecraft:stone_brick_stairs" | "create:compat/ae2/milling/iron" | "botania:mushroom_3" | "create:polished_cut_veridium_from_veridium_stonecutting" | "minecraft:diorite" | "botania:orange_shiny_flower" | "create:cutting/compat/blue_skies/stripped_lunar_log" | "botania:dye_brown" | "botania:glimmering_livingwood_log" | "create:milling/poppy" | "minecraft:polished_blackstone_wall_from_blackstone_stonecutting" | "minecraft:smooth_stone_slab_from_smooth_stone_stonecutting" | "minecraft:crimson_button" | "create:cut_calcite_bricks_from_stone_types_calcite_stonecutting" | "botania:metamorphic_swamp_cobblestone_wall" | "create:crafting/kinetics/light_blue_seat" | "botania:runic_altar/envy" | "botania:stonecutting/metamorphic_taiga_bricks_to_metamorphic_taiga_bricks_wall" | "create:cutting/compat/byg/cika_wood" | "minecraft:jungle_planks" | "minecraft:netherite_axe_smithing" | "botania:goddess_charm" | "ae2:block_cutter/walls/sky_stone_small_brick_wall" | "botania:mana_infusion/deepslate_to_tuff" | "create:andesite_pillar_from_andesite_stonecutting" | "minecraft:clock" | "create:cutting/compat/forbidden_arcanus/stripped_cherrywood_log" | "ae2:decorative/sky_stone_small_brick" | "create:cutting/compat/ars_nouveau/stripped_red_archwood_wood" | "create:compat/projectvibrantjourneys/cutting/stripped_juniper_log" | "botania:twig_wand" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_stone_slab" | "create:cutting/compat/ecologics/coconut_wood" | "minecraft:blue_ice" | "ae2:block_cutter/stairs/quartz_stairs" | "minecraft:polished_deepslate_slab_from_polished_deepslate_stonecutting" | "minecraft:red_nether_bricks" | "create:crushing/blaze_rod" | "minecraft:diamond_leggings" | "botania:livingwood_fence" | "botania:metamorphic_swamp_bricks_wall" | "minecraft:warped_slab" | "botania:conversions/green_petal_block_deconstruct" | "botania:magnet_ring" | "botania:mana_infusion/elf_quartz_deconstruct" | "minecraft:prismarine" | "botania:livingwood_bow" | "minecraft:purple_stained_glass" | "botania:mana_infusion/wool_deconstruct" | "botania:manaweave_leggings" | "create:crushing/diamond_ore" | "minecraft:chiseled_sandstone" | "create:polished_cut_asurine_slab_from_asurine_stonecutting" | "minecraft:cut_copper_stairs" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_bricks_slab" | "botania:stonecutting/metamorphic_swamp_bricks_to_chiseled_metamorphic_swamp_bricks" | "ae2:tools/network_memory_card_light_blue" | "botania:brew/jump_boost" | "create:compat/atmospheric/cutting/rosewood_log" | "botania:spark_changer" | "create:polished_cut_deepslate_slab_from_stone_types_deepslate_stonecutting" | "botania:keep_ivy" | "minecraft:moss_carpet" | "minecraft:mossy_cobblestone_slab" | "minecraft:polished_andesite_slab_from_andesite_stonecutting" | "create:crafting/kinetics/nozzle" | "create:cut_asurine_brick_slab" | "minecraft:polished_diorite_slab_from_diorite_stonecutting" | "create:cutting/compat/byg/stripped_baobab_wood" | "botania:floating_rannuncarpus_chibi" | "botania:glimmering_dreamwood_from_log" | "create:milling/sunflower" | "minecraft:mossy_stone_bricks_from_moss_block" | "minecraft:cake" | "create:crafting/kinetics/linear_chassis" | "minecraft:orange_banner" | "create:polished_cut_asurine_slab" | "botania:mana_infusion/acacia_log_to_dark_oak_log" | "ae2:blasting/ender_dust" | "minecraft:dark_oak_sign" | "minecraft:granite_slab" | "create:splashing/crushed_zinc_ore" | "create:pressing/sugar_cane" | "botania:corporea_slab" | "create:cutting/compat/twilightforest/twilight_oak_wood" | "create:cutting/compat/twilightforest/time_wood" | "botania:dreamwood_stairs" | "botania:floating_heisei_dream" | "minecraft:lime_concrete_powder" | "ae2:network/blocks/energy_dense_energy_cell" | "minecraft:leather_leggings" | "minecraft:sandstone_wall_from_sandstone_stonecutting" | "botania:brew/weak_regeneration" | "create:cut_andesite_brick_stairs_from_andesite_stonecutting" | "botania:lens_time" | "minecraft:brick_slab_from_bricks_stonecutting" | "create:crushing/raw_iron_block" | "create:compat/upgrade_aquatic/cutting/stripped_driftwood_log" | "botania:metamorphic_taiga_stone_stairs" | "minecraft:polished_blackstone_bricks_from_polished_blackstone_stonecutting" | "ae2:block_cutter/slabs/chiseled_quartz_slab" | "botania:corporea_brick_stairs" | "botania:conversions/gray_petal_block_deconstruct" | "create:cut_scoria_brick_slab_from_scoria_stonecutting" | "create:cutting/compat/byg/palm_log" | "minecraft:polished_blackstone_button" | "minecraft:redstone_from_blasting_deepslate_redstone_ore" | "create:cutting/compat/botania/stripped_dreamwood_log" | "minecraft:netherite_scrap_from_blasting" | "botania:petal_black" | "botania:lens_warp" | "create:cut_scoria_slab_recycling" | "create:crafting/kinetics/mechanical_piston" | "create:cutting/compat/biomesoplenty/cherry_log" | "botania:mana_infusion/white_tulip_to_pink_tulip" | "minecraft:lime_stained_glass_pane_from_glass_pane" | "botania:cosmetic_ancient_mask" | "minecraft:magenta_glazed_terracotta" | "minecraft:brown_carpet_from_white_carpet" | "botania:white_shiny_flower" | "create:cutting/compat/blue_skies/cherry_wood" | "minecraft:book" | "botania:petal_red_double" | "botania:orechid/emerald_ore" | "create:crafting/kinetics/flywheel" | "minecraft:wooden_shovel" | "create:compat/silentsgems/crushing/pearl_ore" | "botania:mana_infusion/manasteel_block" | "create:compat/betterendforge/pressing/end_myclium_path" | "create:crafting/kinetics/andesite_ladder" | "botania:stonecutting/metamorphic_swamp_cobblestone_to_metamorphic_swamp_cobblestone_slab" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_bricks_wall" | "create:cut_scoria_brick_stairs" | "create:cutting/compat/byg/stripped_nightshade_log" | "create:crafting/kinetics/fluid_pipe" | "minecraft:polished_blackstone_brick_stairs_from_polished_blackstone_stonecutting" | "ae2:shaped/stairs/sky_stone_small_brick" | "botania:cosmetic_orange_shades" | "botania:dreamwood_slab" | "minecraft:red_nether_brick_stairs_from_red_nether_bricks_stonecutting" | "create:cutting/compat/biomesoplenty/dead_log" | "create:small_granite_brick_slab_from_stone_types_granite_stonecutting" | "ae2:matter_cannon/nuggets/krypton" | "create:deploying/waxed_copper_block_from_adding_wax" | "create:item_application/railway_casing" | "minecraft:waxed_copper_block_from_honeycomb" | "create:cut_limestone_stairs" | "minecraft:redstone_from_smelting_deepslate_redstone_ore" | "minecraft:warped_fungus_on_a_stick" | "botania:marimorphosis/metamorphic_desert_stone" | "create:cutting/compat/byg/zelkova_wood" | "botania:elven_trade/diamond_return" | "create:polished_cut_scoria_from_stone_types_scoria_stonecutting" | "botania:mana_infusion/mana_powder_dye" | "minecraft:sandstone_slab" | "botania:vivid_seeds" | "ftbquests:book" | "create:polished_cut_scoria_from_scoria_stonecutting" | "create:compat/projectvibrantjourneys/cutting/stripped_cottonwood_log" | "ae2:network/cables/dense_covered_cyan" | "minecraft:gold_ingot_from_smelting_raw_gold" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_bricks_slab" | "botania:golden_seeds" | "minecraft:cracked_polished_blackstone_bricks" | "minecraft:deepslate_brick_slab_from_cobbled_deepslate_stonecutting" | "create:deploying/waxed_oxidized_copper_shingle_slab_from_adding_wax" | "botania:mana_infusion/blaze_quartz_deconstruct" | "create:small_dripstone_brick_stairs" | "minecraft:cooked_cod_from_smoking" | "botania:stonecutting/livingrock_bricks_to_livingrock_bricks_slab" | "ae2:misc/tiny_tnt" | "botania:marimorphosis/metamorphic_taiga_stone" | "botania:shimmerrock" | "create:compat/autumnity/cutting/stripped_maple_log" | "create:compat/silentsgems/crushing/agate_ore" | "create:deepslate_pillar_from_deepslate_stonecutting" | "ae2:decorative/quartz_glass" | "botania:conversions/lime_petal_block_deconstruct" | "minecraft:pink_candle" | "minecraft:red_terracotta" | "botania:dreamwood_planks_slab" | "create:crafting/kinetics/basin" | "create:compat/projectvibrantjourneys/cutting/palm_log" | "create:cut_veridium_stairs_from_stone_types_veridium_stonecutting" | "create:polished_cut_crimsite_stairs_from_stone_types_crimsite_stonecutting" | "botania:glass_pickaxe" | "minecraft:deepslate_tile_stairs" | "minecraft:copper_ingot" | "create:cut_veridium_brick_stairs" | "minecraft:waxed_weathered_cut_copper_slab" | "minecraft:white_dye_from_lily_of_the_valley" | "botania:cosmetic_eerie_mask" | "create:crafting/kinetics/encased_chain_drive" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_bricks_wall" | "ae2:matter_cannon/nuggets/barium" | "botania:green_floating_flower" | "botania:metamorphic_desert_cobblestone_wall" | "minecraft:oxidized_cut_copper_slab_from_oxidized_copper_stonecutting" | "create:haunting/glow_ink_sac" | "botania:red_pavement" | "create:compat/projectvibrantjourneys/cutting/cottonwood_log" | "minecraft:end_stone_brick_wall" | "botania:stonecutting/blaze_quartz_to_blaze_quartz_stairs" | "botania:cosmetic_wicked_eyepatch" | "minecraft:polished_diorite_slab" | "botania:lens_messenger" | "botania:stonecutting/lavender_quartz_to_lavender_quartz_pillar" | "botania:slab_recombine/metamorphic_swamp_stone" | "minecraft:waxed_exposed_cut_copper_slab_from_waxed_exposed_cut_copper_stonecutting" | "create:cutting/compat/botania/glimmering_livingwood" | "botania:flower_bag" | "create:cut_asurine_from_asurine_stonecutting" | "botania:black_shiny_flower" | "create:crafting/copper/waxed_copper_tiles_from_honeycomb" | "create:cut_tuff_slab_from_stone_types_tuff_stonecutting" | "create:small_scoria_bricks_from_scoria_stonecutting" | "botania:metamorphic_mesa_stone_slab" | "create:crushing/raw_aluminum_ore" | "botania:floating_jiyuulia_chibi" | "minecraft:netherite_hoe_smithing" | "create:cutting/compat/byg/rainbow_eucalyptus_wood" | "minecraft:waxed_oxidized_cut_copper_stairs_from_honeycomb" | "botania:chiseled_metamorphic_fungal_bricks" | "minecraft:netherite_chestplate_smithing" | "create:polished_cut_calcite_wall" | "create:milling/white_tulip" | "ae2:network/cables/dense_smart_red" | "ae2:inscriber/calculation_processor_print" | "minecraft:prismarine_stairs_from_prismarine_stonecutting" | "minecraft:oak_sign" | "minecraft:quartz_stairs_from_quartz_block_stonecutting" | "ae2:matter_cannon/nuggets/iridium" | "botania:light_gray_petal_block" | "create:small_crimsite_brick_stairs_from_crimsite_stonecutting" | "botania:green_pavement_slab" | "create:small_calcite_brick_wall_from_calcite_stonecutting" | "minecraft:diamond_from_smelting_deepslate_diamond_ore" | "minecraft:birch_pressure_plate" | "create:compat/neapolitan/filling/milk_bottle" | "create:small_scorchia_bricks_from_scorchia_stonecutting" | "create:cut_granite_brick_slab_from_granite_stonecutting" | "botania:conversions/purple_petal_block_deconstruct" | "botania:slab_recombine/livingwood" | "create:polished_cut_scorchia_slab_from_stone_types_scorchia_stonecutting" | "ae2:entropy/cool/stone_cobblestone" | "ae2:matter_cannon/nuggets/manganese" | "create:cut_scorchia_wall_from_stone_types_scorchia_stonecutting" | "create:crafting/kinetics/track_station" | "minecraft:red_sandstone_stairs_from_red_sandstone_stonecutting" | "create:crafting/materials/zinc_nugget_from_decompacting" | "minecraft:purple_carpet_from_white_carpet" | "create:crushing/redstone_ore" | "create:cut_scorchia_from_stone_types_scorchia_stonecutting" | "create:spruce_window" | "create:crafting/copper/waxed_weathered_copper_shingle_stairs_from_honeycomb" | "botania:stonecutting/metamorphic_mountain_bricks_to_metamorphic_mountain_bricks_wall" | "minecraft:emerald_from_blasting_deepslate_emerald_ore" | "ae2:inscriber/engineering_processor_press" | "minecraft:smooth_sandstone_slab_from_smooth_sandstone_stonecutting" | "minecraft:black_bed" | "create:compat/simplefarming/crushing/sf_crush_rice" | "botania:stonecutting/metamorphic_taiga_bricks_to_metamorphic_taiga_bricks_stairs" | "botania:apothecary_mossy" | "create:cutting/compat/botania/livingwood" | "create:crafting/kinetics/hose_pulley" | "botania:mana_quartz" | "create:crushing/lead_ore" | "botania:red_string_container" | "minecraft:diamond_from_smelting_diamond_ore" | "create:cut_ochrum_brick_wall" | "create:crafting/copper/waxed_oxidized_copper_shingle_stairs_from_honeycomb" | "create:crushing/aluminum_ore" | "create:crushing/raw_iron" | "create:cut_andesite_slab_from_stone_types_andesite_stonecutting" | "botania:elven_trade/pixie_dust" | "minecraft:shield_decoration" | "botania:livingwood_twig" | "create:compat/environmental/milling/cartwheel" | "create:cutting/compat/tconstruct/stripped_bloodshroom_log" | "minecraft:deepslate_tile_wall_from_cobbled_deepslate_stonecutting" | "ae2:tools/network_memory_card_green" | "ae2:tools/network_tool" | "minecraft:bowl" | "create:cut_ochrum_brick_slab_from_stone_types_ochrum_stonecutting" | "create:cut_veridium_from_veridium_stonecutting" | "create:small_crimsite_brick_wall_from_crimsite_stonecutting" | "create:compat/bop/milling/violet" | "create:compat/projectvibrantjourneys/cutting/baobab_log" | "create:small_diorite_brick_slab_from_stone_types_diorite_stonecutting" | "create:cut_limestone_brick_slab_from_stone_types_limestone_stonecutting" | "botania:mana_infusion/marimorphosis_chibi" | "create:cutting/compat/biomesoplenty/willow_wood" | "minecraft:purple_concrete_powder" | "create:small_tuff_bricks_from_stone_types_tuff_stonecutting" | "minecraft:birch_planks" | "ae2:network/cables/dense_covered_red" | "minecraft:polished_deepslate_slab_from_cobbled_deepslate_stonecutting" | "botania:red_string" | "create:small_calcite_brick_slab" | "minecraft:light_gray_stained_glass_pane" | "ae2:matter_cannon/nuggets/gold" | "minecraft:spectral_arrow" | "create:polished_cut_ochrum_wall_from_stone_types_ochrum_stonecutting" | "minecraft:red_carpet" | "create:blasting/tin_ingot_compat_thermal" | "botania:conversions/terrasteel_to_nugget" | "botania:dye_light_blue" | "create:diorite_pillar_from_stone_types_diorite_stonecutting" | "create:compat/ae2/milling/ender_pearl" | "create:crafting/materials/red_sand_paper" | "create:polished_cut_diorite_from_stone_types_diorite_stonecutting" | "botania:slab_recombine/metamorphic_desert_bricks" | "minecraft:light_gray_bed_from_white_bed" | "create:small_veridium_brick_wall_from_stone_types_veridium_stonecutting" | "botania:stonecutting/lavender_quartz_to_lavender_quartz_stairs" | "create:cut_crimsite_slab_from_stone_types_crimsite_stonecutting" | "botania:mana_infusion/spruce_leaves_dupe" | "create:crafting/kinetics/light_blue_valve_handle_from_other_valve_handle" | "ae2:matter_cannon/nuggets/rhodium" | "create:polished_cut_andesite_from_stone_types_andesite_stonecutting" | "minecraft:weathered_cut_copper_stairs_from_weathered_cut_copper_stonecutting" | "create:scorchia_pillar_from_stone_types_scorchia_stonecutting" | "create:small_scoria_brick_stairs" | "create:cutting/compat/byg/pine_log" | "create:polished_cut_ochrum_slab_recycling" | "ae2:network/cables/dense_smart_fluix_clean" | "botania:floating_spectranthemum" | "botania:stonecutting/blue_pavement_to_blue_pavement_stairs" | "minecraft:waxed_weathered_cut_copper_stairs_from_waxed_weathered_copper_stonecutting" | "botania:slab_recombine/metamorphic_plains_stone" | "create:copper_ladder_from_plates_copper_stonecutting" | "minecraft:waxed_weathered_cut_copper_from_waxed_weathered_copper_stonecutting" | "create:crafting/kinetics/white_sail" | "botania:stonecutting/black_pavement_to_black_pavement_stairs" | "minecraft:brown_bed" | "botania:mana_infusion/rose_bush_to_peony" | "ae2:network/crafting/molecular_assembler" | "botania:petal_apothecary/daybloom_motif" | "create:crushing/ochrum_recycling" | "botania:metamorphic_fungal_bricks_slab" | "minecraft:smooth_red_sandstone_stairs" | "ae2:tools/misctools_entropy_manipulator" | "botania:elementium_hoe" | "botania:orechid/deepslate_iron_ore" | "minecraft:stone_pickaxe" | "minecraft:light_blue_glazed_terracotta" | "botania:petal_apothecary/heisei_dream" | "minecraft:dispenser" | "minecraft:cyan_stained_glass_pane" | "create:crafting/copper/waxed_oxidized_copper_tile_slab_from_honeycomb" | "minecraft:daylight_detector" | "botania:black_pavement_stairs" | "create:compat/environmental/milling/bird_of_paradise" | "minecraft:purple_glazed_terracotta" | "create:crafting/kinetics/hand_crank" | "create:milling/large_fern" | "create:smelting/ingot_nickel_compat_immersiveengineering" | "create:cutting/jungle_log" | "botania:mana_infusion/mana_quartz" | "botania:dry_seeds" | "botania:dynamic/split_lens" | "minecraft:jack_o_lantern" | "botania:bifrost_perm" | "minecraft:tripwire_hook" | "create:crafting/kinetics/mechanical_pump" | "minecraft:hopper" | "create:splashing/brown_concrete_powder" | "create:cut_andesite_brick_wall_from_stone_types_andesite_stonecutting" | "minecraft:cut_sandstone_from_sandstone_stonecutting" | "create:cut_tuff_slab_recycling" | "create:crafting/logistics/powered_toggle_latch" | "ae2:network/cells/spatial_storage_cell_16_cubed" | "create:deploying/waxed_weathered_copper_tile_stairs_from_adding_wax" | "create:cut_calcite_stairs_from_stone_types_calcite_stonecutting" | "minecraft:raw_gold" | "create:mixing/brass_ingot" | "minecraft:green_banner" | "create:cutting/compat/byg/stripped_cypress_wood" | "botania:mana_infusion/allium_to_azure_bluet" | "ae2:network/crafting/patterns_blank" | "create:crafting/appliances/copper_backtank" | "create:cut_dripstone_slab_from_dripstone_block_stonecutting" | "create:cut_andesite_slab_from_andesite_stonecutting" | "create:cut_dripstone_stairs" | "minecraft:cooked_cod" | "botania:metamorphic_mesa_bricks_wall" | "create:crafting/kinetics/portable_storage_interface" | "minecraft:iron_helmet" | "create:compat/silentsgems/crushing/garnet_ore" | "create:cutting/compat/botania/glimmering_stripped_dreamwood" | "botania:red_string_alt" | "create:cut_diorite_brick_slab" | "create:crafting/kinetics/cyan_seat" | "create:small_dripstone_brick_wall_from_dripstone_block_stonecutting" | "minecraft:cartography_table" | "botania:brew/regeneration" | "minecraft:polished_diorite" | "botania:green_pavement_stairs" | "ae2:network/blocks/energy_vibration_chamber" | "botania:stonecutting/metamorphic_mountain_bricks_to_metamorphic_mountain_bricks_stairs" | "create:polished_cut_ochrum_slab" | "create:crafting/materials/andesite_alloy_from_zinc" | "ae2:tools/fluix_shovel" | "minecraft:cooked_porkchop_from_smoking" | "botania:petal_lime_double" | "botania:elementium_leggings" | "botania:mana_ring" | "botania:petal_apothecary/thermalily" | "ae2:block_cutter/stairs/sky_stone_stairs" | "minecraft:waxed_weathered_cut_copper_from_honeycomb" | "create:compat/silentsgems/crushing/coral_ore" | "create:splashing/black_concrete_powder" | "create:cut_tuff_brick_slab_from_tuff_stonecutting" | "create:cutting/compat/twilightforest/stripped_mangrove_log" | "ae2:network/cells/view_cell_storage" | "create:small_tuff_brick_slab_from_stone_types_tuff_stonecutting" | "botania:petal_light_gray" | "botania:stonecutting/metamorphic_fungal_bricks_to_metamorphic_fungal_bricks_wall" | "create:crushing/veridium_recycling" | "minecraft:turtle_helmet" | "botania:orechid/deepslate_coal_ore" | "create:polished_cut_deepslate_stairs" | "create:small_granite_bricks_from_granite_stonecutting" | "create:compat/botania/milling/lime_petal" | "minecraft:light_blue_banner" | "botania:mana_infusion/redstone_dupe" | "create:ochrum_pillar_from_ochrum_stonecutting" | "botania:stonecutting/dark_quartz_to_chiseled_dark_quartz" | "ae2:network/cables/glass_black" | "minecraft:heavy_weighted_pressure_plate" | "minecraft:stone_shovel" | "botania:brown_shiny_flower" | "minecraft:deepslate_tiles_from_polished_deepslate_stonecutting" | "create:small_crimsite_brick_slab_from_crimsite_stonecutting" | "minecraft:waxed_oxidized_cut_copper_slab" | "ae2:tools/portable_fluid_cell_16k" | "create:cut_calcite_brick_slab_recycling" | "create:splashing/soul_sand" | "create:polished_cut_crimsite_slab" | "create:layered_tuff_from_stone_types_tuff_stonecutting" | "minecraft:polished_blackstone_stairs" | "botania:petal_red" | "minecraft:netherite_pickaxe_smithing" | "minecraft:deepslate_brick_stairs" | "create:crushing/raw_silver_block" | "ae2:entropy/cool/lava_obsidian" | "minecraft:dropper" | "create:crafting/kinetics/piston_extension_pole" | "create:splashing/mekanism/crushed_uranium_ore" | "create:crushing/raw_nickel_ore" | "ae2:network/cables/smart_white" | "botania:slab_recombine/white_pavement" | "botania:manasteel_block" | "ae2:misc/vanilla_comparator" | "create:cut_crimsite_wall" | "ae2:materials/cardvoid" | "create:compat/projectvibrantjourneys/cutting/pine_log" | "create:cut_veridium_brick_stairs_from_stone_types_veridium_stonecutting" | "minecraft:lime_dye_from_smelting" | "create:small_granite_brick_wall" | "create:splashing/stained_glass_pane" | "create:cut_granite_slab_from_stone_types_granite_stonecutting" | "botania:conversions/white_petal_block_deconstruct" | "create:cut_limestone_slab" | "create:crafting/kinetics/brass_hand" | "create:crafting/kinetics/lime_seat" | "botania:elven_trade/iron_block_return" | "minecraft:golden_helmet" | "botania:animated_torch" | "minecraft:light_blue_dye_from_blue_orchid" | "minecraft:weathered_cut_copper_stairs" | "minecraft:mossy_stone_brick_wall_from_mossy_stone_brick_stonecutting" | "create:cutting/compat/botania/glimmering_stripped_dreamwood_log" | "botania:thunder_sword" | "create:small_scoria_brick_slab_from_stone_types_scoria_stonecutting" | "minecraft:polished_deepslate" | "create:crafting/kinetics/rose_quartz_lamp" | "create:polished_cut_asurine_wall_from_asurine_stonecutting" | "ae2:tools/network_memory_card_yellow" | "create:compat/environmental/milling/white_lotus_flower" | "ae2:network/crafting/4k_cpu_crafting_storage" | "create:layered_dripstone_from_stone_types_dripstone_stonecutting" | "ae2:network/cables/dense_smart_pink" | "create:crafting/kinetics/green_seat" | "create:small_crimsite_brick_stairs_from_stone_types_crimsite_stonecutting" | "create:small_scorchia_brick_stairs" | "create:cutting/compat/twilightforest/stripped_sorting_wood" | "create:milling/sugar_cane" | "ae2:tools/network_memory_card_white" | "botania:open_crate" | "ae2:network/cables/covered_yellow" | "botania:gray_shiny_flower" | "botania:stonecutting/metamorphic_plains_bricks_to_metamorphic_plains_bricks_wall" | "create:cutting/compat/biomesoplenty/fir_wood" | "create:smelting/tin_ingot_compat_thermal" | "minecraft:pink_bed" | "create:compat/bop/milling/orange_cosmos" | "botania:cosmetic_thinking_hand" | "minecraft:shield" | "botania:stonecutting/livingrock_to_livingrock_wall" | "minecraft:blackstone_slab" | "minecraft:cooked_porkchop_from_campfire_cooking" | "create:cut_calcite_wall_from_stone_types_calcite_stonecutting" | "minecraft:cyan_stained_glass_pane_from_glass_pane" | "minecraft:waxed_exposed_cut_copper_slab_from_waxed_exposed_copper_stonecutting" | "botania:stonecutting/metamorphic_fungal_cobblestone_to_metamorphic_fungal_cobblestone_stairs" | "create:cutting/compat/byg/aspen_log" | "create:small_dripstone_bricks_from_stone_types_dripstone_stonecutting" | "create:spruce_window_pane" | "minecraft:cooked_rabbit_from_smoking" | "botania:chiseled_metamorphic_mountain_bricks" | "create:item_application/andesite_casing_from_wood" | "create:cut_asurine_brick_wall_from_asurine_stonecutting" | "create:cut_crimsite_wall_from_stone_types_crimsite_stonecutting" | "minecraft:quartz_bricks" | "botania:mana_infusion/jungle_sapling_to_acacia_sapling" | "minecraft:map_cloning" | "botania:temperance_stone" | "botania:metamorphic_plains_cobblestone_stairs" | "create:compat/atmospheric/pressing/crustose_path" | "minecraft:red_sandstone_wall" | "ae2:shaped/stairs/quartz_block" | "create:small_scorchia_brick_slab_recycling" | "botania:dynamic/composite_lens" | "botania:petal_orange" | "create:cut_asurine_brick_slab_recycling" | "botania:stonecutting/metamorphic_forest_bricks_to_metamorphic_forest_bricks_stairs" | "botania:black_petal_block" | "create:crafting/kinetics/brown_valve_handle_from_other_valve_handle" | "create:polished_cut_andesite_wall_from_andesite_stonecutting" | "botania:crystal_bow" | "create:cut_veridium_brick_wall" | "create:cut_deepslate_brick_slab_recycling" | "minecraft:acacia_stairs" | "create:polished_cut_granite_stairs_from_granite_stonecutting" | "create:compat/botania/milling/pink_petal" | "ae2:block_cutter/walls/sky_stone_brick_wall" | "minecraft:iron_nugget_from_smelting" | "minecraft:raw_gold_block" | "minecraft:birch_door" | "create:compat/environmental/milling/dianthus" | "create:polished_cut_granite_stairs" | "ae2:tools/network_memory_card_gray" | "enderstorage:recolour_ender_tank" | "botania:chiseled_sunny_quartz" | "minecraft:smooth_quartz_stairs_from_smooth_quartz_stonecutting" | "botania:elementium_helmet" | "itemfilters:xor" | "ae2:network/parts/formation_plane_alt" | "minecraft:chiseled_polished_blackstone_from_polished_blackstone_stonecutting" | "create:haunting/infested_stone_bricks" | "create:haunting/poisonous_potato" | "ae2:network/cables/dense_smart_fluix" | "ae2:shaped/slabs/sky_stone_small_brick" | "botania:glimmering_stripped_dreamwood_log" | "minecraft:wooden_sword" | "minecraft:birch_fence_gate" | "create:blasting/copper_ingot_from_crushed" | "minecraft:bone_meal" | "ae2:shaped/walls/quartz_pillar" | "botania:mossy_livingwood_planks" | "ae2:network/blocks/pattern_providers_interface_part" | "minecraft:gold_ingot_from_blasting_nether_gold_ore" | "create:small_scoria_brick_slab_from_scoria_stonecutting" | "botania:metamorphic_plains_bricks_wall" | "create:smelting/glass_pane_from_framed_glass_pane" | "create:mixing/andesite_alloy_from_zinc" | "botania:manasteel_boots" | "botania:brew/speed" | "create:cutting/compat/blue_skies/stripped_frostbright_wood" | "create:small_scorchia_brick_wall_from_stone_types_scorchia_stonecutting" | "minecraft:smooth_quartz_slab" | "create:compat/atmospheric/milling/warm_monkey_brush" | "botania:blaze_quartz_slab" | "botania:corporea_brick_slab" | "ae2:shaped/slabs/sky_stone_brick" | "ae2:network/cells/view_cell" | "botania:dynamic/merge_vial" | "create:small_veridium_brick_slab_from_stone_types_veridium_stonecutting" | "botania:terra_pick" | "ae2:matter_cannon/nuggets/calcium" | "botania:brewery" | "create:cutting/compat/twilightforest/mangrove_wood" | "minecraft:lapis_lazuli_from_smelting_lapis_ore" | "botania:blood_pendant" | "create:cutting/compat/byg/nightshade_wood" | "create:cut_andesite_brick_slab" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_stone_stairs" | "create:compat/environmental/milling/violet" | "create:cut_deepslate_from_stone_types_deepslate_stonecutting" | "minecraft:yellow_carpet_from_white_carpet" | "create:compat/supplementaries/splashing/blackboard" | "botania:monocle" | "botania:marimorphosis/metamorphic_plains_stone" | "minecraft:prismarine_wall_from_prismarine_stonecutting" | "minecraft:purple_stained_glass_pane_from_glass_pane" | "create:cut_limestone_brick_wall" | "create:cutting/stripped_crimson_stem" | "minecraft:cookie" | "botania:terra_plate" | "create:crafting/kinetics/purple_seat_from_other_seat" | "botania:stonecutting/elf_quartz_to_elf_quartz_slab" | "minecraft:lightning_rod" | "minecraft:brown_stained_glass_pane_from_glass_pane" | "create:cutting/compat/botania/glimmering_stripped_livingwood" | "minecraft:orange_concrete_powder" | "create:cut_scorchia_slab_from_stone_types_scorchia_stonecutting" | "create:cutting/compat/byg/stripped_jacaranda_log" | "minecraft:redstone_block" | "minecraft:shears" | "minecraft:honeycomb_block" | "create:copper_tiles_from_plates_copper_stonecutting" | "create:crafting/copper/waxed_copper_shingle_slab_from_honeycomb" | "ae2:tools/certus_quartz_hoe" | "botania:stonecutting/mana_quartz_to_mana_quartz_slab" | "minecraft:yellow_stained_glass_pane_from_glass_pane" | "botania:mana_infusion/rannuncarpus_chibi" | "botania:mana_infusion/lilac_to_rose_bush" | "ae2:network/cables/glass_light_blue" | "botania:slab_recombine/metamorphic_fungal_bricks" | "create:small_scorchia_brick_wall" | "botania:mutated_seeds" | "minecraft:andesite_stairs_from_andesite_stonecutting" | "minecraft:stone_brick_slab_from_stone_bricks_stonecutting" | "create:polished_cut_calcite_stairs_from_calcite_stonecutting" | "botania:slab_recombine/metamorphic_taiga_bricks" | "create:blasting/gold_ingot_from_crushed" | "create:compat/silentsgems/crushing/topaz_ore" | "ae2:block_cutter/stairs/sky_stone_small_brick_stairs" | "create:vertical_framed_glass_from_glass_colorless_stonecutting" | "create:cut_scoria_brick_slab_from_stone_types_scoria_stonecutting" | "create:cutting/compat/byg/cherry_wood" | "create:cutting/stripped_dark_oak_wood" | "create:milling/terracotta" | "create:cut_scorchia_stairs_from_stone_types_scorchia_stonecutting" | "create:crafting/kinetics/goggles" | "create:mixing/chocolate" | "create:crafting/materials/electron_tube" | "create:crafting/kinetics/rope_pulley" | "create:crafting/kinetics/cuckoo_clock" | "minecraft:waxed_weathered_cut_copper_slab_from_waxed_weathered_cut_copper_stonecutting" | "ae2:network/cables/covered_magenta" | "create:compat/upgrade_aquatic/milling/flowering_rush" | "botania:orechid/iron_ore" | "botania:mana_infusion/jiyuulia_chibi" | "create:polished_cut_deepslate_slab_recycling" | "create:crafting/kinetics/pink_seat" | "botania:mining_ring" | "create:copper_tile_slab_from_copper_tiles_stonecutting" | "create:polished_cut_deepslate_wall_from_deepslate_stonecutting" | "create:polished_cut_andesite_slab" | "create:compat/botania/milling/cyan_petal" | "botania:apothecary_forest" | "botania:blaze_quartz_stairs" | "create:small_asurine_bricks_from_asurine_stonecutting" | "create:compat/betterendforge/pressing/cave_moss_path" | "create:compat/silentsgems/crushing/jade_ore" | "botania:brew/water_breathing" | "create:crafting/schematics/schematicannon" | "create:cut_limestone_from_limestone_stonecutting" | "create:cutting/compat/twilightforest/stripped_mining_log" | "botania:chiseled_mana_quartz" | "minecraft:oak_fence_gate" | "botania:runic_altar/water" | "create:splashing/wool" | "create:cutting/compat/ars_nouveau/blue_archwood_wood" | "itemfilters:max_count" | "create:compat/silentsgems/crushing/aquamarine_ore" | "create:cut_granite_stairs" | "ae2:network/cables/covered_gray" | "create:cut_scoria_brick_slab" | "create:smelting/glass_pane_from_horizontal_framed_glass_pane" | "create:cutting/compat/biomesoplenty/stripped_dead_log" | "create:crushing/raw_osmium_block" | "create:cutting/compat/byg/stripped_maple_log" | "create:cut_veridium_brick_slab_from_stone_types_veridium_stonecutting" | "create:blasting/ingot_uranium_compat_immersiveengineering" | "create:filling/redstone" | "minecraft:sandstone_stairs_from_sandstone_stonecutting" | "create:cutting/compat/forbidden_arcanus/mysterywood" | "botania:pure_daisy/obsidian" | "minecraft:gray_carpet" | "minecraft:oxidized_cut_copper_stairs" | "botania:chiseled_blaze_quartz" | "create:cut_scorchia_brick_wall_from_stone_types_scorchia_stonecutting" | "botania:floating_marimorphosis_chibi" | "botania:slab_recombine/metamorphic_fungal_cobblestone" | "create:cut_veridium_wall_from_veridium_stonecutting" | "create:cutting/compat/integrateddynamics/menril_log_stripped" | "minecraft:diamond_boots" | "create:polished_cut_deepslate_wall_from_stone_types_deepslate_stonecutting" | "botania:floating_solegnolia_chibi" | "create:crafting/copper/waxed_oxidized_copper_tile_stairs_from_honeycomb" | "minecraft:stick" | "minecraft:red_nether_brick_stairs" | "minecraft:brewing_stand" | "create:cut_limestone_slab_recycling" | "create:cutting/compat/byg/stripped_fir_log" | "create:mechanical_crafting/potato_cannon" | "create:crafting/kinetics/red_seat" | "create:deploying/waxed_copper_shingle_slab_from_adding_wax" | "ae2:network/parts/quartz_fiber_part" | "minecraft:emerald_from_blasting_emerald_ore" | "botania:metamorphic_swamp_cobblestone_stairs" | "botania:lavender_quartz_slab" | "create:compat/endergetic/splashing/petrified_nether_corrock_block" | "botania:dynamic/ancient_will_attach" | "ae2:network/cables/smart_light_gray" | "minecraft:polished_blackstone_brick_wall" | "ae2:tools/paintballs_lumen_brown" | "create:cut_scoria_stairs_from_scoria_stonecutting" | "create:crafting/kinetics/gearboxfrom_conversion" | "create:cutting/compat/ars_nouveau/red_archwood_log" | "create:crafting/kinetics/track_observer_from_other_plates" | "minecraft:dried_kelp_from_campfire_cooking" | "ae2:network/wireless_crafting_terminal" | "botania:cosmetic_polka_dotted_bows" | "create:cut_ochrum_stairs_from_stone_types_ochrum_stonecutting" | "create:crafting/kinetics/orange_seat" | "create:cutting/compat/biomesoplenty/umbran_wood" | "minecraft:diamond_block" | "minecraft:deepslate_tile_stairs_from_deepslate_bricks_stonecutting" | "create:polished_cut_asurine_stairs_from_asurine_stonecutting" | "minecraft:diorite_slab" | "create:polished_cut_limestone_slab_from_limestone_stonecutting" | "create:polished_cut_veridium_slab_from_stone_types_veridium_stonecutting" | "create:pressing/gold_ingot" | "create:polished_cut_andesite_wall_from_stone_types_andesite_stonecutting" | "minecraft:yellow_stained_glass" | "create:cutting/birch_wood" | "create:cut_dripstone_stairs_from_dripstone_block_stonecutting" | "create:compat/atmospheric/cutting/stripped_kousa_log" | "minecraft:waxed_oxidized_cut_copper_stairs_from_waxed_oxidized_copper_stonecutting" | "create:crafting/kinetics/light_gray_seat_from_other_seat" | "botania:gravity_rod" | "botania:runic_altar/head" | "botania:mana_gun" | "minecraft:pumpkin_seeds" | "botania:astrolabe" | "ae2:network/cables/dense_covered_light_blue" | "create:compat/silentsgems/crushing/opal_ore" | "create:compat/silentsgems/crushing/iolite_ore" | "minecraft:cooked_mutton" | "create:cut_andesite_wall" | "create:cut_asurine_bricks_from_stone_types_asurine_stonecutting" | "minecraft:bookshelf" | "create:cut_diorite_brick_slab_from_stone_types_diorite_stonecutting" | "botania:dye_cyan" | "minecraft:lapis_block" | "create:cutting/stripped_crimson_hyphae" | "minecraft:brown_bed_from_white_bed" | "minecraft:brown_stained_glass_pane" | "minecraft:black_terracotta" | "botania:stonecutting/mana_quartz_to_chiseled_mana_quartz" | "create:cutting/compat/twilightforest/stripped_canopy_log" | "ae2:tools/certus_quartz_cutting_knife" | "botania:metamorphic_mountain_stone_wall" | "minecraft:light_gray_terracotta" | "minecraft:white_bed" | "botania:mana_infusion/book_to_name_tag" | "create:crafting/kinetics/pink_valve_handle_from_other_valve_handle" | "minecraft:spruce_slab" | "botania:stonecutting/metamorphic_forest_bricks_to_metamorphic_forest_bricks_wall" | "minecraft:cobblestone_slab_from_cobblestone_stonecutting" | "ae2:network/blocks/security_station" | "minecraft:oak_boat" | "botania:corporea_spark" | "minecraft:mossy_stone_brick_stairs_from_mossy_stone_brick_stonecutting" | "create:compat/silentsgems/crushing/amber_ore" | "minecraft:yellow_carpet" | "create:layered_scoria_from_stone_types_scoria_stonecutting" | "ae2:shaped/stairs/smooth_sky_stone_block" | "create:compacting/andesite_from_flint" | "create:cut_granite_wall_from_granite_stonecutting" | "minecraft:red_dye_from_rose_bush" | "ae2:matter_cannon/nuggets/charcoal" | "create:cut_dripstone_from_stone_types_dripstone_stonecutting" | "botania:manasteel_shears" | "minecraft:pumpkin_pie" | "ae2:network/cables/smart_green" | "ae2:network/cells/item_storage_cell_64k" | "minecraft:jungle_fence" | "botania:elementium_pickaxe" | "create:polished_cut_granite_slab_recycling" | "ae2:block_cutter/walls/fluix_wall" | "create:cut_ochrum_stairs" | "minecraft:glass_bottle" | "minecraft:iron_ingot_from_smelting_raw_iron" | "minecraft:deepslate_brick_slab_from_deepslate_bricks_stonecutting" | "minecraft:polished_granite" | "botania:stripped_livingwood" | "botania:stonecutting/metamorphic_mesa_cobblestone_to_metamorphic_mesa_cobblestone_slab" | "botania:lens_paint" | "botania:conjuration_catalyst" | "create:cutting/compat/byg/stripped_mangrove_log" | "minecraft:soul_campfire" | "create:crafting/materials/copper_ingot" | "create:cutting/compat/forbidden_arcanus/stripped_mysterywood" | "botania:clip" | "ae2:decorative/certus_quartz_block" | "botania:red_string_interceptor" | "minecraft:stripped_warped_hyphae" | "create:cut_calcite_brick_stairs" | "create:smelting/glass_pane_from_tiled_glass_pane" | "create:crushing/deepslate_diamond_ore" | "botania:speed_up_belt" | "create:polished_cut_dripstone_slab_from_dripstone_block_stonecutting" | "minecraft:gold_ingot_from_smelting_nether_gold_ore" | "create:small_rose_quartz_tiles_from_polished_rose_quartz_stonecutting" | "create:cut_deepslate_stairs_from_stone_types_deepslate_stonecutting" | "botania:drum_canopy" | "create:splashing/immersiveengineering/crushed_silver_ore" | "create:layered_deepslate_from_stone_types_deepslate_stonecutting" | "create:small_calcite_bricks_from_calcite_stonecutting" | "ae2:tools/paintballs_magenta" | "botania:mana_infusion/orange_tulip_to_white_tulip" | "botania:stonecutting/metamorphic_fungal_cobblestone_to_metamorphic_fungal_cobblestone_slab" | "botania:apothecary_fungal" | "create:compat/botania/milling/brown_petal" | "create:crushing/quicksilver_ore" | "ae2:matter_cannon/nuggets/rubidium" | "create:compat/thermal/crushing/cinnabar_ore" | "ae2:misc/deconstruction_fluix_block" | "botania:stonecutting/metamorphic_plains_stone_to_chiseled_metamorphic_plains_bricks" | "create:small_ochrum_bricks_from_stone_types_ochrum_stonecutting" | "create:compat/environmental/milling/purple_hibiscus" | "minecraft:crimson_fence_gate" | "botania:lens_magnet" | "botania:lens_normal" | "ae2:matter_cannon/nuggets/iodine" | "create:polished_cut_dripstone_wall_from_stone_types_dripstone_stonecutting" | "create:polished_cut_tuff_stairs_from_stone_types_tuff_stonecutting" | "create:crafting/curiosities/cake" | "minecraft:waxed_exposed_cut_copper_from_waxed_exposed_copper_stonecutting" | "create:copper_shingle_stairs_from_copper_shingles_stonecutting" | "minecraft:lapis_lazuli_from_blasting_lapis_ore" | "botania:petal_apothecary/solegnolia" | "create:compat/druidcraft/crushing/moonstone_ore" | "create:crafting/kinetics/minecart_from_contraption_cart" | "minecraft:cooked_chicken_from_campfire_cooking" | "create:emptying/compat/farmersdelight/milk_bottle" | "minecraft:deepslate_tile_wall_from_polished_deepslate_stonecutting" | "minecraft:purple_dye" | "create:crafting/kinetics/radial_chassis" | "ae2:network/cells/item_storage_cell_4k_storage" | "create:small_ochrum_brick_wall_from_stone_types_ochrum_stonecutting" | "create:cut_calcite_brick_wall_from_stone_types_calcite_stonecutting" | "create:crafting/copper/waxed_copper_shingle_stairs_from_honeycomb" | "botania:mana_infusion/redstone_to_glowstone_dust" | "create:copper_shingles_from_plates_copper_stonecutting" | "minecraft:quartz_slab" | "botania:livingwood_planks_stairs" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_bricks_wall" | "ae2:inscriber/logic_processor_print" | "botania:thorn_chakram" | "create:crafting/copper/waxed_weathered_copper_shingles_from_honeycomb" | "ae2:block_cutter/stairs/smooth_sky_stone_stairs" | "create:cutting/compat/quark/blossom_log" | "create:polished_cut_ochrum_slab_from_ochrum_stonecutting" | "botania:stripped_livingwood_slab" | "create:exposed_copper_tile_stairs" | "minecraft:quartz_pillar_from_quartz_block_stonecutting" | "create:polished_cut_limestone_stairs_from_limestone_stonecutting" | "itemfilters:or" | "ae2:network/cables/smart_black" | "botania:conversions/yellow_petal_block_deconstruct" | "minecraft:deepslate_tiles_from_cobbled_deepslate_stonecutting" | "botania:cosmetic_devil_tail" | "create:polished_cut_limestone_from_stone_types_limestone_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_willow_log" | "minecraft:mossy_cobblestone_wall_from_mossy_cobblestone_stonecutting" | "minecraft:observer" | "botania:apothecary_mesa" | "minecraft:polished_deepslate_wall" | "minecraft:cooked_cod_from_campfire_cooking" | "create:cutting/compat/byg/stripped_baobab_log" | "itemfilters:id_regex" | "create:cutting/compat/blue_skies/bluebright_wood" | "create:small_dripstone_brick_stairs_from_stone_types_dripstone_stonecutting" | "create:cut_andesite_brick_stairs_from_stone_types_andesite_stonecutting" | "create:haunting/nether_brick" | "botania:dynamic/terra_pick_tipping" | "minecraft:cut_sandstone_slab_from_sandstone_stonecutting" | "create:haunting/infested_mossy_stone_bricks" | "create:milling/bone_meal" | "botania:pink_shiny_flower" | "botania:metamorphic_desert_bricks_stairs" | "create:mixing/andesite_alloy" | "minecraft:polished_blackstone_stairs_from_polished_blackstone_stonecutting" | "minecraft:stripped_jungle_wood" | "minecraft:pink_dye_from_peony" | "create:cut_veridium_brick_slab_from_veridium_stonecutting" | "create:cutting/compat/byg/holly_wood" | "minecraft:bucket" | "create:compacting/chocolate" | "ae2:block_cutter/stairs/fluix_stairs" | "create:compat/supplementaries/milling/flax" | "minecraft:coal_from_blasting_deepslate_coal_ore" | "minecraft:chiseled_red_sandstone_from_red_sandstone_stonecutting" | "minecraft:polished_andesite" | "create:crafting/kinetics/white_seat_from_other_seat" | "create:cut_scorchia_brick_slab_from_scorchia_stonecutting" | "botania:brew/resistance" | "create:exposed_copper_tile_slab" | "minecraft:charcoal" | "create:compat/silentsgems/crushing/heliodor_ore" | "minecraft:diorite_wall_from_diorite_stonecutting" | "minecraft:polished_blackstone_brick_slab" | "botania:petal_magenta" | "minecraft:chiseled_deepslate" | "ae2:network/cables/smart_orange" | "minecraft:rabbit_stew_from_brown_mushroom" | "botania:light_blue_shiny_flower" | "ae2:network/cables/smart_lime" | "botania:pure_daisy/end_stone_to_cobbled_deepslate" | "ae2:network/cables/dense_smart_magenta" | "minecraft:soul_torch" | "botania:mana_infusion/chiseled_stone_bricks" | "create:cutting/stripped_jungle_wood" | "create:milling/lily_of_the_valley" | "create:cut_dripstone_brick_wall" | "itemfilters:damage" | "minecraft:warped_fence_gate" | "create:small_limestone_brick_wall_from_limestone_stonecutting" | "create:cut_calcite_from_calcite_stonecutting" | "create:cut_tuff_wall" | "ae2:tools/network_memory_card_light_gray" | "create:compat/environmental/milling/red_hibiscus" | "create:crafting/kinetics/super_glue" | "create:cutting/compat/architects_palette/twisted_wood" | "create:small_scoria_brick_wall_from_scoria_stonecutting" | "botania:dynamic/mana_gun_add_lens" | "botania:metamorphic_fungal_cobblestone_slab" | "create:polished_cut_calcite_slab_from_stone_types_calcite_stonecutting" | "minecraft:weathered_cut_copper_from_weathered_copper_stonecutting" | "minecraft:red_bed_from_white_bed" | "minecraft:gray_dye" | "create:compat/endergetic/splashing/petrified_overworld_corrock_crown" | "minecraft:warped_pressure_plate" | "botania:elven_trade/lexicon_elven" | "create:cut_scoria_brick_wall" | "minecraft:coal_block" | "botania:cosmetic_tiny_potato_mask" | "minecraft:cyan_bed_from_white_bed" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_bricks" | "create:cutting/compat/botania/glimmering_dreamwood" | "minecraft:slime_ball" | "create:crafting/kinetics/black_seat_from_other_seat" | "botania:travel_belt" | "botania:slab_recombine/metamorphic_mountain_bricks" | "create:item_application/brass_casing_from_wood" | "ae2:network/parts/energy_acceptor" | "ae2:materials/advancedcard" | "minecraft:cooked_porkchop" | "create:cutting/compat/byg/stripped_rainbow_eucalyptus_wood" | "create:cutting/compat/ecologics/stripped_azalea_log" | "ae2:network/cables/smart_light_blue" | "create:cutting/compat/silentgear/stripped_netherwood_wood" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_stone_wall" | "create:compat/endergetic/splashing/petrified_overworld_corrock" | "botania:metamorphic_swamp_cobblestone_slab" | "minecraft:oak_wood" | "botania:blaze_quartz_pillar" | "minecraft:emerald_block" | "create:cutting/dark_oak_wood" | "minecraft:magenta_stained_glass_pane" | "create:haunting/soul_sand" | "ae2:inscriber/silicon_press" | "ae2:matter_cannon/nuggets/tellurium" | "create:cut_limestone_brick_slab_recycling" | "botania:brew/night_vision" | "minecraft:chiseled_stone_bricks_from_stone_bricks_stonecutting" | "botania:chiseled_lavender_quartz" | "botania:corporea_retainer" | "botania:smelting/metamorphic_forest_stone" | "minecraft:end_stone_brick_slab_from_end_stone_brick_stonecutting" | "create:splashing/red_concrete_powder" | "create:cut_scorchia_brick_stairs_from_stone_types_scorchia_stonecutting" | "botania:elementium_chestplate" | "minecraft:iron_sword" | "minecraft:spruce_wood" | "create:polished_cut_diorite_from_diorite_stonecutting" | "create:crafting/materials/raw_zinc" | "minecraft:spruce_fence" | "ae2:network/parts/monitors_conversion" | "ae2:network/blocks/interfaces_interface_alt" | "create:compat/buzzier_bees/milling/buttercup" | "ae2:misc/deconstruction_certus_chiseled_quartz" | "create:cutting/compat/ecologics/coconut_log" | "ae2:tools/portable_fluid_cell_4k" | "create:tuff_pillar_from_tuff_stonecutting" | "create:milling/saddle" | "minecraft:dark_prismarine_slab" | "botania:runic_altar" | "minecraft:green_dye" | "create:small_scorchia_bricks_from_stone_types_scorchia_stonecutting" | "create:small_granite_brick_slab_recycling" | "minecraft:dried_kelp_from_smoking" | "create:small_ochrum_brick_slab_from_stone_types_ochrum_stonecutting" | "minecraft:chiseled_sandstone_from_sandstone_stonecutting" | "minecraft:waxed_exposed_cut_copper_stairs" | "botania:gray_floating_flower" | "botania:petal_light_blue_double" | "ae2:shaped/walls/sky_stone_brick" | "create:cutting/compat/silentgear/netherwood_wood" | "botania:quartz_red" | "create:cut_diorite_wall" | "create:crafting/curiosities/brown_toolbox" | "ae2:matter_cannon/nuggets/carbon" | "create:compat/upgrade_aquatic/cutting/river_log" | "create:deploying/waxed_weathered_copper_from_adding_wax" | "minecraft:smooth_red_sandstone_slab" | "minecraft:cut_copper_stairs_from_cut_copper_stonecutting" | "botania:metamorphic_plains_bricks" | "create:cut_tuff_brick_stairs_from_stone_types_tuff_stonecutting" | "create:cut_limestone_brick_wall_from_stone_types_limestone_stonecutting" | "botania:metamorphic_mesa_cobblestone_slab" | "minecraft:birch_trapdoor" | "minecraft:weathered_cut_copper_slab" | "ae2:network/cables/covered_light_gray" | "minecraft:prismarine_brick_stairs_from_prismarine_stonecutting" | "minecraft:deepslate_brick_wall_from_deepslate_bricks_stonecutting" | "minecraft:waxed_weathered_copper_from_honeycomb" | "itemfilters:custom" | "botania:green_petal_block" | "create:birch_window" | "botania:mana_infusion/bellethorn_chibi" | "minecraft:andesite_wall_from_andesite_stonecutting" | "botania:abstruse_platform" | "create:crafting/kinetics/metal_girder" | "create:crafting/kinetics/millstone" | "create:exposed_copper_shingle_stairs" | "create:small_veridium_brick_wall_from_veridium_stonecutting" | "minecraft:conduit" | "create:cutting/compat/byg/stripped_zelkova_log" | "minecraft:sticky_piston" | "minecraft:redstone" | "minecraft:blue_glazed_terracotta" | "botania:stonecutting/metamorphic_taiga_cobblestone_to_metamorphic_taiga_cobblestone_slab" | "create:compat/projectvibrantjourneys/cutting/stripped_maple_log" | "minecraft:powered_rail" | "ae2:tools/portable_fluid_cell_1k" | "minecraft:exposed_cut_copper_slab_from_exposed_copper_stonecutting" | "botania:dye_pink" | "botania:mana_infusion/mana_bottle" | "create:cutting/compat/blue_skies/stripped_bluebright_wood" | "minecraft:firework_star" | "minecraft:green_concrete_powder" | "create:cut_diorite_brick_stairs" | "botania:metamorphic_mountain_bricks_slab" | "create:milling/wool" | "botania:floating_orechid" | "botania:lens_flare" | "create:deploying/waxed_cut_copper_slab_from_adding_wax" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_stone_stairs" | "create:compat/projectvibrantjourneys/cutting/fir_log" | "botania:floating_narslimmus" | "botania:runic_altar/greed" | "botania:sunny_quartz_stairs" | "minecraft:blue_terracotta" | "create:cutting/compat/byg/maple_wood" | "create:cut_calcite_stairs" | "minecraft:stripped_oak_wood" | "create:small_tuff_brick_wall_from_stone_types_tuff_stonecutting" | "create:mixing/dough_by_mixing" | "create:cut_tuff_from_tuff_stonecutting" | "minecraft:yellow_concrete_powder" | "minecraft:gray_terracotta" | "minecraft:comparator" | "create:cutting/compat/byg/zelkova_log" | "botania:slab_recombine/metamorphic_mesa_cobblestone" | "botania:conversions/manadiamond_block_deconstruct" | "ae2:matter_cannon/nuggets/cobalt" | "create:compat/silentsgems/crushing/ammolite_ore" | "minecraft:netherite_boots_smithing" | "ae2:matter_cannon/nuggets/beryllium" | "create:exposed_copper_tile_slab_from_exposed_copper_tiles_stonecutting" | "botania:smelting/metamorphic_plains_stone" | "botania:livingrock_wall" | "botania:cosmetic_engineer_goggles" | "ae2:tools/paintballs_lumen_yellow" | "create:compat/upgrade_aquatic/milling/pink_searocket" | "minecraft:fishing_rod" | "botania:mana_infusion/quartz_deconstruct" | "botania:petal_apothecary/orechid_ignem" | "minecraft:cooked_beef_from_smoking" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_stone_slab" | "create:compat/environmental/milling/red_lotus_flower" | "minecraft:terracotta" | "create:exposed_copper_shingle_slab_from_exposed_copper_shingles_stonecutting" | "create:small_calcite_brick_wall" | "botania:magenta_floating_flower" | "botania:blue_pavement" | "botania:slab_recombine/red_pavement" | "create:cut_dripstone_wall" | "botania:mana_infusion/mana_pearl" | "botania:mana_infusion/slime_to_cactus" | "botania:stonecutting/livingrock_bricks_to_livingrock_bricks_wall" | "minecraft:granite_wall_from_granite_stonecutting" | "create:compat/silentsgems/crushing/zircon_ore" | "botania:mana_infusion/blue_orchid_to_allium" | "create:cutting/compat/byg/mahogany_log" | "create:compat/environmental/milling/white_delphinium" | "minecraft:cut_red_sandstone" | "create:crushing/raw_copper" | "create:cutting/compat/blue_skies/dusk_wood" | "create:polished_cut_veridium_slab" | "create:cutting/compat/byg/stripped_pine_log" | "create:cut_andesite_brick_stairs" | "minecraft:red_dye_from_tulip" | "ae2:network/cells/fluid_storage_cell_4k_storage" | "create:cut_tuff_stairs_from_stone_types_tuff_stonecutting" | "create:small_deepslate_bricks_from_stone_types_deepslate_stonecutting" | "minecraft:beacon" | "minecraft:tnt" | "minecraft:mossy_stone_bricks_from_vine" | "minecraft:andesite_slab_from_andesite_stonecutting" | "create:polished_cut_dripstone_wall_from_dripstone_block_stonecutting" | "create:milling/fern" | "create:cut_calcite_brick_slab" | "create:crushing/raw_tin_ore" | "minecraft:flint_and_steel" | "create:smelting/bread" | "botania:orechid/deepslate_redstone_ore" | "botania:blue_pavement_stairs" | "create:cut_andesite_brick_slab_from_andesite_stonecutting" | "create:haunting/haunted_bell" | "botania:mana_infusion/coarse_dirt" | "botania:brew/strength" | "create:crafting/copper/waxed_exposed_copper_shingles_from_honeycomb" | "minecraft:black_dye" | "create:cut_limestone_brick_stairs" | "create:polished_cut_deepslate_slab" | "botania:petal_purple_double" | "create:small_ochrum_brick_stairs_from_ochrum_stonecutting" | "minecraft:deepslate_brick_stairs_from_polished_deepslate_stonecutting" | "create:cut_scorchia_brick_wall_from_scorchia_stonecutting" | "create:cut_granite_wall_from_stone_types_granite_stonecutting" | "create:item_application/copper_casing_from_log" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_bricks_slab" | "create:crushing/raw_quicksilver_block" | "create:crafting/kinetics/blue_seat" | "create:cutting/compat/blue_skies/stripped_bluebright_log" | "botania:apothecary_default" | "botania:slab_recombine/metamorphic_plains_bricks" | "minecraft:white_wool_from_string" | "create:deploying/waxed_cut_copper_stairs_from_adding_wax" | "create:cut_dripstone_wall_from_dripstone_block_stonecutting" | "create:cutting/compat/biomesoplenty/stripped_willow_wood" | "create:polished_cut_scoria_wall_from_stone_types_scoria_stonecutting" | "minecraft:cobblestone_wall_from_cobblestone_stonecutting" | "ae2:network/cells/item_cell_housing" | "botania:purple_shiny_flower" | "botania:floating_daffomill" | "minecraft:white_stained_glass_pane" | "botania:slab_recombine/metamorphic_mesa_stone" | "minecraft:light_blue_stained_glass_pane" | "ae2:network/wireless_access_point" | "create:crafting/copper/waxed_copper_tile_slab_from_honeycomb" | "create:rose_quartz_tiles_from_polished_rose_quartz_stonecutting" | "minecraft:brown_concrete_powder" | "ae2:shaped/walls/smooth_sky_stone_block" | "botania:metamorphic_plains_stone_wall" | "minecraft:yellow_dye_from_sunflower" | "ae2:network/crafting/256k_cpu_crafting_storage" | "botania:purple_floating_flower" | "create:crafting/kinetics/windmill_bearing" | "create:small_crimsite_bricks_from_stone_types_crimsite_stonecutting" | "minecraft:crimson_hyphae" | "create:crafting/kinetics/turntable" | "create:cutting/compat/byg/stripped_fir_wood" | "minecraft:coal_from_smelting_coal_ore" | "minecraft:oak_slab" | "minecraft:orange_bed_from_white_bed" | "create:deploying/waxed_exposed_copper_from_adding_wax" | "create:cutting/compat/quark/stripped_azalea_log" | "create:compat/traverse/cutting/stripped_fir_log" | "botania:stonecutting/metamorphic_fungal_cobblestone_to_metamorphic_fungal_cobblestone_wall" | "create:tiled_glass_from_glass_colorless_stonecutting" | "create:milling/sea_pickle" | "create:smelting/silver_ingot_compat_thermal" | "create:crushing/nether_wart_block" | "botania:stonecutting/metamorphic_swamp_bricks_to_metamorphic_swamp_bricks_stairs" | "create:cut_deepslate_brick_wall_from_stone_types_deepslate_stonecutting" | "botania:conversions/dragonstone_block_deconstruct" | "create:cutting/compat/twilightforest/dark_log" | "ae2:decorative/certus_quartz_pillar" | "create:cutting/compat/byg/stripped_ebony_wood" | "create:pressing/iron_ingot" | "create:cut_deepslate_stairs" | "create:cut_tuff_brick_wall_from_stone_types_tuff_stonecutting" | "minecraft:yellow_wool" | "create:crafting/appliances/diving_helmet" | "create:cut_ochrum_brick_slab" | "botania:conversions/elementium_from_nuggets" | "botania:slab_recombine/metamorphic_mountain_stone" | "minecraft:grindstone" | "create:horizontal_framed_glass_from_glass_colorless_stonecutting" | "botania:corporea_stairs" | "minecraft:granite_slab_from_granite_stonecutting" | "create:small_tuff_bricks_from_tuff_stonecutting" | "botania:stonecutting/white_pavement_to_white_pavement_slab" | "minecraft:glass_pane" | "create:emptying/honey_bottle" | "botania:metamorphic_desert_stone_stairs" | "ae2:entropy/heat/ice_water" | "minecraft:golden_sword" | "create:small_diorite_brick_wall_from_diorite_stonecutting" | "create:cutting/compat/forbidden_arcanus/stripped_cherrywood" | "botania:runic_altar/spring" | "create:small_tuff_brick_wall" | "minecraft:clay" | "ae2:network/crafting/cpu_crafting_unit" | "create:polished_cut_granite_slab_from_stone_types_granite_stonecutting" | "botania:elven_trade/ender_pearl_return" | "ae2:shaped/slabs/smooth_sky_stone_block" | "create:crafting/kinetics/mechanical_plough" | "enderstorage:ender_pouch" | "create:compat/silentsgems/crushing/kyanite_ore" | "create:compacting/diorite_from_flint" | "ae2:misc/vanilla_daylight_detector" | "create:framed_glass_pane" | "create:compat/silentsgems/crushing/apatite_ore" | "minecraft:oxidized_cut_copper_stairs_from_oxidized_cut_copper_stonecutting" | "ae2:network/blocks/interfaces_interface_part" | "create:cut_deepslate_slab_from_deepslate_stonecutting" | "minecraft:furnace_minecart" | "create:compat/projectvibrantjourneys/cutting/stripped_palm_log" | "create:crafting/kinetics/cogwheel" | "create:compat/ae2/milling/gold" | "minecraft:gray_wool" | "create:small_veridium_brick_slab_from_veridium_stonecutting" | "ae2:materials/annihilationcore" | "minecraft:waxed_weathered_cut_copper" | "create:crafting/kinetics/blue_valve_handle_from_other_valve_handle" | "create:cut_granite_slab" | "botania:glimmering_livingwood" | "ae2:network/cables/dense_smart_from_smart" | "botania:metamorphic_mesa_stone_stairs" | "ae2:network/cables/covered_green" | "ae2:network/cables/dense_covered_green" | "minecraft:leather_boots" | "create:milling/dandelion" | "create:crafting/materials/zinc_block_from_compacting" | "create:cutting/compat/integrateddynamics/menril_wood" | "create:small_deepslate_brick_stairs_from_deepslate_stonecutting" | "create:crafting/kinetics/red_valve_handle_from_other_valve_handle" | "minecraft:black_carpet_from_white_carpet" | "minecraft:netherite_ingot_from_netherite_block" | "ae2:entropy/heat/snow_water" | "create:compat/ae2/crushing/charged_certus_ore" | "create:crafting/logistics/andesite_tunnel" | "botania:stonecutting/metamorphic_taiga_bricks_to_metamorphic_taiga_bricks_slab" | "create:cut_veridium_brick_stairs_from_veridium_stonecutting" | "create:layered_calcite_from_calcite_stonecutting" | "enderstorage:recolour_ender_chest" | "botania:smelting/metamorphic_desert_stone" | "create:weathered_copper_shingle_slab" | "botania:mana_infusion/manasteel" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_bricks_stairs" | "minecraft:red_nether_brick_slab_from_red_nether_bricks_stonecutting" | "minecraft:baked_potato_from_smoking" | "create:polished_cut_granite_wall" | "botania:stonecutting/sunny_quartz_to_sunny_quartz_slab" | "ae2:matter_cannon/nuggets/lithium" | "ae2:tools/network_memory_card_lime" | "minecraft:chiseled_stone_bricks" | "create:cut_scoria_slab_from_scoria_stonecutting" | "botania:lens_efficiency" | "ae2:network/cables/covered_purple" | "minecraft:polished_blackstone_brick_wall_from_blackstone_stonecutting" | "create:cut_ochrum_bricks_from_stone_types_ochrum_stonecutting" | "create:crushing/ochrum" | "create:cut_asurine_slab_recycling" | "minecraft:magma_block" | "botania:mana_infusion/sunflower_to_lilac" | "minecraft:polished_granite_stairs_from_granite_stonecutting" | "create:cutting/stripped_oak_wood" | "botania:lens_influence" | "create:cut_limestone_wall_from_stone_types_limestone_stonecutting" | "botania:dynamic/mana_gun_add_clip" | "minecraft:spruce_pressure_plate" | "minecraft:purple_terracotta" | "botania:petal_blue" | "create:small_granite_brick_stairs_from_stone_types_granite_stonecutting" | "botania:pool_minecart" | "botania:metamorphic_swamp_stone_stairs" | "minecraft:deepslate_tiles_from_deepslate_bricks_stonecutting" | "minecraft:deepslate_tile_slab_from_deepslate_tiles_stonecutting" | "botania:mana_infusion/dandelion_to_poppy" | "minecraft:hay_block" | "create:small_deepslate_brick_stairs" | "create:crafting/kinetics/vertical_gearboxfrom_conversion" | "create:vertical_framed_glass_pane" | "minecraft:end_stone_bricks_from_end_stone_stonecutting" | "botania:phantom_ink" | "create:milling/ink_sac" | "create:limestone_pillar_from_stone_types_limestone_stonecutting" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_stone_wall" | "create:haunting/warped_fungus" | "create:cutting/compat/byg/blue_enchanted_wood" | "create:jungle_window" | "ae2:network/parts/monitors_storage" | "botania:orechid_ignem/ancient_debris" | "botania:mana_infusion/wheat_seeds_to_potato" | "minecraft:smooth_quartz_slab_from_smooth_quartz_stonecutting" | "create:compat/endergetic/splashing/petrified_end_corrock_crown" | "create:deploying/waxed_exposed_cut_copper_from_adding_wax" | "create:small_tuff_brick_slab_recycling" | "create:compat/betterendforge/pressing/crystal_moss_path" | "ae2:matter_cannon/nuggets/osmium" | "botania:petal_light_gray_double" | "create:compat/botania/milling/purple_petal" | "create:polished_cut_tuff_stairs" | "create:cut_diorite_brick_wall_from_diorite_stonecutting" | "create:polished_cut_andesite_slab_recycling" | "create:sequenced_assembly/track" | "create:polished_cut_andesite_stairs_from_stone_types_andesite_stonecutting" | "create:cut_tuff_brick_stairs_from_tuff_stonecutting" | "botania:mana_infusion/glow_berries_to_apple" | "create:layered_tuff_from_tuff_stonecutting" | "create:mixing/tea" | "create:cut_calcite_slab" | "minecraft:waxed_exposed_cut_copper_slab" | "create:crafting/kinetics/train_door" | "create:crafting/kinetics/rotation_speed_controller" | "minecraft:dark_oak_fence" | "create:cut_deepslate_wall" | "create:cutting/compat/twilightforest/stripped_sorting_log" | "botania:red_petal_block" | "create:polished_cut_diorite_wall_from_diorite_stonecutting" | "minecraft:cut_copper" | "botania:livingrock_bricks" | "create:cutting/compat/byg/jacaranda_log" | "botania:stonecutting/yellow_pavement_to_yellow_pavement_slab" | "botania:metamorphic_plains_bricks_stairs" | "create:polished_cut_dripstone_slab" | "minecraft:waxed_oxidized_cut_copper_slab_from_waxed_oxidized_copper_stonecutting" | "create:polished_cut_diorite_wall_from_stone_types_diorite_stonecutting" | "botania:stonecutting/livingrock_to_livingrock_bricks" | "botania:dynamic/lens_dye" | "botania:terra_plate/terrasteel_ingot" | "create:cutting/compat/twilightforest/stripped_dark_wood" | "create:diorite_pillar_from_diorite_stonecutting" | "create:blasting/ingot_tin_compat_mekanism" | "botania:mana_infusion/terracotta_to_red_sand" | "botania:runic_altar/pride" | "ae2:network/cables/covered_black" | "botania:petal_lime" | "minecraft:smooth_sandstone_stairs" | "ae2:network/cables/dense_smart_purple" | "ae2:tools/certus_quartz_wrench" | "minecraft:blaze_powder" | "minecraft:copper_ingot_from_blasting_copper_ore" | "create:cutting/compat/byg/stripped_cherry_wood" | "minecraft:chain" | "create:compat/ae2/crushing/certus_ore" | "create:cutting/compat/byg/imparius_hyphae" | "create:exposed_copper_shingle_stairs_from_exposed_copper_shingles_stonecutting" | "create:crafting/copper/waxed_weathered_copper_tiles_from_honeycomb" | "minecraft:oak_fence" | "create:polished_cut_calcite_wall_from_stone_types_calcite_stonecutting" | "minecraft:rabbit_stew_from_red_mushroom" | "create:blasting/lead_ingot_compat_thermal" | "minecraft:prismarine_brick_stairs" | "botania:stonecutting/metamorphic_mesa_bricks_to_metamorphic_mesa_bricks_wall" | "create:polished_cut_tuff_from_tuff_stonecutting" | "ae2:tools/network_memory_card_blue" | "botania:chiseled_livingrock_bricks" | "create:small_veridium_bricks_from_stone_types_veridium_stonecutting" | "create:crafting/kinetics/orange_valve_handle_from_other_valve_handle" | "botania:brew/haste" | "ae2:matter_cannon/nuggets/lanthanum" | "ae2:network/blocks/inscribers" | "create:polished_cut_scorchia_from_scorchia_stonecutting" | "create:cut_ochrum_stairs_from_ochrum_stonecutting" | "create:polished_cut_tuff_stairs_from_tuff_stonecutting" | "ae2:network/cells/spatial_storage_cell_2_cubed" | "minecraft:exposed_cut_copper_stairs_from_exposed_copper_stonecutting" | "create:splashing/cyan_concrete_powder" | "botania:tornado_rod" | "botania:mana_infusion/birch_log_to_jungle_log" | "create:cut_andesite_brick_slab_recycling" | "create:cut_tuff_stairs" | "minecraft:netherite_block" | "create:oxidized_copper_shingle_slab" | "botania:mana_infusion/chorus_fruit_to_flower" | "minecraft:deepslate" | "create:haunting/crimson_fungus" | "ae2:matter_cannon/nuggets/palladium" | "create:milling/pink_tulip" | "ae2:inscriber/calculation_processor" | "ae2:materials/cardcrafting" | "botania:mana_infusion/lily_pad_to_vine" | "create:cut_dripstone_brick_stairs_from_stone_types_dripstone_stonecutting" | "create:cutting/compat/twilightforest/stripped_twilight_oak_log" | "create:crafting/logistics/redstone_contact" | "create:crushing/deepslate_iron_ore" | "create:cut_calcite_slab_from_calcite_stonecutting" | "ae2:network/cables/dense_covered_gray" | "minecraft:crossbow" | "botania:lime_shiny_flower" | "create:cut_granite_brick_stairs_from_stone_types_granite_stonecutting" | "create:compat/atmospheric/cutting/stripped_grimwood_log" | "botania:mana_infusion/clayconia_chibi" | "botania:slab_recombine/livingrock" | "ae2:tools/certus_quartz_spade" | "create:crushing/diorite_recycling" | "botania:floating_jaded_amaranthus" | "minecraft:diamond" | "minecraft:crimson_slab" | "minecraft:prismarine_slab_from_prismarine_stonecutting" | "create:crafting/kinetics/light_gray_valve_handle_from_other_valve_handle" | "create:cut_limestone_wall_from_limestone_stonecutting" | "botania:metamorphic_mesa_bricks" | "ae2:network/cables/dense_covered_black" | "botania:mossy_livingrock_bricks_stairs" | "botania:corporea_crystal_cube" | "ae2:network/blocks/controller" | "create:compat/druidcraft/cutting/elder_log" | "minecraft:deepslate_tile_wall_from_deepslate_bricks_stonecutting" | "create:crafting/curiosities/peculiar_bell" | "botania:stonecutting/metamorphic_desert_stone_to_metamorphic_desert_stone_stairs" | "minecraft:green_terracotta" | "create:filling/honey_bottle" | "create:polished_cut_tuff_wall" | "minecraft:white_stained_glass" | "create:compat/silentsgems/crushing/pyrope_ore" | "create:polished_cut_limestone_wall" | "botania:orechid/coal_ore" | "create:compat/silentsgems/crushing/lepidolite_ore" | "create:layered_asurine_from_stone_types_asurine_stonecutting" | "botania:stonecutting/metamorphic_swamp_stone_to_metamorphic_swamp_bricks_wall" | "create:cut_calcite_wall_from_calcite_stonecutting" | "ae2:network/cells/fluid_storage_cell_64k" | "botania:orechid/copper_ore" | "ae2:tools/network_memory_card_magenta" | "create:cut_diorite_brick_stairs_from_stone_types_diorite_stonecutting" | "create:small_scoria_brick_stairs_from_stone_types_scoria_stonecutting" | "ae2:tools/paintballs_pink" | "minecraft:waxed_oxidized_cut_copper_from_waxed_oxidized_copper_stonecutting" | "botania:fork_light_relay" | "minecraft:purpur_stairs" | "botania:stripped_dreamwood_stairs" | "create:splashing/yellow_concrete_powder" | "botania:stonecutting/metamorphic_plains_cobblestone_to_metamorphic_plains_cobblestone_wall" | "botania:quartz_dark" | "create:andesite_pillar_from_stone_types_andesite_stonecutting" | "ae2:misc/fluixpearl" | "ae2:network/cables/glass_light_gray" | "botania:metamorphic_forest_bricks_wall" | "create:cut_limestone_brick_slab_from_limestone_stonecutting" | "minecraft:mossy_cobblestone_stairs" | "itemfilters:and" | "itemfilters:always_true_from_others" | "ae2:network/parts/toggle_bus" | "create:small_limestone_brick_slab" | "create:cut_limestone_stairs_from_stone_types_limestone_stonecutting" | "botania:metamorphic_fungal_stone_stairs" | "create:polished_cut_crimsite_slab_recycling" | "minecraft:blue_bed" | "create:sandpaper_polishing/rose_quartz" | "create:cutting/compat/blue_skies/stripped_cherry_wood" | "botania:metamorphic_mountain_bricks_stairs" | "create:crafting/kinetics/magenta_valve_handle_from_other_valve_handle" | "botania:virus_nullodermal" | "create:polished_cut_veridium_wall_from_veridium_stonecutting" | "create:crimsite_pillar_from_crimsite_stonecutting" | "create:crafting/kinetics/mechanical_harvester" | "ae2:network/cables/dense_smart_gray" | "create:polished_cut_scorchia_stairs" | "botania:slab_recombine/metamorphic_desert_stone" | "ae2:tools/paintballs_lumen_pink" | "enderstorage:recolour_ender_pouch" | "create:blasting/ingot_nickel_compat_immersiveengineering" | "minecraft:sponge" | "minecraft:quartz_stairs" | "botania:manasteel_shovel" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_bricks_slab" | "create:cut_veridium_slab_from_stone_types_veridium_stonecutting" | "botania:lens_light" | "minecraft:quartz_from_blasting" | "ae2:network/parts/terminals_pattern_encoding" | "minecraft:red_stained_glass" | "botania:mossy_livingrock_bricks_vine" | "create:small_calcite_brick_slab_recycling" | "create:cutting/compat/biomesoplenty/stripped_redwood_log" | "minecraft:light_gray_stained_glass_pane_from_glass_pane" | "create:compat/druidcraft/cutting/darkwood_log" | "minecraft:green_carpet" | "minecraft:purpur_slab" | "minecraft:waxed_exposed_cut_copper_from_honeycomb" | "botania:cosmetic_puffy_scarf" | "botania:corporea_brick_wall" | "minecraft:chiseled_polished_blackstone_from_blackstone_stonecutting" | "botania:yellow_petal_block" | "botania:conversions/orange_petal_block_deconstruct" | "minecraft:gold_nugget" | "create:cut_ochrum_slab_from_stone_types_ochrum_stonecutting" | "minecraft:beetroot_soup" | "create:small_dripstone_brick_slab" | "botania:brew/soul_cross" | "create:compat/betterendforge/pressing/amber_moss_path" | "create:blasting/ingot_silver_compat_immersiveengineering" | "create:cut_ochrum_slab_from_ochrum_stonecutting" | "ae2:misc/deconstruction_certus_quartz_pillar" | "botania:super_travel_belt" | "minecraft:lime_terracotta" | "create:crafting/kinetics/stressometerfrom_conversion" | "create:crushing/raw_zinc_block" | "minecraft:blackstone_slab_from_blackstone_stonecutting" | "minecraft:jungle_wood" | "minecraft:waxed_oxidized_cut_copper" | "minecraft:lime_bed_from_white_bed" | "minecraft:gray_stained_glass_pane_from_glass_pane" | "create:milling/wither_rose" | "minecraft:stone_slab" | "create:copper_shingle_slab_from_copper_shingles_stonecutting" | "botania:petal_apothecary/entropinnyum" | "botania:blue_petal_block" | "botania:stonecutting/metamorphic_mesa_cobblestone_to_metamorphic_mesa_cobblestone_stairs" | "ae2:tools/nether_quartz_sword" | "botania:petal_cyan" | "create:small_calcite_brick_wall_from_stone_types_calcite_stonecutting" | "minecraft:acacia_slab" | "minecraft:brick_stairs_from_bricks_stonecutting" | "minecraft:jungle_stairs" | "minecraft:blast_furnace" | "create:cut_scoria_bricks_from_stone_types_scoria_stonecutting" | "minecraft:polished_andesite_stairs" | "create:small_crimsite_brick_slab" | "ae2:materials/cardenergy" | "create:small_asurine_brick_stairs_from_asurine_stonecutting" | "create:polished_cut_asurine_slab_recycling" | "minecraft:light_blue_stained_glass_pane_from_glass_pane" | "minecraft:magenta_dye_from_lilac" | "create:cutting/oak_log" | "botania:runic_altar/summer" | "ae2:materials/carddistribution" | "ae2:network/parts/import_bus" | "botania:yellow_pavement_slab" | "botania:livingrock_bricks_wall" | "create:cut_veridium_slab_from_veridium_stonecutting" | "ae2:network/crafting/16k_cpu_crafting_storage" | "create:cut_scorchia_brick_slab_from_stone_types_scorchia_stonecutting" | "ae2:network/upgrade_wireless_crafting_terminal" | "botania:stonecutting/corporea_block_to_corporea_brick_wall" | "minecraft:blue_stained_glass_pane_from_glass_pane" | "create:milling/cornflower" | "minecraft:red_sandstone_wall_from_red_sandstone_stonecutting" | "create:weathered_copper_tile_slab_from_weathered_copper_tiles_stonecutting" | "create:acacia_window" | "create:smelting/glass_pane_from_vertical_framed_glass_pane" | "create:compat/environmental/milling/blue_delphinium" | "botania:red_shiny_flower" | "create:cut_veridium_brick_slab" | "create:cut_crimsite_brick_stairs" | "ae2:network/cables/glass_pink" | "ae2:network/cables/smart_cyan" | "minecraft:cobbled_deepslate_stairs" | "create:cutting/compat/byg/stripped_mahogany_log" | "botania:metamorphic_forest_stone_stairs" | "minecraft:baked_potato" | "minecraft:fletching_table" | "minecraft:waxed_exposed_cut_copper_stairs_from_waxed_exposed_copper_stonecutting" | "minecraft:cooked_salmon" | "botania:stonecutting/green_pavement_to_green_pavement_slab" | "minecraft:mossy_cobblestone_wall" | "minecraft:spyglass" | "create:smelting/glass_from_horizontal_framed_glass" | "botania:metamorphic_mountain_cobblestone_wall" | "botania:mana_infusion/oxeye_daisy_to_cornflower" | "minecraft:pink_stained_glass" | "botania:starfield" | "minecraft:golden_leggings" | "create:small_andesite_brick_wall_from_andesite_stonecutting" | "minecraft:end_stone_brick_wall_from_end_stone_brick_stonecutting" | "botania:glimmering_stripped_livingwood_from_log" | "botania:conversions/brown_petal_block_deconstruct" | "create:cut_dripstone_slab_recycling" | "botania:stonecutting/blaze_quartz_to_blaze_quartz_slab" | "create:oxidized_copper_tile_stairs" | "create:cutting/jungle_wood" | "minecraft:stone_pressure_plate" | "create:cut_asurine_brick_wall" | "create:polished_cut_ochrum_from_ochrum_stonecutting" | "minecraft:yellow_stained_glass_pane" | "botania:dynamic/spell_cloth_apply" | "create:cut_granite_brick_stairs_from_granite_stonecutting" | "botania:yellow_pavement" | "minecraft:diorite_slab_from_diorite_stonecutting" | "botania:cosmetic_alien_antenna" | "create:crafting/kinetics/yellow_seat" | "create:deploying/waxed_oxidized_copper_tile_stairs_from_adding_wax" | "create:cutting/compat/biomesoplenty/willow_log" | "botania:slab_recombine/green_pavement" | "create:cutting/compat/twilightforest/sorting_wood" | "botania:mana_infusion/potato_unpoison" | "create:crushing/amethyst_cluster" | "botania:lens_mine" | "create:polished_cut_dripstone_from_stone_types_dripstone_stonecutting" | "ae2:shaped/walls/sky_stone_block" | "botania:horn_leaves" | "ae2:tools/fluix_pickaxe" | "minecraft:oxidized_cut_copper_from_oxidized_copper_stonecutting" | "minecraft:bone_meal_from_bone_block" | "minecraft:bread" | "create:crushing/crimsite_recycling" | "ae2:tools/portable_item_cell_64k" | "create:compat/atmospheric/splashing/red_arid_sand" | "minecraft:lever" | "create:blasting/zinc_ingot_from_raw_ore" | "botania:floating_hydroangeas" | "create:crushing/deepslate_copper_ore" | "botania:mana_infusion/mana_glass" | "botania:water_rod" | "botania:horn_grass" | "botania:mana_infusion/tiny_potato" | "minecraft:end_stone_brick_wall_from_end_stone_stonecutting" | "botania:spectral_platform" | "minecraft:cobbled_deepslate_slab_from_cobbled_deepslate_stonecutting" | "create:cutting/compat/quark/stripped_blossom_log" | "create:crafting/kinetics/portable_fluid_interface" | "ae2:inscriber/engineering_processor_print" | "botania:light_launcher" | "create:cutting/compat/twilightforest/stripped_twilight_oak_wood" | "create:polished_cut_crimsite_slab_from_crimsite_stonecutting" | "create:deploying/waxed_copper_tiles_from_adding_wax" | "botania:stonecutting/dark_quartz_to_dark_quartz_slab" | "create:cutting/compat/tconstruct/stripped_greenheart_wood" | "minecraft:dark_oak_trapdoor" | "ae2:matter_cannon/nuggets/antimony" | "minecraft:black_banner" | "create:cutting/compat/byg/stripped_zelkova_wood" | "minecraft:green_carpet_from_white_carpet" | "create:small_diorite_brick_stairs_from_diorite_stonecutting" | "minecraft:iron_shovel" | "create:compat/silentsgems/crushing/chrysoprase_ore" | "ae2:smelting/smooth_sky_stone_block" | "create:cut_scoria_slab" | "create:smelting/ingot_lead_compat_immersiveengineering" | "botania:stonecutting/metamorphic_fungal_stone_to_metamorphic_fungal_bricks" | "create:cutting/compat/architects_palette/stripped_twisted_wood" | "ae2:matter_cannon/nuggets/sheep" | "minecraft:polished_deepslate_slab" | "create:splashing/red_sand" | "create:cut_limestone_slab_from_stone_types_limestone_stonecutting" | "botania:stonecutting/elf_quartz_to_elf_quartz_pillar" | "create:compat/projectvibrantjourneys/cutting/maple_log" | "botania:floating_solegnolia" | "create:layered_ochrum_from_ochrum_stonecutting" | "ae2:tools/paintballs_lumen_white" | "minecraft:black_bed_from_white_bed" | "botania:cacophonium" | "create:crafting/appliances/linked_controller" | "create:cut_scoria_brick_wall_from_scoria_stonecutting" | "botania:livingwood_planks" | "minecraft:orange_glazed_terracotta" | "minecraft:pink_carpet" | "create:emptying/builders_tea" | "botania:black_floating_flower" | "minecraft:deepslate_bricks" | "botania:stonecutting/metamorphic_taiga_stone_to_chiseled_metamorphic_taiga_bricks" | "create:calcite_pillar_from_stone_types_calcite_stonecutting" | "minecraft:waxed_exposed_copper_from_honeycomb" | "minecraft:waxed_weathered_cut_copper_stairs" | "botania:stonecutting/corporea_brick_to_corporea_brick_stairs" | "create:crushing/deepslate_emerald_ore" | "ae2:special/facade" | "minecraft:mossy_stone_brick_stairs" | "minecraft:cooked_chicken" | "botania:metamorphic_taiga_cobblestone_slab" | "botania:stonecutting/metamorphic_forest_stone_to_metamorphic_forest_bricks_wall" | "botania:lens_redirect" | "minecraft:amethyst_block" | "create:granite_pillar_from_stone_types_granite_stonecutting" | "ae2:decorative/sky_stone_brick" | "minecraft:oak_door" | "botania:stonecutting/metamorphic_plains_stone_to_metamorphic_plains_stone_wall" | "create:cutting/compat/byg/ebony_log" | "create:cutting/compat/byg/stripped_cika_log" | "botania:floating_kekimurus" | "ae2:network/cells/item_storage_cell_256k" | "botania:dynamic/phantom_ink_apply" | "botania:floating_rosa_arcana" | "create:deploying/waxed_exposed_copper_tiles_from_adding_wax" | "minecraft:nether_brick" | "botania:purple_petal_block" | "create:crafting/kinetics/wrench" | "botania:elementium_shovel" | "botania:prism" | "minecraft:polished_diorite_stairs_from_diorite_stonecutting" | "create:cut_scoria_stairs_from_stone_types_scoria_stonecutting" | "create:cutting/compat/ecologics/walnut_log" | "botania:petal_purple" | "botania:dynamic/mana_gun_remove_lens" | "create:compat/silentsgems/crushing/rose_quartz_ore" | "minecraft:spruce_door" | "botania:mana_quartz_stairs" | "minecraft:brown_wool" | "ae2:network/cables/dense_smart_white" | "create:crafting/kinetics/propeller" | "botania:metamorphic_swamp_bricks_slab" | "create:cutting/compat/biomesoplenty/stripped_palm_wood" | "ae2:shaped/stairs/sky_stone_brick" | "minecraft:purple_bed" | "botania:vine_ball" | "create:compat/druidcraft/crushing/fiery_glass_ore" | "botania:cosmetic_devil_horns" | "create:cutting/compat/biomesoplenty/jacaranda_wood" | "create:cut_scoria_stairs" | "botania:mana_infusion/rotten_flesh_to_leather" | "botania:livingwood_planks_slab" | "create:cutting/compat/byg/cherry_log" | "create:cut_diorite_brick_wall_from_stone_types_diorite_stonecutting" | "minecraft:dark_prismarine" | "ae2:tools/fluix_sword" | "botania:balance_cloak" | "create:crafting/kinetics/furnace_minecart_from_contraption_cart" | "minecraft:leather_horse_armor" | "ae2:network/cables/glass_magenta" | "create:splashing/thermal/crushed_lead_ore" | "botania:lens_light_alt" | "minecraft:candle" | "minecraft:polished_blackstone_brick_slab_from_polished_blackstone_stonecutting" | "minecraft:waxed_oxidized_cut_copper_slab_from_waxed_oxidized_cut_copper_stonecutting" | "minecraft:wheat" | "create:cutting/acacia_log" | "create:cut_tuff_brick_stairs" | "ae2:smelting/silicon_from_certus_quartz_dust" | "create:small_scoria_brick_wall" | "create:cut_scoria_wall_from_stone_types_scoria_stonecutting" | "ae2:network/blocks/spatial_io_port" | "botania:conversions/elementium_to_nuggets" | "minecraft:deepslate_tile_slab_from_cobbled_deepslate_stonecutting" | "botania:mana_infusion/flowering_azalea_leaves_dupe" | "create:cut_calcite_slab_recycling" | "botania:stonecutting/metamorphic_mesa_cobblestone_to_metamorphic_mesa_cobblestone_wall" | "ae2:network/cables/glass_fluix_clean" | "botania:runic_altar/winter" | "minecraft:bow" | "botania:cobweb" | "create:cutting/compat/twilightforest/mining_log" | "create:cut_ochrum_slab_recycling" | "create:polished_cut_calcite_stairs" | "ae2:matter_cannon/nuggets/xenon" | "botania:mushroom_stew" | "minecraft:andesite_stairs" | "botania:super_lava_pendant" | "ae2:matter_cannon/nuggets/coal" | "botania:cosmetic_clock_eye" | "botania:mana_infusion/dark_quartz_deconstruct" | "create:cut_limestone_from_stone_types_limestone_stonecutting" | "botania:stonecutting/sunny_quartz_to_sunny_quartz_pillar" | "create:cutting/compat/byg/stripped_mangrove_wood" | "minecraft:light_blue_carpet_from_white_carpet" | "minecraft:jungle_slab" | "botania:floating_dreadthorn" | "botania:metamorphic_desert_cobblestone_stairs" | "ae2:tools/network_memory_card_cyan" | "create:cut_ochrum_brick_slab_recycling" | "ae2:network/parts/storage_bus" | "botania:slab_recombine/blue_pavement" | "minecraft:skull_banner_pattern" | "botania:spark" | "minecraft:dark_oak_boat" | "create:blasting/ingot_aluminum_compat_immersiveengineering" | "botania:tiny_planet" | "create:compat/projectvibrantjourneys/cutting/stripped_willow_log" | "minecraft:copper_ingot_from_smelting_deepslate_copper_ore" | "create:small_diorite_brick_stairs" | "minecraft:mossy_stone_brick_wall" | "botania:stonecutting/metamorphic_taiga_bricks_to_chiseled_metamorphic_taiga_bricks" | "ae2:block_cutter/stairs/sky_stone_brick_stairs" | "botania:conversions/blue_petal_block_deconstruct" | "create:cutting/compat/botania/stripped_livingwood" | "minecraft:granite" | "minecraft:melon_seeds" | "botania:mana_mirror" | "create:crafting/kinetics/clutch" | "botania:ghost_rail" | "create:cutting/stripped_acacia_wood" | "minecraft:firework_rocket_simple" | "create:milling/orange_tulip" | "minecraft:black_dye_from_wither_rose" | "create:crafting/kinetics/encased_fan" | "botania:manaweave_cloth" | "create:smelting/lead_ingot_compat_thermal" | "create:compat/silentsgems/crushing/sapphire_ore" | "minecraft:andesite" | "create:haunting/soul_campfire" | "botania:black_pavement" | "create:polished_cut_diorite_slab" | "create:crafting/kinetics/lime_seat_from_other_seat" | "create:polished_cut_andesite_slab_from_andesite_stonecutting" | "botania:stripped_dreamwood_slab" | "ae2:network/cables/glass_yellow" | "botania:quartz_blaze" | "ae2:shaped/stairs/sky_stone_block" | "create:cutting/compat/byg/stripped_blue_enchanted_log" | "ae2:network/cables/covered_white" | "create:cut_deepslate_brick_slab_from_stone_types_deepslate_stonecutting" | "ae2:matter_cannon/nuggets/aluminum" | "create:cutting/compat/byg/fungal_imparius_stem" | "create:polished_cut_calcite_slab_recycling" | "create:crafting/kinetics/brown_seat_from_other_seat" | "create:crafting/kinetics/red_seat_from_other_seat" | "create:deploying/waxed_exposed_cut_copper_stairs_from_adding_wax" | "botania:stonecutting/metamorphic_desert_cobblestone_to_metamorphic_desert_cobblestone_slab" | "minecraft:packed_ice" | "create:smelting/ingot_tin_compat_mekanism" | "minecraft:stone" | "ae2:matter_cannon/nuggets/zinc" | "minecraft:blackstone_stairs" | "botania:mana_infusion/spruce_log_to_birch_log" | "minecraft:deepslate_tile_slab_from_deepslate_bricks_stonecutting" | "botania:mana_ring_greater" | "create:crafting/copper/waxed_oxidized_copper_tiles_from_honeycomb" | "create:crafting/appliances/tree_fertilizer" | "botania:elf_quartz" | "botania:alchemy_catalyst" | "botania:redstone_root" | "ae2:tools/paintballs_brown" | "create:crafting/kinetics/display_board" | "create:cut_tuff_slab_from_tuff_stonecutting" | "botania:glimmering_stripped_livingwood_log" | "botania:metamorphic_fungal_bricks_stairs" | "minecraft:cobbled_deepslate_wall" | "create:cutting/compat/tconstruct/greenheart_wood" | "create:polished_cut_crimsite_stairs" | "minecraft:purpur_slab_from_purpur_block_stonecutting" | "botania:mana_infusion/vine_to_lily_pad" | "minecraft:nether_brick_fence" | "ae2:matter_cannon/nuggets/germanium" | "ae2:tools/paintballs_lumen_magenta" | "botania:lava_pendant" | "create:polished_cut_limestone_slab_recycling" | "botania:petal_apothecary/loonium" | "create:small_asurine_brick_wall_from_stone_types_asurine_stonecutting" | "create:haunting/infested_stone" | "create:layered_diorite_from_stone_types_diorite_stonecutting" | "create:polished_cut_crimsite_wall" | "minecraft:smooth_stone" | "ae2:tools/certus_quartz_sword" | "ae2:network/cables/dense_covered_orange" | "create:cutting/compat/byg/lament_wood" | "botania:slab_recombine/metamorphic_desert_cobblestone" | "create:compat/silentsgems/crushing/turquoise_ore" | "ae2:network/cables/dense_smart_light_gray" | "minecraft:iron_ingot_from_blasting_raw_iron" | "create:cut_deepslate_brick_stairs_from_deepslate_stonecutting" | "botania:conversions/elementium_block_deconstruct" | "create:small_asurine_brick_wall_from_asurine_stonecutting" | "create:compat/endergetic/splashing/petrified_nether_corrock" | "minecraft:purple_carpet" | "botania:runic_altar/mana" | "botania:slab_recombine/metamorphic_fungal_stone" | "botania:stonecutting/metamorphic_taiga_stone_to_metamorphic_taiga_bricks_slab" | "minecraft:polished_granite_slab_from_granite_stonecutting" | "botania:floating_pollidisiac" | "botania:orechid/lapis_ore" | "botania:metamorphic_desert_bricks" | "create:crafting/kinetics/mechanical_press" | "botania:hourglass" | "create:ornate_iron_window" | "minecraft:ender_eye" | "botania:cosmetic_kamui_eye" | "create:cut_granite_slab_from_granite_stonecutting" | "minecraft:polished_deepslate_wall_from_polished_deepslate_stonecutting" | "create:crushing/obsidian" | "create:cut_andesite_brick_slab_from_stone_types_andesite_stonecutting" | "botania:stonecutting/green_pavement_to_green_pavement_stairs" | "minecraft:birch_slab" | "create:cut_scorchia_brick_slab_recycling" | "create:cut_scoria_brick_wall_from_stone_types_scoria_stonecutting" | "botania:petal_apothecary/gourmaryllis" | "create:milling/gravel" | "create:cutting/compat/blue_skies/crystallized_log" | "create:cutting/compat/byg/stripped_holly_log" | "minecraft:waxed_cut_copper_stairs" | "minecraft:quartz_bricks_from_quartz_block_stonecutting" | "create:tiled_glass_pane" | "minecraft:green_candle" | "botania:shimmerrock_stairs" | "minecraft:waxed_weathered_cut_copper_stairs_from_honeycomb" | "minecraft:pink_stained_glass_pane_from_glass_pane" | "botania:white_pavement_stairs" | "create:smelting/ingot_uranium_compat_mekanism" | "create:cutting/compat/byg/witch_hazel_wood" | "create:small_veridium_brick_wall" | "minecraft:stone_hoe" | "create:cut_deepslate_brick_wall" | "ae2:network/parts/terminals_pattern_access" | "minecraft:coal_from_smelting_deepslate_coal_ore" | "create:cut_scoria_brick_stairs_from_scoria_stonecutting" | "botania:floating_munchdew" | "create:cutting/compat/twilightforest/stripped_transformation_log" | "ae2:block_cutter/walls/quartz_wall" | "ae2:network/blocks/io_condenser" | "minecraft:exposed_cut_copper_stairs_from_exposed_cut_copper_stonecutting" | "botania:petal_apothecary/vazkii_head" | "ae2:network/cables/covered_pink" | "create:small_ochrum_brick_wall" | "minecraft:cooked_mutton_from_campfire_cooking" | "create:layered_veridium_from_veridium_stonecutting" | "botania:mana_void" | "botania:pattern_3_1" | "create:small_tuff_brick_stairs_from_stone_types_tuff_stonecutting" | "create:blasting/ingot_lead_compat_immersiveengineering" | "botania:pattern_3_2" | "botania:elementium_axe" | "create:small_scoria_bricks_from_stone_types_scoria_stonecutting" | "minecraft:cooked_beef" | "minecraft:cooked_mutton_from_smoking" | "minecraft:hopper_minecart" | "minecraft:blue_stained_glass_pane" | "botania:petal_apothecary/rafflowsia" | "minecraft:oxidized_cut_copper" | "botania:petal_apothecary/agricarnation" | "ae2:entropy/heat/cobblestone_stone" | "create:crushing/raw_gold" | "create:cut_ochrum_from_ochrum_stonecutting" | "create:compat/botania/milling/light_blue_petal" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_stone_stairs" | "botania:mana_infusion/diorite_to_granite" | "create:smelting/ingot_osmium_compat_mekanism" | "minecraft:gold_nugget_from_smelting" | "minecraft:chiseled_quartz_block_from_quartz_block_stonecutting" | "create:filling/sweet_roll" | "create:cutting/acacia_wood" | "botania:pixie_ring" | "create:cut_ochrum_brick_stairs_from_ochrum_stonecutting" | "botania:smelting/metamorphic_fungal_stone" | "botania:drum_gathering" | "create:cutting/compat/byg/stripped_palm_wood" | "minecraft:light_gray_concrete_powder" | "botania:stonecutting/metamorphic_swamp_bricks_to_metamorphic_swamp_bricks_slab" | "ae2:network/cables/dense_smart_black" | "create:cut_deepslate_stairs_from_deepslate_stonecutting" | "ae2:materials/cardredstone" | "ae2:matter_cannon/nuggets/strontium" | "create:small_deepslate_brick_slab_from_deepslate_stonecutting" | "create:cutting/stripped_birch_wood" | "botania:dark_quartz_pillar" | "minecraft:diorite_stairs" | "create:crafting/copper/waxed_exposed_copper_tile_slab_from_honeycomb" | "create:cutting/compat/byg/willow_log" | "create:crafting/kinetics/green_seat_from_other_seat" | "create:cut_crimsite_slab" | "create:polished_cut_crimsite_from_crimsite_stonecutting" | "botania:stonecutting/metamorphic_mountain_stone_to_metamorphic_mountain_bricks" | "botania:stonecutting/metamorphic_forest_bricks_to_chiseled_metamorphic_forest_bricks" | "create:cutting/compat/quark/blossom_wood" | "create:cut_veridium_from_stone_types_veridium_stonecutting" | "botania:elven_trade/diamond_block_return" | "create:dripstone_pillar_from_dripstone_block_stonecutting" | "create:dark_oak_window_pane" | "botania:lexicon" | "botania:ice_pendant" | "create:splashing/lime_concrete_powder" | "minecraft:deepslate_brick_wall_from_polished_deepslate_stonecutting" | "minecraft:weathered_cut_copper_slab_from_weathered_cut_copper_stonecutting" | "ae2:block_cutter/walls/quartz_pillar_wall" | "create:cutting/compat/twilightforest/time_log" | "create:small_andesite_brick_slab_from_stone_types_andesite_stonecutting" | "create:cut_veridium_slab_recycling" | "ae2:network/cables/smart_blue" | "create:deploying/waxed_weathered_copper_tiles_from_adding_wax" | "minecraft:end_stone_brick_stairs_from_end_stone_stonecutting" | "create:small_scorchia_brick_slab" | "create:crafting/logistics/content_observerfrom_conversion" | "botania:turntable" | "create:crushing/emerald_ore" | "ae2:network/cells/item_storage_components_cell_1k_part" | "botania:mana_infusion/granite_to_andesite" | "botania:floating_hopperhock_chibi" | "botania:floating_fallen_kanade" | "minecraft:netherite_scrap" | "create:crafting/kinetics/wooden_bracket" | "botania:orange_floating_flower" | "botania:petal_apothecary/rosa_arcana" | "minecraft:cut_sandstone" | "botania:petal_white" | "botania:stonecutting/metamorphic_mesa_stone_to_metamorphic_mesa_stone_wall" | "create:mixing/honey" | "ae2:network/cables/dense_smart_orange" | "botania:brew/feather_feet" | "minecraft:shulker_box_coloring" | "create:cutting/compat/ecologics/stripped_coconut_log" | "create:cutting/stripped_dark_oak_log" | "botania:stonecutting/livingrock_to_livingrock_stairs" | "create:cutting/compat/blue_skies/stripped_starlit_log" | "create:cutting/compat/byg/stripped_aspen_log" | "minecraft:nether_brick_slab" | "create:splashing/white_concrete_powder" | "enderstorage:ender_chest" | "ae2:block_cutter/slabs/smooth_sky_stone_slab" | "botania:mana_infusion/blaze_rod_to_nether_wart" | "create:weathered_copper_shingle_stairs" | "create:crafting/logistics/redstone_link" | "minecraft:deepslate_tile_stairs_from_polished_deepslate_stonecutting" | "create:small_scorchia_brick_slab_from_stone_types_scorchia_stonecutting" | "create:small_dripstone_brick_slab_from_stone_types_dripstone_stonecutting" | "minecraft:enchanting_table" | "ae2:network/blocks/crystal_processing_quartz_growth_accelerator" | "minecraft:white_glazed_terracotta" | "botania:mana_tablet" | "minecraft:blue_carpet_from_white_carpet" | "create:cutting/compat/ars_nouveau/stripped_green_archwood_log" | "minecraft:lead" | "botania:petal_apothecary/munchdew" | "botania:framed_dreamwood" | "botania:livingwood_fence_gate" | "minecraft:campfire" | "create:cut_asurine_from_stone_types_asurine_stonecutting" | "create:cut_tuff_bricks_from_stone_types_tuff_stonecutting" | "create:cutting/compat/forbidden_arcanus/cherrywood_log" | "minecraft:brick_stairs" | "enderstorage:ender_tank" | "create:polished_cut_scorchia_from_stone_types_scorchia_stonecutting" | "minecraft:stripped_spruce_wood" | "minecraft:acacia_wood" | "botania:sunny_quartz" | "create:cut_tuff_from_stone_types_tuff_stonecutting" | "botania:petal_apothecary/endoflame" | "ae2:tools/network_memory_card_red" | "create:cutting/compat/byg/stripped_palm_log" | "create:small_deepslate_brick_wall" | "create:dripstone_pillar_from_stone_types_dripstone_stonecutting" | "create:acacia_window_pane" | "create:cut_granite_brick_slab_from_stone_types_granite_stonecutting" | "botania:mana_infusion/grass" | "minecraft:waxed_cut_copper_from_waxed_copper_block_stonecutting" | "create:crafting/logistics/stockpile_switchfrom_conversion" | "create:cutting/compat/byg/stripped_rainbow_eucalyptus_log" | "botania:metamorphic_swamp_bricks" | "minecraft:black_stained_glass" | "ae2:matter_cannon/nuggets/potassium" | "create:compat/atmospheric/milling/scalding_monkey_brush" | "create:cut_diorite_brick_wall";
    type LangKey = "block.minecraft.brown_terracotta" | "entity.minecraft.area_effect_cloud" | "gui.ae2.Drive" | "botania.triggers.manaDetector" | "multiplayer.disconnect.flying" | "create.ponder.piston_pole.text_2" | "block.ae2.quartz_wall" | "create.ponder.piston_pole.text_1" | "item.minecraft.potion.effect.weakness" | "block.minecraft.dark_prismarine_slab" | "item.botania.terrasteel_ingot" | "botania.entry.manaEnchanting" | "create.hint.full_deployer" | "botania.challenge.runeCrafter.desc" | "patchouli.gui.lexicon.button.config" | "block.botania.forest_eye" | "block.botania.chiseled_sunny_quartz" | "item.create.example_item.tooltip.behaviour2" | "item.create.example_item.tooltip.behaviour1" | "key.keyboard.world.1" | "botania.page.overgrowthSeed1" | "key.keyboard.world.2" | "botania.page.elfMessage5" | "block.minecraft.banner.straight_cross.cyan" | "botania.page.elfMessage6" | "gui.tooltips.ae2.CycleProcessingOutput" | "botania.page.overgrowthSeed0" | "botania.page.elfMessage0" | "botania.page.elfMessage1" | "botania.page.elfMessage2" | "botania.page.elfMessage3" | "botania.page.elfMessage4" | "advancement.botania:craftingHaloCraft.desc" | "commands.bossbar.remove.success" | "create.schedule.condition.idle" | "block.minecraft.sculk_sensor" | "gamerule.disableElytraMovementCheck" | "create.ponder.mechanical_arm_redstone.text_1" | "item.botania.lens_redirect.short" | "create.ponder.mechanical_arm_redstone.text_2" | "create.ponder.mechanical_arm_redstone.text_3" | "block.minecraft.banner.creeper.orange" | "advancements.nether.create_full_beacon.description" | "ftbquests.file.defaults.quest_disable_jei" | "block.create.polished_cut_dripstone_stairs" | "botania.tagline.terraformRod" | "block.create.copper_tiles" | "botania.tagline.superTravelBelt" | "block.minecraft.banner.mojang.cyan" | "ftbquests.reward.ftbquests.advancement.criterion" | "item.ae2.matter_cannon" | "create.tooltip.chute.header" | "subtitles.entity.iron_golem.hurt" | "block.botania.elementium_block" | "item.minecraft.bowl" | "block.botania.metamorphic_plains_bricks_stairs" | "item.ftbquests.book.tooltip" | "item.minecraft.bone_meal" | "block.botania.metamorphic_mountain_cobblestone_slab" | "biome.ae2.spatial_storage" | "block.botania.hopperhock" | "block.create.cut_crimsite_bricks" | "botania.entry.enderEyeBlock" | "create.station.failed" | "block.create.cut_limestone_wall" | "multiplayer.status.no_connection" | "botania.tagline.prism" | "commands.forge.tracking.entity.enabled" | "commands.team.leave.success.single" | "commands.locate.invalid" | "create.gui.sequenced_gearshift.instruction.turn_distance.descriptive" | "block.minecraft.banner.stripe_bottom.light_blue" | "create.schedule.condition.time_of_day.rotation" | "block.minecraft.end_stone" | "block.create.cut_veridium_stairs" | "block.minecraft.potted_white_tulip" | "chat.cannotSend" | "mco.download.title" | "block.minecraft.banner.botania_sword.white" | "item.minecraft.splash_potion.effect.fire_resistance" | "botania.page.rfGenerator0" | "botania.page.rfGenerator1" | "botania.entry.redString" | "stat.minecraft.damage_dealt" | "createWorld.customize.presets.list" | "block.botania.orange_floating_flower" | "block.minecraft.quartz_pillar" | "title.32bit.deprecation.realms.check" | "ftbquests.task.ftbquests.buildcraft_mj.value" | "ftbquests.file.defaults.consume_items" | "block.minecraft.oak_planks" | "block.create.polished_cut_andesite_slab" | "subtitles.entity.piglin.celebrate" | "block.botania.glimmering_stripped_dreamwood_log" | "tutorial.socialInteractions.title" | "block.minecraft.purple_shulker_box" | "item.ae2.wrapped_generic_stack" | "commands.item.source.not_a_container" | "block.minecraft.potatoes" | "block.botania.metamorphic_mountain_bricks" | "datapackFailure.safeMode" | "block.minecraft.light_blue_bed" | "create.ponder.cogwheel_casing.text_1" | "botania.tagline.labellia" | "create.ponder.cogwheel_casing.text_2" | "create.ponder.cogwheel_casing.text_3" | "block.minecraft.banner.botania_sapling.gray" | "create.ponder.brass_funnel.header" | "item.botania.composite_lens" | "create.command.killTPSCommand.status.usage.0" | "advancements.adventure.honey_block_slide.title" | "create.command.killTPSCommand.status.usage.1" | "create.item_attributes.placeable.inverted" | "item.create.example_item.tooltip.condition1" | "subtitles.entity.player.levelup" | "item.create.example_item.tooltip.condition2" | "boundBlock.wireframe.enabled" | "item.itemfilters.not" | "ftbquests.null" | "gui.socialInteractions.blocking_hint" | "biome.minecraft.warped_forest" | "create.subtitle.cranking" | "ftbquests.task.ftbquests.npc_dialog.id" | "item.minecraft.book" | "block.minecraft.banner.gradient.brown" | "gui.ae2.WirelessTerminal" | "create.item_attributes.enchanted.inverted" | "create.schedule.condition.redstone_link_on" | "create.ponder.next_up" | "block.minecraft.banner.curly_border.gray" | "block.minecraft.black_shulker_box" | "subtitles.block.amethyst_block.chime" | "advancement.botania:spawnerMoverUse" | "block.botania.chiseled_lavender_quartz" | "create.schedule.condition.player_count" | "create.display_link.too_far" | "block.create.clutch" | "item.create.tree_fertilizer.tooltip.condition1" | "mco.template.trailer.tooltip" | "botania.entry.labellia" | "create.gui.attribute_filter.deny_list" | "advancements.end.find_end_city.title" | "block.botania.red_quartz_stairs" | "item.ae2.biometric_card" | "ftbquests.task.ftbquests.item.view_items" | "entity.minecraft.evoker" | "botania.tagline.spectranthemum" | "item.create.polished_rose_quartz" | "block.minecraft.brick_slab" | "create.gui.schematicannon.option.dontReplaceSolid.description" | "subtitles.entity.slime.hurt" | "commands.jfr.stopped" | "ftbquests.chapter.image" | "gamerule.reducedDebugInfo.description" | "block.minecraft.brown_wool" | "subtitles.entity.ghast.ambient" | "subtitles.entity.ravager.stunned" | "arguments.function.tag.unknown" | "entity.minecraft.turtle" | "ftbquests.reward.ftbquests.ftb_money" | "botania.entry.shinyFlowers" | "block.ftbquests.barrier" | "ftbquests.quest.shape.default" | "subtitles.entity.bee.loop" | "create.item_attributes.in_tag" | "create.display_source.value_list.full_number" | "create.item_attributes.hauntable.inverted" | "item.minecraft.bone" | "advancements.story.cure_zombie_villager.title" | "advancement.botania:flugelEye.desc" | "item.create.tree_fertilizer.tooltip.behaviour1" | "create.train.relocate.too_far" | "selectWorld.edit.save" | "argument.angle.incomplete" | "item.botania.dreamwood_twig" | "block.minecraft.polished_andesite" | "create.schematicAndQuill.title" | "fml.messages.version.restriction.any" | "item.minecraft.lapis_lazuli" | "block.botania.green_pavement_stairs" | "block.minecraft.banner.diagonal_right.orange" | "mco.configure.world.buttons.switchminigame" | "item.ae2.lime_paint_ball" | "create.tooltip.chute.items_move_up" | "block.botania.dragonstone_block" | "subtitles.entity.guardian.attack" | "commands.experience.add.levels.success.single" | "commands.effect.clear.specific.success.single" | "ftbquests.file.defaults" | "botaniamisc.changes4" | "botaniamisc.changes3" | "botaniamisc.changes2" | "botaniamisc.changes1" | "botaniamisc.changes0" | "create.item_attributes.has_name.inverted" | "item.botania.quartz_blaze" | "subtitles.entity.generic.death" | "block.create.black_seat" | "block.minecraft.banner.square_bottom_left.gray" | "commands.scoreboard.objectives.display.set" | "ftbquests.quest.size" | "botaniamisc.changes5" | "advancements.nether.explore_nether.description" | "commands.bossbar.set.visibility.unchanged.visible" | "pack.source.builtin" | "botaniamisc.pinkinatorDesc" | "item.ae2.printed_calculation_processor" | "commands.perf.reportFailed" | "botania.tagline.aIntro" | "botaniamisc.peacefulNoob" | "block.minecraft.cyan_stained_glass" | "block.botania.metamorphic_fungal_cobblestone_stairs" | "block.botania.metamorphic_fungal_stone_slab" | "item.minecraft.fox_spawn_egg" | "block.create.placard.tooltip" | "gui.tooltips.ae2.Craft" | "item.create.example_item.tooltip.action1" | "block.minecraft.spruce_slab" | "waila.ae2.Contains" | "advancement.create.arm_blaze_burner.desc" | "botania.tagline.pistonRelay" | "create.ponder.tag.arm_targets" | "create.ponder.tag.contraption_actor.description" | "block.minecraft.banner.creeper.red" | "options.autoJump" | "subtitles.entity.piglin.admiring_item" | "block.minecraft.oak_trapdoor" | "options.framerate" | "block.minecraft.glass" | "forge.nameTagDistance" | "container.hopper" | "botania.page.waterRing1" | "botania.page.waterRing0" | "ftbquests.gui.collect_rewards" | "block.minecraft.white_bed" | "createWorld.customize.custom.presets.title" | "subtitles.entity.pillager.ambient" | "stat.minecraft.damage_dealt_resisted" | "entity.minecraft.item_frame" | "item.minecraft.tropical_fish" | "ftbquests.team" | "subtitles.entity.villager.work_toolsmith" | "block.botania.blaze_quartz_pillar" | "block.create.train_trapdoor" | "item.minecraft.tipped_arrow.effect.harming" | "createWorld.customize.custom.riverSize" | "botania.nei.pureDaisy" | "block.minecraft.banner.triangle_bottom.light_blue" | "create.ponder.close" | "block.minecraft.cartography_table" | "subtitles.block.bubble_column.whirlpool_ambient" | "block.botania.floating_bubbell_chibi" | "subtitles.entity.guardian.death" | "botania.subtitle.airRod" | "jei.chat.error.no.cheat.permission.enabled" | "create.schedule.condition.editor" | "block.ftbquests.screen.task_index" | "item.ae2.printed_engineering_processor" | "create.boiler.water_dots" | "commands.enchant.success.multiple" | "subtitles.entity.llama.spit" | "achievement.ae2.PortableCell" | "patchouli.gui.lexicon.button.history" | "create.subtitle.controller_put" | "commands.advancement.revoke.many.to.many.failure" | "item.ae2.green_covered_cable" | "advancements.story.deflect_arrow.description" | "create.ponder.shaft.header" | "block.minecraft.pink_bed" | "debug.creative_spectator.help" | "block.minecraft.glow_lichen" | "create.station.assemble_train" | "block.botania.yellow_mystical_flower" | "entity.minecraft.villager.butcher" | "subtitles.entity.panda.death" | "ftbquests.reward.ftbquests.npc_mail.time_past" | "block.minecraft.banner.half_horizontal_bottom.light_gray" | "block.minecraft.raw_copper_block" | "gamerule.doMobSpawning.description" | "block.create.polished_cut_diorite" | "ftbteams.info.owner" | "patchouli.subtitle.book_flip" | "block.minecraft.skeleton_skull" | "subtitles.block.shulker_box.close" | "team.visibility.hideForOwnTeam" | "block.minecraft.banner.botania_spark_dispersive.red" | "gui.stats" | "gui.ae2.Linked" | "block.botania.hydroangeas.reference" | "block.minecraft.banner.stripe_left.pink" | "botaniamisc.notYourSagittarius" | "mco.upload.done" | "block.minecraft.banner.base.black" | "block.botania.metamorphic_mesa_cobblestone_stairs" | "botania.tagline.cosmeticBaubles" | "ftbquests.chapter_groups" | "create.schedule.condition.delay_short" | "block.minecraft.bricks" | "block.create.jungle_window_pane" | "advancement.create.long_travel" | "stats.tooltip.type.statistic" | "block.minecraft.diorite_slab" | "gui.ae2.StorageBus" | "create.generic.clockwise" | "stat.lootr.looted_stat" | "block.create.cut_scorchia" | "block.create.light_gray_toolbox" | "block.minecraft.banner.border.black" | "config.jei.advanced.modNameFormat" | "pack.incompatible" | "debug.pause_focus.on" | "block.minecraft.dark_oak_planks" | "block.minecraft.banner.botania_lexicon.black" | "block.botania.sunny_quartz_pillar" | "block.minecraft.melon_stem" | "color.minecraft.yellow" | "multiplayer.status.unknown" | "item.minecraft.iron_pickaxe" | "block.minecraft.mossy_cobblestone_stairs" | "forge.experimentalsettings.tooltip" | "config.jei.valid" | "commands.whitelist.alreadyOn" | "create.command.killTPSCommand" | "commands.bossbar.create.failed" | "tag.botania.mana_using_items" | "botania.page.terraSword0" | "botania.page.terraSword1" | "mco.configure.world.spawnMonsters" | "disconnect.loginFailedInfo" | "create.track.selection_cleared" | "multiplayer.requiredTexturePrompt.disconnect" | "achievement.ae2.SpatialIOExplorer" | "subtitles.entity.shulker_bullet.hurt" | "create.display_source.boiler.not_enough_space" | "item.ae2.import_bus" | "gui.ae2.Produces" | "block.minecraft.bubble_coral_fan" | "block.minecraft.deepslate_coal_ore" | "block.minecraft.dead_fire_coral" | "block.minecraft.brain_coral_fan" | "botania.tagline.corporeaIndex" | "botania.baubletooltip" | "sleep.skipping_night" | "entity.minecraft.zombie_villager" | "container.enchant.lapis.many" | "botania.entry.thornChakram" | "item.minecraft.wandering_trader_spawn_egg" | "subtitles.entity.parrot.imitate.witch" | "options.chat.height.unfocused" | "subtitles.entity.stray.ambient" | "block.minecraft.bed.not_safe" | "botania.brew.resistance" | "block.minecraft.banner.straight_cross.light_blue" | "advancement.create.long_bend" | "block.minecraft.banner.diagonal_up_right.gray" | "fml.modmismatchscreen.additional" | "block.create.turntable.tooltip" | "advancements.end.find_end_city.description" | "create.ponder.weighted_ejector.text_10" | "commands.drop.success.multiple" | "create.ponder.weighted_ejector.text_11" | "item.minecraft.iron_axe" | "mco.selectServer.openserver" | "create.ponder.belt_directions.text_6" | "create.ponder.belt_directions.text_4" | "create.ponder.belt_directions.text_5" | "commands.team.option.collisionRule.unchanged" | "create.ponder.belt_directions.text_2" | "options.vsync" | "create.tooltip.deployer.using" | "create.ponder.belt_directions.text_3" | "block.botania.livingwood_slab" | "item.botania.goddess_charm" | "block.create.scoria_pillar" | "create.ponder.belt_directions.text_1" | "container.enchant.level.requirement" | "subtitles.entity.piglin_brute.angry" | "gamerule.forgiveDeadPlayers.description" | "block.create.copper_tile_slab" | "gamerule.doTileDrops" | "structure_block.show_air" | "subtitles.block.iron_trapdoor.open" | "options.accessibility.text_background.chat" | "block.ftbquests.progress_detector.object" | "botania.armorset.will_verac.desc" | "chat.type.text.narrate" | "create.train.status.no_match" | "block.minecraft.grass_block" | "commands.enchant.failed.level" | "chat.link.confirmTrusted" | "botania.page.flasks0" | "create.ponder.millstone.header" | "subtitles.entity.dolphin.ambient_water" | "botania.page.flasks1" | "botania.page.flasks2" | "translation.test.complex" | "ftbquests.task.ftbquests.botania_mana.text" | "botania.armorset.will_dharok.desc" | "commands.setidletimeout.success" | "block.create.cuckoo_clock.tooltip" | "item.botania.lens_paint" | "block.botania.apothecary_fungal" | "block.minecraft.banner.botania_spark_dominant.brown" | "block.minecraft.banner.gradient_up.white" | "block.minecraft.banner.small_stripes.yellow" | "block.ae2.vibration_chamber" | "botaniamisc.cantCraft" | "botania.tagline.flowers" | "botania.page.incense5" | "botania.page.incense4" | "key.right" | "block.minecraft.banner.bricks.green" | "subtitles.entity.villager.yes" | "block.botania.tigerseye.reference" | "item.botania.divining_rod" | "botania.page.incense3" | "advancements.adventure.totem_of_undying.description" | "botania.page.incense2" | "botania.page.incense1" | "botania.page.incense0" | "block.minecraft.banner.botania_tiny_potato.yellow" | "gamerule.drowningDamage" | "block.minecraft.banner.triangle_top.cyan" | "botania.subtitle.missile" | "subtitles.entity.generic.splash" | "event.minecraft.raid.victory" | "block.botania.metamorphic_fungal_bricks_stairs" | "block.ftbquests.loot_crate_opener.rightclick" | "key.keyboard.keypad.equal" | "subtitles.block.pressure_plate.click" | "argument.uuid.invalid" | "item.itemfilters.filter" | "block.botania.red_quartz_pillar" | "block.botania.brown_mystical_flower" | "item.minecraft.blaze_spawn_egg" | "botania.page.astrolabe0" | "botania.page.astrolabe1" | "item.ae2.wireless_receiver" | "botania.page.astrolabe2" | "create.flap_display.cycles.shortened_numbers" | "create.action.confirm" | "block.botania.white_petal_block" | "botania.entry.superTravelBelt" | "block.create.cut_granite_brick_wall" | "create.display_source.nixie_tube" | "block.create.cut_veridium" | "commands.advancement.grant.criterion.to.one.success" | "create.ponder.auto_schedule.header" | "block.botania.metamorphic_fungal_bricks_wall" | "block.minecraft.warped_slab" | "block.create.cut_veridium_brick_slab" | "item.create.linked_controller.tooltip.summary" | "item.ae2.fluix_smart_cable" | "botania.challenge.cobbleGen.desc" | "block.botania.cyan_buried_petals" | "item.dyed" | "commands.drop.no_loot_table" | "block.create.fluid_tank" | "botania.page.divaCharm1" | "botania.page.divaCharm0" | "botania.page.manaBlaster0" | "botania.page.manaBlaster1" | "botania.page.manaBlaster2" | "botania.page.manaBlaster3" | "advancement.create.track_crafting_factory" | "block.minecraft.banner.stripe_middle.orange" | "mco.configure.world.spawnAnimals" | "theoneprobe.ae2.p2p_frequency" | "botania.entry.hyacidus" | "advancement.create.extendo_grip.desc" | "block.minecraft.magma_block" | "botania.tagline.flasks" | "block.create.gray_seat" | "commands.forge.gen.complete" | "fml.modloading.missinglicense" | "gui.tooltips.ae2.SchedulingModeRandom" | "tutorial.find_tree.title" | "block.minecraft.pumpkin" | "subtitles.entity.mule.death" | "create.ponder.empty_blaze_burner.text_6" | "block.create.yellow_valve_handle" | "create.ponder.empty_blaze_burner.text_5" | "create.ponder.empty_blaze_burner.text_4" | "block.create.lime_valve_handle" | "create.ponder.empty_blaze_burner.text_3" | "create.ponder.empty_blaze_burner.text_2" | "create.ponder.empty_blaze_burner.text_1" | "block.create.chocolate" | "create.display_source.station_summary.minutes" | "ftbquests.file.emergency_items_cooldown.tooltip" | "advancement.create.root.desc" | "block.minecraft.sponge" | "options.online.title" | "block.botania.vinculotus" | "block.minecraft.light_gray_candle" | "botania.challenge.shulkMeNotSetup" | "forge.configgui.logCascadingWorldGeneration" | "create.schematicAndQuill.noTarget" | "options.sounds" | "item.minecraft.golden_boots" | "advancement.create.andesite_alloy" | "create.schematicAndQuill.abort" | "commands.locatebiome.success" | "item.ae2.gray_glass_cable" | "subtitles.entity.evoker.prepare_summon" | "gui.jei.category.blasting" | "create.track_target.missing" | "block.minecraft.banner.stripe_downright.light_blue" | "lootr.advancements.10loot.description" | "item.ae2.memory_card_light_gray" | "advMode.mode.auto" | "botania.page.invisibilityCloak0" | "mco.template.title.minigame" | "botania.page.invisibilityCloak1" | "create.ponder.shared.rpm32" | "death.attack.create.cuckoo_clock_explosion" | "block.minecraft.banner.botania_spark_dispersive.green" | "dataPack.validation.working" | "botania.entry.crystalBow" | "argument.entity.options.y.description" | "gui.tooltips.ae2.TransferDirection" | "block.minecraft.cocoa" | "create.ponder.shared.rpm16" | "botania.page.vineBall2" | "botania.page.vineBall3" | "botania.page.vineBall0" | "botania.page.vineBall1" | "block.minecraft.banner.cross.purple" | "commands.curios.clearAll.success" | "create.train.status.found_driver" | "botania.entry.gIntro" | "item.minecraft.carrot" | "block.minecraft.red_sand" | "entity.botania.spark" | "block.minecraft.banner.botania_sword.green" | "create.crafting_blueprint.display_slot" | "gui.ae2.PowerInputRate" | "botania.entry.corporeaInterceptor" | "create.action.discard" | "achievement.ae2.CraftingCPU" | "block.minecraft.banner.curly_border.yellow" | "create.recipe.assembly.pressing" | "disconnect.endOfStream" | "advancement.create.compacting" | "block.minecraft.wet_sponge" | "stat.minecraft.open_chest" | "botania.page.lexicon3" | "botania.page.lexicon2" | "botania.page.lexicon1" | "block.minecraft.quartz_stairs" | "botania.page.lexicon0" | "create.display_source.kinetic_stress.current" | "commands.advancement.grant.many.to.one.success" | "connect.joining" | "gui.tooltips.ae2.TrashController" | "commands.team.option.name.success" | "item.minecraft.oak_boat" | "create.gui.terrainzapper.placement.inserted" | "advancement.botania:generatingFlower" | "block.create.black_nixie_tube" | "item.minecraft.stone_sword" | "block.minecraft.white_shulker_box" | "item.ae2.portable_item_cell_4k" | "ftbteams.api_override" | "ftbquests.gui.required_by" | "advancements.husbandry.breed_all_animals.title" | "botania.page.redString12" | "block.minecraft.chiseled_nether_bricks" | "botania.page.redString13" | "botania.page.redString10" | "botania.page.redString11" | "block.minecraft.melon" | "key.jei.clearSearchBar" | "botania.page.redString14" | "block.create.orange_seat" | "block.minecraft.banner.botania_tiny_potato.lime" | "block.minecraft.banner.globe.light_gray" | "item.minecraft.flower_banner_pattern" | "item.ae2.portable_item_cell_1k" | "advancement.create.train_crash_backwards" | "create.schedule.auto_removed_from_train" | "gui.ae2.TankCapacity" | "options.chat.scale" | "biome.minecraft.end_midlands" | "ftbquests.reward.ftbquests.item.only_one.tooltip" | "effect.minecraft.bad_omen" | "fancySkybox.enable" | "botania.entry.welcome" | "subtitles.entity.experience_orb.pickup" | "commands.experience.query.levels" | "item.itemfilters.damage.description" | "item.botania.spark_upgrade_isolated" | "botania.entry.kingKey" | "subtitles.entity.turtle.hurt_baby" | "block.botania.purple_floating_flower" | "block.minecraft.banner.triangle_bottom.green" | "block.minecraft.banner.circle.yellow" | "botania.entry.sextant" | "waila.ae2.Crafting" | "block.create.layered_tuff" | "item.minecraft.firework_star.fade_to" | "lootr.advancements.1shulker.description" | "item.minecraft.music_disc_cat" | "gui.tooltips.ae2.SortBy" | "block.minecraft.banner.botania_axe.black" | "subtitles.entity.cow.ambient" | "block.minecraft.oak_wood" | "block.minecraft.powered_rail" | "gui.ae2.PortableCells" | "argument.dimension.invalid" | "botaniamisc.retainer.retain_all" | "ftbquests.task.ftbquests.ftb_money" | "block.minecraft.banner.botania_hoe.pink" | "commands.team.option.prefix.success" | "entity.minecraft.husk" | "botania.page.openCrate0" | "botania.page.openCrate1" | "botania.page.openCrate2" | "botania.challenge.fullCropFarm.desc" | "gui.ae2.CellWorkbench" | "create.gui.terrainzapper.tool.place" | "block.minecraft.banner.mojang.light_blue" | "botania.tagline.brewery" | "advancement.create.track_crafting_factory.desc" | "block.botania.cyan_double_flower" | "block.minecraft.green_shulker_box" | "entity.minecraft.wither_skeleton" | "block.create.blaze_burner" | "block.minecraft.banner.botania_tiny_potato.blue" | "botania.tagline.enderEyeBlock" | "theoneprobe.ae2.channels" | "commands.bossbar.set.name.success" | "argument.integer.big" | "commands.reload.failure" | "block.botania.white_mystical_flower" | "block.minecraft.petrified_oak_slab" | "ftbquests.task.ftbquests.item.hide_valid_items" | "gui.ae2.ImportBus" | "botania.tagline.crystalBow" | "block.minecraft.banner.square_bottom_left.light_gray" | "botania.challenge.runeCrafter" | "selectWorld.gameMode.adventure" | "advancements.adventure.arbalistic.description" | "create.subtitle.saw_activate_stone" | "item.ae2.light_blue_lumen_paint_ball" | "block.minecraft.banner.half_vertical.pink" | "argument.component.invalid" | "block.minecraft.zombie_head" | "create.schedule.condition.redstone_link.frequency_powered" | "commands.tag.remove.success.multiple" | "waila.ae2.DeviceMissingChannel" | "block.minecraft.warped_roots" | "gui.ae2.security.inject.name" | "item.botania.gaiahead" | "commands.recipe.take.success.single" | "botania.entry.medumone" | "block.botania.bifrost_pane" | "options.attack.hotbar" | "botania.entry.phantomInk" | "block.minecraft.banner.bricks.white" | "menu.multiplayer" | "arguments.swizzle.invalid" | "botania.entry.openCrate" | "ftbquests.gui.change_progress.complete" | "subtitles.entity.arrow.hit" | "botania.tagline.fallenKanade" | "item.ae2.certus_quartz_wrench" | "item.botania.elementium_helmet" | "gui.tooltips.ae2.NumberOfItems" | "ftbquests.task.ftbquests.fluid.fluid" | "botaniamisc.lotusDesc" | "block.minecraft.sand" | "gui.ae2.LightBlue" | "create.ponder.track_placement.text_1" | "create.ponder.track_placement.text_2" | "create.ponder.track_placement.text_3" | "create.ponder.track_placement.text_4" | "create.ponder.track_placement.text_5" | "waila.ae2.P2PInputManyOutputs" | "create.ponder.track_placement.text_6" | "create.ponder.track_placement.text_7" | "create.ponder.track_placement.text_8" | "structure_block.integrity" | "block.minecraft.stripped_oak_log" | "block.minecraft.smooth_quartz_stairs" | "options.mouseWheelSensitivity" | "commands.data.get.invalid" | "argument.double.low" | "botania.challenge.entropinnyumSetup" | "subtitles.block.end_portal_frame.fill" | "subtitles.entity.puffer_fish.flop" | "create.station.one_bogey" | "block.minecraft.azalea_leaves" | "structure_block.size_success" | "item.minecraft.potion.effect.poison" | "block.ae2.4k_crafting_storage" | "block.minecraft.banner.botania_spark_dispersive.purple" | "advancements.husbandry.safely_harvest_honey.title" | "mco.configure.world.restore.download.question.line2" | "mco.configure.world.restore.download.question.line1" | "create.ponder.funnel_redstone.text_1" | "botania.entry.headCreating" | "stat.minecraft.damage_absorbed" | "ftbquests.reward.collected" | "create.train.status.opposite_driver" | "selectWorld.gameMode.hardcore.line2" | "selectWorld.gameMode.hardcore.line1" | "block.minecraft.acacia_slab" | "item.minecraft.tipped_arrow.effect.slowness" | "subtitles.entity.dolphin.jump" | "create.generic.unit.rpm" | "create.schedule.condition.player_count.or_above" | "botaniamisc.santaweaveInfo" | "block.minecraft.banner.triangles_bottom.yellow" | "block.create.content_observer.tooltip.summary" | "block.create.red_toolbox" | "item.minecraft.music_disc_otherside.desc" | "botania.tagline.jadedAmaranthus" | "jei.tooltip.error.recipe.transfer.inventory.full" | "selectWorld.incompatible_series" | "soundCategory.voice" | "attribute.name.generic.knockback_resistance" | "createWorld.customize.custom.lowerLimitScale" | "subtitles.entity.wolf.shake" | "botania.challenge.battery.desc" | "item.botania.fire_rod" | "multiplayer.texturePrompt.failure.line1" | "biome.minecraft.old_growth_spruce_taiga" | "multiplayer.texturePrompt.failure.line2" | "botania.tagline.openBucket" | "block.minecraft.light_gray_concrete_powder" | "item.minecraft.splash_potion.effect.mundane" | "block.create.cut_deepslate_brick_wall" | "create.ponder.fluid_tank_storage.text_1" | "block.minecraft.banner.gradient.pink" | "create.ponder.fluid_tank_storage.text_2" | "string.naturescompass.snow" | "gui.tooltips.ae2.InventoryTweaks" | "create.ponder.fluid_tank_storage.text_3" | "create.ponder.fluid_tank_storage.text_4" | "create.ponder.fluid_tank_storage.text_5" | "jei.tooltip.cheat.mode.button.enabled" | "createWorld.customize.custom.biomeDepthWeight" | "item.botania.magnet_ring" | "block.minecraft.red_sandstone_wall" | "item.minecraft.diamond_axe" | "commands.scoreboard.players.list.success" | "book.byAuthor" | "item.minecraft.diamond_helmet" | "item.create.crushed_lead_ore" | "item.minecraft.fire_charge" | "subtitles.entity.parrot.imitate.illusioner" | "block.create.steam_engine" | "block.create.schematicannon.tooltip" | "item.create.diving_helmet" | "block.minecraft.banner.botania_fish.red" | "botania.subtitle.babylonSpawn" | "forge.configgui.clumpingThreshold" | "block.minecraft.birch_leaves" | "item.minecraft.diamond_pickaxe" | "entity.minecraft.sheep" | "block.minecraft.dark_oak_door" | "subtitles.entity.player.hurt_drown" | "gui.ae2.Nothing" | "block.minecraft.light_gray_carpet" | "achievement.ae2.Networking3" | "botania.page.corporeaIndex1" | "botania.page.corporeaIndex0" | "subtitles.entity.item.pickup" | "botania.page.corporeaIndex3" | "botania.page.corporeaIndex2" | "botaniamisc.rannuncarpus.state_sensitive" | "biome.minecraft.snowy_plains" | "botania.page.corporeaIndex8" | "botania.page.corporeaIndex5" | "botania.page.corporeaIndex4" | "botania.page.corporeaIndex7" | "botania.page.corporeaIndex6" | "create.item_attributes.book_copy_original" | "create.gui.sequenced_gearshift.instruction.end.descriptive" | "item.minecraft.netherite_hoe" | "fml.menu.accessdenied.title" | "commands.whitelist.disabled" | "key.jei.closeRecipeGui" | "subtitles.entity.panda.bite" | "achievement.ae2.P2P.desc" | "create.gui.attribute_filter.allow_list_conjunctive.description" | "block.minecraft.banner.square_bottom_right.yellow" | "subtitles.entity.illusioner.ambient" | "block.ae2.256k_crafting_storage" | "commands.whitelist.reloaded" | "subtitles.entity.axolotl.attack" | "createWorld.customize.custom.stretchY" | "biome.minecraft.river" | "subtitles.block.conduit.ambient" | "block.botania.cacophonium_block" | "subtitles.block.beehive.drip" | "subtitles.entity.bat.ambient" | "entity.minecraft.spectral_arrow" | "commands.tag.add.success.multiple" | "selectWorld.edit.export_worldgen_settings.failure" | "item.minecraft.netherite_pickaxe" | "create.ponder.deployer_contraption.header" | "advancement.create.fist_bump" | "commands.recipe.give.success.single" | "subtitles.block.generic.footsteps" | "create.gui.filter.respect_data.description" | "create.display_source.station_summary.now" | "item.botania.mutated_seeds" | "fml.menu.mods.info.nochildmods" | "create.ponder.blaze_burner.header" | "commands.attribute.modifier.add.success" | "block.minecraft.orange_tulip" | "block.botania.stripped_livingwood_log" | "commands.title.show.actionbar.multiple" | "block.minecraft.netherite_block" | "commands.debug.started" | "item.minecraft.tipped_arrow.effect.thick" | "gui.tooltips.ae2.Substitutions" | "advancement.botania:dirtRodCraft.desc" | "ftbquests.task.ftbquests.item.consume_true" | "item.ae2.portable_fluid_cell_256k" | "ftbquests.variable.max_value" | "botaniamisc.inputtingPower" | "botania.challenge.treeFarm" | "block.botania.lavender_quartz_pillar" | "botania.brew.haste" | "item.ae2.light_p2p_tunnel" | "item.create.copper_sheet" | "subtitles.block.dispenser.dispense" | "item.ae2.magenta_smart_cable" | "block.minecraft.banner.stripe_downleft.brown" | "subtitles.entity.panda.ambient" | "gui.removed" | "botania.page.travelBelt0" | "botania.page.travelBelt1" | "achievement.ae2.Fluix" | "block.ae2.quartz_pillar_stairs" | "chat.ae2.ResetSettings" | "options.graphics.warning.accept" | "block.minecraft.banner.botania_sapling.orange" | "subtitles.block.chorus_flower.grow" | "item.botania.phantom_ink" | "itemGroup.food" | "subtitles.entity.turtle.ambient_land" | "create.gui.stockpile_switch.invert_signal" | "container.chestDouble" | "block.botania.rannuncarpus.reference" | "ftbquests.gui.no_dependants" | "item.minecraft.splash_potion.effect.weakness" | "item.botania.rune_pride" | "item.minecraft.ghast_tear" | "create.schedule.condition.redstone_link.unpowered" | "commands.worldborder.set.failed.big" | "block.minecraft.red_sandstone_stairs" | "block.botania.stripped_livingwood_slab" | "advancement.create.chained_drain" | "block.minecraft.cobbled_deepslate" | "block.minecraft.lime_banner" | "block.botania.corporea_stairs" | "jei.tooltip.bookmarks.usage.key" | "create.ponder.tag.logistics" | "emi.category.botania.mana_infusion" | "achievement.ae2.Networking1" | "achievement.ae2.Networking2" | "botania.challenge.animalFarm.desc" | "item.botania.cosmetic_blue_butterfly" | "ftbquests.task.ftbquests.advancement.criterion" | "block.botania.mana_pool" | "container.smoker" | "block.minecraft.brown_carpet" | "gui.tooltips.ae2.CpuSelectionModeAny" | "ftbquests.icon" | "block.minecraft.brain_coral_wall_fan" | "mco.minigame.world.stopButton" | "create.hint.empty_bearing" | "block.ae2.matrix_frame" | "create.ponder.rope_pulley_attachment.header" | "block.minecraft.end_stone_bricks" | "mco.create.world.reset.title" | "effect.botania.feather_feet" | "stat_type.minecraft.killed" | "create.subtitle.train" | "block.minecraft.banner.diagonal_right.gray" | "item.minecraft.splash_potion" | "gui.tooltips.ae2.MoveWhenEmpty" | "argument.float.big" | "block.ftbquests.chest" | "create.ponder.weighted_ejector.text_8" | "create.ponder.weighted_ejector.text_9" | "create.ponder.weighted_ejector.text_6" | "create.ponder.weighted_ejector.text_7" | "create.ponder.weighted_ejector.text_4" | "botania.tagline.hydroangeas" | "create.ponder.weighted_ejector.text_5" | "create.ponder.weighted_ejector.text_2" | "gui.tooltips.ae2.CraftOnly" | "create.ponder.weighted_ejector.text_3" | "create.ponder.weighted_ejector.text_1" | "death.attack.stalagmite" | "subtitles.entity.witch.celebrate" | "botania.subtitle.redStringInterceptorClick" | "commands.particle.success" | "botania.entry.animatedTorch" | "create.ponder.redstone_link.text_6" | "create.ponder.redstone_link.text_5" | "create.ponder.redstone_link.text_4" | "create.ponder.redstone_link.text_3" | "create.ponder.redstone_link.text_2" | "subtitles.entity.chicken.ambient" | "create.ponder.redstone_link.text_1" | "create.gui.schematicannon.gunpowderLevel" | "block.create.crushing_wheel_controller" | "commands.forceload.added.none" | "botania.subtitle.gaiaTeleport" | "subtitles.block.bubble_column.bubble_pop" | "item.botania.lens_firework.short" | "key.saveToolbarActivator" | "ftbquests.task.ftbquests.stat" | "block.minecraft.warped_trapdoor" | "block.minecraft.banner.square_bottom_left.pink" | "block.minecraft.banner.botania_fish.orange" | "advMode.triggering" | "subtitles.entity.villager.work_fletcher" | "enchantment.minecraft.vanishing_curse" | "botania.challenge.mobTower.desc" | "fml.modmismatchscreen.table.youneed" | "ftbquests.reward.ftbquests.command" | "block.minecraft.nether_brick_wall" | "item.minecraft.firework_star.trail" | "create.schedule.condition.time_of_day.rotation.every_24" | "advMode.allEntities" | "block.create.windmill_bearing" | "death.attack.fall" | "block.ftbquests.screen.hide_icons" | "disconnect.spam" | "key.keyboard.insert" | "gui.tooltips.ae2.TerminalStyle_Small" | "block.botania.livingrock_wall" | "botania.page.flowerSpeed0" | "block.minecraft.banner.creeper.green" | "block.minecraft.dragon_wall_head" | "create.schedule.condition.redstone_link.status" | "botania.page.flowerSpeed1" | "advancements.husbandry.breed_an_animal.title" | "block.minecraft.cyan_glazed_terracotta" | "patchouli.gui.lexicon.relations" | "block.create.haunted_bell.tooltip.condition1" | "subtitles.entity.parrot.imitate.hoglin" | "block.minecraft.deepslate_tile_wall" | "multiplayer.status.request_handled" | "block.botania.corporea_crystal_cube" | "botania.page.elvenLore7" | "botania.page.elvenLore6" | "item.minecraft.trader_llama_spawn_egg" | "item.ae2.lime_smart_cable" | "botania.page.elvenLore5" | "botania.page.elvenLore4" | "botania.page.elvenLore3" | "botania.page.elvenLore2" | "botania.tagline.banners" | "botania.page.elvenLore1" | "item.ae2.item_cell_housing" | "item.create.refined_radiance" | "botania.subtitle.entropinnyumHappy" | "gui.ae2.Deprecated" | "botania.page.elvenLore0" | "fml.modmismatchscreen.missingmods.client" | "gui.ae2.IOPort" | "block.minecraft.dark_oak_sapling" | "selectServer.delete" | "block.ae2.smooth_sky_stone_chest" | "mco.download.downloading" | "commands.execute.conditional.pass_count" | "botania.page.lokiRing3" | "block.minecraft.potted_poppy" | "botania.page.lokiRing2" | "botania.page.lokiRing1" | "botania.page.lokiRing0" | "advancements.nether.find_fortress.description" | "botania.page.lens15" | "ftbquests.chapter.description" | "botania.page.lens14" | "botania.page.lens13" | "botania.page.lens12" | "create.gui.terrainzapper.brush.surface" | "botania.page.lens11" | "subtitles.entity.mooshroom.convert" | "botania.page.lens10" | "subtitles.entity.sheep.hurt" | "ftbquests.reward.ftbquests.xp_levels" | "subtitles.item.bottle.fill" | "gui.ae2.FormationPlane" | "block.minecraft.sticky_piston" | "item.minecraft.birch_boat" | "ftbquests.task.click_to_submit_all" | "botania.page.terrasteelArmor4" | "botania.page.terrasteelArmor3" | "botania.page.terrasteelArmor2" | "botania.page.terrasteelArmor1" | "botania.page.terrasteelArmor0" | "item.minecraft.wooden_sword" | "jigsaw_block.generate" | "commands.banlist.entry" | "botania.page.blazeBlock0" | "gui.socialInteractions.search_empty" | "botania.page.blazeBlock1" | "subtitles.entity.llama.chest" | "botaniamisc.bottleTooltip" | "block.minecraft.magenta_concrete_powder" | "block.botania.green_mushroom" | "commands.effect.give.success.multiple" | "block.minecraft.black_concrete" | "advMode.mode.redstone" | "ftbquests.chapter.image.hover" | "selectServer.title" | "botania.page.lens37" | "item.ae2.ender_dust" | "botania.page.lens36" | "create.station.create_train" | "botania.page.lens35" | "advancement.create.diving_suit_lava.desc" | "botania.page.lens34" | "botania.page.lens33" | "botania.page.lens32" | "botania.page.lens31" | "create.display_link.writing_to" | "botania.page.lens30" | "botania.page.lens29" | "block.minecraft.banner.diagonal_left.gray" | "ftbquests.task.ftbquests.dimension" | "botania.page.lens28" | "botania.page.lens27" | "block.minecraft.spruce_button" | "gui.ae2.PatternEncoding" | "commands.bossbar.set.players.success.none" | "block.minecraft.banner.botania_spark_recessive.pink" | "create.gui.schematicannon.option.replaceWithEmpty" | "block.create.small_crimsite_brick_stairs" | "options.fullscreen.unavailable" | "advancement.create.fan_processing.desc" | "botania.page.lens26" | "argument.scoreboardDisplaySlot.invalid" | "botania.page.lens25" | "item.unbreakable" | "botania.page.lens24" | "botania.page.lens23" | "botania.page.lens22" | "botania.page.lens21" | "botania.page.lens20" | "block.minecraft.tinted_glass" | "botania.page.lens19" | "botania.page.lens18" | "item.botania.santaweave_helmet" | "botania.page.lens17" | "botania.page.lens16" | "multiplayer.disconnect.invalid_entity_attacked" | "demo.help.jump" | "parsing.double.expected" | "commands.gamemode.success.self" | "item.itemfilters.or.description" | "mco.configure.world.slot.tooltip.minigame" | "menu.sendFeedback" | "block.botania.chiseled_elf_quartz" | "block.minecraft.acacia_log" | "botania.entry.cosmeticBaubles" | "block.create.toolbox.tooltip.condition2" | "subtitles.entity.donkey.death" | "forge.configgui.removeErroringEntities" | "block.create.toolbox.tooltip.condition3" | "block.minecraft.orange_glazed_terracotta" | "block.create.toolbox.tooltip.condition1" | "item.minecraft.shield.lime" | "entity.minecraft.phantom" | "botaniamisc.clickToTeleport" | "commands.worldborder.set.failed.far" | "block.botania.enchanted_soil" | "botania.page.lens39" | "create.item_attributes.placeable" | "botania.page.lens38" | "gui.tooltips.ae2.CpuStatusCrafting" | "create.item_attributes.book_copy_tattered.inverted" | "gui.ae2.StoredSize" | "biome.minecraft.plains" | "botania.tagline.corporeaInterceptor" | "item.minecraft.honey_bottle" | "item.ae2.blue_covered_dense_cable" | "gui.entity_tooltip.type" | "block.minecraft.banner.botania_hoe.black" | "block.botania.ghost_rail" | "botaniamisc.command.skyblock.teleport.success" | "item.create.attribute_filter.tooltip.behaviour1" | "item.create.attribute_filter.tooltip.behaviour2" | "forge.configgui.removeErroringBlockEntities.tooltip" | "subtitles.entity.wandering_trader.drink_potion" | "item.ae2.lime_covered_cable" | "block.botania.blue_pavement_stairs" | "botania.entry.narslimmus" | "commands.scoreboard.objectives.list.empty" | "item.botania.terraform_rod" | "create.symmetry.mirror.triplePlane" | "block.minecraft.bed.occupied" | "structure_block.hover.load" | "advancement.create.saw_processing.desc" | "botania.page.bubbell0" | "block.botania.black_petal_block" | "subtitles.block.bubble_column.whirlpool_inside" | "item.ae2.red_smart_cable" | "block.create.yellow_seat" | "config.jei.search.tooltipSearchMode.comment" | "gui.tooltips.ae2.OperationMode" | "botania.page.bubbell1" | "block.minecraft.banner.stripe_left.gray" | "block.minecraft.banner.rhombus.cyan" | "gamerule.category.updates" | "create.train.relocate.invalid" | "create.recipe.heat_requirement.none" | "block.minecraft.yellow_stained_glass_pane" | "ftbquests.raymatcher.entity_id" | "item.botania.ancient_will_ahrim" | "block.minecraft.banner.stripe_downleft.light_gray" | "attribute.modifier.equals.2" | "attribute.modifier.equals.1" | "block.create.pink_nixie_tube" | "attribute.modifier.equals.0" | "block.minecraft.banner.gradient_up.green" | "achievement.ae2.GlassCable" | "botaniamisc.hasPhantomInk" | "enchantment.minecraft.fire_protection" | "botania.animatedTorch.random" | "gui.ae2.Installed" | "argument.range.empty" | "item.create.minecart_coupling.tooltip.condition1" | "advancement.botania:enchanterMake" | "create.gui.assembly.exception.noPistonPoles" | "gui.ae2.SearchTooltipTag" | "block.create.cart_assembler" | "botania.entry.superLavaPendant" | "create.item_attributes.shulker_level" | "generator.single_biome_floating_islands" | "createWorld.customize.presets.share" | "block.botania.manastar.reference" | "block.minecraft.brown_candle" | "botania.page.worldSeed1" | "botania.page.worldSeed0" | "stat.minecraft.clean_banner" | "emi.category.botania.petal_apothecary" | "block.minecraft.banner.straight_cross.black" | "botania.entry.corporeaIndex" | "item.minecraft.shield.yellow" | "commands.ftbquests.command.error.no_file" | "block.minecraft.stripped_birch_wood" | "item.minecraft.firework_star.flicker" | "block.minecraft.banner.stripe_middle.red" | "create.schedule.condition.for_x_time" | "botania.tagline.hyacidus" | "create.ponder.item_drain.text_4" | "create.ponder.item_drain.text_5" | "create.ponder.item_drain.text_2" | "create.ponder.item_drain.text_3" | "create.ponder.item_drain.text_1" | "create.minecart_coupling.too_far" | "subtitles.entity.shulker.shoot" | "subtitles.item.shears.shear" | "structure_block.hover.save" | "advancement.botania:terrasteelPickup" | "fml.menu.multiplayer.truncated" | "gui.ae2.IntrinsicEnchant" | "block.botania.starfield" | "block.botania.blaze_block" | "botania.entry.enderHand" | "block.minecraft.stonecutter" | "create.gui.schematicannon.slot.schematic" | "item.create.crafting_blueprint.behaviour2" | "block.minecraft.jukebox" | "item.create.crafting_blueprint.behaviour1" | "effect.minecraft.nausea" | "advancement.create.train_portal.desc" | "block.minecraft.lime_concrete_powder" | "block.botania.apothecary_swamp" | "create.tooltip.chute.fans_pull_down" | "subtitles.entity.zoglin.attack" | "create.ponder.nixie_tube.text_3" | "create.ponder.nixie_tube.text_2" | "create.ponder.nixie_tube.text_1" | "item.botania.lens_flare.short" | "enchantment.minecraft.looting" | "advancement.create.diving_suit_lava" | "block.minecraft.ancient_debris" | "block.minecraft.banner.stripe_right.black" | "disconnect.kicked" | "ftblibrary.select_item.list_mode" | "block.minecraft.banner.botania_spark_isolated.brown" | "fml.messages.version.restriction.bounded.lowerexclusive" | "block.minecraft.banner.skull.green" | "advancement.create.hose_pulley" | "advancements.nether.ride_strider_in_overworld_lava.description" | "create.schematicannon.status.finished" | "item.botania.clip" | "block.minecraft.banner.botania_shovel.yellow" | "ftbquests.task.ftbquests.item.items" | "commands.schedule.cleared.failure" | "create.ponder.hand_crank.text_2" | "create.ponder.hand_crank.text_1" | "create.ponder.hand_crank.text_4" | "stat.botania.corporea_items_requested" | "create.ponder.hand_crank.text_3" | "block.create.polished_cut_diorite_slab" | "demo.help.later" | "gui.tooltips.ae2.Craftable" | "block.minecraft.exposed_copper" | "create.train.relocate.valid" | "item.botania.lens_mine.short" | "block.minecraft.banner.botania_flower.pink" | "botania.page.spectrolus1" | "botania.page.spectrolus2" | "compliance.playtime.message" | "item.botania.virus_nullodermal" | "create.schematicannon.status.missingBlock" | "effect.minecraft.unluck" | "commands.data.storage.modified" | "block.minecraft.dead_horn_coral_fan" | "mco.configure.world.subscription.days" | "block.botania.spectral_platform" | "block.minecraft.iron_trapdoor" | "block.ae2.quantum_link" | "item.minecraft.polar_bear_spawn_egg" | "death.attack.fallingBlock" | "arguments.item.overstacked" | "botania.entry.mIntro" | "block.minecraft.banner.flower.magenta" | "mco.invites.title" | "item.botania.king_key" | "mco.account.update" | "config.jei.search.colorSearchMode.comment" | "item.minecraft.firework_star" | "createWorld.customize.custom.mainNoiseScaleX" | "createWorld.customize.custom.mainNoiseScaleY" | "createWorld.customize.custom.mainNoiseScaleZ" | "key.categories.ui" | "block.create.gearshift" | "options.gamma.min" | "block.minecraft.banner.half_vertical.orange" | "commands.data.modify.invalid_index" | "block.create.crimson_window_pane" | "block.minecraft.banner.square_bottom_left.black" | "block.botania.bellethorn" | "item.create.sand_paper.tooltip.behaviour1" | "block.minecraft.cornflower" | "debug.inspect.client.block" | "dataPack.validation.failed" | "mco.activity.noactivity" | "entity.minecraft.villager.weaponsmith" | "menu.paused" | "block.minecraft.purple_glazed_terracotta" | "fml.menu.modoptions" | "block.botania.blaze_quartz_stairs" | "gui.tooltips.ae2.ItemName" | "worldgen.flower.patchSize" | "botania.page.spectrolus0" | "advancements.story.cure_zombie_villager.description" | "block.minecraft.banner.botania_spark_dispersive.white" | "commands.trigger.failed.unprimed" | "advancement.create.conductor" | "advancements.husbandry.complete_catalogue.title" | "create.schedule.condition.time_of_day.rotation.every_12" | "gui.tooltips.ae2.FluidSubstitutionsDescEnabled" | "options.language" | "block.minecraft.vine" | "advancement.create.andesite_casing.desc" | "block.minecraft.orange_concrete" | "block.botania.marimorphosis_chibi" | "botania.tagline.grassHorn" | "block.minecraft.banner.botania_hoe.silver" | "subtitles.entity.illusioner.mirror_move" | "botania.page.bellethorne1" | "gui.download" | "botania.page.bellethorne0" | "create.gui.schematicannon.option.skipMissing.description" | "block.minecraft.infested_stone_bricks" | "gui.ae2.CraftingPattern" | "block.create.zinc_ore" | "block.botania.light_blue_petal_block" | "gui.ae2.ReturnInventory" | "block.minecraft.magenta_wool" | "debug.gamemodes.select_next" | "create.schedule.continued" | "subtitles.entity.goat.hurt" | "block.minecraft.brown_concrete_powder" | "advancement.botania:manaPoolPickup" | "fml.menu.mods.info.trust" | "create.generic.unit.minutes" | "create.train.status" | "ftbquests.reward.ftbquests.npc_mail.time" | "ccl.commands.gc.performing" | "createWorld.customize.custom.depthNoiseScaleExponent" | "item.create.brass_sheet" | "item.ae2.name_press" | "block.create.small_granite_brick_slab" | "advancement.botania:kingKey" | "create.contraptions.movement_mode" | "block.create.tiled_glass" | "item.botania.lens_speed" | "create.schedule.condition.redstone_link.frequency_unpowered" | "create.track_signal.cannot_change_mode" | "block.minecraft.waxed_cut_copper" | "entity.ae2.singularity" | "botania.entry.manaVoid" | "mco.upload.failed" | "block.minecraft.banner.half_horizontal_bottom.pink" | "item.ae2.fluix_dust" | "options.framerateLimit" | "narrator.button.difficulty_lock.unlocked" | "commands.datapack.list.available.none" | "argument.nbt.array.mixed" | "block.minecraft.brown_concrete" | "block.minecraft.potted_bamboo" | "botania.subtitle.spreaderFire" | "datapackFailure.title" | "key.keyboard.keypad.divide" | "item.color" | "achievement.ae2.StorageBus.desc" | "create.schematicannon.status.clearing" | "create.schedule.condition.player_count.status" | "ftbquests.reward.ftbquests.npc_faction.id" | "block.minecraft.end_gateway" | "botania.tagline.livingwoodBow" | "patchouli.gui.lexicon.not_anchored" | "create.schematic.invalid" | "block.minecraft.deepslate_copper_ore" | "string.naturescompass.fillerBlock" | "resourcePack.server.name" | "achievement.ae2.SpatialIOExplorer.desc" | "create.schematicannon.status.ready" | "block.minecraft.cracked_deepslate_bricks" | "block.ftbquests.detector.redstone" | "lootr.advancements.100loot.title" | "create.ponder.tag.movement_anchor" | "block.minecraft.horn_coral_wall_fan" | "botania.page.sextant2" | "botania.page.sextant0" | "mco.selectServer.mapOnlySupportedForVersion" | "botania.page.sextant1" | "create.tooltip.analogStrength" | "block.minecraft.deepslate_tiles" | "create.gui.schematicannon.slot.gunpowder" | "fml.messages.version.restriction.lower.exclusive" | "block.create.spruce_window" | "subtitles.entity.turtle.shamble_baby" | "biome.minecraft.snowy_slopes" | "create.logistics.recipe_filter" | "gui.tooltips.ae2.Write" | "block.minecraft.banner.creeper.white" | "selectWorld.import_worldgen_settings" | "block.minecraft.banner.triangles_bottom.lime" | "item.botania.mana_ring" | "botania.tagline.tinyPotato" | "mco.terms.title" | "item.botania.lens_weight" | "block.minecraft.banner.border.brown" | "create.gui.schematicTable.title" | "block.minecraft.dispenser" | "fml.modloading.brokenfile.fabric" | "block.botania.bellethorn.reference" | "subtitles.entity.parrot.imitate.skeleton" | "block.create.tuff_pillar" | "botania.entry.livingwoodBow" | "advancement.botania:rankSSPick.desc" | "item.ae2.crafting_pattern" | "botania.entry.spawnerClaw" | "create.ponder.cart_assembler_rails.header" | "entity.botania.flame_ring" | "chat.disabled.launcher" | "key.curios.open.desc" | "block.minecraft.dead_tube_coral_wall_fan" | "subtitles.block.beehive.exit" | "block.ftbquests.screen.fullscreen" | "options.gamma.max" | "block.create.millstone" | "commands.enchant.failed.entity" | "subtitles.block.chest.open" | "block.minecraft.banner.border.orange" | "item.ae2.cell_component_64k" | "subtitles.entity.husk.converted_to_zombie" | "argument.id.invalid" | "create.subtitle.potato_hit" | "item.create.goggles" | "block.botania.metamorphic_mesa_cobblestone_wall" | "jei.tooltip.bookmarks.not.enough.space" | "gui.ae2.PatternEncoding.secondary_processing_result_tooltip" | "item.ae2.advanced_card" | "options.screenEffectScale" | "ftbquests.task.ftbquests.forge_energy.text" | "block.botania.floating_bubbell" | "block.botania.sunny_quartz_stairs" | "mco.configure.world.edit.subscreen.inspiration" | "advancements.toast.goal" | "block.minecraft.banner.circle.light_blue" | "item.minecraft.bundle" | "block.minecraft.banner.stripe_top.red" | "advancement.create.belt.desc" | "gui.ae2.ImportBusFluids" | "item.create.crushed_tin_ore" | "block.minecraft.magenta_glazed_terracotta" | "key.jei.cheatItemStack" | "subtitles.entity.puffer_fish.hurt" | "gui.ae2.MENetworkStorage" | "item.botania.lens_storm" | "advancements.adventure.lightning_rod_with_villager_no_fire.description" | "item.ae2.fluid_cell_housing" | "achievement.ae2.NetworkTool" | "block.minecraft.moving_piston" | "subtitles.entity.squid.ambient" | "ftbquests.raymatcher.block_entity_id" | "curios.modifiers.back" | "block.minecraft.birch_door" | "item.ae2.orange_glass_cable" | "item.botania.dreamwood_wand" | "item.botania.rune_spring" | "block.minecraft.smooth_sandstone_stairs" | "create.schematicAndQuill.fallbackName" | "item.botania.obedience_stick" | "botania.page.lens7" | "botania.page.lens8" | "botania.page.lens9" | "subtitles.entity.ender_dragon.death" | "botania.page.lens3" | "botania.page.lens4" | "stat.minecraft.open_barrel" | "botania.page.lens5" | "item.botania.cosmetic_red_glasses" | "botania.page.lens6" | "debug.creative_spectator.error" | "mco.brokenworld.nonowner.title" | "botania.page.lens0" | "botania.page.lens1" | "botania.page.lens2" | "create.gui.terrainzapper.brush.cylinder" | "block.minecraft.heavy_weighted_pressure_plate" | "commands.forge.setdim.deprecated" | "block.minecraft.banner.half_vertical.gray" | "item.ae2.brown_smart_cable" | "create.boiler.heat" | "gui.socialInteractions.search_hint" | "argument.entity.options.sort.description" | "commands.banlist.list" | "biome.minecraft.basalt_deltas" | "block.ae2.sky_stone_wall" | "argument.block.tag.disallowed" | "block.ftbquests.screen.input_only" | "botania.nei.petalApothecary" | "block.minecraft.pink_glazed_terracotta" | "block.botania.elf_glass_pane" | "subtitles.entity.hoglin.retreat" | "block.botania.bellows" | "block.botania.glimmering_dreamwood_log" | "config.jei.search.comment" | "entity.minecraft.ravager" | "death.attack.thrown" | "item.ae2.cyan_glass_cable" | "entity.minecraft.tnt" | "item.minecraft.potion.effect.slowness" | "block.minecraft.mossy_stone_brick_slab" | "biome.minecraft.stony_peaks" | "item.ae2.fluix_shovel" | "color.minecraft.light_gray" | "block.minecraft.banner.botania_axe.lightBlue" | "subtitles.entity.slime.death" | "subtitles.entity.firework_rocket.blast" | "create.display_source.observed_train_name" | "itemGroup.lootr" | "gui.tooltips.ae2.AlwaysActive" | "mco.selectServer.expired" | "color.minecraft.white" | "config.jei.advanced.maxColumns" | "block.minecraft.enchanting_table" | "narrator.button.language" | "ftbquests.chapters" | "gui.recipebook.toggleRecipes.blastable" | "botania.subtitle.fireRod" | "block.create.item_drain" | "subtitles.item.crossbow.charge" | "botania.page.brewery11b" | "botania.page.brewery11a" | "subtitles.entity.villager.death" | "block.minecraft.banner.triangle_top.red" | "create.train_assembly.nothing_attached" | "advancement.create.precision_mechanism.desc" | "stat.minecraft.interact_with_smithing_table" | "item.minecraft.tipped_arrow.effect.fire_resistance" | "subtitles.entity.glow_item_frame.remove_item" | "create.ponder.mechanical_press_compacting.header" | "theoneprobe.ae2.channels_of" | "key.mouse" | "block.minecraft.banner.gradient.gray" | "block.minecraft.banner.triangles_bottom.blue" | "botania.page.brewery10a" | "block.minecraft.stripped_dark_oak_wood" | "commands.worldborder.warning.time.success" | "botania.page.brewery10b" | "block.minecraft.banner.border.pink" | "create.schedule.removed_from_train" | "mco.configure.world.restore.question.line2" | "mco.configure.world.restore.question.line1" | "botania.subtitle.flugelEyeTeleport" | "create.orientation.orthogonal" | "disconnect.genericReason" | "botania.entry.jadedAmaranthus" | "block.botania.metamorphic_desert_stone_stairs" | "lootr.message.cannot_break" | "biome.minecraft.flower_forest" | "botania.triggers.manaFull" | "subtitles.entity.squid.death" | "block.create.cut_diorite_bricks" | "menu.playdemo" | "botania.tagline.animatedTorch" | "block.minecraft.stone_pressure_plate" | "ftbquests.quest.guide_page" | "advancement.botania:functionalFlower" | "advancements.husbandry.breed_an_animal.description" | "block.minecraft.banner.botania_spark_recessive.orange" | "create.station.no_assembly_curve" | "achievement.ae2.Root.desc" | "block.minecraft.banner.mojang.yellow" | "botania.entry.pistonRelay" | "narrator.loading" | "item.create.filter.tooltip.behaviour1" | "item.create.filter.tooltip.behaviour2" | "item.create.belt_connector" | "argument.entity.options.distance.negative" | "create.schematic.tool.print" | "subtitles.entity.skeleton_horse.death" | "commands.ftbquests.change_consumable.text" | "create.flap_display.cycles.pixel" | "block.minecraft.spawner" | "block.botania.jaded_amaranthus.reference" | "ftbquests.reward.ftbquests.npc_mail" | "create.gui.terrainzapper.placement.attached" | "block.create.copper_tile_stairs" | "block.minecraft.spruce_wall_sign" | "botania.page.openBucket1" | "block.minecraft.banner.gradient_up.red" | "item.create.zinc_ingot" | "create.schedule.loop" | "item.minecraft.music_disc_pigstep.desc" | "subtitles.entity.zombie_horse.hurt" | "gamerule.category.drops" | "chat.ae2.InvalidMachine" | "create.gui.schedule.alternative_condition" | "chat.ae2.StationCanNotBeLocated" | "item.minecraft.splash_potion.effect.slowness" | "item.minecraft.music_disc_mall.desc" | "item.minecraft.shield.blue" | "death.attack.player" | "createWorld.customize.custom.confirm2" | "item.ae2.item_storage_cell_64k" | "create.weighted_ejector.targeting" | "item.botania.pinkinator" | "block.lootr.lootr_trapped_chest" | "createWorld.customize.custom.confirm1" | "block.minecraft.banner.botania_shovel.silver" | "block.minecraft.andesite_wall" | "block.botania.lavender_quartz_stairs" | "botania.entry.rannuncarpus" | "botania.category.tools" | "parsing.int.invalid" | "item.create.schematic_and_quill.tooltip.control1" | "item.create.schematic_and_quill.tooltip.control2" | "item.create.schematic_and_quill.tooltip.control3" | "botania.page.openBucket0" | "create.recipe.assembly.deploying_item" | "block.minecraft.birch_trapdoor" | "advancements.story.follow_ender_eye.description" | "gamerule.logAdminCommands" | "block.minecraft.moss_block" | "botania.tagline.fireChakram" | "create.ponder.basin.header" | "create.display_source.kinetic_stress" | "advancements.story.smelt_iron.title" | "block.minecraft.orange_candle_cake" | "color.minecraft.green" | "gui.ae2.ChannelEnergyDrain" | "advMode.mode.redstoneTriggered" | "advancement.botania:manaCartCraft" | "commands.teammsg.failed.noteam" | "create.schedule.condition.redstone_link.frequency_state" | "block.botania.diluted_pool" | "gui.jei.category.smoking" | "block.minecraft.large_amethyst_bud" | "jei.key.category.search" | "create.ponder.train_signal_redstone.header" | "create.recipe.heat_requirement.superheated" | "item.ae2.spatial_storage_cell_128" | "block.ftbquests.loot_crate_storage" | "advancement.create.ejector_maxed" | "ftbquests.reward.ftbquests.ftb_money.random_bonus" | "gamerule.category.chat" | "gamerule.playersSleepingPercentage" | "commands.clear.success.multiple" | "block.botania.livingrock_bricks" | "block.minecraft.warped_sign" | "item.minecraft.cooked_porkchop" | "death.attack.thorns.item" | "item.create.filter" | "commands.experience.set.points.success.single" | "create.ponder.shared.sneak_and" | "block.minecraft.banner.square_bottom_left.red" | "create.schedule.condition.threshold.matching_content" | "item.ae2.cable_pattern_provider" | "ftbquests.gui.move_to_chapter" | "selectWorld.gameMode.creative.line1" | "create.ponder.mechanical_plough.header" | "block.botania.metamorphic_mountain_bricks_wall" | "patchouli.gui.lexicon.keybind_missing" | "advancements.adventure.adventuring_time.title" | "item.botania.life_essence" | "item.minecraft.firework_star.light_blue" | "item.create.potato_cannon.tooltip" | "block.minecraft.banner.stripe_downright.blue" | "item.minecraft.tipped_arrow.effect.water_breathing" | "selectWorld.gameMode.creative.line2" | "selectWorld.allowCommands" | "block.create.stockpile_switch.tooltip" | "advancements.nether.all_potions.title" | "block.minecraft.dead_fire_coral_fan" | "block.botania.metamorphic_swamp_stone" | "achievement.ae2.Charger" | "item.create.crafter_slot_cover" | "botania.tagline.elfMessage" | "botania.tagline.sparkUpgrades" | "tag.botania.petals.light_gray" | "createWorld.customize.custom.useStrongholds" | "commands.bossbar.unknown" | "create.item_attributes.fluid_container.inverted" | "item.ftbquests.barrier.nogui" | "block.minecraft.banner.botania_spark_isolated.cyan" | "commands.advancement.grant.many.to.many.success" | "subtitles.entity.fox.hurt" | "block.botania.chiseled_metamorphic_desert_bricks" | "advancements.adventure.trade.title" | "block.create.spruce_window_pane" | "commands.config.getwithtype" | "entity.minecraft.salmon" | "key.jei.toggleOverlay" | "create.generic.unit.seconds" | "team.collision.pushOwnTeam" | "fml.menu.loadingmods" | "block.minecraft.banner.stripe_top.yellow" | "block.botania.spectrolus.reference" | "block.minecraft.redstone_ore" | "config.jei.search.searchAdvancedTooltips" | "block.botania.floating_orechid_ignem" | "filled_map.scale" | "ftbquests.chapter.completed" | "block.minecraft.banner.stripe_left.red" | "block.minecraft.banner.stripe_downright.lime" | "block.create.green_nixie_tube" | "item.botania.elementium_pickaxe" | "block.botania.chiseled_blaze_quartz" | "create.ponder.associated" | "disconnect.disconnected" | "key.jei.bookmark" | "block.minecraft.warped_hyphae" | "enchantment.minecraft.knockback" | "create.schematicAndQuill.convert" | "block.minecraft.dark_oak_fence_gate" | "create.item_attributes.shulker_level.partial" | "item.minecraft.splash_potion.effect.healing" | "subtitles.entity.ravager.death" | "subtitles.item.firecharge.use" | "block.minecraft.warped_stairs" | "item.minecraft.minecart" | "itemGroup.ae2.facades" | "optimizeWorld.stage.upgrading" | "item.minecraft.jungle_boat" | "botania.challengelevel.easy" | "commands.banlist.none" | "ftbquests.task.ftbquests.fluid" | "item.ae2.nether_quartz_sword" | "commands.ftbquests.editing_mode.disabled" | "tutorial.punch_tree.title" | "botania.category.ender" | "key.sprint" | "string.naturescompass.average" | "gui.ae2.security.security.tip" | "subtitles.block.button.click" | "patchouli.gui.lexicon.button.resize" | "block.botania.ender_eye_block" | "item.create.wand_of_symmetry.tooltip.behaviour1" | "item.minecraft.guardian_spawn_egg" | "block.create.creative_motor" | "item.botania.flask" | "block.botania.root" | "create.command.killTPSCommand.status.slowed_by.2" | "botania.subtitle.dash" | "create.command.killTPSCommand.status.slowed_by.1" | "string.naturescompass.name" | "create.ponder.shared.ctrl_and" | "mco.configure.world.slot.tooltip" | "botania.page.dodgeRing0" | "create.command.killTPSCommand.status.slowed_by.0" | "botania.page.dodgeRing1" | "item.minecraft.clay_ball" | "item.minecraft.netherite_leggings" | "tag.botania.terrasteel_ingots" | "block.minecraft.banner.small_stripes.light_blue" | "death.attack.dragonBreath.player" | "advancements.adventure.two_birds_one_arrow.description" | "jigsaw_block.joint.rollable" | "subtitles.entity.cow.milk" | "block.minecraft.light_gray_wool" | "advancements.nether.return_to_sender.title" | "block.botania.agricarnation_chibi.reference" | "block.minecraft.lime_stained_glass" | "item.botania.manasteel_helmet" | "botania.entry.orechid" | "lootr.advancements.50loot.description" | "item.botania.black_lotus" | "create.item_attributes.furnace_fuel" | "sleep.players_sleeping" | "ringOfOdin.fireResist" | "botania.subtitle.way" | "subtitles.entity.vindicator.death" | "advancement.create.self_deploying.desc" | "commands.trigger.failed.invalid" | "botania.tagline.thermalily" | "block.create.framed_glass" | "item.botania.elementium_shovel" | "commands.forge.tags.copy_tag_names" | "selectWorld.versionWarning" | "death.attack.lava.player" | "block.minecraft.banner.botania_hoe.yellow" | "botania.page.poolCart2" | "botania.page.poolCart1" | "botania.page.superTravelBelt1" | "key.keyboard.enter" | "botania.page.poolCart4" | "botania.page.superTravelBelt0" | "botania.page.poolCart3" | "advancements.story.enter_the_end.description" | "advMode.notEnabled" | "book.pageIndicator" | "subtitles.entity.squid.hurt" | "botania.page.poolCart0" | "botania.page.manaGear10" | "item.minecraft.redstone" | "create.display_source.entity_name" | "block.create.small_scorchia_brick_stairs" | "block.botania.metamorphic_mountain_stone_wall" | "death.attack.create.mechanical_saw" | "create.boiler.max_lvl" | "ftbquests.reward_table.edit" | "key.loadToolbarActivator" | "attribute.name.generic.armor" | "item.itemfilters.mod.description" | "argument.range.ints" | "forge.configgui.disableStairSlabCulling" | "biome.minecraft.savanna" | "stat.botania.luminizer_one_cm" | "block.botania.brown_double_flower" | "item.create.experience_nugget.tooltip.summary" | "block.create.cut_ochrum_brick_slab" | "block.botania.glimmering_stripped_dreamwood" | "createWorld.customize.custom.biomeScaleOffset" | "subtitles.entity.fox.eat" | "forge.configgui.skipEmptyShapelessCheck" | "gui.tooltips.ae2.SchedulingModeDefault" | "block.create.polished_cut_scoria_slab" | "create.gui.filter.deny_list" | "create.super_glue.click_to_discard" | "item.minecraft.scute" | "mco.create.world" | "block.minecraft.banner.botania_spark_recessive.gray" | "create.gui.schematicannon.option.replaceWithAny" | "item.create.minecart_coupling.tooltip" | "advancement.botania:flowerPickup" | "item.botania.lens_light.short" | "item.minecraft.lingering_potion.effect.swiftness" | "stat.minecraft.inspect_hopper" | "block.botania.floating_labellia" | "addServer.resourcePack.prompt" | "advancements.husbandry.tactical_fishing.title" | "item.botania.cacophonium" | "arguments.operation.div0" | "config.jei.title" | "block.ae2.smooth_sky_stone_stairs" | "create.display_source.train_status" | "mco.configure.world.status" | "advancements.adventure.summon_iron_golem.title" | "create.ponder.powered_toggle_latch.header" | "block.minecraft.banner.half_horizontal_bottom.gray" | "ftbquests.reward.claim_all" | "ftbquests.chapter_group" | "botania.entry.spawnerMover" | "filled_map.locked" | "botania.page.manaGear3a" | "block.create.seat.tooltip.summary" | "create.ponder.large_cogwheel.header" | "selectWorld.mapType" | "block.create.cut_diorite_brick_slab" | "gui.narrate.slider" | "selectWorld.access_failure" | "block.minecraft.deepslate_redstone_ore" | "item.ae2.debug_eraser" | "argument.rotation.incomplete" | "gamerule.category.spawning" | "create.schematic.tool.deploy" | "fml.modloading.missingclasses" | "createWorld.customize.custom.useDungeons" | "block.minecraft.tall_seagrass" | "commands.clone.failed" | "advancement.create.copper.desc" | "advMode.setCommand" | "botania.tagline.elvenLenses" | "fml.menu.mods.config" | "patchouli.gui.lexicon.button.advancements" | "item.itemfilters.weak_nbt" | "item.minecraft.melon_seeds" | "commands.whitelist.list" | "block.minecraft.white_glazed_terracotta" | "subtitles.entity.snow_golem.hurt" | "create.display_source.kinetic_speed" | "block.create.toolbox.tooltip.summary" | "sidebar_button.ftblibrary.toggle.day" | "create.gui.terrainzapper.placement" | "block.ftbquests.detector.player.offset_y" | "item.botania.lens_messenger.short" | "item.minecraft.rabbit" | "block.minecraft.mushroom_stem" | "gui.ae2.OCTunnel" | "item.minecraft.tipped_arrow.effect.weakness" | "block.minecraft.crying_obsidian" | "options.allowServerListing" | "item.itemfilters.custom.description" | "item.minecraft.music_disc_mellohi.desc" | "botania.subtitle.smeltRod" | "create.ponder.cart_assembler_modes.text_2" | "create.ponder.cart_assembler_modes.text_3" | "create.ponder.cart_assembler_modes.text_1" | "create.gui.config.overlay3" | "item.minecraft.creeper_banner_pattern" | "create.gui.config.overlay4" | "commands.playsound.success.multiple" | "create.gui.config.overlay1" | "subtitles.item.trident.return" | "advancements.nether.fast_travel.description" | "create.gui.config.overlay2" | "block.minecraft.deepslate_diamond_ore" | "create.gui.config.overlay7" | "create.gui.config.overlay8" | "create.gui.config.overlay5" | "create.gui.config.overlay6" | "block.botania.purple_shiny_flower" | "advancement.create.hose_pulley_lava" | "mco.template.button.select" | "botania.entry.hourglass" | "create.tooltip.stressImpact" | "block.botania.magenta_shiny_flower" | "block.minecraft.banner.stripe_top.white" | "subtitles.entity.drowned.swim" | "create.subtitle.haunted_bell_use" | "commands.title.show.title.multiple" | "block.ae2.debug_cube_gen" | "create.display_target.page" | "block.minecraft.banner.creeper.light_blue" | "tag.botania.petals.purple" | "item.minecraft.zombie_horse_spawn_egg" | "commands.spawnpoint.success.multiple" | "commands.bossbar.set.color.success" | "biome.minecraft.desert" | "mco.gui.ok" | "advancement.botania:terrasteelPickup.desc" | "block.botania.mana_distributor" | "create.ponder.clockwork_bearing.header" | "item.minecraft.spider_eye" | "commands.clone.toobig" | "botania.challenge.autoQuarry" | "item.botania.terrasteel_boots" | "gui.tooltips.ae2.FilterModeClear" | "block.minecraft.banner.diagonal_up_left.blue" | "ftbquests.reward_table.loot_crate.monster_weight" | "item.botania.lens_tripwire" | "options.difficulty.online" | "block.botania.chiseled_metamorphic_plains_bricks" | "block.minecraft.banner.stripe_center.white" | "create.gui.schematicannon.shotsRemainingWithBackup" | "entity.minecraft.villager.shepherd" | "block.create.cuckoo_clock" | "block.minecraft.obsidian" | "advancement.botania:luminizerRide" | "attribute.name.horse.jump_strength" | "item.minecraft.evoker_spawn_egg" | "botania.page.manaEnchanting0" | "block.create.cut_crimsite_brick_wall" | "botania.page.manaEnchanting2" | "item.minecraft.diamond_boots" | "botania.page.manaEnchanting1" | "item.ae2.charged_certus_quartz_crystal" | "botania.page.manaEnchanting6" | "item.minecraft.acacia_boat" | "botania.page.manaEnchanting5" | "botania.page.manaEnchanting8" | "botania.page.manaEnchanting7" | "create.ponder.tag.redstone" | "botania.page.manaEnchanting9" | "ftbquests.gui.change_group" | "block.botania.floating_jaded_amaranthus" | "create.ponder.mechanical_pump_speed.text_2" | "create.ponder.mechanical_pump_speed.text_3" | "create.ponder.mechanical_pump_speed.text_4" | "mco.template.select.none" | "create.ponder.mechanical_pump_speed.text_5" | "block.botania.floating_hopperhock_chibi" | "commands.effect.clear.everything.success.single" | "create.gui.stressometer.title" | "elfPortal.particles.enabled" | "create.ponder.mechanical_pump_speed.text_1" | "block.create.cut_tuff" | "potion.whenDrank" | "create.tooltip.speedRequirement.none" | "block.create.cut_ochrum_bricks" | "block.create.cut_andesite_wall" | "botania.page.manaVoid0" | "botania.page.manaVoid1" | "string.naturescompass.info" | "block.minecraft.kelp_plant" | "block.minecraft.banner.botania_flower.gray" | "botaniamisc.command.skyblock.regenisland.success" | "controls.keybinds" | "key.keyboard.right.control" | "block.botania.livingwood_planks_slab" | "fml.messages.artifactversion.notinstalled" | "item.botania.mana_string" | "block.minecraft.orange_stained_glass" | "block.minecraft.banner.diagonal_up_left.lime" | "create.schematic.tool.movey" | "block.minecraft.acacia_sign" | "subtitles.entity.player.attack.weak" | "botania.challenge.shulkMeNotSetup.desc" | "block.create.weathered_copper_shingle_stairs" | "enchantment.minecraft.punch" | "jei.tooltip.liquid.amount.with.capacity" | "block.botania.gray_petal_block" | "block.create.cut_dripstone_brick_slab" | "block.create.green_toolbox" | "death.fell.accident.ladder" | "mco.backup.button.reset" | "botania.page.brewery15b" | "botania.page.brewery15a" | "botania.challenge.kekimurusSetup" | "create.train.relocate.abort" | "block.minecraft.dark_oak_wall_sign" | "subtitles.entity.glow_item_frame.break" | "botania.entry.baubleBox" | "block.minecraft.red_nether_brick_stairs" | "botania.page.brewery14a" | "block.minecraft.diamond_ore" | "commands.kick.success" | "botania.page.brewery14b" | "block.botania.livingrock_bricks_stairs" | "commands.forceload.toobig" | "advancement.botania:corporeaCraft.desc" | "key.categories.inventory" | "botania.entry.runeAltar" | "botania.page.baubleBox1" | "options.particles.decreased" | "gui.tooltips.ae2.ShowAllProviders" | "optimizeWorld.confirm.title" | "block.minecraft.banner.stripe_middle.lime" | "botania.page.baubleBox0" | "create.tooltip.stressImpact.medium" | "block.minecraft.warped_fungus" | "item.create.shadow_steel.tooltip.summary" | "botania.page.brewery13b" | "botania.page.brewery13a" | "item.minecraft.firework_star.shape.creeper" | "block.ae2.inscriber" | "item.ae2.light_gray_paint_ball" | "botania.page.elvenLore5a" | "botania.page.gaiaRitual4" | "botania.page.gaiaRitual5" | "botania.page.gaiaRitual2" | "botania.page.gaiaRitual3" | "block.create.gray_valve_handle" | "fml.menu.mods.info.license" | "subtitles.entity.glow_squid.death" | "block.botania.floating_rannuncarpus" | "debug.clear_chat.help" | "botania.page.brewery12a" | "block.botania.metamorphic_taiga_bricks_stairs" | "botania.page.brewery12b" | "gui.ae2.security.extract.name" | "enchantment.create.potato_recovery" | "botania.tagline.manaGear" | "block.create.display_link" | "commands.curios.add.success" | "jei.tooltip.bookmarks" | "botania.page.gaiaRitual0" | "botania.page.gaiaRitual1" | "botania.challenge.reedFarm" | "botania.brew.invisibility" | "commands.whitelist.none" | "selectWorld.backupWarning.customized" | "block.minecraft.banner.base.orange" | "block.create.oxidized_copper_shingle_stairs" | "advancements.story.mine_stone.title" | "block.create.light_gray_seat" | "create.gui.assembly.exception.tooManyPistonPoles" | "commands.ftbquests.locked.enabled" | "item.minecraft.iron_shovel" | "worldgen.flower.quantity" | "block.botania.red_buried_petals" | "block.minecraft.stripped_warped_hyphae" | "block.botania.metamorphic_fungal_stone_stairs" | "chat.copy.click" | "item.minecraft.wooden_hoe" | "enchantment.minecraft.blast_protection" | "container.enchant.level.many" | "create.ponder.linear_chassis_group.text_1" | "item.ae2.formation_plane" | "advancements.nether.distract_piglin.description" | "block.botania.elf_glass" | "block.minecraft.banner.diagonal_left.orange" | "commands.team.add.duplicate" | "create.ponder.linear_chassis_group.text_2" | "create.ponder.linear_chassis_group.text_3" | "block.minecraft.banner.botania_hoe.gray" | "commands.ftbquests.editing_mode.enabled" | "structure_block.button.load" | "block.create.waxed_oxidized_copper_shingles" | "create.ponder.tag.redstone.description" | "commands.banip.success" | "item.minecraft.tipped_arrow.effect.invisibility" | "gui.ae2.Stores" | "item.create.attribute_filter.tooltip" | "gui.ae2.Stored" | "entity.minecraft.piglin" | "botania.tagline.narslimmus" | "block.minecraft.banner.botania_spark_isolated.magenta" | "commands.ftbquests.complete_instantly.usage" | "block.minecraft.banner.stripe_top.green" | "create.crafting_blueprint.manually_assigned" | "botania.page.brewery17b" | "botania.page.brewery17a" | "fml.modmismatchscreen.table.modname" | "botania.page.brewery16b" | "item.minecraft.lingering_potion.effect.poison" | "block.minecraft.banner.base.lime" | "selectWorld.createDemo" | "subtitles.entity.mule.eat" | "gui.recipebook.toggleRecipes.craftable" | "stat.minecraft.pot_flower" | "block.create.cut_diorite_slab" | "botania.page.brewery16a" | "item.minecraft.iron_leggings" | "block.minecraft.yellow_shulker_box" | "options.graphics.fast.tooltip" | "item.botania.rune_water" | "block.botania.lime_double_flower" | "chat.square_brackets" | "botania.tagline.challenges" | "advancement.create.crushing_wheel" | "entity.minecraft.tropical_fish.type.betty" | "item.ae2.yellow_covered_dense_cable" | "block.minecraft.deepslate_brick_stairs" | "item.minecraft.potion.effect.night_vision" | "mco.configure.world.edit.subscreen.experience" | "selectServer.deleteQuestion" | "botania.tagline.cloudPendant" | "create.contraptions.clockwork.hour_first" | "mco.configure.world.resourcepack.question.line1" | "mco.reset.world.resetting.screen.title" | "mco.configure.world.resourcepack.question.line2" | "advancements.adventure.root.title" | "botaniamisc.hasClip" | "block.minecraft.banner.stripe_center.purple" | "gui.tooltips.ae2.FluidSubstitutionsDescDisabled" | "lexicon.enable.justifiedText" | "advancement.botania:baubleWear.desc" | "block.minecraft.banner.botania_spark_dispersive.lightBlue" | "team.visibility.never" | "gui.ae2.security.craft.tip" | "subtitles.entity.glow_item_frame.place" | "patchouli.gui.lexicon.progress_tooltip" | "item.botania.balance_cloak" | "gui.inactive" | "block.minecraft.banner.half_horizontal_bottom.yellow" | "block.minecraft.banner.base.blue" | "block.botania.metamorphic_mountain_stone_stairs" | "botania.brew.soul_cross" | "forge.configgui.showLoadWarnings.tooltip" | "subtitles.block.bell.resonate" | "block.botania.azulejo_10" | "block.minecraft.snow_block" | "structure_block.mode_info.load" | "block.minecraft.banner.half_vertical_right.orange" | "advancement.botania:heiseiDreamPickup.desc" | "block.botania.azulejo_15" | "subtitles.item.spyglass.stop_using" | "item.ae2.certus_quartz_pickaxe" | "block.botania.azulejo_13" | "container.cartography_table" | "block.botania.azulejo_14" | "block.botania.azulejo_11" | "block.minecraft.purple_carpet" | "block.botania.azulejo_12" | "parsing.float.expected" | "block.create.blue_valve_handle" | "ftbquests.reward.ftbquests.advancement" | "debug.copy_location.message" | "lootr.advancements.50loot.title" | "create.train.departing_from" | "botania.tagline.diviningRod" | "block.minecraft.banner.botania_spark_recessive.green" | "subtitles.entity.goat.milk" | "block.botania.heisei_dream.reference" | "block.botania.exoflame" | "gui.socialInteractions.tab_blocked" | "subtitles.entity.drowned.ambient_water" | "botania.page.entropinnyum2" | "botania.page.entropinnyum1" | "item.create.tree_fertilizer" | "botania.page.entropinnyum0" | "create.ponder.display_board.header" | "block.create.scorchia" | "subtitles.entity.potion.throw" | "achievement.ae2.Controller" | "gui.ae2.CraftingPlan" | "gui.tooltips.ae2.StashDesc" | "ftbquests.task.ftbquests.item.ignore_damage" | "block.minecraft.waxed_cut_copper_stairs" | "botania.entry.manaGear" | "fml.messages.version.restriction.bounded.upperexclusive" | "create.ponder.display_link.header" | "block.minecraft.banner.botania_fish.green" | "block.create.light_blue_nixie_tube" | "subtitles.block.honey_block.slide" | "botania.tater_birthday.4" | "block.minecraft.blackstone" | "subtitles.entity.hoglin.ambient" | "botania.page.pool2" | "botania.page.pool1" | "block.minecraft.warped_wart_block" | "botania.page.pool4" | "botania.page.pool3" | "botania.page.pool6" | "botania.page.pool5" | "language.name" | "item.botania.cosmetic_devil_tail" | "botania.page.pool8" | "item.create.schematic_and_quill.tooltip.summary" | "botania.page.pool7" | "item.ae2.portable_item_cell_256k" | "botania.tater_birthday.1" | "botania.page.challenges0" | "botania.tater_birthday.0" | "block.minecraft.banner.piglin.cyan" | "botania.tater_birthday.3" | "botania.entry.superCloudPendant" | "block.create.gray_nixie_tube" | "subtitles.entity.cod.hurt" | "botania.tater_birthday.2" | "block.minecraft.tube_coral_wall_fan" | "botania.page.pool0" | "botania.page.challenges2" | "botania.page.challenges1" | "block.create.mechanical_press" | "botania.page.pool9" | "block.create.polished_cut_ochrum_stairs" | "gui.tooltips.ae2.FluidSubstitutions" | "botaniamisc.dudDiceRoll" | "block.create.waxed_copper_shingle_stairs" | "entity.minecraft.tropical_fish.type.spotty" | "block.botania.loonium.reference" | "block.minecraft.coal_block" | "subtitles.entity.llama.step" | "death.attack.trident.item" | "block.minecraft.banner.stripe_center.light_blue" | "commands.tag.list.single.empty" | "block.botania.rafflowsia" | "block.minecraft.white_wool" | "block.minecraft.banner.botania_fish.lightBlue" | "block.minecraft.banner.square_bottom_right.blue" | "block.minecraft.banner.square_top_right.blue" | "item.botania.crafting_halo" | "block.ae2.16k_crafting_storage" | "mco.configure.world.buttons.settings" | "block.minecraft.dried_kelp_block" | "block.botania.mana_flame" | "item.ae2.fluix_pickaxe" | "item.ae2.annihilation_plane" | "gui.loaded" | "item.ae2.pink_paint_ball" | "key.toggle_focus.desc" | "block.minecraft.banner.creeper.lime" | "options.prioritizeChunkUpdates" | "block.minecraft.banner.botania_spark_recessive.white" | "item.minecraft.potion.effect.water" | "botaniamisc.blockAway" | "biome.minecraft.frozen_river" | "item.botania.lens_mine" | "create.ponder.categories" | "item.minecraft.tipped_arrow.effect.regeneration" | "create.ponder.valve_pipe.header" | "subtitles.entity.firework_rocket.launch" | "subtitles.entity.shulker.hurt" | "block.botania.light_blue_mystical_flower" | "block.minecraft.jungle_leaves" | "fml.menu.multiplayer.incompatible" | "block.create.purple_valve_handle" | "lat_support" | "commands.forge.tags.containing_tag_count" | "block.create.layered_calcite" | "item.botania.loki_ring" | "block.create.cut_scoria_stairs" | "recipe.toast.title" | "block.minecraft.horn_coral_block" | "options.ao" | "block.minecraft.banner.square_bottom_right.lime" | "advancements.story.enter_the_nether.description" | "block.minecraft.banner.triangle_top.orange" | "block.botania.elf_quartz" | "key.keyboard.right.win" | "block.create.exposed_copper_tile_stairs" | "block.minecraft.mossy_stone_bricks" | "options.modelPart.hat" | "block.create.raw_zinc_block" | "block.create.cut_deepslate_brick_stairs" | "block.create.veridium" | "botania.entry.knockbackBelt" | "commands.ftbquests.usage" | "botania.page.thorRing0" | "create.schematics.uploadTooLarge" | "options.chat.visibility.hidden" | "block.botania.infrangible_platform" | "item.minecraft.flower_pot" | "selectWorld.gameMode.spectator.line2" | "selectWorld.gameMode.spectator.line1" | "block.minecraft.banner.creeper.blue" | "block.botania.creative_pool" | "block.botania.mossy_livingrock_bricks_slab" | "key.hotbar.8" | "key.hotbar.7" | "commands.publish.success" | "key.hotbar.6" | "key.hotbar.5" | "subtitles.entity.evoker.cast_spell" | "key.hotbar.4" | "block.minecraft.banner.botania_spark_dominant.black" | "item.create.refined_radiance.tooltip" | "key.hotbar.3" | "key.hotbar.2" | "key.hotbar.1" | "create.ponder.brass_tunnel.text_8" | "block.minecraft.banner.globe.gray" | "item.botania.cosmetic_eerie_mask" | "item.minecraft.mushroom_stew" | "create.ponder.brass_tunnel.text_4" | "create.ponder.brass_tunnel.text_5" | "create.ponder.brass_tunnel.text_6" | "create.ponder.brass_tunnel.text_7" | "block.botania.floating_pollidisiac" | "block.botania.red_double_flower" | "create.schematicannon.status.targetNotLoaded" | "key.hotbar.9" | "commands.item.source.no_such_slot" | "advancements.nether.distract_piglin.title" | "block.minecraft.quartz_bricks" | "attribute.name.forge.entity_gravity" | "advancement.create.cart_pickup.desc" | "multiplayer.socialInteractions.not_available" | "block.minecraft.chiseled_quartz_block" | "create.ponder.linear_chassis_attachment.header" | "tutorial.bundleInsert.title" | "block.create.small_dripstone_brick_wall" | "subtitles.entity.blaze.shoot" | "block.minecraft.bookshelf" | "create.item_attributes.equipable.inverted" | "block.create.weathered_copper_shingles" | "create.tooltip.brass_tunnel.contains_entry" | "commands.scoreboard.players.get.null" | "gui.tooltips.ae2.SideBack" | "botania.page.enderDagger0" | "createWorld.customize.custom.spread" | "block.create.metal_bracket.tooltip.summary" | "botania.page.enderDagger2" | "botania.page.enderDagger1" | "block.create.veridium_pillar" | "chat.link.open" | "item.itemfilters.tag" | "commands.forge.entity.list.single.header" | "block.minecraft.banner.gradient_up.magenta" | "create.gui.schematicannon.option.skipTileEntities.description" | "block.minecraft.polished_blackstone_wall" | "block.minecraft.tripwire_hook" | "block.minecraft.candle" | "block.minecraft.banner.circle.blue" | "block.botania.corporea_brick" | "item.botania.cosmetic_engineer_goggles" | "create.train.arrived_at" | "item.minecraft.shulker_shell" | "entity.ae2.tiny_tnt_primed" | "commands.datapack.unknown" | "soundCategory.music" | "item.create.potato_cannon.tooltip.behaviour2" | "subtitles.entity.villager.work_cartographer" | "commands.whitelist.add.failed" | "death.attack.even_more_magic" | "mco.template.select.narrate.authors" | "botania.challenge.spectrolusSetup.desc" | "death.attack.wither" | "advancements.nether.uneasy_alliance.description" | "key.keyboard.tab" | "advancement.create.backtank.desc" | "options.biomeBlendRadius.13" | "sidebar_button.ftblibrary.toggle.rain.tooltip" | "item.create.potato_cannon.tooltip.behaviour1" | "options.biomeBlendRadius.15" | "options.biomeBlendRadius.11" | "botania.tagline.dirtRod" | "create.ponder.gantry_direction.header" | "subtitles.entity.evoker.hurt" | "block.minecraft.end_portal" | "block.minecraft.black_banner" | "disconnect.loginFailed" | "block.minecraft.tube_coral_block" | "block.minecraft.banner.diagonal_up_right.black" | "patchouli.gui.lexicon.shift_for_recipe" | "block.minecraft.banner.square_top_right.lime" | "gui.ae2.CompatibleUpgrade" | "create.item_attributes.shulker_level.inverted" | "block.botania.cyan_petal_block" | "item.minecraft.potion.effect.luck" | "tag.botania.petals.blue" | "advancement.create.deployer.desc" | "create.display_source.list_items" | "block.minecraft.yellow_concrete_powder" | "item.create.blaze_cake.tooltip" | "block.minecraft.banner.stripe_left.green" | "botania.tagline.spawnerClaw" | "item.botania.lens_paint.short" | "ftbquests.task.ftbquests.item" | "argument.entity.options.z.description" | "create.display_source.station_summary.seconds" | "gamerule.doDaylightCycle" | "block.minecraft.banner.circle.lime" | "commands.forge.tags.element_count" | "block.minecraft.banner.skull.yellow" | "build.tooHigh" | "block.botania.jiyuulia" | "commands.ftbquests.reset_progress.usage" | "mco.configure.world.subscription.expired" | "container.stonecutter" | "subtitles.item.glow_ink_sac.use" | "commands.forge.entity.list.invalid" | "block.create.acacia_window" | "options.particles" | "subtitles.item.bucket.fill" | "block.minecraft.white_tulip" | "gamerule.keepInventory" | "block.minecraft.banner.stripe_downright.purple" | "block.minecraft.banner.botania_spark_dominant.blue" | "block.minecraft.banner.botania_axe.lime" | "item.create.goggles.tooltip.condition3" | "item.create.goggles.tooltip.condition2" | "gui.ae2.security.inject.tip" | "item.create.goggles.tooltip.condition1" | "fluid.minecraft.flowing_milk" | "block.minecraft.gray_wool" | "item.minecraft.firework_star.gray" | "gamerule.doWeatherCycle" | "block.minecraft.banner.botania_logo.cyan" | "create.ponder.subject" | "chargeAnimation.enabled" | "botania.page.brewery4" | "botania.page.brewery3" | "botania.page.brewery2" | "botania.page.brewery1" | "botania.page.brewery0" | "item.create.diving_helmet.tooltip.behaviour1" | "botania.entry.sparkUpgrades" | "block.minecraft.banner.skull.light_blue" | "item.minecraft.leather_horse_armor" | "block.minecraft.banner.stripe_downleft.magenta" | "block.create.crushing_wheel" | "entity.minecraft.trader_llama" | "block.create.creative_crate.tooltip" | "block.minecraft.nether_wart_block" | "create.schematic.mirror.none" | "mco.invites.button.accept" | "item.botania.spark_upgrade_dispersive" | "create.item_attributes.consumable.inverted" | "multiplayerWarning.header" | "botania.category.misc" | "commands.help.failed" | "mco.configure.world.buttons.edit" | "advMode.setCommand.success" | "item.botania.lens_explosive" | "create.orientation.alongX" | "ftbquests.leaderboard_progress" | "create.orientation.alongZ" | "create.ponder.tag.decoration.description" | "block.create.exposed_copper_shingle_slab" | "sidebar_button.ftblibrary.toggle.day.tooltip" | "selectWorld.recreate.customized.title" | "item.minecraft.music_disc_chirp.desc" | "gui.ae2.TerminalViewCellsTooltip" | "gui.ae2.inWorldSingularity" | "block.minecraft.tripwire" | "block.minecraft.banner.botania_lexicon.blue" | "enchantment.minecraft.infinity" | "block.minecraft.lever" | "create.gui.terrainzapper.tool.replace" | "container.lectern" | "subtitles.entity.cat.hurt" | "block.create.polished_cut_scorchia_stairs" | "block.minecraft.banner.botania_axe.blue" | "block.minecraft.sandstone_stairs" | "subtitles.entity.horse.death" | "ftbquests.gui.error" | "botania.nei.floatingFlowers" | "block.botania.livingwood_planks_stairs" | "subtitles.item.trident.riptide" | "block.minecraft.beacon.primary" | "ftbquests.quest.dependency_requirement.one_started" | "item.ae2.conversion_monitor" | "block.minecraft.acacia_wall_sign" | "item.minecraft.pink_dye" | "item.minecraft.coal" | "botania.roman1" | "gui.ae2.Config" | "botania.roman2" | "botania.roman0" | "entity.minecraft.evoker_fangs" | "botania.roman9" | "block.create.brass_belt_funnel" | "botania.roman7" | "botania.roman8" | "item.botania.quartz_elven" | "botania.roman5" | "botania.roman6" | "botania.roman3" | "block.minecraft.magenta_shulker_box" | "subtitles.entity.vindicator.ambient" | "botania.roman4" | "enchantment.minecraft.silk_touch" | "ftbquests.task.ftbquests.location.w" | "block.minecraft.tube_coral" | "item.minecraft.creeper_spawn_egg" | "options.on" | "ftbquests.rarity.common" | "block.ae2.spatial_pylon" | "block.create.exposed_copper_tile_slab" | "block.minecraft.banner.diagonal_right.light_blue" | "gamerule.forgiveDeadPlayers" | "ftbquests.task.ftbquests.location.z" | "ftbquests.task.ftbquests.location.y" | "ftbquests.task.ftbquests.location.x" | "botania.entry.cloudPendant" | "block.minecraft.banner.botania_lexicon.lime" | "commands.tag.add.failed" | "mco.upload.select.world.title" | "subtitles.entity.villager.work_weaponsmith" | "botania.entry.aIntro" | "item.minecraft.chorus_fruit" | "block.botania.chiseled_metamorphic_forest_bricks" | "options.fov" | "block.minecraft.banner.triangles_bottom.green" | "gui.ae2.Scheduled" | "botania.page.avatar2" | "selectWorld.cheats" | "debug.inspect.server.entity" | "botania.tagline.orechidIgnem" | "botania.page.avatar0" | "botania.page.avatar1" | "block.minecraft.banner.botania_axe.orange" | "botania.landing" | "forge.configgui.skipEmptyShapelessCheck.tooltip" | "stat.minecraft.time_since_rest" | "title.multiplayer.realms" | "ftbquests.task.ftbquests.location.d" | "create.menu.report_bugs" | "botaniamisc.command.skyblock.island.teleported" | "commands.ftbquests.command.feedback.table_too_many_items" | "block.minecraft.banner.triangle_bottom.orange" | "block.minecraft.banner.botania_fish.gray" | "ftbquests.task.ftbquests.location.h" | "create.subtitle.confirm" | "ftbquests.quest.visibility" | "stat.minecraft.time_since_death" | "debug.prefix" | "mco.upload.uploading" | "gui.tooltips.ae2.ShowNonFullProviders" | "create.ponder.depot.header" | "create.train_assembly.requires_casing" | "block.minecraft.banner.stripe_center.green" | "gui.back" | "subtitles.entity.shulker.teleport" | "advancement.botania:pinkinator.desc" | "item.create.potato_cannon.tooltip.condition1" | "create.ponder.brass_tunnel.text_1" | "item.create.potato_cannon.tooltip.condition2" | "create.ponder.brass_tunnel.text_2" | "advancements.story.iron_tools.description" | "create.ponder.brass_tunnel.text_3" | "advancement.botania:craftingHaloCraft" | "item.botania.spawner_mover" | "item.minecraft.bucket" | "create.schematic.rotation.cw90" | "commands.scoreboard.players.operation.success.multiple" | "achievement.ae2.SpatialIO.desc" | "commands.forge.tracking.invalid" | "block.create.cut_asurine" | "create.flap_display.cycles.alphabet" | "gui.tooltips.ae2.SortOrder" | "death.attack.create.crush" | "block.minecraft.banner.small_stripes.black" | "ftbquests.file.defaults.reward_team" | "block.minecraft.yellow_glazed_terracotta" | "item.botania.rune_fire" | "block.minecraft.banner.botania_axe.brown" | "block.minecraft.lily_of_the_valley" | "block.botania.mossy_livingrock_bricks_stairs" | "block.minecraft.twisting_vines" | "block.minecraft.banner.bricks.pink" | "ae2.permission_denied" | "create.ponder.sticker.text_4" | "create.ponder.sticker.text_3" | "create.ponder.sticker.text_2" | "create.ponder.sticker.text_1" | "block.minecraft.banner.gradient_up.yellow" | "subtitles.entity.panda.aggressive_ambient" | "argument.scoreHolder.empty" | "create.generic.unit.ticks" | "block.minecraft.banner.straight_cross.yellow" | "block.minecraft.pumpkin_stem" | "argument.nbt.expected.key" | "create.ponder.bearing_modes.text_2" | "create.ponder.bearing_modes.text_1" | "item.minecraft.poisonous_potato" | "entity.botania.ender_air_bottle" | "item.botania.cyan_petal" | "options.difficulty.normal" | "create.ponder.tag.train_related" | "commands.placefeature.invalid" | "gui.ae2.FacadeCrafting" | "block.botania.medumone" | "create.ponder.track_observer.text_2" | "item.ae2.item_p2p_tunnel" | "create.ponder.track_observer.text_3" | "create.contraptions.cart_movement_mode.rotate_paused" | "create.ponder.track_observer.text_1" | "botania.page.pureDaisy1" | "gui.ae2.StoredEnergy" | "botania.page.pureDaisy2" | "lootr.advancements.1cart.description" | "botania.page.pureDaisy3" | "botania.page.pureDaisy4" | "botania.page.pureDaisy0" | "block.create.track_signal" | "subtitles.entity.illusioner.cast_spell" | "commands.publish.started" | "death.attack.anvil.player" | "biome.minecraft.windswept_hills" | "botania.entry.flasks" | "ftbquests.reward" | "block.botania.floating_shulk_me_not" | "parsing.double.invalid" | "item.minecraft.donkey_spawn_egg" | "create.display_source.list_fluids" | "deathScreen.title" | "botania.tagline.manaweave" | "block.create.lime_nixie_tube" | "item.botania.twig_wand" | "item.botania.bauble_box" | "botania.entry.mushrooms" | "structure_block.button.save" | "entity.botania.mana_storm" | "structure_block.mode_info.save" | "options.skinCustomisation" | "gui.socialInteractions.tab_hidden" | "botania.entry.pylon" | "block.create.cut_crimsite_slab" | "patchouli.gui.lexicon.add_bookmark" | "item.ae2.nether_quartz_shovel" | "createWorld.customize.custom.useLavaLakes" | "block.create.shaft" | "item.minecraft.yellow_dye" | "block.minecraft.soul_sand" | "subtitles.entity.donkey.ambient" | "gui.tooltips.ae2.SearchMode_AutoFocus" | "item.minecraft.shield.magenta" | "block.botania.bergamute.reference" | "item.minecraft.knowledge_book" | "parsing.quote.expected.end" | "create.schematic.tool.flip" | "gui.whitelist" | "item.ae2.memory_card_orange" | "create.display_source.fill_level.percent" | "item.minecraft.clock" | "block.minecraft.banner.triangle_bottom.blue" | "entity.minecraft.tropical_fish.predefined.20" | "item.minecraft.splash_potion.effect.poison" | "block.botania.floating_exoflame" | "item.ae2.memory_card" | "entity.minecraft.tropical_fish.predefined.13" | "block.botania.metamorphic_forest_bricks_wall" | "entity.minecraft.tropical_fish.predefined.12" | "entity.minecraft.tropical_fish.predefined.11" | "block.botania.metamorphic_forest_stone" | "entity.minecraft.tropical_fish.predefined.10" | "entity.minecraft.tropical_fish.predefined.17" | "entity.minecraft.tropical_fish.predefined.16" | "entity.minecraft.tropical_fish.predefined.15" | "entity.minecraft.tropical_fish.predefined.14" | "item.minecraft.tipped_arrow" | "entity.minecraft.tropical_fish.predefined.19" | "entity.minecraft.tropical_fish.predefined.18" | "block.minecraft.banner.curly_border.pink" | "block.minecraft.polished_granite_slab" | "block.minecraft.banner.triangle_bottom.yellow" | "block.minecraft.stone_stairs" | "block.minecraft.banner.bricks.purple" | "botania.brew.fire_resistance" | "item.minecraft.wooden_pickaxe" | "block.minecraft.light_blue_stained_glass_pane" | "create.ponder.next" | "subtitles.entity.ravager.ambient" | "botania.entry.lokiRing" | "botania.challenge.animalFarm" | "item.ae2.gray_lumen_paint_ball" | "item.minecraft.sugar" | "argument.entity.options.limit.description" | "botania.challenge.flowerFarm" | "create.gui.terrainzapper.brush.cuboid" | "item.minecraft.music_disc_13.desc" | "create.item_attributes.renamed.inverted" | "botania.tagline.exoflame" | "commands.weather.set.rain" | "color.minecraft.pink" | "advancements.nether.brew_potion.title" | "block.minecraft.banner.botania_tiny_potato.brown" | "advancements.adventure.hero_of_the_village.description" | "block.botania.black_floating_flower" | "item.minecraft.firework_star.custom_color" | "botania.subtitle.blackLotus" | "block.minecraft.banner.botania_pickaxe.orange" | "block.create.polished_cut_veridium_wall" | "death.attack.generic" | "subtitles.entity.turtle.hurt" | "ftbquests.task.ftbquests.item.check_only" | "block.minecraft.banner.botania_pickaxe.lightBlue" | "container.enchant.level.one" | "tag.botania.petals" | "item.minecraft.potion.effect.leaping" | "subtitles.entity.parrot.ambient" | "block.botania.tangleberrie_chibi.reference" | "create.gui.sequenced_gearshift.instruction.await.descriptive" | "block.botania.solegnolia" | "block.minecraft.banner.stripe_right.brown" | "block.minecraft.banner.triangle_bottom.lime" | "mco.backup.button.upload" | "subtitles.item.armor.equip_iron" | "block.minecraft.banner.botania_shovel.blue" | "subtitles.entity.drowned.hurt" | "advancements.story.upgrade_tools.description" | "botania.entry.elvenLenses" | "narration.component_list.usage" | "block.minecraft.banner.diagonal_up_right.light_blue" | "biome.minecraft.grove" | "commands.forge.tracking.entity.reset" | "theoneprobe.ae2.device_missing_channel" | "block.create.content_observer.tooltip" | "key.jei.toggleEditMode" | "ftbquests.quest.shape.heart" | "ftbquests.quest.completed" | "subtitles.block.fence_gate.toggle" | "create.tunnel.selection_mode.synchronize" | "block.minecraft.banner.botania_pickaxe.cyan" | "block.minecraft.banner.skull.blue" | "argument.pos.missing.double" | "ftbquests.gui.reload_theme" | "create.contraptions.movement_mode.rotate_place_returned" | "create.display_source.redstone_power.progress_bar" | "block.minecraft.smithing_table" | "gui.ae2.PressureTunnel" | "botania.page.hyacidus0" | "stat.minecraft.ring_bell" | "create.gui.assembly.exception.not_enough_sails" | "block.minecraft.banner.triangles_bottom.white" | "botania.page.hyacidus1" | "subtitles.entity.cod.flop" | "item.botania.blacker_lotus" | "entity.minecraft.tropical_fish.predefined.21" | "death.fell.killer" | "block.botania.gaia_spreader" | "item.create.minecart_contraption" | "block.create.small_deepslate_brick_stairs" | "itemGroup.botania" | "structure_block.save_failure" | "structure_block.integrity.seed" | "block.minecraft.banner.square_bottom_right.white" | "block.minecraft.banner.botania_shovel.lime" | "options.mainHand.right" | "block.botania.rafflowsia.reference" | "jei.tooltip.not.enough.space" | "mco.template.button.publisher" | "gui.tooltips.ae2.CraftEither" | "create.ponder.train_schedule.header" | "mco.configure.world.close.question.line1" | "mco.configure.world.close.question.line2" | "item.minecraft.prismarine_shard" | "block.minecraft.banner.curly_border.black" | "block.botania.blue_floating_flower" | "jei.tooltip.show.all.recipes" | "options.skinCustomisation.title" | "subtitles.entity.parrot.imitate.guardian" | "gui.ae2.SearchTooltipModId" | "block.minecraft.banner.half_horizontal.blue" | "flowerParticles.frequency" | "item.ae2.black_paint_ball" | "block.minecraft.sandstone" | "gui.downloaded" | "advancement.create.millstone.desc" | "advancement.create.portable_storage_interface.desc" | "narration.suggestion" | "advancement.botania:manaBombIgnite.desc" | "block.botania.daybloom_motif" | "config.jei.interface" | "block.botania.spectranthemum.reference" | "commands.setblock.failed" | "commands.item.entity.set.success.single" | "item.botania.mana_mirror" | "block.botania.white_pavement" | "block.minecraft.stone_brick_wall" | "subtitles.entity.llama.swag" | "createWorld.customize.preset.the_void" | "item.botania.manaweave_cloth" | "gui.tooltips.ae2.Singularity" | "gui.socialInteractions.tooltip.hide" | "item.botania.invisibility_cloak" | "item.minecraft.iron_hoe" | "achievement.ae2.GlassCable.desc" | "lexicon.enable.rotatingItems" | "block.minecraft.magenta_carpet" | "item.minecraft.shield.black" | "botania.tagline.judgementCloaks" | "block.minecraft.banner.piglin.orange" | "create.gui.schematicannon.option.replaceWithSolid.description" | "botania.tagline.superCloudPendant" | "item.ae2.orange_paint_ball" | "block.minecraft.blue_orchid" | "item.botania.fertilizer" | "commands.jfr.start.failed" | "entity.create.crafting_blueprint" | "advancement.create.clockwork_bearing" | "create.ponder.radial_chassis.header" | "item.botania.cosmetic_cat_ears" | "createWorld.customize.custom.seaLevel" | "botania.page.thornChakram1" | "create.ponder.belt_transport.header" | "botania.page.thornChakram0" | "botania.challenge.boneMealFarm.desc" | "block.minecraft.light_weighted_pressure_plate" | "commands.bossbar.set.value.unchanged" | "commands.forge.tps.summary.named" | "entity.minecraft.endermite" | "block.minecraft.banner.botania_spark_dominant.lime" | "commands.team.option.collisionRule.success" | "achievement.ae2.Recursive" | "block.minecraft.banner.square_top_right.yellow" | "block.create.stockpile_switch.tooltip.condition1" | "create.ponder.windmill_structure.header" | "ftbquests.quest.hide_text_until_complete" | "block.minecraft.banner.half_horizontal.lime" | "ccl.commands.killall.fail.player" | "ae2.rei_jei_integration.recipe_too_large" | "commands.scoreboard.players.list.entity.empty" | "block.botania.apothecary_mesa" | "block.minecraft.banner.stripe_downleft.orange" | "block.create.haunted_bell.tooltip.behaviour1" | "block.create.cut_veridium_bricks" | "create.subtitle.haunted_bell_convert" | "block.botania.metamorphic_plains_bricks_wall" | "commands.tag.list.single.success" | "lootr.advancements.1shulker.title" | "fml.messages.artifactversion" | "block.botania.lime_buried_petals" | "create.ponder.super_glue.text_1" | "ftbquests.task.ftbquests.fluid.fluid_nbt" | "create.ponder.super_glue.text_2" | "block.minecraft.smooth_quartz_slab" | "create.hint.full_deployer.title" | "create.ponder.super_glue.text_5" | "create.ponder.super_glue.text_6" | "create.ponder.super_glue.text_3" | "create.ponder.super_glue.text_4" | "advancement.create.mechanical_mixer.desc" | "stat_type.minecraft.picked_up" | "commands.forceload.added.failure" | "gamerule.maxCommandChainLength" | "block.minecraft.gold_ore" | "block.botania.pollidisiac.reference" | "stat.minecraft.fish_caught" | "item.ae2.purple_smart_dense_cable" | "item.itemfilters.strong_nbt" | "item.ae2.black_covered_cable" | "block.ae2.quartz_pillar_wall" | "botania.entry.exoflame" | "block.create.polished_cut_calcite_stairs" | "item.ae2.yellow_paint_ball" | "block.create.cut_ochrum_brick_stairs" | "item.create.chest_minecart_contraption" | "create.gui.schematicTable.availableSchematics" | "item.minecraft.string" | "commands.execute.blocks.toobig" | "botania.page.dandelifeon10" | "subtitles.entity.piglin_brute.converted_to_zombified" | "create.subtitle.scroll_value" | "gui.recipebook.toggleRecipes.smokable" | "block.botania.metamorphic_mountain_stone" | "advancement.create.windmill" | "block.create.cut_scorchia_wall" | "botania.challenge.recordFarm" | "botaniamisc.unboundWarp" | "item.create.wrench.tooltip" | "block.create.asurine" | "ftbquests.task.ftbquests.item.consume_items" | "block.create.polished_cut_scorchia_slab" | "advancements.husbandry.fishy_business.description" | "selectServer.deleteButton" | "item.botania.grass_seeds" | "botaniamisc.challenges" | "item.botania.cosmetic_tiny_potato_mask" | "block.minecraft.pink_stained_glass_pane" | "enchantment.minecraft.unbreaking" | "ftbquests.chapter.image.click" | "item.create.diving_helmet.tooltip.summary" | "commands.experience.add.levels.success.multiple" | "advancement.create.precision_mechanism" | "tag.botania.petals.lime" | "block.create.polished_cut_tuff_stairs" | "item.botania.lens_influence.short" | "chat.type.advancement.challenge" | "subtitles.entity.arrow.shoot" | "item.botania.lens_magnet" | "create.ponder.sail.text_3" | "patchouli.gui.lexicon.no_results" | "create.ponder.sail.text_4" | "create.ponder.sail.text_1" | "create.ponder.sail.text_2" | "ftbteams.owner_cant_leave" | "block.botania.hopperhock_chibi" | "entity.minecraft.chest_minecart" | "ae2.rei_jei_integration.will_craft" | "botania.tagline.manaVoid" | "block.botania.black_pavement" | "block.botania.magenta_floating_flower" | "block.create.gray_sail" | "item.create.blaze_cake_base" | "block.minecraft.red_nether_brick_wall" | "block.minecraft.purple_stained_glass" | "subtitles.block.pumpkin.carve" | "narrator.select.world" | "gui.ae2.NoCraftingCPUs" | "block.minecraft.banner.botania_sword.silver" | "block.botania.marimorphosis.reference" | "gui.tooltips.ae2.InterfaceBlockingMode" | "item.botania.manasteel_sword" | "commands.forceload.query.failure" | "botania.entry.fireRod" | "block.minecraft.potted_birch_sapling" | "create.ponder.replay" | "advancements.adventure.trade_at_world_height.description" | "gui.jei.category.craftingTable" | "subtitles.block.comparator.click" | "theoneprobe.ae2.nested_p2p_tunnel" | "item.minecraft.tipped_arrow.effect.luck" | "create.ponder.smart_chute.text_2" | "create.ponder.smart_chute.text_1" | "create.ponder.smart_chute.text_4" | "key.keyboard.num.lock" | "create.ponder.smart_chute.text_3" | "gui.ae2.Partitioned" | "block.ae2.light_detector" | "item.ae2.fluix_hoe" | "item.minecraft.enchanted_golden_apple" | "ftbquests.reward.ftbquests.xp" | "subtitles.entity.fox.spit" | "item.botania.white_petal" | "block.botania.floating_jiyuulia" | "commands.gamerule.query" | "subtitles.item.armor.equip_leather" | "parsing.bool.invalid" | "block.minecraft.brown_stained_glass" | "botania.page.loonium1" | "multiplayer.disconnect.unverified_username" | "botania.page.loonium0" | "create.ponder.redstone_contact.text_2" | "entity.create.carriage_contraption" | "create.ponder.redstone_contact.text_1" | "tag.botania.mystical_flowers" | "botania.page.gIntro1" | "narration.checkbox.usage.hovered" | "botania.tagline.sparkChanger" | "botania.page.gIntro0" | "block.minecraft.dead_tube_coral_fan" | "resourcePack.load_fail" | "mco.configure.world.buttons.invite" | "block.minecraft.cut_red_sandstone_slab" | "item.ae2.toggle_bus" | "block.minecraft.banner.square_bottom_right.green" | "botania.page.gIntro3" | "botania.page.gIntro2" | "item.botania.lens_flare" | "key.keyboard.backslash" | "forge.container.enchant.limitedEnchantability" | "lootr.advancements.1barrel.description" | "block.minecraft.dead_bush" | "block.create.waxed_exposed_copper_shingle_stairs" | "block.create.cut_granite_bricks" | "selectServer.add" | "entity.minecraft.skeleton_horse" | "subtitles.entity.evoker_fangs.attack" | "item.create.zinc_nugget" | "item.minecraft.music_disc_far.desc" | "create.gui.filter.allow_list.description" | "item.botania.horn_snow" | "botania.tagline.jiyuulia" | "gui.tooltips.ae2.SupportedBy" | "create.gui.terrainzapper.pattern.chance75" | "botaniamisc.needsCatalysts" | "advancements.end.levitate.description" | "advancements.story.enchant_item.description" | "item.patchouli:test_book_1.landing" | "ftbquests.file.loot.entity.enabled" | "block.minecraft.rail" | "item.minecraft.stone_axe" | "argument.pos.outofbounds" | "theoneprobe.ae2.device_online" | "item.minecraft.bread" | "advancement.botania:tinyPotatoPet.desc" | "jei.chat.error.command.too.long" | "item.ae2.singularity" | "block.minecraft.banner.botania_flower.brown" | "mco.configure.world.buttons.options" | "item.ae2.orange_smart_dense_cable" | "botania.entry.diviningRod" | "block.create.cut_diorite" | "block.botania.mana_pylon" | "subtitles.block.conduit.attack.target" | "create.ponder.rotation_speed_controller.text_2" | "entity.minecraft.witch" | "block.botania.purple_mushroom" | "create.ponder.rotation_speed_controller.text_1" | "gamerule.universalAnger.description" | "block.create.small_bogey" | "block.minecraft.banner.rhombus.yellow" | "item.create.potato_cannon.tooltip.summary" | "mco.configure.world.forceGameMode" | "create.ponder.deployer_redstone.text_1" | "create.gui.schematicannon.option.skipTileEntities" | "create.ponder.deployer_redstone.text_2" | "block.minecraft.banner.botania_logo.yellow" | "create.ponder.deployer_redstone.text_3" | "key.ae2.portable_item_cell" | "subtitles.entity.polar_bear.warning" | "mco.client.outdated.title" | "create.gui.goggles.at_current_speed" | "create.train.status.end_of_track" | "botania.entry.infiniteFruit" | "create.gui.terrainzapper.pattern.chance50" | "create.station.no_assembly_diagonal" | "item.minecraft.music_disc_stal.desc" | "item.minecraft.cow_spawn_egg" | "ftbquests.unnamed" | "description.jei.wooden.door.1" | "item.minecraft.skeleton_spawn_egg" | "commands.title.show.subtitle.multiple" | "description.jei.wooden.door.3" | "description.jei.wooden.door.2" | "jei.ftbquests.lootcrates.dropped_by" | "commands.bossbar.set.style.success" | "botania.entry.jiyuulia" | "advancement.create.crafter_lazy_000" | "create.track.original_missing" | "patchouli.gui.lexicon.button.next_page" | "advancement.create.extendo_grip_dual.desc" | "subtitles.entity.glow_item_frame.rotate_item" | "config.jei.interface.comment" | "block.minecraft.banner.stripe_center.magenta" | "tag.botania.petals.red" | "botania.nei.manaPool" | "effect.minecraft.luck" | "block.minecraft.chiseled_sandstone" | "subtitles.entity.wither.spawn" | "options.difficulty.peaceful" | "subtitles.entity.hoglin.angry" | "create.schedule.remove_with_empty_hand" | "block.minecraft.infested_stone" | "death.attack.wither.player" | "create.item_attributes.astralsorcery_perk_gem.inverted" | "stat.minecraft.horse_one_cm" | "forge.configgui.selectiveResourceReloadEnabled.tooltip" | "block.minecraft.banner.botania_sapling.purple" | "subtitles.block.respawn_anchor.charge" | "block.create.warped_window_pane" | "achievement.ae2.CraftingCPU.desc" | "block.botania.bifrost" | "ftbquests.task.ftbquests.botania_mana.show_numbers" | "forge.update.beta.1" | "forge.update.beta.2" | "curios.identifier.body" | "selectWorld.locked" | "demo.help.movement" | "block.minecraft.dead_brain_coral_block" | "item.create.wand_of_symmetry.tooltip" | "botania.tagline.overgrowthSeed" | "ftbquests.completion_command" | "advancement.botania:kekimurusPickup.desc" | "block.minecraft.orange_stained_glass_pane" | "advancement.botania:l20ShardUse" | "block.minecraft.banner.botania_spark_isolated.black" | "controls.resetAll" | "create.generic.counter_clockwise" | "create.ponder.mechanical_arm_filtering.header" | "botania.page.spreader12" | "botania.page.spreader11" | "botania.page.spreader10" | "botania.entry.tinyPotato" | "create.gui.attribute_filter.no_selected_attributes" | "block.botania.dreamwood" | "block.botania.jiyuulia_chibi.reference" | "block.botania.floating_thermalily" | "block.minecraft.banner.square_top_left.cyan" | "create.item_attributes.renamed" | "block.botania.glimmering_stripped_livingwood" | "effect.minecraft.mining_fatigue" | "demo.day.warning" | "gui.tooltips.ae2.EmitWhenCrafting" | "item.minecraft.firework_star.shape.star" | "block.create.cut_tuff_brick_slab" | "subtitles.entity.creeper.hurt" | "structure_block.load_not_found" | "key.keyboard.left.win" | "block.minecraft.banner.diagonal_up_left.purple" | "itemGroup.misc" | "block.minecraft.allium" | "block.botania.floating_medumone" | "block.botania.metamorphic_taiga_cobblestone_slab" | "create.ponder.encased_fluid_pipe.header" | "create.ponder.funnel_transfer.header" | "block.minecraft.loom" | "botania.tagline.medumone" | "block.create.rose_quartz_lamp" | "selectWorld.gameMode.survival.line1" | "block.minecraft.banner.mojang.magenta" | "selectWorld.gameMode.survival.line2" | "patchouli.gui.lexicon.needs_air" | "item.ae2.me_p2p_tunnel" | "create.schedule.condition.player_count.exactly" | "item.botania.ancient_will_verac" | "config.jei.mode.editEnabled.comment" | "ftbquests.quest.shape.pentagon" | "chat.type.team.sent" | "subtitles.block.bubble_column.upwards_ambient" | "create.ponder.funnel_intro.header" | "commands.scoreboard.players.list.entity.entry" | "item.botania.rune_wrath" | "commands.give.success.single" | "item.create.linked_controller.tooltip.behaviour4" | "item.create.linked_controller.tooltip.behaviour3" | "subtitles.entity.bee.sting" | "item.create.linked_controller.tooltip.behaviour2" | "item.create.linked_controller.tooltip.behaviour1" | "create.gui.terrainzapper.brush.cluster" | "create.display_link.targeted_location" | "block.botania.agricarnation.reference" | "block.botania.cyan_floating_flower" | "create.gui.terrainzapper.pattern.chance25" | "commands.worldborder.damage.amount.success" | "block.minecraft.banner.small_stripes.gray" | "chat.ae2.ChestCannotReadStorageCell" | "item.ae2.blue_smart_cable" | "entity.minecraft.tropical_fish.type.brinely" | "item.minecraft.blaze_powder" | "chat.type.advancement.task" | "block.botania.dry_grass" | "block.create.speedometer" | "botania.entry.elfMessage" | "disconnect.quitting" | "block.minecraft.quartz_slab" | "create.menu.return" | "effect.minecraft.slow_falling" | "ftbquests.task.ftbquests.observation.timer" | "subtitles.entity.glow_squid.hurt" | "botaniamisc.pay2win" | "create.ponder.previous" | "block.minecraft.yellow_candle_cake" | "block.botania.framed_livingwood" | "create.display_link.view_compatible" | "block.botania.spark_changer" | "block.create.basin" | "block.minecraft.acacia_stairs" | "fml.loadingerrorscreen.warningheader" | "gui.ae2.Orange" | "block.minecraft.jack_o_lantern" | "block.minecraft.lime_wool" | "item.minecraft.wooden_shovel" | "item.minecraft.potion.effect.strength" | "gui.tooltips.ae2.SearchMode_REI" | "gui.ae2.Clean" | "item.create.sturdy_sheet" | "block.create.schematic_table" | "commands.stopsound.success.sourceless.any" | "item.create.empty_schematic" | "block.minecraft.weathered_cut_copper_stairs" | "argument.entity.selector.unknown" | "commands.experience.set.points.invalid" | "entity.minecraft.pig" | "block.create.small_scorchia_bricks" | "curios.modifiers.slots.plus.0" | "curios.modifiers.slots.plus.1" | "patchouli.gui.lexicon.loading_error_hover" | "curios.modifiers.slots.plus.2" | "ftbquests.rarity.epic" | "dataPack.validation.reset" | "advancement.create.diving_suit" | "item.create.crushed_quicksilver_ore" | "commands.stopsound.success.source.any" | "create.ponder.steam_whistle.header" | "curios.modifiers.belt" | "block.minecraft.banner.stripe_bottom.lime" | "block.minecraft.banner.square_top_right.brown" | "gui.tooltips.ae2.FilterModeKeep" | "ftbquests.reward.autoclaim.default" | "block.create.polished_cut_ochrum_slab" | "entity.minecraft.falling_block" | "magnetRing.invert" | "item.minecraft.debug_stick.empty" | "entity.minecraft.villager" | "block.minecraft.banner.flower.pink" | "botania.subtitle.astrolabeConfigure" | "subtitles.block.composter.ready" | "block.botania.orange_shiny_flower" | "create.track.opposing_slopes" | "menu.returnToGame" | "block.botania.stripped_livingwood_stairs" | "mco.reset.world.upload" | "key.keyboard.home" | "botania.brew.strength" | "create.ponder.mechanical_saw_breaker.header" | "ftbquests.reward_table" | "block.create.content_observer.tooltip.behaviour1" | "block.create.content_observer.tooltip.behaviour2" | "forge.configgui.zombieBaseSummonChance.tooltip" | "connect.encrypting" | "options.invertMouse" | "advancement.botania:heiseiDreamPickup" | "advancement.create.cart_pickup" | "item.ae2.fuzzy_card" | "block.minecraft.redstone_block" | "item.botania.missile_rod" | "block.botania.incense_plate" | "item.create.incomplete_precision_mechanism" | "item.botania.brew_flask" | "achievement.ae2.CraftingTerminal.desc" | "block.minecraft.polished_deepslate_stairs" | "tutorial.look.description" | "ftbquests.gui.select_task_type" | "container.shulkerBox.more" | "debug.profiling.help" | "block.create.clockwork_bearing" | "block.minecraft.banner.botania_lexicon.orange" | "item.botania.rune_autumn" | "block.minecraft.smooth_stone" | "ftbquests.gui.wiki" | "gui.ae2.SCSSize" | "string.naturescompass.status" | "create.recipe.spout_filling" | "item.ae2.white_paint_ball" | "create.ponder.mechanical_piston_modes.text_2" | "create.ponder.mechanical_piston_modes.text_1" | "create.ponder.weighted_ejector_redstone.text_1" | "jei.tooltip.delete.item" | "create.ponder.weighted_ejector_redstone.text_2" | "block.minecraft.banner.stripe_bottom.blue" | "block.ftbquests.chest.input_desc" | "create.station.idle" | "item.itemfilters.block.description" | "patchouli.gui.lexicon.loading_error_log" | "item.create.crushed_copper_ore" | "ftbquests.task.ftbquests.kill.value" | "item.minecraft.globe_banner_pattern.desc" | "item.ae2.redstone_p2p_tunnel" | "narration.cycle_button.usage.focused" | "create.contraption.minecart_contraption_illegal_pickup" | "effect.minecraft.poison" | "block.minecraft.crimson_stem" | "jei.tooltip.shapeless.recipe" | "selectWorld.search" | "item.minecraft.netherite_shovel" | "stat.minecraft.swim_one_cm" | "ccl.commands.count.total" | "create.boiler.status_short" | "narrator.toast.enabled" | "item.minecraft.piglin_spawn_egg" | "create.ponder.sequenced_gearshift.header" | "argument.block.id.invalid" | "block.botania.chiseled_dark_quartz" | "block.minecraft.red_glazed_terracotta" | "block.minecraft.banner.globe.pink" | "block.create.magenta_toolbox" | "advancement.create.lava_wheel_00000.desc" | "block.minecraft.banner.diagonal_up_left.white" | "block.create.turntable.tooltip.summary" | "selectWorld.tooltip.snapshot1" | "selectWorld.tooltip.snapshot2" | "block.create.oak_window_pane" | "item.ae2.fluid_storage_cell_256k" | "advancement.create.train" | "block.minecraft.coal_ore" | "botania.tagline.mIntro" | "argument.pos.outofworld" | "block.minecraft.end_stone_brick_slab" | "ftbteams.not_member" | "create.item_attributes.equipable" | "subtitles.entity.drowned.step" | "block.create.cut_scoria_brick_slab" | "gui.collapse_all" | "create.generic.radius" | "commands.experience.set.points.success.multiple" | "create.ponder.analog_lever.text_1" | "create.ponder.analog_lever.text_2" | "create.ponder.analog_lever.text_3" | "botania.page.distributor1" | "entity.minecraft.tropical_fish.type.glitter" | "botania.page.distributor0" | "advancement.create.shifting_gears" | "item.minecraft.vindicator_spawn_egg" | "commands.forge.tps.summary.basic" | "botania.rank4" | "botania.rank5" | "block.minecraft.attached_melon_stem" | "botania.rank2" | "botania.rank3" | "botania.category.devices" | "botania.rank0" | "botania.rank1" | "subtitles.entity.generic.small_fall" | "item.botania.manasteel_shears" | "ftbquests.task.ftbquests.location.dim" | "block.minecraft.lime_bed" | "create.station.icon_type" | "block.minecraft.banner.diagonal_left.brown" | "botania.entry.sparkChanger" | "gui.ae2.RequiredPower" | "block.minecraft.spruce_fence_gate" | "block.minecraft.banner.diagonal_up_right.red" | "botaniamisc.getALife" | "subtitles.entity.polar_bear.death" | "advancements.husbandry.kill_axolotl_target.title" | "entity.minecraft.elder_guardian" | "advancements.husbandry.axolotl_in_a_bucket.title" | "item.ftbquests.barrier.config" | "advancement.create.potato_cannon" | "item.minecraft.horse_spawn_egg" | "item.minecraft.zombie_spawn_egg" | "stat.minecraft.interact_with_brewingstand" | "advancement.create.arm_many_targets" | "gui.tooltips.ae2.LevelType_Item" | "ae2.rei_jei_integration.incompatible_recipe" | "advancement.create.super_glue" | "advancement.create.train_roadkill.desc" | "multiplayer.player.joined" | "options.controls" | "item.botania.cosmetic_orange_shades" | "item.ae2.calculation_processor_press" | "stat.minecraft.clean_armor" | "block.minecraft.banner.diagonal_left.pink" | "block.minecraft.jungle_pressure_plate" | "block.minecraft.banner.triangle_top.black" | "block.create.small_granite_brick_stairs" | "create.ponder.weighted_ejector_tunnel.header" | "block.minecraft.pink_shulker_box" | "subtitles.entity.strider.death" | "create.terrainzapper.leftClickToSet" | "block.minecraft.banner.botania_logo.white" | "item.minecraft.bat_spawn_egg" | "commands.datapack.modify.disable" | "subtitles.block.beehive.work" | "key.categories.ftbquests" | "sidebar_group.ftblibrary.util" | "create.ponder.chain_gearshift.text_1" | "commands.message.display.incoming" | "create.ponder.chain_gearshift.text_2" | "create.ponder.chain_gearshift.text_3" | "create.ponder.chain_gearshift.text_4" | "create.ponder.chain_gearshift.text_5" | "create.ponder.chain_gearshift.text_6" | "item.create.extendo_grip.tooltip" | "block.minecraft.banner.stripe_right.lime" | "gui.tooltips.ae2.FZIgnoreAll" | "item.create.crushed_nickel_ore" | "create.ponder.cart_assembler_dual.text_3" | "create.ponder.cart_assembler_dual.text_2" | "create.ponder.cart_assembler_dual.text_1" | "item.create.creative_blaze_cake.tooltip.summary" | "create.display_source.kinetic_stress.percent" | "create.gui.schedule.add_entry" | "create.ponder.stabilized_bearings.header" | "death.attack.drown.player" | "block.ae2.sky_stone_small_brick_slab" | "ftbquests.gui.pin" | "gui.ae2.SpatialAnchorUsedPower" | "death.attack.sweetBerryBush" | "create.gui.schematicannon.option.replaceWithEmpty.description" | "item.create.schematic.tooltip.action1" | "create.ponder.train_controls.text_4" | "advancement.botania:manaPoolPickup.desc" | "create.ponder.train_controls.text_3" | "create.ponder.train_controls.text_6" | "create.ponder.train_controls.text_5" | "create.ponder.train_controls.text_8" | "create.ponder.train_controls.text_7" | "mco.minigame.world.switch.new" | "create.ponder.train_controls.text_2" | "create.ponder.train_controls.text_1" | "item.minecraft.splash_potion.effect.regeneration" | "block.minecraft.banner.square_top_left.yellow" | "block.minecraft.banner.mojang.black" | "subtitles.entity.llama.hurt" | "gui.ae2.NoPermissions" | "block.minecraft.purple_candle" | "narrator.screen.usage" | "subtitles.entity.shulker.death" | "options.graphics.fabulous.tooltip" | "narrator.button.accessibility" | "block.minecraft.banner.half_vertical_right.lime" | "gui.tooltips.ae2.StashToPlayer" | "item.ae2.nether_quartz_hoe" | "block.minecraft.banner.border.light_blue" | "theoneprobe.ae2.unlocked" | "options.accessibility.text_background_opacity" | "spectatorMenu.team_teleport" | "block.botania.metamorphic_desert_bricks" | "theoneprobe.ae2.p2p_input_many_outputs" | "item.botania.pebble" | "block.minecraft.bed.obstructed" | "advancements.adventure.bullseye.title" | "tutorial.open_inventory.title" | "botania.page.forestDrum0" | "botania.page.forestDrum1" | "botania.page.forestDrum2" | "mco.configure.world.slot.switch.question.line2" | "mco.configure.world.slot.switch.question.line1" | "block.minecraft.banner.stripe_right.blue" | "subtitles.entity.rabbit.jump" | "create.ponder.valve_handle.text_2" | "create.ponder.valve_handle.text_1" | "create.ponder.valve_handle.text_4" | "create.ponder.valve_handle.text_3" | "block.botania.sunny_quartz" | "botaniamisc.floatingPrefix" | "block.minecraft.light_blue_banner" | "botania.page.phantomInk1" | "botania.page.phantomInk0" | "parsing.bool.expected" | "item.ftbquests.missing_item" | "createWorld.customize.presets" | "create.ponder.train_signal_placement.text_1" | "block.botania.brown_buried_petals" | "botania.subtitle.flareChakramThrow" | "create.ponder.train_signal_placement.text_2" | "container.upgrade" | "create.ponder.train_signal_placement.text_5" | "create.ponder.valve_handle.text_5" | "create.ponder.train_signal_placement.text_3" | "create.ponder.train_signal_placement.text_4" | "block.create.redstone_contact" | "subtitles.entity.parrot.imitate.magma_cube" | "block.minecraft.banner.botania_spark_dispersive.gray" | "create.super_glue.too_far" | "block.minecraft.banner.globe.orange" | "block.minecraft.banner.skull.lime" | "gui.jei.category.brewing.steps" | "soundCategory.player" | "stat_type.minecraft.mined" | "item_modifier.unknown" | "block.botania.glimmering_stripped_livingwood_log" | "patchouli.gui.lexicon.progress_tooltip.info" | "gui.socialInteractions.status_hidden_offline" | "create.schematicannon.status.running" | "item.minecraft.cooked_beef" | "block.minecraft.banner.half_vertical_right.blue" | "death.attack.create.mechanical_drill" | "item.minecraft.magma_cube_spawn_egg" | "selectWorld.import_worldgen_settings.experimental.title" | "ftbquests.task.ftbquests.observation.observe_type" | "create.item_attributes.blastable.inverted" | "generic.attack_range" | "optimizeWorld.stage.counting" | "item.botania.elementium_boots" | "mco.minigame.world.title" | "create.gui.attribute_filter.add_attribute" | "gui.tooltips.ae2.CpuSelectionMode" | "block.minecraft.weathered_cut_copper" | "options.pixel_value" | "item.botania.lens_efficiency.short" | "block.minecraft.banner.botania_logo.green" | "gui.settings" | "item.botania.tornado_rod" | "item.minecraft.splash_potion.effect.water_breathing" | "gui.socialInteractions.tab_all" | "block.minecraft.banner.stripe_bottom.purple" | "gui.active" | "resourcePack.broken_assets" | "advancement.create.hand_crank_000.desc" | "create.schematicannon.status.placing" | "item.minecraft.potion.effect.awkward" | "achievement.ae2.NetworkTool.desc" | "jei.tooltip.show.recipes" | "entity.minecraft.rabbit" | "block.minecraft.banner.diagonal_up_left.green" | "multiplayer.status.unrequested" | "lootr.advancements.10loot.title" | "block.create.polished_cut_limestone_wall" | "create.train.unnamed" | "advancements.story.iron_tools.title" | "commands.ftbquests.command.feedback.table_exported" | "menu.generatingLevel" | "block.minecraft.dirt_path" | "block.minecraft.banner.square_bottom_left.purple" | "lootr.message.should_sneak3" | "commands.scoreboard.players.enable.success.single" | "botania.entry.smeltRod" | "item.itemfilters.strong_nbt.description" | "botania.challenge.battery" | "advancements.husbandry.silk_touch_nest.title" | "item.minecraft.crossbow" | "selectServer.select" | "block.minecraft.banner.stripe_top.cyan" | "lootr.message.should_sneak2" | "inventory.binSlot" | "block.botania.red_shiny_flower" | "ftbquests.gui.set_dep" | "create.boiler.size" | "entity.create.seat" | "gui.recipebook.moreRecipes" | "create.subtitle.cogs" | "item.minecraft.splash_potion.effect.levitation" | "commands.advancement.revoke.many.to.one.failure" | "item.minecraft.music_disc_chirp" | "block.minecraft.lapis_ore" | "subtitles.entity.fishing_bobber.splash" | "block.ae2.quartz_growth_accelerator" | "botania.page.spellCloth1" | "block.minecraft.banner.base.yellow" | "block.botania.gourmaryllis.reference" | "block.create.small_tuff_brick_wall" | "botania.page.spellCloth0" | "item.minecraft.stray_spawn_egg" | "botania.page.forestEye1" | "botania.page.forestEye2" | "block.minecraft.banner.base.pink" | "botania.page.forestEye0" | "item.minecraft.splash_potion.effect.thick" | "item.minecraft.cooked_cod" | "botania.entry.corporeaCrystalCube" | "block.botania.dark_quartz_stairs" | "block.minecraft.observer" | "block.minecraft.banner.stripe_bottom.cyan" | "block.create.gearbox" | "block.minecraft.banner.creeper.purple" | "item.itemfilters.not.description" | "subtitles.entity.silverfish.ambient" | "botania.entry.bcIntegration" | "create.crafting_blueprint.crafting_slot" | "block.minecraft.prismarine_brick_slab" | "death.fell.accident.twisting_vines" | "block.minecraft.jungle_trapdoor" | "gui.tooltips.ae2.FuzzyMode" | "botania.tagline.forestEye" | "item.create.tree_fertilizer.tooltip" | "commands.team.list.teams.success" | "item.ae2.energy_card" | "botania.page.cocoon1" | "botania.page.cocoon0" | "botania.page.cocoon2" | "block.create.cut_granite" | "attribute.name.generic.movement_speed" | "gui.ae2.Fluix" | "narrator.position.list" | "commands.item.target.no_such_slot" | "block.minecraft.dead_brain_coral_fan" | "create.gui.terrainzapper.brush" | "block.botania.sunny_quartz_slab" | "argument.nbt.trailing" | "block.botania.livingwood_log" | "options.fov.min" | "subtitles.entity.zombie.destroy_egg" | "entity.minecraft.wither_skull" | "enderstorage.command.no_colour" | "entity.minecraft.eye_of_ender" | "block.minecraft.banner.triangle_bottom.red" | "botania.entry.craftCrate" | "botania.page.starSword0" | "botania.page.starSword1" | "block.minecraft.cyan_carpet" | "color.minecraft.red" | "block.minecraft.flowering_azalea_leaves" | "botania.page.magnetRing0" | "botania.page.magnetRing1" | "botania.page.magnetRing2" | "generator.amplified" | "block.create.andesite_ladder" | "block.minecraft.banner.botania_spark_dominant.red" | "options.online" | "key.jei.cheatOneItem" | "block.create.layered_deepslate" | "block.minecraft.banner.square_top_left.light_gray" | "botania.page.sparkChanger2" | "entity.botania.vine_ball" | "color.minecraft.gray" | "botania.tagline.heiseiDream" | "mco.selectServer.expiredList" | "create.schematicAndQuill.firstPos" | "block.create.polished_cut_scorchia_wall" | "botania.page.sparkChanger1" | "botania.page.sparkChanger0" | "gui.ae2.PatternEncoding.primary_processing_result_tooltip" | "fml.menu.multiplayer.compatible" | "block.minecraft.prismarine_slab" | "config.jei.advanced.giveMode" | "create.super_glue.success" | "block.minecraft.nether_portal" | "item.itemfilters.always_false.description" | "create.schedule.condition.threshold.place_item_2" | "create.display_source.station_summary.platform_column" | "block.ae2.fluix_stairs" | "gui.tooltips.ae2.Stash" | "botania.entry.manaBlaster" | "entity.minecraft.spider" | "fml.menu.mods.info.idstate" | "gui.ae2.units.tr" | "botania.entry.gaiaRitualHardmode" | "subtitles.entity.endermite.death" | "botania.subtitle.starcaller" | "create.gui.assembly.exception.chunkNotLoaded" | "container.isLocked" | "create.minecart_coupling.no_loops" | "commands.time.set" | "lootr.message.refresh_in" | "item.minecraft.potion.effect.swiftness" | "advancement.create.windmill_maxed.desc" | "block.botania.livingrock_bricks_wall" | "botania.category.alfhomancy" | "container.grindstone_title" | "mco.configure.world.opening" | "fml.messages.version.restriction.upper.exclusive" | "key.keyboard.period" | "create.display_source.max_enchant_level" | "botania.tagline.itemFinder" | "commands.ftbquests.change_team_rewards.invalid_id" | "death.attack.fireball" | "itemGroup.search" | "tag.botania.terrasteel_blocks" | "argument.entity.notfound.entity" | "block.botania.light_gray_floating_flower" | "item.ae2.item_storage_cell_1k" | "tag.botania.petals.light_blue" | "block.create.white_toolbox" | "item.botania.gravity_rod" | "botaniamisc.flugelUnbound" | "block.minecraft.big_dripleaf" | "block.ae2.quartz_block" | "botania.page.enderAir0" | "botania.page.enderAir1" | "commands.bossbar.list.bars.none" | "item.botania.blue_petal" | "block.create.flywheel.tooltip.summary" | "block.minecraft.deepslate_tile_slab" | "block.minecraft.banner.botania_flower.yellow" | "item.ae2.inverted_toggle_bus" | "gui.tooltips.ae2.OverlayMode" | "jei.ftbquests.lootcrates.no_chance" | "block.botania.apothecary_mossy" | "item.minecraft.piglin_banner_pattern.desc" | "create.ponder.pondering" | "block.ae2.sky_stone_small_brick" | "create.gui.schematicannon.optionEnabled" | "selectWorld.create" | "commands.forge.tracking.no_data" | "item.ae2.gray_covered_cable" | "block.botania.stripped_dreamwood_slab" | "create.display_source.item_throughput" | "commands.advancement.revoke.one.to.many.success" | "item.create.cinder_flour" | "mco.configure.world.subscription.months" | "entity.minecraft.experience_orb" | "block.create.steam_whistle_extension" | "death.attack.inWall" | "lootr.advancements.1chest.title" | "block.create.small_asurine_bricks" | "mco.errorMessage.6003" | "mco.errorMessage.6002" | "ftbquests.task.completed" | "mco.errorMessage.6001" | "key.keyboard.page.up" | "mco.errorMessage.6004" | "block.minecraft.banner.piglin.light_blue" | "event.minecraft.raid.defeat" | "block.botania.metamorphic_forest_cobblestone" | "create.ponder.chain_drive.text_2" | "options.rawMouseInput" | "create.ponder.chain_drive.text_3" | "gui.yes" | "block.minecraft.medium_amethyst_bud" | "create.display_source.scoreboard.objective_not_found" | "create.ponder.chain_drive.text_1" | "block.botania.floating_rafflowsia" | "block.create.yellow_nixie_tube" | "options.gamma.default" | "fml.menu.mods.info.updateavailable" | "subtitles.entity.axolotl.splash" | "block.minecraft.potted_crimson_fungus" | "botania.tagline.manaMirror" | "block.minecraft.banner.botania_shovel.brown" | "fml.modmismatchscreen.table.serverhas" | "advancements.adventure.bullseye.description" | "block.minecraft.pink_terracotta" | "connect.connecting" | "death.attack.flyIntoWall" | "create.generic.duration" | "key.ae2.portable_fluid_cell" | "advancement.create.wrench_goggles" | "block.minecraft.magenta_stained_glass_pane" | "block.create.cut_deepslate" | "block.minecraft.flower_pot" | "item.minecraft.fishing_rod" | "item.ae2.item_storage_cell_4k" | "create.gui.goggles.generator_stats" | "block.minecraft.light_gray_stained_glass_pane" | "mco.configure.world.buttons.done" | "advancement.create.wrench_goggles.desc" | "selectWorld.allowCommands.info" | "block.minecraft.mossy_stone_brick_stairs" | "block.botania.apothecary_default" | "subtitles.entity.rabbit.death" | "gui.ae2.Unlinked" | "patchouli.gui.lexicon.button.mark_category_read" | "block.minecraft.banner.half_vertical_right.brown" | "commands.bossbar.set.color.unchanged" | "block.botania.dreamwood_log" | "item.minecraft.enderman_spawn_egg" | "create.portal_track.blocked" | "subtitles.entity.axolotl.swim" | "gui.ae2.WirelessTerminals" | "item.botania.terrasteel_leggings" | "block.minecraft.polished_granite" | "subtitles.entity.cat.eat" | "block.botania.shimmerrock_stairs" | "botania.tagline.infiniteFruit" | "ftbquests.gui.add_reward_all" | "botaniamisc.command.full_book_function" | "commands.experience.set.levels.success.multiple" | "subtitles.entity.witch.hurt" | "curios.identifier.hands" | "block.minecraft.banner.botania_spark_dispersive.orange" | "selectWorld.gameMode.hardcore" | "subtitles.entity.zoglin.ambient" | "block.botania.crafty_crate" | "narration.cycle_button.usage.hovered" | "block.minecraft.banner.half_vertical.light_gray" | "commands.curios.reset.success" | "create.schedule.condition.unloaded" | "block.create.small_granite_brick_wall" | "key.categories.multiplayer" | "death.attack.create.fan_fire" | "advancements.adventure.shoot_arrow.description" | "soundCategory.block" | "achievement.ae2.ChargedQuartz" | "block.botania.clayconia_chibi" | "block.create.small_scoria_brick_slab" | "block.minecraft.cyan_candle" | "block.create.layered_scorchia" | "fml.menu.mods.openmodsfolder" | "structure_block.mode.save" | "block.minecraft.chest" | "botaniamisc.invalidDodge" | "curios.modifiers.curio" | "commands.attribute.failed.modifier_already_present" | "gamerule.naturalRegeneration" | "mco.configure.world.switch.slot" | "block.create.scorchia_pillar" | "botania.subtitle.thornChakramThrow" | "subtitles.entity.evoker.prepare_wololo" | "item.minecraft.cat_spawn_egg" | "block.minecraft.cut_red_sandstone" | "block.minecraft.oxidized_copper" | "block.botania.metamorphic_taiga_cobblestone_stairs" | "options.realmsNotifications" | "commands.ban.success" | "botania.brew.feather_feet" | "ccl.commands.gc.after" | "block.minecraft.jungle_sign" | "gui.ae2.ShowingOf" | "block.minecraft.banner.circle.white" | "block.create.lime_seat" | "biome.minecraft.jagged_peaks" | "ftbquests.reward_table.empty_weight" | "commands.difficulty.failure" | "multiplayer.disconnect.generic" | "gui.cancel" | "create.ponder.brass_tunnel_modes.text_10" | "create.ponder.brass_tunnel_modes.text_11" | "block.minecraft.white_carpet" | "create.ponder.brass_tunnel_modes.text_12" | "block.enderstorage.ender_chest" | "block.create.polished_cut_crimsite_slab" | "advancement.botania:dandelifeonPickup" | "death.attack.cramming" | "block.botania.mana_fluxfield" | "block.minecraft.red_sandstone" | "subtitles.item.bottle.empty" | "commands.difficulty.success" | "18stones.enabled" | "gui.ae2.CompatibleUpgrades" | "item.minecraft.potion.effect.invisibility" | "item.botania.lens_gravity" | "ftbquests.gui.requires" | "botania.page.mushrooms0" | "botania.page.mushrooms1" | "createWorld.customize.custom.useCaves" | "botania.page.mushrooms2" | "item.minecraft.music_disc_wait.desc" | "attribute.name.generic.attack_knockback" | "mco.configure.world.uninvite.question" | "advancement.create.steam_engine.desc" | "block.minecraft.light_gray_stained_glass" | "ftbquests.dependencies" | "commands.forge.tags.error.unknown_registry" | "filled_map.mansion" | "item.minecraft.gold_nugget" | "block.minecraft.banner.diagonal_up_right.brown" | "block.minecraft.black_candle" | "botania.entry.pollidisiac" | "mco.configure.world.switch.slot.subtitle" | "advancement.botania:gaiaGuardianNoArmor.desc" | "block.create.small_asurine_brick_wall" | "botania.entry.ghostRail" | "jigsaw_block.final_state" | "item.minecraft.shield.light_blue" | "botania.entry.craftingHalo" | "fml.menu.mods.info.signature.unsigned" | "ae2.rei_jei_integration.missing_items" | "entity.minecraft.illusioner" | "subtitles.entity.cat.beg_for_food" | "create.recipe.mixing" | "botania.tagline.tigerseye" | "item.ae2.void_card" | "botania.subtitle.altarCraft" | "block.minecraft.green_candle" | "item.botania.cosmetic_witch_pin" | "commands.scoreboard.objectives.display.cleared" | "subtitles.block.piston.move" | "options.chat.width" | "forge.configgui.forgeLightPipelineEnabled.tooltip" | "botania.entry.manaRing" | "options.graphics.fast" | "debug.show_hitboxes.on" | "selectWorld.gameMode.spectator" | "entity.minecraft.tropical_fish.type.blockfish" | "container.chest" | "block.create.layered_asurine" | "patchouli.gui.lexicon.mark_complete" | "botania.subtitle.spreaderRemoveLens" | "jei.tooltip.error.recipe.transfer.too.large.player.inventory" | "block.minecraft.banner.stripe_right.yellow" | "item.botania.magnet_ring_greater" | "block.botania.blue_shiny_flower" | "mco.download.extracting" | "ftbquests.rarity.rare" | "block.botania.corporea_brick_stairs" | "mco.configure.world.title" | "create.ponder.fan_processing.header" | "mco.selectServer.expires.soon" | "commands.team.list.members.success" | "block.create.polished_cut_limestone" | "block.minecraft.powder_snow_cauldron" | "block.minecraft.potted_wither_rose" | "item.minecraft.leather_helmet" | "item.ae2.certus_quartz_axe" | "block.minecraft.smooth_red_sandstone_stairs" | "options.fov.max" | "commands.advancement.grant.one.to.many.failure" | "config.jei.search.modNameSearchMode.comment" | "botania.page.blackHoleTalisman1" | "botaniamisc.active" | "botania.page.blackHoleTalisman2" | "options.fullscreen.resolution" | "botania.page.blackHoleTalisman0" | "entity.minecraft.silverfish" | "commands.ftbquests.change_team_rewards.text" | "create.tooltip.capacityProvided" | "block.minecraft.birch_fence_gate" | "advancement.create.funnel" | "block.botania.glimmering_livingwood_log" | "options.chat.color" | "item.ae2.fluix_axe" | "block.botania.dark_quartz_pillar" | "botania.entry.bergamute" | "botaniamisc.unsetRecipe" | "debug.chunk_boundaries.on" | "subtitles.entity.strider.happy" | "block.minecraft.red_stained_glass" | "selectWorld.import_worldgen_settings.failure" | "botaniamisc.advancements" | "create.flap_display.cycles.numeric" | "advancements.end.dragon_egg.title" | "block.create.cut_deepslate_slab" | "create.subtitle.worldshaper_place" | "gui.tooltips.ae2.CpuStatusCoProcessor" | "block.minecraft.banner.botania_tiny_potato.gray" | "botania.page.blackHoleTalisman3" | "createWorld.customize.preset.desert" | "create.ponder.pulse_extender.header" | "options.ao.off" | "subtitles.item.honey_bottle.drink" | "create.subtitle.whistle_train" | "mco.configure.world.buttons.moreoptions" | "block.minecraft.spruce_trapdoor" | "gui.ae2.Red" | "item.ae2.green_paint_ball" | "entity.minecraft.fishing_bobber" | "subtitles.entity.llama.eat" | "botania.tagline.loonium" | "gui.recipebook.toggleRecipes.all" | "create.schedule.condition.idle_short" | "biome.minecraft.badlands" | "advancement.botania:bubbellPickup" | "block.minecraft.dark_prismarine_stairs" | "command.exception" | "item.kubejs.dummy_fluid_item" | "create.tooltip.speedRequirement" | "block.minecraft.moss_carpet" | "item.minecraft.wolf_spawn_egg" | "entity.minecraft.slime" | "block.create.acacia_window_pane" | "block.minecraft.banner.stripe_middle.purple" | "advancement.botania:tiaraWings" | "item.ae2.light_gray_covered_cable" | "item.botania.livingwood_twig" | "item.create.copper_backtank_placeable" | "botaniamisc.color" | "item.minecraft.shield.gray" | "mco.template.info.tooltip" | "options.mainHand.left" | "fml.dependencyloading.conflictingdependencies" | "botania.triggers.manaEmpty" | "create.recipe.automatic_shapeless" | "menu.resetdemo" | "item.ae2.magenta_glass_cable" | "advancement.create.brass.desc" | "block.minecraft.sweet_berry_bush" | "botaniamisc.creative" | "block.create.small_veridium_brick_slab" | "waila.ae2.Charged" | "block.minecraft.weathered_copper" | "item.ae2.memory_card_cyan" | "enchantment.minecraft.depth_strider" | "botaniamisc.drop" | "entity.minecraft.experience_bottle" | "create.schedule.condition.fluid_threshold" | "subtitles.entity.generic.swim" | "subtitles.entity.villager.celebrate" | "block.botania.metamorphic_taiga_cobblestone" | "block.minecraft.turtle_egg" | "block.minecraft.banner.botania_shovel.lightBlue" | "item.ae2.fe_p2p_tunnel" | "entity.botania.doppleganger" | "botania.page.bcIntegration0" | "subtitles.entity.llama.angry" | "debug.profiling.start" | "options.difficulty.hardcore" | "attribute.unknown" | "ftbquests.gui.autopin.on" | "create.ponder.gantry_redstone.header" | "ftbquests.variable.max" | "block.minecraft.end_stone_brick_stairs" | "block.botania.metamorphic_mesa_stone" | "botania.entry.shulk_me_not" | "create.train.status.coupling_stress" | "chat.type.emote" | "create.mechanical_arm.extract_from" | "ftblibrary.select_item.list_mode.rei" | "block.botania.corporea_retainer" | "commands.pardon.failed" | "argument.entity.options.x_rotation.description" | "botania.subtitle.entropinnyumAngry" | "botania.entry.vinculotus" | "options.attack.crosshair" | "biome.minecraft.snowy_taiga" | "block.create.cut_deepslate_stairs" | "jigsaw_block.joint.aligned" | "botania.brew.allure" | "block.minecraft.black_carpet" | "block.minecraft.bubble_coral_block" | "create.item_attributes.book_copy_original.inverted" | "botania.entry.redstoneSpreader" | "advancement.create.drain.desc" | "config.jei" | "block.minecraft.banner.skull.purple" | "botania.page.ghostRail0" | "botania.page.ghostRail1" | "botania.entry.challenges" | "entity.ae2.growing_crystal" | "commands.forge.entity.list.multiple.header" | "block.create.cut_diorite_stairs" | "item.minecraft.mojang_banner_pattern.desc" | "create.station.how_to" | "create.ponder.identify" | "item.ae2.portable_fluid_cell_4k" | "advancement.create.contraption_actors" | "create.gui.schematicTable.refresh" | "create.weighted_ejector.target_not_valid" | "death.attack.magic" | "config.jei.search.tagSearchMode" | "item.ae2.portable_fluid_cell_1k" | "botania.armorset.manaweave.desc0" | "item.minecraft.music_disc_mellohi" | "block.create.cut_calcite_brick_slab" | "create.mechanical_arm.points_outside_range" | "botania.armorset.manaweave.desc1" | "block.minecraft.jungle_button" | "manaFluxfield.enabled" | "itemGroup.create.base" | "createWorld.customize.custom.useMineShafts" | "item.minecraft.lead" | "subtitles.entity.turtle.egg_break" | "item.minecraft.golden_apple" | "waila.ae2.ChannelsOf" | "tag.botania.petals.pink" | "create.gui.schematicannon.option.skipMissing" | "ftbquests.loot.entitytype.monster" | "subtitles.entity.cod.death" | "item.create.handheld_worldshaper.tooltip.control2" | "item.create.handheld_worldshaper.tooltip.control1" | "item.create.handheld_worldshaper.tooltip.control3" | "subtitles.entity.dolphin.swim" | "advancements.nether.fast_travel.title" | "block.minecraft.banner.botania_spark_dominant.magenta" | "fml.menu.mods.info.version" | "block.create.copper_shingle_slab" | "sidebar_group.ftblibrary.cheat" | "botania.entry.astrolabe" | "block.minecraft.banner.half_horizontal.light_blue" | "block.minecraft.banner.bricks.cyan" | "createWorld.customize.custom.baseSize" | "ftbquests.task.ftbquests.item.valid_items" | "block.minecraft.end_rod" | "create.minecart_coupling.unloaded" | "commands.ftbquests.weigh_from_emc.invalid_id" | "block.minecraft.polished_granite_stairs" | "block.minecraft.smooth_quartz" | "item.enderstorage.ender_pouch" | "gui.ae2.Fluids" | "botania.subtitle.spreaderUnScaffold" | "botaniamisc.altarRefill0" | "botaniamisc.altarRefill1" | "block.create.stockpile_switch" | "create.ponder.windmill_source.text_5" | "create.ponder.windmill_source.text_4" | "block.minecraft.banner.half_horizontal.yellow" | "create.ponder.windmill_source.text_7" | "create.ponder.windmill_source.text_6" | "create.ponder.windmill_source.text_1" | "create.ponder.windmill_source.text_3" | "create.ponder.windmill_source.text_2" | "commands.forceload.removed.failure" | "gui.downloading" | "block.kubejs.livingrock_casing" | "item.minecraft.splash_potion.effect.turtle_master" | "botania.tagline.manaAlchemy" | "gui.jei.category.smelting.experience" | "block.botania.brewery" | "selectWorld.title" | "block.minecraft.banner.gradient.light_blue" | "entity.minecraft.tropical_fish.type.dasher" | "block.create.placard" | "block.minecraft.white_candle" | "create.ponder.mechanical_crafter_connect.header" | "block.minecraft.gray_terracotta" | "subtitles.entity.item_frame.add_item" | "item.ae2.fluix_smart_dense_cable" | "forge.configgui.showLoadWarnings" | "advancements.nether.root.title" | "botania.tagline.bellows" | "ftbquests.task.ftbquests.xp.points.tooltip" | "key.keyboard.semicolon" | "block.minecraft.banner.diagonal_up_right.blue" | "block.create.andesite_tunnel" | "botania.entry.goddessCharm" | "block.minecraft.banner.triangles_top.orange" | "effect.minecraft.glowing" | "block.minecraft.banner.small_stripes.light_gray" | "block.botania.tangleberrie" | "botania.entry.spectralPlatform" | "fml.menu.multiplayer.extraservermods" | "advancements.nether.all_effects.description" | "advancement.create.water_wheel.desc" | "commands.item.target.no_changed.known_item" | "block.minecraft.banner.small_stripes.pink" | "debug.profiling.stop" | "botaniamisc.crystalCubeLocked" | "item.minecraft.glow_item_frame" | "item.minecraft.splash_potion.effect.empty" | "advancement.create.honey_drain.desc" | "subtitles.entity.generic.extinguish_fire" | "create.display_source.value_list.thousand" | "spectatorMenu.root.prompt" | "block.botania.cyan_mushroom" | "botania.subtitle.laputaStart" | "gui.tooltips.ae2.ActiveOnPulse" | "block.create.andesite_funnel" | "options.accessibility.link" | "translation.test.world" | "options.graphics" | "create.portal_track.failed" | "subtitles.block.pointed_dripstone.drip_water" | "create.gui.terrainzapper.tool.overlay" | "gui.tooltips.ae2.ActiveWithSignal" | "gui.ae2.TransparentFacadesHint" | "item.botania.speed_up_belt" | "block.minecraft.banner.rhombus.brown" | "chat.type.admin" | "advancement.botania:lexiconUse.desc" | "create.ponder.mechanical_drill.text_2" | "create.ponder.mechanical_drill.text_1" | "deathScreen.respawn" | "subtitles.block.beacon.activate" | "createWorld.customize.custom.preset.isleLand" | "mount.onboard" | "item.botania.lens_damage" | "subtitles.entity.cat.hiss" | "block.botania.chiseled_mana_quartz" | "ftblibrary.select_item.count" | "botania.page.monocle2" | "botania.page.monocle1" | "botania.page.monocle0" | "multiplayer.disconnect.outdated_server" | "block.minecraft.banner.botania_flower.black" | "block.minecraft.banner.diagonal_up_right.lime" | "commands.ban.failed" | "key.jei.previousPage" | "block.create.shadow_steel_casing" | "lootr.advancements.social.title" | "block.minecraft.scaffolding" | "subtitles.entity.fox.bite" | "item.minecraft.potion.effect.levitation" | "mco.upload.select.world.none" | "gui.ae2.CPUs" | "createWorld.customize.custom.center" | "createWorld.customize.custom.confirmTitle" | "item.minecraft.elytra" | "block.create.cut_granite_wall" | "block.create.polished_cut_calcite_slab" | "create.generic.speed" | "ccl.commands.killall.success.line" | "block.minecraft.banner.botania_spark_dispersive.pink" | "block.minecraft.banner.botania_spark_isolated.yellow" | "ftbquests.variable" | "botania.entry.banners" | "structure_block.mode_info.data" | "gui.socialInteractions.server_label.multiple" | "advancement.create.spout.desc" | "achievement.ae2.QuartzCrystal.desc" | "advancements.adventure.voluntary_exile.title" | "create.potato_cannon.ammo.reload_ticks" | "botania.page.terraPick0" | "botania.page.terraPick1" | "botania.page.terraPick2" | "botania.page.terraPick3" | "gui.ae2.Interfaces" | "subtitles.entity.turtle.egg_hatch" | "item.minecraft.mutton" | "item.botania.lens_fire" | "block.botania.blue_pavement_slab" | "fml.menu.multiplayer.vanilla.incompatible" | "block.minecraft.banner.botania_sapling.lime" | "create.schedule.condition.threshold.less" | "entity.minecraft.cave_spider" | "block.create.water_wheel" | "disconnect.unknownHost" | "create.generic.length" | "block.create.pulse_repeater" | "forge.configgui.alwaysSetupTerrainOffThread.tooltip" | "subtitles.item.bundle.remove_one" | "commands.data.entity.get" | "item.ae2.calculation_processor" | "botaniamisc.command.skyblock.island.success" | "commands.advancement.revoke.criterion.to.one.failure" | "item.itemfilters.xor" | "botania.page.terraPick4" | "block.botania.livingwood_fence" | "botania.page.terraPick5" | "string.naturescompass.source" | "block.minecraft.purpur_stairs" | "block.minecraft.banner.circle.green" | "subtitles.entity.parrot.imitate.stray" | "item.minecraft.lingering_potion.effect.healing" | "mco.configure.world.location" | "block.create.glass_fluid_pipe" | "block.botania.dark_quartz" | "forge.controlsgui.shift" | "block.minecraft.banner.half_vertical.brown" | "gui.ae2.SearchTooltip" | "block.minecraft.hay_block" | "createWorld.customize.flat.removeLayer" | "mco.configure.world.players.error" | "block.minecraft.banner.stripe_bottom.light_gray" | "gameMode.adventure" | "lexicon.render.3D" | "botania.entry.corporeaBlock" | "subtitles.entity.bee.pollinate" | "create.tooltip.speedRequirement.fast" | "block.minecraft.note_block" | "ftbquests.task.ftbquests.npc_quest.id" | "subtitles.item.crop.plant" | "block.create.stressometer" | "ftbquests.chapter.image.rotation" | "tag.botania.terrasteel_nuggets" | "patchouli.gui.lexicon.progress_tooltip.secret1" | "ftbquests.task.ftbquests.forge_energy.value" | "entity.minecraft.horse" | "create.ponder.mechanical_harvester.header" | "block.minecraft.banner.piglin.black" | "botania.entry.bubbell" | "block.minecraft.banner.botania_sapling.blue" | "attribute.name.generic.armor_toughness" | "tag.botania.elementium_nuggets" | "botania.subtitle.spreaderAddLens" | "item.botania.lens_storm.short" | "block.create.mechanical_arm" | "block.minecraft.banner.small_stripes.brown" | "advancements.end.enter_end_gateway.description" | "block.create.polished_cut_deepslate" | "block.botania.floating_solegnolia" | "item.patchouli:test_book_2.landing" | "dataPack.validation.back" | "block.botania.metamorphic_mesa_cobblestone_slab" | "block.create.cut_calcite_stairs" | "options.key.hold" | "item.ae2.brown_covered_cable" | "patchouli.gui.lexicon.multiblock_bookmark" | "block.botania.floating_jiyuulia_chibi" | "filled_map.id" | "subtitles.entity.phantom.flap" | "generator.single_biome_caves" | "subtitles.entity.rabbit.hurt" | "subtitles.entity.ravager.roar" | "botania.tagline.forestDrum" | "block.lootr.lootr_inventory" | "mco.upload.preparing" | "create.item_attributes.shulker_level.full" | "block.minecraft.banner.stripe_left.brown" | "enchantment.minecraft.loyalty" | "menu.loadingForcedChunks" | "botaniamisc.dropTip0" | "botaniamisc.dropTip1" | "config.jei.search" | "gui.tooltips.ae2.DurationFormatSeconds" | "block.botania.chiseled_red_quartz" | "block.minecraft.banner.square_top_right.pink" | "gui.tooltips.ae2.InterfaceTerminalDisplayMode" | "block.minecraft.banner.square_top_left.gray" | "selectWorld.enterSeed" | "subtitles.block.pointed_dripstone.land" | "block.botania.elf_quartz_stairs" | "block.create.sticky_mechanical_piston" | "tag.botania.floating_flowers" | "gui.proceed" | "block.create.cogwheel" | "item.minecraft.blaze_rod" | "structure_block.position" | "botania.tagline.waterRing" | "item.minecraft.iron_sword" | "subtitles.entity.mooshroom.suspicious_milk" | "botania.tagline.spectralPlatform" | "death.fell.accident.vines" | "item.botania.rune_mana" | "chat.ae2.CommunicationError" | "jei.key.category.overlays" | "ftbquests.reward.ftbquests.npc_mail.been_read" | "block.minecraft.banner.stripe_downleft.cyan" | "entity.minecraft.armor_stand" | "block.minecraft.banner.botania_sapling.white" | "commands.ae2.ChunkLoggerOn" | "string.naturescompass.radius" | "block.minecraft.candle_cake" | "debug.cycle_renderdistance.message" | "fml.modloading.brokenfile.invalidzip" | "item.ae2.black_smart_cable" | "item.botania.dodge_ring" | "block.create.polished_cut_diorite_stairs" | "botania.tagline.endoflame" | "create.symmetry.mirror.doublePlane" | "block.create.cut_scoria_bricks" | "item.create.handheld_worldshaper.tooltip" | "effect.minecraft.invisibility" | "botania.page.flowers5.5" | "block.minecraft.acacia_leaves" | "block.minecraft.banner.stripe_bottom.black" | "gui.ae2.Set" | "commands.effect.clear.everything.failed" | "block.minecraft.banner.gradient.red" | "ftbquests.quest.dependency_requirement" | "block.minecraft.banner.botania_spark_recessive.cyan" | "block.minecraft.banner.flower.black" | "entity.botania.thrown_item" | "advancement.create.track_0.desc" | "advancement.create.honey_drain" | "block.minecraft.soul_wall_torch" | "block.create.deepslate_zinc_ore" | "death.attack.witherSkull" | "botania.tagline.smeltRod" | "potion.potency.5" | "commands.placefeature.failed" | "commands.scoreboard.players.add.success.single" | "item.minecraft.lingering_potion.effect.luck" | "block.minecraft.banner.stripe_right.magenta" | "subtitles.item.hoe.till" | "item.botania.super_lava_pendant" | "botania.brew.emptiness" | "block.minecraft.birch_planks" | "block.minecraft.stone_slab" | "gui.jei.category.fuel.smeltCount.single" | "gamerule.spectatorsGenerateChunks" | "potion.potency.0" | "block.minecraft.frosted_ice" | "potion.potency.4" | "ftbquests.quest.hide_dependency_lines" | "gui.tooltips.ae2.MatterBalls" | "block.minecraft.oak_slab" | "potion.potency.3" | "potion.potency.2" | "potion.potency.1" | "selectWorld.futureworld.error.text" | "block.create.andesite_encased_shaft" | "harvestLevel.weightLens" | "entity.minecraft.painting" | "block.botania.heisei_dream" | "botania.tagline.redstoneSpreader" | "entity.minecraft.villager.librarian" | "botania.entry.keepIvy" | "ftbquests.task.ftbquests.ic2_energy.text" | "config.jei.interface.overlayEnabled.comment" | "item.create.builders_tea.tooltip.summary" | "commands.forge.tags.registry_key" | "block.create.cut_crimsite_brick_slab" | "advancement.botania:lokiRing" | "item.minecraft.vex_spawn_egg" | "stat.minecraft.boat_one_cm" | "generator.single_biome_surface" | "biome.minecraft.dripstone_caves" | "block.create.small_calcite_brick_wall" | "advancements.adventure.spyglass_at_parrot.title" | "block.botania.lime_petal_block" | "debug.gamemodes.press_f4" | "advancement.create.fan_processing" | "block.botania.metamorphic_plains_cobblestone_wall" | "create.gui.sequenced_gearshift.instruction.turn_distance" | "item.ae2.green_covered_dense_cable" | "ftbquests.raymatcher.block_entity_class" | "options.prioritizeChunkUpdates.none" | "enchantment.minecraft.power" | "subtitles.entity.ravager.hurt" | "botania.page.elfGear7a" | "block.minecraft.warped_pressure_plate" | "gui.ae2.P2PAttunementFluid" | "botania.page.elfGear7b" | "botania.page.spawnerMover0" | "botania.page.spawnerMover1" | "block.minecraft.horn_coral_fan" | "create.gui.schematicannon.title" | "advancements.toast.challenge" | "block.botania.metamorphic_plains_stone_slab" | "create.ponder.train_controls.header" | "death.fell.accident.weeping_vines" | "botaniamisc.justDoIt" | "block.ftbquests.progress_detector" | "subtitles.entity.axolotl.idle_air" | "create.ponder.water_wheel.header" | "create.station.no_assembly_diagonal_1" | "soundCategory.neutral" | "gui.tooltips.ae2.StashToPlayerDesc" | "advancements.nether.summon_wither.title" | "subtitles.entity.blaze.ambient" | "botania.tagline.starfield" | "commands.pardonip.failed" | "item.itemfilters.always_true.description" | "string.naturescompass.temperature" | "botania.brew.clear" | "stat.minecraft.talked_to_villager" | "advancement.create.crusher_maxed_0000.desc" | "title.multiplayer.lan" | "subtitles.entity.zombified_piglin.hurt" | "jei.key.category.cheat.mode" | "botania.entry.heiseiDream" | "mco.configure.world.closing" | "gui.ae2.SpatialAnchorLoadedChunks" | "entity.minecraft.villager.armorer" | "gui.socialInteractions.title" | "item.minecraft.ravager_spawn_egg" | "item.ae2.orange_covered_cable" | "botania.entry.manaweave" | "block.minecraft.twisting_vines_plant" | "create.gui.sequenced_gearshift.speed.forward_fast" | "gui.tooltips.ae2.SubstitutionsDescDisabled" | "createWorld.customize.flat.layer.top" | "enderstorage.command.no_arguments" | "mco.reset.world.warning" | "block.botania.yellow_mushroom" | "gui.ae2.Unattached" | "multiplayer.disconnect.ip_banned" | "mco.download.cancelled" | "ftbquests.chapter.default_quest_shape" | "block.botania.pattern_framed_livingwood" | "item.botania.light_gray_petal" | "create.gui.symmetryWand.orientation" | "block.botania.metamorphic_swamp_cobblestone_stairs" | "botania.tagline.virus" | "commands.worldborder.get" | "block.botania.livingwood_planks" | "botaniamisc.rannuncarpus.state_insensitive" | "block.create.brass_casing" | "botania.page.manaDetector1" | "botania.page.manaDetector0" | "create.gui.assembly.exception.unmovableBlock" | "create.track.ascending_s_curve" | "botania.subtitle.blackHoleTalismanConfigure" | "ftbquests.file.loot_crate_no_drop" | "create.ponder.mechanical_drill.header" | "item.botania.water_ring" | "block.minecraft.banner.base.gray" | "botania.page.elfGear10" | "botania.page.elfGear11" | "botania.page.elfGear12" | "botania.page.elfGear13" | "botania.page.elfGear14" | "botania.page.elfGear15" | "item.ae2.facade" | "botania.tagline.divaCharm" | "block.create.cut_crimsite" | "create.tooltip.up_to" | "botania.tagline.missileRod" | "commands.clone.success" | "death.attack.explosion" | "pack.dropInfo" | "block.botania.floating_orechid" | "botania.entry.agricarnation" | "botania.subtitle.holyCloak" | "commands.spectate.self" | "item.minecraft.lingering_potion.effect.regeneration" | "block.create.pink_seat" | "item.create.schematic_and_quill.tooltip.action2" | "item.create.schematic_and_quill.tooltip.action1" | "block.minecraft.banner.cross.red" | "item.create.schematic_and_quill.tooltip.action3" | "fml.menu.multiplayer.clientoutdated" | "subtitles.entity.wandering_trader.no" | "botania.page.corporeaBlock0" | "botania.page.corporeaBlock1" | "create.gui.scrollInput.shiftScrollsFaster" | "ftbquests.task.ftbquests.npc_faction" | "block.minecraft.banner.gradient_up.blue" | "config.jei.mode.editEnabled" | "item.minecraft.mooshroom_spawn_egg" | "commands.attribute.modifier.value.get.success" | "argument.long.big" | "ftbquests.quest.shape.rsquare" | "subtitles.entity.goat.death" | "item.minecraft.netherite_helmet" | "botania.tagline.flugelEye" | "key.jump" | "ftbquests.chapter.image.dev" | "block.botania.yellow_shiny_flower" | "block.botania.metamorphic_mountain_stone_slab" | "botaniamisc.dropIkea" | "block.minecraft.banner.triangle_top.yellow" | "soundCategory.master" | "create.station.how_to_1" | "create.station.how_to_2" | "create.ponder.chute.text_3" | "subtitles.item.ink_sac.use" | "create.ponder.chute.text_2" | "create.ponder.chute.text_1" | "subtitles.entity.villager.trade" | "botania.tagline.pixieRing" | "item.create.crushed_gold_ore" | "block.create.cut_scorchia_brick_stairs" | "create.ponder.hose_pulley_level.text_1" | "commands.forge.tags.error.unknown_element" | "achievement.ae2.SpatialIO" | "create.ponder.hose_pulley_level.text_3" | "jei.key.category.dev.tools" | "create.ponder.hose_pulley_level.text_2" | "create.ponder.hose_pulley_level.text_5" | "create.ponder.hose_pulley_level.text_4" | "block.minecraft.oak_pressure_plate" | "block.create.placard.tooltip.behaviour2" | "botania.page.manaBomb0" | "block.create.placard.tooltip.behaviour1" | "botania.page.manaBomb1" | "create.gui.schedule.rmb_remove" | "item.botania.ender_dagger" | "lectern.take_book" | "create.ponder.fluid_tank_sizes.header" | "block.minecraft.birch_wood" | "createWorld.customize.custom.randomize" | "block.minecraft.banner.gradient_up.lime" | "enchantment.minecraft.thorns" | "connect.authorizing" | "death.attack.flyIntoWall.player" | "create.schedule.condition.time_of_day.digital_format" | "commands.tag.list.multiple.empty" | "key.keyboard.space" | "block.create.polished_cut_deepslate_stairs" | "block.botania.solegnolia_chibi" | "fml.menu.mods.search" | "gui.search_box" | "create.display_source.station_summary.filter" | "ftbquests.reward.autoclaim.disabled" | "ftbquests.task.ftbquests.observation" | "block.minecraft.banner.botania_sapling.green" | "botania.page.elfResources3" | "botania.page.elfResources4" | "advancement.create.super_glue.desc" | "botania.page.elfResources5" | "botania.page.elfResources6" | "botania.page.elfResources7" | "botania.page.elfResources8" | "botania.page.elfResources9" | "ftbquests.file.emergency_items" | "item.minecraft.red_dye" | "create.super_glue.cannot_reach" | "mco.minigame.world.noSelection" | "subtitles.entity.iron_golem.damage" | "gui.ae2.SelectAmount" | "botania.page.elfResources0" | "botania.page.elfResources1" | "botania.page.elfResources2" | "title.32bit.deprecation.realms.header" | "block.minecraft.air" | "block.minecraft.banner.curly_border.orange" | "block.minecraft.poppy" | "jei.message.copy.recipe.id.failure" | "item.canPlace" | "subtitles.entity.illusioner.prepare_mirror" | "block.create.red_sail" | "gui.tooltips.ae2.ReportInaccessibleItemsNo" | "block.botania.fallen_kanade.reference" | "commands.debug.function.traceFailed" | "forge.configgui.treatEmptyTagsAsAir.tooltip" | "options.sensitivity.max" | "item.botania.mana_pearl" | "advancement.create.andesite_casing" | "options.prioritizeChunkUpdates.byPlayer.tooltip" | "commands.scoreboard.objectives.modify.rendertype" | "commands.advancement.revoke.criterion.to.many.success" | "botania.tagline.felPumpkin" | "botania.subtitle.smeltRodSimmer" | "commands.team.option.suffix.success" | "create.ponder.gantry_shaft.text_1" | "block.minecraft.purpur_block" | "create.ponder.gantry_shaft.text_2" | "block.minecraft.banner.botania_lexicon.red" | "advancement.create.arm_blaze_burner" | "advancement.create.speed_controller.desc" | "structure_block.custom_data" | "block.minecraft.oak_sign" | "patchouli.gui.lexicon.button.editor.info" | "subtitles.entity.pillager.celebrate" | "block.minecraft.structure_block" | "item.minecraft.splash_potion.effect.harming" | "block.ftbquests.progress_screen" | "item.itemfilters.always_false" | "create.mechanical_arm.summary" | "create.ponder.gearbox.header" | "ftbquests.task.ftbquests.npc_dialog" | "ftbquests.task.ftbquests.forge_energy" | "demo.help.title" | "item.botania.purple_petal" | "subtitles.entity.parrot.imitate.spider" | "block.botania.light_gray_buried_petals" | "options.ao.min" | "create.ponder.gantry_carriage.header" | "block.minecraft.banner.botania_tiny_potato.green" | "fml.modmismatchscreen.homepage" | "jei.key.category.mouse.hover" | "gui.ae2.Lumen" | "block.create.cut_tuff_brick_wall" | "subtitles.entity.phantom.hurt" | "block.minecraft.azalea" | "key.command" | "subtitles.entity.piglin_brute.ambient" | "create.station.close" | "waila.ae2.ErrorTooManyChannels" | "create.display_source.scoreboard.objective" | "item.create.handheld_worldshaper" | "block.minecraft.set_spawn" | "gameMode.changed" | "subtitles.entity.parrot.imitate.zoglin" | "commands.data.entity.invalid" | "block.create.rope" | "biome.minecraft.windswept_forest" | "argument.nbt.list.mixed" | "advancements.sad_label" | "block.minecraft.banner.botania_lexicon.silver" | "create.orientation.diagonal" | "advancement.create.mechanical_arm.desc" | "string.naturescompass.high" | "block.create.depot" | "fml.modloading.brokenfile.optifine" | "debug.crash.message" | "subtitles.entity.illusioner.death" | "block.create.exposed_copper_tiles" | "commands.datapack.list.enabled.success" | "gamerule.spawnRadius" | "block.botania.stripped_dreamwood" | "item.botania.pixie_dust" | "item.ae2.red_covered_dense_cable" | "ae2.rei_jei_integration.missing_id" | "block.botania.glimmering_livingwood" | "commands.forge.tracking.timing_entry" | "subtitles.entity.blaze.burn" | "advancements.end.elytra.description" | "advancements.end.dragon_breath.description" | "block.create.brass_encased_cogwheel" | "block.minecraft.dead_horn_coral_block" | "jei.tooltip.item.colors" | "entity.minecraft.firework_rocket" | "jei.tooltip.ingredient.list.disabled" | "block.minecraft.banner.rhombus.black" | "commands.forge.setdim.invalid.entity" | "item.botania.cosmetic_thinking_hand" | "block.create.mechanical_crafter" | "botania.subtitle.lexiconPage" | "block.minecraft.banner.botania_spark_dominant.yellow" | "options.sensitivity.min" | "mco.connect.authorizing" | "block.create.item_vault" | "enchantment.minecraft.aqua_affinity" | "commands.scoreboard.players.reset.specific.multiple" | "gui.tooltips.ae2.OverlayModeYes" | "botania.nei.lexica" | "entity.minecraft.ender_pearl" | "ftblibrary.select_item.caps" | "create.train.status.back_on_track" | "gui.ae2.StoredPower" | "block.minecraft.smoker" | "botania.tagline.bcIntegration" | "item.canBreak" | "death.attack.trident" | "create.recipe.automatic_brewing" | "block.ae2.smooth_sky_stone_block" | "create.schedule.condition.threshold.stacks" | "create.schematicAndQuill.dimensions" | "subtitles.entity.sheep.ambient" | "block.minecraft.blue_candle" | "subtitles.entity.fox.teleport" | "create.gui.schematicannon.slot.listPrinter" | "subtitles.block.note_block.note" | "block.minecraft.banner.triangles_top.white" | "create.ponder.mechanical_arm_modes.header" | "item.create.sand_paper.tooltip" | "gui.ae2.Cancel" | "subtitles.entity.vex.charge" | "block.create.polished_cut_ochrum_wall" | "chat.ae2.OnlyEmptyCellsCanBeDisassembled" | "commands.ae2.ChunkLoggerOff" | "item.ae2.white_smart_cable" | "block.botania.mana_bomb" | "botania.subtitle.babylonAttack" | "create.ponder.mechanical_saw_processing.header" | "entity.minecraft.ender_dragon" | "item.ae2.pink_smart_dense_cable" | "block.minecraft.banner.half_horizontal_bottom.white" | "block.minecraft.banner.botania_flower.lightBlue" | "gui.ae2.PatternAccessTerminalHint" | "block.botania.thermalily" | "options.ao.max" | "block.minecraft.cyan_candle_cake" | "block.minecraft.oak_wall_sign" | "botania.tagline.runeAltar" | "create.keyinfo.scrolldown" | "options.key.toggle" | "death.attack.lightningBolt.player" | "block.minecraft.banner.square_top_left.green" | "create.ponder.funnel_transfer.text_2" | "create.ponder.funnel_transfer.text_3" | "item.itemfilters.item_group" | "block.minecraft.deepslate_bricks" | "create.ponder.funnel_transfer.text_1" | "effect.minecraft.absorption" | "botania.page.canopyDrum0" | "item.create.wrench.tooltip.summary" | "item.ae2.certus_quartz_shovel" | "botania.page.canopyDrum1" | "block.minecraft.dead_brain_coral" | "ftbteams.list" | "lanServer.otherPlayers" | "config.jei.advanced.maxRecipeGuiHeight" | "block.minecraft.green_concrete_powder" | "create.gui.schematicTable.finished" | "block.create.steam_whistle" | "subtitles.item.crossbow.load" | "subtitles.entity.phantom.swoop" | "block.botania.gray_mystical_flower" | "book.finalizeWarning" | "demo.day.2" | "create.ponder.stabilized_bearings.text_1" | "demo.day.1" | "create.schematicannon.status.stopped" | "create.ponder.stabilized_bearings.text_2" | "demo.day.4" | "create.ponder.stabilized_bearings.text_3" | "demo.day.3" | "item.minecraft.slime_ball" | "create.ponder.stabilized_bearings.text_4" | "demo.day.6" | "demo.day.5" | "item.minecraft.magenta_dye" | "item.minecraft.glistering_melon_slice" | "subtitles.entity.slime.attack" | "block.minecraft.potted_red_tulip" | "ftbquests.file.loot.entity.boss" | "commands.forge.tps.summary.all" | "create.logistics.firstFrequency" | "item.create.linked_controller.tooltip.condition3" | "subtitles.entity.turtle.egg_crack" | "gui.ae2.LightGray" | "item.create.linked_controller.tooltip.condition4" | "item.create.linked_controller.tooltip.condition1" | "create.ponder.item_vault_sizes.text_3" | "item.create.linked_controller.tooltip.condition2" | "create.ponder.item_vault_sizes.text_1" | "gamerule.doLimitedCrafting.description" | "create.ponder.item_vault_sizes.text_2" | "block.minecraft.banner.stripe_downright.cyan" | "item.minecraft.skull_banner_pattern.desc" | "block.minecraft.banner.cross.orange" | "create.ponder.rope_pulley.text_1" | "create.ponder.rope_pulley.text_2" | "block.create.small_dripstone_brick_stairs" | "block.minecraft.banner.botania_fish.white" | "block.create.waxed_weathered_copper_tile_slab" | "botania.entry.waterRod" | "create.station.more_bogeys" | "death.attack.anvil" | "botania.entry.dispenserTweaks" | "subtitles.entity.wandering_trader.drink_milk" | "create.gui.contraptions.not_fast_enough" | "gui.ae2.SCSInvalid" | "block.minecraft.packed_ice" | "commands.effect.give.success.single" | "advMode.mode.unconditional" | "create.schedule.condition.time_of_day.rotation.every_0_15" | "block.create.copper_ladder" | "item.minecraft.brick" | "block.minecraft.banner.gradient.purple" | "block.minecraft.mossy_cobblestone_slab" | "create.mechanical_arm.selection_mode.forced_round_robin" | "achievement.ae2.PatternTerminal" | "entity.minecraft.shulker" | "block.minecraft.banner.square_top_right.orange" | "block.create.schematicannon" | "advancements.nether.uneasy_alliance.title" | "powerSystem.subtle" | "item.botania.terrasteel_chestplate" | "subtitles.entity.skeleton.death" | "block.minecraft.banner.stripe_middle.brown" | "string.naturescompass.search" | "advancement.botania:corporeaCraft" | "item.nbt_tags" | "block.create.polished_cut_andesite" | "create.gui.sequenced_gearshift.title" | "block.create.crimsite_pillar" | "item.create.diving_boots.tooltip.behaviour1" | "block.minecraft.banner.base.light_gray" | "create.schedule.condition.time_of_day.rotation.every_0_30" | "gui.ae2.QuartzCuttingKnife" | "ftbquests.title.tooltip" | "block.minecraft.banner.square_top_left.orange" | "mco.selectServer.info" | "gui.paste" | "create.ponder.deployer_processing.text_4" | "create.ponder.deployer_processing.text_1" | "options.narrator.off" | "create.ponder.deployer_processing.text_3" | "create.ponder.deployer_processing.text_2" | "multiplayer.disconnect.banned.reason" | "block.minecraft.purpur_pillar" | "item.create.chromatic_compound" | "create.gui.scrollInput.scrollToAdjustAmount" | "block.minecraft.banner.triangle_top.brown" | "entity.minecraft.iron_golem" | "subtitles.entity.goat.prepare_ram" | "advancements.adventure.walk_on_powder_snow_with_leather_boots.title" | "item.minecraft.stick" | "block.botania.floating_spectranthemum" | "block.botania.metamorphic_swamp_stone_wall" | "block.botania.manastar" | "advancement.create.mechanical_crafter" | "create.schematicannon.status.searching" | "fml.modloading.uncaughterror" | "block.create.cut_deepslate_brick_slab" | "block.ae2.controller" | "block.minecraft.polished_blackstone_slab" | "advancements.adventure.ol_betsy.title" | "create.display_link.display_on_multiline" | "create.tooltip.keyShift" | "create.schedule.condition.time_of_day.rotation.every_0_45" | "options.chat.visibility.system" | "item.ae2.memory_card_black" | "block.minecraft.banner.botania_spark_recessive.red" | "block.create.brown_valve_handle" | "gui.tooltips.ae2.Amount" | "block.minecraft.banner.botania_sword.pink" | "block.minecraft.banner.triangles_bottom.magenta" | "entity.minecraft.ghast" | "advancements.adventure.play_jukebox_in_meadows.title" | "team.collision.never" | "block.minecraft.banner.cross.white" | "block.minecraft.light_gray_candle_cake" | "gui.tooltips.ae2.ReportInaccessibleFluidsYes" | "multiplayer.status.cancelled" | "create.ponder.shaft_casing.text_1" | "create.subtitle.sanding_long" | "create.materialChecklist" | "botaniamisc.clickToAddWarp" | "botania.entry.gardenOfGlass" | "subtitles.entity.player.burp" | "advancement.create.train_portal" | "block.minecraft.banner.half_horizontal.white" | "subtitles.entity.bee.ambient" | "subtitles.entity.pillager.death" | "effect.minecraft.health_boost" | "item.naturescompass.naturescompass" | "block.minecraft.stripped_dark_oak_log" | "block.minecraft.banner.flower.orange" | "block.minecraft.banner.diagonal_left.black" | "gui.ae2.ToCraft" | "block.minecraft.banner.diagonal_up_left.brown" | "advancement.create.belt" | "botania.entry.grassSeeds" | "block.create.blue_seat" | "item.botania.glass_pickaxe" | "block.botania.floating_agricarnation" | "block.minecraft.banner.stripe_middle.blue" | "botania.entry.fallenKanade" | "block.create.small_diorite_brick_wall" | "block.minecraft.warped_fence" | "item.minecraft.water_bucket" | "entity.notFound" | "subtitles.block.conduit.activate" | "death.attack.drown" | "jigsaw_block.name" | "subtitles.block.composter.fill" | "gui.tooltips.ae2.On" | "create.ponder.clutch.text_1" | "block.minecraft.banner.gradient_up.purple" | "create.ponder.clutch.text_2" | "block.minecraft.exposed_cut_copper" | "block.create.oxidized_copper_shingle_slab" | "create.recipe.automatic_shaped" | "item.ae2.engineering_processor_press" | "subtitles.block.beehive.shear" | "selectServer.direct" | "commands.advancement.revoke.criterion.to.many.failure" | "create.track.junction_start" | "item.ae2.red_glass_cable" | "block.create.framed_glass_door" | "baubleRender.enabled" | "block.minecraft.banner.mojang.brown" | "block.botania.livingrock" | "item.minecraft.tropical_fish_spawn_egg" | "ftbquests.task.ftbquests.kill.title" | "generator.flat" | "block.create.cut_andesite_brick_slab" | "gui.tooltips.ae2.Clear" | "biome.minecraft.beach" | "gui.ae2.PowerUsageRate" | "block.create.brown_seat" | "subtitles.entity.bee.death" | "create.display_source.kinetic_speed.absolute" | "item.minecraft.cod_spawn_egg" | "item.botania.super_travel_belt" | "entity.minecraft.villager.leatherworker" | "block.botania.metamorphic_desert_bricks_stairs" | "item.botania.dry_seeds" | "block.minecraft.banner.botania_sapling.lightBlue" | "gui.ae2.Unformatted" | "subtitles.block.fire.ambient" | "block.minecraft.banner.half_horizontal_bottom.green" | "create.display_source.stop_watch" | "create.recipe.pressing" | "achievement.ae2.Recursive.desc" | "advancement.botania:generatingFlower.desc" | "block.minecraft.banner.square_top_right.black" | "block.minecraft.banner.triangles_top.green" | "block.minecraft.gray_stained_glass_pane" | "enchantment.minecraft.quick_charge" | "subtitles.block.smoker.smoke" | "advancements.nether.obtain_ancient_debris.title" | "string.naturescompass.highHumidity" | "block.create.schematic_table.tooltip.behaviour1" | "block.minecraft.banner.botania_spark_isolated.purple" | "advancement.botania:manaBombIgnite" | "block.create.polished_cut_asurine_stairs" | "advancements.nether.create_beacon.title" | "create.ponder.rose_quartz_lamp.header" | "commands.item.block.set.success" | "item.ae2.cyan_paint_ball" | "team.collision.pushOtherTeams" | "block.botania.orechid_ignem.reference" | "deathScreen.title.hardcore" | "debug.pause_focus.off" | "mco.configure.world.subscription.less_than_a_day" | "commands.tag.remove.success.single" | "block.minecraft.banner.botania_hoe.red" | "create.tooltip.stressImpact.low" | "gui.ae2.Start" | "advancements.story.follow_ender_eye.title" | "subtitles.entity.dolphin.hurt" | "item.patchouli:test_completion.name" | "botania.entry.lexicon" | "commands.enchant.failed.incompatible" | "block.minecraft.dead_horn_coral_wall_fan" | "block.create.waxed_weathered_copper_tile_stairs" | "create.gui.terrainzapper.title" | "advMode.mode" | "botania.entry.manaAlchemy" | "item.minecraft.firework_star.orange" | "block.minecraft.banner.botania_spark_recessive.brown" | "block.botania.gourmaryllis" | "block.minecraft.banner.square_top_right.gray" | "botania.page.manaConjuration10" | "block.ftbquests.detector.player" | "botaniamisc.cosmeticThinking" | "botania.page.manaConjuration12" | "block.create.polished_cut_granite_stairs" | "botania.page.manaConjuration11" | "item.ae2.cyan_smart_cable" | "entity.minecraft.donkey" | "subtitles.item.bucket.empty" | "string.naturescompass.startSearch" | "gui.ae2.Lime" | "block.minecraft.stripped_acacia_log" | "item.create.crafting_blueprint" | "block.minecraft.magenta_concrete" | "block.create.small_andesite_brick_stairs" | "item.minecraft.netherite_axe" | "item.create.brass_hand" | "block.create.diorite_pillar" | "mco.selectServer.expires.days" | "botania.page.shulk_me_not0" | "create.ponder.powered_latch.text_1" | "key.curios.category" | "create.ponder.powered_latch.text_2" | "item.minecraft.lingering_potion.effect.slow_falling" | "entity.minecraft.lightning_bolt" | "botania.page.shulk_me_not1" | "botania.page.shulk_me_not2" | "create.ponder.cogwheel.text_2" | "create.ponder.cogwheel.text_1" | "gui.ae2.Yellow" | "create.ponder.powered_latch.text_3" | "create.ponder.powered_latch.text_4" | "advancement.create.burner.desc" | "block.create.waxed_oxidized_copper_shingle_stairs" | "lootr.message.should_sneak" | "stat.minecraft.raid_trigger" | "gui.server_forced" | "create.ponder.tag.contraption_assembly" | "advancement.botania:tiaraWings.desc" | "block.minecraft.banner.half_horizontal_bottom.magenta" | "mco.configure.world.buttons.open" | "item.botania.terra_pick" | "block.create.polished_cut_veridium_slab" | "block.create.white_nixie_tube" | "create.generic.unit.buckets" | "itemGroup.inventory" | "fml.modloading.missingdependency" | "item.ae2.fluix_crystal_seed" | "emi.category.botania.pure_daisy" | "item.minecraft.salmon" | "block.minecraft.comparator" | "item.minecraft.tipped_arrow.effect.healing" | "block.botania.floating_spectrolus" | "item.minecraft.beetroot_seeds" | "item.ae2.memory_card_light_blue" | "item.minecraft.totem_of_undying" | "create.ponder.mechanical_bearing.header" | "block.minecraft.banner.botania_logo.purple" | "subtitles.entity.tropical_fish.flop" | "block.minecraft.banner.botania_tiny_potato.white" | "item.minecraft.cauldron" | "block.minecraft.banner.flower.cyan" | "commands.team.option.seeFriendlyInvisibles.enabled" | "string.naturescompass.topBlock" | "demo.reminder" | "create.recipe.fan_blasting" | "block.minecraft.dead_fire_coral_wall_fan" | "block.minecraft.magenta_banner" | "stat.minecraft.strider_one_cm" | "debug.gamemodes.help" | "structure_block.mode.load" | "item.minecraft.firework_star.green" | "gui.ae2.SerialNumber" | "create.hint.hose_pulley" | "item.create.dough" | "enderstorage.command.usage" | "ftbquests.reward.ftbquests.loot" | "ftbquests.reward.ftbquests.npc_mail.message" | "item.minecraft.lingering_potion.effect.thick" | "create.gui.schematicannon.option.replaceWithAny.description" | "mco.activity.title" | "block.create.track_observer" | "block.minecraft.cut_copper" | "item.minecraft.firework_star.pink" | "block.minecraft.spruce_planks" | "botania.subtitle.lightRelay" | "gui.ae2.TransparentFacades" | "block.botania.floating_marimorphosis_chibi" | "item.minecraft.map" | "block.minecraft.lapis_block" | "block.botania.metamorphic_plains_stone_stairs" | "gui.ae2.With" | "debug.show_hitboxes.help" | "commands.team.option.name.unchanged" | "block.botania.metamorphic_fungal_cobblestone_slab" | "item.minecraft.lingering_potion.effect.empty" | "gui.tooltips.ae2.ShowAll" | "block.create.metal_bracket" | "jei.tooltip.error.recipe.transfer.no.server" | "subtitles.entity.dolphin.play" | "gui.tooltips.ae2.SchedulingModeRoundRobin" | "item.minecraft.firework_star.shape" | "entity.minecraft.killer_bunny" | "commands.data.entity.modified" | "create.schematic.rotation" | "block.minecraft.red_sandstone_slab" | "create.subtitle.crushing_1" | "stat.minecraft.crouch_one_cm" | "biome.minecraft.nether_wastes" | "subtitles.entity.chicken.hurt" | "block.botania.rannuncarpus_chibi" | "botania.page.tornadoRod1" | "botania.page.tornadoRod2" | "forge.configgui.logCascadingWorldGeneration.tooltip" | "botania.page.tornadoRod0" | "commands.bossbar.set.value.success" | "death.attack.mob.item" | "subtitles.entity.horse.angry" | "block.minecraft.end_portal_frame" | "item.minecraft.tipped_arrow.effect.poison" | "subtitles.entity.wolf.growl" | "gui.jei.category.stoneCutter" | "block.botania.dreamwood_wall" | "block.minecraft.waxed_exposed_copper" | "item.minecraft.potion.effect.mundane" | "item.create.schematic.tooltip" | "selectWorld.edit.optimize" | "item.minecraft.skull_banner_pattern" | "block.minecraft.banner.skull.magenta" | "commands.bossbar.get.players.none" | "entity.minecraft.strider" | "death.attack.botania-relic" | "subtitles.entity.parrot.imitate.vindicator" | "jei.tooltip.liquid.amount" | "block.botania.metamorphic_fungal_stone_wall" | "debug.reload_chunks.message" | "mco.selectServer.minigame" | "lootr.advancements.root.description" | "advancement.create.fist_bump.desc" | "subtitles.entity.parrot.fly" | "create.tunnel.selection_mode.forced_round_robin" | "mco.configure.world.invites.remove.tooltip" | "item.ae2.orange_smart_cable" | "create.toolbox.detach" | "optimizeWorld.confirm.description" | "item.minecraft.diamond" | "jei.chat.error.no.cheat.permission.disabled" | "item.minecraft.copper_ingot" | "key.keyboard.keypad.decimal" | "itemGroup.transportation" | "ftbquests.file.allow_take_quest_blocks" | "narrator.button.difficulty_lock.locked" | "curios.identifier.head" | "gui.tooltips.ae2.CycleProcessingOutputTooltip" | "death.attack.message_too_long" | "advancement.create.sturdy_sheet.desc" | "block.minecraft.banner.globe.cyan" | "forge.menu.updatescreen.title" | "gui.ae2.Blue" | "block.minecraft.banner.half_horizontal.green" | "commands.scoreboard.players.enable.invalid" | "advancements.nether.netherite_armor.title" | "commands.clear.test.multiple" | "commands.summon.success" | "item.minecraft.raw_iron" | "subtitles.entity.husk.death" | "commands.ftbquests.command.error.no_inventory" | "effect.minecraft.hunger" | "block.minecraft.banner.botania_spark_dominant.silver" | "block.create.waxed_weathered_copper_shingle_stairs" | "multiplayer.status.pinging" | "advancement.botania:terraformRodCraft.desc" | "block.minecraft.dead_bubble_coral_block" | "item.minecraft.music_disc_pigstep" | "subtitles.entity.player.freeze_hurt" | "block.minecraft.banner.square_top_left.pink" | "ftbquests.gui.edit_file" | "block.minecraft.banner.half_vertical.purple" | "subtitles.entity.drowned.shoot" | "create.item_attributes.has_fluid" | "block.minecraft.crimson_roots" | "biome.minecraft.the_end" | "death.attack.create.run_over" | "item.botania.diva_charm" | "effect.minecraft.haste" | "waila.ae2.Unlocked" | "options.showSubtitles" | "block.minecraft.polished_blackstone_stairs" | "fml.menu.mods.info.displayurl" | "block.minecraft.banner.botania_fish.pink" | "block.botania.metamorphic_taiga_stone_wall" | "botania.tagline.lokiRing" | "item.ae2.quantum_entangled_singularity" | "death.attack.create.potato_cannon.item" | "create.ponder.fan_processing.text_2" | "create.ponder.fan_processing.text_1" | "item.itemfilters.and.description" | "create.ponder.fan_processing.text_4" | "create.ponder.fan_processing.text_3" | "subtitles.entity.ravager.step" | "commands.forge.tracking.be.enabled" | "block.create.nozzle" | "create.ponder.tag.kinetic_appliances" | "commands.seed.success" | "create.ponder.fan_processing.text_6" | "block.botania.dreamwood_planks" | "create.ponder.fan_processing.text_5" | "create.ponder.fan_processing.text_8" | "block.create.waxed_copper_tiles" | "create.ponder.fan_processing.text_7" | "create.train.status.double_portal" | "enchantment.minecraft.impaling" | "block.create.black_valve_handle" | "block.create.small_crimsite_brick_slab" | "botania.category.baubles" | "subtitles.entity.pig.ambient" | "botania.page.glassPick0" | "item.ae2.light_blue_smart_dense_cable" | "block.botania.bubbell_chibi.reference" | "botania.page.glassPick1" | "narrator.toast.disabled" | "enchantment.level.8" | "botania.page.temperanceStone1" | "enchantment.level.7" | "botania.page.temperanceStone0" | "enchantment.level.6" | "enchantment.level.5" | "enchantment.level.4" | "enchantment.level.3" | "enchantment.level.2" | "enchantment.level.1" | "advancement.create.potato_cannon_collide.desc" | "ftbquests.file.full_screen_quest_view" | "item.minecraft.stone_shovel" | "enchantment.level.9" | "item.minecraft.arrow" | "subtitles.block.end_portal.spawn" | "create.ponder.gearshift.text_1" | "create.ponder.gearshift.text_2" | "block.botania.rannuncarpus_chibi.reference" | "advancement.create.steam_engine_maxed.desc" | "block.botania.metamorphic_swamp_cobblestone" | "mco.terms.buttons.agree" | "attribute.name.generic.attack_speed" | "block.minecraft.banner.gradient.lime" | "advancement.botania:kingKey.desc" | "block.minecraft.banner.stripe_downright.brown" | "selectWorld.load_folder_access" | "advancements.adventure.play_jukebox_in_meadows.description" | "block.botania.floating_daffomill" | "key.keyboard.equal" | "create.train.status.collision" | "block.botania.terrasteel_block" | "block.minecraft.green_candle_cake" | "create.crafting_blueprint.inferred" | "block.botania.metamorphic_desert_cobblestone_slab" | "commands.forge.gen.start" | "patchouli.gui.lexicon.keybind" | "item.minecraft.elder_guardian_spawn_egg" | "death.attack.starve.player" | "create.schedule.instruction_type" | "create.contraptions.clockwork.minute_first" | "block.minecraft.chiseled_deepslate" | "create.ponder.tag.contraption_actor" | "create.generic.unit.stress" | "botania.page.kekimurus1" | "botania.page.kekimurus0" | "botaniamisc.relicSoulbound" | "item.ae2.export_bus" | "ftbteams.cant_edit" | "block.botania.metamorphic_mountain_cobblestone_stairs" | "gui.ae2.SpatialIOPort" | "subtitles.entity.enderman.stare" | "create.display_link.information_type" | "ftbquests.gui.select_reward_type" | "item.ae2.capacity_card" | "block.minecraft.andesite_slab" | "create.ponder.brass_tunnel.header" | "entity.minecraft.goat" | "achievement.ae2.StorageBus" | "ftbquests.file.defaults.check_only" | "subtitles.entity.goat.step" | "commands.save.enabled" | "block.minecraft.banner.botania_spark_dispersive.brown" | "item.minecraft.golden_carrot" | "fml.modloading.errorduringevent" | "block.ae2.pattern_provider" | "block.minecraft.banner.botania_shovel.black" | "commands.spreadplayers.failed.entities" | "block.botania.pink_petal_block" | "block.minecraft.banner.stripe_downleft.black" | "narration.slider.usage.hovered" | "item.minecraft.baked_potato" | "death.attack.badRespawnPoint.link" | "block.minecraft.banner.botania_flower.purple" | "item.botania.lexicon.saice" | "create.ponder.hose_pulley_infinite.header" | "block.minecraft.banner.cross.green" | "botania.tagline.manaBomb" | "block.create.minecart_anchor" | "ftbquests.file" | "block.minecraft.banner.diagonal_right.pink" | "botania.tagline.luminizerTransport" | "achievement.ae2.StorageCell.desc" | "item.ae2.magenta_covered_cable" | "block.minecraft.banner.botania_sword.orange" | "botania.page.flugelEye0" | "subtitles.entity.parrot.imitate.blaze" | "botania.page.flugelEye1" | "block.minecraft.stone_bricks" | "block.minecraft.snow" | "block.botania.livingrock_slab" | "create.gui.sequenced_gearshift.instruction.await" | "botania.subtitle.pinkinator" | "create.boiler.size_dots" | "botania.page.animatedTorch3" | "botania.page.animatedTorch2" | "botania.page.animatedTorch1" | "botania.tagline.gatherDrum" | "botania.page.animatedTorch0" | "block.minecraft.purple_stained_glass_pane" | "botania.entry.virus" | "block.minecraft.banner.botania_logo.blue" | "subtitles.item.axe.scrape" | "gamerule.announceAdvancements" | "subtitles.entity.stray.death" | "key.jei.cheatOneItem2" | "item.modifiers.chest" | "create.subtitle.copper_armor_equip" | "botania.challenge.mobTower" | "item.create.potato_cannon" | "item.ae2.pattern_access_terminal" | "create.schedule.no_stops" | "options.entityShadows" | "create.subtitle.fwoomp" | "block.botania.metamorphic_forest_bricks" | "block.minecraft.mycelium" | "item.minecraft.milk_bucket" | "tag.botania.petals.white" | "ftbquests.gui.saved_as_file" | "waila.ae2.ErrorControllerConflict" | "create.ponder.mechanical_saw_breaker.text_1" | "gui.narrate.editBox" | "create.ponder.mechanical_saw_breaker.text_2" | "fml.menu.multiplayer.unknown" | "block.create.small_scorchia_brick_wall" | "create.ponder.item_vault_sizes.header" | "botania.page.missileRod0" | "botania.page.missileRod1" | "block.minecraft.smooth_stone_slab" | "botania.page.missileRod2" | "biome.minecraft.snowy_beach" | "item.itemfilters.missing" | "block.minecraft.banner.botania_pickaxe.brown" | "item.minecraft.iron_horse_armor" | "mco.selectServer.uninitialized" | "block.botania.red_string_comparator" | "block.minecraft.banner.botania_lexicon.cyan" | "selectWorld.backupWarning.snapshot" | "subtitles.entity.rabbit.ambient" | "gui.ae2.White" | "block.botania.green_double_flower" | "spectatorMenu.previous_page" | "item.minecraft.filled_map" | "create.toolbox.outOfRange" | "key.jei.previousCategory" | "create.item_attributes.book_author" | "forge.configgui.selectiveResourceReloadEnabled" | "slot.unknown" | "botania.entry.blackHoleTalisman" | "create.logistics.filter.apply_click_again" | "item.botania.terrasteel_helmet" | "block.minecraft.banner.square_bottom_left.magenta" | "create.ponder.powered_latch.header" | "item.botania.horn_leaves" | "options.autosaveIndicator" | "create.ponder.stressometer.text_3" | "create.ponder.stressometer.text_2" | "create.ponder.stressometer.text_1" | "item.ae2.black_smart_dense_cable" | "create.display_source.scoreboard" | "item.minecraft.llama_spawn_egg" | "ftbquests.file.emergency_items_cooldown" | "block.create.zinc_block" | "item.botania.brown_petal" | "advancement.botania:l20ShardUse.desc" | "achievement.ae2.Presses.desc" | "create.hint.mechanical_arm_no_targets" | "botania.page.rannuncarpus2" | "botania.page.rannuncarpus1" | "commands.teleport.success.location.single" | "botania.page.rannuncarpus0" | "options.graphics.fancy.tooltip" | "block.minecraft.banner.half_vertical_right.red" | "key.keyboard.caps.lock" | "botania.entry.thorRing" | "botania.subtitle.agricarnation" | "item.ae2.cell_component_16k" | "biome.minecraft.old_growth_pine_taiga" | "gui.tooltips.ae2.CpuStatusCoProcessors" | "arguments.nbtpath.nothing_found" | "mco.reset.world.adventure" | "item.botania.mana_tablet" | "options.darkMojangStudiosBackgroundColor" | "stat.minecraft.interact_with_campfire" | "subtitles.entity.shulker_bullet.hit" | "block.create.polished_cut_scorchia" | "block.minecraft.cyan_wool" | "create.ponder.weighted_ejector_redstone.header" | "botania.subtitle.temperanceStoneConfigure" | "item.minecraft.music_disc_strad.desc" | "commands.attribute.failed.no_attribute" | "item.ae2.white_covered_dense_cable" | "entity.lootr.lootr_minecart" | "create.ponder.mechanical_pump_speed.header" | "botania.page.corporea7" | "botania.page.corporea6" | "item.minecraft.lingering_potion.effect.harming" | "botania.page.corporea8" | "argument.entity.selector.allPlayers" | "botania.page.corporea1" | "item.create.filter.tooltip" | "botania.page.corporea0" | "botania.page.corporea3" | "container.enchant.lapis.one" | "botania.page.corporea2" | "item.modifiers.legs" | "botania.page.corporea5" | "block.minecraft.banner.diagonal_up_left.cyan" | "botania.entry.cobbleRod" | "botania.page.corporea4" | "commands.bossbar.set.visible.success.visible" | "block.ae2.chest" | "create.mechanical_arm.selection_mode.prefer_first" | "create.track.second_point" | "gui.ae2.inWorldCraftingPresses" | "block.minecraft.cut_sandstone" | "block.minecraft.red_tulip" | "subtitles.block.cake.add_candle" | "botania.entry.entropinnyum" | "subtitles.entity.piglin.jealous" | "create.ponder.steam_engine.text_7" | "advancement.botania:tinyPotatoPet" | "create.ponder.steam_engine.text_8" | "create.ponder.steam_engine.text_9" | "block.minecraft.light_gray_banner" | "tag.botania.double_mystical_flowers" | "multiplayer.title" | "gamerule.randomTickSpeed" | "fml.menu.backupfailed.title" | "create.ponder.steam_engine.text_1" | "create.ponder.steam_engine.text_2" | "create.ponder.steam_engine.text_3" | "create.ponder.steam_engine.text_4" | "block.botania.light_gray_mystical_flower" | "create.ponder.steam_engine.text_5" | "create.ponder.steam_engine.text_6" | "create.subtitle.peculiar_bell_use" | "block.minecraft.banner.botania_tiny_potato.orange" | "create.contraptions.cart_movement_mode.rotation_locked" | "block.create.small_granite_bricks" | "block.minecraft.polished_deepslate_wall" | "item.ae2.yellow_lumen_paint_ball" | "ftbquests.raymatcher.entity_class" | "selectWorld.import_worldgen_settings.deprecated.title" | "create.gui.assembly.exception.structureTooLarge" | "block.minecraft.banner.stripe_top.purple" | "item.create.creative_blaze_cake.tooltip" | "chat.disabled.options" | "gui.tooltips.ae2.RequestableAmount" | "tag.botania.petals.orange" | "advancement.create.hose_pulley_lava.desc" | "block.minecraft.jungle_wall_sign" | "block.minecraft.waxed_copper_block" | "mco.template.select.failure" | "string.naturescompass.found" | "create.display_link.set" | "item.minecraft.firework_star.white" | "block.minecraft.gray_stained_glass" | "create.gui.filter.ignore_data.description" | "block.botania.mana_void" | "item.create.schematic.tooltip.behaviour1" | "item.minecraft.lingering_potion.effect.leaping" | "container.furnace" | "commands.forceload.query.success" | "lootr.commands.summon" | "block.minecraft.banner.square_bottom_left.yellow" | "botania.animatedTorch.rotate" | "subtitles.item.flintandsteel.use" | "create.generic.daytime.hour" | "commands.debug.function.noRecursion" | "block.botania.floating_rannuncarpus_chibi" | "item.create.blaze_cake.tooltip.summary" | "key.jei.toggleCheatModeConfigButton" | "block.botania.nightshade_motif" | "block.minecraft.banner.botania_logo.lime" | "block.create.rotation_speed_controller" | "block.minecraft.waxed_weathered_cut_copper_stairs" | "block.minecraft.stone" | "dataPack.vanilla.description" | "gui.tooltips.ae2.CraftViaRedstone" | "block.minecraft.banner.globe.black" | "block.create.sticker" | "block.minecraft.banner.botania_flower.magenta" | "advancement.create.conductor.desc" | "botania.entry.thirdEye" | "commands.scoreboard.players.list.empty" | "options.entityDistanceScaling" | "key.keyboard.minus" | "advancements.story.lava_bucket.description" | "gui.ae2.Substitute" | "create.subtitle.blaze_munch" | "item.create.goggles.tooltip" | "block.create.andesite_encased_large_cogwheel" | "options.particles.minimal" | "subtitles.block.barrel.open" | "botania.nei.elvenTrade" | "patchouli.gui.lexicon.no_entries" | "block.minecraft.green_wool" | "entity.botania.thorn_chakram" | "botania.challengelevel.lunatic" | "block.minecraft.carrots" | "commands.ftbquests.change_consumable.usage" | "block.create.radial_chassis" | "item.create.furnace_minecart_contraption" | "advancement.create.contraption_actors.desc" | "commands.summon.failed.uuid" | "advMode.trackOutput" | "item.botania.dice" | "block.botania.drum_canopy" | "item.botania.spell_cloth" | "block.minecraft.piston_head" | "block.minecraft.banner.botania_pickaxe.silver" | "block.minecraft.lime_carpet" | "advancements.nether.netherite_armor.description" | "block.botania.azulejo_9" | "block.botania.azulejo_8" | "create.ponder.tag.movement_anchor.description" | "block.botania.azulejo_7" | "botania.tagline.vinculotus" | "block.botania.azulejo_6" | "block.botania.azulejo_5" | "block.botania.azulejo_4" | "block.botania.azulejo_3" | "block.botania.azulejo_2" | "block.botania.azulejo_1" | "block.botania.azulejo_0" | "commands.weather.set.thunder" | "botania.entry.pureDaisy" | "color.minecraft.light_blue" | "spreader.traceTime" | "block.create.stockpile_switch.tooltip.summary" | "block.create.cut_asurine_wall" | "botania.subtitle.vineBallThrow" | "botania.page.flightTiara6" | "botania.page.flightTiara4" | "block.create.brass_encased_shaft" | "botania.page.flightTiara5" | "botania.page.flightTiara2" | "botania.page.flightTiara3" | "block.minecraft.stripped_crimson_hyphae" | "botania.page.flightTiara0" | "botania.page.flightTiara1" | "botania.page.felPumpkin1" | "mco.brokenworld.download" | "botania.page.felPumpkin0" | "subtitles.entity.zombie.break_wooden_door" | "botania.tagline.lexicon" | "createWorld.customize.preset.snowy_kingdom" | "item.botania.spark" | "item.minecraft.bundle.fullness" | "subtitles.entity.hoglin.step" | "death.attack.dryout.player" | "item.minecraft.iron_helmet" | "block.ae2.chiseled_quartz_block" | "commands.experience.add.points.success.multiple" | "block.botania.floating_fallen_kanade" | "manaEnchanter.enabled" | "selectWorld.gameMode.survival" | "botania.challenge.pureDaisy" | "create.gui.stressometer.no_rotation" | "create.track_signal.mode_change.entry_signal" | "create.ponder.shared.behaviour_modify_wrench" | "debug.help.message" | "botania.entry.clayconia" | "block.create.light_blue_sail" | "block.minecraft.brick_stairs" | "item.botania.lexicon.bevo" | "botania.page.bergamute0" | "botania.tagline.hopperhock" | "botania.page.bergamute1" | "botania.page.bergamute2" | "gui.jei.category.campfire" | "block.minecraft.banner.botania_sword.magenta" | "item.ae2.cell_component_4k" | "jei.ftbquests.lootcrates" | "advancement.botania:pollidisiacPickup" | "multiplayer.disconnect.kicked" | "block.minecraft.waxed_cut_copper_slab" | "create.gui.stressometer.overstressed" | "botania.tagline.poolCart" | "block.create.layered_ochrum" | "item.ae2.cell_component_1k" | "block.create.orange_sail" | "mco.upload.size.failure.line2" | "mco.upload.size.failure.line1" | "block.minecraft.banner.botania_axe.cyan" | "createWorld.customize.custom.minHeight" | "block.minecraft.banner.square_bottom_right.purple" | "key.keyboard.left.shift" | "block.minecraft.banner.base.brown" | "item.create.schematic.tooltip.control1" | "botania.tagline.terraPick" | "mco.template.title" | "mco.configure.world.spawnNPCs" | "item.botania.keep_ivy" | "create.boiler.status" | "botania.page.waterRod1" | "multiplayerWarning.check" | "block.minecraft.banner.triangle_bottom.magenta" | "botania.page.waterRod0" | "commands.curios.set.success" | "subtitles.entity.parrot.imitate.wither_skeleton" | "botania.armorset.elementium.name" | "gui.socialInteractions.status_offline" | "mco.download.preparing" | "ae2.rei_jei_integration.requires_processing_mode" | "item.botania.santaweave_leggings" | "block.minecraft.gray_banner" | "commands.function.success.single" | "item.ae2.blue_paint_ball" | "fml.modmismatchscreen.mismatchedmods" | "multiplayer.message_not_delivered" | "item.botania.manasteel_chestplate" | "subtitles.entity.fox.aggro" | "botania.category.basics" | "advancement.create.lava_wheel_00000" | "subtitles.item.bucket.fill_axolotl" | "entity.minecraft.tropical_fish.type.stripey" | "options.modelPart.right_sleeve" | "block.create.oxidized_copper_tile_slab" | "create.contraptions.movement_mode.move_place" | "gui.curios.toggle" | "commands.summon.failed" | "block.ae2.creative_energy_cell" | "item.botania.ender_hand" | "arguments.operation.invalid" | "block.minecraft.banner.botania_hoe.lime" | "ftbquests.task.ftbquests.item.click_recipe" | "block.minecraft.banner.half_vertical.black" | "item.minecraft.lingering_potion" | "block.minecraft.banner.rhombus.lime" | "block.minecraft.banner.half_vertical.cyan" | "item.patchouli:test_book_1.name" | "item.botania.rune_envy" | "ftbquests.gui.quick_complete" | "key.keyboard.left.bracket" | "block.botania.green_petal_block" | "block.create.red_seat" | "block.create.polished_cut_limestone_slab" | "argument.time.invalid_tick_count" | "block.botania.golden_grass" | "menu.reportBugs" | "block.minecraft.banner.half_vertical_right.light_gray" | "item.ae2.debug_replicator_card" | "item.botania.cosmetic_kamui_eye" | "block.minecraft.banner.stripe_downright.orange" | "curios.identifier.charm" | "ftbquests.reward.ftbquests.item.only_one" | "create.generic.in_quotes" | "block.create.dripstone_pillar" | "subtitles.weather.rain" | "create.super_glue.abort" | "create.schedule.condition.time_of_day" | "gui.ae2.SearchTooltipItemId" | "block.minecraft.purple_candle_cake" | "commands.summon.invalidPosition" | "item.botania.lens_tripwire.short" | "subtitles.block.sculk_sensor.clicking" | "botania.subtitle.manaBlasterCycle" | "block.minecraft.jungle_fence" | "entity.minecraft.item" | "block.minecraft.banner.globe.magenta" | "item.botania.pool_minecart" | "narrator.loading.done" | "commands.attribute.failed.entity" | "disconnect.timeout" | "waila.ae2.DeviceOffline" | "book.generation.3" | "book.generation.1" | "book.generation.2" | "subtitles.entity.wandering_trader.reappeared" | "create.schematicAndQuill.secondPos" | "block.minecraft.blue_carpet" | "block.ae2.quantum_ring" | "enchantment.minecraft.sweeping" | "create.ponder.tag.fluids.description" | "create.menu.ponder_index" | "subtitles.entity.zombie.attack_wooden_door" | "sidebar_button.ftblibrary.toggle.gamemode" | "item.botania.infused_seeds" | "block.minecraft.potted_cactus" | "block.minecraft.banner.botania_tiny_potato.pink" | "item.minecraft.crossbow.projectile" | "block.minecraft.banner.rhombus.blue" | "subtitles.entity.zombie.ambient" | "item.minecraft.feather" | "block.minecraft.banner.botania_hoe.blue" | "options.languageWarning" | "block.botania.metamorphic_taiga_stone_stairs" | "team.visibility.always" | "block.minecraft.banner.botania_shovel.magenta" | "forge.configgui.dimensionUnloadQueueDelay" | "block.minecraft.banner.botania_spark_recessive.silver" | "block.minecraft.banner.gradient.orange" | "block.minecraft.ice" | "book.generation.0" | "block.minecraft.crimson_sign" | "block.minecraft.banner.square_top_right.purple" | "botania.tagline.corporeaRetainer" | "mco.configure.world.invites.normal.tooltip" | "gui.tooltips.ae2.EmitLevelsBelow" | "patchouli.gui.lexicon.landing_info" | "harvestLevel.boreLens" | "block.minecraft.banner.stripe_bottom.brown" | "item.ae2.light_gray_covered_dense_cable" | "item.botania.lens_firework" | "create.ponder.item_drain.header" | "config.jei.advanced.itemBlacklist" | "block.minecraft.banner.half_horizontal.purple" | "block.ae2.spatial_anchor" | "commands.forge.tps.invalid" | "narration.selection.usage" | "advMode.self" | "item.botania.cosmetic_clock_eye" | "block.minecraft.banner.straight_cross.brown" | "botania.page.craftCrate5" | "item.create.handheld_worldshaper.tooltip.action2" | "botania.page.craftCrate4" | "item.create.handheld_worldshaper.tooltip.action3" | "botania.page.craftCrate7" | "botania.page.craftCrate6" | "item.create.handheld_worldshaper.tooltip.action1" | "botania.page.craftCrate1" | "botania.page.craftCrate0" | "botania.page.craftCrate3" | "botania.page.craftCrate2" | "advancement.botania:flugelEye" | "item.create.precision_mechanism" | "botania.page.craftCrate9" | "botania.page.craftCrate8" | "item.create.unprocessed_obsidian_sheet" | "botania.page.smeltRod1" | "item.ae2.green_lumen_paint_ball" | "block.minecraft.banner.botania_pickaxe.blue" | "options.sensitivity" | "block.minecraft.pink_banner" | "botania.entry.speedUpBelt" | "item.create.sand_paper.tooltip.summary" | "commands.clear.test.single" | "block.minecraft.pink_tulip" | "narrator.position.object_list" | "mco.trial.message.line1" | "mco.trial.message.line2" | "item.botania.record_gaia_2" | "item.botania.record_gaia_1" | "argument.entity.options.tag.description" | "argument.entity.options.dz.description" | "item.minecraft.golden_shovel" | "item.ae2.semi_dark_monitor" | "gui.remove" | "effect.minecraft.jump_boost" | "commands.scoreboard.objectives.display.alreadyEmpty" | "block.ftbquests.detector.player.radius" | "advancement.botania:odinRing.desc" | "create.schedule.condition.powered.status" | "ftbquests.chapter.group" | "block.botania.bifrost_perm" | "ftbquests.gui.unclaimed_rewards" | "subtitles.entity.parrot.imitate.piglin" | "botania.page.smeltRod0" | "block.minecraft.diorite_wall" | "advancement.create.red_signal.desc" | "ftbteamsconfig" | "advancements.husbandry.breed_all_animals.description" | "subtitles.block.beacon.power_select" | "achievement.ae2.ChargedQuartz.desc" | "item.minecraft.tipped_arrow.effect.levitation" | "block.botania.corporea_interceptor" | "create.ponder.andesite_tunnel.header" | "patchouli.gui.lexicon.button.resize.size6" | "block.create.small_calcite_bricks" | "patchouli.gui.lexicon.button.resize.size5" | "patchouli.gui.lexicon.button.resize.size4" | "patchouli.gui.lexicon.button.resize.size3" | "item.botania.auto_crafting_halo" | "commands.perf.stopped" | "ftbquests.task.ftbquests.item.valid_for" | "effect.botania.emptiness" | "patchouli.gui.lexicon.button.resize.size2" | "gui.tooltips.ae2.SchedulingMode" | "patchouli.gui.lexicon.button.resize.size1" | "patchouli.gui.lexicon.button.resize.size0" | "block.create.vertical_framed_glass_pane" | "item.minecraft.lingering_potion.effect.water_breathing" | "block.botania.purple_buried_petals" | "block.botania.drum_wild" | "block.minecraft.banner.botania_pickaxe.lime" | "botania.entry.relicInfo" | "stat.minecraft.drop" | "command.context.parse_error" | "gui.ae2.InWorldCrafting" | "block.create.polished_cut_crimsite" | "block.minecraft.light_gray_bed" | "tag.botania.generating_special_flowers" | "stat_type.minecraft.crafted" | "subtitles.entity.villager.work_shepherd" | "create.weighted_ejector.stack_size" | "botaniamisc.lexiconcover2" | "commands.particle.failed" | "botaniamisc.lexiconcover1" | "botaniamisc.lexiconcover0" | "block.botania.chiseled_metamorphic_mesa_bricks" | "parsing.quote.escape" | "block.ftbquests.screen.input_mode_icon" | "item.ae2.fluid_storage_cell_64k" | "create.train.status.navigation_success" | "ftbquests.rarity.legendary" | "block.create.creative_crate.tooltip.behaviour1" | "create.ponder.mechanical_mixer.header" | "advancement.create.shifting_gears.desc" | "biome.minecraft.dark_forest" | "create.ponder.train_schedule.text_2" | "create.ponder.train_schedule.text_3" | "create.ponder.train_schedule.text_1" | "advancements.story.form_obsidian.title" | "botania.subtitle.narslimmusEat" | "item.create.empty_schematic.tooltip.summary" | "ftbquests.reward_tables" | "create.ponder.train_schedule.text_6" | "advancements.nether.charge_respawn_anchor.title" | "block.minecraft.banner.botania_sword.gray" | "create.ponder.train_schedule.text_4" | "create.ponder.train_schedule.text_5" | "block.minecraft.jungle_slab" | "create.item_attributes.washable" | "create.terrainzapper.shiftRightClickToSet" | "item.create.schematic.tooltip.condition1" | "block.botania.stripped_dreamwood_stairs" | "difficulty.lock.question" | "item.ae2.white_glass_cable" | "team.visibility.hideForOtherTeams" | "block.create.cut_asurine_brick_slab" | "death.attack.fireworks.item" | "mco.selectServer.trial" | "block.minecraft.yellow_stained_glass" | "ftbquests.task.ftbquests.buildcraft_mj.text" | "subtitles.entity.skeleton_horse.ambient" | "item.minecraft.tipped_arrow.effect.empty" | "advancements.nether.find_bastion.title" | "block.minecraft.banner.square_top_left.white" | "options.prioritizeChunkUpdates.none.tooltip" | "block.minecraft.weathered_cut_copper_slab" | "block.create.rose_quartz_tiles" | "block.minecraft.banner.mojang.pink" | "block.minecraft.birch_sign" | "block.minecraft.banner.stripe_left.light_gray" | "subtitles.entity.hoglin.hurt" | "botaniamisc.wandMode.bind" | "create.display_source.value_list.display" | "advancement.botania:enderAirMake.desc" | "ftbquests.reward_table.nothing" | "item.botania.lens_magnet.short" | "chat_screen.usage" | "botania.tagline.teruTeruBozu" | "ftbquests.quest.y" | "ftbquests.quest.x" | "block.ftbquests.stage_barrier" | "entity.minecraft.end_crystal" | "block.minecraft.shulker_box" | "patchouli.gui.lexicon.button.back.info" | "create.ponder.cart_assembler.header" | "block.create.white_valve_handle" | "ftbteams.cant_kick_owner" | "key.keyboard.keypad.add" | "subtitles.entity.player.death" | "item.create.crushed_aluminum_ore" | "item.create.diving_helmet.tooltip.condition1" | "block.botania.red_string_relay" | "item.botania.cosmetic_four_leaf_clover" | "block.minecraft.banner.diagonal_up_left.yellow" | "commands.ftbquests.locked.disabled" | "menu.generatingTerrain" | "mco.error.invalid.session.message" | "options.forceUnicodeFont" | "block.minecraft.cobblestone" | "ftblibrary.select_item.display_name" | "advancement.create.cuckoo_clock.desc" | "create.gui.stockpile_switch.move_to_lower_at" | "block.minecraft.banner.botania_shovel.gray" | "advancement.botania:manaCookieEat.desc" | "ftbquests.reward_table.loot_crate.item_name" | "merchant.trades" | "block.minecraft.light_blue_concrete" | "advancement.create.haunted_bell" | "block.minecraft.acacia_button" | "item.minecraft.fermented_spider_eye" | "mco.configure.world.activityfeed.disabled" | "commands.deop.success" | "botania.entry.forestDrum" | "block.botania.white_double_flower" | "block.minecraft.magenta_terracotta" | "botania.challenge.recordFarm.desc" | "enchantment.minecraft.projectile_protection" | "block.create.waxed_exposed_copper_shingles" | "advancement.create.sturdy_sheet" | "ftbquests.tasks" | "botania.page.orechid1" | "block.ae2.quartz_slab" | "item.ae2.brown_lumen_paint_ball" | "botania.page.orechid0" | "block.create.cut_scoria_slab" | "block.minecraft.banner.base.purple" | "block.minecraft.stripped_jungle_wood" | "block.minecraft.banner.stripe_middle.magenta" | "subtitles.item.bundle.insert" | "subtitles.block.tripwire.attach" | "item.create.attribute_filter.tooltip.condition1" | "item.create.attribute_filter.tooltip.condition2" | "commands.advancement.advancementNotFound" | "patchouli.gui.lexicon.editor.mock_header" | "block.create.belt" | "advancement.create.track_0" | "item.create.experience_nugget.tooltip.behaviour1" | "block.minecraft.yellow_bed" | "block.minecraft.banner.botania_spark_dominant.lightBlue" | "fml.resources.modresources" | "commands.schedule.created.tag" | "create.crafting_blueprint.filter_items_viable" | "commands.jfr.dump.failed" | "block.minecraft.banner.botania_sword.brown" | "stat.minecraft.climb_one_cm" | "block.minecraft.crimson_nylium" | "entity.minecraft.vex" | "advancements.nether.loot_bastion.title" | "block.minecraft.mossy_cobblestone" | "death.attack.sweetBerryBush.player" | "block.minecraft.prismarine_brick_stairs" | "botania.page.speedUpBelt1" | "botania.page.speedUpBelt0" | "selectWorld.customizeType" | "botania.entry.fireChakram" | "subtitles.item.bundle.drop_contents" | "create.schedule.instruction.name_edit_box" | "item.botania.lens_gravity.short" | "argument.anchor.invalid" | "block.minecraft.banner.diagonal_left.purple" | "advancement.create.display_link.desc" | "itemGroup.redstone" | "create.schematic.tool.movey.description.3" | "editGamerule.title" | "item.minecraft.chainmail_leggings" | "ftbquests.task.ftbquests.botania_mana.value" | "gui.ae2.Condenser" | "item.minecraft.squid_spawn_egg" | "selectWorld.conversion.tooltip" | "create.schematic.tool.movey.description.1" | "create.schematic.tool.movey.description.2" | "create.schematic.tool.movey.description.0" | "block.minecraft.banner.square_bottom_right.cyan" | "item.minecraft.lingering_potion.effect.invisibility" | "block.minecraft.banner.creeper.light_gray" | "ftbquests.quest.dependency_requirement.one_completed" | "death.attack.create.cuckoo_clock_explosion.player" | "advancement.create.brass" | "create.item_attributes.book_author.inverted" | "block.botania.floating_loonium" | "gui.info" | "block.minecraft.banner.half_vertical_right.black" | "gui.tooltips.ae2.CpuStatusCraftedIn" | "death.attack.create.fan_lava.player" | "selectWorld.backupEraseCache" | "biome.minecraft.lush_caves" | "worldgen.mushroom.quantity" | "block.minecraft.banner.cross.light_blue" | "block.minecraft.potted_pink_tulip" | "fml.modloading.brokenresources" | "block.minecraft.potted_fern" | "item.ae2.pattern_encoding_terminal" | "botania.page.marimorphosis05" | "fml.modloading.brokenfile.oldforge" | "subtitles.entity.tropical_fish.death" | "block.ae2.sky_stone_chest" | "item.minecraft.carrot_on_a_stick" | "create.ponder.steam_whistle.text_1" | "narration.recipe" | "create.ponder.steam_whistle.text_2" | "create.ponder.steam_whistle.text_3" | "create.ponder.steam_whistle.text_4" | "create.ponder.steam_whistle.text_5" | "create.ponder.steam_whistle.text_6" | "create.contraptions.movement_mode.move_never_place" | "block.botania.terra_plate" | "create.action.abort" | "entity.minecraft.mooshroom" | "block.minecraft.deepslate" | "gamerule.maxCommandChainLength.description" | "block.ae2.sky_stone_brick" | "fml.menu.multiplayer.networkincompatible" | "ftbquests.reward.ftbquests.toast" | "block.minecraft.banner.triangle_bottom.white" | "options.accessibility.text_background.everywhere" | "item.minecraft.debug_stick" | "tag.botania.petals.green" | "botania.brew.fallback" | "item.create.rose_quartz" | "block.minecraft.banner.piglin.brown" | "item.ae2.cell_component_256k" | "block.botania.daybloom_motif.description" | "botania.page.bellows0" | "botania.page.bellows2" | "botania.page.bellows1" | "block.minecraft.banner.cross.gray" | "botania.tagline.gaiaRitualHardmode" | "create.ponder.mechanical_piston.header" | "item.minecraft.tipped_arrow.effect.awkward" | "mco.client.incompatible.title" | "block.minecraft.banner.stripe_center.orange" | "mco.selectServer.create" | "block.create.black_sail" | "ftbquests.task.ftbquests.ic2_energy.value" | "item.botania.rune_winter" | "block.minecraft.banner.stripe_left.purple" | "subtitles.entity.player.attack.crit" | "subtitles.item.dye.use" | "block.minecraft.black_bed" | "block.botania.orechid.reference" | "death.attack.onFire.player" | "subtitles.block.composter.empty" | "demo.demoExpired" | "commands.weather.set.clear" | "gui.tooltips.ae2.View" | "subtitles.entity.magma_cube.death" | "commands.worldborder.warning.time.failed" | "block.create.yellow_sail" | "block.minecraft.banner.gradient.blue" | "advancements.adventure.two_birds_one_arrow.title" | "block.minecraft.stripped_jungle_log" | "gui.ae2.PortableCell" | "selectServer.deleteWarning" | "subtitles.entity.piglin.death" | "block.minecraft.banner.creeper.cyan" | "advancements.husbandry.wax_on.description" | "mco.upload.hardcore" | "block.botania.cell_block" | "botania.page.superLavaPendant1" | "sidebar_button.ftbquests.quests.no_team" | "botania.page.superLavaPendant0" | "botania.armorset.elementium.desc" | "ftbquests.reward.autoclaim" | "stat.minecraft.interact_with_blast_furnace" | "fluid.minecraft.milk" | "item.minecraft.panda_spawn_egg" | "advancement.botania:pollidisiacPickup.desc" | "block.minecraft.oxidized_cut_copper" | "block.minecraft.banner.botania_fish.purple" | "block.minecraft.white_candle_cake" | "botania.entry.invisibilityCloak" | "create.ponder.identify_mode" | "block.minecraft.dead_bubble_coral" | "block.create.oxidized_copper_tile_stairs" | "botania.subtitle.flugelEyeBind" | "block.minecraft.cobblestone_stairs" | "botania.page.rafflowsia1" | "create.ponder.tag.windmill_sails.description" | "botania.page.rafflowsia0" | "botania.tagline.icePendant" | "subtitles.entity.parrot.imitate.husk" | "ftbquests.file.loot.entity.passive" | "jei.chat.error.no.cheat.permission.give" | "block.minecraft.banner.curly_border.red" | "block.minecraft.calcite" | "create.display_source.value_list.million" | "block.minecraft.cyan_concrete_powder" | "block.create.placard.tooltip.condition2" | "commands.spawnpoint.success.single" | "ftbquests.task.max_input" | "block.minecraft.gray_bed" | "argument.entity.invalid" | "botania.nei.orechid" | "mirror.left_right" | "subtitles.item.spyglass.use" | "createWorld.customize.presets.select" | "block.create.placard.tooltip.condition1" | "create.gui.speedometer.title" | "item.create.wheat_flour" | "create.tooltip.capacityProvided.high" | "botania.tagline.orechid" | "botania.entry.manaMirror" | "entity.minecraft.drowned" | "commands.forge.setdim.invalid.dim" | "fml.menu.mods" | "block.create.toolbox.tooltip.behaviour3" | "block.create.toolbox.tooltip.behaviour2" | "botania.tagline.glassPick" | "entity.botania.mana_burst" | "entity.minecraft.pufferfish" | "block.create.toolbox.tooltip.behaviour1" | "item.minecraft.dried_kelp" | "item.create.crushed_zinc_ore" | "block.minecraft.basalt" | "item.minecraft.diamond_chestplate" | "block.create.cut_scorchia_brick_wall" | "selectWorld.resultFolder" | "block.minecraft.creeper_head" | "advancement.create.copper_casing.desc" | "block.botania.metamorphic_plains_stone" | "item.create.wand_of_symmetry.tooltip.condition1" | "block.ftbquests.progress_detector.level" | "string.naturescompass.rain" | "subtitles.entity.parrot.imitate.phantom" | "block.botania.blue_pavement" | "block.minecraft.banner.botania_shovel.orange" | "item.itemfilters.block" | "item.botania.pattern_donut" | "patchouli.gui.lexicon.index.info" | "gui.ae2.NetworkTool" | "advancement.botania:terrasteelWeaponCraft.desc" | "subtitles.entity.horse.saddle" | "item.botania.pink_petal" | "create.schematic.mirror.leftRight" | "ftbquests.file.disable_gui" | "entity.minecraft.zombified_piglin" | "block.minecraft.banner.botania_spark_isolated.red" | "block.create.waxed_oxidized_copper_tile_slab" | "block.ae2.dense_energy_cell" | "block.ae2.debug_item_gen" | "advancements.husbandry.make_a_sign_glow.description" | "block.create.layered_andesite" | "item.botania.santaweave_chestplate" | "block.botania.green_pavement_slab" | "gui.ae2.MultipleOutputs" | "create.recipe.crushing" | "botania.subtitle.enchanterForm" | "block.minecraft.lime_shulker_box" | "block.minecraft.copper_block" | "fml.messages.version.restriction.bounded.exclusive" | "block.botania.pink_mushroom" | "block.ae2.energy_cell" | "botania.tagline.gravityRod" | "commands.spreadplayers.failed.teams" | "item.create.brass_nugget" | "block.create.small_limestone_brick_wall" | "block.minecraft.acacia_wood" | "gamerule.doTileDrops.description" | "patchouli.gui.lexicon.button.visualize" | "block.minecraft.potted_azalea_bush" | "block.minecraft.banner.circle.orange" | "item.ae2.blue_glass_cable" | "block.minecraft.gravel" | "subtitles.entity.minecart.riding" | "gui.ae2.PatternEncoding.secondary_processing_result_hint" | "block.minecraft.banner.mojang.gray" | "block.botania.metamorphic_swamp_stone_stairs" | "item.create.sand_paper.tooltip.condition1" | "create.ponder.gantry_shaft.header" | "block.minecraft.light_blue_terracotta" | "key.togglePerspective" | "commands.team.remove.success" | "block.create.cut_diorite_brick_wall" | "curios.identifier.bracelet" | "create.track.not_enough_tracks" | "item.minecraft.rabbit_stew" | "advancement.create.root" | "options.hideMatchedNames.tooltip" | "block.botania.orange_buried_petals" | "ftbquests.gui.no_tasks" | "botania.page.azulejo0" | "botania.armorset.terrasteel.desc0" | "botania.page.azulejo3" | "botania.armorset.terrasteel.desc2" | "botania.page.azulejo1" | "commands.forge.mods.list" | "deathScreen.titleScreen" | "item.minecraft.lingering_potion.effect.levitation" | "botania.armorset.terrasteel.desc1" | "botania.page.azulejo2" | "botania.entry.corporeaRetainer" | "gui.ae2.Yes" | "block.minecraft.prismarine" | "block.minecraft.banner.half_vertical_right.gray" | "item.minecraft.music_disc_far" | "create.tooltip.generationSpeed" | "create.ponder.rope_pulley.header" | "block.create.cut_diorite_wall" | "block.botania.floating_clayconia_chibi" | "create.ponder.rose_quartz_lamp.text_1" | "block.create.cut_ochrum_stairs" | "create.ponder.rose_quartz_lamp.text_6" | "create.ponder.rose_quartz_lamp.text_3" | "create.ponder.rose_quartz_lamp.text_2" | "create.ponder.rose_quartz_lamp.text_5" | "create.ponder.rose_quartz_lamp.text_4" | "block.minecraft.brown_stained_glass_pane" | "entity.minecraft.potion" | "soundCategory.weather" | "commands.title.times.multiple" | "subtitles.entity.creeper.primed" | "pack.copyFailure" | "item.minecraft.diamond_shovel" | "entity.minecraft.villager.toolsmith" | "subtitles.entity.axolotl.idle_water" | "narrator.controls.bound" | "item.ae2.nether_quartz_axe" | "block.minecraft.banner.triangles_bottom.purple" | "commands.forge.arguments.enum.invalid" | "subtitles.entity.zombie_villager.cure" | "botania.page.luminizerTransport11" | "botania.page.luminizerTransport10" | "commands.drop.success.single_with_table" | "block.minecraft.waxed_exposed_cut_copper_slab" | "structure_block.mode.corner" | "effect.botania.soul_cross" | "tag.botania.manasteel_blocks" | "commands.team.list.members.empty" | "key.smoothCamera" | "item.ae2.view_cell" | "block.create.andesite_pillar" | "block.create.seat.tooltip" | "block.minecraft.banner.stripe_top.light_blue" | "block.botania.floating_endoflame" | "argument.item.id.invalid" | "create.schematic.tool.print.description.2" | "create.schematic.tool.print.description.3" | "create.schematic.tool.print.description.0" | "create.schematic.tool.print.description.1" | "botania.page.gardenOfGlass14" | "botania.page.gardenOfGlass12" | "create.gui.terrainzapper.tool.fill" | "botania.page.gardenOfGlass13" | "gamerule.freezeDamage" | "botania.page.gardenOfGlass11" | "block.create.cut_limestone" | "botania.page.orechidIgnem1" | "achievement.ae2.CrystalGrowthAccelerator" | "block.minecraft.target" | "botania.page.orechidIgnem0" | "block.minecraft.hanging_roots" | "block.lootr.lootr_chest" | "botania.page.goddessCharm0" | "botania.page.goddessCharm1" | "commands.difficulty.query" | "commands.placefeature.success" | "ftbquests.loot.entitydrops" | "advancement.botania:luminizerRide.desc" | "block.botania.alchemy_catalyst" | "block.botania.metamorphic_mountain_cobblestone_wall" | "block.minecraft.banner.botania_spark_isolated.pink" | "botania.page.auraRing2" | "block.minecraft.jungle_sapling" | "demo.help.movementMouse" | "botania.page.auraRing0" | "botania.page.auraRing1" | "attribute.name.forge.nametag_distance" | "block.ae2.quartz_ore" | "block.botania.livingwood_wall" | "death.attack.hotFloor.player" | "block.minecraft.banner.stripe_right.light_blue" | "advancements.adventure.whos_the_pillager_now.description" | "waila.ae2.P2POutput" | "block.minecraft.chorus_plant" | "selectWorld.backupQuestion.downgrade" | "key.keyboard.right.bracket" | "entity.minecraft.shulker_bullet" | "gui.tooltips.ae2.BlockPlacement" | "gui.recipebook.search_hint" | "create.ponder.sticker.header" | "block.minecraft.banner.stripe_downleft.purple" | "block.create.small_veridium_brick_stairs" | "block.minecraft.azure_bluet" | "argument.entity.options.type.description" | "item.botania.lens_warp" | "item.create.diving_boots.tooltip.summary" | "botania.subtitle.prismAddLens" | "block.botania.daffomill" | "achievement.ae2.Compass" | "gui.tooltips.ae2.CanExtractFrom" | "block.create.scoria" | "mco.create.world.skip" | "block.create.polished_cut_granite" | "debug.pause_focus.help" | "block.minecraft.banner.botania_lexicon.magenta" | "subtitles.block.blastfurnace.fire_crackle" | "config.jei.advanced.centerSearchBarEnabled" | "createWorld.customize.custom.size" | "block.minecraft.purpur_slab" | "block.create.small_diorite_bricks" | "ftbquests.task.ftbquests.npc_faction.mode" | "lootr.message.refresh_start" | "botania.subtitle.hornDoot" | "stat.minecraft.fall_one_cm" | "block.minecraft.dragon_egg" | "block.minecraft.banner.bricks.yellow" | "block.minecraft.red_wool" | "botania.subtitle.thermalily" | "generator.large_biomes" | "block.minecraft.polished_diorite" | "parsing.int.expected" | "mco.upload.verifying" | "block.create.wooden_bracket.tooltip" | "tag.botania.mini_flowers" | "botania.tagline.sextant" | "item.minecraft.suspicious_stew" | "advancement.create.haunted_bell.desc" | "subtitles.block.bell.use" | "block.minecraft.stone_button" | "create.generic.daytime.second" | "gui.ae2.PatternAccessTerminalShort" | "block.create.waxed_copper_shingles" | "stat.minecraft.inspect_dropper" | "subtitles.entity.zoglin.step" | "gui.jei.category.smelting.time.seconds" | "create.ponder.rope_pulley_attachment.text_3" | "create.ponder.rope_pulley_attachment.text_2" | "create.hint.derailed_train.title" | "commands.ftbquests.import_rewards_from_chest.text" | "create.ponder.rope_pulley_attachment.text_1" | "biome.minecraft.taiga" | "item.minecraft.potion.effect.water_breathing" | "death.attack.fallingStalactite.player" | "block.minecraft.banner.stripe_middle.yellow" | "multiplayer.disconnect.banned.expiration" | "effect.minecraft.regeneration" | "waila.ae2.DeviceOnline" | "block.minecraft.red_candle" | "block.create.schematic_table.tooltip.summary" | "multiplayer.player.left" | "mco.configure.world.subscription.month" | "block.botania.thermalily.reference" | "mco.configure.world.subscription.title" | "advancement.create.train_whistle.desc" | "chat.ae2.UnknownHotkey" | "block.minecraft.banner.globe.purple" | "subtitles.entity.phantom.ambient" | "gui.tooltips.ae2.LeftClick" | "advancement.create.water_supply.desc" | "block.minecraft.bed.too_far_away" | "commands.locate.failed" | "references.enabled" | "gui.narrate.button" | "block.minecraft.banner.piglin.purple" | "block.minecraft.banner.diagonal_left.light_blue" | "block.minecraft.birch_pressure_plate" | "create.item_attributes.astralsorcery_crystal" | "mco.reset.world.generate" | "commands.op.success" | "color.minecraft.orange" | "block.ftbquests.loot_crate_opener" | "forge.configgui.forgeLightPipelineEnabled" | "advancement.create.backtank" | "create.super_glue.click_to_confirm" | "block.minecraft.banner.half_vertical.red" | "block.botania.red_string_interceptor" | "block.create.blue_sail" | "parsing.float.invalid" | "item.botania.cosmetic_pink_flower_bud" | "mco.download.confirmation.line1" | "mco.download.confirmation.line2" | "patchouli.gui.lexicon.editor.info" | "create.recipe.fan_washing.fan" | "create.item_attributes.max_enchanted.inverted" | "subtitles.item.axe.wax_off" | "create.ponder.smart_pipe.text_1" | "botania.entry.teruTeruBozu" | "subtitles.entity.spider.hurt" | "subtitles.entity.piglin_brute.death" | "block.minecraft.banner.botania_axe.purple" | "advancements.nether.use_lodestone.title" | "create.ponder.smart_pipe.text_3" | "create.ponder.smart_pipe.text_2" | "item.botania.ice_pendant" | "block.minecraft.oxeye_daisy" | "subtitles.entity.player.attack.strong" | "create.ponder.smart_pipe.text_4" | "block.create.polished_cut_andesite_wall" | "create.schedule.condition.item_threshold" | "book.invalid.tag" | "commands.deop.failed" | "create.station.train_not_aligned_1" | "botania.challenge.treeFarm.desc" | "block.minecraft.banner.circle.gray" | "key.keyboard.apostrophe" | "advancement.create.train_crash_backwards.desc" | "stat.minecraft.deaths" | "block.minecraft.banner.triangle_top.magenta" | "narrator.screen.title" | "item.create.sand_paper" | "subtitles.entity.sheep.death" | "block.minecraft.pink_wool" | "curios.modifiers.body" | "block.minecraft.banner.skull.cyan" | "item.ae2.memory_card_magenta" | "patchouli.gui.lexicon.seconds" | "create.gui.schedule.add_condition" | "block.minecraft.green_stained_glass_pane" | "gui.ae2.Purple" | "optimizeWorld.title" | "block.minecraft.cobblestone_wall" | "commands.gamerule.set" | "title.singleplayer" | "block.create.secondary_linear_chassis" | "block.ae2.crafting_accelerator" | "block.minecraft.banner.diagonal_right.black" | "block.create.cut_limestone_slab" | "gui.ae2.Green" | "create.display_link.invalid" | "item.botania.world_seed" | "block.minecraft.tall_grass" | "advancements.adventure.adventuring_time.description" | "mco.configure.world.buttons.players" | "ftbteams.property_not_found" | "item.create.crafting_blueprint.tooltip" | "advancements.adventure.spyglass_at_ghast.title" | "effect.minecraft.water_breathing" | "item.minecraft.glowstone_dust" | "create.flap_display.cycles.arrival_time" | "create.ponder.pulse_extender.text_3" | "create.ponder.pulse_extender.text_4" | "create.ponder.pulse_extender.text_5" | "block.minecraft.banner.botania_spark_dominant.gray" | "create.ponder.pulse_extender.text_1" | "create.display_source.time.12_hour" | "create.ponder.pulse_extender.text_2" | "block.botania.hyacidus" | "item.minecraft.flint_and_steel" | "ftbquests.gui.view_dependants" | "block.minecraft.banner.half_horizontal.cyan" | "generator.customized" | "item.create.builders_tea.tooltip" | "block.botania.mana_glass" | "block.create.cut_granite_stairs" | "block.minecraft.red_concrete_powder" | "key.attack" | "block.minecraft.banner.stripe_top.lime" | "item.botania.vine_ball" | "block.minecraft.banner.skull.light_gray" | "block.minecraft.spore_blossom" | "delete_item" | "advancement.create.anvil_plough" | "block.minecraft.damaged_anvil" | "block.minecraft.green_glazed_terracotta" | "botania.tagline.speedUpBelt" | "block.botania.orange_petal_block" | "block.minecraft.light_gray_glazed_terracotta" | "create.item_attributes.has_enchant.inverted" | "create.ponder.gantry_cascaded.text_2" | "create.ponder.gantry_cascaded.text_3" | "item.ae2.creative_item_cell" | "block.create.powered_toggle_latch" | "pack.nameAndSource" | "gui.ae2.SelectedCraftingCPU" | "botania.subtitle.terraPickMode" | "theoneprobe.ae2.p2p_output" | "tag.botania.misc_special_flowers" | "selectWorld.gameRules" | "block.minecraft.banner.botania_logo.red" | "options.fovEffectScale" | "options.chat.title" | "botania.page.fallenKanade1" | "botania.page.fallenKanade0" | "subtitles.entity.zoglin.hurt" | "block.minecraft.banner.triangles_top.cyan" | "pack.source.world" | "entity.botania.magic_missile" | "subtitles.entity.turtle.lay_egg" | "biome.minecraft.warm_ocean" | "create.ponder.gantry_cascaded.text_1" | "advancement.botania:tinyPotatoBirthday" | "gui.tooltips.ae2.FilterOnExtractDisabled" | "item.minecraft.shield.purple" | "botania.roman14" | "item.botania.lens_power" | "botania.roman15" | "botania.roman12" | "botania.roman13" | "botania.roman10" | "botania.roman11" | "create.logistics.filter" | "block.botania.lime_mushroom" | "item.botania.cosmetic_puffy_scarf" | "subtitles.entity.donkey.hurt" | "create.tooltip.capacityProvided.low" | "stat.minecraft.target_hit" | "create.minecart_coupling.removed" | "create.subtitle.whistle_train_manual" | "block.create.small_ochrum_bricks" | "stat.minecraft.interact_with_anvil" | "block.botania.lavender_quartz_slab" | "block.minecraft.banner.stripe_top.blue" | "block.botania.elven_spreader" | "block.minecraft.spruce_log" | "item.minecraft.ink_sac" | "item.minecraft.gold_ingot" | "subtitles.entity.wither_skeleton.death" | "block.minecraft.respawn_anchor" | "item.minecraft.piglin_brute_spawn_egg" | "commands.title.cleared.single" | "advancements.nether.ride_strider.title" | "block.minecraft.brain_coral" | "commands.config.noconfig" | "theoneprobe.ae2.device_offline" | "botania.roman30" | "argument.nbt.array.invalid" | "block.minecraft.banner.half_horizontal.magenta" | "botania.page.narslimmus0" | "botania.page.narslimmus1" | "item.create.filter.tooltip.condition2" | "item.create.filter.tooltip.condition1" | "selectWorld.world" | "block.minecraft.banner.square_bottom_left.brown" | "block.minecraft.banner.rhombus.magenta" | "botania.roman29" | "botania.roman27" | "botania.roman28" | "botania.roman25" | "botania.roman26" | "botania.roman23" | "botania.roman24" | "botania.roman21" | "botania.roman22" | "botania.roman20" | "block.minecraft.banner.stripe_center.lime" | "botania.page.banners0" | "botania.page.banners1" | "item.create.wrench" | "block.minecraft.dead_bubble_coral_fan" | "gui.color" | "selectWorld.edit.backupFolder" | "item.botania.lens_phantom" | "subtitles.item.trident.throw" | "botania.roman18" | "botania.page.medumone0" | "botania.roman19" | "botania.roman16" | "botania.roman17" | "botania.page.medumone1" | "gui.jei.editMode.description.hide" | "theoneprobe.ae2.p2p_input_one_output" | "block.minecraft.water_cauldron" | "item.minecraft.splash_potion.effect.strength" | "flightBar.height" | "create.item_attributes.furnace_fuel.inverted" | "botania.entry.temperanceStone" | "effect.minecraft.night_vision" | "curios.modifiers.slots.take.2" | "curios.modifiers.slots.take.1" | "curios.modifiers.slots.take.0" | "create.schedule.condition.unloaded.status" | "biome.minecraft.birch_forest" | "block.minecraft.banner.gradient.white" | "botania.page.terraformRod3" | "botania.page.terraformRod2" | "botania.page.terraformRod1" | "botania.page.terraformRod0" | "create.ponder.brass_funnel.text_4" | "create.ponder.brass_funnel.text_2" | "create.ponder.brass_funnel.text_3" | "botania.entry.loonium" | "subtitles.entity.boat.paddle_water" | "block.minecraft.green_carpet" | "subtitles.entity.guardian.ambient_land" | "botania.sign7" | "botania.sign8" | "botania.sign9" | "ftbquests.reward.ftbquests.npc_faction" | "mco.configure.world.delete.button" | "botania.sign0" | "botania.sign1" | "gamerule.sendCommandFeedback" | "botania.sign2" | "botania.sign3" | "block.minecraft.banner.triangle_top.purple" | "botania.sign4" | "create.ponder.brass_funnel.text_1" | "botania.sign5" | "botania.sign6" | "block.create.controller_rail.tooltip.summary" | "block.minecraft.banner.stripe_bottom.magenta" | "gui.tooltips.ae2.ActiveWithoutSignal" | "gui.tooltips.ae2.SearchMode" | "command.unknown.command" | "ftbquests.gui.complete_instantly_q" | "flower.forceCheck" | "stat.minecraft.enchant_item" | "block.minecraft.dark_oak_leaves" | "item.botania.rune_gluttony" | "block.minecraft.command_block" | "block.minecraft.banner.stripe_center.blue" | "mco.minigame.world.slot.screen.title" | "disconnect.overflow" | "botania.subtitle.terrasteelCraft" | "create.ponder.shaft_casing.header" | "item.itemfilters.or" | "item.create.crafting_blueprint.condition2" | "fml.messages.artifactversion.ornotinstalled" | "item.create.crafting_blueprint.condition1" | "gui.tooltips.ae2.StoredCraftable" | "achievement.ae2.CrystalGrowthAccelerator.desc" | "subtitles.block.enchantment_table.use" | "botania.brew.regen_weak" | "item.botania.cosmetic_lusitanic_shield" | "enchantment.minecraft.multishot" | "botania.tagline.headCreating" | "ftbquests.reward_table.loot_crate.color" | "achievement.ae2.Networking1.desc" | "item.ae2.memory_card_brown" | "gamerule.reducedDebugInfo" | "key.keyboard.menu" | "block.create.small_ochrum_brick_slab" | "advancement.create.foods.desc" | "botania.page.hourglass6" | "botania.page.hourglass5" | "botania.page.hourglass4" | "botania.page.hourglass3" | "forge.selectWorld.backupWarning.experimental.additional" | "item.botania.rune_earth" | "options.renderClouds" | "botania.page.hourglass2" | "curios.modifiers.necklace" | "botania.page.hourglass1" | "botania.page.hourglass0" | "subtitles.entity.panda.cant_breed" | "createWorld.customize.custom.heightScale" | "entity.botania.player_mover" | "advancement.create.funnel.desc" | "block.minecraft.blue_glazed_terracotta" | "ftbteams.not_invited" | "block.minecraft.cyan_stained_glass_pane" | "multiplayer.texturePrompt.line1" | "create.contraptions.cart_movement_mode" | "multiplayer.texturePrompt.line2" | "worldgen.flower.density" | "block.minecraft.banner.triangle_bottom.gray" | "advancement.botania:lexiconUse" | "block.minecraft.banner.stripe_center.light_gray" | "subtitles.entity.puffer_fish.sting" | "block.botania.shulk_me_not" | "ftbquests.chapter.image.height" | "botania.tagline.manaBlaster" | "item.minecraft.splash_potion.effect.leaping" | "create.train_assembly.bogey_created" | "gui.ae2.NoCraftingJobs" | "block.create.cut_asurine_stairs" | "structure_block.size.z" | "structure_block.size.x" | "structure_block.size.y" | "create.boiler.passive" | "botania.page.exoflame1" | "config.jei.mode.comment" | "botania.page.exoflame0" | "block.botania.marimorphosis_chibi.reference" | "block.minecraft.banner.botania_tiny_potato.lightBlue" | "commands.forge.gen.dim_fail" | "botania.tagline.canopyDrum" | "mco.reset.world.title" | "block.minecraft.banner.half_horizontal.red" | "entity.minecraft.wandering_trader" | "create.contraptions.movement_mode.rotate_never_place" | "create.display_source.kinetic_stress.progress_bar" | "block.botania.mana_spreader" | "item.botania.lens_efficiency" | "block.minecraft.ominous_banner" | "block.minecraft.banner.botania_pickaxe.black" | "block.minecraft.white_concrete_powder" | "block.minecraft.banner.cross.pink" | "block.minecraft.crimson_slab" | "fml.button.open.mods.folder" | "block.botania.corporea_block" | "achievement.ae2.Charger.desc" | "block.botania.dreamwood_planks_stairs" | "commands.bossbar.get.value" | "commands.tag.list.multiple.success" | "botania.page.hydroangeas1" | "botania.page.hydroangeas0" | "advancement.botania:tinyPotatoBirthday.desc" | "botania.entry.kekimurus" | "item.ae2.brown_smart_dense_cable" | "botania.page.headCreating0" | "botania.page.headCreating1" | "botania.page.headCreating2" | "block.botania.metamorphic_swamp_cobblestone_slab" | "commands.advancement.grant.one.to.one.failure" | "item.ae2.green_smart_dense_cable" | "block.botania.apothecary_desert" | "effect.minecraft.slowness" | "block.minecraft.potted_red_mushroom" | "create.schedule.condition.time_of_day.scheduled" | "tag.botania.petals.magenta" | "block.minecraft.banner.stripe_downright.black" | "create.gui.stressometer.capacity" | "block.minecraft.banner.gradient.green" | "forge.configgui.disableVersionCheck.tooltip" | "block.minecraft.banner.diagonal_up_right.light_gray" | "advancements.husbandry.tame_an_animal.title" | "options.prioritizeChunkUpdates.byPlayer" | "botaniamisc.command.skyblock.world" | "block.minecraft.banner.triangle_top.light_blue" | "create.subtitle.schematicannon_finish" | "block.minecraft.banner.stripe_middle.black" | "botania.page.tangleberrie1" | "commands.give.failed.toomanyitems" | "create.contraption.minecart_contraption_too_big" | "botania.page.tangleberrie0" | "options.guiScale" | "create.item_attributes.smeltable.inverted" | "entity.minecraft.snowball" | "block.botania.narslimmus" | "block.minecraft.jungle_stairs" | "block.botania.pink_mystical_flower" | "entity.minecraft.hopper_minecart" | "block.create.cyan_sail" | "create.ponder.tag.display_sources" | "block.minecraft.iron_block" | "create.gui.filter.ignore_data" | "block.create.calcite_pillar" | "block.botania.cyan_shiny_flower" | "botania.entry.spreader" | "block.minecraft.purple_concrete" | "item.minecraft.shield.pink" | "gui.ae2.IOBuses" | "advancements.adventure.sniper_duel.description" | "block.minecraft.red_carpet" | "subtitles.entity.wandering_trader.disappeared" | "botania.page.jadedAmaranthus2" | "ftbquests.task.click_to_submit" | "botania.page.jadedAmaranthus1" | "advancement.create.anvil_plough.desc" | "botania.page.jadedAmaranthus0" | "debug.inspect.help" | "options.fovEffectScale.tooltip" | "ftbquests.file.loot" | "block.minecraft.banner.curly_border.light_blue" | "block.create.polished_cut_deepslate_wall" | "chat_screen.message" | "create.ponder.shaft.text_1" | "command.expected.separator" | "gui.tooltips.ae2.SideTop" | "subtitles.entity.horse.gallop" | "gamerule.category.misc" | "botania.entry.marimorphosis" | "create.ponder.portable_fluid_interface.text_8" | "create.ponder.portable_fluid_interface.text_7" | "create.ponder.portable_fluid_interface.text_6" | "botania.nei.terraPlate" | "create.ponder.portable_fluid_interface.text_5" | "create.ponder.portable_fluid_interface.text_4" | "create.ponder.portable_fluid_interface.text_3" | "create.train.status.track_missing" | "create.ponder.portable_fluid_interface.text_2" | "block.create.magenta_valve_handle" | "create.ponder.portable_fluid_interface.text_1" | "botania.tagline.daffomill" | "item.minecraft.golden_chestplate" | "ftbquests.task.ftbquests.kill.entity" | "item.minecraft.rabbit_foot" | "gamerule.doPatrolSpawning" | "block.create.pink_sail" | "block.minecraft.banner.stripe_middle.light_blue" | "gui.tooltips.ae2.EncodeDescription" | "subtitles.entity.horse.hurt" | "biome.minecraft.old_growth_birch_forest" | "block.minecraft.player_wall_head" | "gui.tooltips.ae2.PowerUnits" | "item.botania.ancient_will_guthan" | "item.create.iron_sheet" | "block.minecraft.brown_glazed_terracotta" | "options.modelPart.left_pants_leg" | "block.create.polished_cut_tuff_slab" | "mco.reset.world.template" | "block.create.piston_extension_pole" | "item.ae2.item_storage_cell_256k" | "block.minecraft.cave_vines" | "block.botania.elf_quartz_pillar" | "create.ponder.deployer.text_15" | "container.enchant" | "botania.tagline.entropinnyum" | "create.subtitle.train3" | "block.create.layered_limestone" | "create.ponder.deployer.text_13" | "create.ponder.deployer.text_14" | "create.ponder.deployer.text_11" | "create.ponder.deployer.text_12" | "create.ponder.deployer.text_10" | "stat.minecraft.interact_with_smoker" | "block.create.brown_sail" | "createWorld.customize.flat.title" | "item.minecraft.lingering_potion.effect.awkward" | "block.botania.mossy_dreamwood_planks" | "block.minecraft.waxed_weathered_copper" | "lootr.message.cart_should_sneak3" | "block.botania.metamorphic_forest_cobblestone_slab" | "item.botania.black_petal" | "block.create.cut_dripstone_brick_wall" | "item.ae2.blue_smart_dense_cable" | "key.jei.previousRecipePage" | "create.boiler.via_engines" | "create.gui.terrainzapper.pattern.inversecheckered" | "create.station.cancel" | "argument.range.swapped" | "item.minecraft.leather_chestplate" | "item.minecraft.chicken_spawn_egg" | "item.minecraft.porkchop" | "item.create.diving_boots.tooltip.condition1" | "botania.flowerType.functional" | "attribute.modifier.take.1" | "advancement.botania_challenge.desc" | "attribute.modifier.take.0" | "tag.botania.elementium_blocks" | "botania.entry.bellows" | "itemGroup.ftbquests.ftbquests" | "argument.entity.options.x.description" | "create.ponder.gantry_redstone.text_2" | "config.jei.advanced" | "create.ponder.gantry_redstone.text_1" | "subtitles.entity.skeleton.shoot" | "argument.pos2d.incomplete" | "tag.botania.petals.gray" | "botania.tagline.bIntro" | "create.gui.attribute_filter.selected_attributes" | "item.minecraft.beef" | "block.minecraft.fern" | "attribute.modifier.take.2" | "vanillaParticleConfig.enabled" | "botania.challenge.orechid" | "stat.minecraft.sleep_in_bed" | "block.minecraft.banner.border.cyan" | "create.ponder.mechanical_saw_processing.text_1" | "create.ponder.mechanical_saw_processing.text_2" | "commands.advancement.revoke.many.to.one.success" | "ftbquests.gui.reset_progress_q" | "block.botania.floating_dandelifeon" | "create.ponder.mechanical_saw_processing.text_5" | "create.ponder.water_wheel.text_2" | "gamerule.category.player" | "create.ponder.water_wheel.text_1" | "create.ponder.mechanical_saw_processing.text_3" | "create.ponder.water_wheel.text_4" | "block.botania.white_pavement_slab" | "create.ponder.mechanical_saw_processing.text_4" | "create.ponder.water_wheel.text_3" | "block.minecraft.blue_wool" | "block.minecraft.fire_coral" | "advancements.husbandry.ride_a_boat_with_a_goat.description" | "item.minecraft.gray_dye" | "botania.armorset.manasteel.desc" | "botania.tagline.preventingDecay" | "gui.tooltips.ae2.StoreAction" | "advancement.botania:old_flower_pickup" | "botania.page.manastar1" | "block.minecraft.terracotta" | "botania.page.manastar0" | "botania.page.aIntro1" | "key.categories.creative" | "botania.page.aIntro0" | "botania.page.aIntro3" | "botania.page.aIntro2" | "selectWorld.backupWarning.experimental" | "botania.page.aIntro5" | "botania.page.aIntro4" | "gui.ae2.SpatialAnchorAll" | "botania.page.aIntro7" | "gui.ae2.ExportBusFluids" | "botania.page.aIntro6" | "subtitles.entity.mooshroom.milk" | "block.botania.loonium" | "patchouli.gui.lexicon.sneak" | "block.minecraft.red_nether_brick_slab" | "botania.page.hopperhock2" | "botania.page.hopperhock0" | "block.minecraft.yellow_terracotta" | "botania.page.hopperhock1" | "entity.minecraft.creeper" | "jei.key.combo.control" | "gui.tooltips.ae2.StoredAmount" | "create.ponder.fluid_tank_storage.header" | "gui.tooltips.ae2.ShowVisibleProviders" | "commands.schedule.created.function" | "deathScreen.quit.confirm" | "advancement.create.mechanical_pump_0" | "botania.page.cacophonium0" | "botania.page.cacophonium1" | "botania.page.cacophonium2" | "block.ftbquests.detector.task" | "item.itemfilters.damage" | "addServer.enterIp" | "item.minecraft.charcoal" | "stat.minecraft.clean_shulker_box" | "botania.page.decorativeBlocks10" | "item.minecraft.tipped_arrow.effect.night_vision" | "botania.page.decorativeBlocks11" | "item.ftbquests.lootcrate" | "block.minecraft.stone_brick_slab" | "botania.page.decorativeBlocks14" | "botania.page.decorativeBlocks15" | "ftbquests.rarity.uncommon" | "botania.page.decorativeBlocks12" | "ftbquests.reward.ftbquests.npc_quest.id" | "botania.page.decorativeBlocks13" | "key.keyboard.left" | "item.botania.lens_light" | "block.botania.orechid_ignem" | "gui.ae2.SmallFontCraft" | "block.minecraft.white_stained_glass" | "block.ae2.quartz_pillar_slab" | "gui.tooltips.ae2.OverlayModeNo" | "passiveWither.time" | "block.create.cut_tuff_stairs" | "block.create.polished_cut_dripstone_slab" | "botania.armorset.will_ahrim.shortDesc" | "jei.key.combo.alt" | "block.botania.metamorphic_plains_bricks_slab" | "advancement.create.self_deploying" | "mco.configure.world.subscription.timeleft" | "block.create.cut_asurine_brick_wall" | "botania.subtitle.equipBauble" | "ftbquests.reward_table.loot_size" | "gui.ae2.Inscriber" | "item.botania.crystal_bow" | "subtitles.block.respawn_anchor.deplete" | "lootr.advancements.root.title" | "block.ftbquests.detector" | "createWorld.customize.custom.useOceanRuins" | "arguments.objective.readonly" | "block.botania.tigerseye" | "botania.entry.flowerSpeed" | "patchouli.gui.lexicon.progress_meter" | "advancements.end.elytra.title" | "entity.minecraft.piglin_brute" | "subtitles.entity.wandering_trader.hurt" | "block.minecraft.banner.diagonal_left.cyan" | "menu.preparingSpawn" | "jei.key.category.recipe.gui" | "createWorld.customize.custom.biomeScaleWeight" | "botania.tagline.gaiaRitual" | "botania.tagline.sparks" | "botaniamisc.diceRoll" | "subtitles.entity.horse.armor" | "block.minecraft.warped_door" | "block.minecraft.banner.botania_logo.pink" | "create.contraptions.movement_mode.move_place_returned" | "fml.language.missingversion" | "block.minecraft.banner.half_vertical_right.pink" | "selectWorld.edit.export_worldgen_settings.success" | "block.minecraft.banner.triangles_bottom.light_gray" | "forge.configgui.disableStairSlabCulling.tooltip" | "item.minecraft.shield.red" | "commands.bossbar.get.visible.hidden" | "block.create.encased_fan" | "argument.pos3d.incomplete" | "item.minecraft.diamond_sword" | "item.ae2.annihilation_core" | "debug.cycle_renderdistance.help" | "botania.entry.terraAxe" | "item.minecraft.amethyst_shard" | "block.create.oak_window" | "block.create.cyan_seat" | "block.minecraft.structure_void" | "jigsaw_block.pool" | "create.display_source.fill_level.display" | "item.ae2.silicon_press" | "block.minecraft.banner.botania_spark_isolated.gray" | "create.recipe.packing" | "create.subtitle.depot_slide" | "item.modifiers.head" | "options.on.composed" | "botania.entry.rfGenerator" | "commands.worldborder.damage.buffer.success" | "block.create.exposed_copper_shingles" | "block.minecraft.glass_pane" | "item.ae2.fluid_storage_cell_1k" | "block.minecraft.banner.diagonal_right.cyan" | "block.botania.corporea_slab" | "block.minecraft.cut_copper_slab" | "block.create.lit_blaze_burner" | "item.botania.lens_damage.short" | "item.lootr.crown" | "jei.tooltip.config" | "item.minecraft.splash_potion.effect.slow_falling" | "block.ae2.chiseled_quartz_stairs" | "entity.minecraft.magma_cube" | "item.create.chocolate_glazed_berries" | "patchouli.gui.lexicon.progress_tooltip.secret" | "options.particles.all" | "commands.curios.clear.success" | "advancements.nether.root.description" | "block.create.oxidized_copper_shingles" | "block.minecraft.banner.straight_cross.purple" | "item.itemfilters.weak_nbt.description" | "multiplayer.texturePrompt.serverPrompt" | "key.forward" | "create.schematicannon.status.schematicExpired" | "item.botania.cosmetic_unicorn_horn" | "item.ae2.equal_distribution_card" | "ftbquests.reward.ftbquests.npc_quest" | "gamerule.showDeathMessages" | "block.botania.framed_dreamwood" | "commands.enchant.success.single" | "block.minecraft.banner.square_top_left.blue" | "block.minecraft.banner.stripe_center.yellow" | "mco.configure.world.invite.profile.name" | "create.display_source.item_throughput.interval.second" | "item.minecraft.firework_star.cyan" | "block.minecraft.deepslate_emerald_ore" | "advancements.adventure.throw_trident.title" | "block.ae2.condenser" | "block.minecraft.crimson_wall_sign" | "block.create.small_limestone_bricks" | "item.minecraft.apple" | "fml.menu.accessdenied.message" | "block.botania.floating_hydroangeas" | "ftbquests.reward.ftbquests.gamestage.remove" | "create.portal_track.missing" | "gui.blacklist" | "chat.ae2.MaxUpgradesInstalled" | "commands.datapack.list.available.success" | "botania.entry.icePendant" | "advancements.husbandry.netherite_hoe.description" | "item.itemfilters.custom" | "effect.minecraft.speed" | "advancement.botania:gaiaGuardianNoArmor" | "block.create.blue_nixie_tube" | "subtitles.block.sweet_berry_bush.pick_berries" | "chat.editBox" | "block.botania.metamorphic_mesa_cobblestone" | "chat.ae2.AmmoDepleted" | "item.ae2.red_smart_dense_cable" | "subtitles.entity.piglin.ambient" | "item.create.crafting_blueprint.tooltip.summary" | "create.display_target.single_line" | "string.naturescompass.coordinates" | "block.minecraft.banner.base.green" | "biome.minecraft.small_end_islands" | "create.track.turn_start" | "block.minecraft.banner.botania_lexicon.green" | "block.minecraft.banner.square_top_left.lime" | "create.weighted_ejector.no_target" | "block.create.light_blue_seat" | "stat.minecraft.walk_one_cm" | "block.minecraft.banner.botania_fish.cyan" | "botania.tagline.craftingHalo" | "create.tooltip.deployer.punching" | "itemGroup.tools" | "narrator.joining" | "item.minecraft.bee_spawn_egg" | "create.subtitle.schematicannon_launch_block" | "jei.chat.error.no.cheat.permission.2" | "enchantment.minecraft.luck_of_the_sea" | "jei.chat.error.no.cheat.permission.1" | "block.create.cut_tuff_slab" | "commands.reload.success" | "mco.connect.connecting" | "block.create.small_scoria_bricks" | "block.botania.apothecary_taiga" | "createWorld.customize.preset.overworld" | "subtitles.entity.boat.paddle_land" | "pack.dropConfirm" | "block.minecraft.banner.border.magenta" | "gui.ae2.LevelEmitter" | "gui.ae2.Types" | "entity.minecraft.tropical_fish" | "event.minecraft.raid.raiders_remaining" | "block.create.cyan_nixie_tube" | "subtitles.entity.elder_guardian.hurt" | "block.minecraft.banner.botania_spark_dispersive.black" | "tag.botania.rods" | "entity.minecraft.bee" | "botania.tagline.tangleberrie" | "block.minecraft.budding_amethyst" | "arguments.item.tag.unknown" | "commands.debug.function.success.single" | "block.botania.endoflame" | "block.minecraft.banner.rhombus.red" | "block.create.cut_scoria_brick_wall" | "createWorld.customize.custom.defaults" | "block.minecraft.brain_coral_block" | "stat.minecraft.mob_kills" | "advancement.create.mechanical_press.desc" | "death.attack.fall.player" | "item.ae2.fluid_storage_cell_16k" | "gui.socialInteractions.status_blocked_offline" | "block.minecraft.banner.stripe_right.cyan" | "block.minecraft.banner.piglin.pink" | "botania.tagline.terraAxe" | "advancement.botania:brewPickup.desc" | "stat.minecraft.animals_bred" | "block.minecraft.banner.border.white" | "item.create.crushed_silver_ore" | "block.minecraft.dark_oak_slab" | "item.tiab.time_in_a_bottle" | "subtitles.block.respawn_anchor.ambient" | "block.ae2.wireless_access_point" | "permissions.requires.entity" | "block.create.adjustable_chain_gearshift" | "subtitles.entity.dolphin.ambient" | "flowerTextures.alt" | "entity.minecraft.bat" | "block.minecraft.stripped_birch_log" | "advancement.create.steam_engine_maxed" | "subtitles.entity.dolphin.death" | "death.attack.thrown.item" | "commands.advancement.grant.many.to.one.failure" | "ftblibrary.select_item.list_mode.jei" | "create.flap_display.cycles.instant" | "options.viewBobbing" | "enchantment.minecraft.flame" | "create.gui.goggles.pole_length" | "create.subtitle.contraption_disassemble" | "advancements.adventure.hero_of_the_village.title" | "create.gui.schedule.lmb_edit" | "create.gui.adjustable_crate.storageSpace" | "menu.options" | "botania.page.elvenLenses12" | "advancement.create.potato_cannon_collide" | "stat_type.minecraft.killed.none" | "block.ftbquests.detector.redstone.required_redstone" | "block.minecraft.banner.bricks.black" | "gui.ae2.StorageCells" | "botania.page.elvenLenses10" | "botania.page.elvenLenses11" | "mco.configure.world.subscription.recurring.daysleft" | "entity.minecraft.mule" | "enderPickpocket.enabled" | "block.minecraft.gray_shulker_box" | "options.customizeTitle" | "selectWorld.data_read" | "gui.ae2.CraftingStatus" | "item.minecraft.golden_pickaxe" | "entity.minecraft.chicken" | "block.minecraft.banner.stripe_downright.yellow" | "subtitles.entity.wolf.death" | "potion.withDuration" | "block.minecraft.lilac" | "argument.literal.incorrect" | "gamerule.doLimitedCrafting" | "item.minecraft.tipped_arrow.effect.leaping" | "block.create.gantry_carriage" | "mco.connect.success" | "block.minecraft.banner.triangles_top.purple" | "commands.bossbar.get.visible.visible" | "block.create.cut_dripstone_slab" | "create.schedule.loop1" | "block.minecraft.oxidized_cut_copper_slab" | "commands.data.entity.query" | "create.schedule.loop2" | "block.botania.apothecary_forest" | "gui.tooltips.ae2.CpuStatusStorage" | "block.minecraft.warped_nylium" | "botania.tagline.cacophonium" | "item.patchouli:test_completion.landing" | "block.minecraft.banner.square_bottom_right.brown" | "block.minecraft.banner.triangles_bottom.brown" | "menu.respawning" | "generator.default" | "mco.account.privacy.info" | "create.gui.scrollInput.scrollToModify" | "container.crafting" | "tutorial.open_inventory.description" | "argument.pos.missing.int" | "create.ponder.tag.kinetic_relays" | "item.minecraft.pig_spawn_egg" | "enchantment.unknown" | "advancements.end.root.description" | "argument.long.low" | "block.minecraft.banner.half_horizontal.light_gray" | "block.create.cut_asurine_bricks" | "block.minecraft.cobbled_deepslate_wall" | "enchantment.minecraft.fire_aspect" | "create.recipe.sequenced_assembly" | "subtitles.entity.iron_golem.attack" | "botania.tagline.miningRing" | "block.botania.metamorphic_mesa_stone_wall" | "item.create.shadow_steel.tooltip" | "ftbquests.gui.remove_dependencies" | "block.botania.black_pavement_slab" | "ftbquests.progress" | "subtitles.entity.villager.work_armorer" | "block.create.chute" | "block.minecraft.potted_orange_tulip" | "botania.entry.slimeBottle" | "block.minecraft.banner.gradient.light_gray" | "advancement.botania:manaweaveArmorCraft" | "tutorial.socialInteractions.description" | "argument.entity.notfound.player" | "item.botania.yellow_petal" | "botania.tagline.clip" | "multiplayer.disconnect.missing_tags" | "options.chat.links" | "commands.kill.success.single" | "argument.block.property.novalue" | "botania.subtitle.divinationRod" | "block.botania.light_blue_floating_flower" | "item.create.filter.tooltip.summary" | "item.ae2.logic_processor_press" | "narrator.select" | "item.minecraft.cooked_salmon" | "chat.ae2.isNowUnlocked" | "block.minecraft.banner.globe.brown" | "block.create.cut_scorchia_bricks" | "biome.minecraft.end_barrens" | "block.create.polished_cut_veridium_stairs" | "subtitles.block.anvil.land" | "block.minecraft.banner.diagonal_up_left.pink" | "block.minecraft.banner.border.green" | "botania.entry.manaDetector" | "block.minecraft.iron_door" | "block.create.small_calcite_brick_slab" | "botania.entry.rainbowRod" | "block.minecraft.piston" | "fml.menu.mods.z_to_a" | "patchouli.gui.lexicon.structure_complete" | "narration.button.usage.hovered" | "block.botania.metamorphic_plains_cobblestone" | "item.botania.flare_chakram" | "advancement.create.linked_controller" | "botania.page.decorativeBlocks23" | "commands.attribute.failed.no_modifier" | "advancement.botania:enderAirMake" | "entity.minecraft.llama_spit" | "item.minecraft.lingering_potion.effect.weakness" | "fml.menu.mods.info.securejardisabled" | "gui.ae2.Or" | "options.graphics.fabulous" | "gui.ae2.Of" | "block.botania.gaia_pylon" | "block.minecraft.brown_bed" | "block.minecraft.banner.square_top_right.red" | "botaniamisc.locked" | "gui.tooltips.ae2.TypeFilter" | "create.ponder.train_signal_placement.header" | "commands.team.option.friendlyfire.enabled" | "item.minecraft.lodestone_compass" | "create.ponder.mechanical_crafter.header" | "item.create.builders_tea" | "subtitles.entity.witch.drink" | "gui.ae2.No" | "commands.banip.failed" | "block.botania.runic_altar" | "create.item_attributes.in_tag.inverted" | "block.create.purple_seat" | "block.minecraft.infested_chiseled_stone_bricks" | "death.attack.lava" | "item.ae2.fluix_sword" | "advancement.botania:gaiaGuardianKill" | "subtitles.entity.zombie.infect" | "fluid.create.tea" | "item.minecraft.firework_star.red" | "advancement.create.brass_casing.desc" | "death.attack.fireball.item" | "subtitles.entity.husk.ambient" | "options.difficulty" | "block.botania.turntable" | "block.create.mysterious_cuckoo_clock" | "death.attack.inFire" | "block.create.ornate_iron_window" | "commands.scoreboard.players.set.success.single" | "entity.minecraft.skeleton" | "patchouli.gui.lexicon.loading_error" | "multiplayerWarning.message" | "advancement.create.water_wheel" | "block.minecraft.banner.triangle_bottom.black" | "block.botania.livingwood_fence_gate" | "botania.tagline.relics" | "jei.key.combo.shift" | "item.modifiers.offhand" | "item.botania.lens_explosive.short" | "multiplayer.status.incompatible" | "create.ponder.mechanical_plough.text_3" | "create.ponder.mechanical_plough.text_4" | "create.ponder.mechanical_plough.text_1" | "create.ponder.mechanical_plough.text_2" | "subtitles.entity.wandering_trader.yes" | "create.display_source.value_list.shortened" | "block.botania.yellow_double_flower" | "block.botania.drum_gathering" | "entity.minecraft.tnt_minecart" | "key.mouse.left" | "botania.page.obedienceStick0" | "botania.page.obedienceStick1" | "create.display_source.redstone_power.number" | "block.minecraft.lime_candle_cake" | "botania.tagline.baubleBox" | "botania.page.craftingHalo0" | "item.itemfilters.always_true" | "ae2.rei_jei_integration.p2p_api_attunement" | "item.minecraft.splash_potion.effect.awkward" | "botania.page.craftingHalo2" | "block.minecraft.spruce_door" | "botania.page.craftingHalo1" | "subtitles.block.candle.crackle" | "block.minecraft.banner.circle.pink" | "subtitles.entity.chicken.egg" | "botania.armorset.manasteel.name" | "block.botania.vivid_grass" | "item.ae2.spatial_cell_component_2" | "subtitles.entity.zoglin.death" | "advancements.nether.create_beacon.description" | "item.create.powdered_obsidian" | "block.create.controller_rail" | "block.create.cut_andesite_stairs" | "stat.minecraft.player_kills" | "create.display_link.title" | "block.botania.black_double_flower" | "advancement.create.brass_casing" | "ftbquests.task.ftbquests.item.consume_false" | "botania.brew.night_vision" | "key.keyboard.delete" | "commands.advancement.revoke.many.to.many.success" | "justenoughprofessions.professions.title" | "advancements.nether.all_effects.title" | "config.jei.interface.overlayEnabled" | "key.jei.previousSearch" | "darkQuartz.enabled" | "create.ponder.portable_fluid_interface.header" | "menu.working" | "narrator.controls.reset" | "jei.tooltip.error.recipe.transfer.disabled" | "botania.page.sparks1" | "botania.page.sparks2" | "botania.page.sparks0" | "botania.tagline.lens" | "botania.page.sparks3" | "advancements.adventure.sleep_in_bed.description" | "block.botania.black_buried_petals" | "block.minecraft.andesite_stairs" | "ftbquests.tags.tooltip" | "patchouli.gui.lexicon.added_by" | "block.minecraft.banner.skull.orange" | "botania.nei.marimorphosis" | "botaniamisc.shiftToStopSpin" | "create.item_attributes.crushable.inverted" | "block.minecraft.banner.half_horizontal.gray" | "botania.subtitle.spreaderScaffold" | "item.minecraft.iron_ingot" | "advancements.nether.return_to_sender.description" | "create.ponder.funnel_redstone.header" | "subtitles.entity.cat.death" | "block.create.cut_scorchia_slab" | "item.minecraft.snowball" | "botaniamisc.inactive" | "item.create.sweet_roll" | "subtitles.entity.illusioner.prepare_blindness" | "lootr.message.refreshed" | "gui.tooltips.ae2.SubstitutionsOn" | "jigsaw_block.levels" | "advancement.create.pulley_maxed" | "container.repair.cost" | "subtitles.entity.witch.death" | "item.minecraft.music_disc_mall" | "block.minecraft.banner.triangles_top.light_blue" | "botania.entry.incense" | "pack.selected.title" | "item.minecraft.enchanted_book" | "block.minecraft.banner.square_top_left.purple" | "selectWorld.gameMode.adventure.line2" | "selectWorld.gameMode.adventure.line1" | "block.botania.white_buried_petals" | "clear.failed.multiple" | "key.left" | "entity.minecraft.spawner_minecart" | "block.minecraft.banner.triangles_top.magenta" | "item.create.andesite_alloy" | "item.patchouli:intro_book.landing" | "create.gui.sequenced_gearshift.instruction.turn_distance.distance" | "ftbquests.chapter.image.corner" | "options.off.composed" | "gui.ae2.CopyModeDesc" | "block.minecraft.flowering_azalea" | "advancement.botania:bubbellPickup.desc" | "create.schematicannon.status.idle" | "block.create.cut_calcite" | "block.minecraft.acacia_planks" | "block.create.waxed_weathered_copper_tiles" | "item.minecraft.music_disc_stal" | "entity.minecraft.villager.mason" | "mco.configure.world.subscription.extend" | "container.repair" | "block.create.vertical_framed_glass" | "connect.negotiating" | "narration.button.usage.focused" | "filled_map.monument" | "block.minecraft.chipped_anvil" | "item.ae2.dark_monitor" | "block.botania.floating_solegnolia_chibi" | "block.botania.bubbell.reference" | "argument.entity.options.type.invalid" | "block.minecraft.infested_deepslate" | "lootr.message.cannot_break_sneak" | "mco.reset.world.experience" | "patchouli.gui.lexicon.chapters" | "optimizeWorld.stage.finished" | "subtitles.entity.ender_pearl.throw" | "block.create.light_gray_valve_handle" | "debug.inspect.client.entity" | "mco.brokenworld.minigame.title" | "block.create.mechanical_bearing" | "advancement.create.track_signal" | "item.ae2.color_applicator" | "editGamerule.default" | "item.ae2.crafting_card" | "block.botania.metamorphic_mesa_bricks_slab" | "item.ae2.brown_covered_dense_cable" | "block.minecraft.black_stained_glass_pane" | "block.minecraft.banner.gradient_up.orange" | "subtitles.entity.ghast.death" | "create.display_source.time_of_day" | "gui.ae2.Magenta" | "argument.entity.selector.self" | "item.botania.rainbow_rod" | "item.patchouli:intro_book.subtitle" | "botania.tagline.keepIvy" | "fml.menu.mods.a_to_z" | "block.minecraft.banner.botania_sword.black" | "botania.tagline.mushrooms" | "item.ae2.printed_logic_processor" | "fml.menu.mods.title" | "commands.worldborder.center.success" | "item.ftbquests.stage_barrier.config" | "ftbquests.task.ftbquests.npc_quest" | "block.minecraft.banner.half_vertical_right.yellow" | "item.botania.lens_weight.short" | "title.multiplayer.disabled" | "ftbquests.task.ftbquests.observation.to_observe" | "biome.minecraft.windswept_gravelly_hills" | "selectWorld.seedInfo" | "block.botania.endoflame.reference" | "create.generic.height" | "create.ponder.radial_chassis.text_3" | "create.ponder.radial_chassis.text_2" | "effect.botania.bloodthirst" | "create.ponder.radial_chassis.text_1" | "block.botania.pink_floating_flower" | "item.botania.terra_sword" | "botaniamisc.flugelBound" | "create.ponder.radial_chassis.text_9" | "create.ponder.radial_chassis.text_8" | "create.ponder.radial_chassis.text_7" | "create.ponder.radial_chassis.text_6" | "create.gui.terrainzapper.tool" | "create.ponder.radial_chassis.text_5" | "death.attack.create.fan_lava" | "create.ponder.radial_chassis.text_4" | "block.create.rope_pulley" | "effect.minecraft.levitation" | "subtitles.item.honeycomb.wax_on" | "block.botania.metamorphic_forest_cobblestone_stairs" | "create.recipe.item_application" | "subtitles.entity.item.break" | "item.minecraft.chest_minecart" | "item.botania.lens_time" | "commands.defaultgamemode.success" | "block.botania.dreamwood_planks_slab" | "create.ponder.chain_gearshift.header" | "block.create.cut_deepslate_bricks" | "biome.minecraft.ocean" | "effect.minecraft.weakness" | "commands.message.display.outgoing" | "block.create.green_valve_handle" | "mco.news" | "options.prioritizeChunkUpdates.nearby" | "item.ae2.purple_covered_cable" | "advancements.adventure.fall_from_world_height.title" | "enchantment.minecraft.soul_speed" | "block.minecraft.banner.gradient.yellow" | "block.create.cut_andesite_slab" | "ftbquests.reward.ftbquests.choice" | "botania.entry.magnetRing" | "advancement.botania:thorRing" | "item.minecraft.zombified_piglin_spawn_egg" | "block.create.layered_crimsite" | "botania.page.tigerseye0" | "botania.page.tigerseye1" | "selectWorld.versionUnknown" | "biome.minecraft.bamboo_jungle" | "selectWorld.import_worldgen_settings.select_file" | "debug.show_hitboxes.off" | "advancement.create.clockwork_bearing.desc" | "block.minecraft.ender_chest" | "item.botania.ancient_will_karil" | "create.ponder.belt_directions.header" | "gui.ae2.MolecularAssembler" | "ftbquests.task.ftbquests.custom" | "block.minecraft.banner.bricks.blue" | "block.minecraft.banner.botania_lexicon.white" | "advancement.create.stressometer" | "advancement.create.red_signal" | "options.multiplayer.title" | "mco.create.world.wait" | "key.keyboard.right.alt" | "translation.test.none" | "ftbteamsconfig.ftbteams.free_to_join" | "gamerule.doMobSpawning" | "commands.op.failed" | "commands.attribute.modifier.remove.success" | "item.ae2.green_glass_cable" | "item.minecraft.ender_pearl" | "subtitles.entity.piglin_brute.hurt" | "create.ponder.mechanical_pump_flow.header" | "subtitles.item.bucket.fill_fish" | "block.minecraft.banner.base.light_blue" | "mco.configure.world.buttons.delete" | "botania.page.manaConjuration5" | "botania.page.manaConjuration4" | "botania.page.manaConjuration7" | "botania.page.manaConjuration6" | "botania.page.manaConjuration9" | "botania.page.manaConjuration8" | "subtitles.entity.fox.sniff" | "botania.page.manaConjuration1" | "botania.page.manaConjuration0" | "botania.page.manaConjuration3" | "subtitles.entity.rabbit.attack" | "block.botania.cocoon" | "botania.page.manaConjuration2" | "create.schedule.condition.redstone_link.powered" | "advancements.story.root.description" | "commands.stop.stopping" | "death.attack.create.mechanical_saw.player" | "advancements.adventure.trade_at_world_height.title" | "advancement.create.rose_quartz.desc" | "block.botania.light_launcher" | "block.minecraft.activator_rail" | "block.botania.floating_entropinnyum" | "commands.list.players" | "argument.pos.unloaded" | "create.ponder.spout_filling.text_3" | "create.ponder.spout_filling.text_4" | "create.ponder.spout_filling.text_5" | "create.ponder.spout_filling.text_6" | "options.percent_value" | "advancements.nether.all_potions.description" | "create.ponder.spout_filling.text_1" | "create.ponder.spout_filling.text_2" | "block.botania.dreamwood_slab" | "item.create.example_item.tooltip.control1" | "item.itemfilters.id_regex" | "subtitles.item.book.put" | "subtitles.entity.zombified_piglin.angry" | "jei.tooltip.error.recipe.transfer.unknown" | "block.minecraft.banner.square_bottom_right.pink" | "create.schedule.instruction.rename.summary" | "block.minecraft.sea_pickle" | "block.create.small_ochrum_brick_stairs" | "fml.loadingerrorscreen.errorheader" | "selectWorld.delete" | "mco.terms.buttons.disagree" | "patchouli.gui.lexicon.toast" | "create.item_attributes.astralsorcery_constellation" | "block.minecraft.banner.botania_axe.yellow" | "achievement.ae2.Presses" | "botania.tagline.travelBelt" | "resourcepack.progress" | "block.minecraft.light_blue_wool" | "ftblibrary.select_item.list_mode.inv" | "subtitles.entity.player.hurt_on_fire" | "create.ponder.mechanical_arm_filtering.text_1" | "create.ponder.mechanical_arm_filtering.text_2" | "create.ponder.mechanical_arm_filtering.text_3" | "options.modelPart.cape" | "create.ponder.mechanical_arm_filtering.text_4" | "item.botania.blood_pendant" | "fml.menu.mods.info.childmods" | "create.ponder.mechanical_arm_filtering.text_5" | "options.generic_value" | "create.ponder.mechanical_arm_filtering.text_6" | "create.generic.unit.degrees" | "botania.triggers.manaSpace" | "subtitles.block.portal.ambient" | "subtitles.entity.parrot.death" | "thermalily.obsidian" | "block.minecraft.trapped_chest" | "armorModels.enable" | "block.minecraft.banner.triangles_top.gray" | "block.botania.metamorphic_swamp_cobblestone_wall" | "advancement.botania:runePickup.desc" | "commands.data.merge.failed" | "item.botania.sextant" | "block.minecraft.potted_warped_fungus" | "subtitles.item.axe.strip" | "item.ae2.spatial_cell_component_16" | "selectWorld.deleteQuestion" | "createWorld.customize.custom.depthNoiseScaleZ" | "create.ponder.mechanical_arm_redstone.header" | "item.minecraft.husk_spawn_egg" | "ftbquests.gui.add_dependencies_self" | "item.ae2.level_emitter" | "item.ae2.fluid_storage_cell_4k" | "ftbteamsconfig.ftbteams.display_name" | "botania.tagline.auraRing" | "block.create.cut_andesite" | "key.ftbquests.quests" | "create.schedule.condition.powered" | "block.minecraft.banner.stripe_bottom.red" | "advancement.create.pipe_organ" | "block.minecraft.banner.botania_lexicon.pink" | "block.minecraft.infested_cracked_stone_bricks" | "block.botania.orange_mushroom" | "block.minecraft.banner.botania_pickaxe.magenta" | "filled_map.unknown" | "botania.tagline.tinyPlanet" | "subtitles.entity.guardian.ambient" | "item.botania.spark_upgrade_dominant" | "botania.page.cosmeticBaubles1" | "botania.page.cosmeticBaubles0" | "commands.team.list.teams.empty" | "item.minecraft.goat_spawn_egg" | "block.minecraft.banner.piglin.light_gray" | "subtitles.block.sculk_sensor.clicking_stop" | "stat.itemsButton" | "block.minecraft.banner.gradient_up.brown" | "botania.page.cosmeticBaubles9" | "botania.page.cosmeticBaubles8" | "botania.page.cosmeticBaubles7" | "botania.page.cosmeticBaubles6" | "botania.page.cosmeticBaubles5" | "botania.page.cosmeticBaubles4" | "botania.page.cosmeticBaubles3" | "botania.page.cosmeticBaubles2" | "item.minecraft.lingering_potion.effect.fire_resistance" | "block.minecraft.repeater" | "block.minecraft.tuff" | "patchouli.gui.lexicon.toast.info" | "createWorld.customize.custom.depthNoiseScaleX" | "debug.chunk_boundaries.help" | "create.schematic.rotation.cw270" | "container.dispenser" | "item.botania.mana_diamond" | "block.minecraft.potted_flowering_azalea_bush" | "advancements.husbandry.wax_on.title" | "item.create.attribute_filter" | "gui.ae2.QuantumLinkChamber" | "multiplayer.disconnect.illegal_characters" | "block.minecraft.banner.botania_spark_dominant.white" | "subtitles.entity.bee.hurt" | "item.ae2.cable_anchor" | "botaniamisc.ratio" | "commands.debug.notRunning" | "block.minecraft.banner.bricks.light_blue" | "botania.entry.swapRing" | "advancement.create.copper" | "argument.id.unknown" | "selectWorld.moreWorldOptions" | "subtitles.entity.stray.hurt" | "advancements.story.enter_the_end.title" | "selectWorld.edit.backupFailed" | "block.minecraft.banner.botania_spark_dominant.pink" | "fml.modloading.cycle" | "block.minecraft.banner.botania_spark_recessive.lightBlue" | "block.minecraft.banner.half_vertical.light_blue" | "advancements.story.enter_the_nether.title" | "item.botania.cosmetic_wicked_eyepatch" | "key.jei.nextRecipePage" | "selectWorld.bonusItems" | "item.ftblibrary.fluid_container" | "item.botania.manasteel_boots" | "selectWorld.edit.openFolder" | "item.botania.super_cloud_pendant" | "block.minecraft.cake" | "botania.tagline.vineBall" | "commands.worldborder.warning.distance.failed" | "botania.page.odinRing0" | "mco.selectServer.popup" | "block.botania.entropinnyum" | "ftbteams.info.members.none" | "block.create.crimsite" | "create.train.relocate.success" | "block.minecraft.jungle_log" | "botania.page.miningRing1" | "block.minecraft.gray_glazed_terracotta" | "botania.page.miningRing0" | "gui.all" | "curios.identifier.ring" | "block.minecraft.chiseled_polished_blackstone" | "container.dropper" | "create.recipe.assembly.cutting" | "advancements.story.deflect_arrow.title" | "block.minecraft.black_terracotta" | "block.minecraft.lily_pad" | "ae2.rei_jei_integration.no_output" | "commands.data.block.invalid" | "block.minecraft.banner.botania_lexicon.gray" | "botania.entry.odinRing" | "generator.amplified.info" | "create.schedule.instruction.rename" | "advancements.husbandry.balanced_diet.description" | "item.minecraft.netherite_boots" | "create.item_attributes.smokable.inverted" | "argument.entity.options.nbt.description" | "block.create.tiled_glass_pane" | "key.keyboard.right.shift" | "jei.tooltip.ingredient.list.disabled.how.to.fix" | "options.mainHand" | "item.minecraft.pumpkin_seeds" | "tag.botania.special_flowers" | "item.create.copper_backtank.tooltip.summary" | "create.logistics.fluid_filter" | "block.minecraft.banner.creeper.magenta" | "subtitles.entity.zombified_piglin.ambient" | "create.ponder.tag.fluids" | "item.minecraft.armor_stand" | "ftbquests.reward.ftbquests.npc_mail.sender" | "botania.tagline.bellethorne" | "block.botania.shimmerwood_planks_stairs" | "block.minecraft.potted_spruce_sapling" | "item.minecraft.cave_spider_spawn_egg" | "gui.ae2.StoredFluids" | "botania.page.fallenKanade0a" | "block.minecraft.banner.gradient.magenta" | "item.minecraft.splash_potion.effect.swiftness" | "subtitles.entity.pig.saddle" | "block.minecraft.banner.circle.magenta" | "create.ponder.cart_assembler_dual.header" | "block.create.smart_fluid_pipe" | "item.ae2.storage_monitor" | "botaniamisc.hourglassLock" | "commands.worldborder.warning.distance.success" | "block.botania.brown_petal_block" | "block.minecraft.cut_sandstone_slab" | "block.minecraft.banner.stripe_bottom.yellow" | "botania.entry.pavement" | "create.gui.toolmenu.focusKey" | "block.minecraft.banner.cross.cyan" | "commands.forge.dimensions.list" | "commands.spreadplayers.success.entities" | "ftbquests.gui.no_dependencies" | "biome.minecraft.deep_lukewarm_ocean" | "createWorld.customize.custom.preset.goodLuck" | "gui.ae2.StoredItems" | "item.ae2.memory_card_blue" | "mco.selectServer.expires.day" | "block.minecraft.dead_tube_coral_block" | "gui.tooltips.ae2.ReportInaccessibleItemsYes" | "block.create.spout" | "block.minecraft.banner.stripe_downright.magenta" | "block.minecraft.spruce_sapling" | "botania.tagline.enderAir" | "botania.entry.reachRing" | "block.minecraft.banner.skull.pink" | "block.botania.hopperhock.reference" | "botania.page.enderEyeBlock1" | "create.recipe.assembly.repeat" | "botania.page.enderEyeBlock0" | "block.botania.rosa_arcana" | "block.create.powered_latch" | "screenshot.success" | "block.minecraft.banner.globe.yellow" | "create.schedule.instruction.editor" | "create.ponder.super_glue.header" | "botania.brew.jump_boost" | "block.create.cut_deepslate_wall" | "block.minecraft.prismarine_wall" | "subtitles.entity.evoker.prepare_attack" | "advancement.create.mechanical_crafter.desc" | "block.minecraft.banner.gradient_up.black" | "commands.forge.tags.copy_element_names" | "item.ae2.memory_card_red" | "gui.tooltips.ae2.Blocking" | "block.minecraft.banner.triangle_bottom.pink" | "block.create.cut_calcite_slab" | "ftbquests.task.ftbquests.interaction" | "block.create.metal_girder" | "commands.team.join.success.multiple" | "spectatorMenu.next_page" | "block.botania.entropinnyum.reference" | "block.minecraft.banner.skull.black" | "block.minecraft.blue_ice" | "subtitles.entity.ender_eye.death" | "ftbquests.task.ftbquests.item.nbt_mode" | "block.minecraft.banner.botania_hoe.green" | "lanServer.scanning" | "description.jei.debug.formatting.1" | "item.ae2.gray_smart_dense_cable" | "block.create.flywheel.tooltip.condition1" | "description.jei.debug.formatting.3" | "description.jei.debug.formatting.2" | "entity.minecraft.parrot" | "create.tunnel.selection_mode.prefer_nearest" | "argument.entity.options.sort.irreversible" | "item.ae2.memory_card_lime" | "ftbquests.gui.patreon" | "subtitles.entity.slime.squish" | "gui.jei.category.fuel" | "parsing.quote.expected.start" | "item.botania.brew_vial" | "create.subtitle.wrench_rotate" | "botania.page.bIntro2" | "block.minecraft.banner.botania_sapling.cyan" | "botania.page.bIntro1" | "item.minecraft.egg" | "botania.page.bIntro0" | "generator.botania-skyblock.info" | "item.minecraft.music_disc_blocks.desc" | "commands.ftbquests.export_rewards_to_chest.usage" | "entity.minecraft.dolphin" | "create.recipe.processing.chance" | "ftbquests.quest.min_required_dependencies.tooltip" | "block.create.oxidized_copper_tiles" | "item.ftbquests.lootcrate.tooltip_2" | "item.ae2.spatial_storage_cell_2" | "item.ftbquests.lootcrate.tooltip_1" | "block.minecraft.banner.creeper.black" | "advancement.botania:runePickup" | "commands.advancement.grant.criterion.to.one.failure" | "botania.animatedTorch.toggle" | "block.minecraft.banner.bricks.lime" | "create.recipe.mystery_conversion" | "botania.page.clayconia1" | "block.minecraft.banner.botania_axe.red" | "botania.page.clayconia0" | "item.ftbquests.book.disabled" | "block.botania.bellethorn_chibi" | "item.patchouli.guide_book.name" | "botania.entry.apothecary" | "forge.update.newversion" | "advancement.create.belt_funnel_kiss" | "item.minecraft.glow_berries" | "commands.ftbquests.set_variable.invalid_id" | "fml.menu.multiplayer.missingdatapackregistries" | "patchouli.gui.lexicon.reloaded" | "botania.tagline.enderHand" | "item.minecraft.dragon_breath" | "subtitles.entity.parrot.imitate.drowned" | "block.botania.floating_tigerseye" | "color.minecraft.lime" | "gui.tooltips.ae2.Ascending" | "block.minecraft.polished_blackstone_bricks" | "block.minecraft.banner.botania_pickaxe.pink" | "config.jei.mode.cheatItemsEnabled" | "botania.tagline.slimeBottle" | "block.ae2.1k_crafting_storage" | "item.ae2.blue_lumen_paint_ball" | "block.create.content_observer" | "attribute.name.zombie.spawn_reinforcements" | "subtitles.entity.panda.sneeze" | "block.minecraft.banner.botania_spark_dominant.green" | "item.botania.slime_bottle" | "block.minecraft.banner.globe.lime" | "botania.tagline.rainbowRod" | "item.create.schematic_and_quill.tooltip.condition2" | "block.botania.light_gray_shiny_flower" | "subtitles.entity.villager.work_fisherman" | "botania.tagline.pylon" | "block.create.schematicannon.tooltip.behaviour1" | "item.create.schematic_and_quill.tooltip.condition1" | "block.botania.magenta_mushroom" | "chat.type.advancement.goal" | "gui.ae2.security.build.tip" | "multiplayer.disconnect.server_shutdown" | "multiplayer.disconnect.banned_ip.reason" | "key.use" | "create.ponder.hold_to_ponder" | "advancement.botania:functionalFlower.desc" | "block.create.waxed_copper_shingle_slab" | "resourcepack.downloading" | "block.botania.fel_pumpkin" | "block.botania.yellow_pavement_slab" | "commands.enchant.failed.itemless" | "sleep.not_possible" | "createWorld.customize.preset.tunnelers_dream" | "structure_block.show_boundingbox" | "block.minecraft.banner.botania_fish.magenta" | "botania.page.kingKey0" | "key.jei.showRecipe" | "key.keyboard.backspace" | "item.minecraft.firework_star.purple" | "block.botania.light_blue_shiny_flower" | "item.minecraft.creeper_banner_pattern.desc" | "config.jei.search.resourceIdSearchMode.comment" | "item.botania.mycelium_seeds" | "create.gui.sequenced_gearshift.speed" | "item.ae2.processing_pattern" | "block.minecraft.banner.botania_axe.green" | "gameMode.spectator" | "botania.entry.bIntro" | "menu.modded" | "item.botania.mana_cookie" | "create.gui.schematicannon.shotsRemaining" | "block.minecraft.banner.curly_border.cyan" | "stat.generalButton" | "block.minecraft.banner.square_top_right.light_blue" | "argument.angle.invalid" | "botaniamisc.shardRange" | "gui.tooltips.ae2.FilterOnExtract" | "create.weighted_ejector.target_set" | "ftbquests.gui.save_as_file" | "entity.minecraft.command_block_minecart" | "botania.page.livingwoodBow1" | "block.minecraft.gold_block" | "botania.page.livingwoodBow0" | "advancements.adventure.lightning_rod_with_villager_no_fire.title" | "gui.tooltips.ae2.SideFront" | "block.minecraft.banner.square_top_left.magenta" | "gui.jei.category.compostable.chance" | "key.ae2.category" | "botania.page.gardenOfGlass0" | "botania.page.gardenOfGlass1" | "botania.page.gardenOfGlass2" | "block.minecraft.banner.botania_axe.white" | "key.chat" | "botania.page.craftCrate10" | "botania.page.gardenOfGlass3" | "botania.page.gardenOfGlass4" | "botania.entry.cacophonium" | "botania.page.gardenOfGlass5" | "botaniamisc.creativePool0" | "botania.page.gardenOfGlass6" | "create.schematicannon.status.paused" | "block.minecraft.banner.square_top_right.magenta" | "botania.page.gardenOfGlass7" | "botania.page.gardenOfGlass8" | "advancement.botania:gaiaGuardianHardmode.desc" | "botania.page.gardenOfGlass9" | "achievement.ae2.IOPort" | "gui.none" | "entity.botania.babylon_weapon" | "botaniamisc.creativePool1" | "block.minecraft.banner.diagonal_up_right.cyan" | "color.minecraft.blue" | "enchantment.minecraft.efficiency" | "block.minecraft.banner.gradient_up.light_blue" | "gui.tooltips.ae2.FilterMode" | "item.botania.rune_summer" | "botania.tagline.relicInfo" | "selectWorld.edit.backupCreated" | "advancement.botania:lokiRingMany.desc" | "options.hideMatchedNames" | "curios.modifiers.charm" | "block.botania.yellow_pavement_stairs" | "botaniamisc.blocksAway" | "block.botania.chiseled_metamorphic_fungal_bricks" | "block.minecraft.banner.square_bottom_left.green" | "gui.ae2.IncreasedEnergyUseFromEnchants" | "lootr.advancements.25loot.title" | "emi.category.botania.runic_altar" | "forge.configgui.dimensionUnloadQueueDelay.tooltip" | "create.ponder.tag.kinetic_appliances.description" | "subtitles.entity.vindicator.hurt" | "ftbquests.file.allow_take_quest_blocks.tooltip" | "block.minecraft.banner.globe.blue" | "block.botania.metamorphic_taiga_stone" | "createWorld.customize.custom.preset.drought" | "item.minecraft.music_disc_11.desc" | "block.minecraft.banner.diagonal_right.brown" | "item.botania.lens_piston" | "block.minecraft.black_glazed_terracotta" | "block.minecraft.light_blue_candle" | "botania.entry.gatherDrum" | "waila.ae2.Channels" | "gui.copy" | "botaniamisc.clickToRemoveWarp" | "block.botania.magenta_double_flower" | "mco.configure.world.subscription.unknown" | "block.botania.gray_floating_flower" | "create.schematic.tool.rotate.description.0" | "create.schematic.tool.rotate.description.1" | "botania.entry.manastar" | "item.create.copper_nugget" | "mco.minigame.world.startButton" | "create.schematic.tool.rotate.description.2" | "create.schematic.tool.rotate.description.3" | "gui.ae2.Wireless" | "gui.ae2.CantStoreItems" | "block.create.honey" | "biome.minecraft.wooded_badlands" | "botania.page.luminizerTransport7" | "options.discrete_mouse_scroll" | "botania.page.luminizerTransport8" | "block.create.cut_tuff_brick_stairs" | "botania.page.luminizerTransport9" | "chat_screen.title" | "structure_block.mode_info.corner" | "gui.ae2.security.extract.tip" | "fml.messages.version.restriction.lower.inclusive" | "botania.page.luminizerTransport0" | "botania.page.luminizerTransport1" | "botania.page.luminizerTransport2" | "mco.selectServer.play" | "botania.page.luminizerTransport3" | "botania.page.luminizerTransport4" | "block.ae2.sky_stone_block" | "botania.page.luminizerTransport5" | "botania.page.luminizerTransport6" | "subtitles.entity.magma_cube.hurt" | "botania.tagline.munchdew" | "selectWorld.unable_to_load" | "item.create.wand_of_symmetry.tooltip.control1" | "create.recipe.automatic_packing" | "item.create.wand_of_symmetry.tooltip.control2" | "subtitles.entity.goat.screaming.ambient" | "create.schematic.tool.move" | "item.create.wand_of_symmetry.tooltip.control3" | "gui.add" | "item.create.schematic_and_quill.tooltip" | "block.minecraft.banner.diagonal_left.yellow" | "create.track_target.invalid" | "item.botania.cosmetic_botanist_emblem" | "botaniamisc.command.skyblock.noisland" | "block.botania.light_blue_buried_petals" | "gui.ae2.SpatialAnchor" | "botania.entry.munchdew" | "commands.playsound.failed" | "create.keyinfo.scrollup" | "block.create.cyan_toolbox" | "block.minecraft.banner.flower.lime" | "commands.whitelist.enabled" | "config.jei.advanced.maxColumns.comment" | "entity.minecraft.villager.fletcher" | "item.create.extendo_grip.tooltip.behaviour1" | "item.create.extendo_grip.tooltip.behaviour2" | "create.item_attributes.has_fluid.inverted" | "subtitles.entity.wither_skeleton.ambient" | "block.minecraft.acacia_trapdoor" | "advancement.botania:baubleWear" | "commands.spectate.success.stopped" | "create.track_target.set" | "tutorial.move.description" | "block.minecraft.amethyst_cluster" | "item.botania.aura_ring" | "block.minecraft.banner.straight_cross.green" | "commands.bossbar.set.style.unchanged" | "subtitles.block.fire.extinguish" | "mco.configure.world.slot" | "block.minecraft.banner.botania_axe.silver" | "fml.modloading.brokenfile.liteloader" | "block.minecraft.birch_slab" | "item.create.incomplete_track" | "botania.tagline.dodgeRing" | "biome.minecraft.cold_ocean" | "block.botania.floating_munchdew" | "item.botania.lens_power.short" | "advancement.botania:flowerPickup.desc" | "enchantment.minecraft.riptide" | "block.minecraft.banner.triangle_top.gray" | "commands.kill.success.multiple" | "create.schematic.rotation.cw180" | "block.create.small_limestone_brick_stairs" | "block.minecraft.blackstone_wall" | "block.create.waxed_exposed_copper_tile_slab" | "advMode.command" | "block.botania.floating_bellethorn" | "options.chat.line_spacing" | "block.minecraft.banner.flower.blue" | "botania.entry.dirtRod" | "biome.minecraft.frozen_peaks" | "block.botania.cracked_livingrock_bricks" | "block.minecraft.sugar_cane" | "block.create.cut_limestone_bricks" | "block.botania.metamorphic_desert_stone" | "create.gui.schematicTable.uploading" | "block.botania.floating_dreadthorn" | "advancements.nether.summon_wither.description" | "block.create.redstone_link" | "create.ponder.deployer_contraption.text_1" | "create.ponder.deployer_contraption.text_3" | "create.ponder.deployer_contraption.text_2" | "string.naturescompass.category" | "create.train.status.no_path" | "subtitles.block.door.toggle" | "commands.forge.tracking.be.reset" | "multiplayer.disconnect.outdated_client" | "botania.entry.preventingDecay" | "item.minecraft.golden_axe" | "commands.execute.conditional.pass" | "create.gui.goggles.fluid_container.capacity" | "botania.entry.manaConjuration" | "block.minecraft.banner.gradient_up.cyan" | "gui.other" | "create.display_source.combine_item_names" | "death.attack.fallingStalactite" | "block.minecraft.blue_concrete" | "item.botania.placeholder" | "ftbquests.chapter.always_invisible" | "item.botania.corporea_spark" | "item.minecraft.light_gray_dye" | "block.minecraft.fire_coral_wall_fan" | "ftbquests.quest.subtitle" | "subtitles.item.armor.equip" | "ae2.rei_jei_integration.p2p_tag_attunement" | "item.ae2.orange_covered_dense_cable" | "biome.minecraft.meadow" | "argument.entity.toomany" | "commands.playsound.success.single" | "subtitles.entity.ravager.celebrate" | "lanServer.start" | "fml.modloading.failedtoloadmodclass" | "create.gui.schematicannon.listPrinter" | "subtitles.entity.player.attack.sweep" | "gui.ae2.security.security.name" | "block.minecraft.emerald_ore" | "mco.template.select.narrate.version" | "subtitles.entity.elder_guardian.ambient" | "item.botania.cloud_pendant" | "advancements.nether.brew_potion.description" | "waila.ae2.IdentityDeprecated" | "create.schedule.condition.player_count.condition" | "subtitles.entity.magma_cube.squish" | "block.minecraft.polished_blackstone_pressure_plate" | "botania.tagline.bubbell" | "block.create.small_deepslate_bricks" | "botania.brew.healing" | "block.botania.yellow_pavement" | "subtitles.entity.pig.death" | "block.minecraft.purple_bed" | "botania.subtitle.runeAltarStart" | "versionChecking.enabled" | "create.station.train_not_aligned" | "advancement.botania_challenge" | "item.ae2.certus_quartz_sword" | "block.botania.blue_mushroom" | "mco.create.world.subtitle" | "block.minecraft.banner.flower.purple" | "gui.ae2.Fuzzy" | "block.botania.munchdew.reference" | "create.train_assembly.too_many_bogeys" | "entity.minecraft.small_fireball" | "block.create.polished_cut_ochrum" | "curios.name" | "block.create.polished_cut_calcite_wall" | "gui.ae2.LargeFontCraft" | "key.categories.movement" | "botaniamisc.stopped" | "create.ponder.cart_assembler.text_3" | "advancement.botania:desuGun.desc" | "create.ponder.cart_assembler.text_2" | "create.ponder.cart_assembler.text_1" | "create.ponder.clockwork_bearing.text_4" | "create.ponder.clockwork_bearing.text_5" | "create.ponder.clockwork_bearing.text_6" | "create.ponder.clockwork_bearing.text_7" | "create.ponder.clockwork_bearing.text_1" | "botania.page.complexBrews0" | "create.ponder.clockwork_bearing.text_2" | "commands.bossbar.set.players.unchanged" | "gui.ae2.VibrationChamber" | "block.botania.red_petal_block" | "create.ponder.clockwork_bearing.text_3" | "block.minecraft.fire" | "create.item_attributes.astralsorcery_crystal.inverted" | "block.minecraft.banner.stripe_downleft.yellow" | "block.minecraft.cyan_shulker_box" | "achievement.ae2.Facade" | "advancements.nether.obtain_blaze_rod.description" | "subtitles.entity.spider.death" | "block.botania.tangleberrie.reference" | "item.botania.reach_ring" | "block.minecraft.lime_glazed_terracotta" | "gui.jei.category.compostable" | "create.ponder.clockwork_bearing.text_8" | "key.keyboard.down" | "advancement.create.long_train.desc" | "item.ae2.redstone_card" | "config.jei.advanced.colorSearchEnabled" | "commands.ftbquests.change_team_rewards.usage" | "block.botania.yellow_buried_petals" | "block.create.polished_cut_tuff" | "entity.minecraft.cod" | "entity.minecraft.hoglin" | "block.minecraft.banner.stripe_right.green" | "item.ae2.fluix_crystal" | "options.videoTitle" | "botania.entry.orechidIgnem" | "entity.minecraft.cow" | "create.gui.sequenced_gearshift.instruction.turn_angle.descriptive" | "ftbquests.reward_table.enable_loot_crate" | "block.create.cut_dripstone_stairs" | "item.ae2.wireless_terminal" | "commands.forceload.removed.single" | "create.ponder.windmill_structure.text_1" | "botania.tagline.thirdEye" | "botania.page.infiniteFruit0" | "block.minecraft.light_blue_carpet" | "subtitles.entity.axolotl.death" | "block.botania.mossy_livingrock_bricks_wall" | "block.minecraft.banner.botania_logo.orange" | "advancement.create.extendo_grip_dual" | "item.botania.exchange_rod" | "block.create.copper_shingles" | "enchantment.minecraft.piercing" | "mco.configure.world.invited" | "pylonModel.old" | "block.create.cut_veridium_slab" | "createWorld.customize.custom.useLavaOceans" | "block.create.polished_cut_scoria_stairs" | "sidebar_button.ftblibrary.toggle.night" | "addServer.title" | "block.create.cut_andesite_brick_stairs" | "block.create.ochrum_pillar" | "create.schedule.condition.threshold.items" | "gui.ae2.EnergyLevelEmitter" | "block.botania.red_mushroom" | "key.keyboard.grave.accent" | "block.minecraft.lime_candle" | "subtitles.particle.soul_escape" | "commands.datapack.enable.failed" | "advancement.create.long_train" | "block.minecraft.barrel" | "gui.ae2.Cyan" | "mco.configure.world.leave.question.line2" | "mco.configure.world.leave.question.line1" | "create.contraption.controls.approach_station" | "block.botania.metamorphic_desert_cobblestone" | "block.minecraft.chain" | "item.minecraft.potion.effect.regeneration" | "create.tooltip.holdForDescription" | "subtitles.entity.phantom.bite" | "block.minecraft.cave_vines_plant" | "block.minecraft.quartz_block" | "subtitles.block.shulker_box.open" | "string.naturescompass.teleport" | "commands.bossbar.set.max.unchanged" | "botania.tagline.shulk_me_not" | "block.ftbquests.chest.input" | "block.minecraft.cut_copper_stairs" | "subtitles.entity.strider.idle" | "selectWorld.edit.resetIcon" | "stat.minecraft.bell_ring" | "subtitles.entity.bat.hurt" | "create.display_link.success" | "item.create.extendo_grip.tooltip.summary" | "gui.tooltips.ae2.SetAction" | "botania.entry.turntable" | "block.minecraft.big_dripleaf_stem" | "options.allowServerListing.tooltip" | "item.patchouli:pamphlet.landing" | "advancement.create.chute" | "block.minecraft.banner.straight_cross.white" | "block.ae2.debug_chunk_loader" | "botaniamisc.retainer.retain_missing" | "create.logistics.secondFrequency" | "block.minecraft.campfire" | "block.create.nixie_tube" | "ftbteams.info.short_id" | "demo.help.inventory" | "ftbteamsconfig.ftbteams.color" | "item.ae2.creative_fluid_cell" | "gui.tooltips.ae2.FilterOnExtractEnabled" | "commands.enchant.failed" | "parsing.long.invalid" | "mco.selectServer.buy" | "botania.tagline.invisibilityCloak" | "botania.page.welcome0" | "gui.ae2.PartialPlan" | "subtitles.entity.glow_squid.squirt" | "advancements.adventure.arbalistic.title" | "botania.page.welcome3" | "create.ponder.exit" | "botania.page.welcome2" | "botania.page.welcome1" | "botania.page.welcome6" | "botania.page.welcome5" | "ftbquests.reward.ftbquests.npc_faction.add" | "block.botania.shimmerwood_planks_slab" | "create.item_attributes.astralsorcery_amulet.inverted" | "item.botania.red_petal" | "options.gamma" | "gui.ae2.SpatialCapacity" | "item.botania.cosmetic_googly_eyes" | "create.recipe.mechanical_crafting" | "create.tooltip.chute.contains" | "advancements.adventure.fall_from_world_height.description" | "commands.data.get.unknown" | "create.ponder.deployer_redstone.header" | "create.recipe.fan_haunting.fan" | "blockBreakingParticles.enabled" | "item.botania.cosmetic_questgiver_mark" | "botania.page.marimorphosis2" | "botania.page.marimorphosis3" | "item.minecraft.blue_dye" | "botania.page.marimorphosis0" | "block.minecraft.banner.stripe_top.pink" | "botania.page.marimorphosis1" | "fml.modloading.missingmetadata" | "create.gui.sequenced_gearshift.speed.forward" | "block.minecraft.torch" | "botania.entry.exchangeRod" | "block.create.cut_calcite_brick_wall" | "lootr.advancements.social.description" | "create.boiler.heat_dots" | "block.minecraft.light_gray_shulker_box" | "item.ae2.formation_core" | "botania.entry.canopyDrum" | "advancements.story.enchant_item.title" | "mco.upload.select.world.subtitle" | "recipe.notFound" | "botania.entry.prism" | "options.difficulty.easy" | "subtitles.entity.parrot.imitate.silverfish" | "language.code" | "block.minecraft.banner.stripe_middle.cyan" | "item.ftbquests.book" | "block.minecraft.dark_oak_button" | "block.create.cut_limestone_brick_stairs" | "ftbquests.reward_table.loot_crate.passive_weight" | "create.subtitle.crafter_craft" | "botania.challenge.spectrolusSetup" | "botania.entry.spellCloth" | "item.botania.cosmetic_thick_eyebrows" | "create.ponder.piston_pole.header" | "block.create.peculiar_bell.tooltip" | "item.minecraft.golden_helmet" | "block.botania.metamorphic_forest_stone_wall" | "block.minecraft.soul_lantern" | "item.create.crushed_osmium_ore" | "botania.subtitle.endoflame" | "block.minecraft.banner.stripe_bottom.pink" | "commands.team.option.seeFriendlyInvisibles.alreadyDisabled" | "block.minecraft.chiseled_stone_bricks" | "botania.page.elfResources2.title" | "block.minecraft.banner.small_stripes.purple" | "advancement.botania:elfPortalOpen" | "block.minecraft.banner.stripe_right.white" | "block.minecraft.potted_warped_roots" | "entity.minecraft.cat" | "item.minecraft.lingering_potion.effect.night_vision" | "ftbquests.gui.complete_instantly" | "argument.entity.selector.randomPlayer" | "commands.bossbar.set.players.success.some" | "block.ae2.paint" | "create.recipe.fan_smoking.fan" | "botania.page.blackLotus0" | "block.minecraft.banner.stripe_top.brown" | "block.minecraft.bamboo" | "subtitles.entity.llama.ambient" | "botania.triggers.manaContains" | "block.create.small_dripstone_brick_slab" | "create.item_attributes.max_enchanted" | "botania.entry.flugelEye" | "block.create.light_blue_valve_handle" | "ccl.commands.count.fail" | "block.minecraft.potted_dandelion" | "options.chat.visibility.full" | "botania.subtitle.divaCharm" | "create.ponder.rotation_speed_controller.header" | "advancements.adventure.shoot_arrow.title" | "subtitles.entity.parrot.imitate.creeper" | "mco.configure.world.buttons.subscription" | "commands.advancement.grant.many.to.many.failure" | "selectWorld.mapFeatures.info" | "item.minecraft.firework_star.shape.small_ball" | "entity.minecraft.tropical_fish.type.snooper" | "create.item_attributes.blastable" | "item.botania.scorched_seeds" | "commands.ftbquests.command.error.invalid_id" | "forge.stepHeight" | "block.botania.pink_double_flower" | "botania.subtitle.manaBlaster" | "effect.minecraft.strength" | "gui.ae2.Included" | "key.jei.copy.recipe.id" | "block.minecraft.lectern" | "item.botania.manasteel_pick" | "block.create.flywheel" | "commands.locatebiome.invalid" | "advancement.botania:alfPortalBread" | "subtitles.entity.pillager.hurt" | "parsing.long.expected" | "block.minecraft.banner.botania_flower.red" | "block.create.polished_cut_granite_wall" | "options.mipmapLevels" | "block.create.crimson_window" | "block.minecraft.banner.rhombus.purple" | "advancement.create.deployer" | "item.create.wand_of_symmetry.tooltip.action3" | "create.ponder.empty_blaze_burner.header" | "botania.page.flowers16" | "create.schedule.condition.player_count.summary" | "block.minecraft.red_stained_glass_pane" | "commands.data.block.modified" | "block.minecraft.smooth_sandstone_slab" | "entity.minecraft.tropical_fish.predefined.0" | "item.botania.dirt_rod" | "botania.page.flowers13" | "botania.page.flowers12" | "botania.page.flowers15" | "botania.page.flowers14" | "item.create.wand_of_symmetry.tooltip.action2" | "item.create.wand_of_symmetry.tooltip.action1" | "botania.page.flowers11" | "botania.page.flowers10" | "block.minecraft.orange_banner" | "create.ponder.tag.windmill_sails" | "block.botania.toggle_light_relay" | "entity.minecraft.tropical_fish.predefined.9" | "block.minecraft.stripped_oak_wood" | "create.linked_controller.press_keybind" | "stat.minecraft.interact_with_crafting_table" | "entity.minecraft.tropical_fish.predefined.3" | "entity.minecraft.tropical_fish.predefined.4" | "entity.minecraft.tropical_fish.predefined.1" | "block.botania.chiseled_livingrock_bricks" | "item.create.tree_fertilizer.tooltip.summary" | "entity.minecraft.tropical_fish.predefined.2" | "entity.minecraft.tropical_fish.predefined.7" | "entity.minecraft.tropical_fish.predefined.8" | "entity.minecraft.tropical_fish.predefined.5" | "entity.minecraft.tropical_fish.predefined.6" | "multiplayer.disconnect.slow_login" | "botania.tagline.hourglass" | "create.ponder.millstone.text_2" | "botania.tagline.elvenLore" | "create.ponder.millstone.text_1" | "block.minecraft.banner.botania_hoe.white" | "subtitles.item.shovel.flatten" | "commands.ae2.permissions" | "block.create.black_toolbox" | "create.schedule.condition.threshold.equal" | "create.subtitle.whistle_train_low" | "commands.scoreboard.players.enable.failed" | "block.botania.yellow_petal_block" | "create.gui.goggles.fluid_container" | "item.ae2.portable_fluid_cell_16k" | "connect.failed" | "create.schedule.applied_to_train" | "subtitles.entity.elder_guardian.flop" | "create.ponder.large_cogwheel.text_1" | "subtitles.entity.piglin.retreat" | "create.ponder.large_cogwheel.text_2" | "block.create.cut_scorchia_brick_slab" | "advancements.adventure.kill_all_mobs.title" | "botania.page.vinculotus1" | "botania.page.vinculotus0" | "commands.forge.tags.tag_key" | "mco.backup.generate.world" | "block.minecraft.waxed_oxidized_cut_copper" | "block.create.small_scoria_brick_stairs" | "gui.tooltips.ae2.IOMode" | "item.ae2.blank_pattern" | "subtitles.item.chorus_fruit.teleport" | "commands.scoreboard.players.remove.success.single" | "ftbquests.task.ftbquests.xp.points" | "entity.botania.pool_minecart" | "create.station.no_bogeys" | "advancements.story.mine_stone.description" | "block.minecraft.banner.base.white" | "block.minecraft.banner.cross.black" | "block.minecraft.banner.curly_border.purple" | "block.minecraft.banner.diagonal_up_right.orange" | "botania.subtitle.drum" | "block.create.cut_granite_slab" | "item.minecraft.rabbit_hide" | "create.schedule.condition.time_of_day.status" | "create.train.relocate" | "color.minecraft.black" | "item.botania.third_eye" | "create.ponder.millstone.text_4" | "create.ponder.millstone.text_3" | "gui.tooltips.ae2.MoveWhenFull" | "create.ponder.millstone.text_5" | "botania.page.keepIvy2" | "itemGroup.itemfilters.itemfilters" | "block.ae2.sky_stone_brick_slab" | "item.minecraft.pufferfish_bucket" | "block.minecraft.banner.half_horizontal.pink" | "botania.page.keepIvy1" | "botania.page.keepIvy0" | "config.jei.advanced.giveMode.comment" | "advancements.husbandry.complete_catalogue.description" | "block.minecraft.banner.triangles_top.pink" | "block.botania.agricarnation_chibi" | "block.minecraft.polished_blackstone" | "gui.tooltips.ae2.ReportInaccessibleItems" | "block.minecraft.banner.botania_shovel.pink" | "advancements.end.dragon_egg.description" | "item.patchouli.comprehensive_test_book.name" | "gui.tooltips.ae2.StoredItems" | "debug.pause.help" | "spectatorMenu.teleport" | "block.minecraft.banner.square_bottom_right.gray" | "advancements.adventure.very_very_frightening.title" | "ftbquests.quest.shape.square" | "botania.page.flowers9" | "botania.page.flowers8" | "item.minecraft.tnt_minecart" | "botania.page.flowers6" | "death.attack.create.crush.player" | "botania.page.flowers5" | "argument.block.property.invalid" | "botania.page.flowers4" | "botania.page.flowers3" | "item.itemfilters.and" | "block.botania.fabulous_pool" | "botania.page.flowers2" | "botania.page.flowers1" | "botania.page.flowers0" | "subtitles.item.trident.hit" | "block.minecraft.purple_terracotta" | "entity.create.stationary_contraption" | "block.minecraft.banner.small_stripes.green" | "botaniamisc.craftToAddWill" | "botania.page.brewery9a" | "demo.help.fullWrapped" | "botania.page.brewery9b" | "commands.perf.alreadyRunning" | "item.botania.elementium_sword" | "block.minecraft.oak_sapling" | "block.botania.pump" | "botania.entry.gravityRod" | "ftbquests.reward.ftbquests.random" | "attribute.name.generic.follow_range" | "block.botania.chiseled_metamorphic_taiga_bricks" | "gui.ae2.NetworkDetails" | "botania.page.brewery8a" | "commands.ftbquests.command.feedback.table_imported" | "botania.page.brewery8b" | "block.create.pink_valve_handle" | "options.title" | "block.minecraft.yellow_carpet" | "block.create.ornate_iron_window_pane" | "block.minecraft.banner.stripe_center.cyan" | "theoneprobe.ae2.locked" | "block.ae2.sky_stone_brick_stairs" | "create.track.slope_turn" | "item.kubejs.gold_coin" | "commands.team.leave.success.multiple" | "subtitles.entity.ender_eye.launch" | "advancements.end.kill_dragon.description" | "inventory.hotbarInfo" | "gui.tooltips.ae2.RedstoneMode" | "gui.ae2.BytesUsed" | "block.create.placard.tooltip.summary" | "block.botania.corporea_brick_slab" | "block.create.waxed_weathered_copper_shingles" | "block.minecraft.green_terracotta" | "block.create.lime_sail" | "block.botania.light_blue_mushroom" | "options.prioritizeChunkUpdates.nearby.tooltip" | "block.minecraft.chorus_flower" | "item.create.golden_sheet" | "item.minecraft.popped_chorus_fruit" | "block.minecraft.bubble_column" | "block.create.pink_toolbox" | "jigsaw_block.joint_label" | "block.minecraft.waxed_weathered_cut_copper_slab" | "key.keyboard.f22" | "key.keyboard.f23" | "key.keyboard.f20" | "key.keyboard.f21" | "block.minecraft.banner.mojang.purple" | "botania.page.manaAlchemy4" | "botania.page.manaAlchemy3" | "botania.page.manaAlchemy2" | "botania.page.manaAlchemy1" | "botania.page.manaAlchemy0" | "commands.schedule.same_tick" | "key.keyboard.f24" | "commands.spreadplayers.success.teams" | "key.keyboard.f25" | "botania.page.manaAlchemy9" | "botania.page.manaAlchemy8" | "botania.page.manaAlchemy7" | "botania.entry.starSword" | "botania.entry.sparks" | "botania.page.manaAlchemy6" | "botania.page.manaAlchemy5" | "mco.connect.failed" | "death.attack.outOfWorld.player" | "item.botania.swap_ring" | "multiplayer.downloadingTerrain" | "block.minecraft.banner.small_stripes.red" | "item.create.schematic" | "block.botania.metamorphic_mountain_bricks_slab" | "subtitles.entity.witch.throw" | "block.botania.exoflame.reference" | "item.minecraft.axolotl_bucket" | "string.naturescompass.heightVariation" | "create.track_target.too_far" | "block.minecraft.banner.stripe_right.red" | "fml.messages.version.restriction.bounded" | "botania.entry.gourmaryllis" | "subtitles.item.trident.hit_ground" | "botaniamisc.notInfused" | "botania.tagline.welcome" | "string.naturescompass.medium" | "block.minecraft.banner.botania_fish.black" | "botania.entry.worldSeed" | "botania.page.agricarnation0" | "botania.page.agricarnation1" | "create.ponder.train_signal_redstone.text_2" | "commands.save.alreadyOff" | "advancement.create.train_crash.desc" | "create.recipe.sandpaper_polishing" | "multiplayer.disconnect.incompatible" | "create.ponder.train_signal_redstone.text_1" | "item.botania.monocle" | "theoneprobe.ae2.contains" | "block.minecraft.nether_bricks" | "block.botania.mana_detector" | "subtitles.entity.piglin.angry" | "block.minecraft.banner.diagonal_right.yellow" | "key.keyboard.f11" | "key.keyboard.f12" | "block.create.linear_chassis" | "key.keyboard.f10" | "options.accessibility.text_background" | "create.schedule.instruction.filter_edit_box_2" | "create.schedule.instruction.filter_edit_box_1" | "block.minecraft.banner.botania_spark_recessive.black" | "create.schedule.instruction.filter_edit_box_3" | "forge.controlsgui.alt" | "create.recipe.fan_washing" | "gui.ae2.TankBucketCapacity" | "block.minecraft.light_blue_glazed_terracotta" | "item.botania.cosmetic_alien_antenna" | "advancements.nether.use_lodestone.description" | "botania.entry.laputaShard" | "key.keyboard.f15" | "key.keyboard.f16" | "key.keyboard.f13" | "key.keyboard.f14" | "key.keyboard.f19" | "options.autoSuggestCommands" | "key.keyboard.f17" | "key.keyboard.f18" | "create.ponder.pulse_repeater.text_1" | "botania.challenge.autoQuarry.desc" | "block.minecraft.polished_blackstone_brick_slab" | "create.ponder.pulse_repeater.text_3" | "create.ponder.pulse_repeater.text_2" | "book.editTitle" | "subtitles.entity.mule.chest" | "tag.botania.dreamwood_logs" | "block.minecraft.waxed_oxidized_cut_copper_stairs" | "selectWorld.edit" | "block.botania.gray_buried_petals" | "ftbquests.task.ftbquests.structure.structure" | "create.subtitle.contraption_assemble" | "item.create.attribute_filter.tooltip.summary" | "botania.entry.corporea" | "create.ponder.gantry_direction.text_4" | "create.ponder.gantry_direction.text_3" | "create.ponder.gantry_direction.text_2" | "create.ponder.gantry_direction.text_1" | "achievement.ae2.QNB" | "gui.ae2.P2PAttunementEnergy" | "botania.entry.tinyPlanet" | "create.item_attributes.in_item_group" | "commands.item.target.no_changes" | "item.create.whisk" | "block.ae2.sky_compass" | "stat.minecraft.treasure_fished" | "block.create.creative_crate.tooltip.summary" | "gui.tooltips.ae2.DurationFormatDays" | "botania.entry.tigerseye" | "block.minecraft.banner.botania_sword.purple" | "block.minecraft.stripped_warped_stem" | "create.display_source.accumulate_items" | "item.minecraft.glow_squid_spawn_egg" | "gui.ae2.CopyMode" | "block.minecraft.black_concrete_powder" | "difficulty.lock.title" | "argument.color.invalid" | "menu.game" | "create.ponder.belt_connector.text_2" | "forge.configgui.zombieBabyChance.tooltip" | "create.ponder.belt_connector.text_1" | "create.ponder.belt_connector.text_4" | "create.ponder.belt_connector.text_3" | "create.ponder.belt_connector.text_6" | "create.ponder.belt_connector.text_5" | "botania.page.manaweave3" | "botania.page.manaweave2" | "botania.page.manaweave5" | "botania.page.manaweave4" | "item.itemfilters.id_regex.description" | "botania.page.manaweave1" | "botania.page.manaweave0" | "title.32bit.deprecation" | "resourcePack.title" | "botania.page.manaweave6" | "ccl.commands.killall.success" | "block.minecraft.beehive" | "gui.ae2.OfSecondOutput" | "gui.tooltips.ae2.SideBottom" | "key.keyboard.print.screen" | "entity.minecraft.vindicator" | "tutorial.find_tree.description" | "effect.minecraft.saturation" | "botania.page.brewery5a" | "botania.page.brewery5b" | "botania.page.platform1" | "advancement.create.hand_crank_000" | "botania.page.platform0" | "block.minecraft.orange_terracotta" | "botania.page.platform2" | "config.jei.interface.bookmarkOverlayEnabled" | "ae2.rei_jei_integration.with_crystal_growth_accelerators" | "mco.template.name" | "advancement.botania:sparkCraft.desc" | "subtitles.block.chest.locked" | "botania.page.dirtRod0" | "botania.page.dirtRod2" | "botania.page.dirtRod1" | "botania.entry.autocraftingHalo" | "itemGroup.kubejs.kubejs" | "string.naturescompass.samples" | "block.minecraft.banner.botania_spark_recessive.magenta" | "subtitles.entity.ghast.hurt" | "block.ae2.fluix_slab" | "advancement.create.belt_funnel_kiss.desc" | "item.ae2.terminal" | "block.create.small_deepslate_brick_slab" | "advancements.adventure.sleep_in_bed.title" | "subtitles.block.conduit.deactivate" | "create.menu.support" | "advancement.create.train.desc" | "botania.page.brewery7b" | "botania.entry.terraSword" | "tutorial.look.title" | "create.item_attributes.damaged.inverted" | "botania.page.brewery7a" | "block.create.birch_window" | "block.create.limestone" | "create.display_link.clear" | "block.minecraft.attached_pumpkin_stem" | "advMode.randomPlayer" | "block.create.purple_sail" | "item.minecraft.splash_potion.effect.invisibility" | "botania.page.brewery6a" | "block.minecraft.soul_torch" | "botania.page.brewery6b" | "key.keyboard.page.down" | "subtitles.entity.puffer_fish.death" | "botania.tagline.corporea" | "mco.selectServer.expiredSubscribe" | "item.create.brass_ingot" | "block.minecraft.red_concrete" | "ftbquests.reward.ftbquests.gamestage" | "botania.page.gourmaryllis3" | "debug.chunk_boundaries.off" | "create.gui.schedule.move_up" | "botania.page.gourmaryllis0" | "botania.page.gourmaryllis1" | "botania.page.gourmaryllis2" | "block.minecraft.cactus" | "gui.ae2.Items" | "create.ponder.cart_assembler_modes.header" | "chat.type.team.hover" | "block.create.large_cogwheel" | "waila.ae2.NetworkBooting" | "botania.page.corporeaFunnel0" | "botania.page.corporeaFunnel1" | "botania.page.corporeaFunnel2" | "create.ponder.hose_pulley_infinite.text_3" | "create.ponder.hose_pulley_infinite.text_2" | "key.keyboard.keypad.subtract" | "entity.botania.corporea_spark" | "item.minecraft.leather" | "block.minecraft.banner.botania_hoe.purple" | "create.schematicAndQuill.saved" | "multiplayer.disconnect.duplicate_login" | "createWorld.customize.custom.presets" | "advancement.create.steam_whistle" | "block.minecraft.banner.stripe_left.orange" | "advancement.create.steam_engine" | "merchant.level.4" | "merchant.level.5" | "merchant.level.2" | "merchant.level.3" | "merchant.level.1" | "commands.item.target.not_a_container" | "gui.ae2.ConfirmCraftNoCpu" | "item.ae2.red_lumen_paint_ball" | "advancement.create.encased_fan.desc" | "deathScreen.spectate" | "block.minecraft.birch_log" | "predicate.unknown" | "block.minecraft.waxed_oxidized_cut_copper_slab" | "advancements.adventure.whos_the_pillager_now.title" | "block.minecraft.diorite" | "fml.modloading.brokenfile" | "mco.minigame.world.changeButton" | "create.ponder.hose_pulley_infinite.text_1" | "options.fullscreen.current" | "item.minecraft.parrot_spawn_egg" | "stat.minecraft.junk_fished" | "ftbquests.file.loot.loot_crate_tables" | "subtitles.entity.skeleton.ambient" | "block.create.turntable" | "botania.page.pavement0" | "botania.page.pavement1" | "mco.upload.cancelled" | "entity.minecraft.tropical_fish.type.kob" | "block.minecraft.composter" | "gui.tooltips.ae2.Descending" | "ftbquests.task.ftbquests.emc" | "death.attack.onFire" | "block.botania.metamorphic_plains_stone_wall" | "entity.minecraft.squid" | "botania.page.autocraftingHalo0" | "botania.page.autocraftingHalo1" | "item.minecraft.lingering_potion.effect.strength" | "botania.tagline.dreadthorne" | "narration.slider.usage.focused" | "botania.tagline.obedienceStick" | "commands.scoreboard.players.reset.all.single" | "ftbquests.quest.dependency_requirement.tooltip" | "multiplayer.disconnect.banned_ip.expiration" | "block.minecraft.bubble_coral" | "achievement.ae2.PortableCell.desc" | "block.create.mechanical_harvester" | "gui.ae2.NumberLessThanMinValue" | "botania.subtitle.doit" | "subtitles.item.lodestone_compass.lock" | "biome.minecraft.jungle" | "item.minecraft.glow_ink_sac" | "ftblibrary.select_fluid.gui" | "botania.entry.felPumpkin" | "create.schematic.mirror" | "item.itemfilters.item_group.description" | "gui.ae2.SpatialAnchorAllLoaded" | "botania.tagline.gardenOfGlass" | "key.jei.nextSearch" | "block.botania.metamorphic_mountain_cobblestone" | "commands.forge.entity.list.none" | "block.minecraft.banner.square_bottom_right.light_blue" | "botania.entry.bellethorne" | "block.minecraft.banner.triangle_top.pink" | "block.minecraft.light_blue_shulker_box" | "block.minecraft.banner.botania_pickaxe.gray" | "create.ponder.funnel_compat.header" | "itemGroup.combat" | "block.botania.solegnolia.reference" | "block.minecraft.banner.botania_flower.orange" | "create.ponder.mechanical_piston.text_2" | "create.ponder.mechanical_piston.text_1" | "item.ae2.debug_meteorite_placer" | "create.gui.assembly.exception" | "gui.tooltips.ae2.SearchMode_RememberSearch" | "subtitles.entity.generic.explode" | "create.item_attributes.smeltable" | "multiplayer.disconnect.not_whitelisted" | "create.subtitle.controller_click" | "item.ae2.lime_smart_dense_cable" | "block.minecraft.chiseled_red_sandstone" | "botania.page.cosmeticBaubles21" | "botania.page.cosmeticBaubles20" | "botania.page.cosmeticBaubles23" | "botania.page.cosmeticBaubles22" | "debug.gamemodes.error" | "botania.page.cosmeticBaubles25" | "botania.page.cosmeticBaubles24" | "commands.worldborder.set.immediate" | "item.appbot.mana_p2p_tunnel" | "botania.page.cosmeticBaubles27" | "block.botania.corporea_funnel" | "botania.page.cosmeticBaubles26" | "botania.page.cosmeticBaubles29" | "botania.page.cosmeticBaubles28" | "botania.page.redString9" | "botania.page.redString8" | "botania.page.redString7" | "botania.page.redString6" | "botania.page.redString5" | "botania.page.redString4" | "botania.page.redString3" | "create.ponder.mechanical_piston.text_3" | "botania.page.redString2" | "effect.botania.allure" | "botania.page.redString1" | "advancement.create.cross_streams" | "botania.page.redString0" | "subtitles.entity.shulker.close" | "fml.modloading.failedtoloadmod" | "item.ae2.matter_ball" | "block.create.creative_crate.tooltip.condition1" | "botania.page.cosmeticBaubles30" | "botania.page.cosmeticBaubles32" | "commands.title.show.subtitle.single" | "botania.page.cosmeticBaubles31" | "block.minecraft.banner.botania_logo.magenta" | "botania.page.cosmeticBaubles34" | "botania.page.cosmeticBaubles33" | "create.recipe.item_application.any_axe" | "create.ponder.train_assembly.text_14" | "block.minecraft.banner.stripe_left.lime" | "block.minecraft.banner.triangle_bottom.brown" | "create.ponder.train_assembly.text_15" | "create.ponder.train_assembly.text_12" | "stat_type.minecraft.killed_by.none" | "create.ponder.train_assembly.text_13" | "create.ponder.train_assembly.text_10" | "create.ponder.train_assembly.text_11" | "item.minecraft.end_crystal" | "ftbquests.quest.min_width" | "advancement.botania:manaBlasterShoot" | "block.minecraft.lava" | "subtitles.entity.horse.eat" | "botania.page.pixieRing1" | "botania.page.pixieRing0" | "gui.ae2.Chest" | "block.minecraft.beetroots" | "block.create.metal_bracket.tooltip" | "ftbquests.reward_table.use_title" | "block.create.brass_tunnel" | "block.ae2.tiny_tnt" | "create.ponder.depot.text_3" | "commands.data.modify.expected_list" | "create.ponder.depot.text_2" | "create.tunnel.selection_mode.split" | "create.ponder.depot.text_4" | "advancement.create.burner" | "create.ponder.depot.text_1" | "botania.page.cosmeticBaubles10" | "block.minecraft.banner.triangles_bottom.gray" | "botania.page.cosmeticBaubles12" | "botania.page.cosmeticBaubles11" | "botania.page.cosmeticBaubles14" | "botania.page.cosmeticBaubles13" | "botania.page.cosmeticBaubles16" | "botania.page.cosmeticBaubles15" | "botania.page.cosmeticBaubles18" | "botania.page.cosmeticBaubles17" | "create.train_assembly.not_connected_in_order" | "botania.page.cosmeticBaubles19" | "block.minecraft.barrier" | "item.minecraft.leather_boots" | "mco.terms.sentence.2" | "item.ftbquests.custom_icon.tooltip" | "mco.terms.sentence.1" | "block.botania.orange_mystical_flower" | "stat.botania.tiny_potatoes_petted" | "options.framerateLimit.max" | "block.minecraft.banner.half_horizontal_bottom.red" | "botania.page.exchangeRod0" | "botania.page.exchangeRod1" | "botania.page.exchangeRod2" | "advancement.create.spout" | "botania.page.exchangeRod3" | "block.create.cut_granite_brick_slab" | "block.minecraft.banner.border.purple" | "item.minecraft.powder_snow_bucket" | "commands.worldborder.set.failed.nochange" | "wandBeam.static" | "block.minecraft.banner.stripe_left.blue" | "block.botania.floating_agricarnation_chibi" | "key.jei.toggleWildcardHideIngredient" | "curios.identifier.curio" | "block.create.dark_oak_window" | "ae2.rei_jei_integration.ctrl_click_to_craft" | "block.minecraft.banner.straight_cross.magenta" | "item.tiab.time_in_a_bottle.tooltip.stored_time" | "create.ponder.gantry_cascaded.header" | "subtitles.block.water.ambient" | "entity.minecraft.dragon_fireball" | "block.minecraft.red_terracotta" | "botania.tagline.autocraftingHalo" | "jei.tooltip.cheat.mode.how.to.disable.hover.config.button.hotkey" | "block.minecraft.polished_blackstone_button" | "block.create.ochrum" | "string.naturescompass.rainfall" | "block.minecraft.banner.creeper.yellow" | "createWorld.customize.custom.useVillages" | "item.ae2.black_glass_cable" | "subtitles.entity.piglin.hurt" | "item.minecraft.raw_gold" | "entity.minecraft.axolotl" | "string.naturescompass.low" | "block.minecraft.dark_oak_fence" | "botania.entry.platform" | "multiplayer.disconnect.banned" | "commands.fill.toobig" | "item.minecraft.potion.effect.harming" | "item.minecraft.cookie" | "ftbquests.quests" | "create.symmetry.mirror.plane" | "create.ponder.display_link.text_2" | "create.ponder.display_link.text_1" | "createWorld.customize.custom.biomeSize" | "create.ponder.display_link.text_4" | "item.minecraft.leather_leggings" | "create.ponder.display_link.text_3" | "create.schematic.mirror.frontBack" | "botaniamisc.command.skyblock.spawn.success" | "ftbquests.reward.autoclaim.invisible" | "create.ponder.chute.header" | "mco.configure.world.buttons.resetworld" | "block.minecraft.sunflower" | "advancement.create.andesite_alloy.desc" | "create.ponder.smart_pipe.header" | "block.minecraft.banner.square_bottom_right.black" | "block.minecraft.redstone_wire" | "create.ponder.gantry_carriage.text_2" | "block.botania.metamorphic_forest_cobblestone_wall" | "create.ponder.gantry_carriage.text_1" | "block.minecraft.banner.triangles_bottom.black" | "item.ae2.black_covered_dense_cable" | "botania.entry.spectrolus" | "block.botania.spectrolus" | "menu.returnToMenu" | "advancements.husbandry.safely_harvest_honey.description" | "item.ae2.purple_lumen_paint_ball" | "advancement.botania:alfPortalBread.desc" | "gui.tooltips.ae2.FZPercent_99" | "gui.tooltips.ae2.SubstitutionsOff" | "block.minecraft.banner.botania_spark_isolated.orange" | "book.signButton" | "subtitles.entity.zombie.hurt" | "subtitles.block.respawn_anchor.set_spawn" | "create.ponder.display_link.text_6" | "create.ponder.display_link.text_5" | "create.ponder.display_link.text_8" | "create.ponder.display_link.text_7" | "create.ponder.rope_pulley_modes.text_2" | "create.ponder.rope_pulley_modes.text_1" | "translation.test.invalid" | "botania.page.gaiaRitualHardmode2" | "botania.page.gaiaRitualHardmode1" | "item.minecraft.endermite_spawn_egg" | "botania.page.gaiaRitualHardmode0" | "botania.tagline.lavaPendant" | "botania.tagline.openCrate" | "subtitles.entity.bee.loop_aggressive" | "botania.tagline.fIntro" | "createWorld.customize.custom.preset.caveDelight" | "gui.ae2.Security" | "gamerule.category.mobs" | "advancement.create.track_signal.desc" | "createWorld.preparing" | "key.sneak" | "block.create.small_andesite_brick_slab" | "block.create.cut_ochrum_wall" | "options.modelPart.left_sleeve" | "create.block.deployer.damage_source_name" | "subtitles.ui.cartography_table.take_result" | "gameMode.hardcore" | "block.ae2.sky_stone_slab" | "advancement.create.steam_whistle.desc" | "item.botania.elementium_leggings" | "key.jei.nextPage" | "gui.ae2.NumberGreaterThanMaxValue" | "item.create.wand_of_symmetry.tooltip.summary" | "selectWorld.backupJoinSkipButton" | "narrator.button.difficulty_lock" | "item.minecraft.iron_boots" | "block.minecraft.mossy_stone_brick_wall" | "key.jei.recipeBack" | "block.create.blue_toolbox" | "ftbquests.gui.open_in_guide" | "block.create.small_calcite_brick_stairs" | "block.botania.bubbell" | "block.minecraft.banner.small_stripes.white" | "block.minecraft.white_terracotta" | "block.create.red_nixie_tube" | "block.minecraft.potted_oxeye_daisy" | "achievement.ae2.Fluix.desc" | "patchouli.gui.lexicon.button.visualize.info" | "item.create.crushed_iron_ore" | "create.backtank.low" | "mco.configure.world.backup" | "block.botania.vinculotus.reference" | "itemGroup.hotbar" | "block.minecraft.banner.skull.red" | "block.minecraft.banner.gradient.cyan" | "advancement.botania:gaiaGuardianHardmode" | "block.create.copper_casing" | "commands.worldborder.center.failed" | "botania.challenge.fullCropFarm" | "create.tooltip.speedRequirement.slow" | "botaniamisc.manaUsage" | "subtitles.entity.vex.death" | "spectatorMenu.teleport.prompt" | "ftbquests.task.ftbquests.kill" | "jei.chat.error.no.cheat.permission.op" | "block.botania.red_quartz_slab" | "commands.ftbquests.import_rewards_from_chest.invalid_id" | "block.minecraft.purple_concrete_powder" | "botania.tagline.pollidisiac" | "block.minecraft.blue_shulker_box" | "block.create.polished_cut_tuff_wall" | "create.gui.attribute_filter.add_inverted_attribute" | "item.minecraft.potion.effect.empty" | "create.ponder.powered_toggle_latch.text_1" | "item.botania.lens_time.short" | "death.fell.finish.item" | "create.ponder.powered_toggle_latch.text_2" | "create.ponder.powered_toggle_latch.text_3" | "create.ponder.powered_toggle_latch.text_4" | "block.create.polished_cut_scoria" | "block.minecraft.banner.diagonal_up_right.green" | "block.botania.pollidisiac" | "menu.shareToLan" | "create.schematic.tool.move.description.3" | "create.schematic.tool.move.description.2" | "create.schematic.tool.move.description.1" | "create.schematic.tool.move.description.0" | "botania.tagline.wand" | "argument.entity.options.dy.description" | "block.minecraft.banner.stripe_middle.light_gray" | "block.minecraft.smooth_red_sandstone" | "commands.recipe.take.failed" | "item.ae2.pink_lumen_paint_ball" | "botania.flowerType.misc" | "biome.minecraft.frozen_ocean" | "create.schedule.condition.threshold.train_holds" | "jei.tooltip.error.crash" | "subtitles.entity.player.attack.knockback" | "config.jei.advanced.maxRecipeGuiHeight.comment" | "enchantment.minecraft.fortune" | "gui.tooltips.ae2.FZPercent_25" | "item.botania.dragonstone" | "gamerule.disableRaids" | "ftbquests.gui.change_progress" | "structure_block.detect_size" | "enchantment.minecraft.channeling" | "botania.page.elvenLenses8" | "botania.page.elvenLenses7" | "subtitles.entity.endermite.ambient" | "botania.page.elvenLenses9" | "botania.page.elvenLenses4" | "botania.page.elvenLenses3" | "block.minecraft.banner.stripe_left.magenta" | "botania.page.elvenLenses6" | "botania.page.elvenLenses5" | "botania.page.elvenLenses0" | "createWorld.customize.flat.layer.bottom" | "botania.page.elvenLenses2" | "botania.page.elvenLenses1" | "tutorial.craft_planks.title" | "gui.tooltips.ae2.FZPercent_75" | "block.botania.red_string_dispenser" | "block.botania.light_blue_double_flower" | "botania.tagline.complexBrews" | "block.create.small_scoria_brick_wall" | "create.gui.terrainzapper.patternSection" | "advancement.create.arm_many_targets.desc" | "gui.accept" | "block.minecraft.purple_wool" | "options.chat.delay" | "block.create.copper_shingle_stairs" | "item.minecraft.potion.effect.thick" | "create.mechanical_arm.selection_mode.round_robin" | "create.ponder.tag.creative" | "block.botania.corporea_index" | "item.minecraft.tropical_fish_bucket" | "create.display_source.player_deaths" | "block.ae2.chiseled_quartz_wall" | "create.gui.terrainzapper.searchDiagonal" | "argument.entity.options.limit.toosmall" | "block.create.orange_valve_handle" | "create.schedule.condition_type" | "create.ponder.belt_casing.text_2" | "block.create.magenta_nixie_tube" | "create.ponder.belt_casing.text_1" | "item.botania.podzol_seeds" | "block.minecraft.dirt" | "subtitles.item.shield.block" | "advancements.nether.charge_respawn_anchor.description" | "botania.entry.bloodPendant" | "create.ponder.index_title" | "gui.tooltips.ae2.FZPercent_50" | "advancement.create.display_board_0.desc" | "commands.title.show.title.single" | "ftbteams.privacy_mode.private" | "block.botania.metamorphic_desert_bricks_slab" | "item.botania.cosmetic_anaglyph_glasses" | "fml.button.continue.launch" | "patchouli.gui.lexicon.objective" | "block.minecraft.banner.creeper.brown" | "block.create.birch_window_pane" | "block.create.granite_pillar" | "block.minecraft.yellow_candle" | "subtitles.entity.parrot.imitate.ghast" | "ftbquests.reward.ftbquests.advancement.criterion.tooltip" | "advancement.botania:infiniteFruit.desc" | "create.schedule.condition.delay.status" | "debug.copy_location.help" | "block.botania.gray_mushroom" | "item.ae2.charged_staff" | "entity.create.potato_projectile" | "block.create.cut_asurine_brick_stairs" | "subtitles.entity.villager.work_butcher" | "block.create.cuckoo_clock.tooltip.summary" | "recipe.toast.description" | "block.minecraft.soul_campfire" | "block.minecraft.nether_brick_slab" | "create.ponder.cart_assembler_rails.text_3" | "create.ponder.cart_assembler_rails.text_4" | "create.ponder.cart_assembler_rails.text_1" | "item.ae2.silicon" | "create.ponder.cart_assembler_rails.text_2" | "createWorld.customize.flat.tile" | "patchouli.gui.lexicon.history" | "block.minecraft.granite_wall" | "block.create.weathered_copper_shingle_slab" | "gui.ae2.security.craft.name" | "multiplayer.status.and_more" | "botania.tagline.marimorphosis" | "config.jei.interface.bookmarkOverlayEnabled.comment" | "create.gui.schematicannon.option.replaceWithSolid" | "commands.jfr.started" | "container.shulkerBox" | "botania.entry.flowers" | "advancements.end.levitate.title" | "block.minecraft.crimson_stairs" | "ae2.rei_jei_integration.p2p_tunnel_attunement" | "createWorld.customize.custom.lavaLakeChance" | "block.minecraft.cobbled_deepslate_stairs" | "ftbquests.task.ftbquests.location" | "block.botania.gray_double_flower" | "emi.category.botania.botanical_brewery" | "item.ae2.printed_silicon" | "config.jei.mode.cheatItemsEnabled.comment" | "botania.challenge.potionBrewer" | "botania.tagline.magnetRing" | "block.minecraft.oak_stairs" | "options.narrator.notavailable" | "subtitles.entity.wandering_trader.trade" | "argument.entity.selector.allEntities" | "jei.tooltip.recipe.id" | "gui.ae2.PriorityExtractionHint" | "create.ponder.mechanical_press.text_1" | "create.ponder.mechanical_press.text_2" | "create.ponder.mechanical_press.text_3" | "create.ponder.mechanical_press.text_4" | "botania.page.bloodPendant2" | "botania.page.bloodPendant1" | "botania.page.bloodPendant0" | "block.minecraft.polished_blackstone_brick_stairs" | "item.ae2.light_blue_covered_dense_cable" | "advancements.husbandry.balanced_diet.title" | "botania.entry.forestEye" | "botania.entry.travelBelt" | "block.create.horizontal_framed_glass" | "item.botania.orange_petal" | "jei.tooltip.recipe.by" | "block.minecraft.banner.stripe_top.gray" | "createWorld.customize.buffet.biome" | "block.create.green_seat" | "options.simulationDistance" | "block.minecraft.banner.circle.light_gray" | "item.ae2.certus_crystal_seed" | "block.minecraft.dead_brain_coral_wall_fan" | "death.attack.arrow.item" | "botania.tagline.redString" | "block.minecraft.infested_cobblestone" | "block.minecraft.banner.botania_tiny_potato.purple" | "gui.tooltips.ae2.Read" | "block.minecraft.banner.botania_pickaxe.yellow" | "advancements.husbandry.plant_seed.description" | "item.create.linked_controller" | "commands.save.disabled" | "block.minecraft.banner.stripe_center.black" | "botania.tagline.apothecary" | "create.display_source.kinetic_stress.remaining" | "effect.minecraft.dolphins_grace" | "mco.minigame.world.info.line1" | "gameMode.creative" | "mco.minigame.world.info.line2" | "advancements.adventure.trade.description" | "block.minecraft.banner.stripe_left.black" | "block.create.purple_nixie_tube" | "item.minecraft.flint" | "block.minecraft.polished_deepslate" | "subtitles.entity.parrot.imitate.elder_guardian" | "create.ponder.valve_pipe.text_3" | "create.ponder.valve_pipe.text_4" | "key.keyboard.right" | "addServer.resourcePack.disabled" | "gui.tooltips.ae2.MiddleClick" | "advancement.create.long_bend.desc" | "block.ftbquests.screen.indestructible" | "advancements.nether.explore_nether.title" | "create.subtitle.mixing" | "create.ponder.valve_pipe.text_1" | "item.botania.elementium_shears" | "create.ponder.valve_pipe.text_2" | "botania.entry.relics" | "block.minecraft.banner.half_vertical.blue" | "subtitles.block.lava.extinguish" | "block.ae2.deepslate_quartz_ore" | "block.minecraft.banner.square_bottom_right.orange" | "options.chat.links.prompt" | "item.botania.cosmetic_black_tie" | "botania.entry.gaiaRitual" | "block.create.fluid_pipe" | "create.ponder.display_board.text_4" | "create.ponder.display_board.text_3" | "block.minecraft.banner.half_horizontal.orange" | "create.ponder.display_board.text_6" | "create.ponder.display_board.text_5" | "death.attack.dryout" | "botania.page.knockbackBelt0" | "biome.minecraft.sparse_jungle" | "ftbquests.quest.shape.gear" | "botania.page.knockbackBelt1" | "theoneprobe.ae2.crafting" | "ftbquests.task.ftbquests.stat.stat" | "block.botania.shimmerrock" | "argument.entity.selector.nearestPlayer" | "create.ponder.hand_crank.header" | "matrixMode.enabled" | "botania.challenge.apothecaryRefill" | "structure_block.structure_name" | "create.ponder.display_board.text_2" | "create.ponder.display_board.text_1" | "gui.ae2.ETAFormat" | "lootr.advancements.1chest.description" | "block.minecraft.brown_shulker_box" | "item.ae2.lime_glass_cable" | "gui.tooltips.ae2.ReportInaccessibleFluids" | "subtitles.entity.player.hurt" | "block.botania.metamorphic_swamp_stone_slab" | "subtitles.ui.loom.take_result" | "gui.socialInteractions.server_label.single" | "commands.stopsound.success.sourceless.sound" | "advMode.nearestPlayer" | "block.botania.piston_relay" | "advancements.nether.obtain_blaze_rod.title" | "advancements.story.root.title" | "stat.minecraft.traded_with_villager" | "block.create.haunted_bell.tooltip" | "mco.download.done" | "create.generic.width" | "block.botania.bubbell_chibi" | "subtitles.entity.horse.jump" | "options.darkMojangStudiosBackgroundColor.tooltip" | "block.minecraft.banner.stripe_right.purple" | "block.minecraft.banner.half_vertical.lime" | "ftbquests.chapter.image.x" | "block.minecraft.banner.piglin.yellow" | "argument.entity.options.scores.description" | "ftbquests.chapter.image.y" | "commands.forge.tags.element" | "debug.help.help" | "item.ae2.network_tool" | "block.minecraft.magenta_candle_cake" | "block.minecraft.tube_coral_fan" | "block.botania.tiny_planet_block" | "subtitles.entity.ghast.shoot" | "item.create.experience_nugget.tooltip.condition1" | "create.ponder.gearshift.header" | "block.minecraft.banner.botania_spark_dispersive.silver" | "create.gui.terrainzapper.searchFuzzy" | "item.create.chocolate_bucket" | "item.create.super_glue" | "botania.page.shinyFlowers4" | "botania.page.shinyFlowers5" | "botania.page.shinyFlowers2" | "botania.page.shinyFlowers3" | "botania.page.shinyFlowers0" | "botania.page.shinyFlowers1" | "block.botania.metamorphic_desert_cobblestone_stairs" | "achievement.ae2.Networking2.desc" | "block.minecraft.potted_azure_bluet" | "block.minecraft.banner.small_stripes.cyan" | "advancement.create.mechanical_press" | "create.schematic.position" | "disconnect.loginFailedInfo.invalidSession" | "mco.upload.close.failure" | "curios.modifiers.head" | "item.botania.gray_petal" | "subtitles.block.anvil.destroy" | "enderstorage.serverop" | "color.minecraft.purple" | "block.create.andesite_casing" | "options.touchscreen" | "block.botania.jiyuulia.reference" | "block.botania.lime_shiny_flower" | "item.minecraft.salmon_spawn_egg" | "block.botania.apothecary_mountain" | "stat.minecraft.raid_win" | "create.display_source.item_throughput.interval.hour" | "botania.tagline.dispenserTweaks" | "botaniamisc.challengeInfo" | "death.attack.stalagmite.player" | "block.minecraft.banner.botania_spark_dispersive.cyan" | "patchouli.gui.lexicon.editor" | "ftbquests.quest.shape.circle" | "tag.botania.mana_diamond_gems" | "block.minecraft.banner.mojang.green" | "block.create.wooden_bracket" | "block.create.asurine_pillar" | "block.minecraft.bedrock" | "block.minecraft.banner.botania_flower.cyan" | "item.botania.aura_ring_greater" | "create.schematics.synchronizing" | "block.minecraft.brown_banner" | "advancements.nether.find_bastion.description" | "commands.forge.entity.list.invalidworld" | "item.botania.pattern_2_2" | "item.botania.pattern_2_1" | "gui.tooltips.ae2.ShowItemsOnly" | "item.botania.pattern_2_3" | "block.minecraft.dead_bubble_coral_wall_fan" | "block.minecraft.banner.stripe_left.light_blue" | "death.attack.cramming.player" | "create.linked_controller.key_bound" | "block.minecraft.banner.triangles_bottom.orange" | "options.clouds.fancy" | "advancements.end.respawn_dragon.title" | "botania.tagline.fireRod" | "stat.minecraft.total_world_time" | "item.minecraft.warped_fungus_on_a_stick" | "item.minecraft.music_disc_cat.desc" | "waila.ae2.ErrorNestedP2PTunnel" | "block.botania.avatar" | "death.attack.thorns" | "key.back" | "block.minecraft.banner.skull.brown" | "item.minecraft.piglin_banner_pattern" | "block.minecraft.banner.diagonal_up_left.light_gray" | "block.minecraft.banner.stripe_downleft.lime" | "commands.datapack.list.enabled.none" | "block.minecraft.dead_tube_coral" | "advancements.husbandry.wax_off.description" | "block.minecraft.banner.half_horizontal_bottom.cyan" | "commands.execute.conditional.fail_count" | "subtitles.entity.axolotl.hurt" | "entity.create.contraption" | "block.minecraft.small_dripleaf" | "botania.nei.orechidIgnem" | "block.create.small_asurine_brick_slab" | "block.minecraft.banner.curly_border.green" | "gui.ae2.ExternalStorage" | "item.botania.manaweave_chestplate" | "block.botania.black_shiny_flower" | "botania.entry.miningRing" | "block.minecraft.banner.botania_spark_isolated.green" | "advMode.mode.conditional" | "block.minecraft.blue_candle_cake" | "create.generic.timeUnit" | "item.botania.lens_phantom.short" | "botaniamisc.lockedStopped" | "item.ae2.yellow_smart_cable" | "item.minecraft.music_disc_wait" | "block.minecraft.light_blue_candle_cake" | "botania.entry.hopperhock" | "botania.tagline.blackLotus" | "achievement.ae2.Root" | "stat.minecraft.use_cauldron" | "create.gui.attribute_filter.deny_list.description" | "create.ponder.slow_text" | "item.minecraft.potato" | "block.botania.metamorphic_fungal_cobblestone_wall" | "botania.entry.enderDagger" | "block.create.flywheel.tooltip.behaviour1" | "block.ae2.smooth_sky_stone_wall" | "item.create.propeller" | "key.botania_corporea_request" | "subtitles.block.beacon.ambient" | "item.ae2.lime_covered_dense_cable" | "block.create.hand_crank" | "item.create.refined_radiance.tooltip.condition1" | "block.minecraft.fire_coral_block" | "item.minecraft.shield.green" | "block.minecraft.small_amethyst_bud" | "argument.entity.options.unterminated" | "mco.configure.world.description" | "block.botania.metamorphic_desert_stone_slab" | "block.minecraft.nether_sprouts" | "block.minecraft.creeper_wall_head" | "forge.swimSpeed" | "debug.reload_resourcepacks.help" | "commands.ftbquests.export_rewards_to_chest.text" | "optimizeWorld.info.total" | "entity.minecraft.giant" | "block.minecraft.banner.triangle_top.light_gray" | "block.minecraft.banner.flower.light_gray" | "botania.brew.bloodthirst" | "block.minecraft.green_concrete" | "block.minecraft.potted_brown_mushroom" | "menu.convertingLevel" | "advancement.create.water_supply" | "soundCategory.hostile" | "botania.page.redstoneSpreader0" | "block.minecraft.orange_concrete_powder" | "block.create.track_station" | "mco.configure.world.subscription.start" | "block.create.polished_cut_asurine_wall" | "block.botania.metamorphic_forest_bricks_stairs" | "create.schematicannon.status.noGunpowder" | "item.ae2.orange_lumen_paint_ball" | "subtitles.entity.puffer_fish.blow_out" | "create.schedule.instruction.throttle" | "item.minecraft.wither_skeleton_spawn_egg" | "ftbquests.gui.change_progress.reset_deps" | "subtitles.block.tripwire.click" | "commands.scoreboard.players.add.success.multiple" | "item.minecraft.quartz" | "item.modifiers.mainhand" | "options.graphics.fancy" | "botania.entry.azulejo" | "create.recipe.fan_smoking" | "create.schematicannon.status.schematicInvalid" | "subtitles.entity.parrot.eats" | "staticFloaters.enabled" | "create.gui.terrainzapper.brush.sphere" | "fml.menu.mods.info.changelogheader" | "block.minecraft.banner.stripe_center.red" | "subtitles.entity.parrot.imitate.evoker" | "sidebar_button.ftbquests.quests" | "botania.tagline.temperanceStone" | "block.botania.magenta_mystical_flower" | "block.minecraft.banner.botania_shovel.purple" | "item.minecraft.slime_spawn_egg" | "botania.page.relics0" | "block.botania.blaze_quartz_slab" | "botania.page.redstoneSpreader1" | "botania.tagline.tornadoRod" | "create.ponder.steam_engine.text_10" | "create.ponder.steam_engine.text_11" | "botaniamisc.hasCosmetic" | "create.ponder.steam_engine.text_12" | "entity.minecraft.villager.farmer" | "block.botania.mossy_livingwood_planks" | "create.ponder.steam_engine.text_13" | "gui.tooltips.ae2.Off" | "attribute.modifier.plus.0" | "item.botania.horn_grass" | "attribute.modifier.plus.2" | "attribute.modifier.plus.1" | "block.minecraft.banner.triangle_top.green" | "botania.entry.dreadthorne" | "block.minecraft.brown_mushroom" | "block.minecraft.lodestone" | "tag.botania.burst_viewers" | "fallenKanade.enabled" | "item.ae2.cyan_lumen_paint_ball" | "gui.tooltips.ae2.DoesntDespawn" | "commands.scoreboard.players.reset.all.multiple" | "block.botania.cyan_mystical_flower" | "entity.minecraft.furnace_minecart" | "attribute.name.generic.flying_speed" | "botania.armorset.will_verac.shortDesc" | "patchouli.gui.lexicon.view" | "block.minecraft.soul_fire" | "death.fell.accident.generic" | "mco.configure.world.delete.question.line1" | "selectWorld.conversion" | "gui.advancements" | "create.ponder.fluid_tank_sizes.text_4" | "mco.configure.world.delete.question.line2" | "create.ponder.fluid_tank_sizes.text_1" | "block.botania.metamorphic_swamp_bricks_wall" | "create.ponder.fluid_tank_sizes.text_3" | "create.ponder.fluid_tank_sizes.text_2" | "commands.setworldspawn.success" | "botania.page.gravityRod2" | "commands.pardon.success" | "botania.page.gravityRod1" | "item.minecraft.music_disc_ward" | "botania.page.gravityRod0" | "menu.savingChunks" | "block.minecraft.banner.flower.brown" | "stat.mobsButton" | "advancement.create.potato_cannon.desc" | "create.ponder.mechanical_harvester.text_1" | "create.ponder.mechanical_harvester.text_2" | "block.minecraft.banner.stripe_center.brown" | "block.minecraft.red_candle_cake" | "item.botania.smelt_rod" | "block.minecraft.gray_concrete" | "mco.minigame.world.starting.screen.title" | "subtitles.entity.drowned.death" | "block.minecraft.black_stained_glass" | "pack.folderInfo" | "block.minecraft.banner.stripe_downleft.blue" | "block.minecraft.red_nether_bricks" | "create.ponder.brass_tunnel_modes.header" | "botania.page.corporeaCrystalCube0" | "argument.entity.options.gamemode.description" | "botania.page.corporeaCrystalCube4" | "botania.page.corporeaCrystalCube3" | "botania.page.corporeaCrystalCube2" | "block.minecraft.banner.circle.purple" | "botaniamisc.toolRank" | "botania.page.corporeaCrystalCube1" | "botania.subtitle.enderAirThrow" | "block.minecraft.emerald_block" | "item.minecraft.pufferfish" | "create.ponder.shared.rpm8" | "botania.page.enderHand0a" | "botania.subtitle.equipManasteel" | "block.create.mechanical_plough" | "botania.challenge.reedFarm.desc" | "enchantment.minecraft.feather_falling" | "item.botania.manaweave_helmet" | "lootr.message.decay_start" | "botania.page.rainbowRod6" | "botania.page.rainbowRod7" | "botania.page.rainbowRod2" | "advancements.adventure.kill_a_mob.description" | "botania.page.rainbowRod3" | "item.botania.corporea_spark_master" | "botania.page.rainbowRod4" | "botania.page.rainbowRod5" | "botania.page.rainbowRod0" | "botania.page.rainbowRod1" | "create.gui.terrainzapper.tool.flatten" | "botaniamisc.composite_lens" | "create.ponder.tag.train_related.description" | "block.minecraft.lime_stained_glass_pane" | "block.create.mechanical_pump" | "commands.teleport.success.location.multiple" | "create.tooltip.speedRequirement.medium" | "create.track_target.occupied" | "options.chat.height.focused" | "block.create.layered_granite" | "item.minecraft.written_book" | "block.minecraft.banner.botania_pickaxe.red" | "create.schematicannon.status.schematicNotPlaced" | "key.jei.toggleBookmarkOverlay" | "item.ae2.fluix_glass_cable" | "enchantment.minecraft.mending" | "commands.curios.lock.success" | "item.minecraft.beetroot" | "block.botania.green_pavement" | "block.minecraft.banner.botania_hoe.magenta" | "ftbquests.gui.add_dependencies" | "block.botania.metamorphic_fungal_bricks" | "ftbquests.reward.autoclaim.enabled" | "gui.tooltips.ae2.RightClick" | "botania.page.preventingDecay0" | "botania.armorset.will_dharok.shortDesc" | "stat.minecraft.damage_taken" | "block.minecraft.banner.square_bottom_right.red" | "createWorld.customize.custom.biomeDepthOffset" | "block.botania.floating_manastar" | "subtitles.entity.evoker.ambient" | "item.minecraft.music_disc_blocks" | "advancement.create.crafter_lazy_000.desc" | "createWorld.customize.custom.upperLimitScale" | "botania.tagline.odinRing" | "item.minecraft.lava_bucket" | "block.minecraft.oak_log" | "subtitles.entity.glow_squid.ambient" | "dataPack.title" | "commands.scoreboard.players.reset.specific.single" | "item.ae2.entropy_manipulator" | "item.ae2.certus_quartz_hoe" | "item.botania.infinite_fruit" | "createWorld.customize.custom.waterLakeChance" | "block.minecraft.potted_oak_sapling" | "ftbquests.task.ftbquests.gamestage" | "ftbquests.reward.ftbquests.item" | "item.durability" | "botania.entry.lavaPendant" | "item.minecraft.command_block_minecart" | "botania.tagline.pavement" | "block.minecraft.honey_block" | "botania.armorset.manaweave.name" | "jei.key.combo.command" | "multiplayer.disconnect.invalid_player_data" | "subtitles.entity.piglin.converted_to_zombified" | "block.minecraft.lime_terracotta" | "item.minecraft.shield" | "block.botania.metamorphic_mesa_bricks_stairs" | "realms.missing.snapshot.error.text" | "block.minecraft.banner.botania_tiny_potato.cyan" | "botania.brew.water_breathing" | "block.ftbquests.screen.skin" | "create.ponder.display_link_redstone.text_1" | "create.ponder.display_link_redstone.text_2" | "create.ponder.display_link_redstone.text_3" | "mco.configure.world.slot.tooltip.active" | "block.minecraft.repeating_command_block" | "botania.tagline.flowerShrinking" | "block.ftbquests.barrier.object" | "arguments.block.tag.unknown" | "botania.tagline.goddessCharm" | "stat.ae2.items_inserted" | "key.jei.nextCategory" | "commands.worldborder.set.grow" | "block.minecraft.peony" | "block.minecraft.banner.triangles_bottom.pink" | "item.minecraft.mojang_banner_pattern" | "commands.recipe.give.success.multiple" | "botania.subtitle.equipManaweave" | "block.create.small_tuff_brick_slab" | "item.create.minecart_coupling.tooltip.summary" | "block.create.layered_scoria" | "block.botania.metamorphic_fungal_cobblestone" | "item.botania.elementium_chestplate" | "botania.entry.vineBall" | "create.display_source.fill_level" | "block.create.small_tuff_brick_stairs" | "item.botania.water_rod" | "debugInfo.enabled" | "block.botania.pure_daisy" | "subtitles.entity.potion.splash" | "botania.page.itemFinder0" | "botania.page.itemFinder1" | "botania.page.itemFinder2" | "create.potato_cannon.ammo.attack_damage" | "botania.tagline.manastar" | "botania.entry.fIntro" | "selectWorld.edit.backup" | "block.botania.lavender_quartz" | "title.multiplayer.other" | "subtitles.entity.hoglin.attack" | "achievement.ae2.CraftingTerminal" | "item.minecraft.cocoa_beans" | "block.ftbquests.detector.player.height" | "block.create.small_crimsite_bricks" | "advancement.create.windmill_maxed" | "theoneprobe.ae2.stored_energy" | "item.create.copper_backtank.tooltip.condition2" | "item.ae2.fluid_p2p_tunnel" | "block.minecraft.prismarine_stairs" | "item.create.copper_backtank.tooltip.condition1" | "botania.tagline.platform" | "commands.worldborder.damage.amount.failed" | "create.ponder.weighted_ejector.header" | "translation.test.invalid2" | "block.minecraft.banner.half_horizontal_bottom.orange" | "block.minecraft.banner.half_vertical.yellow" | "block.botania.black_pavement_stairs" | "item.botania.black_hole_talisman" | "options.renderDistance" | "death.attack.indirectMagic" | "chat.ae2.MaxUpgradesOfTypeInstalled" | "item.ae2.speed_card" | "string.naturescompass.cold" | "block.minecraft.banner.piglin.gray" | "block.create.powered_shaft" | "chat.ae2.OutOfRange" | "item.minecraft.netherite_ingot" | "attribute.name.generic.attack_damage" | "mco.configure.world.name" | "botania.tagline.rfGenerator" | "block.botania.jiyuulia_chibi" | "block.botania.floating_bergamute" | "create.ponder.mechanical_bearing.text_2" | "block.ae2.energy_acceptor" | "create.ponder.mechanical_bearing.text_1" | "block.minecraft.banner.triangle_top.white" | "multiplayer.status.ping" | "block.minecraft.jungle_fence_gate" | "item.ae2.portable_item_cell_64k" | "gamerule.doFireTick" | "chat.ae2.SavedSettings" | "gui.toMenu" | "block.create.sail_frame" | "block.minecraft.banner.botania_sword.lime" | "block.minecraft.smooth_sandstone" | "create.schedule.condition.threshold.greater" | "create.schedule.condition.threshold.x_units_of_item" | "patchouli.gui.lexicon.shapeless" | "debug.crash.warning" | "block.minecraft.jungle_wood" | "advancements.adventure.spyglass_at_dragon.description" | "botania.page.starfield0" | "botania.page.starfield1" | "ftbquests.chapter" | "entity.minecraft.wither" | "botania.challenge.pureDaisy.desc" | "botania.page.elfGear0" | "string.naturescompass.none" | "container.blast_furnace" | "enchantment.minecraft.respiration" | "botania.page.elfGear9" | "botania.page.elfGear6" | "death.attack.explosion.player" | "botania.page.elfGear5" | "botania.page.elfGear8" | "botania.page.elfGear7" | "botania.page.elfGear2" | "botania.page.elfGear1" | "botania.page.elfGear4" | "botania.page.elfGear3" | "create.tooltip.brass_tunnel.contains" | "options.fullscreen" | "ftbteams.privacy_mode.public" | "block.minecraft.banner.botania_tiny_potato.magenta" | "death.attack.hotFloor" | "team.notFound" | "advancement.create.pulley_maxed.desc" | "selectWorld.enterName" | "block.create.cut_scoria" | "debug.advanced_tooltips.help" | "subtitles.entity.tropical_fish.hurt" | "block.minecraft.jigsaw" | "ftbquests.quest" | "commands.forge.setdim.invalid.nochange" | "subtitles.entity.blaze.death" | "gui.socialInteractions.empty_hidden" | "options.graphics.warning.vendor" | "commands.advancement.grant.criterion.to.many.failure" | "block.minecraft.banner.botania_sapling.brown" | "item.create.extendo_grip" | "mco.configure.world.invites.ops.tooltip" | "item.botania.pattern_3_1" | "block.minecraft.banner.botania_sword.blue" | "block.minecraft.fire_coral_fan" | "item.botania.pattern_3_2" | "subtitles.entity.dolphin.attack" | "block.minecraft.banner.botania_fish.yellow" | "block.minecraft.acacia_door" | "item.minecraft.shield.orange" | "item.patchouli.guide_book.undefined" | "botania.subtitle.worldSeedTeleport" | "block.minecraft.blue_terracotta" | "block.minecraft.soul_soil" | "create.ponder.blaze_burner.text_2" | "subtitles.entity.villager.work_leatherworker" | "create.ponder.blaze_burner.text_1" | "create.gui.gauge.info_header" | "create.ponder.blaze_burner.text_4" | "create.ponder.blaze_burner.text_3" | "create.ponder.train_assembly.text_1" | "create.ponder.train_assembly.text_2" | "botaniamisc.shiftinfo" | "create.ponder.train_assembly.text_7" | "create.ponder.train_assembly.text_8" | "create.ponder.train_assembly.text_9" | "create.tooltip.chute.fans_push_up" | "create.ponder.train_assembly.text_3" | "create.ponder.train_assembly.text_4" | "create.ponder.train_assembly.text_5" | "create.ponder.train_assembly.text_6" | "botania.subtitle.bifrostRod" | "block.minecraft.banner.curly_border.white" | "entity.minecraft.tropical_fish.type.clayfish" | "block.minecraft.banner.stripe_right.light_gray" | "subtitles.block.portal.trigger" | "key.keyboard.left.control" | "block.minecraft.banner.stripe_left.yellow" | "commands.datapack.disable.failed" | "block.minecraft.oxidized_cut_copper_stairs" | "block.minecraft.wither_skeleton_skull" | "item.minecraft.raw_copper" | "death.attack.sting" | "block.botania.blue_double_flower" | "item.minecraft.silverfish_spawn_egg" | "item.botania.cobble_rod" | "block.create.mechanical_piston_head" | "optimizeWorld.stage.failed" | "advancements.adventure.walk_on_powder_snow_with_leather_boots.description" | "ftbquests.reward.ftbquests.npc_mail.items" | "botania.entry.auraRing" | "stat.minecraft.inspect_dispenser" | "botania.page.solegnolia1" | "botania.page.solegnolia0" | "item.ae2.debug_card" | "particle.notFound" | "patchouli.gui.lexicon.sad" | "block.minecraft.banner.border.lime" | "subtitles.entity.creeper.death" | "subtitles.entity.piglin_brute.step" | "gui.ae2.ChargedQuartz" | "death.attack.create.potato_cannon" | "block.minecraft.spawn.not_valid" | "block.create.schematic_table.tooltip.condition1" | "item.botania.pattern_1_1" | "item.botania.pattern_1_3" | "item.botania.pattern_1_2" | "advancements.nether.obtain_ancient_debris.description" | "gui.ae2.PatternAccessTerminal" | "mco.template.default.name" | "subtitles.entity.generic.big_fall" | "commands.data.storage.query" | "item.botania.quartz_sunny" | "config.jei.search.colorSearchMode" | "advancement.create.train_roadkill" | "selectWorld.edit.title" | "death.attack.fallingBlock.player" | "block.minecraft.banner.stripe_top.black" | "item.botania.open_bucket" | "create.super_glue.not_enough" | "mco.configure.world.invite.narration" | "spectatorMenu.team_teleport.prompt" | "block.minecraft.rose_bush" | "block.minecraft.iron_bars" | "commands.advancement.grant.one.to.one.success" | "commands.drop.success.single" | "block.minecraft.banner.diagonal_left.light_gray" | "options.narrator.system" | "death.attack.explosion.player.item" | "tutorial.bundleInsert.description" | "item.botania.corporea_spark_creative" | "botania.tagline.flowerBag" | "create.ponder.sail_frame.text_1" | "create.ponder.sail_frame.text_2" | "block.minecraft.banner.half_horizontal_bottom.light_blue" | "block.minecraft.banner.botania_spark_isolated.white" | "commands.spectate.not_spectator" | "commands.perf.reportSaved" | "advancements.empty" | "create.schedule.condition.threshold.place_item" | "block.minecraft.dark_oak_sign" | "block.minecraft.banner.square_bottom_right.magenta" | "item.minecraft.shield.light_gray" | "key.keyboard.end" | "block.minecraft.deepslate_brick_wall" | "block.botania.redstone_spreader" | "item.minecraft.green_dye" | "block.minecraft.banner.border.blue" | "block.minecraft.crimson_planks" | "block.minecraft.sandstone_wall" | "create.tooltip.chute.fans_push_down" | "subtitles.entity.parrot.imitate.shulker" | "block.minecraft.carved_pumpkin" | "commands.datapack.modify.enable" | "item.minecraft.shield.white" | "block.minecraft.banner.stripe_downright.red" | "item.botania.ender_air_bottle" | "block.minecraft.potted_acacia_sapling" | "create.recipe.assembly.progress" | "block.minecraft.nether_brick_stairs" | "advancements.story.obtain_armor.description" | "commands.advancement.criterionNotFound" | "mco.configure.worlds.title" | "botania.tagline.grassSeeds" | "string.naturescompass.sortBy" | "gui.ae2.Priority" | "botania.tagline.dreamwoodSpreader" | "commands.teleport.success.entity.multiple" | "subtitles.entity.donkey.chest" | "block.botania.yellow_floating_flower" | "gui.tooltips.ae2.Encode" | "botania.page.wand2" | "botania.page.wand1" | "advancements.husbandry.wax_off.title" | "advancement.botania:cacophoniumCraft" | "botania.page.wand3" | "item.minecraft.firework_star.shape.burst" | "botania.page.wand0" | "create.ponder.andesite_tunnel.text_4" | "create.ponder.andesite_tunnel.text_2" | "create.ponder.andesite_tunnel.text_3" | "create.ponder.andesite_tunnel.text_1" | "advancement.create.train_casing_00.desc" | "item.minecraft.axolotl_spawn_egg" | "chat.type.text" | "biome.minecraft.sunflower_plains" | "block.create.weathered_copper_tiles" | "commands.attribute.base_value.get.success" | "commands.ftbquests.editing_mode.usage" | "item.minecraft.compass" | "subtitles.entity.zombie_villager.converted" | "block.botania.blue_buried_petals" | "item.ae2.purple_glass_cable" | "block.create.waxed_copper_tile_slab" | "gui.ae2.CalculatingWait" | "create.train_assembly.no_controls" | "item.minecraft.melon_slice" | "create.ponder.mechanical_mixer.text_4" | "create.tunnel.selection_mode.forced_split" | "create.ponder.mechanical_mixer.text_3" | "create.schedule.instruction.throttle_edit_box_1" | "commands.forge.gen.progress" | "create.ponder.mechanical_mixer.text_2" | "create.ponder.mechanical_mixer.text_1" | "block.minecraft.zombie_wall_head" | "stat.minecraft.fill_cauldron" | "advancement.botania:manaCookieEat" | "block.ae2.charger" | "create.tooltip.holdForControls" | "item.minecraft.paper" | "advancement.botania:gaiaGuardianKill.desc" | "entity.minecraft.villager.cartographer" | "create.ponder.cogwheel_casing.header" | "string.naturescompass.climate" | "argument.entity.options.name.description" | "subtitles.entity.vindicator.celebrate" | "item.botania.lens_bounce" | "jei.key.category.edit.mode" | "block.botania.alfheim_portal" | "subtitles.entity.llama.death" | "ftbquests.task.ftbquests.biome" | "block.create.cuckoo_clock.tooltip.condition1" | "language.region" | "subtitles.entity.wandering_trader.ambient" | "block.minecraft.banner.straight_cross.lime" | "stat.minecraft.play_record" | "botaniamisc.scaleChange" | "block.minecraft.banner.bricks.brown" | "realms.missing.module.error.text" | "create.recipe.milling" | "botaniamisc.brewOf" | "create.item_attributes.washable.inverted" | "jei.message.configured" | "block.botania.metamorphic_fungal_bricks_slab" | "block.create.cut_asurine_slab" | "create.ponder.steam_engine.header" | "item.create.electron_tube" | "jei.chat.error.no.cheat.permission.creative" | "options.modelPart.jacket" | "create.ponder.tag.display_targets.description" | "block.minecraft.crafting_table" | "create.ponder.stressometer.header" | "block.botania.metamorphic_taiga_bricks_wall" | "item.minecraft.iron_chestplate" | "key.keyboard.escape" | "commands.team.option.seeFriendlyInvisibles.disabled" | "block.ftbquests.screen.missing_data" | "stat.minecraft.damage_resisted" | "block.minecraft.banner.botania_spark_isolated.silver" | "block.minecraft.exposed_cut_copper_stairs" | "item.botania.odin_ring" | "mco.brokenworld.nonowner.error" | "mco.configure.world.edit.slot.name" | "block.minecraft.blast_furnace" | "subtitles.item.totem.use" | "block.minecraft.black_candle_cake" | "botania.page.flowerBag2" | "botania.page.flowerBag1" | "block.botania.blue_mystical_flower" | "botania.page.flowerBag0" | "block.minecraft.banner.stripe_downright.pink" | "block.minecraft.banner.mojang.white" | "block.minecraft.banner.straight_cross.blue" | "mco.errorMessage.serviceBusy" | "command.failed" | "block.botania.stripped_dreamwood_log" | "gui.ae2.Missing" | "mco.configure.world.pvp" | "ftbquests.gui.export_spreadsheet" | "createWorld.customize.preset.classic_flat" | "advancements.nether.loot_bastion.description" | "gui.move" | "structure_block.load_success" | "create.ponder.mechanical_crafter_connect.text_3" | "create.ponder.mechanical_crafter_connect.text_2" | "create.track.leave_slope_ascending" | "create.ponder.mechanical_crafter_connect.text_1" | "advancements.husbandry.tame_an_animal.description" | "block.minecraft.banner.rhombus.light_gray" | "create.ponder.deployer_modes.text_1" | "botania.tagline.swapRing" | "create.ponder.deployer_modes.text_2" | "ae2.rei_jei_integration.throwing_in_water_category" | "block.create.deepslate_pillar" | "block.create.cut_limestone_brick_wall" | "subtitles.entity.mule.ambient" | "subtitles.entity.parrot.imitate.zombie" | "entity.minecraft.tropical_fish.type.flopper" | "effect.minecraft.wither" | "botania.entry.flowerBag" | "subtitles.entity.donkey.eat" | "gui.expand_all" | "subtitles.entity.parrot.imitate.ender_dragon" | "gui.ae2.SearchTooltipIncludingTooltips" | "effect.minecraft.blindness" | "commands.team.option.color.success" | "block.botania.clayconia.reference" | "create.ponder.auto_schedule.text_3" | "create.subtitle.sanding_short" | "create.ponder.auto_schedule.text_4" | "block.minecraft.waxed_exposed_cut_copper" | "create.ponder.auto_schedule.text_1" | "create.ponder.auto_schedule.text_2" | "advancement.botania:dandelifeonPickup.desc" | "item.minecraft.trident" | "create.ponder.auto_schedule.text_5" | "block.minecraft.acacia_sapling" | "create.ponder.auto_schedule.text_6" | "block.minecraft.dragon_head" | "create.display_source.kinetic_stress.display" | "item.create.refined_radiance.tooltip.summary" | "block.minecraft.banner.diagonal_up_left.black" | "block.minecraft.spruce_leaves" | "botania.page.spectralPlatform1" | "botania.page.spectralPlatform0" | "selectWorld.import_worldgen_settings.deprecated.question" | "mco.invites.pending" | "block.botania.fork_light_relay" | "commands.team.option.deathMessageVisibility.unchanged" | "block.create.small_crimsite_brick_wall" | "gui.ae2.InvalidPattern" | "botania.page.labellia0" | "block.minecraft.banner.rhombus.gray" | "gui.ae2.InvalidNumber" | "advancements.end.root.title" | "botania.page.labellia1" | "subtitles.entity.fishing_bobber.throw" | "advancement.create.compacting.desc" | "item.botania.mining_ring" | "jei.tooltip.error.recipe.transfer.missing" | "block.botania.stripped_dreamwood_wall" | "argument.entity.options.distance.description" | "subtitles.entity.fox.sleep" | "block.minecraft.banner.botania_logo.black" | "botania.tagline.enderDagger" | "block.minecraft.banner.stripe_top.orange" | "createWorld.customize.custom.dungeonChance" | "entity.minecraft.pillager" | "botania.tagline.avatar" | "block.lootr.lootr_barrel" | "subtitles.entity.polar_bear.hurt" | "item.create.diving_boots" | "key.jei.toggleCheatMode" | "key.categories.misc" | "block.minecraft.pink_candle_cake" | "block.create.waxed_oxidized_copper_tile_stairs" | "item.botania.red_string" | "item.create.schedule" | "achievement.ae2.StorageCell" | "advancement.create.speed_controller" | "subtitles.block.trapdoor.toggle" | "create.ponder.mechanical_saw_contraption.text_2" | "create.ponder.mechanical_saw_contraption.text_1" | "item.create.shadow_steel" | "disconnect.exceeded_packet_rate" | "advancements.adventure.spyglass_at_ghast.description" | "advancement.advancementNotFound" | "commands.forge.tags.error.unknown_tag" | "botania.category.functionalFlowers" | "advancement.create.encased_fan" | "botania.category.generationFlowers" | "mco.template.button.trailer" | "create.ponder.fluid_pipe_flow.text_2" | "create.ponder.fluid_pipe_flow.text_3" | "create.ponder.fluid_pipe_flow.text_1" | "block.botania.glimmering_dreamwood" | "botania.page.superCloudPendant0" | "block.minecraft.banner.square_bottom_left.lime" | "botania.page.superCloudPendant1" | "block.minecraft.cauldron" | "multiplayer.status.finished" | "create.ponder.nixie_tube.header" | "achievement.ae2.QNB.desc" | "block.minecraft.nether_brick_fence" | "commands.forceload.list.multiple" | "botania.desc" | "block.minecraft.banner.botania_spark_dispersive.magenta" | "item.botania.record_gaia_2.desc" | "botania.page.pool16" | "botania.page.pool15" | "argument.entity.options.dx.description" | "botania.page.pool14" | "botania.page.pool13" | "block.minecraft.banner.globe.light_blue" | "botania.page.pool12" | "botania.page.pool11" | "botania.page.pool10" | "block.create.brown_nixie_tube" | "ftbquests.file.grid_scale" | "fluid.create.potion" | "gui.ae2.NoSecondOutput" | "item.minecraft.splash_potion.effect.night_vision" | "block.minecraft.wither_skeleton_wall_skull" | "block.minecraft.banner.botania_logo.gray" | "advancements.husbandry.kill_axolotl_target.description" | "create.ponder.fluid_pipe_flow.text_6" | "create.ponder.fluid_pipe_flow.text_7" | "create.ponder.fluid_pipe_flow.text_4" | "create.ponder.fluid_pipe_flow.text_5" | "block.minecraft.banner.botania_spark_recessive.yellow" | "commands.advancement.revoke.one.to.one.failure" | "container.repair.expensive" | "container.inventory" | "block.minecraft.banner.botania_spark_dominant.purple" | "item.botania.manaweave_boots" | "block.minecraft.magenta_stained_glass" | "mco.account.privacyinfo" | "create.recipe.sawing" | "create.ponder.fluid_pipe_interaction.text_4" | "create.ponder.fluid_pipe_interaction.text_5" | "patchouli.gui.lexicon.mark_incomplete" | "mco.create.world.error" | "death.attack.freeze" | "botania.tagline.pool" | "argument.integer.low" | "block.botania.medumone.reference" | "subtitles.entity.pig.hurt" | "block.minecraft.banner.square_bottom_left.blue" | "create.ponder.fluid_pipe_interaction.text_2" | "create.ponder.fluid_pipe_interaction.text_3" | "block.minecraft.banner.stripe_top.light_gray" | "create.ponder.fluid_pipe_interaction.text_1" | "item.ae2.purple_covered_dense_cable" | "block.minecraft.white_banner" | "block.minecraft.large_fern" | "options.reducedDebugInfo" | "arguments.objective.notFound" | "block.botania.metamorphic_plains_cobblestone_slab" | "create.display_target.line" | "block.minecraft.banner.triangles_top.brown" | "ftbquests.quest.shape.diamond" | "subtitles.entity.generic.hurt" | "entity.minecraft.villager.none" | "botania.subtitle.labellia" | "subtitles.entity.villager.work_cleric" | "curios.slot" | "block.minecraft.coarse_dirt" | "death.attack.player.item" | "subtitles.entity.wither_skeleton.hurt" | "commands.execute.conditional.fail" | "mco.configure.world.spawnProtection" | "item.minecraft.globe_banner_pattern" | "chat.link.warning" | "create.contraption.controls.start_controlling" | "botania.tagline.gourmaryllis" | "block.minecraft.banner.botania_logo.brown" | "botania.page.dreadthorne1" | "botaniamisc.filter1" | "botania.page.dreadthorne0" | "botaniamisc.filter0" | "botania.challengelevel.normal" | "botaniamisc.filter2" | "forge.configgui.zoomInMissingModelTextInGui" | "commands.debug.function.success.multiple" | "clear.failed.single" | "block.create.cut_ochrum" | "advancement.botania:kekimurusPickup" | "gui.ae2.And" | "block.minecraft.banner.half_horizontal_bottom.brown" | "block.create.mechanical_piston" | "block.create.polished_cut_diorite_wall" | "commands.team.option.friendlyfire.alreadyDisabled" | "block.ftbquests.chest.output" | "item.minecraft.firework_star.shape.large_ball" | "ftbquests.task.ftbquests.buildcraft_mj" | "block.create.railway_casing" | "item.ae2.light_blue_paint_ball" | "connect.aborted" | "block.minecraft.banner.triangles_top.lime" | "key.jei.showUses2" | "options.narrator.all" | "block.create.cut_scoria_wall" | "subtitles.entity.donkey.angry" | "block.create.encased_fluid_pipe" | "advancement.create.hose_pulley.desc" | "multiplayer.status.cannot_resolve" | "block.botania.metamorphic_swamp_bricks" | "create.tooltip.capacityProvided.medium" | "stat.ae2.items_extracted" | "block.botania.hourglass" | "create.ponder.windmill_source.header" | "ftbquests.variables" | "block.botania.red_mystical_flower" | "block.minecraft.banner.square_top_right.light_gray" | "block.minecraft.banner.diagonal_up_left.magenta" | "create.train_assembly.single_bogey_carriage" | "item.ae2.gray_smart_cable" | "block.minecraft.banner.flower.white" | "stat.minecraft.sneak_time" | "mco.selectServer.note" | "botaniamisc.clipEmpty" | "mco.minigame.world.restore.question.line2" | "biome.minecraft.lukewarm_ocean" | "mco.minigame.world.restore.question.line1" | "patchouli.gui.lexicon.dev_edition" | "block.ae2.security_station" | "item.ae2.pink_smart_cable" | "block.botania.spectranthemum" | "argument.double.big" | "block.minecraft.oak_door" | "item.create.crushed_uranium_ore" | "item.minecraft.prismarine_crystals" | "menu.disconnect" | "commands.scoreboard.players.enable.success.multiple" | "item.minecraft.tipped_arrow.effect.slow_falling" | "stat_type.minecraft.killed_by" | "tag.botania.petals.yellow" | "create.ponder.welcome" | "commands.banip.invalid" | "botania.entry.blackLotus" | "waila.ae2.Showing" | "subtitles.entity.elder_guardian.death" | "multiplayer.disconnect.authservers_down" | "item.ae2.sky_dust" | "item.botania.rune_sloth" | "item.minecraft.furnace_minecart" | "block.minecraft.banner.botania_tiny_potato.red" | "multiplayer.disconnect.idling" | "soundCategory.record" | "ftbteams.privacy_mode.allies" | "subtitles.entity.ender_dragon.flap" | "advancements.story.obtain_armor.title" | "block.botania.animated_torch" | "botania.page.fIntro0" | "botania.page.fIntro1" | "botania.page.fIntro2" | "botania.page.fIntro3" | "block.minecraft.purple_banner" | "botania.page.fIntro4" | "item.ae2.light_blue_glass_cable" | "block.botania.green_floating_flower" | "create.ponder.creative_fluid_tank.text_3" | "item.botania.quartz_dark" | "create.ponder.creative_fluid_tank.text_4" | "create.display_source.time.24_hour" | "create.ponder.creative_fluid_tank.text_1" | "create.gui.attribute_filter.allow_list_disjunctive.description" | "create.ponder.creative_fluid_tank.text_2" | "create.display_link.reading_from" | "tag.botania.lens" | "botania.tagline.terrasteel" | "create.potato_cannon.ammo.knockback" | "block.minecraft.yellow_banner" | "commands.ftbquests.command.error.invalid_type" | "block.create.cut_limestone_stairs" | "block.minecraft.clay" | "container.barrel" | "commands.title.times.single" | "key.mouse.right" | "block.minecraft.polished_diorite_slab" | "block.minecraft.banner.piglin.green" | "ftbquests.gui.autopin.off" | "resourcepack.requesting" | "item.ae2.spatial_storage_cell_16" | "block.minecraft.cobblestone_slab" | "block.minecraft.banner.cross.magenta" | "block.create.light_gray_nixie_tube" | "block.minecraft.banner.diagonal_right.purple" | "block.create.small_veridium_bricks" | "advancements.nether.find_fortress.title" | "botania.tagline.pureDaisy" | "block.minecraft.blackstone_stairs" | "block.botania.munchdew" | "effect.none" | "block.minecraft.banner.triangles_top.blue" | "ftbquests.task.ftbquests.npc_faction.required_points" | "block.create.polished_cut_asurine" | "block.create.cut_crimsite_brick_stairs" | "subtitles.entity.blaze.hurt" | "gamerule.doEntityDrops" | "block.minecraft.exposed_cut_copper_slab" | "death.attack.fireworks" | "block.minecraft.banner.triangle_top.lime" | "item.ae2.black_lumen_paint_ball" | "block.minecraft.potted_dead_bush" | "item.botania.vial" | "subtitles.entity.ender_dragon.growl" | "block.minecraft.banner.half_horizontal.brown" | "item.patchouli.guide_book" | "item.minecraft.splash_potion.effect.water" | "gui.added" | "config.jei.advanced.modNameFormat.comment" | "botania.entry.tornadoRod" | "create.ponder.tag.creative.description" | "createWorld.customize.custom.preset.waterWorld" | "tag.botania.livingwood_logs" | "create.ponder.speedometer.header" | "block.minecraft.banner.diagonal_right.red" | "commands.function.success.multiple" | "advancements.husbandry.plant_seed.title" | "chat.type.announcement" | "jei.tooltip.transfer" | "advancements.end.dragon_breath.title" | "block.botania.metamorphic_forest_bricks_slab" | "commands.attribute.base_value.set.success" | "commands.title.cleared.multiple" | "advancement.create.rose_quartz" | "block.botania.metamorphic_fungal_stone" | "botania.entry.solegnolia" | "forge.configgui.removeErroringBlockEntities" | "soundCategory.ambient" | "botania.brew.speed" | "block.minecraft.banner.straight_cross.orange" | "block.botania.prism" | "patchouli.gui.lexicon.incomplete" | "entity.minecraft.stray" | "item.ae2.magenta_lumen_paint_ball" | "commands.bossbar.get.players.some" | "gui.ae2.SecurityCardEditor" | "create.contraptions.clockwork.clock_hands" | "commands.teleport.success.entity.single" | "chat.type.team.text" | "curios.identifier.necklace" | "item.minecraft.orange_dye" | "block.minecraft.warped_fence_gate" | "botania.tagline.cobbleRod" | "subtitles.event.raid.horn" | "botania.page.corporeaRetainer4" | "biome.minecraft.soul_sand_valley" | "botania.page.corporeaRetainer3" | "botania.page.corporeaRetainer2" | "botania.page.corporeaRetainer1" | "forge.configgui.fixVanillaCascading" | "botania.page.corporeaRetainer0" | "botania.entry.missileRod" | "block.botania.floating_rosa_arcana" | "create.schematicannon.status.skipping" | "item.botania.skydirt_rod" | "entity.create.super_glue" | "argument.player.toomany" | "create.recipe.assembly.step" | "block.minecraft.banner.triangle_top.blue" | "item.botania.green_petal" | "botania.entry.luminizerTransport" | "block.minecraft.brown_mushroom_block" | "subtitles.block.barrel.close" | "block.create.haunted_bell.tooltip.summary" | "subtitles.block.growing_plant.crop" | "key.pickItem" | "block.minecraft.polished_andesite_stairs" | "block.minecraft.banner.bricks.red" | "argument.block.property.unclosed" | "subtitles.entity.panda.step" | "create.item_attributes.badly_damaged" | "createWorld.customize.custom.page1" | "block.ftbquests.screen.size" | "ftbquests.gui.copy_id" | "createWorld.customize.custom.page2" | "block.botania.gray_shiny_flower" | "createWorld.customize.custom.page3" | "block.minecraft.pink_concrete_powder" | "subtitles.entity.enderman.death" | "advancements.adventure.voluntary_exile.description" | "createWorld.customize.custom.page0" | "key.mouse.middle" | "block.minecraft.spruce_fence" | "death.attack.starve" | "forge.configgui.forceSystemNanoTime" | "debug.reload_chunks.help" | "ftbquests.task.ftbquests.botania_mana" | "block.minecraft.tnt" | "key.jei.showUses" | "forge.controlsgui.control" | "block.botania.fallen_kanade" | "create.train.status.paused_for_manual" | "subtitles.entity.item_frame.remove_item" | "item.minecraft.turtle_spawn_egg" | "create.subtitle.wrench_remove" | "gui.tooltips.ae2.ShowFluidsOnly" | "entity.minecraft.leash_knot" | "botania.subtitle.diceOfFate" | "subtitles.entity.mule.hurt" | "createWorld.customize.flat.layer" | "ftbquests.reward.ftbquests.npc_faction.points" | "entity.minecraft.ocelot" | "item.botania.dice.poem0" | "create.schedule.instruction.throttle.summary" | "stat.minecraft.interact_with_lectern" | "create.ponder.tag.contraption_assembly.description" | "stat_type.minecraft.dropped" | "item.botania.dice.poem2" | "block.minecraft.furnace" | "item.botania.dice.poem1" | "item.botania.dice.poem3" | "item.ae2.certus_quartz_cutting_knife" | "block.create.nozzle.tooltip" | "create.gui.stockpile_switch.title" | "item.ae2.lime_lumen_paint_ball" | "subtitles.entity.chicken.death" | "item.minecraft.phantom_membrane" | "advancement.botania:manaweaveArmorCraft.desc" | "block.minecraft.banner.border.red" | "block.botania.clayconia_chibi.reference" | "selectWorld.tooltip.fromNewerVersion2" | "advancement.botania:brewPickup" | "selectWorld.tooltip.fromNewerVersion1" | "create.ponder.deployer_processing.header" | "config.group.value" | "gui.ae2.PatternEncoding.primary_processing_result_hint" | "botania.entry.terraPick" | "botania.tagline.shinyFlowers" | "subtitles.entity.firework_rocket.twinkle" | "block.minecraft.redstone_wall_torch" | "commands.data.storage.get" | "demo.help.movementShort" | "botania.tagline.manaRing" | "subtitles.entity.vex.hurt" | "botania.subtitle.spreaderCover" | "commands.team.option.friendlyfire.alreadyEnabled" | "item.ae2.pink_covered_dense_cable" | "options.difficulty.hard" | "block.create.white_seat" | "block.create.pulse_extender" | "item.minecraft.ocelot_spawn_egg" | "mco.configure.world.reset.question.line1" | "ftbteams.not_in_party" | "mco.configure.world.reset.question.line2" | "gui.tooltips.ae2.Mod" | "commands.clear.success.single" | "advancements.adventure.ol_betsy.description" | "botania.entry.pool" | "block.minecraft.banner.stripe_downright.light_gray" | "block.botania.magenta_petal_block" | "create.gui.attribute_filter.allow_list_conjunctive" | "addServer.add" | "create.tooltip.chute.no_fans_attached" | "block.botania.floating_clayconia" | "manaBar.height" | "commands.ftbquests.change_progress.text" | "subtitles.entity.villager.work_librarian" | "item.botania.lava_pendant" | "subtitles.entity.zombie_horse.death" | "permissions.requires.player" | "block.minecraft.dripstone_block" | "block.create.cut_calcite_wall" | "block.minecraft.banner.stripe_bottom.white" | "block.minecraft.daylight_detector" | "gui.tooltips.ae2.SubstitutionsDescEnabled" | "block.ftbquests.screen" | "block.botania.metamorphic_forest_stone_stairs" | "ftbteams.info.members" | "botania.subtitle.shulkMeNot" | "patchouli.gui.lexicon.external_link" | "options.visible" | "item.botania.thunder_sword" | "botania.tagline.worldSeed" | "key.jei.cheatItemStack2" | "create.track.too_far" | "block.minecraft.orange_carpet" | "mco.configure.world.buttons.activity" | "attribute.name.generic.max_health" | "create.recipe.deploying" | "item.botania.flugel_eye" | "item.minecraft.gunpowder" | "itemGroup.itemfilters.main" | "string.naturescompass.biome" | "item.ae2.pink_covered_cable" | "ftbquests.file.defaults.quest_shape" | "block.minecraft.polished_diorite_stairs" | "block.create.large_bogey" | "gui.tooltips.ae2.ReportInaccessibleFluidsNo" | "block.minecraft.banner.piglin.white" | "block.minecraft.banner.diagonal_left.magenta" | "item.botania.lens_speed.short" | "ftbquests.task.ftbquests.npc_quest.check_active" | "create.item_attributes.consumable" | "block.minecraft.dark_oak_trapdoor" | "subtitles.entity.parrot.hurts" | "create.generic.pitch" | "commands.scoreboard.players.set.success.multiple" | "create.schematic.tool.flip.description.1" | "block.create.weathered_copper_tile_slab" | "create.schematic.tool.flip.description.0" | "advancement.botania:lokiRing.desc" | "forge.configgui.zombieBaseSummonChance" | "create.schematic.tool.flip.description.3" | "create.schematic.tool.flip.description.2" | "botania.subtitle.manaPoolCraft" | "block.botania.metamorphic_mesa_stone_stairs" | "ftbteamsconfig.ftbteams.description" | "create.item_attributes.damaged" | "block.create.light_gray_sail" | "block.botania.floating_heisei_dream" | "block.minecraft.spruce_wood" | "commands.bossbar.set.visibility.unchanged.hidden" | "ftbquests.reward.ftbquests.npc_mail.quest_title" | "fml.modloading.failedtoprocesswork" | "create.subtitle.saw_activate_wood" | "block.botania.floating_pure_daisy" | "commands.advancement.grant.one.to.many.success" | "item.botania.livingwood_bow" | "botania.page.complexBrews5b" | "botania.page.complexBrews5a" | "multiplayer.status.cannot_connect" | "enchantment.minecraft.binding_curse" | "tag.botania.mundane_floating_flowers" | "commands.pardonip.success" | "block.minecraft.banner.mojang.light_gray" | "block.botania.pink_shiny_flower" | "botaniamisc.requestMsg" | "generator.debug_all_block_states" | "subtitles.entity.zombie_villager.death" | "botania.page.complexBrews6a" | "commands.team.empty.unchanged" | "botania.page.complexBrews6b" | "item.minecraft.firework_rocket.flight" | "block.botania.dreadthorn" | "forge.configgui.forgeCloudsEnabled" | "block.minecraft.potted_lily_of_the_valley" | "sidebar_group.ftblibrary.info" | "item.create.empty_blaze_burner" | "block.minecraft.banner.diagonal_up_right.purple" | "item.minecraft.lime_dye" | "botania.page.complexBrews7b" | "botania.page.complexBrews7a" | "block.create.small_diorite_brick_stairs" | "ftbquests.reward.ftbquests.npc_mail.subject" | "block.minecraft.banner.botania_hoe.lightBlue" | "item.create.diving_helmet.tooltip" | "block.minecraft.acacia_fence_gate" | "block.create.peculiar_bell.tooltip.summary" | "item.ae2.green_smart_cable" | "block.minecraft.deepslate_lapis_ore" | "botania.subtitle.virusInfect" | "options.sounds.title" | "block.minecraft.dark_oak_wood" | "create.display_source.station_summary" | "block.minecraft.blue_bed" | "ccl.commands.gc.before" | "block.minecraft.oak_leaves" | "subtitles.entity.silverfish.death" | "tag.botania.runes" | "block.minecraft.cracked_polished_blackstone_bricks" | "structure_block.save_success" | "botaniamisc.outputtingPower" | "block.create.lime_toolbox" | "advancements.story.form_obsidian.description" | "block.botania.manasteel_block" | "commands.scoreboard.objectives.list.success" | "item.minecraft.witch_spawn_egg" | "advancements.husbandry.netherite_hoe.title" | "create.display_source.redstone_power" | "commands.worldborder.set.shrink" | "effect.effectNotFound" | "block.minecraft.banner.flower.green" | "subtitles.entity.guardian.hurt" | "botania.entry.rafflowsia" | "commands.perf.started" | "key.keyboard.comma" | "botania.sign11" | "botania.sign10" | "create.gui.sequenced_gearshift.instruction.end" | "selectWorld.backupQuestion.customized" | "create.logistics.when_multiple_outputs_available" | "entity.create.gantry_contraption" | "structure_block.hover.data" | "block.minecraft.cyan_concrete" | "block.minecraft.banner.diagonal_up_left.orange" | "block.botania.elf_quartz_slab" | "create.recipe.wood_cutting" | "subtitles.entity.villager.no" | "block.minecraft.banner.botania_lexicon.lightBlue" | "ftbquests.task.ftbquests.item.count" | "item.ae2.white_lumen_paint_ball" | "block.minecraft.acacia_pressure_plate" | "block.minecraft.banner.triangle_bottom.light_gray" | "block.botania.livingwood" | "subtitles.entity.spider.ambient" | "subtitles.block.anvil.use" | "gui.tooltips.ae2.TransferToNetwork" | "item.minecraft.phantom_spawn_egg" | "block.minecraft.banner.botania_spark_recessive.purple" | "botania.tagline.spectrolus" | "botania.subtitle.manaBlasterMisfire" | "death.attack.cactus.player" | "ftbquests.task.ftbquests.ic2_energy" | "block.minecraft.banner.botania_axe.pink" | "block.create.andesite_belt_funnel" | "block.minecraft.warped_button" | "botania.wings8" | "botania.wings9" | "botania.wings6" | "botania.wings7" | "create.ponder.brass_tunnel_modes.text_3" | "create.ponder.brass_tunnel_modes.text_4" | "create.ponder.brass_tunnel_modes.text_1" | "create.ponder.brass_tunnel_modes.text_2" | "botania.wings0" | "create.ponder.brass_tunnel_modes.text_7" | "botania.wings1" | "create.ponder.brass_tunnel_modes.text_8" | "create.ponder.brass_tunnel_modes.text_5" | "create.ponder.brass_tunnel_modes.text_6" | "botania.wings4" | "key.keyboard.keypad.enter" | "botania.wings5" | "block.minecraft.dark_oak_log" | "botania.wings2" | "create.ponder.brass_tunnel_modes.text_9" | "botania.wings3" | "botania.tagline.thornChakram" | "commands.advancement.revoke.one.to.many.failure" | "options.clouds.fast" | "mco.errorMessage.connectionFailure" | "block.botania.floating_gourmaryllis" | "record.nowPlaying" | "advancements.husbandry.axolotl_in_a_bucket.description" | "block.create.creative_crate" | "commands.spreadplayers.failed.invalid.height" | "entity.botania.pink_wither" | "block.minecraft.brown_candle_cake" | "block.minecraft.banner.botania_flower.green" | "advancement.create.train_crash" | "advancement.create.drain" | "commands.trigger.set.success" | "item.minecraft.netherite_chestplate" | "block.minecraft.magenta_candle" | "mco.configure.world.settings.title" | "item.botania.cosmetic_black_bowtie" | "ftbquests.task.ftbquests.item.convert_tag" | "create.track.valid_connection" | "advancement.botania:cacophoniumCraft.desc" | "fml.modloading.missingdependency.optional" | "create.gui.schematicTable.noSchematics" | "commands.fill.success" | "stat.minecraft.open_shulker_box" | "chat.ae2.SettingCleared" | "gui.tooltips.ae2.SideRight" | "item.ae2.fluix_covered_cable" | "subtitles.block.lever.click" | "botania.flowerType.generating" | "block.minecraft.banner.stripe_downright.gray" | "botania.tagline.reachRing" | "block.minecraft.hopper" | "commands.save.alreadyOn" | "ftblibrary.select_item.nbt" | "create.ponder.cog_speedup.header" | "gui.socialInteractions.status_blocked" | "create.ponder.gearbox.text_1" | "theoneprobe.ae2.p2p_unlinked" | "create.ponder.cogwheel.header" | "create.track.turn_90" | "create.ponder.gearbox.text_4" | "create.ponder.gearbox.text_3" | "create.ponder.gearbox.text_2" | "advancements.nether.ride_strider.description" | "block.minecraft.cracked_stone_bricks" | "block.minecraft.slime_block" | "patchouli.gui.lexicon.button.prev_page" | "sidebar_button.ftbteams.my_team" | "commands.effect.clear.specific.failed" | "block.minecraft.pink_carpet" | "item.minecraft.tipped_arrow.effect.strength" | "biome.minecraft.eroded_badlands" | "item.ae2.wireless_crafting_terminal" | "subtitles.entity.tnt.primed" | "gui.tooltips.ae2.DurationFormatMinutes" | "item.botania.travel_belt" | "block.minecraft.banner.curly_border.light_gray" | "botania.entry.dodgeRing" | "block.botania.lime_mystical_flower" | "gui.ae2.AttachedTo" | "subtitles.block.brewing_stand.brew" | "selectWorld.deleteButton" | "botania.page.heiseiDream0" | "botania.page.heiseiDream1" | "create.station.retry" | "gui.socialInteractions.hide" | "create.ponder.tag.decoration" | "item.create.wrench.tooltip.action2" | "gui.tooltips.ae2.NonBlocking" | "item.create.wrench.tooltip.action1" | "subtitles.entity.armor_stand.fall" | "create.station.no_assembly_curve_1" | "block.minecraft.acacia_fence" | "create.schedule.instruction.destination" | "block.minecraft.warped_wall_sign" | "block.botania.red_quartz" | "botania.page.dreamwoodSpreader3" | "entity.minecraft.enderman" | "lootr.advancements.25loot.description" | "subtitles.block.portal.travel" | "block.create.mechanical_saw" | "block.minecraft.stripped_acacia_wood" | "block.minecraft.orange_candle" | "block.minecraft.light_blue_concrete_powder" | "item.ae2.spatial_cell_component_128" | "item.ae2.yellow_covered_cable" | "ftblibrary.select_item.list_mode.all" | "tag.botania.petals.brown" | "botania.page.dreamwoodSpreader0" | "botania.page.dreamwoodSpreader2" | "botania.page.dreamwoodSpreader1" | "create.gui.terrainzapper.pattern.checkered" | "botaniamisc.lexiconIndex" | "block.ae2.sky_stone_brick_wall" | "block.minecraft.banner.straight_cross.light_gray" | "block.botania.metamorphic_forest_stone_slab" | "biome.minecraft.deep_ocean" | "create.schedule.condition.redstone_link" | "item.create.empty_schematic.tooltip" | "gui.tooltips.ae2.BlockPlacementNo" | "botania.tagline.rafflowsia" | "options.mouse_settings" | "item.botania.itemfinder" | "subtitles.entity.generic.burn" | "block.minecraft.spruce_stairs" | "item.botania.rune_air" | "item.minecraft.drowned_spawn_egg" | "create.item_attributes.book_copy_first.inverted" | "botania.page.fireRod0" | "create.train.cannot_relocate_moving" | "botania.page.fireRod1" | "botania.page.fireRod2" | "advancements.husbandry.fishy_business.title" | "item.botania.magenta_petal" | "create.track.not_enough_pavement" | "multiplayer.requiredTexturePrompt.line2" | "multiplayer.requiredTexturePrompt.line1" | "block.create.polished_cut_deepslate_slab" | "block.create.weathered_copper_tile_stairs" | "create.recipe.assembly.next" | "block.create.cut_andesite_bricks" | "create.ponder.hose_pulley_level.header" | "botania.page.slimeBottle0" | "block.minecraft.polished_deepslate_slab" | "commands.trigger.add.success" | "create.tooltip.chute.items_move_down" | "ftbquests.task.ftbquests.stat.value" | "item.create.creative_blaze_cake.tooltip.behaviour1" | "lootr.message.decay_in" | "block.minecraft.blue_banner" | "item.botania.quartz_red" | "gui.jei.editMode.description.hide.wild" | "item.botania.lens_messenger" | "string.naturescompass.veryHigh" | "ftbquests.quest.tasks_ignore_dependencies.tooltip" | "block.ae2.cell_workbench" | "botania.nei.brewery" | "block.minecraft.nether_gold_ore" | "botania.page.skyDirtRod1" | "botania.page.skyDirtRod0" | "create.ponder.track_portal.text_1" | "block.create.polished_cut_granite_slab" | "create.ponder.track_portal.text_2" | "create.ponder.track_portal.text_3" | "block.minecraft.banner.flower.gray" | "block.minecraft.nether_wart" | "botania.page.slimeBottle1" | "create.recipe.draining" | "stat.minecraft.interact_with_stonecutter" | "block.minecraft.banner.botania_fish.brown" | "create.toolbox.unequip" | "item.itemfilters.tag.description" | "subtitles.block.lava.ambient" | "mco.client.outdated.msg.line1" | "mco.client.outdated.msg.line2" | "create.track_target.clear" | "advancement.create.ejector_maxed.desc" | "item.minecraft.pufferfish_spawn_egg" | "commands.team.option.nametagVisibility.success" | "block.botania.tangleberrie_chibi" | "item.create.creative_blaze_cake.tooltip.condition1" | "biome.minecraft.deep_frozen_ocean" | "block.minecraft.banner.creeper.pink" | "commands.scoreboard.players.remove.success.multiple" | "advancement.create.cuckoo_clock" | "block.minecraft.banner.diagonal_right.blue" | "key.inventory" | "botania.tagline.corporeaCrystalCube" | "block.create.limestone_pillar" | "gamerule.doImmediateRespawn" | "mco.backup.nobackups" | "block.minecraft.banner.botania_spark_isolated.lightBlue" | "botania.challenge.apothecaryRefill.desc" | "argument.entity.options.unknown" | "string.naturescompass.precipitation" | "botania.tagline.starSword" | "create.station.remove_schedule" | "botania.entry.spectranthemum" | "lootr.advancements.100loot.description" | "block.minecraft.banner.curly_border.brown" | "controls.keybinds.title" | "lootr.advancements.1337loot.description" | "block.minecraft.banner.half_vertical_right.magenta" | "block.minecraft.skeleton_wall_skull" | "block.botania.dreamwood_stairs" | "gameMode.survival" | "gui.tooltips.ae2.CanInsertFrom" | "item.minecraft.sign" | "commands.scoreboard.objectives.display.alreadySet" | "botania.subtitle.prismRemoveLens" | "entity.minecraft.llama" | "subtitles.entity.iron_golem.death" | "commands.forge.tags.page_info" | "block.ae2.quartz_glass" | "block.create.fake_track" | "argument.float.low" | "create.hint.mechanical_arm_no_targets.title" | "create.gui.sequenced_gearshift.instruction" | "block.minecraft.crimson_fungus" | "curios.identifier.back" | "selectWorld.versionJoinButton" | "entity.botania.magic_landmine" | "item.ae2.cable_energy_acceptor" | "create.recipe.fan_blasting.fan" | "advancement.create.train_casing_00" | "config.jei.search.modNameSearchMode" | "item.minecraft.golden_leggings" | "item.minecraft.pumpkin_pie" | "botania.page.manaGear1" | "botania.page.manaGear2" | "botania.page.manaGear0" | "commands.bossbar.create.success" | "block.minecraft.banner.curly_border.lime" | "mco.brokenworld.downloaded" | "advancements.story.mine_diamond.description" | "block.minecraft.red_shulker_box" | "subtitles.entity.turtle.swim" | "ftbquests.task.ftbquests.xp.value" | "block.minecraft.banner.flower.light_blue" | "stat_type.minecraft.broken" | "botania.page.manaGear5" | "subtitles.entity.fishing_bobber.retrieve" | "botania.page.manaGear6" | "block.ae2.interface" | "botania.page.manaGear3" | "botania.page.manaGear4" | "botania.page.manaGear9" | "block.minecraft.wall_torch" | "botania.page.manaGear7" | "botania.page.manaGear8" | "block.create.stockpile_switch.tooltip.behaviour1" | "lootr.advancements.1cart.title" | "create.ponder.clutch.header" | "options.audioDevice" | "key.spectatorOutlines" | "block.minecraft.diorite_stairs" | "ftbquests.reward_table.used_in" | "block.minecraft.light_gray_terracotta" | "create.gui.terrainzapper.tool.clear" | "create.subtitle.whistle_high" | "block.minecraft.banner.stripe_bottom.green" | "block.minecraft.banner.square_top_left.red" | "gui.tooltips.ae2.BlockPlacementYes" | "death.attack.indirectMagic.item" | "gamerule.doMobLoot" | "item.minecraft.music_disc_otherside" | "create.ponder.tag.logistics.description" | "block.minecraft.player_head" | "ftbquests.file.drop_loot_crates" | "botania.armorset.will_guthan.shortDesc" | "item.minecraft.netherite_scrap" | "item.botania.golden_seeds" | "argument.item.tag.disallowed" | "item.botania.cosmetic_groucho_glasses" | "selectWorld.recreate.error.title" | "create.ponder.mechanical_arm_modes.text_9" | "gui.socialInteractions.tooltip.show" | "create.ponder.mechanical_arm_modes.text_8" | "create.ponder.mechanical_arm_modes.text_7" | "create.ponder.mechanical_arm_modes.text_6" | "create.ponder.mechanical_arm_modes.text_5" | "create.ponder.mechanical_arm_modes.text_4" | "create.ponder.mechanical_arm_modes.text_3" | "create.ponder.mechanical_arm_modes.text_2" | "create.ponder.mechanical_arm_modes.text_1" | "block.minecraft.banner.mojang.blue" | "block.botania.hopperhock_chibi.reference" | "ftbquests.task.ftbquests.fluid.amount" | "block.botania.floating_marimorphosis" | "item.create.vertical_gearbox" | "botania.tagline.manaEnchanting" | "block.minecraft.banner.circle.black" | "subtitles.entity.illusioner.hurt" | "block.ftbquests.chest.output_desc" | "subtitles.entity.silverfish.hurt" | "gui.jei.editMode.description" | "block.minecraft.banner.curly_border.blue" | "botania.entry.manaTablet" | "block.minecraft.banner.botania_flower.white" | "botania.entry.arcanerose" | "botania.tagline.manaDetector" | "block.create.small_ochrum_brick_wall" | "commands.publish.failed" | "forge.configgui.clumpingThreshold.tooltip" | "create.toolbox.depositBox" | "block.minecraft.banner.rhombus.pink" | "item.minecraft.tipped_arrow.effect.turtle_master" | "block.create.haunted_bell" | "block.create.hose_pulley" | "ftbquests.quest.text" | "advancement.create.display_link" | "botania.page.thirdEye1" | "botania.page.thirdEye0" | "block.minecraft.banner.bricks.magenta" | "block.create.light_blue_toolbox" | "gui.socialInteractions.show" | "ftbquests.reward_table.hide_tooltip" | "container.creative" | "itemGroup.materials" | "block.minecraft.banner.mojang.lime" | "block.minecraft.banner.stripe_center.gray" | "entity.minecraft.zoglin" | "string.naturescompass.warm" | "subtitles.entity.cow.death" | "block.ae2.crafting_monitor" | "ae2.rei_jei_integration.no_items" | "gui.ae2.WirelessRange" | "block.minecraft.banner.diagonal_right.lime" | "options.chat.visibility" | "block.minecraft.warped_stem" | "item.botania.vivid_seeds" | "mco.brokenworld.reset" | "block.minecraft.banner.triangle_bottom.cyan" | "block.botania.light_relay" | "gui.tooltips.ae2.ModifyAmountAction" | "tutorial.craft_planks.description" | "create.recipe.assembly.spout_filling_fluid" | "key.keyboard.keypad.multiply" | "subtitles.entity.cow.hurt" | "gamerule.universalAnger" | "stat.minecraft.walk_on_water_one_cm" | "block.create.cut_veridium_wall" | "botania.tagline.arcanerose" | "commands.save.saving" | "block.minecraft.dead_fire_coral_block" | "entity.minecraft.guardian" | "gui.ae2.SkyChest" | "gui.tooltips.ae2.ClearSettings" | "commands.whitelist.alreadyOff" | "item.create.blaze_cake" | "create.schedule.condition.threshold.buckets" | "translation.test.args" | "mco.selectServer.minigameNotSupportedInVersion" | "forge.configgui.disableVersionCheck" | "block.botania.purple_mystical_flower" | "botania.page.reachRing0" | "ftbquests.file.loot.entity.monster" | "botania.color.rainbow" | "botania.page.reachRing1" | "botania.page.daffomill0" | "block.create.controller_rail.tooltip" | "item.kubejs.copper_coin" | "argument.entity.options.y_rotation.description" | "achievement.ae2.P2P" | "narration.checkbox" | "advancements.story.lava_bucket.title" | "argument.curios.type.unknown" | "subtitles.block.big_dripleaf.tilt_up" | "create.keyinfo.toolmenu" | "create.tooltip.deployer.header" | "block.minecraft.banner.circle.red" | "create.ponder.shared.storage_on_contraption" | "block.create.encased_chain_drive" | "create.item_attributes.has_enchant" | "event.minecraft.raid" | "botania.page.daffomill1" | "create.item_attributes.color.inverted" | "gui.ae2.Brown" | "commands.experience.add.points.success.single" | "item.minecraft.zoglin_spawn_egg" | "itemGroup.decorations" | "block.create.cut_tuff_wall" | "subtitles.block.bubble_column.upwards_inside" | "botania.page.terrasteel4" | "item.minecraft.lingering_potion.effect.water" | "botania.page.terrasteel0" | "botania.page.terrasteel1" | "commands.team.empty.success" | "botania.page.terrasteel2" | "botania.page.terrasteel3" | "create.keyinfo.toolbelt" | "mco.configure.world.slot.empty" | "botaniamisc.cosmeticBauble" | "enchantment.minecraft.lure" | "create.ponder.portable_storage_interface.header" | "commands.team.option.color.unchanged" | "item.botania.manaweave_leggings" | "argument.nbt.expected.value" | "create.gui.terrainzapper.placement.merged" | "block.minecraft.pointed_dripstone" | "subtitles.block.generic.place" | "ftbquests.reward.random_bonus" | "block.create.small_deepslate_brick_wall" | "mco.configure.world.edit.subscreen.adventuremap" | "block.lootr.trophy" | "block.ae2.sky_stone_tank" | "ftbquests.chapter.subtitle" | "block.minecraft.banner.small_stripes.magenta" | "block.minecraft.banner.diagonal_left.white" | "botania.challenge.potionBrewer.desc" | "gamerule.fireDamage" | "botania.entry.itemFinder" | "advancement.create.diving_suit.desc" | "block.create.andesite_encased_cogwheel" | "block.minecraft.banner.diagonal_up_right.white" | "block.minecraft.banner.botania_flower.silver" | "lootr.advancements.1barrel.title" | "fml.messages.version.restriction.upper.inclusive" | "create.ponder.mechanical_drill_contraption.text_2" | "create.ponder.mechanical_drill_contraption.text_1" | "commands.effect.give.failed" | "gui.ae2.CraftingInterface" | "create.orientation.horizontal" | "create.ponder.fan_direction.header" | "demo.help.buy" | "subtitles.entity.lightning_bolt.thunder" | "mco.error.invalid.session.title" | "disconnect.loginFailedInfo.serversUnavailable" | "block.minecraft.yellow_concrete" | "botania.subtitle.bellows" | "mco.backup.button.restore" | "item.botania.manasteel_hoe" | "create.ponder.fluid_pipe_flow.header" | "block.minecraft.banner.half_vertical.white" | "effect.minecraft.hero_of_the_village" | "achievement.ae2.QuartzCrystal" | "patchouli.subtitle.book_open" | "death.attack.arrow" | "block.minecraft.void_air" | "sidebar_button.ftblibrary.toggle.rain" | "item.minecraft.ghast_spawn_egg" | "block.botania.natura_pylon" | "string.naturescompass.searching" | "block.minecraft.gray_concrete_powder" | "advancement.create.train_whistle" | "advancement.botania:superCorporeaRequest" | "item.ae2.yellow_smart_dense_cable" | "item.botania.mana_powder" | "block.create.green_sail" | "botania.subtitle.ding" | "botaniamisc.flareColor" | "create.recipe.heat_requirement.heated" | "botaniamisc.command.skyblock.help.4" | "create.subtitle.steam" | "options.percent_add_value" | "item.ae2.nether_quartz_pickaxe" | "item.minecraft.firework_star.light_gray" | "advancement.create.chocolate_bucket.desc" | "entity.minecraft.zombie_horse" | "entity.ae2.charged_quartz" | "subtitles.entity.turtle.shamble" | "argument.entity.options.valueless" | "addServer.resourcePack" | "key.screenshot" | "block.minecraft.banner.triangles_bottom.cyan" | "botaniamisc.command.skyblock.help.2" | "block.botania.mana_quartz_slab" | "block.create.small_tuff_bricks" | "botaniamisc.command.skyblock.help.3" | "create.item_attributes.enchanted" | "block.minecraft.white_concrete" | "botaniamisc.command.skyblock.help.0" | "botaniamisc.command.skyblock.help.1" | "block.minecraft.birch_wall_sign" | "advancements.husbandry.ride_a_boat_with_a_goat.title" | "botania.tagline.laputaShard" | "botania.page.prism3" | "botania.entry.avatar" | "botania.page.prism2" | "botania.page.prism1" | "botania.page.prism0" | "item.ae2.light_gray_smart_cable" | "create.generic.daytime.pm" | "block.create.purple_toolbox" | "create.gui.attribute_filter.add_reference_item" | "item.minecraft.experience_bottle" | "subtitles.entity.bat.death" | "subtitles.block.generic.break" | "create.generic.unit.millibuckets" | "create.ponder.smart_chute.header" | "commands.whitelist.add.success" | "item.create.schematic_and_quill" | "chat.ae2.isNowLocked" | "ftbteams.team_not_found" | "entity.minecraft.glow_squid" | "create.generic.range" | "block.minecraft.crimson_hyphae" | "block.minecraft.black_wool" | "config.jei.default" | "create.ponder.train_signal_signaling.text_5" | "create.ponder.train_signal_signaling.text_4" | "block.minecraft.magenta_bed" | "create.ponder.train_signal_signaling.text_7" | "create.ponder.train_signal_signaling.text_6" | "create.ponder.train_signal_signaling.text_1" | "subtitles.entity.snow_golem.death" | "create.ponder.train_signal_signaling.text_3" | "create.ponder.train_signal_signaling.text_2" | "create.schematic.tool.deploy.description.0" | "selectWorld.import_worldgen_settings.experimental.question" | "create.schematic.tool.deploy.description.1" | "block.minecraft.red_mushroom_block" | "entity.minecraft.fireball" | "block.botania.hydroangeas_motif.description" | "emi.category.botania.orechid" | "create.track.too_steep" | "create.schematic.tool.deploy.description.2" | "create.schematic.tool.deploy.description.3" | "mirror.none" | "subtitles.entity.zombie.converted_to_drowned" | "botania.challenge.boneMealFarm" | "block.botania.jaded_amaranthus" | "botania.entry.monocle" | "stat.minecraft.leave_game" | "advancements.nether.ride_strider_in_overworld_lava.title" | "stat.minecraft.damage_blocked_by_shield" | "block.botania.livingwood_stairs" | "forge.configgui.alwaysSetupTerrainOffThread" | "fml.menu.multiplayer.serveroutdated" | "botania.tagline.craftCrate" | "key.swapOffhand" | "block.create.cut_tuff_bricks" | "advancement.create.stressometer.desc" | "subtitles.item.armor.equip_chain" | "item.botania.manasteel_nugget" | "selectWorld.delete_failure" | "block.minecraft.banner.bricks.orange" | "selectWorld.futureworld.error.title" | "block.botania.hydroangeas" | "block.botania.white_mushroom" | "create.ponder.tag.arm_targets.description" | "jigsaw_block.keep_jigsaws" | "create.display_source.kinetic_stress.max" | "botania.page.spectrolus1.5" | "config.jei.mode" | "create.ponder.mechanical_crafter_covers.header" | "gui.tooltips.ae2.ReadWrite" | "block.botania.marimorphosis" | "subtitles.entity.wolf.hurt" | "argument.entity.options.team.description" | "create.ponder.shared.rpm16_source" | "item.ae2.light_blue_covered_cable" | "block.ae2.sky_stone_small_brick_stairs" | "gui.tooltips.ae2.PartitionStorage" | "create.track_target.success" | "commands.team.option.nametagVisibility.unchanged" | "commands.ftbquests.complete_instantly.text" | "block.minecraft.banner.botania_sapling.red" | "block.botania.metamorphic_desert_cobblestone_wall" | "create.generic.delay" | "create.ponder.train_signal_signaling.text_9" | "create.ponder.train_signal_signaling.text_8" | "mco.backup.button.download" | "ftbquests.gui.no_rewards" | "advancements.adventure.spyglass_at_dragon.title" | "commands.title.show.actionbar.single" | "ftbquests.task.ftbquests.checkmark" | "ftbquests.chapter.image.image" | "subtitles.entity.painting.break" | "patchouli.gui.lexicon.history.info" | "commands.bossbar.set.name.unchanged" | "argument.criteria.invalid" | "key.socialInteractions" | "create.ponder.sail.header" | "botania.challenge.kekimurusSetup.desc" | "item.botania.gaia_ingot" | "item.ae2.brown_glass_cable" | "commands.ftbquests.weigh_from_emc.text" | "ftblibrary.mb" | "chat.ae2.MachineNotPowered" | "item.ae2.light_gray_lumen_paint_ball" | "botania.tagline.dandelifeon" | "commands.team.option.deathMessageVisibility.success" | "botania.armorset.will_guthan.desc" | "block.minecraft.amethyst_block" | "create.generic.daytime.minute" | "subtitles.entity.painting.place" | "botania.page.endoflame3" | "block.botania.labellia.reference" | "botania.page.endoflame2" | "botania.page.endoflame1" | "botania.page.endoflame0" | "block.minecraft.banner.small_stripes.orange" | "item.ae2.purple_paint_ball" | "pack.openFolder" | "item.botania.thor_ring" | "item.ae2.memory_card_yellow" | "emi.category.botania.orechid_ignem" | "addServer.resourcePack.enabled" | "create.ponder.creative_motor.text_1" | "create.ponder.creative_motor.text_2" | "achievement.ae2.Networking3.desc" | "subtitles.entity.parrot.imitate.slime" | "commands.debug.alreadyRunning" | "forge.configgui.fullBoundingBoxLadders" | "block.botania.shulk_me_not.reference" | "item.minecraft.firework_rocket" | "jei.tooltip.bookmarks.usage.nokey" | "advancements.nether.create_full_beacon.title" | "block.minecraft.crimson_pressure_plate" | "botania.tagline.terrasteelArmor" | "advancement.create.windmill.desc" | "item.create.schematic.tooltip.summary" | "item.minecraft.shield.brown" | "subtitles.entity.wither.shoot" | "gamerule.doEntityDrops.description" | "mco.selectServer.configure" | "create.schedule.instruction.name_edit_box_1" | "emi.category.botania.elven_trade" | "block.create.cut_ochrum_brick_wall" | "create.item_attributes.book_copy_second.inverted" | "item.create.linked_controller.tooltip" | "lootr.commands.blockpos" | "gui.up" | "commands.fill.failed" | "create.schedule.instruction.name_edit_box_2" | "create.station.remove_auto_schedule" | "item.ae2.white_smart_dense_cable" | "create.ponder.deployer.text_1" | "block.minecraft.deepslate_brick_slab" | "block.minecraft.banner.botania_spark_isolated.lime" | "create.ponder.track_portal.header" | "block.minecraft.banner.botania_shovel.red" | "create.contraptions.movement_mode.rotate_place" | "create.ponder.deployer.text_8" | "mco.selectServer.leave" | "create.ponder.deployer.text_9" | "create.ponder.deployer.text_6" | "create.ponder.deployer.text_7" | "create.ponder.deployer.text_4" | "item.minecraft.cooked_chicken" | "botania.subtitle.spreaderUncover" | "create.ponder.deployer.text_5" | "item.patchouli:intro_book.name" | "create.ponder.deployer.text_2" | "create.ponder.deployer.text_3" | "options.attackIndicator" | "create.display_link.attached_side" | "gui.jei.category.brewing" | "selectWorld.newWorld" | "item.minecraft.nether_star" | "create.schedule.condition.threshold.status" | "botania.entry.terrasteelArmor" | "item.create.honey_bucket" | "ftbquests.reward.autoclaim.no_toast" | "chat.link.confirm" | "block.minecraft.banner.botania_sapling.black" | "block.create.cut_scoria_brick_stairs" | "block.botania.floating_hyacidus" | "botania.page.manaRing2" | "botania.page.manaRing1" | "item.create.creative_blaze_cake" | "botania.page.manaRing0" | "item.botania.lens_warp.short" | "subtitles.item.nether_wart.plant" | "mco.reset.world.seed" | "block.minecraft.bone_block" | "ftbquests.quest.shape" | "gui.jei.category.fuel.smeltCount" | "botania.challengelevel.hard" | "create.menu.configure" | "block.minecraft.banner.half_vertical.magenta" | "create.subtitle.whistle_train_manual_low" | "block.create.waxed_copper_tile_stairs" | "create.ponder.mechanical_arm.text_1" | "block.minecraft.banner.rhombus.orange" | "create.ponder.mechanical_arm.text_3" | "botania.page.teruTeruBozu1" | "create.ponder.mechanical_arm.text_2" | "create.ponder.mechanical_arm.text_5" | "create.ponder.mechanical_arm.text_4" | "sign.edit" | "create.ponder.mechanical_arm.text_7" | "create.ponder.mechanical_arm.text_6" | "narration.checkbox.usage.focused" | "botania.page.teruTeruBozu0" | "create.ponder.mechanical_arm.text_8" | "block.minecraft.spruce_pressure_plate" | "botania.page.gatherDrum0" | "create.schematics.maxAllowedSize" | "botania.page.gatherDrum1" | "create.item_attributes.book_copy_first" | "multiplayer.disconnect.invalid_packet" | "debug.reload_resourcepacks.message" | "item.botania.terra_axe" | "item.minecraft.music_disc_strad" | "item.botania.rune_greed" | "entity.minecraft.boat" | "item.botania.elementium_hoe" | "advancements.adventure.summon_iron_golem.description" | "block.minecraft.banner.botania_spark_isolated.blue" | "block.botania.hyacidus.reference" | "subtitles.entity.villager.hurt" | "block.minecraft.birch_fence" | "commands.ftbquests.command.error.no_object" | "advancement.create.foods" | "block.botania.corporea_brick_wall" | "block.minecraft.banner.half_vertical.green" | "create.ponder.funnel_intro.text_1" | "item.ae2.cable_interface" | "block.minecraft.banner.triangles_top.light_gray" | "botaniamisc.shardLevel" | "item.create.shadow_steel.tooltip.condition1" | "createWorld.customize.custom.coordinateScale" | "botania.tagline.bloodPendant" | "create.ponder.fan_direction.text_1" | "effect.minecraft.conduit_power" | "block.minecraft.banner.square_top_left.black" | "create.ponder.fan_direction.text_2" | "ftbquests.task.ftbquests.interaction.type" | "block.create.portable_fluid_interface" | "multiplayer.disconnect.name_taken" | "advancement.botania:spawnerMoverUse.desc" | "disconnect.loginFailedInfo.insufficientPrivileges" | "botania.tagline.rannuncarpus" | "item.ae2.identity_annihilation_plane" | "botania.subtitle.potionCreate" | "create.track_target.no_junctions" | "subtitles.entity.elder_guardian.ambient_land" | "create.ponder.fluid_pipe_interaction.header" | "curios.modifiers.ring" | "block.minecraft.waxed_exposed_cut_copper_stairs" | "advancement.botania:manaBlasterShoot.desc" | "death.attack.outOfWorld" | "menu.quit" | "block.botania.metamorphic_mesa_bricks_wall" | "stat.minecraft.interact_with_cartography_table" | "forge.configgui.zombieBabyChance" | "gui.ae2.ProcessingPattern" | "block.minecraft.banner.stripe_left.white" | "chat.queue" | "create.ponder.hose_pulley.text_4" | "create.ponder.hose_pulley.text_3" | "create.ponder.hose_pulley.text_2" | "commands.scoreboard.players.operation.success.single" | "item.botania.virus_necrodermal" | "botania.entry.overgrowthSeed" | "create.ponder.hose_pulley.text_1" | "create.ponder.hose_pulley.text_7" | "create.gui.sequenced_gearshift.instruction.turn_angle" | "create.ponder.hose_pulley.text_6" | "create.ponder.hose_pulley.text_5" | "block.minecraft.deepslate_gold_ore" | "block.minecraft.end_stone_brick_wall" | "subtitles.entity.puffer_fish.blow_up" | "block.botania.metamorphic_taiga_bricks_slab" | "advancement.create.glass_pipe.desc" | "item.create.copper_backtank.tooltip.behaviour2" | "botania.subtitle.arcane_rose_disenchant" | "item.create.copper_backtank.tooltip.behaviour1" | "block.botania.labellia" | "item.create.example_item.tooltip" | "block.minecraft.blue_stained_glass_pane" | "block.create.polished_cut_crimsite_stairs" | "block.minecraft.banner.botania_tiny_potato.black" | "botania.entry.pixieRing" | "block.botania.black_mystical_flower" | "gui.socialInteractions.hidden_in_chat" | "block.minecraft.banner.botania_sapling.silver" | "create.gui.schematicannon.showOptions" | "commands.bossbar.list.bars.some" | "effect.minecraft.instant_damage" | "block.minecraft.blue_stained_glass" | "block.create.content_observer.tooltip.condition2" | "enchantment.minecraft.protection" | "block.create.content_observer.tooltip.condition1" | "options.guiScale.auto" | "block.create.small_scorchia_brick_slab" | "lootr.message.decayed" | "gui.close" | "botania.page.runeAltar13" | "block.minecraft.weeping_vines" | "botania.page.runeAltar12" | "botania.page.runeAltar15" | "botania.page.runeAltar14" | "subtitles.entity.snowball.throw" | "botania.page.runeAltar11" | "block.create.refined_radiance_casing" | "create.ponder.valve_handle.header" | "botania.page.runeAltar10" | "create.ponder.mechanical_saw_contraption.header" | "botania.page.runeAltar17" | "botania.page.runeAltar16" | "botania.page.runeAltar19" | "botania.entry.lens" | "botania.page.runeAltar18" | "enchantment.level.10" | "block.create.schematicannon.tooltip.summary" | "advancement.create.mechanical_arm" | "gui.tooltips.ae2.TerminalStyle_Full" | "create.ponder.crushing_wheels.text_1" | "item.minecraft.black_dye" | "create.ponder.crushing_wheels.text_2" | "create.ponder.crushing_wheels.text_3" | "create.ponder.crushing_wheels.text_4" | "block.minecraft.polished_blackstone_brick_wall" | "commands.time.query" | "advancements.end.enter_end_gateway.title" | "structure_block.button.detect_size" | "advancements.husbandry.make_a_sign_glow.title" | "container.loom" | "forge.configgui.treatEmptyTagsAsAir" | "item.botania.overgrowth_seed" | "create.tooltip.stressImpact.overstressed" | "itemGroup.create.palettes" | "selectServer.edit" | "block.minecraft.anvil" | "create.item_attributes.fluid_container" | "block.create.portable_storage_interface" | "subtitles.enchant.thorns.hit" | "block.botania.light_gray_mushroom" | "block.botania.floating_tangleberrie_chibi" | "ftbquests.reward.ftbquests.gamestage.silent" | "item.botania.unholy_cloak" | "block.minecraft.brewing_stand" | "create.ponder.bearing_modes.header" | "block.minecraft.pink_candle" | "botania.entry.divaCharm" | "block.create.fluid_valve" | "jei.message.copy.recipe.id.success" | "item.minecraft.villager_spawn_egg" | "block.minecraft.light_gray_concrete" | "ftbquests.quest.description" | "ftbquests.gui.view_dependencies" | "seasonalFeatures.enabled" | "botania.page.runeAltar20" | "botania.page.runeAltar22" | "botania.page.runeAltar21" | "create.ponder.deployer_modes.header" | "compliance.playtime.hours" | "block.create.pulley_magnet" | "block.minecraft.banner.botania_hoe.cyan" | "item.minecraft.saddle" | "block.minecraft.banner.rhombus.green" | "menu.loadingLevel" | "structure_block.size" | "subtitles.entity.goat.long_jump" | "block.minecraft.red_mushroom" | "structure_block.integrity.integrity" | "create.display_source.station_summary.train_name_column" | "advancements.story.shiny_gear.description" | "block.create.polished_cut_limestone_stairs" | "block.minecraft.banner.stripe_downleft.light_blue" | "block.minecraft.banner.cross.lime" | "botania.page.complexBrews1b" | "botania.page.complexBrews1a" | "enchantment.minecraft.sharpness" | "commands.data.block.get" | "item.ae2.engineering_processor" | "botania.tagline.blazeBlock" | "botania.page.laputaShard3" | "botania.page.laputaShard2" | "subtitles.entity.enderman.ambient" | "tag.botania.glimmering_livingwood_logs" | "gamerule.playersSleepingPercentage.description" | "botania.page.laputaShard1" | "botania.page.laputaShard0" | "botania.page.complexBrews2a" | "botania.page.complexBrews2b" | "disconnect.closed" | "commands.experience.set.levels.success.single" | "container.spectatorCantOpen" | "block.minecraft.banner.diagonal_left.lime" | "resourcePack.vanilla.description" | "block.minecraft.infested_mossy_stone_bricks" | "ftbquests.rewards" | "botania.triggers.runeAltarCanCraft" | "gui.toTitle" | "selectServer.refresh" | "botania.page.complexBrews3b" | "botania.page.complexBrews3a" | "block.minecraft.banner.bricks.gray" | "narrator.controls.unbound" | "advancement.create.glass_pipe" | "spectatorMenu.close" | "ftbquests.quest.min_required_dependencies" | "waila.ae2.EnchantedWith" | "subtitles.ambient.cave" | "subtitles.block.pointed_dripstone.drip_lava" | "advancement.botania:infiniteFruit" | "pack.available.title" | "commands.save.success" | "ftbquests.quest.tasks_ignore_dependencies" | "subtitles.item.armor.equip_diamond" | "subtitles.item.armor.equip_netherite" | "botania.page.complexBrews4b" | "createWorld.customize.custom.useTemples" | "block.minecraft.dark_oak_stairs" | "lootr.message.invalid_table" | "block.botania.metamorphic_desert_bricks_wall" | "item.ae2.magenta_covered_dense_cable" | "botania.page.complexBrews4a" | "block.botania.stripped_livingwood_wall" | "block.botania.abstruse_platform" | "create.display_source.label" | "block.minecraft.andesite" | "config.jei.advanced.colorSearchEnabled.comment" | "block.minecraft.banner.diagonal_left.green" | "stat.minecraft.pig_one_cm" | "subtitles.entity.zoglin.angry" | "botania.entry.flightTiara" | "create.ponder.redstone_contact.header" | "botania.challenge.orechid.desc" | "block.minecraft.gray_carpet" | "argument.entity.selector.not_allowed" | "subtitles.item.armor.equip_gold" | "potion.withAmplifier" | "item.minecraft.diamond_leggings" | "argument.player.entities" | "create.ponder.speedometer.text_2" | "create.ponder.speedometer.text_1" | "subtitles.entity.ravager.attack" | "block.minecraft.cobbled_deepslate_slab" | "create.ponder.speedometer.text_3" | "block.minecraft.chain_command_block" | "block.create.cut_dripstone_wall" | "block.minecraft.iron_ore" | "forge.configgui.forgeCloudsEnabled.tooltip" | "advancement.botania:lokiRingMany" | "create.gui.sequenced_gearshift.speed.back_fast" | "botania.entry.judgementCloaks" | "subtitles.block.pointed_dripstone.drip_water_into_cauldron" | "block.botania.rosa_arcana.reference" | "commands.save.failed" | "spreader.posShift" | "translation.test.escape" | "itemGroup.buildingBlocks" | "mco.brokenworld.title" | "createWorld.customize.flat.height" | "block.create.framed_glass_pane" | "create.toolbox.depositAll" | "command.unknown.argument" | "create.schedule.non_controlling_seat" | "create.ponder.tag.kinetic_sources.description" | "block.minecraft.deepslate_tile_stairs" | "botania.entry.skyDirtRod" | "create.item_attributes.added_by.inverted" | "item.botania.laputa_shard" | "biome.minecraft.the_void" | "ftbquests.gui.looping_dependencies" | "create.materialChecklist.blocksNotLoaded" | "block.minecraft.light" | "advancements.adventure.throw_trident.description" | "commands.scoreboard.players.get.success" | "subtitles.entity.shulker.ambient" | "block.minecraft.redstone_torch" | "gui.tooltips.ae2.InterfaceCraftingMode" | "create.subtitle.crafter_click" | "block.minecraft.waxed_oxidized_copper" | "createWorld.customize.custom.useWaterLakes" | "botania.entry.dandelifeon" | "create.ponder.sequenced_gearshift.text_2" | "create.ponder.sequenced_gearshift.text_1" | "create.ponder.sequenced_gearshift.text_4" | "gui.ok" | "advancement.create.long_travel.desc" | "create.ponder.sequenced_gearshift.text_3" | "ftbquests.title" | "create.ponder.sequenced_gearshift.text_5" | "create.ponder.chain_drive.header" | "block.minecraft.stripped_spruce_wood" | "ftbquests.reward.ftbquests.item.count" | "block.botania.light_gray_double_flower" | "botania.entry.elvenLore" | "block.botania.scorched_grass" | "botania.page.diviningRod2" | "botania.page.diviningRod1" | "botania.page.diviningRod0" | "commands.give.success.multiple" | "death.attack.generic.player" | "block.minecraft.red_banner" | "selectWorld.dataPacks" | "item.minecraft.cod_bucket" | "gui.updated" | "item.create.wand_of_symmetry" | "biome.minecraft.savanna_plateau" | "gui.no" | "commands.bossbar.get.max" | "block.botania.kekimurus.reference" | "create.schedule.skip" | "createWorld.customize.preset.redstone_ready" | "mco.invites.button.reject" | "lootr.commands.usage" | "block.create.magenta_sail" | "tag.botania.elementium_ingots" | "block.minecraft.banner.cross.light_gray" | "item.botania.holy_cloak" | "block.minecraft.bell" | "item.minecraft.shield.cyan" | "createWorld.customize.buffet.title" | "block.botania.floating_bellethorn_chibi" | "botania.armorset.will_torag.shortDesc" | "advancement.create.portable_storage_interface" | "create.display_source.boiler.for_boiler_status" | "botania.subtitle.gaiaSummon" | "structure_block.position.z" | "structure_block.position.y" | "structure_block.position.x" | "botania.page.tinyPotato1" | "item.ae2.blue_covered_cable" | "item.ae2.energy_level_emitter" | "botania.page.tinyPotato0" | "create.schedule.condition.threshold.item_measure" | "botania.page.tinyPotato2" | "forge.configgui.fixVanillaCascading.tooltip" | "block.minecraft.dandelion" | "block.botania.pattern_framed_dreamwood" | "patchouli.gui.lexicon.button.mark_all_read" | "commands.team.join.success.single" | "subtitles.entity.evoker.celebrate" | "block.botania.purple_petal_block" | "advancements.story.mine_diamond.title" | "block.botania.spawner_claw" | "item.minecraft.writable_book" | "block.minecraft.rooted_dirt" | "subtitles.entity.parrot.imitate.vex" | "block.create.cut_veridium_brick_wall" | "botania.page.corporeaInterceptor2" | "botania.page.corporeaInterceptor1" | "subtitles.entity.dolphin.eat" | "botania.page.corporeaInterceptor0" | "create.track.perpendicular" | "subtitles.entity.panda.eat" | "block.botania.livingrock_stairs" | "block.minecraft.banner.cross.blue" | "narration.recipe.usage" | "block.botania.shimmerrock_slab" | "block.minecraft.raw_gold_block" | "item.minecraft.potion.effect.turtle_master" | "block.minecraft.grindstone" | "subtitles.entity.zombified_piglin.death" | "item.ae2.portable_item_cell_16k" | "botania.subtitle.equipTerrasteel" | "ftbquests.gui.select_quest_object" | "block.minecraft.banner.rhombus.white" | "block.minecraft.banner.bricks.light_gray" | "manaSpreaders.silent" | "item.minecraft.spider_spawn_egg" | "create.gui.sequenced_gearshift.instruction.turn_angle.angle" | "create.ponder.pulse_repeater.header" | "gui.ae2.Empty" | "block.minecraft.green_bed" | "create.subtitle.depot_plop" | "biome.minecraft.swamp" | "mco.selectServer.open" | "block.create.small_limestone_brick_slab" | "death.attack.cactus" | "item.botania.lexicon" | "mco.reset.world.inspiration" | "block.minecraft.crimson_trapdoor" | "create.boiler.lvl" | "ftbquests.gui.times_completed" | "attribute.name.forge.swim_speed" | "chat.ae2.UnsupportedUpgrade" | "block.minecraft.banner.botania_shovel.green" | "merchant.current_level" | "block.minecraft.red_bed" | "ftbquests.icon.tooltip" | "block.create.cut_dripstone_bricks" | "item.botania.cosmetic_polka_dotted_bows" | "botania.page.elfResources10" | "item.ae2.memory_card_white" | "death.fell.assist" | "entity.minecraft.player" | "multiplayer.disconnect.server_full" | "block.minecraft.smooth_basalt" | "botania.page.terraAxe1" | "botania.page.terraAxe0" | "botania.page.pollidisiac0" | "botania.page.pollidisiac1" | "item.minecraft.turtle_helmet" | "subtitles.entity.panda.hurt" | "subtitles.entity.panda.pre_sneeze" | "chat.ae2.DeviceNotLinked" | "block.create.cut_crimsite_wall" | "advancement.botania:rankSSPick" | "entity.minecraft.arrow" | "block.minecraft.birch_stairs" | "block.minecraft.banner.botania_shovel.white" | "lanServer.title" | "subtitles.entity.polar_bear.ambient" | "commands.title.reset.single" | "gui.ae2.Precise" | "block.minecraft.banner.half_vertical_right.light_blue" | "gui.ae2.PriorityInsertionHint" | "item.ae2.memory_card_green" | "advancement.create.crusher_maxed_0000" | "botania.entry.clip" | "gui.ae2.Crafting" | "item.minecraft.firework_star.black" | "commands.banip.info" | "commands.scoreboard.objectives.add.duplicate" | "block.create.brass_encased_large_cogwheel" | "block.botania.narslimmus.reference" | "options.video" | "advancement.create.stressometer_maxed.desc" | "commands.ae2.usage" | "item.patchouli:pamphlet.name" | "botania.page.manaTablet1" | "botania.page.manaTablet0" | "botania.page.manaAlchemy37" | "item.create.experience_nugget" | "botania.page.manaAlchemy36" | "botania.page.manaAlchemy39" | "botania.page.manaAlchemy38" | "create.display_source.redstone_power.display" | "block.minecraft.banner.square_top_right.green" | "gui.tooltips.ae2.TransferToStorageCell" | "block.minecraft.banner.stripe_center.pink" | "gui.tooltips.ae2.LevelType" | "botania.page.manaTablet2" | "create.schedule.condition.time_of_day.rotation.every_1" | "item.ae2.cyan_smart_dense_cable" | "create.schedule.condition.time_of_day.rotation.every_2" | "create.subtitle.funnel_flap" | "create.schedule.condition.time_of_day.rotation.every_3" | "botania.tagline.turntable" | "block.minecraft.banner.triangles_top.black" | "create.contraptions.clockwork.hour_first_24" | "options.chunks" | "botania.page.manaAlchemy40" | "botania.page.manaAlchemy41" | "botania.page.manaAlchemy29" | "block.botania.floating_kekimurus" | "botania.page.manaAlchemy26" | "block.create.cut_scorchia_stairs" | "botania.page.manaAlchemy25" | "create.ponder.encased_fluid_pipe.text_3" | "botania.page.manaAlchemy28" | "create.schedule.condition.redstone_link_off" | "create.ponder.encased_fluid_pipe.text_2" | "botania.page.manaAlchemy27" | "create.ponder.encased_fluid_pipe.text_1" | "block.botania.mana_quartz" | "block.create.schematic_table.tooltip" | "block.minecraft.banner.curly_border.magenta" | "create.schedule.condition.time_of_day.rotation.every_4" | "advancements.nether.obtain_crying_obsidian.description" | "create.schedule.condition.time_of_day.rotation.every_6" | "waila.ae2.P2PUnlinked" | "botania.page.manaAlchemy33" | "botania.page.manaAlchemy32" | "achievement.ae2.Compass.desc" | "botania.page.manaAlchemy35" | "botania.page.manaAlchemy34" | "commands.effect.clear.everything.success.multiple" | "botania.entry.complexBrews" | "botania.page.manaAlchemy31" | "botania.page.manaAlchemy30" | "gui.tooltips.ae2.P2PFrequency" | "botania.page.manaAlchemy19" | "botania.page.manaAlchemy18" | "block.minecraft.banner.square_top_right.white" | "botania.page.manaAlchemy15" | "botania.page.manaAlchemy14" | "ftbquests" | "botania.page.manaAlchemy17" | "gui.ae2.CanBeEnchanted" | "botania.page.manaAlchemy16" | "selectWorld.select" | "create.logistics.filter.apply_count" | "block.minecraft.wither_rose" | "create.station.carriage_number" | "create.subtitle.slime_added" | "botania.page.manaAlchemy22" | "botania.page.manaAlchemy21" | "botania.page.manaAlchemy24" | "advancements.nether.get_wither_skull.description" | "botania.page.manaAlchemy23" | "block.create.copper_valve_handle" | "debug.advanced_tooltips.off" | "botania.page.manaAlchemy20" | "create.contraption.controls.stop_controlling" | "block.botania.infused_grass" | "curios.cosmetic" | "block.minecraft.banner.half_horizontal_bottom.black" | "block.minecraft.brick_wall" | "ftbquests.reward_table.and_more" | "subtitles.entity.skeleton_horse.hurt" | "block.botania.white_shiny_flower" | "string.naturescompass.notFound" | "block.minecraft.bee_nest" | "botania.tagline.agricarnation" | "botania.page.manaAlchemy11" | "botania.page.manaAlchemy10" | "botania.page.manaAlchemy13" | "botania.page.manaAlchemy12" | "botania.entry.starfield" | "item.patchouli:test_book_2.name" | "patchouli.gui.lexicon.visualize_letter" | "item.minecraft.honeycomb" | "botania.entry.tangleberrie" | "block.ae2.fluix_wall" | "item.minecraft.magma_cream" | "create.gui.filter.deny_list.description" | "block.create.brass_ladder" | "create.display_source.fill_level.progress_bar" | "ftbquests.chapter.image.width" | "options.accessibility.title" | "tag.botania.manasteel_ingots" | "item.ae2.memory_card_gray" | "item.minecraft.music_disc_11" | "block.create.mechanical_drill" | "create.generic.daytime.am" | "item.minecraft.music_disc_13" | "block.minecraft.green_banner" | "block.botania.floating_vinculotus" | "argument.pos.mixed" | "item.minecraft.golden_horse_armor" | "block.create.polished_cut_veridium" | "block.create.gray_toolbox" | "gui.ae2.security.build.name" | "create.display_source.count_items" | "subtitles.block.dispenser.fail" | "block.botania.red_string_container" | "create.ponder.creative_fluid_tank.header" | "argument.time.invalid_unit" | "block.create.cut_crimsite_stairs" | "advancements.end.kill_dragon.title" | "gui.online" | "stat.minecraft.eat_cake_slice" | "create.ponder.train_assembly.header" | "block.minecraft.shroomlight" | "argument.block.property.duplicate" | "subtitles.entity.parrot.imitate.zombie_villager" | "createWorld.customize.custom.next" | "stat.minecraft.open_enderchest" | "botania.subtitle.lexiconOpen" | "block.minecraft.orange_wool" | "create.gui.schedule.remove_entry" | "chat.disabled.profile" | "botania.page.decorativeBlocks0" | "botania.page.decorativeBlocks2" | "botania.page.decorativeBlocks1" | "block.minecraft.orange_shulker_box" | "commands.teleport.invalidPosition" | "ftbquests.task.ftbquests.npc_faction.id" | "botania.entry.dreamwoodSpreader" | "subtitles.entity.phantom.death" | "ftbquests.file.loot.size" | "item.minecraft.diamond_hoe" | "commands.tag.add.success.single" | "create.schematic.tool.rotate" | "botania.page.decorativeBlocks4" | "botania.page.decorativeBlocks3" | "botania.page.decorativeBlocks6" | "botania.page.decorativeBlocks5" | "botania.page.decorativeBlocks8" | "botania.page.decorativeBlocks7" | "botania.page.decorativeBlocks9" | "create.subtitle.deny" | "block.minecraft.banner.diagonal_left.blue" | "create.item_attributes.in_item_group.inverted" | "create.display_source.kinetic_speed.directional" | "subtitles.entity.cat.ambient" | "block.minecraft.horn_coral" | "subtitles.entity.enderman.hurt" | "patchouli.gui.lexicon.complete" | "subtitles.entity.piglin.step" | "botania.page.dispenserTweaks0" | "block.minecraft.banner.botania_lexicon.yellow" | "block.minecraft.gray_candle" | "mco.selectServer.closeserver" | "item.minecraft.lingering_potion.effect.mundane" | "block.ae2.drive" | "block.botania.shimmerwood_planks" | "commands.forceload.removed.all" | "create.item_attributes.has_name" | "block.botania.dark_quartz_slab" | "botaniamisc.invFull" | "create.gui.terrainzapper.pattern.solid" | "block.minecraft.dark_oak_pressure_plate" | "botania.tagline.azulejo" | "block.minecraft.banner.square_bottom_left.light_blue" | "block.create.cut_calcite_brick_stairs" | "advancements.husbandry.silk_touch_nest.description" | "gui.tooltips.ae2.CpuSelectionModeAutomationOnly" | "block.minecraft.nether_quartz_ore" | "color.minecraft.cyan" | "item.patchouli.guide_book.invalid" | "debug.advanced_tooltips.on" | "argument.entity.options.predicate.description" | "gui.offline" | "subtitles.entity.strider.retreat" | "block.minecraft.banner.stripe_left.cyan" | "botania.page.manaMirror0" | "botania.page.manaMirror1" | "advancement.create.musical_arm.desc" | "block.minecraft.crimson_button" | "createWorld.customize.custom.useRavines" | "advancements.story.upgrade_tools.title" | "create.ponder.linear_chassis_group.header" | "block.minecraft.banner.half_horizontal.black" | "block.minecraft.banner.stripe_right.pink" | "item.botania.elementium_ingot" | "config.jei.advanced.itemBlacklist.comment" | "block.minecraft.banner.gradient.black" | "block.botania.teru_teru_bozu" | "narration.suggestion.tooltip" | "advancement.create.copper_casing" | "block.ae2.sky_stone_stairs" | "botania.entry.brewery" | "advancements.adventure.spyglass_at_parrot.description" | "commands.forceload.added.single" | "block.create.brass_block" | "block.minecraft.banner.base.magenta" | "advMode.mode.sequence" | "options.hideLightningFlashes.tooltip" | "block.minecraft.yellow_wool" | "block.minecraft.banner.botania_spark_dispersive.yellow" | "block.minecraft.crimson_fence" | "create.hint.derailed_train" | "attribute.name.generic.luck" | "block.minecraft.banner.botania_spark_dispersive.lime" | "commands.pardonip.invalid" | "gui.ae2.MaxPower" | "mco.configure.world.subscription.day" | "entity.minecraft.polar_bear" | "botania.tagline.ghostRail" | "ftbquests.reward.emergency" | "narration.recipe.usage.more" | "subtitles.entity.villager.work_farmer" | "botania.tagline.bergamute" | "block.minecraft.banner.mojang.orange" | "gui.tooltips.ae2.EmitterMode" | "botania.tagline.spawnerMover" | "block.create.rose_quartz_block" | "key.advancements" | "block.botania.red_pavement" | "create.minecart_coupling.two_couplings_max" | "subtitles.block.tripwire.detach" | "create.schedule.reset" | "botania.armorset.will_karil.shortDesc" | "block.minecraft.cracked_deepslate_tiles" | "botania.page.jiyuulia1" | "botania.page.jiyuulia0" | "create.gui.symmetryWand.mirrorType" | "block.botania.metamorphic_plains_cobblestone_stairs" | "block.create.analog_lever" | "item.minecraft.spectral_arrow" | "stat.minecraft.interact_with_loom" | "create.ponder.creative_motor_mojang.header" | "achievement.ae2.PatternTerminal.desc" | "block.minecraft.banner.piglin.lime" | "item.botania.mana_ring_greater" | "create.ponder.weighted_ejector_tunnel.text_1" | "selectWorld.versionQuestion" | "create.schedule.condition.player_count.players" | "create.ponder.weighted_ejector_tunnel.text_2" | "create.ponder.weighted_ejector_tunnel.text_3" | "item.minecraft.salmon_bucket" | "create.ponder.weighted_ejector_tunnel.text_4" | "advancements.husbandry.root.description" | "biome.minecraft.crimson_forest" | "item.ae2.quartz_fiber" | "block.create.white_sail" | "block.minecraft.banner.gradient_up.light_gray" | "block.minecraft.cyan_banner" | "block.botania.brown_floating_flower" | "botania.tagline.corporeaFunnel" | "create.ponder.weighted_ejector_tunnel.text_5" | "commands.item.entity.set.success.multiple" | "block.minecraft.banner.diagonal_right.white" | "block.minecraft.banner.botania_spark_dispersive.blue" | "mco.upload.button.name" | "block.create.track" | "generator.custom" | "argument.entity.selector.missing" | "block.create.cut_dripstone_brick_stairs" | "create.tooltip.keyCtrl" | "block.minecraft.smooth_red_sandstone_slab" | "item.botania.cosmetic_ancient_mask" | "gamerule.fallDamage" | "block.minecraft.warped_planks" | "block.minecraft.banner.diagonal_up_right.yellow" | "ftbquests.tags" | "entity.botania.falling_star" | "create.item_attributes.astralsorcery_constellation.inverted" | "narrator.position.screen" | "block.minecraft.banner.half_vertical_right.purple" | "block.minecraft.banner.diagonal_right.light_gray" | "create.contraptions.cart_movement_mode.rotate" | "block.minecraft.cracked_nether_bricks" | "ftbteams.info.owner.none" | "key.keyboard.up" | "string.naturescompass.back" | "config.jei.search.creativeTabSearchMode.comment" | "block.minecraft.banner.stripe_downleft.green" | "botaniamisc.relicUnbound" | "mco.configure.current.minigame" | "block.minecraft.banner.piglin.blue" | "block.botania.open_crate" | "ftbquests.task" | "item.minecraft.zombie_villager_spawn_egg" | "block.create.nozzle.tooltip.summary" | "block.minecraft.blackstone_slab" | "item.minecraft.shulker_spawn_egg" | "gui.cut" | "create.ponder.item_vault_storage.text_4" | "commands.publish.alreadyPublished" | "gui.ae2.ExportBus" | "create.ponder.item_vault_storage.text_1" | "create.ponder.item_vault_storage.text_3" | "create.ponder.item_vault_storage.text_2" | "subtitles.entity.goat.eat" | "block.botania.white_floating_flower" | "inventory.hotbarSaved" | "structure_block.load_prepare" | "itemGroup.tiab_creative_tab_name" | "itemGroup.ae2.main" | "create.gui.sequenced_gearshift.instruction.delay" | "forge.configgui.removeErroringEntities.tooltip" | "block.minecraft.banner.square_top_right.cyan" | "block.minecraft.cobweb" | "color.minecraft.brown" | "block.botania.metamorphic_desert_stone_wall" | "filled_map.buried_treasure" | "subtitles.entity.guardian.flop" | "subtitles.entity.bat.takeoff" | "ccl.commands.killall.fail" | "entity.minecraft.tropical_fish.type.sunstreak" | "item.ae2.inverter_card" | "multiplayer.applyingPack" | "commands.debug.stopped" | "selectWorld.backupQuestion.experimental" | "entity.minecraft.blaze" | "block.create.controller_rail.tooltip.condition1" | "block.minecraft.beacon" | "argument.entity.options.inapplicable" | "stat.minecraft.aviate_one_cm" | "book.finalizeButton" | "subtitles.entity.strider.hurt" | "death.fell.accident.other_climbable" | "chat.copy" | "entity.minecraft.fox" | "botania.brew.regen" | "fml.modmismatchscreen.table.youhave" | "create.ponder.funnel_direction.header" | "ftbquests.raymatcher.block_id" | "botania.page.fireChakram0" | "item.ae2.cyan_covered_dense_cable" | "botania.page.fireChakram1" | "gui.tooltips.ae2.MoveWhenWorkIsDone" | "create.ponder.track_chunks.text_1" | "create.ponder.track_chunks.text_3" | "create.ponder.track_chunks.text_2" | "create.ponder.track_chunks.text_5" | "create.ponder.track_chunks.text_4" | "stat.minecraft.interact_with_beacon" | "block.botania.red_pavement_slab" | "block.minecraft.banner.piglin.red" | "block.minecraft.podzol" | "block.minecraft.cave_air" | "subtitles.block.iron_trapdoor.close" | "create.ponder.mechanical_piston_modes.header" | "gui.ae2.FromStorage" | "selectWorld.version" | "death.attack.inWall.player" | "block.create.framed_glass_trapdoor" | "item.minecraft.splash_potion.effect.luck" | "item.ae2.portable_fluid_cell_64k" | "options.narrator.chat" | "fml.menu.mods.info.signature" | "death.fell.accident.scaffolding" | "gui.ae2.EnergyDrain" | "entity.minecraft.villager.spacecatcustomprofessions.petal_apothecary" | "item.minecraft.stone_hoe" | "block.minecraft.banner.flower.red" | "create.ponder.belt_connector.header" | "item.botania.ancient_will_torag" | "item.minecraft.iron_nugget" | "item.minecraft.dolphin_spawn_egg" | "item.botania.lens_fire.short" | "block.create.layered_dripstone" | "create.item_attributes.color" | "create.station.assembly_title" | "merchant.next_level" | "create.tunnel.selection_mode.randomize" | "block.minecraft.banner.diagonal_left.red" | "block.botania.white_pavement_stairs" | "item.minecraft.item_frame" | "block.minecraft.banner.half_vertical_right.cyan" | "subtitles.entity.generic.eat" | "create.ponder.mechanical_press_compacting.text_1" | "create.ponder.mechanical_press_compacting.text_2" | "create.mechanical_arm.deposit_to" | "create.ponder.mechanical_press_compacting.text_3" | "subtitles.entity.hoglin.death" | "item.create.goggles.tooltip.behaviour3" | "create.ponder.mechanical_press_compacting.text_4" | "item.create.goggles.tooltip.behaviour2" | "item.create.goggles.tooltip.behaviour1" | "config.jei.advanced.centerSearchBarEnabled.comment" | "block.botania.stripped_livingwood" | "botaniamisc.wandMode.function" | "create.gui.adjustable_crate.title" | "block.ae2.smooth_sky_stone_slab" | "death.attack.magic.player" | "commands.gamemode.success.other" | "block.minecraft.banner.straight_cross.pink" | "subtitles.entity.shulker.open" | "stat.minecraft.fly_one_cm" | "item.ae2.nether_quartz_cutting_knife" | "lootr.advancements.1337loot.title" | "block.create.cut_andesite_brick_wall" | "block.minecraft.banner.small_stripes.lime" | "block.create.toolbox.tooltip" | "ftbquests.reward.ftbquests.toast.description" | "create.gui.goggles.kinetic_stats" | "create.gui.schematicTable.open_folder" | "controls.title" | "block.botania.red_string_fertilizer" | "create.recipe.assembly.junk" | "advancement.create.chained_drain.desc" | "botaniamisc.creativeSpark" | "create.ponder.portable_storage_interface_redstone.header" | "item.minecraft.heart_of_the_sea" | "block.create.cut_calcite_bricks" | "key.keyboard.left.alt" | "block.minecraft.banner.diagonal_up_left.red" | "block.create.cut_dripstone" | "deathScreen.score" | "optimizeWorld.info.skipped" | "block.minecraft.banner.diagonal_up_right.magenta" | "subtitles.entity.turtle.death" | "block.botania.magenta_buried_petals" | "item.minecraft.name_tag" | "block.create.waxed_oxidized_copper_tiles" | "stat.minecraft.jump" | "entity.botania.ender_air" | "botania.subtitle.terraBlade" | "subtitles.entity.elder_guardian.curse" | "item.minecraft.glass_bottle" | "botania.entry.manaBomb" | "item.minecraft.ender_eye" | "block.minecraft.banner.piglin.magenta" | "item.create.wrench.tooltip.control1" | "item.create.wrench.tooltip.control2" | "key.keyboard.pause" | "gui.rename" | "item.create.raw_zinc" | "block.create.wooden_bracket.tooltip.summary" | "commands.trigger.simple.success" | "block.botania.dreamwood_fence" | "block.minecraft.banner.botania_lexicon.purple" | "create.gui.sequenced_gearshift.instruction.delay.descriptive" | "block.minecraft.sandstone_slab" | "botania.entry.grassHorn" | "ftbquests.gui.quick_complete.info_1" | "botania.entry.hydroangeas" | "fml.dependencyloading.mismatchedcontaineddependencies" | "block.create.small_veridium_brick_wall" | "commands.whitelist.remove.failed" | "ftbquests.gui.quick_complete.info_2" | "block.minecraft.banner.skull.white" | "block.minecraft.banner.circle.cyan" | "block.minecraft.potted_allium" | "subtitles.entity.endermite.hurt" | "botania.tagline.phantomInk" | "block.minecraft.banner.small_stripes.blue" | "block.botania.lime_floating_flower" | "create.gui.scrollInput.scrollToSelect" | "block.minecraft.banner.diagonal_up_left.light_blue" | "item.ae2.magenta_paint_ball" | "block.minecraft.banner.botania_sapling.magenta" | "create.boiler.via_one_engine" | "ftbquests.task.ftbquests.item.only_from_crafting" | "gui.ae2.Terminal" | "block.minecraft.banner.skull.gray" | "advancements.adventure.very_very_frightening.description" | "gui.tooltips.ae2.SearchMode_JEI" | "selectWorld.backupQuestion.snapshot" | "block.ae2.64k_crafting_storage" | "block.create.brass_funnel" | "gamerule.doTraderSpawning" | "commands.ftbquests.set_variable.usage" | "block.botania.metamorphic_plains_bricks" | "item.minecraft.diamond_horse_armor" | "block.create.cuckoo_clock.tooltip.behaviour1" | "gamerule.maxEntityCramming" | "advancements.adventure.totem_of_undying.title" | "entity.minecraft.snow_golem" | "block.botania.pink_buried_petals" | "title.32bit.deprecation.realms" | "botania.subtitle.terraformRod" | "ftbquests.gui.rem_dep" | "block.botania.gaia_head" | "ftbquests.task.ftbquests.interaction.match" | "block.minecraft.copper_ore" | "gui.socialInteractions.empty_blocked" | "block.create.controls" | "subtitles.entity.villager.work_mason" | "create.flap_display.cycles.fluid_units" | "achievement.ae2.Controller.desc" | "mco.minigame.world.switch.title" | "item.minecraft.cod" | "block.minecraft.gray_candle_cake" | "item.minecraft.debug_stick.select" | "block.botania.hydroangeas_motif" | "item.minecraft.potion.effect.slow_falling" | "options.resourcepack" | "subtitles.entity.wither.hurt" | "create.train.status.missing_driver" | "death.attack.mob" | "fml.button.open.file" | "item.create.red_sand_paper" | "subtitles.item.armor.equip_elytra" | "selectServer.hiddenAddress" | "botania.subtitle.enchanterFade" | "create.ponder.track_observer.header" | "create.gui.toolmenu.cycle" | "block.minecraft.banner.mojang.red" | "subtitles.entity.salmon.flop" | "block.minecraft.potted_crimson_roots" | "gui.update" | "pack.incompatible.confirm.old" | "item.minecraft.debug_stick.update" | "options.narrator" | "botania.entry.poolCart" | "item.ae2.logic_processor" | "block.minecraft.banner.gradient_up.gray" | "item.botania.manasteel_axe" | "block.minecraft.banner.botania_sword.lightBlue" | "subtitles.entity.parrot.imitate.piglin_brute" | "subtitles.entity.polar_bear.ambient_baby" | "config.jei.search.tooltipSearchMode" | "create.crafting_blueprint.optional" | "item.create.diving_boots.tooltip" | "key.playerlist" | "options.graphics.warning.cancel" | "block.minecraft.potted_blue_orchid" | "block.lootr.lootr_shulker" | "ftbteams.create_party.info" | "gui.tooltips.ae2.Trash" | "structure_block.mode.data" | "block.create.small_asurine_brick_stairs" | "create.recipe.fan_haunting" | "botania.tagline.superLavaPendant" | "fml.menu.backupfailed.message" | "item.minecraft.beetroot_soup" | "subtitles.entity.turtle.death_baby" | "addServer.enterName" | "mco.backup.changes.tooltip" | "tag.botania.glimmering_dreamwood_logs" | "subtitles.entity.skeleton.converted_to_stray" | "commands.forge.tags.tag_count" | "botania.tagline.elfGear" | "death.attack.create.fan_fire.player" | "gui.ae2.Efficiency" | "block.minecraft.banner.flower.yellow" | "block.minecraft.banner.diagonal_right.magenta" | "block.create.small_diorite_brick_slab" | "item.ae2.brown_paint_ball" | "create.display_link.display_on" | "botania.page.mIntro0" | "botania.page.mIntro1" | "botania.page.mIntro2" | "commands.scoreboard.objectives.add.success" | "block.minecraft.banner.base.red" | "create.recipe.block_cutting" | "item.ae2.cyan_covered_cable" | "subtitles.entity.horse.ambient" | "command.context.here" | "item.botania.quartz_lavender" | "botania.page.tinyPlanet1" | "block.minecraft.banner.botania_sword.red" | "botania.page.tinyPlanet2" | "create.train_assembly.sideways_controls" | "botania.page.tinyPlanet0" | "item.botania.incense_stick" | "item.minecraft.pillager_spawn_egg" | "block.ae2.quartz_vibrant_glass" | "structure_block.include_entities" | "block.create.polished_cut_crimsite_wall" | "subtitles.entity.leash_knot.break" | "options.hidden" | "block.minecraft.banner.circle.brown" | "item.minecraft.strider_spawn_egg" | "item.botania.light_blue_petal" | "mco.gui.button" | "patchouli.gui.lexicon.button.back" | "block.minecraft.banner.diagonal_up_right.pink" | "block.minecraft.weeping_vines_plant" | "create.ponder.belt_transport.text_2" | "block.minecraft.banner.rhombus.light_blue" | "block.create.seat.tooltip.behaviour1" | "create.ponder.belt_transport.text_1" | "block.create.seat.tooltip.condition1" | "gamerule.mobGriefing" | "ftbquests.loot.entitytype.boss" | "item.minecraft.spyglass" | "options.screenEffectScale.tooltip" | "selectWorld.gameMode" | "tag.botania.petals.black" | "createWorld.customize.custom.prev" | "createWorld.customize.presets.title" | "block.minecraft.white_stained_glass_pane" | "create.ponder.funnel_direction.text_1" | "block.minecraft.potted_jungle_sapling" | "create.ponder.funnel_direction.text_3" | "botania.tagline.thunderSword" | "create.ponder.funnel_direction.text_2" | "create.ponder.chute_upward.header" | "block.botania.chiseled_metamorphic_mountain_bricks" | "block.botania.red_pavement_stairs" | "create.ponder.think_back" | "subtitles.entity.villager.ambient" | "block.botania.detector_light_relay" | "item.minecraft.tipped_arrow.effect.swiftness" | "subtitles.item.trident.thunder" | "block.minecraft.banner.stripe_top.magenta" | "enchantment.minecraft.frost_walker" | "biome.minecraft.stony_shore" | "gui.ae2.Crafts" | "create.logistics.filter.apply" | "block.minecraft.birch_button" | "block.minecraft.stripped_crimson_stem" | "ftbquests.file.lock_message" | "subtitles.entity.wandering_trader.death" | "block.botania.rannuncarpus" | "selectWorld.mapType.normal" | "create.ponder.item_vault_storage.header" | "commands.schedule.cleared.success" | "block.create.cut_limestone_brick_slab" | "menu.singleplayer" | "advMode.type" | "config.jei.search.tagSearchMode.comment" | "botania.category.mana" | "selectWorld.recreate.error.text" | "create.schedule.condition.player_count.seated" | "block.minecraft.seagrass" | "block.minecraft.diamond_block" | "item.minecraft.potion.effect.healing" | "block.minecraft.lightning_rod" | "block.minecraft.banner.botania_tiny_potato.silver" | "config.jei.advanced.debugModeEnabled.comment" | "block.botania.floating_narslimmus" | "create.gui.contraptions.network_overstressed" | "commands.data.block.query" | "botania.entry.thunderSword" | "item.minecraft.dark_oak_boat" | "options.chat.delay_none" | "create.display_link.no_target" | "item.minecraft.white_dye" | "create.display_source.time.format" | "container.enchant.clue" | "create.subtitle.whistle_low" | "selectWorld.edit.export_worldgen_settings" | "block.ae2.debug_energy_gen" | "advancement.botania:pinkinator" | "botania.page.thermalily3" | "create.item_attributes.crushable" | "botania.page.thermalily2" | "item.botania.lens_influence" | "botania.page.thermalily1" | "botania.page.thermalily0" | "block.minecraft.banner.border.light_gray" | "subtitles.entity.zombie.death" | "item.minecraft.chainmail_helmet" | "item.create.bar_of_chocolate" | "commands.forceload.removed.multiple" | "item.itemfilters.max_count.description" | "argument.entity.options.level.description" | "emi.category.botania.marimorphosis" | "fml.menu.mods.info.credits" | "item.ae2.light_gray_smart_dense_cable" | "block.minecraft.netherrack" | "item.ae2.wireless_booster" | "block.minecraft.banner.square_bottom_right.light_gray" | "block.minecraft.lantern" | "color.minecraft.magenta" | "gui.jei.category.itemInformation" | "block.botania.mossy_livingrock_bricks" | "block.minecraft.dropper" | "subtitles.entity.goat.ambient" | "commands.perf.notRunning" | "create.hint.empty_bearing.title" | "item.botania.cosmetic_red_ribbons" | "botaniamisc.armorset" | "key.categories.gameplay" | "item.botania.manasteel_shovel" | "advancements.toast.task" | "createWorld.customize.preset.water_world" | "block.minecraft.banner.triangles_top.red" | "block.botania.mana_diamond_block" | "botaniamisc.badArena" | "botania.tagline.spreader" | "advancement.create.linked_controller.desc" | "block.minecraft.banner.half_horizontal_bottom.lime" | "subtitles.entity.enderman.teleport" | "block.create.yellow_toolbox" | "item.ftbquests.custom_icon" | "create.ponder.track_chunks.header" | "string.naturescompass.distance" | "string.naturescompass.veryLow" | "commands.drop.no_held_items" | "botania.subtitle.runeAltarCraft" | "block.ae2.molecular_assembler" | "botania.tagline.exchangeRod" | "subtitles.entity.strider.eat" | "block.minecraft.banner.globe.green" | "ftbquests.quest.optional" | "subtitles.entity.leash_knot.place" | "block.minecraft.banner.botania_spark_dominant.cyan" | "block.minecraft.redstone_lamp" | "sidebar_button.ftblibrary.toggle.night.tooltip" | "advancement.botania:terraformRodCraft" | "effect.minecraft.instant_health" | "ftbquests.reward_table.set_weight" | "gui.ae2.Next" | "botania.tagline.waterRod" | "mco.brokenworld.play" | "options.modelPart.right_pants_leg" | "subtitles.entity.skeleton_horse.swim" | "botania.entry.endoflame" | "commands.team.add.success" | "debug.inspect.server.block" | "botania.tagline.flightTiara" | "ftbquests.task.ftbquests.interaction.properties" | "botania.page.clip0" | "commands.effect.clear.specific.success.multiple" | "botania.page.clip1" | "botania.page.clip2" | "block.botania.brown_shiny_flower" | "ftbquests.task.ftbquests.biome.biome" | "subtitles.block.beacon.deactivate" | "commands.ftbquests.reset_progress.reset" | "options.off" | "item.minecraft.painting" | "item.botania.elementium_axe" | "block.minecraft.oak_button" | "ftbquests.task.auto_detected" | "item.ae2.light_gray_glass_cable" | "commands.stopsound.success.source.sound" | "patchouli.gui.lexicon.locked" | "create.ponder.creative_motor.header" | "subtitles.item.crossbow.hit" | "entity.minecraft.minecart" | "block.minecraft.polished_basalt" | "gui.open" | "multiplayer.status.old" | "block.botania.metamorphic_taiga_cobblestone_wall" | "gui.ae2.units.appliedenergistics" | "botania.page.sparkUpgrades5" | "fml.menu.multiplayer.incompatible.extra" | "block.botania.metamorphic_mesa_stone_slab" | "block.minecraft.banner.stripe_downleft.red" | "botania.page.sparkUpgrades3" | "item.botania.record_gaia_1.desc" | "botania.page.sparkUpgrades4" | "botania.page.sparkUpgrades1" | "botania.page.sparkUpgrades2" | "botania.page.sparkUpgrades0" | "gui.ae2.Gray" | "create.track.leave_slope_descending" | "gui.tooltips.ae2.TerminalStyle_Tall" | "block.minecraft.polished_andesite_slab" | "item.minecraft.firework_star.magenta" | "block.botania.bellethorn_chibi.reference" | "advancement.botania:enchanterMake.desc" | "create.gui.schedule.duplicate" | "create.ponder.funnel_direction.text_5" | "patchouli.gui.lexicon.index" | "create.ponder.funnel_direction.text_4" | "block.minecraft.mossy_cobblestone_wall" | "worldgen.flower.tallChance" | "multiplayer.stopSleeping" | "screenshot.failure" | "tag.botania.special_floating_flowers" | "advancement.create.millstone" | "stat.minecraft.sprint_one_cm" | "commands.scoreboard.objectives.remove.success" | "botania.entry.obedienceStick" | "config.jei.search.creativeTabSearchMode" | "blockBreakingParticlesTool.enabled" | "entity.minecraft.trident" | "item.create.minecart_coupling.tooltip.behaviour1" | "multiplayer.disconnect.unexpected_query_response" | "block.minecraft.gilded_blackstone" | "subtitles.entity.husk.hurt" | "block.botania.mana_quartz_stairs" | "tag.botania.functional_special_flowers" | "gui.ae2.Patterns" | "ftbquests.chapter.visibility" | "multiplayer.downloadingStats" | "subtitles.entity.cat.purr" | "ftbquests.reward_table.weight" | "create.gui.filter.allow_list" | "block.ae2.quartz_fixture" | "ftbquests.task.ftbquests.location.ignore_dim" | "create.ponder.sail_frame.header" | "enchantment.create.capacity" | "advancement.botania:thorRing.desc" | "item.botania.manasteel_leggings" | "advancement.create.pipe_organ.desc" | "item.create.crushed_platinum_ore" | "item.minecraft.chicken" | "block.minecraft.banner.square_bottom_left.white" | "item.create.schematic_and_quill.tooltip.behaviour1" | "tag.botania.manasteel_nuggets" | "chat.coordinates" | "create.subtitle.controller_take" | "item.create.schematic_and_quill.tooltip.behaviour2" | "subtitles.block.chest.close" | "ftbquests.quest.dependency_requirement.all_started" | "botania.tagline.distributor" | "block.create.jungle_window" | "lootr.commands.create" | "config.jei.advanced.debugModeEnabled" | "botania.page.apothecary7" | "lootr.message.cart_should_sneak" | "botania.page.apothecary5" | "botania.page.apothecary6" | "gui.tooltips.ae2.TerminalStyle" | "botania.page.apothecary3" | "botania.page.apothecary4" | "item.ae2.memory_card_pink" | "key.drop" | "ftbquests.reward.ftbquests.command.player" | "botania.page.icePendant1" | "botania.page.icePendant0" | "botania.page.icePendant2" | "mco.configure.world.players.title" | "botania.page.crystalBow0" | "item.minecraft.wheat" | "options.mouse_settings.title" | "subtitles.entity.zombie_horse.ambient" | "botania.armorset.will_karil.desc" | "subtitles.entity.mooshroom.eat" | "block.minecraft.banner.base.cyan" | "advancement.create.chocolate_bucket" | "selectWorld.backupWarning.downgrade" | "block.minecraft.player_head.named" | "key.keyboard.slash" | "create.ponder.analog_lever.header" | "block.create.cut_diorite_brick_stairs" | "item.minecraft.golden_sword" | "botania.entry.flowerShrinking" | "createWorld.customize.custom.preset.mountains" | "block.minecraft.farmland" | "commands.data.get.multiple" | "block.minecraft.banner.botania_sapling.yellow" | "waila.ae2.P2PInputOneOutput" | "create.tooltip.chute.fans_pull_up" | "create.ponder.chute_upward.text_3" | "entity.minecraft.egg" | "gui.tooltips.ae2.LevelType_Energy" | "block.minecraft.cyan_terracotta" | "block.create.controller_rail.tooltip.behaviour1" | "fml.menu.mods.normal" | "block.botania.dandelifeon.reference" | "block.minecraft.honeycomb_block" | "ftbquests.dependency" | "create.ponder.chute_upward.text_1" | "key.fullscreen" | "create.ponder.chute_upward.text_2" | "block.minecraft.banner.border.gray" | "item.botania.knockback_belt" | "selectWorld.mapFeatures" | "subtitles.block.chorus_flower.death" | "botania.tagline.astrolabe" | "create.block.cart_assembler.invalid" | "advancement.botania:superCorporeaRequest.desc" | "botania.page.cobbleRod0" | "subtitles.block.beehive.enter" | "ftbquests.chapter.default_hide_dependency_lines" | "botania.page.cobbleRod1" | "botania.page.crystalBow1" | "enchantment.minecraft.bane_of_arthropods" | "createWorld.customize.custom.fixedBiome" | "create.ponder.rope_pulley_modes.header" | "botania.page.apothecary1" | "botania.page.apothecary2" | "botania.page.apothecary0" | "subtitles.entity.zombie_villager.ambient" | "pack.incompatible.confirm.new" | "block.minecraft.banner.stripe_downleft.pink" | "key.jei.focusSearch" | "create.contraptions.windmill.rotation_direction" | "botania.page.dandelifeon1" | "botania.page.dandelifeon0" | "botania.page.dandelifeon3" | "gui.done" | "botania.page.dandelifeon2" | "botania.page.dandelifeon5" | "botania.page.dandelifeon4" | "botania.page.dandelifeon7" | "arguments.nbtpath.node.invalid" | "botania.page.dandelifeon6" | "botania.page.dandelifeon9" | "botania.page.dandelifeon8" | "death.attack.dragonBreath" | "advancement.create.cross_streams.desc" | "block.ae2.crafting_unit" | "subtitles.entity.iron_golem.repair" | "death.fell.assist.item" | "item.minecraft.sheep_spawn_egg" | "block.botania.metamorphic_swamp_bricks_slab" | "advancements.adventure.sniper_duel.title" | "advancement.create.chute.desc" | "block.botania.daffomill.reference" | "item.botania.flight_tiara" | "block.minecraft.ladder" | "block.botania.metamorphic_mesa_bricks" | "block.minecraft.banner.botania_fish.silver" | "string.naturescompass.selectBiome" | "block.create.warped_window" | "advancement.create.extendo_grip" | "ftbquests.reward.ftbquests.custom" | "block.minecraft.jungle_planks" | "block.create.waxed_exposed_copper_shingle_slab" | "ftbquests.file.completed" | "block.ae2.sky_stone_small_brick_wall" | "subtitles.entity.item_frame.break" | "create.item_attributes.astralsorcery_amulet" | "stat.minecraft.trigger_trapped_chest" | "botaniamisc.nearIndex0" | "botaniamisc.nearIndex1" | "create.ponder.display_link_redstone.header" | "botaniamisc.nearIndex2" | "entity.minecraft.villager.spacecatcustomprofessions.engineer" | "item.minecraft.skeleton_horse_spawn_egg" | "ftbquests.gui.unpin" | "block.minecraft.oak_fence" | "block.minecraft.banner.triangles_top.yellow" | "botania.page.enderHand2" | "botania.page.enderHand1" | "commands.forge.gen.usage" | "botania.page.enderHand0" | "container.beacon" | "ftbquests.gui.move_tooltip" | "advancement.create.mechanical_pump_0.desc" | "commands.clone.overlap" | "block.botania.purple_double_flower" | "block.minecraft.crimson_fence_gate" | "block.create.lectern_controller" | "block.botania.dreamwood_fence_gate" | "block.botania.floating_hopperhock" | "item.minecraft.nautilus_shell" | "block.create.polished_cut_asurine_slab" | "item.minecraft.golden_hoe" | "item.minecraft.potion.effect.fire_resistance" | "block.create.cut_veridium_brick_stairs" | "key.jei.showRecipe2" | "controls.reset" | "death.attack.create.mechanical_drill.player" | "commands.team.option.seeFriendlyInvisibles.alreadyEnabled" | "item.minecraft.bow" | "block.minecraft.banner.stripe_bottom.gray" | "tag.botania.petals.cyan" | "create.gui.sequenced_gearshift.speed.back" | "block.minecraft.wheat" | "menu.online" | "stat.minecraft.damage_dealt_absorbed" | "curios.identifier.belt" | "block.minecraft.banner.botania_axe.magenta" | "item.botania.living_root" | "mco.selectServer.expiredRenew" | "item.minecraft.mule_spawn_egg" | "advancement.botania:elfPortalOpen.desc" | "gui.ae2.Automatic" | "create.ponder.funnel_compat.text_1" | "create.ponder.funnel_compat.text_2" | "commands.ftbquests.import_rewards_from_chest.usage" | "create.ponder.funnel_compat.text_3" | "create.ponder.funnel_compat.text_4" | "item.ae2.fluix_covered_dense_cable" | "item.minecraft.hopper_minecart" | "demo.remainingTime" | "block.botania.bergamute" | "item.ae2.gray_covered_dense_cable" | "botania.page.pistonRelay1" | "botania.page.pistonRelay2" | "create.ponder.portable_storage_interface_redstone.text_1" | "botania.page.pistonRelay0" | "ftbquests.task.ftbquests.advancement" | "botania.entry.elfResources" | "subtitles.entity.panda.worried_ambient" | "block.minecraft.banner.globe.white" | "gui.down" | "block.minecraft.banner.stripe_middle.gray" | "item.minecraft.spruce_boat" | "create.schedule.condition.idle.status" | "subtitles.item.crossbow.shoot" | "mco.backup.restoring" | "subtitles.entity.item_frame.place" | "subtitles.entity.hoglin.converted_to_zombified" | "create.gui.sequenced_gearshift.instruction.delay.duration" | "commands.ftbquests.reset_progress.invalid_id" | "jei.tooltip.cheat.mode.how.to.disable.hotkey" | "block.minecraft.banner.half_vertical_right.green" | "item.minecraft.tipped_arrow.effect.mundane" | "subtitles.entity.parrot.imitate.wither" | "advancements.adventure.honey_block_slide.description" | "jei.ftbquests.lootcrates.chance" | "mco.selectServer.closed" | "block.minecraft.sea_lantern" | "container.brewing" | "subtitles.block.generic.hit" | "create.tunnel.selection_mode.round_robin" | "block.minecraft.prismarine_bricks" | "botania.page.virus1" | "botania.page.virus0" | "botania.page.virus2" | "create.generic.notes" | "block.minecraft.banner.botania_sapling.pink" | "item.minecraft.brown_dye" | "subtitles.entity.egg.throw" | "item.ae2.monitor" | "block.minecraft.banner.botania_pickaxe.purple" | "botania.tagline.solegnolia" | "gui.ae2.SpatialAnchorStatistics" | "create.item_attributes.shulker_level.empty" | "advancement.create.saw_processing" | "stat.minecraft.walk_under_water_one_cm" | "createWorld.customize.custom.preset.caveChaos" | "block.botania.orechid" | "gui.recipebook.toggleRecipes.smeltable" | "botania.armorset.terrasteel.name" | "create.ponder.mechanical_press.header" | "gui.ae2.Blank" | "ftbquests.gui.remove_dependencies_self" | "block.botania.metamorphic_taiga_bricks" | "block.minecraft.conduit" | "commands.ftbquests.set_variable.set" | "commands.worldborder.damage.buffer.failed" | "botania.tagline.blackHoleTalisman" | "ftbquests.task.ftbquests.dimension.dim" | "block.create.weighted_ejector" | "botania.tagline.manaTablet" | "botania.armorset.will_ahrim.desc" | "create.ponder.crushing_wheels.header" | "gui.tooltips.ae2.CondenserOutput" | "mco.invites.nopending" | "stat.minecraft.play_time" | "botania.page.grassHorn3" | "botania.page.grassHorn2" | "subtitles.entity.skeleton.hurt" | "botania.page.grassHorn1" | "botania.page.grassHorn0" | "fml.menu.multiplayer.modsincompatible" | "block.minecraft.grass" | "block.ae2.debug_phantom_node" | "argument.entity.options.curios.description" | "createWorld.customize.custom.useMansions" | "commands.advancement.revoke.one.to.one.success" | "botania.challenge.flowerFarm.desc" | "item.botania.thorn_chakram" | "selectWorld.recreate.customized.text" | "block.minecraft.jungle_door" | "fml.modmismatchscreen.missingmods.server" | "create.ponder.belt_casing.header" | "death.attack.freeze.player" | "create.gui.stockpile_switch.move_to_upper_at" | "item.ae2.red_covered_cable" | "botania.tagline.incense" | "block.create.waxed_oxidized_copper_shingle_slab" | "block.minecraft.banner.globe.red" | "block.botania.dreadthorn.reference" | "botania.brew.overload" | "item.botania.mana_gun" | "advancement.botania:odinRing" | "botania.tagline.kingKey" | "item.create.example_item.tooltip.summary" | "commands.advancement.revoke.criterion.to.one.success" | "item.create.refined_radiance.tooltip.behaviour1" | "pack.source.server" | "block.minecraft.dark_prismarine" | "subtitles.item.armor.equip_turtle" | "stat.minecraft.minecart_one_cm" | "create.track.too_sharp" | "block.ae2.quartz_stairs" | "selectWorld.edit.backupSize" | "subtitles.entity.dolphin.splash" | "create.ponder.linear_chassis_attachment.text_8" | "item.ae2.memory_card_purple" | "create.ponder.linear_chassis_attachment.text_7" | "create.ponder.linear_chassis_attachment.text_6" | "item.minecraft.firework_star.brown" | "create.ponder.linear_chassis_attachment.text_5" | "create.ponder.linear_chassis_attachment.text_4" | "create.ponder.linear_chassis_attachment.text_3" | "create.ponder.linear_chassis_attachment.text_2" | "create.ponder.linear_chassis_attachment.text_1" | "item.minecraft.emerald" | "subtitles.entity.salmon.hurt" | "tutorial.punch_tree.description" | "commands.title.reset.multiple" | "pack.source.local" | "block.botania.metamorphic_swamp_bricks_stairs" | "subtitles.entity.evoker.death" | "item.modifiers.feet" | "subtitles.entity.wither.ambient" | "block.create.train_door" | "item.create.extendo_grip.tooltip.condition1" | "item.create.extendo_grip.tooltip.condition2" | "block.botania.mana_quartz_pillar" | "create.item_attributes.book_copy_tattered" | "stat.minecraft.play_noteblock" | "block.botania.pure_daisy.reference" | "create.backtank.depleted" | "gui.infinite" | "subtitles.entity.arrow.hit_player" | "botania.page.relicInfo0" | "botania.page.relicInfo1" | "disconnect.lost" | "advMode.mode.autoexec.bat" | "gui.socialInteractions.status_hidden" | "block.botania.chiseled_metamorphic_swamp_bricks" | "advancement.botania:sparkCraft" | "botania.tagline.manaConjuration" | "pack.incompatible.old" | "forge.controlsgui.control.mac" | "ftbquests.reward_table.loot_crate.id" | "block.botania.livingrock_bricks_slab" | "item.ae2.storage_bus" | "block.minecraft.bubble_coral_wall_fan" | "ftbquests.reward_table.loot_crate.glow" | "create.action.saveToFile" | "item.ae2.crafting_terminal" | "block.create.polished_cut_dripstone" | "create.ponder.mechanical_arm.header" | "item.create.shadow_steel.tooltip.behaviour1" | "item.minecraft.netherite_sword" | "biome.minecraft.ice_spikes" | "mco.client.incompatible.msg.line1" | "create.ponder.cog_speedup.text_1" | "block.minecraft.pink_concrete" | "item.minecraft.chainmail_chestplate" | "mco.client.incompatible.msg.line3" | "create.ponder.cog_speedup.text_2" | "mco.client.incompatible.msg.line2" | "create.ponder.cog_speedup.text_3" | "commands.tag.remove.failed" | "item.minecraft.nether_brick" | "death.attack.inFire.player" | "structure_block.size_failure" | "entity.minecraft.panda" | "gui.ae2.TankAmount" | "botania.page.pylon0" | "item.botania.mana_bottle" | "attribute.name.generic.attack_range" | "block.minecraft.banner.botania_pickaxe.white" | "botania.page.pylon1" | "create.gui.schematicannon.optionDisabled" | "narration.button" | "item.botania.cosmetic_hyper_plus" | "create.tooltip.deployer.contains" | "selectWorld.backupJoinConfirmButton" | "advancement.botania:dirtRodCraft" | "botania.entry.openBucket" | "create.ponder.shared.movement_anchors" | "botania.tagline.terraSword" | "multiplayer.status.quitting" | "subtitles.entity.goat.ram_impact" | "emi.category.botania.terrestrial_agglomeration" | "item.ae2.item_storage_cell_16k" | "block.minecraft.banner.straight_cross.red" | "commands.attribute.value.get.success" | "merchant.deprecated" | "gui.ae2.Encoded" | "create.menu.only_ingame" | "block.minecraft.banner.stripe_middle.green" | "block.botania.metamorphic_taiga_stone_slab" | "botania.tagline.cocoon" | "block.minecraft.light_blue_stained_glass" | "gui.socialInteractions.shown_in_chat" | "botania.subtitle.equipElementium" | "block.ae2.spatial_io_port" | "block.botania.black_mushroom" | "ftbquests.reward.ftbquests.npc_mail.quest_id" | "commands.locatebiome.notFound" | "block.create.metal_girder_encased_shaft" | "create.schematicannon.status.targetOutsideRange" | "block.minecraft.banner.botania_logo.lightBlue" | "waila.ae2.Locked" | "string.naturescompass.baseHeight" | "create.linked_controller.frequency_slot_1" | "gamerule.doInsomnia" | "create.linked_controller.frequency_slot_2" | "filled_map.level" | "botania.challenge.cobbleGen" | "subtitles.entity.wolf.ambient" | "mco.configure.world.buttons.close" | "create.ponder.train_signal_signaling.header" | "item.ae2.purple_smart_cable" | "create.item_attributes.smokable" | "botania.entry.cocoon" | "create.action.scroll" | "create.ponder.tag.display_sources.description" | "patchouli.gui.lexicon.remove_bookmark" | "subtitles.entity.wither.death" | "block.minecraft.stone_brick_stairs" | "item.botania.manasteel_ingot" | "botania.tagline.decorativeBlocks" | "create.ponder.deployer.header" | "commands.list.nameAndId" | "ftbquests.reward_table.loot_crate.boss_weight" | "block.create.cut_granite_brick_stairs" | "pack.incompatible.confirm.title" | "item.create.honeyed_apple" | "argument.entity.options.advancements.description" | "item.ae2.magenta_smart_dense_cable" | "advancement.botania:old_flower_pickup.desc" | "subtitles.block.big_dripleaf.tilt_down" | "item.minecraft.tipped_arrow.effect.water" | "botania.entry.waterRing" | "botania.page.lavaPendant1" | "block.minecraft.birch_sapling" | "botania.page.lavaPendant0" | "block.minecraft.banner.half_vertical_right.white" | "forge.configgui.fullBoundingBoxLadders.tooltip" | "config.jei.search.resourceIdSearchMode" | "block.ae2.fluix_block" | "achievement.ae2.Facade.desc" | "create.schedule.instruction.throttle_edit_box" | "gui.jei.category.smelting" | "forge.entity_gravity" | "botania.subtitle.missileFunny" | "block.minecraft.kelp" | "commands.whitelist.remove.success" | "block.create.schematicannon.tooltip.condition1" | "item.ae2.nether_quartz_wrench" | "botania.subtitle.gaiaDeath" | "block.create.dark_oak_window_pane" | "advancements.adventure.kill_a_mob.title" | "commands.spectate.success.started" | "gui.tooltips.ae2.EmitLevelAbove" | "block.create.creative_fluid_tank" | "ftbquests.variable.team" | "block.create.polished_cut_scoria_wall" | "parsing.expected" | "item.create.goggles.tooltip.summary" | "options.graphics.warning.version" | "ftbquests.gui.change_progress.reset" | "item.ae2.certus_quartz_crystal" | "options.hideLightningFlashes" | "item.minecraft.cooked_rabbit" | "create.boiler.water" | "mco.selectServer.expiredTrial" | "flightBarBreath.height" | "create.tooltip.stressImpact.high" | "create.item_attributes.not_stackable" | "block.minecraft.banner.stripe_middle.white" | "subtitles.entity.squid.squirt" | "item.botania.santaweave_boots" | "botania.tagline.clayconia" | "fml.modloading.brokenfile.bukkit" | "item.botania.elementium_nugget" | "options.chat.opacity" | "block.ae2.io_port" | "item.minecraft.lingering_potion.effect.turtle_master" | "mco.selectServer.close" | "block.minecraft.banner.triangle_bottom.purple" | "block.create.flywheel.tooltip" | "block.minecraft.spruce_sign" | "relics.enabled" | "item.minecraft.light_blue_dye" | "block.minecraft.banner.square_bottom_left.cyan" | "block.minecraft.banner.gradient_up.pink" | "forge.configgui.forceSystemNanoTime.tooltip" | "block.create.mechanical_mixer" | "block.ftbquests.detector.notifications" | "config.jei.advanced.comment" | "options.audioDevice.default" | "item.minecraft.wheat_seeds" | "botania.entry.enderAir" | "commands.bossbar.set.max.success" | "block.minecraft.banner.botania_spark_recessive.blue" | "item.minecraft.hoglin_spawn_egg" | "commands.experience.query.points" | "create.terrainzapper.usingBlock" | "block.minecraft.lava_cauldron" | "block.minecraft.banner.half_horizontal_bottom.blue" | "ftblibrary.empty" | "block.minecraft.dead_horn_coral" | "botania.subtitle.unholyCloak" | "botania.armorset.will_torag.desc" | "create.tooltip.brass_tunnel.retrieve" | "block.botania.agricarnation" | "create.display_source.item_throughput.interval.minute" | "item.ftbquests.barrier.disabled" | "block.minecraft.pink_stained_glass" | "death.attack.sting.player" | "item.minecraft.shears" | "botania.subtitle.tigerseyePacify" | "block.minecraft.banner.triangles_bottom.light_blue" | "block.create.red_valve_handle" | "mco.configure.world.commandBlocks" | "subtitles.entity.horse.breathe" | "item.create.copper_backtank" | "block.create.small_andesite_bricks" | "commands.scoreboard.players.list.entity.success" | "block.create.small_dripstone_bricks" | "block.minecraft.blue_concrete_powder" | "createWorld.customize.custom.useMonuments" | "block.minecraft.banner.square_top_left.light_blue" | "createWorld.customize.preset.bottomless_pit" | "commands.team.option.friendlyfire.disabled" | "ftbquests.quest.dependency_requirement.all_completed" | "block.minecraft.crimson_door" | "block.minecraft.granite_stairs" | "commands.curios.unlock.success" | "entity.botania.pixie" | "block.minecraft.banner.stripe_right.gray" | "block.minecraft.banner.botania_spark_recessive.lime" | "block.minecraft.bamboo_sapling" | "advancements.nether.get_wither_skull.title" | "item.botania.lime_petal" | "ftbquests.reward.team_reward" | "block.minecraft.banner.botania_hoe.brown" | "mco.download.failed" | "selectWorld.gameMode.creative" | "advancements.husbandry.tactical_fishing.description" | "block.minecraft.banner.straight_cross.gray" | "create.ponder.basin.text_4" | "create.ponder.basin.text_3" | "create.ponder.basin.text_6" | "create.ponder.basin.text_5" | "ftbquests.loot.entitytype.passive" | "attribute.name.generic.reach_distance" | "create.ponder.basin.text_8" | "create.ponder.basin.text_7" | "item.botania.temperance_stone" | "create.ponder.basin.text_9" | "forge.configgui.zoomInMissingModelTextInGui.tooltip" | "advMode.allPlayers" | "block.minecraft.banner.stripe_right.orange" | "create.crafting_blueprint.secondary_display_slot" | "block.minecraft.banner.botania_flower.blue" | "subtitles.entity.ender_dragon.ambient" | "block.minecraft.glowstone" | "create.ponder.basin.text_2" | "create.ponder.basin.text_1" | "block.minecraft.potted_cornflower" | "item.botania.ancient_will_dharok" | "block.botania.green_buried_petals" | "item.create.experience_nugget.tooltip" | "entity.minecraft.marker" | "create.ponder.spout_filling.header" | "advancement.create.stressometer_maxed" | "item.botania.tiny_planet" | "ftbquests.disable_completion_toast" | "subtitles.entity.witch.ambient" | "subtitles.block.pointed_dripstone.drip_lava_into_cauldron" | "block.botania.conjuration_catalyst" | "item.botania.pixie_ring" | "botania.tagline.flowerSpeed" | "create.gui.scrollInput.defaultTitle" | "block.minecraft.granite" | "block.minecraft.banner.diagonal_up_left.gray" | "item.botania.water_bowl" | "gui.ae2.Black" | "argument.block.property.unknown" | "chat.ae2.DeviceNotPowered" | "sidebar_button.ftblibrary.toggle.gamemode.tooltip" | "block.create.waxed_exposed_copper_tile_stairs" | "subtitles.entity.lightning_bolt.impact" | "commands.recipe.take.success.multiple" | "subtitles.ui.stonecutter.take_result" | "tutorial.move.title" | "fml.menu.notification.title" | "structure_block.hover.corner" | "create.ponder.mechanical_pump_flow.text_3" | "advancements.husbandry.root.title" | "create.ponder.mechanical_pump_flow.text_4" | "create.ponder.mechanical_pump_flow.text_5" | "create.ponder.mechanical_pump_flow.text_6" | "item.minecraft.wooden_axe" | "subtitles.block.campfire.crackle" | "item.minecraft.cyan_dye" | "botania.entry.decorativeBlocks" | "item.ae2.red_paint_ball" | "block.minecraft.banner.stripe_bottom.orange" | "block.create.waxed_weathered_copper_shingle_slab" | "botania.tagline.gIntro" | "block.minecraft.banner.stripe_downleft.white" | "block.botania.enchanter" | "ftbquests.quest.can_repeat" | "subtitles.entity.vex.ambient" | "create.track_signal.mode_change.cross_signal" | "fancySkybox.normalWorlds" | "commands.advancement.grant.criterion.to.many.success" | "botania.entry.terrasteel" | "block.minecraft.potted_dark_oak_sapling" | "entity.minecraft.villager.fisherman" | "mco.brokenworld.message.line2" | "mco.brokenworld.message.line1" | "block.botania.kekimurus" | "create.ponder.mechanical_pump_flow.text_1" | "create.ponder.mechanical_pump_flow.text_2" | "item.minecraft.sweet_berries" | "create.station.disassemble_train" | "botania.page.flowerShrinking0" | "create.ponder.index_description" | "create.gui.filter.respect_data" | "item.botania.star_sword" | "item.ae2.basic_card" | "enderstorage.command.no_freq" | "block.botania.blue_petal_block" | "botania.page.flowerShrinking1" | "generic.reachDistance" | "block.create.sequenced_gearshift" | "item.minecraft.firework_star.yellow" | "stat_type.minecraft.used" | "commands.recipe.give.failed" | "create.display_source.scoreboard.objective.deaths" | "create.item_attributes.badly_damaged.inverted" | "block.minecraft.banner.botania_lexicon.brown" | "block.minecraft.banner.square_top_left.brown" | "create.train_assembly.bogeys_too_close" | "item.minecraft.firework_star.blue" | "botania.page.arcanerose0" | "botania.page.arcanerose1" | "ftbteams.create_party" | "entity.minecraft.zombie" | "block.minecraft.detector_rail" | "advancement.botania:manaCartCraft.desc" | "item.kubejs.silver_coin" | "item.botania.lens_piston.short" | "item.itemfilters.xor.description" | "fml.menu.mods.info.trust.noauthority" | "item.minecraft.music_disc_ward.desc" | "subtitles.entity.mule.angry" | "block.minecraft.banner.botania_fish.lime" | "block.botania.clayconia" | "commands.forceload.added.multiple" | "subtitles.entity.ender_dragon.hurt" | "commands.curios.remove.success" | "block.minecraft.banner.square_bottom_left.orange" | "botania.page.grassSeeds2" | "botania.page.grassSeeds1" | "botania.page.grassSeeds4" | "subtitles.entity.ender_dragon.shoot" | "botania.page.grassSeeds3" | "botania.page.grassSeeds5" | "block.create.copper_backtank" | "death.fell.finish" | "pack.incompatible.new" | "create.ponder.tag.kinetic_sources" | "block.minecraft.stripped_spruce_log" | "create.ponder.mechanical_crafter_covers.text_1" | "advancement.create.crushing_wheel.desc" | "botania.page.grassSeeds0" | "block.create.polished_cut_andesite_stairs" | "create.ponder.mechanical_crafter_covers.text_3" | "ftbquests.reward.ftbquests.item.random_bonus" | "create.ponder.mechanical_crafter_covers.text_2" | "block.minecraft.lime_concrete" | "block.ae2.chiseled_quartz_slab" | "block.minecraft.waxed_weathered_cut_copper" | "gui.tooltips.ae2.DurationFormatHours" | "block.minecraft.deepslate_iron_ore" | "curios.modifiers.hands" | "death.attack.badRespawnPoint.message" | "key.keyboard.keypad.0" | "key.keyboard.keypad.1" | "botania.entry.wand" | "botania.tagline.monocle" | "block.minecraft.banner.botania_axe.gray" | "item.botania.terrasteel_nugget" | "gui.ae2.CraftingTerminal" | "ftbquests.file.loot.entity" | "block.minecraft.banner.diagonal_right.green" | "botania.page.cloudPendant1" | "botania.subtitle.gaiaTrap" | "patchouli.gui.lexicon.edition_str" | "botania.page.cloudPendant0" | "key.keyboard.keypad.2" | "key.keyboard.keypad.3" | "botania.entry.blazeBlock" | "key.keyboard.keypad.4" | "gui.ae2.Interface" | "key.keyboard.keypad.5" | "key.keyboard.keypad.6" | "key.keyboard.keypad.7" | "key.keyboard.keypad.8" | "key.keyboard.keypad.9" | "botania.tagline.elfResources" | "botania.page.turntable2" | "block.botania.tiny_potato" | "botania.page.turntable1" | "botania.page.spreader0" | "botania.page.turntable0" | "botania.page.spreader1" | "commands.data.modify.expected_object" | "block.minecraft.banner.botania_flower.lime" | "botania.page.spreader2" | "botania.page.spreader3" | "options.graphics.warning.title" | "botania.page.spreader4" | "botania.page.spreader5" | "argument.entity.options.level.negative" | "item.itemfilters.mod" | "subtitles.entity.salmon.death" | "ftbteams.info.id" | "stat.minecraft.tune_noteblock" | "advancement.botania:desuGun" | "commands.forceload.list.single" | "block.create.small_rose_quartz_tiles" | "theoneprobe.ae2.showing" | "block.minecraft.banner.botania_fish.blue" | "options.graphics.warning.renderer" | "item.minecraft.cooked_mutton" | "block.minecraft.banner.stripe_middle.pink" | "gui.ae2.Pink" | "createWorld.customize.custom.count" | "key.jei.toggleHideIngredient" | "subtitles.entity.parrot.imitate.endermite" | "item.ae2.yellow_glass_cable" | "create.item_attributes.added_by" | "block.create.waxed_exposed_copper_tiles" | "patchouli.gui.lexicon.button.toggle_mock_header" | "gui.saved" | "item.botania.redstone_root" | "botania.tagline.kekimurus" | "death.attack.fireworks.player" | "ftbquests.quest.shape.hexagon" | "block.minecraft.banner.botania_spark_dominant.orange" | "subtitles.entity.parrot.imitate.pillager" | "advancement.create.musical_arm" | "block.minecraft.beacon.secondary" | "itemGroup.brewing" | "create.display_source.item_throughput.interval" | "subtitles.entity.fox.death" | "ftbquests.quest.shape.octagon" | "botania.page.spectranthemum3" | "create.display_source.fluid_amount" | "item.minecraft.purple_dye" | "container.enderchest" | "create.gui.attribute_filter.allow_list_disjunctive" | "botania.page.spectranthemum0" | "block.create.display_board" | "botaniamisc.hasKeepIvy" | "botania.page.spectranthemum2" | "botania.page.spectranthemum1" | "gui.tooltips.ae2.PartitionStorageHint" | "block.create.smart_chute" | "subtitles.block.grindstone.use" | "biome.minecraft.forest" | "botania.nei.runicAltar" | "botania.entry.distributor" | "itemGroup.ftbquests" | "item.ae2.white_covered_cable" | "botania.entry.elfGear" | "waila.ae2.Stored" | "commands.scoreboard.objectives.modify.displayname" | "gui.ae2.Excluded" | "block.minecraft.water" | "ftbteams.already_in_party" | "selectWorld.deleteWarning" | "team.collision.always" | "botania.subtitle.orechid" | "item.botania.lens_normal" | "block.ae2.quartz_pillar" | "block.create.orange_toolbox" | "item.minecraft.lingering_potion.effect.slowness" | "block.botania.floating_tangleberrie" | "item.botania.cosmetic_devil_horns" | "multiplayer.disconnect.invalid_player_movement" | "advancement.create.display_board_0" | "advancements.end.respawn_dragon.description" | "item.create.minecart_coupling" | "create.schedule.condition.player_count.summary_plural" | "subtitles.block.smithing_table.use" | "block.botania.green_shiny_flower" | "item.patchouli.comprehensive_test_book.landing" | "create.ponder.mechanical_drill_contraption.header" | "create.item_attributes.astralsorcery_perk_gem" | "create.item_attributes.not_stackable.inverted" | "create.gui.schedule.move_down" | "advMode.previousOutput" | "key.keyboard.unknown" | "create.schedule.condition.delay" | "item.create.copper_backtank.tooltip" | "item.minecraft.rabbit_spawn_egg" | "block.minecraft.green_stained_glass" | "mirror.front_back" | "botania.tagline.thorRing" | "advancements.nether.obtain_crying_obsidian.title" | "item.botania.spark_upgrade_recessive" | "block.minecraft.bed.no_sleep" | "create.schedule.instruction.destination.summary" | "item.ae2.fluix_pearl" | "commands.drop.success.multiple_with_table" | "create.super_glue.first_pos" | "commands.worldborder.set.failed.small" | "item.minecraft.firework_star.lime" | "create.train_assembly.frontmost_bogey_at_station" | "block.botania.green_mystical_flower" | "patchouli.gui.lexicon.button.editor" | "subtitles.entity.glow_item_frame.add_item" | "create.item_attributes.hauntable" | "create.ponder.track_placement.header" | "block.minecraft.raw_iron_block" | "botania.challenge.entropinnyumSetup.desc" | "item.ae2.light_blue_smart_cable" | "worldgen.flower.patchChance" | "create.subtitle.mechanical_press_activation_belt" | "block.ftbquests.chest.transfer_all" | "advMode.notAllowed" | "gui.ae2.ConfirmCraftCpuStatus" | "tag.botania.mana_dusts" | "options.graphics.warning.message" | "block.create.deployer" | "item.minecraft.chainmail_boots" | "structure_block.invalid_structure_name" | "block.botania.metamorphic_mountain_bricks_stairs" | "chat.ae2.LoadedSettings" | "key.ae2.wireless_terminal" | "death.attack.lightningBolt" | "botania.page.swapRing1" | "botania.page.swapRing0" | "item.botania.lens_bounce.short" | "addServer.hideAddress" | "block.minecraft.banner.cross.yellow" | "biome.minecraft.windswept_savanna" | "botania.page.runeAltar2" | "botania.page.runeAltar1" | "botania.page.runeAltar0" | "createWorld.customize.custom.maxHeight" | "botania.tagline.spellCloth" | "mco.minigame.world.restore" | "botania.page.runeAltar6" | "botania.page.runeAltar5" | "botania.page.runeAltar4" | "block.create.gantry_shaft" | "botania.page.runeAltar3" | "botania.page.runeAltar9" | "advancements.story.shiny_gear.title" | "botania.page.runeAltar8" | "botania.page.runeAltar7" | "block.minecraft.banner.botania_sword.cyan" | "block.botania.dandelifeon" | "ftbquests.task.ftbquests.xp" | "entity.minecraft.glow_item_frame" | "block.botania.mana_glass_pane" | "item.ae2.gray_paint_ball" | "biome.minecraft.end_highlands" | "gamerule.doMobLoot.description" | "gui.tooltips.ae2.SideLeft" | "block.create.small_andesite_brick_wall" | "botania.subtitle.enchanterEnchant" | "item.botania.astrolabe" | "key.keyboard.scroll.lock" | "block.create.brown_toolbox" | "botania.tagline.knockbackBelt" | "argument.entity.options.mode.invalid" | "item.ae2.certus_quartz_dust" | "attribute.name.botania.pixieSpawnChance" | "block.create.horizontal_framed_glass_pane" | "advancements.adventure.kill_all_mobs.description" | "tag.botania.dragonstone_gems" | "effect.minecraft.fire_resistance" | "block.minecraft.banner.botania_hoe.orange" | "block.minecraft.banner.botania_shovel.cyan" | "narration.edit_box" | "item.botania.slingshot" | "ftbquests.gui.change_progress.complete_deps" | "fml.modloading.failedtoloadforge" | "shaders.enabled" | "jei.key.category.hover.config.button" | "block.botania.mutated_grass" | "create.ponder.mechanical_crafter.text_3" | "create.ponder.mechanical_crafter.text_4" | "create.ponder.mechanical_crafter.text_5" | "selectWorld.recreate" | "create.ponder.mechanical_crafter.text_6" | "item.minecraft.stone_pickaxe" | "create.ponder.mechanical_crafter.text_7" | "create.ponder.mechanical_crafter.text_8" | "fml.menu.multiplayer.vanilla" | "subtitles.entity.fox.screech" | "create.ponder.mechanical_crafter.text_1" | "create.ponder.mechanical_crafter.text_2" | "options.biomeBlendRadius.9" | "options.biomeBlendRadius.7" | "options.biomeBlendRadius.5" | "options.biomeBlendRadius.3" | "options.biomeBlendRadius.1" | "block.botania.orange_double_flower" | "botania.entry.thermalily" | "multiplayer.player.joined.renamed" | "advancement.botania:terrasteelWeaponCraft" | "botania.page.spawnerClaw2" | "botania.page.munchdew0" | "fml.messages.version.restriction.bounded.inclusive" | "botania.page.munchdew1" | "botania.page.munchdew2" | "create.ponder.tag.display_targets" | "block.minecraft.banner.border.yellow" | "gui.tooltips.ae2.CpuSelectionModePlayersOnly" | "botania.page.spawnerClaw0" | "botania.page.spawnerClaw1" | "block.minecraft.banner.stripe_downright.white" | "create.ponder.portable_storage_interface.text_8" | "block.create.cyan_valve_handle" | "create.ponder.portable_storage_interface.text_7" | "create.ponder.portable_storage_interface.text_6" | "create.ponder.portable_storage_interface.text_5" | "create.ponder.portable_storage_interface.text_4" | "create.ponder.portable_storage_interface.text_3" | "create.ponder.portable_storage_interface.text_2" | "gamerule.commandBlockOutput" | "create.ponder.portable_storage_interface.text_1" | "create.gui.schematicannon.option.dontReplaceSolid" | "selectServer.defaultName" | "botania.page.thunderSword1" | "botania.page.thunderSword0" | "item.botania.cosmetic_eyepatch" | "item.minecraft.nether_wart" | "block.enderstorage.ender_tank" | "block.minecraft.banner.botania_logo.silver" | "options.biomeBlendRadius" | "botania.entry.glassPick" | "fml.menu.mods.info.authors" | "subtitles.entity.parrot.imitate.ravager" | "block.minecraft.powder_snow" | "create.hint.hose_pulley.title" | "compliance.playtime.greaterThan24Hours" | "create.ponder.tag.kinetic_relays.description" | "effect.botania.clear" | "menu.savingLevel" | "biome.minecraft.deep_cold_ocean" | "block.create.layered_veridium" | "block.minecraft.orange_bed" | "enchantment.minecraft.smite" | "advancements.adventure.root.description" | "block.create.polished_cut_dripstone_wall" | "create.command.killTPSCommand.argument.tickTime" | "block.create.cut_ochrum_slab" | "create.item_attributes.book_copy_second" | "block.minecraft.banner.cross.brown" | "gui.ae2.StorageBusFluids" | "create.ponder.hose_pulley.header" | "create.linked_controller.bind_mode" | "ftbquests.file.defaults.autoclaim_rewards" | "subtitles.entity.drowned.ambient" | "create.schedule.instruction.filter_edit_box" | "achievement.ae2.IOPort.desc" | "block.botania.light_gray_petal_block" | "ftbquests.gui.edit_text" | "subtitles.entity.item_frame.rotate_item" | "create.subtitle.whistle" | "subtitles.block.furnace.fire_crackle" | "create.recipe.deploying.not_consumed" | "stat.minecraft.interact_with_furnace" | "ftbquests.task.ftbquests.structure" | "biome.minecraft.mushroom_fields" | "ftbquests.gui.reset_progress" | "key.keyboard.f8" | "key.keyboard.f9" | "block.minecraft.banner.botania_pickaxe.green" | "curios.modifiers.bracelet" | "key.keyboard.f6" | "botania.entry.daffomill" | "key.keyboard.f7" | "key.keyboard.f1" | "block.create.layered_diorite" | "create.display_link.no_source" | "key.keyboard.f4" | "multiplayer.disconnect.invalid_vehicle_movement" | "key.keyboard.f5" | "key.keyboard.f2" | "key.keyboard.f3" | "mco.template.select.none.linkTitle" | "advancements.story.smelt_iron.description" | "subtitles.block.redstone_torch.burnout" | "entity.minecraft.villager.nitwit" | "item.botania.quartz_mana" | "block.create.polished_cut_calcite" | "block.minecraft.oak_fence_gate" | "block.create.exposed_copper_shingle_stairs" | "jei.tooltip.recipe.tag" | "create.boiler.idle" | "block.minecraft.banner.creeper.gray" | "subtitles.item.book.page_turn" | "block.minecraft.cyan_bed" | "subtitles.item.bone_meal.use" | "entity.minecraft.villager.cleric" | "block.botania.brown_mushroom" | "item.botania.flower_bag" | "jigsaw_block.target" | "block.minecraft.banner.stripe_downright.green" | "stat.minecraft.interact_with_grindstone" | "item.itemfilters.max_count" | "botania.entry.corporeaFunnel" | "optimizeWorld.info.converted" | "commands.locate.success" | "block.botania.solegnolia_chibi.reference" | "botania.entry.terraformRod" | "botania.tagline.skyDirtRod" | "effect.minecraft.resistance" | "arguments.function.unknown" | "subtitles.entity.zombie_villager.hurt" | "ftbquests.quest.hide" | "block.create.magenta_seat" | "block.botania.red_floating_flower" | "commands.bossbar.set.visible.success.hidden" | "block.minecraft.banner.botania_sword.yellow" | "advancement.create.mechanical_mixer" | "create.train_assembly.no_bogeys" | "block.botania.apothecary_plains" | "item.ftblibrary.fluid_container.use" | "create.display_source.boiler_status" | "block.ae2.cable_bus" | "argument.player.unknown" | "mco.minigame.world.selected" | "gui.ae2.UpgradeToolbelt" | "block.minecraft.banner.half_horizontal_bottom.purple" | "block.minecraft.fletching_table" | "item.create.handheld_worldshaper.tooltip.summary" | "block.minecraft.banner.stripe_downleft.gray" | "generator.botania-skyblock" | "commands.setblock.success" | "botania.page.judgementCloaks0" | "botania.page.judgementCloaks1" | "botania.page.judgementCloaks2" | "botania.page.judgementCloaks3" | "botania.page.judgementCloaks4" | "block.create.peculiar_bell" | "fml.messages.artifactversion.none" | "item.minecraft.flower_banner_pattern.desc" | "block.minecraft.granite_slab" | "item.botania.rune_lust" | "create.schematic.rotation.none" | "chat.coordinates.tooltip" | "item.botania.lens_redirect" | "item.ae2.pink_glass_cable" | "create.subtitle.mechanical_press_activation" | "create.ponder.redstone_link.header" | "patchouli.gui.lexicon.categories" | "block.minecraft.banner.triangles_bottom.red" | "block.botania.blaze_quartz" | "botania.brew.absorption" | "ftbquests.quest.disable_jei" | "item.minecraft.rotten_flesh" | "item.minecraft.brewing_stand" | "subtitles.entity.fox.ambient" | "subtitles.entity.generic.drink" | "item.minecraft.potion" | "entity.minecraft.wolf"
    type RawTexture = "botania:textures/model/teru_teru_bozu.png" | "forge:textures/gui/version_check_icons.png" | "minecraft:textures/gui/title/background/panorama_1.png" | "minecraft:textures/entity/creeper/creeper.png" | "minecraft:textures/gui/options_background.png" | "ftblibrary:textures/icons/support.png" | "minecraft:default/0" | "minecraft:textures/entity/skeleton/skeleton.png" | "ftblibrary:textures/gui/background_squares.png" | "minecraft:textures/entity/sheep/sheep.png" | "minecraft:textures/atlas/chest.png" | "minecraft:textures/misc/enchanted_item_glint.png" | "minecraft:textures/gui/widgets.png" | "minecraft:dynamic/light_map_1" | "minecraft:textures/gui/world_selection.png" | "ftbteams:textures/teams.png" | "minecraft:skins/cee571cb1359ea46123e3a67300c00431c5e8599" | "ftbquests:textures/gui/arrow_collapsed.png" | "botania:textures/model/brewery.png" | "ftblibrary:textures/icons/toggle_day.png" | "botania:textures/model/avatar.png" | "botania:textures/model/pylon_gaia.png" | "minecraft:textures/environment/clouds.png" | "minecraft:textures/gui/title/background/panorama_overlay.png" | "minecraft:illageralt/0" | "minecraft:textures/environment/sun.png" | "minecraft:textures/environment/moon_phases.png" | "create:textures/gui/jei/widgets.png" | "minecraft:worlds/____/ed938a012c95d101e6caed69460179b72f3525a3/icon" | "patchouli:unicode_font/0" | "minecraft:textures/gui/title/background/panorama_4.png" | "ftbquests:textures/shapes/circle/background.png" | "ftbquests:textures/gui/arrow_left.png" | "minecraft:textures/entity/zombie/zombie.png" | "minecraft:textures/entity/wolf/wolf.png" | "botania:textures/model/corporea_index.png" | "minecraft:textures/entity/chicken.png" | "minecraft:textures/atlas/particles.png" | "minecraft:textures/misc/vignette.png" | "minecraft:textures/entity/villager/type/plains.png" | "minecraft:textures/gui/title/background/panorama_2.png" | "ftbquests:textures/shapes/circle/outline.png" | "minecraft:textures/entity/sheep/sheep_fur.png" | "minecraft:textures/gui/title/background/panorama_0.png" | "jei:textures/atlas/gui.png" | "minecraft:textures/entity/horse/horse_chestnut.png" | "ftbquests:textures/gui/arrow_right.png" | "botania:textures/model/hourglass.png" | "minecraft:textures/atlas/mob_effects.png" | "minecraft:textures/gui/title/edition.png" | "minecraft:textures/entity/llama/decor/trader_llama.png" | "ftblibrary:textures/icons/toggle_night.png" | "minecraft:textures/entity/spider_eyes.png" | "minecraft:textures/atlas/paintings.png" | "minecraft:textures/gui/icons.png" | "botania:textures/model/pylon_natura.png" | "minecraft:textures/entity/steve.png" | "minecraft:textures/atlas/beds.png" | "botania:textures/model/bellows.png" | "minecraft:textures/gui/toasts.png" | "ftblibrary:textures/icons/toggle_rain.png" | "minecraft:textures/entity/cow/cow.png" | "minecraft:textures/entity/spider/spider.png" | "minecraft:textures/entity/wolf/wolf_angry.png" | "minecraft:textures/gui/container/creative_inventory/tab_botania.png" | "minecraft:textures/entity/horse/horse_markings_whitefield.png" | "ftbquests:textures/gui/settings.png" | "minecraft:uniform/2" | "minecraft:uniform/1" | "minecraft:uniform/0" | "ftblibrary:textures/icons/toggle_gamemode.png" | "minecraft:textures/gui/accessibility.png" | "minecraft:textures/atlas/shield_patterns.png" | "minecraft:skins/17f76a23ff4d227a94ea3d5802dccae9f2ae9aa9" | "minecraft:textures/gui/title/mojangstudios.png" | "minecraft:textures/entity/bat.png" | "minecraft:textures/gui/title/background/panorama_5.png" | "minecraft:textures/atlas/blocks.png" | "jei:textures/gui/gui_vanilla.png" | "ftbquests:textures/shapes/circle/shape.png" | "minecraft:textures/entity/llama/gray.png" | "ftbquests:textures/gui/close.png" | "minecraft:textures/atlas/shulker_boxes.png" | "minecraft:textures/entity/villager/profession/nitwit.png" | "minecraft:missing/0" | "minecraft:textures/entity/iron_golem/iron_golem.png" | "minecraft:textures/entity/pig/pig.png" | "ftbquests:textures/gui/dependency.png" | "minecraft:textures/entity/llama/creamy.png" | "minecraft:textures/atlas/banner_patterns.png" | "botania:textures/model/pylon_mana.png" | "minecraft:textures/entity/iron_golem/iron_golem_crackiness_medium.png" | "ftbquests:textures/gui/collect_rewards.png" | "minecraft:textures/entity/villager/villager.png" | "minecraft:textures/gui/container/creative_inventory/tab_items.png" | "ftbquests:textures/gui/arrow_expanded.png" | "minecraft:textures/misc/shadow.png" | "ftbquests:textures/item/book.png" | "minecraft:alt/0" | "minecraft:textures/gui/title/background/panorama_3.png" | "minecraft:textures/gui/container/creative_inventory/tabs.png" | "minecraft:missingno" | "ftbquests:textures/gui/pin.png" | "minecraft:textures/atlas/signs.png" | "minecraft:textures/gui/title/minecraft.png";
    type Texture = "create:block/sticker" | "create:block/toolbox/white" | "ae2:part/cable/core/glass/purple" | "botania:block/metamorphic_plains_cobblestone" | "ae2:part/formation_plane_on" | "minecraft:block/dandelion" | "minecraft:block/smithing_table_side" | "itemfilters:item/custom" | "minecraft:block/dropper_front" | "create:block/adjustable_chain_gearshift" | "ae2:item/memory_card_brown" | "botania:item/spawner_mover" | "ftblibrary:icons/lock" | "minecraft:block/twisting_vines_plant" | "botania:block/orange_shiny_flower" | "botania:item/auto_crafting_halo" | "botania:block/dandelifeon" | "botania:item/blood_pendant_gem" | "minecraft:item/fishing_rod_cast" | "enderstorage:items/pouch/buttons/right/red" | "ae2:block/drive/drive_inside" | "enderstorage:items/pouch/buttons/left/lime" | "minecraft:block/crafting_table_side" | "ae2:part/conversion_monitor_medium_locked" | "create:block/wheel_extras" | "create:block/seat/top_blue" | "minecraft:block/brewing_stand" | "create:block/palettes/stone_types/pillar/scorchia_cut_pillar" | "minecraft:item/diamond_hoe" | "minecraft:block/dark_oak_log" | "create:block/belt/gray_scroll" | "minecraft:block/pink_stained_glass_pane_top" | "create:block/gearshift_on" | "minecraft:item/black_candle" | "create:block/copper/oxidized_copper_shingles" | "minecraft:item/mojang_banner_pattern" | "minecraft:block/cake_bottom" | "ftblibrary:icons/rs_low" | "create:block/seat/side_purple" | "create:block/sail/canvas_purple" | "create:block/seat/top_yellow" | "minecraft:item/iron_horse_armor" | "minecraft:block/enchanting_table_side" | "ftblibrary:icons/back" | "minecraft:block/small_dripleaf_stem_bottom" | "ae2:item/ender_dust" | "botania:item/red_string" | "minecraft:block/oak_planks" | "minecraft:block/torch" | "create:block/brass_casing_side" | "ae2:part/cable/dense_covered/orange" | "minecraft:item/orange_dye" | "minecraft:item/diamond_sword" | "botania:block/chiseled_metamorphic_swamp_bricks_top" | "ae2:item/fluix_dust" | "ftblibrary:icons/right" | "minecraft:block/terracotta" | "create:block/bearing_top" | "create:block/palettes/stone_types/pillar/deepslate_cut_pillar" | "minecraft:item/crossbow_arrow" | "ftblibrary:icons/info" | "ae2:part/cable/smart/light_blue" | "create:item/crafter_slot_cover" | "minecraft:block/iron_block" | "ae2:part/cable/smart/black" | "botania:block/metamorphic_mountain_cobblestone" | "enderstorage:items/pouch/buttons/left/blue" | "create:block/mechanical_press_bottom" | "ftblibrary:icons/down" | "create:block/rotation_speed_controller_top" | "ae2:block/crafting/4k_storage_light" | "minecraft:block/birch_door_top" | "lootr:block/opened_barrel_top" | "botania:block/spark_changer_top" | "create:block/seat/side_orange" | "minecraft:item/birch_door" | "create:block/palettes/stone_types/pillar/limestone_cut_pillar" | "minecraft:block/repeater_on" | "minecraft:block/large_fern_top" | "minecraft:block/dead_brain_coral_block" | "create:block/deployer" | "minecraft:block/big_dripleaf_stem" | "botania:block/metamorphic_forest_bricks_1" | "minecraft:block/stripped_crimson_stem" | "minecraft:block/chipped_anvil_top" | "minecraft:block/tnt_side" | "minecraft:block/spruce_door_bottom" | "create:item/filter" | "botania:block/red_quartz_bottom" | "minecraft:item/poisonous_potato" | "create:block/bogey/frame2" | "minecraft:block/deepslate_coal_ore" | "minecraft:block/light_gray_concrete_powder" | "itemfilters:item/always_false" | "minecraft:block/stripped_birch_log_top" | "minecraft:block/gray_shulker_box" | "minecraft:item/bundle_filled" | "create:block/sail/canvas_orange" | "minecraft:item/stone_hoe" | "naturescompass:item/naturescompass_14" | "minecraft:block/cyan_concrete_powder" | "naturescompass:item/naturescompass_15" | "naturescompass:item/naturescompass_12" | "naturescompass:item/naturescompass_13" | "minecraft:block/cyan_stained_glass" | "naturescompass:item/naturescompass_18" | "minecraft:item/armor_stand" | "naturescompass:item/naturescompass_19" | "create:item/property_filter" | "naturescompass:item/naturescompass_16" | "naturescompass:item/naturescompass_17" | "curios:item/empty_belt_slot" | "minecraft:block/lime_candle_lit" | "ftblibrary:icons/rs_pulse" | "naturescompass:item/naturescompass_10" | "naturescompass:item/naturescompass_11" | "minecraft:block/enchanting_table_bottom" | "botania:item/spell_cloth" | "minecraft:block/dark_prismarine" | "naturescompass:item/naturescompass_09" | "botania:item/ancient_will_verac" | "botania:item/rune_sloth" | "minecraft:item/rabbit" | "ae2:block/glass/quartz_glass_frame0100" | "naturescompass:item/naturescompass_03" | "ae2:block/glass/quartz_glass_frame0101" | "botania:item/desu_gun" | "naturescompass:item/naturescompass_04" | "botania:block/labellia" | "naturescompass:item/naturescompass_01" | "naturescompass:item/naturescompass_02" | "naturescompass:item/naturescompass_07" | "forge:block/milk_flowing" | "naturescompass:item/naturescompass_08" | "naturescompass:item/naturescompass_05" | "naturescompass:item/naturescompass_06" | "botania:item/obedience_stick" | "itemfilters:item/item_group" | "minecraft:block/note_block" | "botania:block/red_mushroom" | "naturescompass:item/naturescompass_00" | "botania:item/podzol_seeds" | "ae2:block/quantum_ring" | "minecraft:item/blue_dye" | "create:block/vault_front" | "create:block/palettes/stone_types/layered/andesite_cut_layered" | "minecraft:item/cooked_salmon" | "create:block/diodes/pulse_extender/idle" | "minecraft:block/deepslate_iron_ore" | "minecraft:block/spruce_door_top" | "create:block/copper_casing_connected" | "create:block/belt/pink_scroll" | "botania:item/terrasteel_leggings" | "botania:item/laputa_shard" | "minecraft:block/item_frame" | "minecraft:item/purple_dye" | "botania:block/terra_plate_bottom" | "ae2:part/level_emitter_on" | "ae2:item/portable_cell_led" | "botania:block/hopperhock" | "botania:block/pink_mystical_flower" | "minecraft:block/red_terracotta" | "create:block/fluid_tank_inner_connected" | "ae2:part/cable/dense_covered/cyan" | "botania:item/cosmetic_black_bowtie" | "botania:block/metamorphic_forest_cobblestone" | "minecraft:block/smoker_side" | "botania:item/twig_wand_bind" | "botania:block/terra_plate_top" | "create:block/harvester" | "botania:block/endoflame" | "botania:block/livingwood_log" | "minecraft:block/barrel_top_open" | "botania:model/lexicon_elven" | "minecraft:block/horn_coral" | "minecraft:block/grindstone_side" | "botania:block/brown_double_flower_top" | "botania:block/brown_shiny_flower" | "botania:item/manaweave_boots" | "botania:block/white_double_flower" | "ae2:item/nether_quartz_pickaxe" | "minecraft:item/porkchop" | "create:block/clutch_off" | "minecraft:block/melon_stem" | "minecraft:item/cyan_dye" | "minecraft:block/soul_sand" | "minecraft:item/music_disc_pigstep" | "botania:block/elf_quartz_pillar_end" | "minecraft:block/blast_furnace_side" | "botania:block/stripped_livingwood_log" | "create:block/palettes/stone_types/small_brick/veridium_cut_small_brick" | "create:block/seat/top_red" | "botania:item/vuvuzela" | "minecraft:block/bamboo_stage0" | "create:block/brass_funnel_tall" | "ae2:part/cable/smart/cyan" | "minecraft:item/music_disc_13" | "create:block/seat/top_brown" | "create:item/schematic_and_quill" | "create:block/palettes/stone_types/layered/crimsite_cut_layered_connected" | "botania:block/apothecary_mountain_side" | "minecraft:item/music_disc_11" | "create:block/copper_redstone_plate_powered" | "botania:item/open_bucket" | "create:block/palettes/stone_types/ochrum" | "minecraft:block/scaffolding_side" | "create:block/brass_funnel_plating" | "ae2:block/io_port_side" | "create:block/mixer_base_side" | "ae2:block/glass/quartz_glass_frame0111" | "create:block/vault_side_large_connected" | "ae2:part/cable/dense_smart/cyan" | "ae2:block/glass/quartz_glass_frame0110" | "botania:block/mana_glass_pane" | "minecraft:block/mushroom_block_inside" | "create:block/palettes/stone_types/pillar/deepslate_cut_pillar_connected" | "botania:block/red_string_interceptor" | "minecraft:item/command_block_minecart" | "create:block/fluid_tank_window" | "botania:item/twig_wand_bottom" | "botania:block/bubbell" | "ftblibrary:icons/color_rgb" | "botania:item/quartz_sunny" | "botania:item/water_rod" | "ae2:item/blank_pattern" | "minecraft:block/purple_concrete" | "minecraft:block/spawner" | "ftblibrary:icons/inv_in" | "create:block/terrain_zapper_mesh" | "ftblibrary:icons/inv_io" | "create:block/static_saw" | "ae2:block/quartz_growth_accelerator_on" | "create:block/palettes/stone_types/slab/scoria_cut_slab" | "create:entity/blueprint_small" | "botania:item/lens_light" | "botania:block/turntable_side" | "ae2:block/drive/cells/default_cell" | "create:block/ladder_copper_hoop" | "minecraft:item/chainmail_boots" | "botania:item/livingwood_bow" | "botania:model/tiny_potato/gray" | "botania:block/apothecary_forest_top" | "minecraft:block/observer_front" | "ae2:item/memory_card_orange" | "botania:block/gourmaryllis" | "create:block/palettes/stone_types/small_brick/limestone_cut_small_brick" | "minecraft:item/spruce_boat" | "create:block/palettes/stone_types/pillar/calcite_cut_pillar" | "botania:item/lens_small" | "ae2:part/p2p_tunnel_back" | "minecraft:block/purple_candle_lit" | "create:block/toolbox/gray" | "create:block/diodes/pulse_repeater/idle" | "create:block/content_observer_powered" | "ae2:block/charger_inside" | "create:block/brass_gearbox" | "ae2:block/crafting/16k_storage" | "minecraft:block/ancient_debris_side" | "botania:block/chiseled_metamorphic_desert_bricks" | "botania:block/metamorphic_taiga_stone" | "minecraft:item/ender_eye" | "botania:item/incense_stick" | "minecraft:block/cartography_table_side2" | "minecraft:block/cartography_table_side3" | "minecraft:block/anvil" | "create:item/minecart_coupling" | "minecraft:block/cartography_table_side1" | "minecraft:block/composter_top" | "botania:block/tigerseye" | "minecraft:block/furnace_front_on" | "minecraft:item/bone" | "botania:block/dreamwood_log_top" | "ae2:part/monitor_back" | "botania:item/itemfinder_gem" | "botania:item/thor_ring" | "minecraft:block/barrel_bottom" | "botania:block/chiseled_red_quartz_side" | "minecraft:item/light_blue_dye" | "botania:model/tiny_potato/aureylian" | "botania:block/magenta_shiny_flower" | "minecraft:item/iron_door" | "minecraft:block/cut_copper" | "minecraft:item/book" | "botania:block/livingrock" | "create:block/rose_quartz_lamp_powered" | "ae2:item/view_cell" | "minecraft:block/brown_candle_lit" | "minecraft:block/orange_candle_lit" | "botania:item/flight_tiara" | "create:block/bracket_plate_metal" | "botania:block/light_blue_double_flower" | "botania:item/reach_ring" | "botania:block/crafty_crate_1_1" | "botania:block/crafty_crate_1_2" | "minecraft:item/chainmail_chestplate" | "botania:block/crafty_crate_1_3" | "minecraft:block/crimson_door_top" | "minecraft:item/hopper_minecart" | "minecraft:block/gray_wool" | "botania:item/twig_wand_top" | "minecraft:block/composter_bottom" | "botania:item/ender_dagger_overlay" | "create:block/vault_side" | "minecraft:item/iron_pickaxe" | "ae2:item/portable_item_cell_64k" | "botania:item/lens_paint" | "ae2:part/plane_sides" | "botania:item/pattern_1_3" | "botania:item/pattern_1_2" | "botania:item/pattern_1_1" | "minecraft:block/birch_door_bottom" | "minecraft:block/glowstone" | "ae2:part/cable/dense_smart/blue" | "ae2:item/portable_fluid_cell_16k" | "minecraft:item/golden_boots" | "minecraft:block/jack_o_lantern" | "create:block/palettes/stone_types/cut/andesite_cut" | "create:block/valve_handle/valve_handle_orange" | "minecraft:block/brown_terracotta" | "minecraft:block/fire_0" | "create:item/schedule" | "minecraft:block/fire_1" | "botania:block/metamorphic_mesa_bricks_mirrored" | "create:block/signal_box_top" | "minecraft:item/wheat" | "botania:item/sextant" | "ae2:block/drive/drive_front" | "botania:block/enchanted_soil_top" | "create:block/blaze_burner_flame_superheated_scroll" | "botania:block/jaded_amaranthus" | "create:block/railway_casing_connected" | "botania:block/lavender_quartz_side" | "ae2:part/cable/dense_covered/red" | "botania:item/mana_mirror_overlay" | "create:block/palettes/stone_types/polished/deepslate_cut_polished" | "minecraft:block/birch_sapling" | "minecraft:block/weeping_vines_plant" | "ae2:part/cable/dense_covered/light_gray" | "botania:block/apothecary_taiga_top" | "minecraft:block/cracked_nether_bricks" | "create:item/track" | "enderstorage:items/pouch/buttons/right/yellow" | "minecraft:item/spectral_arrow" | "create:block/standard_track_mip" | "create:block/palettes/stone_types/cut/granite_cut" | "minecraft:block/light_blue_concrete_powder" | "minecraft:block/birch_leaves" | "create:block/belt_diagonal_scroll" | "minecraft:block/bookshelf" | "minecraft:block/bee_nest_top" | "minecraft:item/brown_dye" | "minecraft:block/scaffolding_top" | "ae2:part/cable/core/covered/light_gray" | "minecraft:item/golden_apple" | "minecraft:block/dropper_front_vertical" | "create:block/seat/side_pink" | "botania:block/orange_mushroom" | "minecraft:block/tripwire" | "ftblibrary:icons/controller" | "minecraft:block/quartz_bricks" | "create:block/blaze_heater_brazier_soul" | "botania:item/horn_snow" | "minecraft:block/white_candle" | "minecraft:item/axolotl_bucket" | "botania:block/narslimmus" | "create:block/railway_casing" | "create:block/valve_handle/valve_handle_copper" | "lootr:shulker_opened" | "minecraft:block/turtle_egg_very_cracked" | "minecraft:item/green_candle" | "botania:item/cosmetic_kamui_eye" | "create:block/palettes/stone_types/brick/tuff_cut_brick" | "botania:block/dark_quartz_bottom" | "create:block/palettes/stone_types/layered/granite_cut_layered" | "create:block/vault_bottom_large_connected" | "minecraft:item/leather_boots_overlay" | "minecraft:block/cauldron_inner" | "minecraft:block/amethyst_block" | "ftblibrary:icons/map" | "ae2:item/spatial_cell_component_16" | "create:block/flap_display_top" | "minecraft:block/deepslate_diamond_ore" | "create:block/schematic_table_top" | "minecraft:block/flower_pot" | "botania:item/pebble" | "ftblibrary:icons/lock_open" | "minecraft:block/jungle_sapling" | "enderstorage:items/pouch/buttons/middle/gray" | "minecraft:block/gray_terracotta" | "minecraft:block/stonecutter_bottom" | "botania:block/apothecary_mossy_bottom" | "minecraft:item/bowl" | "create:block/belt/yellow_diagonal_scroll" | "minecraft:block/iron_door_bottom" | "botania:block/purple_double_flower_top" | "minecraft:item/red_candle" | "ae2:block/molecular_assembler" | "itemfilters:item/damage" | "minecraft:item/light_gray_candle" | "minecraft:block/deepslate_tiles" | "create:block/palettes/stone_types/layered/diorite_cut_layered" | "minecraft:block/orange_concrete_powder" | "botania:block/enchanted_soil_side" | "minecraft:block/poppy" | "create:block/palettes/stone_types/pillar/tuff_cut_pillar" | "create:block/palettes/stone_types/pillar/veridium_cut_pillar" | "ae2:item/card_inverter" | "botania:item/cosmetic_clock_eye" | "minecraft:block/purple_wool" | "ae2:part/export_bus_sides" | "ae2:block/quartz_pillar_side" | "ae2:item/sky_dust" | "minecraft:entity/banner_base" | "create:block/palettes/stone_types/polished/scoria_cut_polished" | "create:block/palettes/stone_types/slab/limestone_cut_slab" | "minecraft:block/wet_sponge" | "botania:item/crystal_bow_pulling_1" | "botania:item/crystal_bow_pulling_2" | "ae2:part/cable/dense_covered/blue" | "botania:item/crystal_bow_pulling_3" | "botania:item/crystal_bow_pulling_4" | "botania:item/crystal_bow_pulling_5" | "create:block/palettes/stone_types/slab/crimsite_cut_slab" | "minecraft:item/bundle" | "minecraft:item/fire_charge" | "create:block/valve_handle/valve_handle_cyan" | "botania:item/cosmetic_questgiver_mark" | "create:block/brass_block" | "botania:block/chiseled_metamorphic_swamp_bricks_top_1" | "botania:item/mana_string" | "create:block/seat/top_lime" | "enderstorage:items/pouch/buttons/right/lime" | "create:block/funnel_open" | "botania:block/yellow_mushroom" | "botania:block/chiseled_metamorphic_fungal_bricks" | "minecraft:item/diamond_horse_armor" | "ae2:part/crafting_terminal_bright" | "ae2:block/chest/lights_off" | "ae2:part/cable/core/glass/orange" | "create:block/andesite_funnel_powered" | "tiab:items/time_in_a_bottle" | "botania:item/flask" | "ftblibrary:icons/money" | "botania:item/blacker_lotus" | "create:item/potato_cannon" | "ae2:block/debug/chunk_loader" | "minecraft:block/white_tulip" | "minecraft:block/sculk_sensor_bottom" | "ae2:item/processing_pattern" | "botania:block/apothecary_mountain_top" | "create:block/encased_chain_drive_end" | "ae2:item/wireless_booster" | "minecraft:block/chiseled_quartz_block" | "ae2:item/crystal_seed_fluix2" | "ae2:part/cable/dense_smart/transparent" | "create:block/shadow_steel_casing_connected" | "minecraft:block/pink_shulker_box" | "create:block/contact_side_powered" | "minecraft:block/pumpkin_side" | "ae2:block/spatial_io_port_side_off" | "minecraft:block/light_gray_concrete" | "botania:block/dry_grass_top" | "ae2:block/chest/lights_on_medium" | "ae2:item/crystal_seed_fluix3" | "ae2:part/pattern_encoding_terminal" | "create:block/belt/lime_diagonal_scroll" | "create:block/contact_front" | "minecraft:block/brown_wool" | "botania:block/metamorphic_mountain_stone" | "botania:item/missile_rod" | "ae2:block/creative_energy_cell" | "botania:block/detector_light_relay" | "botania:block/lime_double_flower" | "botania:item/super_cloud_pendant_gem" | "create:block/rose_quartz_lamp" | "botania:block/elven_spreader_side" | "minecraft:block/purpur_pillar_top" | "botania:block/apothecary_desert_side" | "ae2:part/cable/dense_covered/purple" | "minecraft:block/purple_glazed_terracotta" | "minecraft:block/stripped_jungle_log_top" | "ae2:part/cable/core/covered/orange" | "minecraft:block/purple_stained_glass_pane_top" | "ae2:item/crystal_seed_certus" | "ae2:block/dense_energy_cell_4" | "ae2:block/dense_energy_cell_2" | "ae2:block/dense_energy_cell_3" | "botania:item/dreamwood_twig" | "ae2:block/dense_energy_cell_0" | "ae2:block/dense_energy_cell_1" | "ae2:part/pattern_encoding_terminal_medium" | "botania:block/red_pavement" | "ae2:part/cable/dense_covered/lime" | "create:block/palettes/stone_types/cap/deepslate_cut_cap" | "ae2:part/cable/covered/transparent" | "ae2:part/storage_monitor_dark" | "ae2:item/advanced_card" | "minecraft:block/light_blue_stained_glass_pane_top" | "minecraft:block/chain" | "ae2:block/interface" | "minecraft:block/bamboo_stalk" | "minecraft:block/birch_planks" | "minecraft:block/gold_ore" | "enderstorage:items/pouch/buttons/right/blue" | "minecraft:block/cave_vines_lit" | "create:block/andesite_encased_cogwheel_side_connected" | "ae2:part/cable/smart/lime" | "create:block/bracket_wooden" | "ae2:item/memory_card_red" | "minecraft:block/crimson_roots" | "create:block/palettes/ornate_iron_window_pane_top" | "ae2:block/debug/item_gen" | "ftblibrary:icons/security_private" | "create:item/train_door" | "minecraft:block/polished_blackstone_bricks" | "create:block/brass_casing_inner" | "minecraft:block/brown_concrete_powder" | "create:item/golden_sheet" | "ae2:block/quartz_growth_accelerator_side_on" | "minecraft:block/diamond_block" | "minecraft:block/brown_shulker_box" | "minecraft:item/white_dye" | "create:block/blaze_heater_brazier" | "ftblibrary:icons/check" | "minecraft:block/attached_pumpkin_stem" | "create:block/palettes/warped_window" | "create:item/furnace_minecart_contraption" | "minecraft:block/cobweb" | "ae2:block/cell_workbench" | "ftbquests:block/detector" | "ftblibrary:icons/up" | "create:block/flap_display_front" | "ae2:part/cable/dense_covered/black" | "ae2:block/drive/cells/64k_item_cell" | "minecraft:item/feather" | "botania:block/black_mystical_flower" | "ae2:block/chest/front_item" | "minecraft:block/quartz_pillar_top" | "minecraft:block/rail_corner" | "itemfilters:item/filter" | "create:block/cart_assembler_side" | "curios:item/empty_ring_slot" | "minecraft:block/purple_concrete_powder" | "botania:block/green_double_flower" | "botania:block/glimmering_dreamwood_log" | "botania:block/lavender_quartz_pillar_end" | "minecraft:block/obsidian" | "enderstorage:items/pouch/buttons/middle/yellow" | "ae2:part/terminal_dark" | "botania:block/metamorphic_forest_bricks" | "create:block/palettes/stone_types/layered/limestone_cut_layered" | "minecraft:block/birch_log_top" | "create:block/linear_chassis_end_sticky_connected" | "ae2:block/spatial_pylon/base" | "botania:block/forest_eye_top" | "botania:block/hopperhock_chibi" | "create:block/creative_casing_connected" | "minecraft:block/grass_block_snow" | "minecraft:block/raw_copper_block" | "botania:block/red_string_dispenser" | "ae2:item/certus_quartz_dust" | "minecraft:item/iron_sword" | "minecraft:block/cobbled_deepslate" | "botania:block/stripped_dreamwood_log_top" | "ae2:part/cable/core/glass/light_gray" | "ae2:part/cable/smart/blue" | "minecraft:block/enchanting_table_top" | "minecraft:block/bee_nest_front_honey" | "botania:block/forest_eye_south" | "ae2:item/basic_card" | "botania:block/apothecary_fungal_top" | "ae2:part/toggle_bus" | "create:block/rotation_speed_controller_bracket" | "minecraft:item/diamond_leggings" | "botania:block/red_double_flower_top" | "botania:block/marimorphosis" | "ae2:part/cable/core/covered/light_blue" | "create:block/diodes/pulse_extender/item" | "botania:item/cosmetic_alien_antenna" | "enderstorage:items/pouch/closed" | "create:block/glass_door_top" | "minecraft:item/iron_nugget" | "enderstorage:items/pouch/buttons/right/green" | "botania:item/cosmetic_cat_ears" | "ae2:block/crafting/accelerator" | "ae2:part/cable/core/glass/red" | "create:block/palettes/stone_types/brick/dripstone_cut_brick" | "minecraft:item/music_disc_mellohi" | "create:item/linked_controller" | "minecraft:block/lime_concrete" | "ae2:block/spatial_io_port_top_off" | "minecraft:block/quartz_block_side" | "minecraft:item/tropical_fish" | "ae2:block/molecular_assembler_lights" | "create:item/bar_of_chocolate" | "botania:block/dreamwood_log_1" | "botania:block/dreamwood_log_2" | "botania:block/dreamwood_log_3" | "ae2:part/cable/dense_covered/green" | "minecraft:block/cauldron_top" | "botania:block/dreamwood_log_4" | "botania:block/dreamwood_log_5" | "ae2:item/fluix_sword" | "botania:block/forest_eye_north" | "create:block/axis" | "create:block/controller_rail" | "minecraft:item/seagrass" | "minecraft:item/bucket" | "create:block/belt/green_scroll" | "botania:block/dreamwood_log" | "ae2:part/cable/dense_smart/orange" | "botania:block/mutated_grass_top" | "botania:block/gray_mushroom" | "create:block/zinc_ore" | "ae2:part/cable/covered/lime" | "botania:block/metamorphic_mesa_bricks" | "minecraft:block/sculk_sensor_tendril_active" | "ae2:item/fluid_cell_housing" | "botania:block/gray_double_flower_top" | "minecraft:block/dark_oak_planks" | "botania:item/spark_upgrade_dispersive" | "botania:block/mana_glass" | "create:block/train_trapdoor" | "botania:item/dodge_ring" | "minecraft:block/oak_leaves" | "minecraft:block/warped_roots_pot" | "create:block/valve_handle/valve_handle_brown" | "botania:block/drum_gathering" | "minecraft:block/redstone_dust_overlay" | "minecraft:block/potted_azalea_bush_side" | "minecraft:block/azalea_side" | "create:item/blaze_cake_base" | "ae2:part/monitor_colored" | "minecraft:item/crimson_door" | "botania:block/gaia_spreader_core" | "botania:item/mana_tablet_overlay" | "minecraft:block/purpur_pillar" | "minecraft:block/orange_stained_glass_pane_top" | "create:block/palettes/stone_types/pillar/andesite_cut_pillar" | "ae2:block/glass/quartz_glass_frame0010" | "botania:item/magnet_ring_active" | "ae2:block/glass/quartz_glass_frame0011" | "create:block/sail/canvas_pink" | "botania:block/dry_grass_side" | "create:block/signal_glow" | "minecraft:item/chain" | "botania:item/cosmetic_hyper_plus" | "create:item/incomplete_precision_mechanism" | "create:entity/coupling" | "botania:item/quartz_elven" | "minecraft:block/sculk_sensor_side" | "create:item/brass_hand" | "minecraft:block/stonecutter_saw" | "minecraft:block/shulker_box" | "botania:block/pink_mushroom" | "minecraft:block/blast_furnace_front" | "ae2:item/memory_card_gray" | "minecraft:item/firework_rocket" | "create:block/brass_casing" | "minecraft:block/grass_block_side_overlay" | "ae2:part/cable/covered/blue" | "minecraft:block/weathered_copper" | "minecraft:item/netherite_hoe" | "ftblibrary:icons/online" | "minecraft:block/mossy_cobblestone" | "botania:item/living_root" | "ae2:part/conversion_monitor_dark" | "create:block/palettes/stone_types/brick/calcite_cut_brick" | "minecraft:block/candle_lit" | "minecraft:block/lightning_rod_on" | "minecraft:item/diamond_shovel" | "ae2:block/spatial_anchor_bottom" | "botania:block/apothecary_mountain_bottom" | "minecraft:item/nether_star" | "botania:item/petal" | "ae2:item/spatial_storage_cell_16" | "botania:block/infused_grass_top" | "create:block/schematic_table_side" | "minecraft:item/acacia_sign" | "minecraft:block/cactus_bottom" | "ae2:item/fluix_shovel" | "ae2:block/glass/quartz_glass_frame0001" | "minecraft:block/light_gray_wool" | "create:item/diving_boots" | "create:block/andesite_casing_short" | "botania:block/animated_torch_glimmer" | "create:block/bogey/belt" | "minecraft:block/stripped_birch_log" | "minecraft:block/blue_concrete_powder" | "minecraft:block/bedrock" | "create:block/portal_track_mip" | "minecraft:block/smooth_stone_slab_side" | "minecraft:block/warped_roots" | "minecraft:block/calcite" | "create:block/seat/side_red" | "minecraft:block/dark_oak_sapling" | "botania:block/mana_water" | "botania:item/slingshot" | "botania:item/terrasteel_chestplate" | "minecraft:item/cookie" | "minecraft:block/piston_top_sticky" | "ftblibrary:icons/shield" | "botania:item/elementium_helmet" | "ae2:item/entropy_manipulator" | "minecraft:block/powered_rail" | "minecraft:block/small_amethyst_bud" | "minecraft:item/sweet_berries" | "botania:item/redstone_root" | "create:block/linear_chassis_side" | "create:block/brass_casing_connected" | "botania:item/incense_stick_overlay" | "botania:item/cosmetic_polka_dotted_bows" | "minecraft:block/crimson_nylium" | "create:block/hat_test" | "minecraft:block/scaffolding_bottom" | "enderstorage:items/pouch/buttons/middle/light_blue" | "minecraft:block/light_gray_stained_glass_pane_top" | "ae2:part/cable/core/glass/gray" | "create:entity/blueprint_large" | "botania:block/corporea_interceptor_end" | "minecraft:block/white_glazed_terracotta" | "create:block/fluid_valve" | "create:block/valve_handle/valve_handle_lime" | "botania:item/super_cloud_pendant" | "minecraft:item/crossbow_firework" | "ae2:item/card_void" | "minecraft:block/lectern_top" | "ae2:block/quantum_ring_light_corner" | "botania:item/spark_upgrade_recessive" | "botania:model/tiny_potato/trans" | "create:block/palettes/stone_types/slab/scorchia_cut_slab" | "minecraft:item/empty_armor_slot_shield" | "ae2:part/cable/glass/orange" | "minecraft:item/lime_candle" | "botania:item/cosmetic_thick_eyebrows" | "botania:item/manasteel_boots" | "create:block/palettes/stone_types/small_brick/tuff_cut_small_brick" | "minecraft:block/dirt_path_top" | "create:block/palettes/stone_types/small_brick/scoria_cut_small_brick" | "botania:block/apothecary_forest_bottom" | "minecraft:item/leather" | "itemfilters:item/xor" | "create:block/copper_underside" | "minecraft:block/dead_horn_coral" | "botania:block/spectranthemum" | "create:block/belt/brown_diagonal_scroll" | "ae2:item/creative_item_cell" | "create:block/palettes/stone_types/pillar/granite_cut_pillar_connected" | "botania:item/mana_blaster_color" | "ae2:item/cell_component_64k" | "minecraft:block/azalea_top" | "create:item/extendo_grip" | "minecraft:block/composter_compost" | "minecraft:item/heart_of_the_sea" | "create:block/andesite_tunnel" | "ftblibrary:icons/blue_button" | "ae2:part/cable/dense_smart/red" | "minecraft:block/red_candle_lit" | "minecraft:block/quartz_block_bottom" | "botania:block/framed_dreamwood" | "create:block/observer_box_powered" | "create:block/palettes/stone_types/polished/crimsite_cut_polished" | "ae2:item/certus_quartz_cutting_knife" | "minecraft:block/weeping_vines" | "create:block/andesite_funnel_slope" | "botania:item/rune_pride" | "enderstorage:items/pouch/buttons/right/light_gray" | "ae2:item/memory_card_purple" | "minecraft:block/purple_shulker_box" | "minecraft:block/red_concrete_powder" | "ae2:item/spatial_storage_cell_2" | "create:block/brass_encased_cogwheel_side" | "create:block/fluid_tank_window_single" | "botania:model/tiny_potato/pride" | "create:block/andesite_tunnel_top" | "minecraft:item/lead" | "create:block/palettes/stone_types/brick/limestone_cut_brick" | "minecraft:item/pink_dye" | "minecraft:block/dead_fire_coral_fan" | "create:block/palettes/ornate_iron_window" | "ftblibrary:icons/settings" | "minecraft:block/hay_block_top" | "botania:item/smelt_rod" | "botania:item/odin_ring" | "minecraft:item/netherite_shovel" | "create:block/belt/light_blue_scroll" | "botania:block/red_quartz_pillar_side" | "create:block/valve_handle/valve_handle_blue" | "create:block/spout" | "create:block/copper/copper_tiles" | "botania:block/redstone_spreader_core" | "botania:block/apothecary_mesa_bottom" | "ae2:block/crafting/64k_storage" | "minecraft:block/warped_trapdoor" | "botania:item/lexicon" | "enderstorage:items/pouch/buttons/right/white" | "create:block/palettes/dark_oak_window_connected" | "botania:block/blaze_quartz_pillar_side" | "minecraft:block/dead_bubble_coral" | "botania:item/desu_gun_overlay" | "create:block/sail/canvas_magenta" | "create:block/vault_front_large_connected" | "enderstorage:items/pouch/buttons/right/cyan" | "minecraft:block/comparator" | "botania:block/metamorphic_mesa_cobblestone" | "minecraft:item/saddle" | "minecraft:block/black_candle" | "create:block/palettes/spruce_window_connected" | "botania:item/tiara_wing_9" | "botania:item/tiara_wing_8" | "create:block/palettes/stone_types/brick/diorite_cut_brick" | "botania:item/tiara_wing_5" | "botania:item/tiara_wing_4" | "botania:item/tiara_wing_7" | "botania:item/tiara_wing_6" | "botania:item/tiara_wing_1" | "botania:item/tiara_wing_3" | "botania:item/tiara_wing_2" | "minecraft:block/sandstone_bottom" | "minecraft:block/end_portal_frame_eye" | "create:block/fluid_pipe" | "ae2:item/wireless_crafting_terminal" | "create:block/brass_funnel_slope" | "minecraft:item/wheat_seeds" | "botania:block/light_launcher_side" | "botania:block/fallen_kanade" | "botania:item/spark" | "botania:block/elf_quartz_bottom" | "minecraft:block/sculk_sensor_top" | "ae2:part/cable/dense_smart/purple" | "ftblibrary:icons/left" | "minecraft:block/black_concrete_powder" | "create:block/track_signal_indicator" | "minecraft:block/jungle_door_top" | "botania:block/mana_fluxfield" | "create:block/andesite_funnel" | "botania:block/piston_relay" | "create:block/crafter_thingies" | "minecraft:block/dark_oak_leaves" | "minecraft:block/small_dripleaf_side" | "botania:block/island_top" | "create:block/train_door_bottom" | "minecraft:block/sunflower_back" | "create:entity/train_hat" | "minecraft:block/bubble_coral_fan" | "ae2:item/certus_quartz_shovel" | "minecraft:item/music_disc_strad" | "botania:block/blaze_quartz_top" | "minecraft:block/blue_concrete" | "minecraft:block/spore_blossom" | "botania:item/dice" | "create:block/windmill_bearing_side" | "minecraft:block/potted_azalea_bush_plant" | "create:block/palettes/stone_types/polished/andesite_cut_polished" | "ae2:part/cable/core/covered/purple" | "create:block/seat/top_cyan" | "minecraft:block/light_blue_candle" | "lootr:shulker" | "botania:block/metamorphic_swamp_cobblestone_1" | "minecraft:item/blue_candle" | "ae2:block/controller_inside_a_powered" | "create:item/polished_rose_quartz" | "botania:block/marimorphosis_chibi" | "ae2:block/debug/energy_gen" | "ae2:part/identity_annihilation_plane_on" | "create:block/palettes/stone_types/small_brick/crimsite_cut_small_brick" | "minecraft:item/iron_hoe" | "curios:item/empty_back_slot" | "minecraft:block/budding_amethyst" | "ae2:part/terminal_bright" | "create:item/whisk" | "ae2:block/cell_workbench_side" | "create:block/palettes/ornate_iron_window_connected" | "create:block/schematicannon" | "create:block/belt/red_scroll" | "ae2:part/formation_plane" | "create:block/palettes/stone_types/slab/veridium_cut_slab" | "create:block/palettes/stone_types/cap/dripstone_cut_cap_connected" | "ae2:block/drive/cells/1k_item_cell" | "create:block/palettes/stone_types/pillar/dripstone_cut_pillar" | "minecraft:block/beehive_end" | "minecraft:block/bubble_coral_block" | "enderstorage:items/pouch/buttons/left/cyan" | "botania:block/metamorphic_swamp_cobblestone" | "ae2:part/cable/core/covered/red" | "minecraft:block/stripped_crimson_stem_top" | "minecraft:item/wooden_sword" | "minecraft:block/snow" | "create:fluid/honey_flow" | "minecraft:block/cartography_table_top" | "minecraft:block/purple_terracotta" | "create:block/palettes/stone_types/brick/granite_cut_brick" | "minecraft:missingno" | "create:block/palettes/framed_glass_connected" | "ae2:block/glass/quartz_glass_d" | "minecraft:item/bread" | "ae2:item/color_applicator_tip_dark" | "ae2:block/glass/quartz_glass_a" | "minecraft:block/gray_concrete_powder" | "ae2:part/cable/glass/yellow" | "ae2:block/glass/quartz_glass_c" | "ae2:block/glass/quartz_glass_b" | "create:block/brass_funnel_push" | "create:block/cam_linkage" | "minecraft:item/painting" | "create:block/palettes/stone_types/brick/andesite_cut_brick" | "minecraft:block/structure_block_data" | "create:block/andesite_casing_belt" | "botania:block/enchanter_overlay" | "minecraft:item/filled_map_markings" | "botania:block/conjuration_catalyst" | "minecraft:block/lime_stained_glass_pane_top" | "ftblibrary:icons/add_gray" | "create:block/brass_casing_belt" | "minecraft:block/cut_red_sandstone" | "botania:item/blood_pendant_chain" | "ae2:part/cable/covered/cyan" | "minecraft:block/redstone_dust_line1" | "create:block/weighted_ejector_top" | "botania:block/corporea_crystal_cube_cloth" | "minecraft:block/redstone_dust_line0" | "create:block/bogey/particle" | "create:block/brass_funnel_pull" | "botania:block/chiseled_metamorphic_taiga_bricks" | "botania:item/rune_summer" | "minecraft:block/blue_stained_glass_pane_top" | "botania:item/water_ring" | "minecraft:block/bricks" | "botania:block/mana_bomb" | "minecraft:block/stonecutter_side" | "minecraft:block/jungle_door_bottom" | "minecraft:block/dark_oak_log_top" | "create:fluid/potion_still" | "create:block/sticker_side" | "botania:block/gray_double_flower" | "botania:item/gate_weapon_11" | "minecraft:item/diamond_chestplate" | "botania:item/gate_weapon_10" | "botania:block/clayconia_chibi" | "create:item/diving_helmet" | "create:block/copper/copper_shingles" | "botania:block/starfield_side" | "minecraft:block/sweet_berry_bush_stage3" | "minecraft:block/sweet_berry_bush_stage2" | "botania:block/apothecary_swamp_side" | "minecraft:block/lime_wool" | "minecraft:block/sweet_berry_bush_stage1" | "minecraft:block/sweet_berry_bush_stage0" | "botania:block/lime_mushroom" | "create:block/brass_funnel_powered" | "minecraft:item/acacia_boat" | "botania:item/cosmetic_puffy_scarf" | "ae2:item/network_tool" | "ae2:part/cable/dense_smart/black" | "botania:item/pixie_dust" | "minecraft:block/sugar_cane" | "botania:item/cosmetic_pink_flower_bud" | "create:block/crafter_side" | "create:block/palettes/stone_types/cap/ochrum_cut_cap_connected" | "botania:block/cyan_mushroom" | "create:block/gantry_shaft_powered_flipped" | "ae2:block/crafting/monitor_light_dark" | "minecraft:block/farmland_moist" | "create:block/redstone_antenna_powered" | "enderstorage:items/pouch/buttons/left/light_blue" | "create:block/belt" | "ae2:part/cable/dense_smart/gray" | "enderstorage:items/pouch/buttons/right/brown" | "minecraft:block/crimson_trapdoor" | "botania:block/orange_mystical_flower" | "minecraft:block/pink_stained_glass" | "create:block/palettes/stone_types/cap/granite_cut_cap" | "ae2:block/wireless_access_point_on" | "botania:item/gaia_ingot" | "create:block/bell" | "minecraft:item/diamond" | "create:block/gauge" | "curios:item/empty_necklace_slot" | "minecraft:block/dead_brain_coral_fan" | "minecraft:item/leather_helmet_overlay" | "ae2:item/engineering_processor_press" | "botania:block/daffomill" | "minecraft:block/dark_oak_door_top" | "minecraft:block/tall_grass_bottom" | "enderstorage:items/pouch/buttons/right/light_blue" | "minecraft:block/lime_shulker_box" | "botania:block/glimmering_stripped_livingwood_log" | "minecraft:block/daylight_detector_top" | "botania:item/ice_pendant_gem" | "minecraft:block/white_shulker_box" | "botania:block/metamorphic_taiga_stone_1" | "minecraft:block/rose_bush_top" | "minecraft:block/prismarine_bricks" | "botania:block/sunny_quartz_bottom" | "minecraft:block/magenta_stained_glass" | "create:block/palettes/stone_types/cut/asurine_cut" | "minecraft:block/bee_nest_front" | "minecraft:block/smoker_bottom" | "botania:block/bifrost" | "minecraft:block/grass_block_side" | "minecraft:block/gilded_blackstone" | "minecraft:item/ghast_tear" | "create:block/cogwheel_axis" | "create:block/track_signal_dual_indicator" | "botania:block/bifrost_pane" | "ae2:part/p2p_tunnel_front" | "ae2:part/monitor_sides_status_on" | "botania:block/stripped_dreamwood_log" | "botania:item/spark_upgrade_rune_isolated" | "botania:item/elementium_shovel" | "ae2:part/pattern_access_terminal_dark" | "minecraft:block/brown_mushroom_block" | "minecraft:block/stripped_oak_log" | "create:block/brass_funnel_tall_powered" | "minecraft:block/end_rod" | "create:item/builders_tea" | "create:entity/blueprint_medium" | "minecraft:item/carrot_on_a_stick" | "minecraft:item/netherite_pickaxe" | "botania:item/infinite_fruit" | "botania:block/white_shiny_flower" | "minecraft:block/dragon_egg" | "minecraft:block/gold_block" | "enderstorage:items/pouch/buttons/middle/green" | "ae2:part/storage_bus_sides" | "minecraft:block/medium_amethyst_bud" | "minecraft:item/netherite_boots" | "ae2:part/terminal_medium" | "botania:block/cacophonium_block_top" | "ftblibrary:icons/settings_red" | "minecraft:block/glow_lichen" | "minecraft:block/allium" | "ae2:block/energy_cell_4" | "minecraft:block/potatoes_stage0" | "ae2:block/energy_cell_2" | "minecraft:block/potatoes_stage2" | "ae2:block/energy_cell_3" | "minecraft:block/potatoes_stage1" | "ae2:block/energy_cell_0" | "ae2:block/energy_cell_1" | "create:block/palettes/stone_types/cap/diorite_cut_cap" | "botania:item/flare_chakram" | "botania:block/mossy_livingrock_bricks" | "minecraft:block/chain_command_block_side" | "minecraft:block/magma" | "minecraft:block/spruce_trapdoor" | "create:block/belt/purple_diagonal_scroll" | "minecraft:item/end_crystal" | "create:block/seat/top_white" | "create:block/toolbox/pink" | "botania:block/cyan_shiny_flower" | "minecraft:block/potatoes_stage3" | "botania:block/ender_eye_block_powered" | "create:block/andesite_funnel_tall_powered" | "botania:block/terrasteel_block" | "ae2:block/drive/cells/16k_item_cell" | "minecraft:item/scute" | "botania:block/apothecary_swamp_top" | "botania:item/lens_speed" | "create:item/shadow_steel" | "minecraft:block/seagrass" | "lootr:block/barrel_side" | "ae2:block/controller_powered" | "minecraft:item/cooked_chicken" | "minecraft:item/charcoal" | "botania:block/metamorphic_swamp_bricks_top_1" | "create:item/crushed_silver_ore" | "minecraft:item/pufferfish" | "create:block/gantry_shaft" | "create:block/palettes/framed_glass" | "ae2:block/chest/front" | "botania:block/cocoon_east" | "create:block/bracket_plate_wooden" | "botania:item/rune_greed" | "create:block/brass_encased_cogwheel_side_connected" | "ae2:item/nether_quartz_hoe" | "minecraft:item/pufferfish_bucket" | "minecraft:item/potion_overlay" | "botania:model/tiny_potato/tomato" | "minecraft:item/firework_star_overlay" | "minecraft:item/stone_axe" | "create:item/crushed_gold_ore" | "create:block/fan_side" | "minecraft:block/deepslate" | "ae2:part/cable/dense_covered/gray" | "botania:block/green_mushroom" | "minecraft:block/lapis_block" | "ae2:part/cable_anchor" | "create:block/blaze_super" | "create:block/belt/yellow_scroll" | "botania:item/spark_upgrade_rune_recessive" | "ae2:item/certus_quartz_sword" | "minecraft:item/splash_potion" | "minecraft:item/prismarine_shard" | "ae2:part/cable/covered/white" | "minecraft:block/brown_candle" | "ae2:item/card_fuzzy" | "minecraft:item/lime_dye" | "botania:item/cosmetic_red_glasses" | "ae2:block/crafting/256k_storage_light" | "minecraft:block/red_wool" | "ae2:item/fluid_storage_cell_16k" | "minecraft:block/farmland" | "botania:block/metamorphic_mountain_bricks_4" | "botania:block/metamorphic_mountain_bricks_3" | "botania:block/metamorphic_mountain_bricks_5" | "botania:block/elven_spreader_scaffolding_side" | "minecraft:item/emerald" | "minecraft:block/warped_stem_top" | "botania:item/exchange_rod" | "create:block/palettes/stone_types/layered/ochrum_cut_layered_connected" | "create:block/sequenced_gearshift_1" | "create:block/sequenced_gearshift_2" | "create:block/sequenced_gearshift_3" | "botania:block/metamorphic_mountain_bricks_2" | "create:block/sequenced_gearshift_4" | "create:block/sticker_side_powered" | "botania:block/metamorphic_mountain_bricks_1" | "create:block/sequenced_gearshift_5" | "botania:block/open_crate_bottom" | "botania:block/runic_altar_side" | "ae2:part/cable/core/dense_smart/light_gray" | "minecraft:block/dispenser_front_vertical" | "minecraft:item/campfire" | "botania:block/turntable_bottom" | "itemfilters:item/not" | "minecraft:block/pointed_dripstone_up_frustum" | "create:block/depot_top" | "minecraft:item/carrot" | "minecraft:block/gray_candle_lit" | "minecraft:block/redstone_lamp_on" | "create:block/saw_reversed" | "minecraft:block/iron_door_top" | "minecraft:block/ancient_debris_top" | "minecraft:item/dried_kelp" | "create:block/andesite_tunnel_top_window" | "botania:block/hyacidus" | "create:block/placard" | "create:block/belt/purple_scroll" | "create:block/belt/orange_scroll" | "enderstorage:items/pouch/buttons/middle/cyan" | "create:block/chain_signal_box_top" | "create:block/palettes/crimson_window" | "ae2:block/quartz_fixture" | "create:block/controller_rail_powered" | "ae2:item/memory_card_lime" | "botania:block/dark_quartz_pillar_end" | "botania:item/lens_fire" | "ae2:part/cable/core/dense_smart/orange" | "create:item/crushed_aluminum_ore" | "botania:block/chiseled_lavender_quartz_side" | "minecraft:block/brain_coral_fan" | "create:block/palettes/stone_types/small_brick/dripstone_cut_small_brick" | "ae2:block/chest/lights_on_dark" | "botania:item/quartz_red" | "botania:item/terrasteel_ingot" | "ftblibrary:icons/feather" | "ae2:item/item_storage_cell_1k" | "ae2:part/cable/glass/cyan" | "ae2:item/crystal_seed_fluix" | "minecraft:block/twisting_vines" | "create:block/belt/red_diagonal_scroll" | "botania:item/holy_cloak" | "create:block/sail/canvas_light_gray" | "create:block/train_door_side" | "minecraft:block/structure_block_corner" | "minecraft:block/purple_candle" | "minecraft:item/warped_sign" | "create:block/belt/light_gray_scroll" | "ae2:block/vibration_chamber_front" | "ae2:item/item_storage_cell_4k" | "ae2:block/security_station_top" | "minecraft:item/flower_pot" | "minecraft:block/piston_top" | "create:block/content_observer_inner" | "create:block/seat/side_brown" | "botania:item/astrolabe" | "ae2:part/cable/covered/magenta" | "create:block/ladder_andesite" | "minecraft:block/fletching_table_side" | "create:block/palettes/stone_types/slab/deepslate_cut_slab" | "minecraft:block/red_candle" | "create:item/crushed_quicksilver_ore" | "create:block/seat/side_light_gray" | "minecraft:block/frosted_ice_3" | "minecraft:block/honeycomb_block" | "minecraft:block/frosted_ice_0" | "minecraft:block/frosted_ice_2" | "minecraft:block/frosted_ice_1" | "create:block/palettes/stone_types/layered/veridium_cut_layered_connected" | "ae2:block/drive/drive_bottom" | "minecraft:block/light_gray_terracotta" | "botania:block/mana_spreader_scaffolding_top" | "create:block/brass_tunnel_top" | "botania:item/ancient_will_guthan" | "minecraft:block/dead_bush" | "botania:block/green_double_flower_top" | "botania:item/blood_pendant_overlay" | "minecraft:block/grindstone_pivot" | "botania:item/phiflower" | "create:block/net" | "ftblibrary:icons/info_gray" | "ae2:item/color_applicator_tip_medium" | "minecraft:item/crossbow_pulling_0" | "botania:model/tiny_potato/halloween" | "minecraft:item/crossbow_pulling_1" | "minecraft:block/pumpkin_stem" | "minecraft:item/crossbow_pulling_2" | "botania:model/incenseplate" | "minecraft:item/light" | "botania:item/super_travel_belt" | "create:block/palettes/stone_types/polished/ochrum_cut_polished" | "create:block/raw_zinc_block" | "ae2:part/cable/glass/purple" | "botania:item/rune_spring" | "create:block/palettes/stone_types/polished/granite_cut_polished" | "minecraft:block/respawn_anchor_top" | "create:item/copper_sheet" | "minecraft:item/water_bucket" | "create:block/chain_signal_box" | "ae2:part/cable/core/covered/black" | "minecraft:block/kelp" | "enderstorage:items/pouch/buttons/middle/black" | "botania:block/cocoon_bottom" | "ae2:item/nether_quartz_shovel" | "create:block/bogey/frame" | "ae2:item/spatial_storage_cell_128" | "create:block/glass_fluid_pipe" | "minecraft:block/observer_top" | "create:block/palettes/stone_types/cut/crimsite_cut" | "ae2:part/cable/core/glass/light_blue" | "minecraft:block/black_concrete" | "botania:block/munchdew" | "botania:block/red_string_comparator" | "create:block/palettes/stone_types/layered/granite_cut_layered_connected" | "minecraft:block/soul_lantern" | "minecraft:item/jungle_boat" | "ftblibrary:icons/remove_gray" | "ae2:block/charger_side" | "minecraft:block/horn_coral_block" | "minecraft:item/chorus_fruit" | "minecraft:block/cyan_wool" | "create:block/palettes/stone_types/pillar/scoria_cut_pillar_connected" | "create:block/toolbox/black" | "botania:item/manaweave_cloth" | "ae2:item/certus_quartz_wrench" | "botania:block/brown_double_flower" | "botania:block/light_launcher_end" | "ae2:part/cable/dense_smart/magenta" | "create:block/clutch_on" | "minecraft:block/acacia_door_bottom" | "botania:block/crafty_crate_bottom" | "ae2:part/import_bus" | "minecraft:item/arrow" | "ae2:part/storage_monitor_medium" | "create:block/portal_track" | "minecraft:block/raw_gold_block" | "minecraft:item/turtle_helmet" | "minecraft:item/gray_dye" | "create:block/cart_assembler_top" | "botania:block/mana_spreader_side" | "create:item/electron_tube" | "ae2:item/card_redstone" | "minecraft:block/jigsaw_top" | "botania:item/lens_piston" | "minecraft:item/cooked_porkchop" | "botania:block/light_blue_mushroom" | "botania:item/super_lava_pendant_gem" | "minecraft:block/respawn_anchor_top_off" | "minecraft:block/warped_planks" | "botania:item/dragonstone" | "create:block/palettes/stone_types/cut/dripstone_cut" | "minecraft:block/mycelium_top" | "create:block/mechanical_arm" | "minecraft:block/jungle_leaves" | "minecraft:block/diamond_ore" | "minecraft:block/yellow_concrete_powder" | "botania:item/rune_gluttony" | "minecraft:block/hopper_outside" | "lootr:block/opened_barrel_side" | "botania:block/magenta_mystical_flower" | "minecraft:block/cracked_polished_blackstone_bricks" | "create:block/smooth_dark_log_top" | "minecraft:block/red_glazed_terracotta" | "minecraft:item/tropical_fish_bucket" | "botania:block/light_blue_mystical_flower" | "minecraft:block/pointed_dripstone_up_base" | "ftblibrary:icons/globe" | "minecraft:block/pink_terracotta" | "create:block/pipes" | "create:block/belt_scroll" | "minecraft:item/rabbit_hide" | "botania:item/dammitreddit" | "minecraft:block/cyan_stained_glass_pane_top" | "minecraft:block/bee_nest_bottom" | "create:block/sail/canvas_cyan" | "ae2:item/spatial_cell_component_2" | "create:item/chromatic_compound_2" | "create:item/chromatic_compound_1" | "ae2:part/cable/core/covered/green" | "create:item/chromatic_compound_0" | "minecraft:block/black_wool" | "ae2:part/level_emitter_off" | "ae2:block/paint1" | "create:item/crushed_zinc_ore" | "minecraft:item/nether_sprouts" | "botania:item/rainbow_rod" | "ae2:block/paint3" | "ae2:block/paint2" | "botania:block/cyan_mystical_flower" | "create:block/belt/blue_diagonal_scroll" | "minecraft:entity/enchanting_table_book" | "minecraft:block/lightning_rod" | "ae2:part/cable/covered/light_blue" | "ae2:item/memory_card_blue" | "minecraft:item/crimson_sign" | "minecraft:block/yellow_stained_glass_pane_top" | "botania:block/solegnolia" | "kubejs:item/copper_coin" | "botania:item/terra_sword" | "minecraft:item/lapis_lazuli" | "botania:model/tiny_potato/pan" | "ae2:block/chest/top_item" | "botania:block/elementium_block" | "create:block/blaze_inert" | "ae2:part/cable/covered/purple" | "ae2:part/cable/glass/light_blue" | "botania:block/metamorphic_taiga_cobblestone" | "botania:block/mana_quartz_side" | "minecraft:item/honey_bottle" | "botania:block/mutated_grass_side" | "ae2:part/cable/dense_covered/transparent" | "minecraft:item/white_candle" | "minecraft:block/oak_door_bottom" | "botania:block/root" | "ftbquests:item/book" | "minecraft:item/dragon_breath" | "create:block/blaze_active" | "minecraft:block/dirt" | "minecraft:block/nether_wart_block" | "minecraft:item/glowstone_dust" | "create:block/mechanical_bearing_side" | "create:block/palettes/crimson_window_connected" | "minecraft:block/deepslate_top" | "botania:block/red_shiny_flower" | "botania:block/metamorphic_mountain_bricks" | "ftblibrary:icons/marker" | "minecraft:block/stone_bricks" | "ftblibrary:icons/money_bag" | "ae2:item/memory_card_yellow" | "ae2:block/inscriber_inside" | "botania:model/tiny_potato/wire" | "minecraft:block/cauldron_bottom" | "botania:block/entropinnyum" | "create:block/palettes/stone_types/pillar/granite_cut_pillar" | "ae2:block/security_station_light_medium" | "botania:block/blue_shiny_flower" | "minecraft:block/bee_nest_side" | "create:block/palettes/stone_types/pillar/limestone_cut_pillar_connected" | "botania:block/fork_light_relay" | "botania:block/pink_double_flower" | "botania:item/cosmetic_thinking_hand" | "minecraft:block/beehive_front" | "create:block/pole_end" | "create:block/andesite_funnel_neutral" | "botania:block/gaia_spreader_scaffolding_bottom" | "create:block/palettes/vertical_framed_glass" | "ae2:item/engineering_processor" | "create:entity/super_glue/slime" | "create:block/andesite_funnel_plating" | "ae2:block/vibration_chamber_front_on" | "minecraft:item/oak_boat" | "botania:block/blaze_block" | "botania:block/elf_glass_pane" | "botania:block/heisei_dream" | "ae2:block/chest/side" | "minecraft:block/tinted_glass" | "botania:block/chiseled_metamorphic_mesa_bricks" | "minecraft:item/popped_chorus_fruit" | "create:block/belt/cyan_scroll" | "botania:item/third_eye_2" | "ae2:block/io_port_bottom" | "minecraft:block/rose_bush_bottom" | "minecraft:block/magenta_terracotta" | "botania:item/cosmetic_black_tie" | "botania:item/third_eye_1" | "botania:item/third_eye_0" | "botania:block/cocoon_west" | "ae2:part/cable/covered/black" | "botania:block/blaze_quartz_pillar_end" | "create:block/toolbox/green" | "minecraft:block/lectern_sides" | "minecraft:block/yellow_wool" | "minecraft:block/green_stained_glass_pane_top" | "ae2:part/cable/core/glass/green" | "create:item/linked_controller_powered" | "ftblibrary:icons/player_gray" | "ae2:block/crafting/1k_storage_light" | "botania:block/metamorphic_swamp_bricks_top" | "botania:block/white_mystical_flower" | "minecraft:block/blue_candle_lit" | "minecraft:block/dark_oak_door_bottom" | "minecraft:block/hopper_inside" | "minecraft:item/magma_cream" | "create:block/palettes/stone_types/layered/dripstone_cut_layered_connected" | "botania:model/tiny_potato/genderfluid" | "create:item/brass_sheet" | "botania:item/manasteel_helmet" | "minecraft:item/netherite_axe" | "ae2:item/fluix_pickaxe" | "minecraft:block/acacia_leaves" | "minecraft:block/light_blue_shulker_box" | "kubejs:item/gold_coin" | "botania:block/pollidisiac" | "minecraft:entity/conduit/wind" | "create:block/fluid_tank_inner" | "create:block/radial_chassis_end" | "botania:item/manaweave_boots_holiday" | "create:block/belt/magenta_scroll" | "ftblibrary:icons/compass" | "create:item/chocolate_bucket" | "minecraft:block/beacon" | "minecraft:block/target_top" | "minecraft:item/amethyst_shard" | "create:block/palettes/stone_types/cap/calcite_cut_cap" | "ae2:item/spatial_cell_component_128" | "botania:item/diva_charm" | "ae2:block/crafting/accelerator_light" | "botania:block/apothecary_mossy_side" | "create:block/refined_radiance_casing" | "minecraft:block/basalt_side" | "ftbquests:item/lootcrate/side_outline" | "minecraft:block/orange_wool" | "botania:block/cracked_livingrock_bricks" | "ae2:item/paint_ball_shimmer" | "botania:item/monocle" | "botania:block/cocoon_south" | "minecraft:item/warped_door" | "create:block/diodes/powered_latch/idle" | "botania:block/chiseled_sunny_quartz_end" | "ae2:part/cable/core/dense_smart/cyan" | "botania:block/dark_quartz_top" | "botania:item/cloud_pendant_gem" | "botania:item/ender_dagger" | "botania:item/fire_rod" | "create:block/belt/pink_diagonal_scroll" | "minecraft:block/horn_coral_fan" | "botania:item/mana_cookie" | "botania:block/terra_plate_overlay" | "ae2:part/cable/dense_smart/white" | "minecraft:item/experience_bottle" | "minecraft:item/dark_oak_door" | "minecraft:item/brown_candle" | "minecraft:item/netherite_scrap" | "botania:block/magenta_double_flower" | "minecraft:block/white_wool" | "curios:item/empty_cosmetic_slot" | "create:block/palettes/stone_types/layered/tuff_cut_layered_connected" | "minecraft:block/exposed_copper" | "ae2:item/certus_quartz_pickaxe" | "ae2:item/portable_fluid_cell_64k" | "create:block/vault_top_large_connected" | "ae2:item/cell_component_1k" | "ae2:part/conversion_monitor_medium" | "botania:item/black_lotus" | "minecraft:block/blackstone_top" | "itemfilters:item/or" | "create:block/filtered_detector_top" | "create:block/item_drain_side" | "minecraft:item/raw_gold" | "create:block/creative_fluid_tank_connected" | "minecraft:block/acacia_trapdoor" | "ftbquests:block/detector_on" | "create:block/basin" | "ae2:item/card_speed" | "botania:block/drum_canopy" | "ae2:part/cable/core/covered/yellow" | "create:block/palettes/stone_types/brick/ochrum_cut_brick" | "create:block/palettes/stone_types/polished/veridium_cut_polished" | "create:block/analog_lever" | "ae2:part/cable/dense_smart/lime" | "create:block/basin_canal" | "minecraft:block/end_stone" | "minecraft:block/oak_sapling" | "create:item/crushed_lead_ore" | "botania:block/chiseled_blaze_quartz_side" | "minecraft:block/polished_basalt_top" | "botania:block/apothecary_default_top" | "ae2:block/spatial_pylon/red" | "minecraft:block/furnace_front" | "minecraft:entity/shield_base_nopattern" | "minecraft:block/white_concrete" | "create:item/minecart_contraption" | "create:block/palettes/stone_types/cut/tuff_cut" | "enderstorage:items/pouch/buttons/middle/blue" | "ae2:item/memory_card_cyan" | "create:block/vault_top_connected" | "create:fluid/chocolate_flow" | "create:block/palettes/stone_types/layered/deepslate_cut_layered" | "minecraft:block/cave_vines_plant" | "minecraft:block/lectern_base" | "minecraft:block/redstone_ore" | "ae2:block/controller_column" | "minecraft:block/pink_wool" | "botania:block/metamorphic_desert_cobblestone" | "botania:block/vinculotus" | "botania:item/pattern_donut" | "botania:item/manasteel_leggings" | "create:block/palettes/horizontal_framed_glass_connected" | "botania:block/agricarnation" | "ae2:part/cable/core/covered/white" | "ae2:block/glass/quartz_glass_frame1101" | "botania:block/corporea_funnel_end" | "ae2:block/glass/quartz_glass_frame1100" | "create:block/fluid_tank_top" | "ae2:part/translucent_facade" | "botania:model/tiny_potato/bi" | "minecraft:item/salmon" | "enderstorage:items/pouch/buttons/right/purple" | "minecraft:item/tnt_minecart" | "botania:item/swap_ring" | "ae2:part/monitor_sides" | "minecraft:block/light_blue_glazed_terracotta" | "ftblibrary:icons/camera" | "minecraft:block/rail" | "minecraft:item/pointed_dripstone" | "botania:block/elven_spreader_core" | "ae2:block/glass/quartz_glass_frame1111" | "botania:item/will_flame" | "ae2:block/glass/quartz_glass_frame1110" | "botania:item/corporea_spark_master" | "minecraft:block/water_still" | "botania:block/island_side" | "ae2:block/drive/cells/16k_fluid_cell" | "minecraft:item/soul_lantern" | "create:block/palettes/stone_types/slab/granite_cut_slab" | "ae2:part/cable/smart/transparent" | "minecraft:block/blue_candle" | "create:block/girder" | "create:block/portable_fluid_interface" | "ae2:block/crafting/16k_storage_light" | "ftbquests:item/missing_item" | "minecraft:block/magenta_concrete_powder" | "minecraft:block/flowering_azalea_side" | "botania:item/mana_ring_greater" | "minecraft:block/anvil_top" | "itemfilters:item/mod" | "enderstorage:items/pouch/buttons/right/magenta" | "create:block/mechanical_press_top" | "botania:block/yellow_mystical_flower" | "enderstorage:items/pouch/buttons/right/orange" | "minecraft:block/lime_concrete_powder" | "create:block/refined_radiance_casing_connected" | "botania:block/corporea_retainer_side" | "ae2:part/cable/smart/yellow" | "enderstorage:items/pouch/buttons/left/brown" | "create:block/encased_chain_drive" | "ae2:block/drive/cells/creative_cell" | "create:item/brass_nugget" | "ae2:item/card_energy" | "create:block/palettes/stone_types/scorchia" | "create:block/track_assembly_overlay" | "ae2:part/cable/core/dense_smart/brown" | "ae2:part/cable/core/glass/black" | "create:block/toolbox/yellow" | "minecraft:block/cut_sandstone" | "minecraft:block/tube_coral_block" | "minecraft:item/hopper" | "botania:item/spark_upgrade_rune_dominant" | "botania:block/crafty_crate" | "ftblibrary:icons/color_hsb" | "botania:block/orechid_ignem" | "ae2:part/cable/core/covered/pink" | "minecraft:block/soul_soil" | "minecraft:block/grindstone_round" | "botania:block/chiseled_metamorphic_mountain_bricks" | "botania:item/elementium_sword" | "create:block/linear_chassis_end_connected" | "minecraft:block/respawn_anchor_side4" | "minecraft:block/respawn_anchor_side3" | "minecraft:block/respawn_anchor_side2" | "minecraft:block/respawn_anchor_side1" | "minecraft:block/respawn_anchor_side0" | "minecraft:item/iron_boots" | "minecraft:block/shroomlight" | "create:block/palettes/stone_types/cap/tuff_cut_cap" | "minecraft:entity/shield_base" | "botania:block/drum_top" | "create:block/contact_side" | "minecraft:block/gravel" | "botania:item/infused_seeds" | "create:block/clockwork_bearing_side" | "botania:block/azulejo_2" | "botania:block/azulejo_1" | "botania:block/azulejo_0" | "minecraft:item/chest_minecart" | "botania:block/dark_quartz_side" | "ae2:block/pattern_provider_alternate_arrow" | "minecraft:item/leather_leggings_overlay" | "create:block/palettes/stone_types/pillar/scorchia_cut_pillar_connected" | "create:block/copper/copper_roof_top" | "minecraft:block/spruce_sapling" | "ae2:block/crafting/1k_storage" | "create:block/belt/green_diagonal_scroll" | "botania:block/infrangible_platform" | "create:block/palettes/stone_types/layered/asurine_cut_layered_connected" | "create:block/palettes/stone_types/cap/ochrum_cut_cap" | "create:block/seat/top_gray" | "create:block/palettes/stone_types/slab/tuff_cut_slab" | "botania:block/gaia_spreader_back" | "ae2:part/monitor_sides_status" | "botania:item/lens_storm" | "botania:block/azulejo_12" | "botania:block/dreadthorn" | "botania:item/dreamwood_wand_top" | "botania:block/azulejo_13" | "botania:block/azulejo_14" | "ae2:block/glass/quartz_glass_frame1001" | "botania:block/azulejo_15" | "ae2:block/glass/quartz_glass_frame1000" | "botania:block/lime_mystical_flower" | "minecraft:block/red_sandstone_bottom" | "botania:item/elementium_ingot" | "botania:block/azulejo_10" | "minecraft:block/birch_log" | "botania:block/azulejo_11" | "botania:block/diluted_pool" | "minecraft:block/tube_coral" | "create:block/fluid_tank_connected" | "ae2:part/cable/core/dense_smart/magenta" | "botania:block/starfield_top" | "minecraft:block/blue_glazed_terracotta" | "minecraft:block/jigsaw_lock" | "ae2:item/item_storage_cell_64k" | "minecraft:item/paper" | "minecraft:item/raw_copper" | "ae2:item/nether_quartz_cutting_knife" | "ae2:block/glass/quartz_glass_frame1011" | "ae2:block/glass/quartz_glass_frame1010" | "botania:block/azulejo_6" | "minecraft:block/wither_rose" | "botania:block/azulejo_5" | "botania:block/azulejo_4" | "botania:block/azulejo_3" | "botania:block/azulejo_9" | "botania:block/azulejo_8" | "botania:block/chiseled_sunny_quartz_side" | "botania:block/azulejo_7" | "ae2:part/cable/core/dense_smart/purple" | "ftblibrary:icons/online_red" | "botania:item/slime_bottle" | "botania:block/orange_double_flower_top" | "create:block/pump" | "minecraft:block/pumpkin_top" | "botania:item/ancient_will_torag" | "create:block/girder_pole" | "botania:item/lens_warp" | "ae2:item/card_equal_distribution" | "minecraft:item/diamond_helmet" | "botania:block/turntable_top" | "ae2:item/fluix_axe" | "minecraft:block/end_stone_bricks" | "botania:item/rune_mana" | "minecraft:block/birch_trapdoor" | "ae2:item/certus_quartz_hoe" | "botania:item/gate_weapon_6" | "botania:item/gate_weapon_5" | "botania:item/gate_weapon_4" | "botania:item/mana_powder" | "botania:item/gate_weapon_3" | "botania:item/gate_weapon_2" | "botania:item/gate_weapon_1" | "minecraft:item/copper_ingot" | "botania:item/gate_weapon_0" | "create:item/sweet_roll" | "minecraft:item/cooked_cod" | "create:block/belt/black_scroll" | "botania:item/cosmetic_witch_pin" | "minecraft:item/cyan_candle" | "enderstorage:items/pouch/buttons/left/light_gray" | "botania:block/golden_grass_side" | "minecraft:block/piston_inner" | "create:block/linear_chassis_end_sticky" | "minecraft:block/dried_kelp_bottom" | "minecraft:item/yellow_candle" | "ae2:part/pattern_access_terminal_bright" | "create:block/mechanical_press_head" | "create:item/schematic" | "botania:item/mana_blaster_glass" | "create:block/girder_pole_side_connected" | "ae2:part/inverted_toggle_bus" | "create:block/palettes/stone_types/brick/asurine_cut_brick" | "botania:item/lens_time" | "create:block/pulley_magnet" | "minecraft:item/wooden_axe" | "minecraft:block/chorus_flower_dead" | "minecraft:item/compass_31" | "ae2:block/drive/cells/4k_item_cell" | "botania:item/cosmetic_ancient_mask" | "minecraft:item/compass_30" | "botania:item/twig_wand" | "minecraft:block/warped_wart_block" | "minecraft:block/cyan_shulker_box" | "create:block/weighted_ejector_casing" | "minecraft:block/deepslate_copper_ore" | "minecraft:item/pumpkin_seeds" | "minecraft:item/compass_28" | "minecraft:item/compass_29" | "create:item/crushed_tin_ore" | "ae2:part/cable/smart/gray" | "minecraft:item/compass_26" | "minecraft:item/netherite_chestplate" | "minecraft:item/compass_27" | "enderstorage:items/pouch/buttons/middle/lime" | "botania:item/magnet_ring_greater" | "ae2:part/cable/dense_smart/green" | "minecraft:block/white_concrete_powder" | "minecraft:block/pointed_dripstone_up_tip_merge" | "ae2:item/cell_component_4k" | "botania:block/gaia_spreader_outside" | "botania:item/placeholder" | "create:block/copper/oxidized_copper_tiles" | "minecraft:block/end_portal_frame_top" | "botania:item/crafting_halo" | "minecraft:item/compass_13" | "minecraft:item/compass_14" | "minecraft:item/compass_11" | "minecraft:item/compass_12" | "ae2:part/cable/covered/orange" | "minecraft:block/rooted_dirt" | "botania:block/rannuncarpus_chibi" | "minecraft:item/compass_10" | "ae2:block/vibration_chamber" | "minecraft:item/name_tag" | "minecraft:item/orange_candle" | "minecraft:item/compass_08" | "minecraft:item/compass_09" | "minecraft:item/compass_06" | "minecraft:item/compass_07" | "minecraft:item/compass_04" | "minecraft:item/compass_05" | "minecraft:item/compass_24" | "ftblibrary:icons/close" | "minecraft:item/compass_25" | "minecraft:item/compass_22" | "minecraft:item/compass_23" | "minecraft:block/soul_fire_0" | "minecraft:item/compass_20" | "minecraft:block/soul_fire_1" | "minecraft:item/compass_21" | "minecraft:item/music_disc_otherside" | "ae2:part/cable/core/glass/pink" | "create:block/valve_handle/valve_handle_purple" | "botania:block/lavender_quartz_bottom" | "botania:block/toggle_light_relay" | "botania:item/thorn_chakram" | "create:block/vault_bottom" | "ae2:block/crafting/monitor_light_medium" | "create:block/palettes/stone_types/crimsite" | "minecraft:block/stonecutter_top" | "botania:item/clip" | "botania:item/black_hole_talisman" | "minecraft:item/compass_19" | "minecraft:item/compass_17" | "minecraft:item/compass_18" | "minecraft:item/compass_15" | "minecraft:item/compass_16" | "minecraft:block/black_shulker_box" | "create:block/andesite_funnel_back" | "minecraft:item/gold_ingot" | "minecraft:block/daylight_detector_inverted_top" | "botania:block/hydroangeas" | "ae2:block/spatial_pylon/red_spanned" | "botania:item/pinkinator" | "minecraft:block/beehive_side" | "botania:item/unholy_cloak" | "botania:block/chiseled_elf_quartz_end" | "create:block/palettes/stone_types/polished/scorchia_cut_polished" | "minecraft:block/jungle_log_top" | "create:block/palettes/stone_types/small_brick/scorchia_cut_small_brick" | "ftblibrary:icons/rs_none" | "ae2:item/certus_quartz_crystal_charged" | "minecraft:item/compass_02" | "minecraft:item/spider_eye" | "minecraft:block/black_glazed_terracotta" | "minecraft:item/compass_03" | "minecraft:item/compass_00" | "minecraft:item/compass_01" | "ae2:part/cable/smart/brown" | "botania:item/gate_weapon_9" | "botania:item/gate_weapon_8" | "botania:item/gate_weapon_7" | "botania:block/mana_quartz_pillar_side" | "create:block/copper/exposed_copper_shingles" | "botania:block/mossy_livingwood_planks" | "minecraft:block/fletching_table_top" | "create:block/palettes/stone_types/cap/diorite_cut_cap_connected" | "enderstorage:items/pouch/buttons/left/orange" | "minecraft:item/candle" | "minecraft:block/water_overlay" | "ftblibrary:icons/refresh" | "ae2:item/formation_core" | "create:block/palettes/stone_types/polished/asurine_cut_polished" | "botania:block/chiseled_dark_quartz_end" | "minecraft:block/lime_candle" | "botania:item/skydirt_rod" | "minecraft:item/tipped_arrow_head" | "minecraft:block/dead_bubble_coral_fan" | "create:block/palettes/stone_types/cap/granite_cut_cap_connected" | "minecraft:block/brewing_stand_base" | "botania:block/runic_altar_top" | "minecraft:block/emerald_ore" | "ae2:block/chest/top" | "minecraft:block/lava_flow" | "minecraft:block/observer_back_on" | "ae2:part/cable/covered/green" | "botania:item/lens_gravity" | "minecraft:block/dead_brain_coral" | "create:block/diodes/powered_toggle_latch/idle" | "create:block/diodes/pulse_extender/powering" | "create:block/palettes/stone_types/cap/tuff_cut_cap_connected" | "minecraft:block/nether_gold_ore" | "botania:block/metamorphic_mesa_stone" | "minecraft:block/mushroom_stem" | "enderstorage:items/pouch/buttons/middle/white" | "botania:block/scorched_grass_side" | "minecraft:block/red_stained_glass_pane_top" | "minecraft:block/oak_trapdoor" | "create:block/sail/canvas_brown" | "create:item/super_glue" | "ae2:part/monitor_sides_status_has_channel" | "botania:block/forest_eye_bottom" | "minecraft:block/redstone_torch_off" | "botania:item/lens_firework" | "minecraft:block/amethyst_cluster" | "create:block/station" | "botania:item/ancient_will_dharok" | "botania:item/lens_weight" | "minecraft:block/cracked_deepslate_tiles" | "minecraft:block/black_terracotta" | "minecraft:block/crimson_door_bottom" | "minecraft:block/light_blue_terracotta" | "create:block/secondary_linear_chassis_side_connected" | "create:block/palettes/stone_types/cap/scoria_cut_cap" | "create:block/palettes/stone_types/cap/deepslate_cut_cap_connected" | "botania:block/red_string_sender" | "botania:block/shimmerwood_planks" | "itemfilters:item/weak_nbt" | "create:block/copper_casing" | "minecraft:item/writable_book" | "create:block/palettes/stone_types/cap/crimsite_cut_cap" | "minecraft:block/chiseled_sandstone" | "ae2:block/crafting/unit_base" | "create:block/palettes/rose_quartz_top" | "botania:item/terra_pick" | "minecraft:block/stripped_jungle_log" | "minecraft:block/jukebox_top" | "minecraft:entity/steve" | "create:block/radial_chassis_side_sticky" | "minecraft:block/redstone_torch" | "ae2:item/logic_processor" | "ae2:item/silicon_press" | "create:block/palettes/stone_types/brick/scoria_cut_brick" | "ftblibrary:icons/bell" | "ae2:block/drive/cells/1k_fluid_cell" | "create:block/palettes/stone_types/polished/tuff_cut_polished" | "minecraft:item/nether_wart" | "minecraft:item/wooden_hoe" | "ae2:item/quantum_entangled_singularity" | "botania:item/elementium_pickaxe" | "ae2:block/crafting/ring_side_hor" | "minecraft:block/large_amethyst_bud" | "ae2:block/chiseled_quartz_block_side" | "minecraft:block/repeating_command_block_side" | "botania:item/knockback_belt" | "botania:block/sunny_quartz_pillar_side" | "ae2:models/skyblockchest" | "minecraft:block/quartz_block_top" | "minecraft:block/hopper_top" | "create:block/palettes/stone_types/cap/dripstone_cut_cap" | "minecraft:item/furnace_minecart" | "minecraft:item/elytra" | "minecraft:block/small_dripleaf_top" | "botania:block/redstone_spreader_side" | "minecraft:block/peony_bottom" | "botania:block/chiseled_blaze_quartz_end" | "create:block/toolbox/red" | "botania:block/creative_pool" | "create:block/palettes/dark_oak_window" | "create:block/palettes/stone_types/slab/calcite_cut_slab" | "minecraft:block/cactus_side" | "minecraft:block/orange_shulker_box" | "minecraft:block/kelp_plant" | "minecraft:item/oak_sign" | "create:block/seat/side_light_blue" | "create:block/belt/light_blue_diagonal_scroll" | "botania:block/metamorphic_fungal_bricks" | "botania:item/mana_diamond" | "ae2:item/crystal_seed_certus2" | "ae2:item/crystal_seed_certus3" | "ae2:part/cable/core/glass/white" | "ae2:block/security_station_bottom" | "create:block/palettes/stone_types/layered/limestone_cut_layered_connected" | "ae2:item/wireless_receiver" | "minecraft:block/jigsaw_bottom" | "create:block/toolbox/light_gray" | "ftblibrary:icons/beacon" | "minecraft:block/iron_bars" | "botania:item/spark_upgrade_isolated" | "create:block/copper_redstone_plate" | "minecraft:block/pink_concrete" | "ae2:part/cable/core/covered/magenta" | "minecraft:item/golden_helmet" | "create:block/controller_rail_tint" | "minecraft:block/beetroots_stage3" | "minecraft:block/beetroots_stage1" | "botania:item/dry_seeds" | "minecraft:block/beetroots_stage2" | "minecraft:block/beetroots_stage0" | "create:block/diodes/pulse_repeater/powered" | "create:block/mechanical_press_pole" | "minecraft:block/brown_stained_glass" | "minecraft:block/dead_fire_coral_block" | "create:block/mechanical_saw_top" | "botania:block/light_gray_mushroom" | "minecraft:item/egg" | "minecraft:item/rabbit_stew" | "create:block/palettes/stone_types/cap/limestone_cut_cap_connected" | "minecraft:item/glass_bottle" | "ae2:block/energy_acceptor" | "botania:block/drum_wild" | "minecraft:block/furnace_top" | "create:block/whistle_particle" | "minecraft:block/chain_command_block_conditional" | "minecraft:block/coal_ore" | "create:block/belt_diagonal" | "ae2:item/matter_cannon" | "botania:block/metamorphic_swamp_bricks" | "ae2:item/card_capacity" | "botania:item/speed_up_belt" | "botania:block/elf_quartz_pillar_side" | "ae2:block/pattern_provider" | "minecraft:item/chainmail_leggings" | "create:block/observer_box" | "botania:block/tangleberrie" | "minecraft:item/barrier" | "botania:block/mana_detector_powered" | "minecraft:item/lava_bucket" | "ae2:part/crafting_terminal_dark" | "minecraft:block/sandstone_top" | "ae2:item/debug/eraser" | "minecraft:block/dead_tube_coral_fan" | "ftblibrary:icons/heart" | "create:block/palettes/stone_types/pillar/asurine_cut_pillar_connected" | "create:block/redstone_antenna" | "minecraft:block/cyan_terracotta" | "minecraft:item/filled_map" | "minecraft:block/bamboo_small_leaves" | "create:block/signal_box" | "ae2:part/quartz_fiber" | "minecraft:block/yellow_concrete" | "create:block/seat/top_pink" | "minecraft:item/coal" | "minecraft:block/brown_concrete" | "create:block/observer_indicator" | "minecraft:block/crimson_roots_pot" | "minecraft:block/lilac_bottom" | "create:block/shadow_steel_casing" | "minecraft:block/hanging_roots" | "create:block/piston_inner" | "create:block/palettes/oak_window" | "ae2:block/quartz_ore_3" | "ae2:block/quartz_ore_1" | "ae2:block/quartz_ore_2" | "ae2:block/quartz_ore_0" | "botania:block/gaia_spreader_inside" | "minecraft:block/structure_block_save" | "minecraft:block/loom_side" | "create:block/palettes/stone_types/pillar/diorite_cut_pillar" | "create:block/palettes/stone_types/small_brick/ochrum_cut_small_brick" | "create:block/wheel" | "minecraft:block/green_stained_glass" | "minecraft:item/dark_oak_sign" | "ae2:part/cable/core/covered/transparent" | "ftblibrary:icons/cancel" | "create:block/sail/frame" | "minecraft:item/sugar" | "create:block/belt/blue_scroll" | "minecraft:block/fern" | "botania:block/shimmerrock" | "create:block/palettes/stone_types/pillar/scoria_cut_pillar" | "ae2:item/fluid_storage_cell_256k" | "create:block/crushing_wheel" | "minecraft:item/bamboo" | "minecraft:item/empty_armor_slot_chestplate" | "minecraft:block/lantern" | "create:block/whistle" | "create:block/glass_door_bottom" | "botania:item/manasteel_nugget" | "minecraft:block/potted_azalea_bush_top" | "ae2:block/sky_stone_small_brick" | "botania:block/corporea_crystal_cube_glass" | "botania:item/brew_vial_1" | "botania:item/brew_vial_0" | "botania:item/brew_vial_3" | "minecraft:block/blackstone" | "botania:item/brew_vial_2" | "botania:item/cloud_pendant" | "ae2:part/storage_bus" | "botania:item/life_essence" | "minecraft:block/purple_stained_glass" | "minecraft:item/spawn_egg_overlay" | "minecraft:block/turtle_egg_slightly_cracked" | "itemfilters:item/block" | "ae2:block/spatial_anchor_side_off" | "create:block/encased_pipe" | "ae2:part/cable/core/glass/cyan" | "ae2:part/cable/glass/gray" | "botania:block/framed_livingwood" | "botania:item/terra_pick_tipped" | "minecraft:item/bone_meal" | "create:block/symmetry_mirror" | "create:block/andesite_casing_very_short" | "create:block/andesite_casing_connected" | "minecraft:block/flowering_azalea_leaves" | "enderstorage:items/pouch/buttons/left/pink" | "minecraft:block/blue_terracotta" | "botania:block/runic_altar_bottom" | "create:block/copper/exposed_copper_roof_top" | "ae2:part/monitor_bright" | "ae2:block/spatial_pylon/base_end" | "minecraft:block/coal_block" | "minecraft:block/attached_melon_stem" | "botania:item/virus_nullodermal" | "ae2:part/cable/covered/light_gray" | "ae2:item/matter_ball" | "minecraft:block/crimson_planks" | "minecraft:block/pink_candle" | "minecraft:item/glow_item_frame" | "ae2:part/cable/glass/light_gray" | "minecraft:block/redstone_dust_dot" | "ae2:block/spatial_anchor_top" | "minecraft:block/blast_furnace_front_on" | "minecraft:block/light_blue_wool" | "minecraft:item/music_disc_stal" | "minecraft:item/turtle_egg" | "create:item/crushed_platinum_ore" | "ae2:item/item_storage_cell_16k" | "minecraft:block/blue_wool" | "create:block/copper_gearbox" | "botania:item/elementium_shears" | "create:block/brass_funnel_back" | "create:block/palettes/stone_types/cut/scoria_cut" | "minecraft:block/orange_candle" | "minecraft:block/chain_command_block_back" | "create:block/palettes/acacia_window" | "create:block/palettes/stone_types/slab/dripstone_cut_slab" | "minecraft:item/beetroot_soup" | "minecraft:item/music_disc_cat" | "botania:block/chiseled_mana_quartz_end" | "create:block/palettes/stone_types/cap/scorchia_cut_cap" | "itemfilters:item/id_regex" | "create:block/content_observer" | "minecraft:block/yellow_candle_lit" | "create:block/standard_track_crossing" | "create:block/valve_handle/valve_handle_pink" | "ae2:block/sky_stone_block" | "create:block/indicator/0" | "create:block/railway_casing_side_connected" | "minecraft:block/gray_candle" | "create:block/indicator/1" | "create:block/indicator/2" | "ftbquests:block/barrier" | "botania:block/bellethorn_chibi" | "create:block/indicator/3" | "ae2:part/cable/core/dense_smart/white" | "create:block/indicator/4" | "create:block/indicator/5" | "minecraft:block/tall_seagrass_bottom" | "create:block/indicator/6" | "botania:block/solegnolia_chibi" | "ae2:part/cable/core/dense_smart/blue" | "ae2:item/certus_quartz_crystal" | "botania:block/light_blue_shiny_flower" | "botania:item/dreamwood_wand_bind" | "ae2:block/wireless_access_point_inside" | "minecraft:block/purpur_block" | "minecraft:item/cooked_beef" | "botania:block/purple_mystical_flower" | "minecraft:block/crafting_table_front" | "minecraft:block/green_glazed_terracotta" | "botania:block/glimmering_livingwood_log" | "ae2:item/creative_fluid_cell" | "botania:block/alfheim_portal_activated" | "ae2:item/calculation_processor_press" | "minecraft:item/flint" | "ftblibrary:icons/sort_az" | "minecraft:item/map" | "minecraft:item/glow_ink_sac" | "minecraft:item/piglin_banner_pattern" | "botania:item/crystal_bow" | "botania:item/rune_water" | "ae2:item/biometric_card" | "botania:block/yellow_shiny_flower" | "create:block/palettes/stone_types/layered/calcite_cut_layered_connected" | "botania:item/cosmetic_groucho_glasses" | "minecraft:block/green_candle_lit" | "create:block/creative_motor" | "minecraft:block/detector_rail_on" | "botania:item/lens_influence" | "minecraft:block/magenta_glazed_terracotta" | "minecraft:block/white_stained_glass_pane_top" | "minecraft:block/azalea_plant" | "create:block/copper/oxidized_copper_roof_top" | "botania:block/sunny_quartz_top" | "minecraft:block/light_blue_stained_glass" | "create:block/seat/side_magenta" | "minecraft:item/repeater" | "botania:block/elven_spreader_scaffolding_top" | "minecraft:block/chiseled_nether_bricks" | "minecraft:block/warped_stem" | "create:block/palettes/stone_types/cap/veridium_cut_cap_connected" | "ae2:item/nether_quartz_sword" | "minecraft:block/stripped_acacia_log_top" | "create:block/belt/light_gray_diagonal_scroll" | "minecraft:item/music_disc_chirp" | "create:block/linear_chassis_end" | "create:block/seat/top_black" | "ftblibrary:icons/time" | "minecraft:item/music_disc_mall" | "ae2:part/p2p_tunnel_frequency" | "minecraft:block/green_wool" | "enderstorage:items/pouch/buttons/left/black" | "minecraft:block/observer_back" | "botania:block/apothecary_taiga_bottom" | "ae2:block/controller_inside_a" | "ae2:block/controller_inside_b" | "minecraft:block/fletching_table_front" | "botania:item/elementium_leggings" | "create:block/seat/top_orange" | "botania:item/lens" | "curios:item/empty_charm_slot" | "ae2:item/name_press" | "botania:block/pink_shiny_flower" | "minecraft:block/copper_ore" | "minecraft:block/green_terracotta" | "minecraft:item/magenta_candle" | "ae2:part/p2p_tunnel_back2" | "curios:item/empty_body_slot" | "create:block/palettes/stone_types/slab/diorite_cut_slab" | "minecraft:block/azalea_leaves" | "ae2:part/pattern_access_terminal" | "minecraft:item/snowball" | "botania:item/virus_necrodermal" | "ae2:block/quartz_growth_accelerator" | "botania:block/gaia_spreader_scaffolding_top" | "minecraft:block/gray_concrete" | "minecraft:block/structure_block_load" | "minecraft:block/light_gray_glazed_terracotta" | "ae2:part/cable/core/glass/yellow" | "ae2:part/export_bus" | "create:block/palettes/acacia_window_connected" | "botania:block/lime_double_flower_top" | "minecraft:block/nether_quartz_ore" | "minecraft:block/campfire_log" | "create:block/gearbox_top" | "ae2:item/storage_cell_led" | "create:block/deepslate_zinc_ore" | "ae2:part/cable/dense_covered/pink" | "botania:block/daybloom" | "minecraft:block/exposed_cut_copper" | "minecraft:block/bubble_coral" | "minecraft:block/loom_bottom" | "minecraft:block/azure_bluet" | "botania:item/dirt_rod" | "minecraft:block/cyan_candle" | "minecraft:block/red_concrete" | "ae2:item/memory_card_green" | "minecraft:block/green_shulker_box" | "ae2:block/pattern_provider_alternate" | "kubejs:item/silver_coin" | "itemfilters:item/max_count" | "create:block/palettes/stone_types/cap/scoria_cut_cap_connected" | "botania:item/mana_bottle_1" | "botania:item/mana_bottle_2" | "botania:item/mana_bottle_3" | "botania:item/mana_bottle_4" | "botania:item/mana_bottle_5" | "create:item/goggles_model" | "minecraft:block/blast_furnace_top" | "botania:block/glimmering_stripped_dreamwood_log_3" | "botania:block/glimmering_stripped_dreamwood_log_2" | "botania:block/glimmering_stripped_dreamwood_log_5" | "botania:block/glimmering_stripped_dreamwood_log_4" | "botania:item/totalbiscuit" | "kubejs:block/livingrock_casing" | "botania:block/spectrolus" | "botania:block/light_gray_double_flower_top" | "minecraft:item/gray_candle" | "minecraft:block/barrel_side" | "ae2:item/memory_card_black" | "create:block/seat/top_green" | "create:block/seat/side_cyan" | "create:block/bearing_top_wooden" | "ae2:part/cable/core/dense_smart/red" | "create:block/vault_top" | "create:block/palettes/stone_types/limestone" | "minecraft:item/blaze_rod" | "enderstorage:items/pouch/buttons/left/green" | "create:block/palettes/stone_types/cap/calcite_cut_cap_connected" | "botania:block/crafty_crate_donut" | "ftblibrary:icons/jacket" | "minecraft:block/grass" | "botania:block/metamorphic_swamp_bricks_bottom" | "ftblibrary:icons/inv_none" | "botania:item/cosmetic_devil_horns" | "botania:item/star_sword" | "botania:block/orange_double_flower" | "ae2:block/spatial_pylon/red_end" | "botania:item/tornado_rod_active" | "minecraft:block/soul_torch" | "minecraft:block/honey_block_top" | "ae2:part/cable/core/covered/cyan" | "minecraft:block/target_side" | "create:block/crushing_wheel_body" | "ftblibrary:icons/security_team" | "botania:block/loonium" | "ae2:item/debug_card" | "botania:block/glimmering_stripped_dreamwood_log_1" | "botania:model/tiny_potato/agender" | "ae2:block/controller_column_conflict" | "minecraft:block/magenta_concrete" | "minecraft:block/light_gray_candle" | "botania:block/lavender_quartz_pillar_side" | "botania:block/apothecary_plains_top" | "ae2:item/quartz_glass" | "create:block/bell_frame" | "minecraft:item/golden_shovel" | "minecraft:item/golden_leggings" | "minecraft:block/lime_stained_glass" | "ae2:part/pattern_encoding_terminal_bright" | "create:item/rose_quartz" | "lootr:block/opened_barrel_bottom" | "botania:block/pattern_framed_livingwood" | "minecraft:block/acacia_sapling" | "create:block/diodes/powered_latch/powering" | "create:block/diodes/powered_toggle_latch/powered" | "ae2:part/cable/dense_smart/pink" | "botania:model/tiny_potato/ace" | "minecraft:block/sponge" | "ae2:part/cable/core/dense_smart/lime" | "botania:block/blue_pavement" | "ae2:block/sky_stone_tank" | "create:block/millstone" | "botania:block/mana_spreader_back" | "botania:item/lens_normal" | "botania:block/lavender_quartz_top" | "minecraft:block/pointed_dripstone_down_base" | "create:block/palettes/stone_types/layered/asurine_cut_layered" | "ae2:item/fluix_pearl" | "botania:block/apothecary_default_bottom" | "ae2:part/cable/dense_covered/brown" | "minecraft:item/magenta_dye" | "botania:block/light_gray_double_flower" | "minecraft:item/kelp" | "botania:block/blue_mushroom" | "create:block/flywheel" | "minecraft:block/red_sand" | "botania:block/dragonstone_block" | "create:block/palettes/stone_types/layered/calcite_cut_layered" | "minecraft:block/jukebox_side" | "botania:item/gravity_rod" | "minecraft:block/iron_ore" | "ae2:part/cable/core/dense_smart/green" | "minecraft:block/big_dripleaf_tip" | "botania:block/metamorphic_plains_bricks_top" | "enderstorage:items/pouch/buttons/left/magenta" | "botania:item/glass_pickaxe" | "enderstorage:items/pouch/buttons/left/purple" | "botania:block/rosa_arcana" | "botania:block/bergamute" | "minecraft:block/sandstone" | "ae2:part/cable/glass/brown" | "minecraft:block/small_dripleaf_stem_top" | "ae2:block/wireless_access_point" | "ftblibrary:icons/chat" | "minecraft:block/spruce_leaves" | "minecraft:block/white_candle_lit" | "botania:block/tangleberrie_chibi" | "ae2:part/cable/core/dense_smart/gray" | "create:item/brass_ingot" | "botania:block/fel_pumpkin" | "minecraft:block/destroy_stage_3" | "minecraft:block/oak_log" | "minecraft:block/destroy_stage_4" | "minecraft:block/destroy_stage_1" | "minecraft:item/empty_armor_slot_boots" | "ftblibrary:icons/toggle_rain" | "minecraft:block/destroy_stage_2" | "minecraft:block/destroy_stage_0" | "minecraft:item/leather_helmet" | "create:block/seat/side_blue" | "botania:block/elf_quartz_top" | "botania:block/red_string_relay" | "minecraft:block/destroy_stage_9" | "minecraft:block/destroy_stage_7" | "minecraft:block/destroy_stage_8" | "minecraft:block/destroy_stage_5" | "minecraft:block/destroy_stage_6" | "botania:item/terrasteel_helmet" | "create:block/palettes/stone_types/pillar/andesite_cut_pillar_connected" | "minecraft:block/smithing_table_top" | "minecraft:block/polished_andesite" | "ae2:part/cable/dense_smart/light_blue" | "minecraft:block/gray_stained_glass" | "create:block/copper_plating" | "botania:block/bubbell_chibi" | "ae2:item/item_cell_housing" | "minecraft:block/command_block_back" | "ae2:block/controller_column_powered" | "botania:block/bellethorn" | "create:block/sail/canvas_light_blue" | "minecraft:item/mutton" | "botania:item/lens_damage" | "enderstorage:items/pouch/buttons/middle/red" | "botania:item/cosmetic_four_leaf_clover" | "minecraft:block/dead_bubble_coral_block" | "botania:block/cocoon_north" | "minecraft:block/sea_lantern" | "minecraft:item/pumpkin_pie" | "botania:item/goldfish" | "botania:block/elf_glass" | "ae2:block/drive/cells/256k_item_cell" | "minecraft:block/big_dripleaf_top" | "create:block/blaze_super_active" | "botania:block/prism_side" | "botania:block/vivid_grass_top" | "minecraft:block/deepslate_bricks" | "botania:item/manaweave_chestplate" | "botania:block/pattern_framed_dreamwood" | "minecraft:item/cod_bucket" | "botania:item/corporea_spark_creative" | "botania:block/chiseled_dark_quartz_side" | "minecraft:item/light_05" | "create:block/palettes/stone_types/layered/scorchia_cut_layered" | "ae2:block/spatial_pylon/base_spanned" | "minecraft:item/light_04" | "minecraft:item/light_07" | "botania:item/manasteel_ingot" | "minecraft:item/light_06" | "ae2:part/storage_monitor_bright" | "minecraft:item/light_01" | "minecraft:item/light_00" | "minecraft:item/light_03" | "create:block/dark_metal_block" | "minecraft:item/light_02" | "create:block/diodes/pulse_repeater/powering" | "botania:block/blue_mystical_flower" | "minecraft:item/yellow_dye" | "botania:item/lens_efficiency" | "create:item/propeller" | "minecraft:block/composter_side" | "create:block/creative_casing" | "create:block/seat/side_lime" | "botania:model/tiny_potato/lesbian" | "minecraft:block/soul_campfire_fire" | "botania:block/apothecary_plains_side" | "minecraft:item/shulker_shell" | "ae2:item/cell_component_256k" | "botania:item/desu_gun_clip" | "create:block/copper_backtank" | "minecraft:item/golden_hoe" | "botania:item/dasboot" | "create:block/belt/white_scroll" | "minecraft:block/deepslate_emerald_ore" | "minecraft:item/structure_void" | "create:block/palettes/stone_types/veridium" | "minecraft:block/clay" | "botania:item/slime_bottle_active" | "ae2:part/cable/glass/magenta" | "create:block/blaze_burner_flame" | "create:item/crafting_blueprint" | "botania:block/cyan_double_flower_top" | "minecraft:item/ender_pearl" | "minecraft:block/dried_kelp_top" | "minecraft:block/stripped_acacia_log" | "create:item/crushed_osmium_ore" | "botania:block/conjuration_catalyst_overlay" | "botania:item/invisibility_cloak" | "create:block/fluid_tank" | "create:block/palettes/stone_types/pillar/ochrum_cut_pillar" | "minecraft:item/string" | "minecraft:block/hay_block_side" | "minecraft:item/light_15" | "botania:item/aura_ring" | "minecraft:item/light_12" | "minecraft:item/light_11" | "minecraft:item/light_14" | "ae2:item/portable_item_cell_1k" | "minecraft:item/light_13" | "ae2:block/io_port_top_off" | "botania:item/mana_mirror" | "minecraft:item/light_10" | "minecraft:item/mushroom_stew" | "minecraft:block/crimson_nylium_side" | "create:block/palettes/stone_types/layered/scorchia_cut_layered_connected" | "botania:item/lens_explosive" | "minecraft:block/pointed_dripstone_down_middle" | "minecraft:item/light_09" | "minecraft:item/light_08" | "create:item/incomplete_track" | "ae2:item/portable_item_cell_4k" | "create:block/palettes/stone_types/small_brick/diorite_cut_small_brick" | "create:block/train_door_top" | "botania:item/mana_pearl" | "minecraft:block/deepslate_gold_ore" | "botania:item/golden_seeds" | "create:block/bell_frame_side" | "minecraft:item/prismarine_crystals" | "ae2:part/monitor_light" | "lootr:block/barrel_top" | "minecraft:item/wooden_shovel" | "minecraft:block/spruce_log" | "minecraft:block/chiseled_polished_blackstone" | "ae2:part/storage_monitor" | "minecraft:entity/bell/bell_body" | "ae2:part/cable/glass/red" | "ae2:block/quartz_fixture_metal" | "minecraft:block/red_mushroom" | "botania:block/apothecary_fungal_side" | "botania:block/metamorphic_fungal_cobblestone" | "minecraft:block/white_terracotta" | "create:block/palettes/stone_types/layered/scoria_cut_layered" | "minecraft:block/warped_nylium_side" | "ae2:block/inscriber_inside_2" | "create:block/ladder_andesite_hoop" | "botania:item/quartz_lavender" | "minecraft:block/honey_block_bottom" | "ae2:part/crafting_terminal_medium" | "botania:block/red_mystical_flower" | "minecraft:block/chiseled_deepslate" | "minecraft:entity/conduit/cage" | "minecraft:block/white_stained_glass" | "create:block/railway_casing_side" | "lootr:chest" | "botania:block/prism_top_bottom" | "create:block/palettes/warped_window_connected" | "enderstorage:items/pouch/buttons/right/pink" | "create:block/palettes/birch_window_connected" | "minecraft:block/magenta_wool" | "botania:item/manaweave_chestplate_holiday" | "ae2:block/sky_stone_brick" | "create:block/palettes/stone_types/layered/diorite_cut_layered_connected" | "ftblibrary:icons/toggle_night" | "minecraft:block/pointed_dripstone_down_tip_merge" | "minecraft:item/golden_sword" | "enderstorage:items/pouch/buttons/middle/purple" | "create:item/cinder_flour" | "create:block/palettes/stone_types/polished/limestone_cut_polished" | "create:fluid/honey_still" | "minecraft:block/glass_pane_top" | "minecraft:block/soul_campfire_log_lit" | "minecraft:item/leather_chestplate" | "minecraft:item/stone_shovel" | "ae2:part/p2p_tunnel_fluid" | "botania:block/apothecary_desert_top" | "botania:item/goddess_charm" | "botania:model/tiny_potato/aro" | "minecraft:block/bone_block_top" | "create:item/raw_zinc" | "minecraft:block/green_concrete" | "enderstorage:items/pouch/buttons/left/white" | "create:block/palettes/stone_types/pillar/calcite_cut_pillar_connected" | "create:block/palettes/stone_types/layered/crimsite_cut_layered" | "minecraft:block/glass" | "botania:item/vial" | "minecraft:block/beehive_front_honey" | "ae2:item/item_storage_cell_256k" | "ae2:part/cable/core/covered/brown" | "create:block/palettes/stone_types/small_brick/granite_cut_small_brick" | "minecraft:block/lapis_ore" | "ftblibrary:icons/accept_gray" | "botania:block/black_pavement" | "minecraft:block/dead_fire_coral" | "ae2:item/printed_engineering_processor" | "botania:item/terra_axe" | "ae2:block/sky_compass" | "minecraft:item/birch_boat" | "botania:item/terra_pick_active" | "create:block/copper/weathered_copper_tiles" | "ae2:block/drive/drive_side" | "minecraft:item/skull_banner_pattern" | "botania:block/livingwood_log_top" | "minecraft:item/cooked_rabbit" | "minecraft:block/cyan_candle_lit" | "minecraft:block/lime_glazed_terracotta" | "botania:block/cyan_double_flower" | "create:block/ladder_brass_hoop" | "minecraft:item/iron_leggings" | "botania:block/alchemy_catalyst" | "minecraft:block/bone_block_side" | "minecraft:block/activator_rail" | "botania:block/chiseled_livingrock_bricks" | "ae2:item/calculation_processor" | "enderstorage:items/pouch/buttons/middle/orange" | "create:fluid/potion_flow" | "minecraft:item/netherite_leggings" | "minecraft:block/piston_side" | "create:block/palettes/stone_types/layered/scoria_cut_layered_connected" | "botania:block/elf_quartz_side" | "minecraft:block/oxeye_daisy" | "ae2:item/certus_quartz_axe" | "minecraft:item/leather_boots" | "create:block/andesite_bricks" | "botania:block/yellow_double_flower" | "create:block/creative_fluid_tank_window" | "curios:item/empty_head_slot" | "minecraft:item/wooden_pickaxe" | "enderstorage:items/pouch/owned_open" | "create:block/valve_handle/valve_handle_red" | "botania:item/vivid_seeds" | "minecraft:item/green_dye" | "create:block/gearshift_off" | "botania:block/red_string_container" | "minecraft:block/cave_vines" | "botania:block/glimmering_dreamwood_log_1" | "create:block/copper/exposed_copper_tiles" | "minecraft:block/jigsaw_side" | "create:block/cuckoo_clock" | "ae2:part/cable/dense_covered/yellow" | "minecraft:item/golden_carrot" | "botania:block/glimmering_dreamwood_log_5" | "botania:block/glimmering_dreamwood_log_4" | "botania:item/black_hole_talisman_active" | "minecraft:block/dirt_path_side" | "botania:block/glimmering_dreamwood_log_3" | "create:block/belt/brown_scroll" | "botania:block/glimmering_dreamwood_log_2" | "create:block/sail/canvas_lime" | "create:block/seat/top_purple" | "create:block/sail/canvas_yellow" | "create:block/palettes/stone_types/layered/veridium_cut_layered" | "minecraft:block/orange_concrete" | "botania:item/corporea_spark_star" | "ae2:item/crafting_pattern" | "minecraft:block/crimson_fungus" | "botania:block/gaia_spreader_side" | "botania:block/apothecary_mossy_top" | "minecraft:item/empty_armor_slot_helmet" | "botania:item/manasteel_shovel" | "ae2:part/interface" | "minecraft:item/jungle_sign" | "botania:block/kekimurus" | "botania:block/cocoon_top" | "ae2:block/chest/lights_on_bright" | "create:block/track_station_indicator" | "ae2:part/storage_monitor_dark_locked" | "ae2:block/quartz_block" | "minecraft:block/fire_coral" | "create:block/vault_bottom_connected" | "minecraft:item/red_dye" | "botania:block/apothecary_mesa_side" | "create:block/basin_side" | "ftbquests:block/barrier_open" | "create:block/toolbox/light_blue" | "minecraft:block/grass_block_top" | "minecraft:item/powder_snow_bucket" | "botania:block/chiseled_metamorphic_swamp_bricks_bottom" | "botania:block/gray_mystical_flower" | "botania:block/mana_distributor" | "minecraft:block/crimson_stem_top" | "create:block/belt/cyan_diagonal_scroll" | "minecraft:block/blue_orchid" | "minecraft:block/stripped_spruce_log" | "minecraft:item/tipped_arrow_base" | "create:block/palettes/stone_types/layered/ochrum_cut_layered" | "minecraft:block/structure_block" | "minecraft:block/orange_glazed_terracotta" | "minecraft:block/yellow_terracotta" | "minecraft:item/dark_oak_boat" | "minecraft:item/gunpowder" | "botania:item/quartz_dark" | "create:block/contact_back" | "botania:item/spawner_mover_full" | "botania:item/cosmetic_orange_shades" | "create:block/sail/canvas_blue" | "itemfilters:item/tag" | "create:block/palettes/stone_types/cap/asurine_cut_cap_connected" | "botania:block/infused_grass_side" | "create:block/palettes/stone_types/layered/andesite_cut_layered_connected" | "botania:item/bauble_box" | "create:block/belt/black_diagonal_scroll" | "botania:block/mana_void" | "minecraft:item/oak_door" | "minecraft:block/potted_flowering_azalea_bush_top" | "minecraft:item/flint_and_steel" | "minecraft:block/emerald_block" | "create:block/diodes/pulse_repeater/powered_powering" | "create:item/powdered_obsidian" | "create:block/fan_blades" | "ae2:block/crafting/monitor_base" | "botania:block/open_crate" | "minecraft:block/red_nether_bricks" | "botania:block/brown_mystical_flower" | "create:block/linear_chassis_side_connected" | "botania:block/purple_mushroom" | "minecraft:block/dispenser_front" | "create:block/pulley_rope" | "minecraft:block/sand" | "ae2:part/pattern_provider" | "create:block/vault_side_connected" | "ae2:part/cable/covered/pink" | "create:block/flap_display_inside" | "ae2:block/inscriber" | "botania:block/mossy_dreamwood_planks" | "minecraft:block/yellow_glazed_terracotta" | "minecraft:block/peony_top" | "botania:item/lens_redirect" | "minecraft:block/conduit" | "create:block/display_link" | "minecraft:item/firework_star" | "create:block/palettes/stone_types/brick/veridium_cut_brick" | "botania:item/cosmetic_googly_eyes" | "minecraft:block/mossy_stone_bricks" | "botania:block/pump_head_sheet" | "create:block/redstone_bridge" | "botania:item/terra_axe_active" | "create:block/palettes/stone_types/pillar/crimsite_cut_pillar" | "ae2:item/portable_item_cell_16k" | "create:block/vault_front_connected" | "minecraft:item/purple_candle" | "botania:item/cosmetic_devil_tail" | "create:block/brass_funnel" | "botania:item/elementium_axe" | "create:block/belt/lime_scroll" | "minecraft:item/beetroot" | "ae2:item/portable_item_cell_256k" | "create:block/palettes/stone_types/asurine" | "botania:item/rune_lust" | "botania:item/terraform_rod" | "minecraft:item/brick" | "create:item/wrench" | "minecraft:block/acacia_log" | "minecraft:block/pointed_dripstone_up_middle" | "botania:item/ender_hand" | "minecraft:item/sea_pickle" | "minecraft:item/lantern" | "create:block/palettes/stone_types/pillar/dripstone_cut_pillar_connected" | "minecraft:item/beetroot_seeds" | "create:block/palettes/stone_types/polished/calcite_cut_polished" | "ae2:part/cable/glass/blue" | "minecraft:block/yellow_shulker_box" | "ae2:item/fluix_hoe" | "ae2:part/cable/covered/red" | "ae2:block/spatial_pylon/dim_spanned" | "ae2:item/nether_quartz_axe" | "minecraft:item/spyglass" | "botania:item/magnet_ring" | "create:item/zinc_ingot" | "minecraft:item/light_blue_candle" | "botania:item/cosmetic_botanist_emblem" | "ae2:item/fluix_crystal" | "minecraft:item/shears" | "minecraft:block/warped_nylium" | "enderstorage:items/pouch/buttons/left/red" | "ae2:part/storage_bus_back" | "create:block/palettes/oak_window_connected" | "minecraft:block/command_block_conditional" | "create:item/refined_radiance" | "ae2:part/cable/dense_covered/white" | "ae2:part/cable/core/dense_smart/light_blue" | "create:block/rotation_speed_controller" | "forge:block/milk_still" | "ae2:block/crafting/64k_storage_light" | "botania:block/gray_shiny_flower" | "minecraft:block/warped_fungus" | "minecraft:item/glow_berries" | "create:block/content_observer_inner_powered" | "create:block/brass_tunnel" | "create:item/iron_sheet" | "botania:block/chiseled_metamorphic_swamp_bricks" | "ae2:part/cable/smart/pink" | "ftblibrary:icons/inv_out" | "botania:block/black_double_flower_top" | "minecraft:block/light_gray_candle_lit" | "ae2:item/card_crafting" | "minecraft:block/brown_mushroom" | "minecraft:block/polished_blackstone" | "patchouli:items/book_brown" | "create:item/wheat_flour" | "create:block/palettes/stone_types/small_brick/deepslate_cut_small_brick" | "ae2:part/cable/core/dense_smart/transparent" | "botania:item/manaweave_leggings" | "minecraft:block/acacia_log_top" | "minecraft:block/detector_rail" | "create:block/palettes/stone_types/cut/calcite_cut" | "create:item/sturdy_sheet" | "minecraft:block/basalt_top" | "create:block/crafter_top" | "ae2:part/cable/glass/lime" | "minecraft:item/pink_candle" | "botania:block/blue_double_flower_top" | "botania:block/light_blue_double_flower_top" | "minecraft:block/oak_door_top" | "minecraft:block/tnt_bottom" | "ae2:item/cell_component_16k" | "botania:item/fertilizer" | "create:item/crushed_uranium_ore" | "curios:item/empty_bracelet_slot" | "minecraft:block/melon_side" | "botania:item/grass_seeds" | "ae2:block/drive/cells/4k_fluid_cell" | "create:block/bell_anim" | "create:block/andesite_funnel_pull" | "botania:item/elementium_hoe" | "minecraft:block/nether_wart_stage2" | "minecraft:block/nether_wart_stage1" | "minecraft:block/nether_wart_stage0" | "ae2:block/spatial_anchor_top_off" | "ae2:item/singularity" | "botania:item/cosmetic_red_ribbons" | "create:block/bogey/top" | "botania:item/lens_mine" | "ae2:item/printed_logic_processor" | "minecraft:block/carved_pumpkin" | "minecraft:item/minecart" | "ae2:part/cable/dense_covered/light_blue" | "minecraft:block/jungle_planks" | "ae2:part/cable/core/dense_smart/yellow" | "ae2:block/crafting/light_base" | "botania:item/brew_flask_4" | "minecraft:item/apple" | "botania:item/brew_flask_3" | "botania:item/brew_flask_2" | "botania:item/brew_flask_1" | "botania:item/mana_ring" | "botania:item/brew_flask_5" | "minecraft:block/cactus_top" | "ae2:block/spatial_io_port_bottom" | "botania:block/vivid_grass_side" | "botania:item/brew_flask_0" | "ae2:block/controller_inside_b_powered" | "minecraft:block/lever" | "ae2:block/controller_lights" | "botania:item/divining_rod" | "minecraft:block/spruce_log_top" | "minecraft:item/spawn_egg" | "botania:block/golden_grass_top" | "create:block/smart_pipe_2" | "create:block/smart_pipe_1" | "minecraft:item/golden_horse_armor" | "minecraft:block/magenta_stained_glass_pane_top" | "botania:item/record_gaia_2" | "minecraft:block/cake_inner" | "botania:item/record_gaia_1" | "minecraft:block/jungle_trapdoor" | "minecraft:block/activator_rail_on" | "minecraft:block/light_blue_concrete" | "minecraft:item/bell" | "botania:item/thunder_sword" | "minecraft:block/light_gray_stained_glass" | "botania:item/manasteel_chestplate" | "ae2:item/fluid_storage_cell_1k" | "minecraft:item/light_gray_dye" | "create:block/palettes/stone_types/scoria" | "minecraft:block/smoker_front_on" | "minecraft:block/warped_door_top" | "minecraft:block/repeater" | "create:block/brass_funnel_neutral" | "ae2:part/annihilation_plane" | "ae2:item/fluid_storage_cell_4k" | "minecraft:block/chain_command_block_front" | "minecraft:block/fire_coral_fan" | "create:block/item_drain_top" | "minecraft:block/crying_obsidian" | "create:block/palettes/stone_types/polished/diorite_cut_polished" | "minecraft:block/stripped_dark_oak_log" | "botania:item/spark_upgrade_rune_dispersive" | "botania:block/chiseled_red_quartz_end" | "minecraft:block/polished_deepslate" | "minecraft:item/fermented_spider_eye" | "create:block/palettes/stone_types/pillar/asurine_cut_pillar" | "botania:block/red_double_flower" | "create:item/crushed_nickel_ore" | "minecraft:block/cave_vines_plant_lit" | "create:item/crushed_copper_ore" | "minecraft:block/pointed_dripstone_down_tip" | "ae2:block/drive/drive_front_flat" | "ftbquests:item/lootcrate/top_outline" | "botania:block/petal_block" | "create:block/seat/top_magenta" | "minecraft:block/loom_front" | "botania:block/livingrock_bricks" | "botania:item/vine_ball" | "create:block/palettes/stone_types/slab/asurine_cut_slab" | "minecraft:block/campfire_fire" | "create:block/copper/weathered_copper_shingles" | "botania:block/dark_quartz_pillar_side" | "create:block/funnel_closed" | "botania:block/forest_eye_west" | "create:block/valve_handle/valve_handle_gray" | "botania:block/mana_quartz_top" | "minecraft:block/orange_stained_glass" | "create:block/toolbox/blue" | "create:item/chest_minecart_contraption" | "curios:item/empty_hands_slot" | "itemfilters:item/and" | "ae2:part/cable/covered/yellow" | "botania:block/starfield_bottom" | "create:block/palettes/stone_types/pillar/tuff_cut_pillar_connected" | "botania:item/overgrowth_seed" | "minecraft:block/magenta_candle_lit" | "botania:block/blaze_quartz_bottom" | "create:block/seat/top_light_gray" | "botania:block/metamorphic_forest_stone" | "minecraft:item/netherite_helmet" | "minecraft:item/redstone" | "minecraft:block/light_blue_candle_lit" | "ae2:block/chiseled_quartz_block_top" | "create:block/diodes/brass_diode_base" | "minecraft:block/tall_grass_top" | "botania:block/chiseled_lavender_quartz_end" | "botania:item/elementium_chestplate" | "botania:item/elementium_boots" | "botania:item/manasteel_pick" | "create:block/palettes/stone_types/cap/crimsite_cut_cap_connected" | "create:block/andesite_casing" | "minecraft:block/oxidized_copper" | "ae2:part/cable/glass/transparent" | "botania:block/nightshade" | "create:block/palettes/stone_types/layered/dripstone_cut_layered" | "create:block/display_link_side" | "ae2:block/spatial_pylon/dim" | "ae2:item/color_applicator" | "minecraft:block/coarse_dirt" | "botania:block/black_mushroom" | "botania:item/cosmetic_blue_butterfly" | "minecraft:block/green_candle" | "botania:block/mana_diamond_block" | "botania:block/lime_shiny_flower" | "botania:block/cell_block" | "minecraft:block/chorus_flower" | "ae2:part/annihilation_plane_on" | "botania:block/exoflame" | "ae2:block/crafting/monitor" | "minecraft:item/diamond_axe" | "minecraft:block/tuff" | "botania:item/rune_winter" | "minecraft:block/dripstone_block" | "botania:block/light_gray_mystical_flower" | "botania:item/cosmetic_wicked_eyepatch" | "botania:item/nerfbat" | "create:block/controls_frame" | "create:block/palettes/stone_types/cut/ochrum_cut" | "minecraft:item/raw_iron" | "create:block/andesite_funnel_push" | "minecraft:item/warped_fungus_on_a_stick" | "create:block/brass_tunnel_top_connected" | "minecraft:block/smooth_basalt" | "botania:block/apothecary_forest_side" | "minecraft:item/spruce_door" | "curios:item/empty_curio_slot" | "ae2:block/crafting/ring_corner" | "minecraft:block/melon_top" | "botania:item/water_bowl" | "botania:block/metamorphic_plains_bricks" | "minecraft:block/jungle_log" | "minecraft:block/lodestone_top" | "minecraft:item/stone_pickaxe" | "botania:block/corporea_slab_side" | "create:block/palettes/stone_types/cap/asurine_cut_cap" | "botania:item/mana_blaster_clip" | "ae2:part/cable/glass/pink" | "botania:block/elf_glass_2" | "create:block/zinc_block" | "botania:block/elf_glass_1" | "create:block/palettes/stone_types/cut/deepslate_cut" | "ae2:block/quartz_growth_accelerator_side" | "botania:block/elf_glass_3" | "botania:block/white_mushroom" | "botania:item/mycelium_seeds" | "minecraft:block/cake_side" | "ae2:block/crafting/monitor_light_bright" | "create:block/blaze_burner_flame_scroll" | "botania:block/pure_daisy" | "create:block/brass_storage_block" | "minecraft:block/cocoa_stage0" | "enderstorage:items/pouch/buttons/right/black" | "minecraft:block/yellow_stained_glass" | "minecraft:block/cocoa_stage2" | "minecraft:block/cocoa_stage1" | "ftbquests:item/lootcrate/top" | "botania:item/rune_air" | "minecraft:block/black_stained_glass_pane_top" | "botania:block/redstone_spreader_back" | "botania:block/black_double_flower" | "minecraft:item/golden_chestplate" | "botania:item/phantom_ink" | "ftblibrary:icons/rs_high" | "create:block/palettes/stone_types/cap/scorchia_cut_cap_connected" | "botania:block/apothecary_plains_bottom" | "botania:model/tiny_potato/bosnia" | "create:block/display_link_side_powered" | "create:block/seat/bottom" | "minecraft:item/globe_banner_pattern" | "botania:block/rannuncarpus" | "ae2:item/memory_card_light_blue" | "botania:block/metamorphic_mountain_stone_1" | "create:block/signal_glow_2" | "botania:block/elf_glass_0" | "ftbquests:item/lootcrate/front_outline" | "botania:item/loki_ring" | "minecraft:block/glow_item_frame" | "create:block/palettes/stone_types/cut/limestone_cut" | "botania:block/metamorphic_plains_stone" | "ae2:part/cable/glass/green" | "botania:block/glimmering_stripped_dreamwood_log" | "minecraft:block/quartz_pillar" | "botania:item/pixie_ring" | "create:block/belt/gray_diagonal_scroll" | "create:block/belt/white_diagonal_scroll" | "minecraft:item/iron_shovel" | "minecraft:block/magenta_candle" | "minecraft:item/broken_elytra" | "ae2:block/fluix_block" | "botania:block/mana_spreader_scaffolding_bottom" | "create:block/palettes/stone_types/cut/scorchia_cut" | "ae2:part/cable/smart/magenta" | "minecraft:block/cornflower" | "botania:block/stripped_dreamwood_log_4" | "minecraft:item/golden_pickaxe" | "botania:item/pattern_3_2" | "create:block/palettes/stone_types/polished/dripstone_cut_polished" | "botania:block/stripped_dreamwood_log_5" | "botania:item/pattern_3_1" | "create:item/dough" | "botania:block/stripped_dreamwood_log_1" | "minecraft:block/cobblestone" | "botania:block/stripped_dreamwood_log_2" | "botania:block/manasteel_block" | "botania:block/stripped_dreamwood_log_3" | "ae2:part/cable/dense_smart/light_gray" | "minecraft:item/chicken" | "create:block/piston_bottom" | "ae2:part/cable/core/covered/gray" | "minecraft:block/orange_terracotta" | "minecraft:block/powder_snow" | "create:block/valve_handle/valve_handle_light_gray" | "create:block/gantry_shaft_flipped" | "botania:item/manasteel_axe" | "minecraft:block/wheat_stage0" | "create:block/palettes/stone_types/cut/veridium_cut" | "minecraft:block/respawn_anchor_bottom" | "botania:block/pink_double_flower_top" | "ftblibrary:icons/bug" | "ae2:block/charger" | "botania:item/balance_cloak" | "minecraft:block/red_sandstone_top" | "minecraft:block/candle" | "minecraft:item/trident" | "botania:block/terra_plate_side" | "create:block/portable_storage_interface" | "minecraft:item/rabbit_foot" | "create:item/sand_paper" | "minecraft:block/moss_block" | "create:item/experience_nugget" | "minecraft:block/weathered_cut_copper" | "create:block/palettes/ornate_iron_window_end" | "minecraft:item/diamond_pickaxe" | "botania:block/magenta_double_flower_top" | "minecraft:block/big_dripleaf_side" | "minecraft:block/black_candle_lit" | "create:block/bogey/wheel" | "minecraft:item/totem_of_undying" | "botania:item/elementium_nugget" | "botania:block/pump_structure" | "botania:item/cosmetic_eerie_mask" | "botania:block/corporea_retainer_end" | "create:block/axis_top" | "minecraft:block/tall_seagrass_top" | "botania:item/manaweave_helmet_holiday" | "botania:block/ender_eye_block" | "minecraft:entity/conduit/base" | "minecraft:block/chiseled_quartz_block_top" | "botania:block/chiseled_metamorphic_mesa_bricks_top" | "botania:item/lexicon_elven" | "create:block/toolbox/brown" | "minecraft:block/stripped_warped_stem" | "ae2:block/debug/phantom_node" | "ae2:block/cell_workbench_bottom" | "botania:block/elven_spreader_back" | "minecraft:block/tripwire_hook" | "create:block/valve_handle/valve_handle_green" | "ae2:item/portable_fluid_cell_256k" | "minecraft:block/carrots_stage1" | "minecraft:block/carrots_stage0" | "minecraft:item/leather_horse_armor" | "minecraft:block/carrots_stage3" | "minecraft:block/carrots_stage2" | "minecraft:block/command_block_front" | "ae2:item/charged_staff" | "ae2:block/io_port_side_off" | "minecraft:block/prismarine" | "minecraft:block/smoker_front" | "minecraft:block/slime_block" | "ae2:part/p2p_tunnel_sides" | "botania:block/forest_eye_east" | "create:block/engine" | "minecraft:block/acacia_door_top" | "botania:item/ice_pendant" | "ae2:block/condenser" | "ae2:part/cable/smart/white" | "ae2:part/cable/dense_smart/brown" | "minecraft:block/blue_ice" | "minecraft:block/sunflower_front" | "ae2:item/debug/replicator_card" | "botania:item/elucidator" | "minecraft:block/chorus_plant" | "ae2:block/controller_column_lights" | "minecraft:item/bow" | "ae2:part/cable/core/glass/brown" | "ae2:part/cable/smart/purple" | "botania:block/red_quartz_top" | "ae2:part/cable/smart/light_gray" | "minecraft:block/orange_tulip" | "create:block/palettes/stone_types/brick/scorchia_cut_brick" | "minecraft:block/tube_coral_fan" | "botania:block/scorched_grass_top" | "botania:item/quartz_blaze" | "minecraft:block/pink_glazed_terracotta" | "botania:item/cosmetic_lusitanic_shield" | "minecraft:block/spruce_planks" | "minecraft:block/pink_concrete_powder" | "minecraft:block/wheat_stage1" | "create:block/toolbox/purple" | "minecraft:block/wheat_stage2" | "minecraft:block/wheat_stage3" | "minecraft:block/wheat_stage4" | "minecraft:block/wheat_stage5" | "minecraft:item/birch_sign" | "minecraft:block/wheat_stage6" | "botania:block/agricarnation_chibi" | "minecraft:block/podzol_side" | "minecraft:block/wheat_stage7" | "ae2:part/import_bus_sides" | "minecraft:block/light_gray_shulker_box" | "minecraft:block/dead_tube_coral_block" | "botania:block/metamorphic_desert_stone" | "minecraft:block/dead_horn_coral_fan" | "botania:block/ghost_rail" | "botania:block/metamorphic_fungal_bricks_1" | "botania:item/itemfinder" | "minecraft:block/spore_blossom_base" | "create:block/boiler_gauge" | "create:block/palettes/jungle_window" | "create:block/encased_chain_drive_middle" | "minecraft:block/repeating_command_block_front" | "minecraft:block/red_mushroom_block" | "create:block/palettes/spruce_window" | "botania:item/travel_belt" | "minecraft:block/granite" | "minecraft:block/brown_glazed_terracotta" | "ae2:part/cable/dense_smart/yellow" | "botania:block/mana_spreader_scaffolding_side" | "create:block/cogwheel" | "minecraft:block/pointed_dripstone_up_tip" | "botania:item/rune_autumn" | "minecraft:item/iron_ingot" | "minecraft:block/crafting_table_top" | "ae2:models/skychest" | "minecraft:block/deepslate_lapis_ore" | "botania:item/lens_messenger" | "botania:item/temperance_stone" | "botania:block/mana_quartz_pillar_end" | "botania:block/blaze_quartz_side" | "ae2:item/fluid_storage_cell_64k" | "minecraft:block/lily_of_the_valley" | "ae2:part/cable/core/glass/transparent" | "create:block/sequenced_gearshift" | "minecraft:block/observer_side" | "create:block/palettes/stone_types/small_brick/asurine_cut_small_brick" | "ae2:block/deepslate_quartz_ore_3" | "ae2:item/biometric_card_hash" | "ae2:item/debug/meteorite_placer" | "ftblibrary:icons/color_blank" | "ftblibrary:icons/bin" | "botania:block/chiseled_mana_quartz_side" | "botania:block/manastar" | "ae2:item/printed_calculation_processor" | "create:block/girder_pole_side" | "create:fluid/chocolate_still" | "ae2:item/memory_card_hash" | "botania:item/pool_minecart" | "ae2:block/deepslate_quartz_ore_0" | "ae2:block/deepslate_quartz_ore_2" | "ae2:block/deepslate_quartz_ore_1" | "minecraft:block/loom_top" | "create:block/seat/side_green" | "minecraft:block/deepslate_redstone_ore" | "ae2:part/pattern_access_terminal_medium" | "minecraft:item/bow_pulling_1" | "minecraft:item/bow_pulling_0" | "minecraft:item/bow_pulling_2" | "minecraft:item/melon_seeds" | "create:item/honeyed_apple" | "botania:block/rafflowsia" | "create:block/belt_offset" | "minecraft:block/yellow_candle" | "ftblibrary:icons/security_public" | "ae2:block/quantum_ring_light" | "create:item/glass_door" | "create:block/valve_handle/valve_handle_yellow" | "minecraft:block/campfire_log_lit" | "botania:item/ender_air_bottle" | "minecraft:block/smithing_table_bottom" | "lootr:block/barrel_bottom" | "ae2:item/annihilation_core" | "minecraft:block/ladder" | "create:block/palettes/stone_types/cut/diorite_cut" | "botania:item/manaweave_leggings_holiday" | "botania:item/lens_flare" | "create:block/seat/side_black" | "minecraft:item/beef" | "minecraft:block/stripped_dark_oak_log_top" | "create:block/radial_chassis_side" | "itemfilters:item/strong_nbt" | "ae2:block/security_station_side" | "minecraft:item/golden_axe" | "botania:item/lens_magnet" | "botania:item/lens_tripwire" | "minecraft:block/honey_block_side" | "minecraft:item/spyglass_model" | "ftblibrary:icons/dice" | "botania:item/horn_grass" | "create:block/sail/canvas_red" | "botania:block/yellow_pavement" | "botania:block/abstruse_platform" | "create:block/valve_handle/valve_handle_black" | "botania:block/jiyuulia" | "create:block/sail/canvas_white" | "minecraft:block/powered_rail_on" | "minecraft:block/crimson_stem" | "minecraft:block/stone" | "minecraft:block/tnt_top" | "create:block/palettes/small_rose_quartz_tiles" | "ftblibrary:icons/bed" | "minecraft:block/flowering_azalea_top" | "botania:block/dreamwood_planks" | "ae2:block/chest/bottom" | "create:block/toolbox/cyan" | "ftblibrary:icons/toggle_day" | "create:block/seat/side_gray" | "botania:block/crafty_crate_3_1" | "botania:block/crafty_crate_3_2" | "ae2:item/logic_processor_press" | "minecraft:block/polished_basalt_side" | "botania:block/metamorphic_taiga_bricks" | "botania:item/temperance_stone_active" | "minecraft:item/quartz" | "botania:block/chiseled_metamorphic_plains_bricks" | "botania:block/clayconia" | "create:block/hose_pulley_rope" | "create:block/secondary_linear_chassis_side" | "enderstorage:items/pouch/buttons/middle/brown" | "minecraft:item/lingering_potion" | "ae2:block/debug/cube_gen" | "create:block/palettes/stone_types/layered/deepslate_cut_layered_connected" | "ae2:part/cable/core/covered/blue" | "create:block/pinion" | "enderstorage:items/pouch/buttons/middle/light_gray" | "botania:item/mana_tablet" | "create:block/valve_handle/valve_handle_light_blue" | "minecraft:item/music_disc_far" | "create:block/palettes/stone_types/pillar/crimsite_cut_pillar_connected" | "minecraft:item/creeper_banner_pattern" | "create:block/flap_display_side" | "botania:block/mana_detector" | "ae2:block/security_station_light_dark" | "minecraft:block/furnace_side" | "botania:block/mana_quartz_bottom" | "ae2:part/cable/core/glass/blue" | "botania:item/world_seed" | "minecraft:block/command_block_side" | "botania:item/cosmetic_anaglyph_glasses" | "ae2:block/spatial_io_port_top" | "create:block/diodes/powered_toggle_latch/powered_powering" | "minecraft:item/jungle_door" | "botania:item/cosmetic_tiny_potato_mask" | "ae2:block/drive/cells/256k_fluid_cell" | "ae2:item/memory_card_magenta" | "botania:item/flugel_eye" | "ae2:item/silicon" | "minecraft:block/lava_still" | "minecraft:block/damaged_anvil_top" | "enderstorage:items/pouch/owned_closed" | "botania:item/manasteel_sword" | "botania:model/lexicon_default" | "botania:block/brown_mushroom" | "minecraft:item/leather_leggings" | "create:block/palettes/stone_types/brick/deepslate_cut_brick" | "create:item/unprocessed_obsidian_sheet" | "botania:item/manaweave_helmet" | "minecraft:block/daylight_detector_side" | "enderstorage:items/pouch/buttons/middle/pink" | "create:block/belt/orange_diagonal_scroll" | "minecraft:item/chainmail_helmet" | "create:block/palettes/stone_types/cap/andesite_cut_cap_connected" | "minecraft:block/black_stained_glass" | "botania:item/spark_upgrade_dominant" | "ae2:block/controller_conflict" | "create:item/belt_connector" | "create:item/precision_mechanism" | "minecraft:item/ink_sac" | "minecraft:block/green_concrete_powder" | "botania:item/lava_pendant_gem" | "minecraft:item/stick" | "botania:block/gaia_spreader_scaffolding_side" | "minecraft:block/blue_shulker_box" | "create:block/sail/canvas_black" | "minecraft:block/cauldron_side" | "botania:block/medumone" | "ae2:part/conversion_monitor_bright" | "minecraft:block/piston_bottom" | "minecraft:block/red_shulker_box" | "create:block/chute_diagonal" | "minecraft:item/honeycomb" | "minecraft:block/polished_granite" | "create:block/controller_rail_base" | "ae2:block/crafting/ring_side_ver" | "minecraft:block/end_portal_frame_side" | "botania:block/spectral_platform" | "ae2:part/cable/core/dense_smart/black" | "minecraft:block/pink_tulip" | "create:block/sail/canvas_gray" | "minecraft:block/copper_block" | "create:block/palettes/stone_types/pillar/ochrum_cut_pillar_connected" | "create:block/bogey/piston" | "ae2:block/spatial_io_port_side" | "ftblibrary:icons/friends" | "ae2:item/memory_card_pink" | "minecraft:item/item_frame" | "ae2:block/io_port_top" | "botania:block/purple_double_flower" | "minecraft:block/warped_door_bottom" | "create:block/palettes/jungle_window_connected" | "minecraft:block/packed_ice" | "botania:item/aura_ring_greater" | "ftblibrary:icons/toggle_gamemode" | "ae2:part/cable/core/glass/lime" | "create:block/palettes/framed_glass_pane_top" | "minecraft:block/sunflower_top" | "create:block/palettes/stone_types/cap/andesite_cut_cap" | "create:block/pipes_connected" | "ae2:block/drive/cells/64k_fluid_cell" | "enderstorage:items/pouch/buttons/left/yellow" | "botania:block/mana_spreader_core" | "minecraft:block/netherite_block" | "ae2:part/cable/smart/red" | "minecraft:item/crossbow_standby" | "botania:block/apothecary_mesa_top" | "minecraft:item/cauldron" | "botania:block/orechid" | "minecraft:item/stone_sword" | "minecraft:block/large_fern_bottom" | "botania:item/mana_blaster" | "botania:item/mining_ring" | "minecraft:item/potion" | "create:item/empty_schematic" | "minecraft:block/red_stained_glass" | "minecraft:item/baked_potato" | "create:item/copper_nugget" | "minecraft:item/clock_57" | "minecraft:item/clock_58" | "minecraft:item/clock_55" | "minecraft:item/clock_56" | "create:item/tree_fertilizer" | "botania:block/green_shiny_flower" | "minecraft:item/clock_59" | "create:block/toolbox/magenta" | "create:item/zinc_nugget" | "botania:block/apothecary_taiga_side" | "minecraft:block/smithing_table_front" | "minecraft:item/clock_60" | "minecraft:item/clock_61" | "minecraft:block/lily_pad" | "ae2:block/crafting/unit" | "minecraft:item/clock_62" | "botania:item/super_lava_pendant" | "minecraft:item/clock_63" | "botania:item/tiny_planet" | "minecraft:item/clock_46" | "ae2:part/cable/covered/brown" | "minecraft:item/clock_47" | "minecraft:item/clock_44" | "minecraft:item/clock_45" | "ae2:part/cable/glass/black" | "minecraft:item/clock_48" | "create:block/palettes/stone_types/cap/veridium_cut_cap" | "minecraft:item/clock_49" | "create:block/mechanical_press_side" | "botania:block/green_mystical_flower" | "minecraft:item/black_dye" | "botania:block/green_pavement" | "ae2:item/color_applicator_tip_bright" | "minecraft:block/polished_diorite" | "minecraft:block/smoker_top" | "minecraft:item/clock_50" | "botania:block/light_relay" | "minecraft:item/clay_ball" | "minecraft:item/clock_53" | "minecraft:item/clock_54" | "minecraft:item/clock_51" | "minecraft:item/clock_52" | "minecraft:item/clock_35" | "minecraft:item/clock_36" | "minecraft:item/sugar_cane" | "minecraft:item/clock_33" | "minecraft:item/clock_34" | "minecraft:item/clock_39" | "minecraft:item/clock_37" | "minecraft:item/clock_38" | "create:block/adjustable_chain_gearshift_powered" | "botania:block/alfheim_portal_swirl" | "ae2:part/pattern_encoding_terminal_dark" | "botania:block/thermalily" | "botania:block/corporea_block" | "minecraft:block/oak_log_top" | "botania:item/livingwood_bow_pulling_1" | "botania:item/manasteel_shears" | "botania:item/livingwood_bow_pulling_2" | "botania:item/livingwood_bow_pulling_3" | "minecraft:block/lodestone_side" | "ae2:part/transition_plane_back" | "minecraft:block/stripped_oak_log_top" | "create:block/palettes/stone_types/layered/tuff_cut_layered" | "minecraft:block/netherrack" | "create:block/palettes/stone_types/small_brick/andesite_cut_small_brick" | "minecraft:item/clock_42" | "minecraft:item/clock_43" | "create:block/ladder_brass" | "minecraft:item/clock_40" | "minecraft:item/clock_41" | "minecraft:item/clock_24" | "botania:item/cosmetic_engineer_goggles" | "minecraft:item/clock_25" | "minecraft:item/clock_22" | "minecraft:item/clock_23" | "minecraft:item/clock_28" | "minecraft:item/clock_29" | "minecraft:item/clock_26" | "minecraft:item/clock_27" | "ae2:part/cable/core/dense_smart/pink" | "create:block/fan_casing" | "minecraft:item/clock_31" | "create:block/valve_handle/valve_handle_magenta" | "minecraft:item/clock_32" | "minecraft:item/clock_30" | "minecraft:item/clock_13" | "minecraft:item/clock_14" | "minecraft:item/clock_11" | "botania:block/chiseled_metamorphic_forest_bricks" | "minecraft:block/vine" | "minecraft:item/clock_12" | "minecraft:item/clock_17" | "minecraft:item/clock_18" | "minecraft:item/clock_15" | "botania:item/rune_wrath" | "minecraft:item/clock_16" | "botania:block/apothecary_fungal_bottom" | "minecraft:block/chiseled_red_sandstone" | "minecraft:item/clock_19" | "ae2:part/crafting_terminal" | "botania:block/tiny_planet_block" | "create:block/seat/side_white" | "botania:block/white_pavement" | "minecraft:item/iron_chestplate" | "minecraft:block/lectern_front" | "minecraft:block/pink_candle_lit" | "minecraft:item/clock_20" | "minecraft:item/clock_21" | "botania:item/cobble_rod" | "minecraft:item/clock_02" | "minecraft:item/clock_03" | "minecraft:item/cake" | "minecraft:item/clock_00" | "minecraft:item/clock_01" | "ae2:block/spatial_anchor_side" | "minecraft:item/clock_06" | "minecraft:item/clock_07" | "minecraft:item/clock_04" | "minecraft:item/clock_05" | "minecraft:item/rotten_flesh" | "minecraft:item/clock_08" | "minecraft:item/clock_09" | "create:block/crate_creative" | "botania:item/ancient_will_ahrim" | "minecraft:block/bamboo_singleleaf" | "minecraft:block/diorite" | "minecraft:block/oxidized_cut_copper" | "minecraft:block/ice" | "botania:block/spark_changer_bottom" | "ftblibrary:icons/notes" | "minecraft:item/clock_10" | "create:block/palettes/stone_types/small_brick/calcite_cut_small_brick" | "create:block/bracket_metal" | "create:block/sail/canvas_green" | "botania:item/lens_power" | "minecraft:block/turtle_egg" | "create:item/crushed_iron_ore" | "minecraft:block/cracked_stone_bricks" | "create:block/diodes/pulse_extender/powered" | "botania:item/cosmetic_unicorn_horn" | "botania:item/manasteel_hoe" | "minecraft:block/bell_bottom" | "minecraft:entity/conduit/wind_vertical" | "create:block/palettes/stone_types/brick/crimsite_cut_brick" | "create:block/palettes/vertical_framed_glass_connected" | "minecraft:block/cake_top" | "ae2:part/monitor_front" | "minecraft:item/brewing_stand" | "minecraft:block/red_sandstone" | "create:block/blaze_idle" | "botania:block/white_double_flower_top" | "create:block/mixer_head" | "minecraft:item/music_disc_ward" | "minecraft:block/bamboo_large_leaves" | "create:block/glass_door_side" | "botania:item/quartz_mana" | "create:item/goggles" | "lootr:chest_opened" | "botania:block/apothecary_default_side" | "minecraft:block/dead_horn_coral_block" | "botania:block/corporea_funnel_side" | "create:block/filtered_detector_front" | "minecraft:item/leather_chestplate_overlay" | "minecraft:item/cod" | "create:block/copper/weathered_copper_roof_top" | "minecraft:block/acacia_planks" | "botania:block/mana_void_overlay" | "create:block/chute" | "botania:item/rune_earth" | "botania:block/black_shiny_flower" | "botania:block/jiyuulia_chibi" | "botania:block/blue_double_flower" | "minecraft:block/lilac_top" | "botania:item/horn_leaves" | "minecraft:item/melon_slice" | "botania:block/red_quartz_side" | "minecraft:block/iron_trapdoor" | "botania:block/red_quartz_pillar_end" | "minecraft:block/redstone_lamp" | "botania:block/elven_spreader_scaffolding_bottom" | "botania:model/tiny_potato/default" | "ftblibrary:icons/art" | "ae2:item/portable_fluid_cell_4k" | "ae2:block/quartz_pillar_top" | "minecraft:block/chiseled_stone_bricks" | "enderstorage:items/pouch/buttons/right/gray" | "create:item/chocolate_glazed_berries" | "ae2:block/controller" | "botania:item/blood_pendant" | "minecraft:item/enchanted_book" | "minecraft:item/cooked_mutton" | "botania:item/flower_bag" | "ae2:part/cable/smart/orange" | "ae2:part/cable/dense_smart/0" | "botania:item/pattern_2_3" | "botania:item/pattern_2_2" | "botania:item/pattern_2_1" | "create:block/hose_pulley_magnet" | "botania:block/purple_shiny_flower" | "botania:block/corporea_interceptor_side" | "minecraft:block/gray_stained_glass_pane_top" | "botania:block/metamorphic_swamp_stone" | "botania:block/alfheim_portal" | "botania:block/yellow_double_flower_top" | "minecraft:item/empty_armor_slot_leggings" | "botania:item/livingwood_twig" | "minecraft:block/red_tulip" | "minecraft:item/fishing_rod" | "botania:item/mutated_seeds" | "minecraft:block/dark_oak_trapdoor" | "create:block/crafter_side_connected" | "minecraft:item/potato" | "create:block/toolbox/orange" | "ftbquests:item/lootcrate/front" | "botania:block/shulk_me_not" | "create:block/valve_handle/valve_handle_white" | "botania:item/lava_pendant" | "create:block/nixie_tube" | "create:block/palettes/tiled_glass" | "minecraft:item/nautilus_shell" | "botania:block/corporea_brick" | "enderstorage:items/pouch/open" | "minecraft:block/mycelium_side" | "minecraft:block/blue_stained_glass" | "botania:item/lens_bounce" | "botania:block/enchanter" | "minecraft:item/comparator" | "botania:item/king_key" | "minecraft:item/blaze_powder" | "ae2:block/security_station_light_bright" | "enderstorage:items/pouch/buttons/middle/magenta" | "enderstorage:items/pouch/buttons/left/gray" | "botania:block/corporea_crystal_cube_base" | "minecraft:item/music_disc_wait" | "botania:item/tornado_rod" | "create:block/fluid_tank_top_connected" | "create:block/andesite_funnel_tall" | "create:fluid/tea_still" | "minecraft:item/iron_axe" | "botania:block/livingwood_planks" | "minecraft:block/water_flow" | "ae2:part/cable/smart/green" | "minecraft:item/salmon_bucket" | "minecraft:item/slime_ball" | "minecraft:block/potted_flowering_azalea_bush_side" | "minecraft:item/iron_helmet" | "ae2:item/printed_silicon" | "botania:item/cacophonium" | "botania:item/rune_fire" | "create:block/chute_block" | "minecraft:item/milk_bucket" | "minecraft:block/lime_terracotta" | "botania:item/ancient_will_karil" | "ae2:part/cable/smart/channels_11" | "ae2:part/cable/smart/channels_10" | "minecraft:block/stripped_spruce_log_top" | "ftblibrary:icons/diamond" | "ae2:part/cable/smart/channels_13" | "create:block/palettes/stone_types/slab/ochrum_cut_slab" | "ae2:part/cable/smart/channels_12" | "ftblibrary:icons/star" | "botania:block/light_gray_shiny_flower" | "create:block/seat/top_light_blue" | "naturescompass:item/naturescompass_31" | "naturescompass:item/naturescompass_30" | "botania:block/stripped_livingwood_log_top" | "create:block/diodes/pulse_repeater/item" | "ae2:part/cable/smart/channels_14" | "ae2:block/smooth_sky_stone_block" | "minecraft:item/netherite_sword" | "ae2:part/cable/smart/channels_00" | "naturescompass:item/naturescompass_26" | "naturescompass:item/naturescompass_25" | "minecraft:item/phantom_membrane" | "ae2:part/cable/smart/channels_02" | "ae2:part/cable/dense_covered/magenta" | "naturescompass:item/naturescompass_24" | "ae2:part/cable/smart/channels_01" | "ae2:item/memory_card_white" | "naturescompass:item/naturescompass_23" | "ae2:part/conversion_monitor" | "naturescompass:item/naturescompass_29" | "naturescompass:item/naturescompass_28" | "naturescompass:item/naturescompass_27" | "ftblibrary:icons/remove" | "minecraft:block/barrel_top" | "create:block/gantry_shaft_powered" | "minecraft:block/sunflower_bottom" | "naturescompass:item/naturescompass_22" | "naturescompass:item/naturescompass_21" | "naturescompass:item/naturescompass_20" | "ae2:item/spatial_pylon" | "botania:block/metamorphic_fungal_stone" | "ae2:part/cable/smart/channels_04" | "ae2:part/cable/smart/channels_03" | "create:block/standard_track" | "minecraft:block/fire_coral_block" | "create:item/creative_blaze_cake" | "create:item/red_sand_paper" | "minecraft:block/cyan_concrete" | "botania:block/metamorphic_desert_bricks" | "minecraft:block/andesite" | "botania:item/terrasteel_boots" | "create:block/controls" | "create:block/creative_fluid_tank" | "minecraft:item/knowledge_book" | "ae2:item/memory_card" | "create:block/palettes/stone_types/pillar/veridium_cut_pillar_connected" | "botania:item/dreamwood_wand" | "create:fluid/tea_flow" | "minecraft:item/flower_banner_pattern" | "minecraft:item/written_book" | "minecraft:block/nether_sprouts" | "botania:block/red_string_fertilizer" | "ae2:item/nether_quartz_wrench" | "ae2:block/spatial_pylon/dim_end" | "create:block/redstone_bridge_powered" | "minecraft:block/brown_stained_glass_pane_top" | "ftblibrary:icons/accept" | "create:block/cart_assembler_side_off" | "botania:block/apothecary_desert_bottom" | "minecraft:block/pointed_dripstone_down_frustum" | "minecraft:block/gray_glazed_terracotta" | "minecraft:item/cocoa_beans" | "create:block/diodes/pulse_extender/powered_powering" | "minecraft:block/magenta_shulker_box" | "minecraft:block/dead_tube_coral" | "create:block/toolbox/lime" | "ae2:part/terminal" | "create:block/andesite_encased_cogwheel_side" | "minecraft:block/smooth_stone" | "ae2:item/paint_ball" | "minecraft:block/sea_pickle" | "ftbquests:item/lootcrate/side" | "create:block/palettes/rose_quartz_side" | "botania:item/mana_bottle" | "botania:block/sunny_quartz_side" | "minecraft:entity/conduit/open_eye" | "ae2:block/crafting/4k_storage" | "minecraft:item/gold_nugget" | "botania:block/chiseled_elf_quartz_side" | "botania:block/life_imbuer" | "botania:item/lens_phantom" | "minecraft:block/podzol_top" | "create:block/seat/side_yellow" | "create:item/blaze_cake" | "ae2:block/crafting/256k_storage" | "minecraft:block/composter_ready" | "ae2:part/monitor_sides_status_off" | "ae2:block/quantum_link" | "create:block/ladder_copper" | "create:block/weighted_ejector_inner" | "create:item/andesite_alloy" | "botania:block/alchemy_catalyst_overlay" | "minecraft:block/brain_coral" | "create:block/cart_assembler_side_on" | "ftblibrary:icons/player" | "create:block/creative_fluid_tank_window_single" | "botania:item/corporea_spark" | "ae2:item/portable_fluid_cell_1k" | "ae2:part/cable/core/covered/lime" | "create:block/brass_tunnel_top_window" | "minecraft:item/suspicious_stew" | "botania:item/keep_ivy" | "minecraft:block/repeating_command_block_conditional" | "minecraft:block/raw_iron_block" | "minecraft:item/music_disc_blocks" | "create:block/palettes/horizontal_framed_glass" | "minecraft:block/repeating_command_block_back" | "minecraft:block/redstone_block" | "minecraft:item/spruce_sign" | "create:block/palettes/stone_types/pillar/diorite_cut_pillar_connected" | "create:block/belt/magenta_diagonal_scroll" | "minecraft:block/comparator_on" | "botania:item/scorched_seeds" | "ae2:part/cable/core/glass/magenta" | "botania:block/apothecary_swamp_bottom" | "botania:block/crafty_crate_2_1" | "botania:block/crafty_crate_2_2" | "botania:item/rune_envy" | "botania:block/crafty_crate_2_3" | "ae2:item/wireless_terminal" | "create:block/gearbox" | "botania:block/spark_changer_side" | "botania:block/magenta_mushroom" | "botania:item/cosmetic_eyepatch" | "create:block/crafter_topunderside" | "minecraft:block/nether_portal" | "botania:item/terrasteel_nugget" | "minecraft:block/dried_kelp_side" | "minecraft:item/soul_campfire" | "minecraft:item/acacia_door" | "minecraft:block/cyan_glazed_terracotta" | "create:block/palettes/rose_quartz_tiles" | "create:item/honey_bucket" | "ae2:item/memory_card_light_gray" | "minecraft:item/nether_brick" | "minecraft:block/cracked_deepslate_bricks" | "minecraft:item/netherite_ingot" | "minecraft:item/diamond_boots" | "botania:item/dreamwood_wand_bottom" | "create:block/palettes/stone_types/cap/limestone_cut_cap" | "ae2:part/cable/covered/gray" | "minecraft:block/nether_bricks" | "ae2:block/drive/drive_top" | "ae2:part/cable/glass/white" | "create:block/palettes/stone_types/slab/andesite_cut_slab" | "botania:item/magnet_ring_greater_active" | "ftblibrary:icons/add" | "minecraft:item/glistering_melon_slice" | "minecraft:block/sculk_sensor_tendril_inactive" | "create:block/palettes/birch_window" | "botania:block/sunny_quartz_pillar_end" | "minecraft:entity/conduit/closed_eye" | "minecraft:block/stripped_warped_stem_top" | "ae2:part/identity_annihilation_plane" | "create:block/large_cogwheel" | "create:block/depot_side" | "minecraft:block/brain_coral_block";
    type SoundEvent = "botania:agricarnation" | "botania:air_rod" | "botania:altar_craft" | "botania:arcane_rose_disenchant" | "botania:astrolabe_configure" | "botania:babylon_attack" | "botania:babylon_spawn" | "botania:bellows" | "botania:bifrost_rod" | "botania:black_hole_talisman_configure" | "botania:black_lotus" | "botania:dash" | "botania:dice_of_fate" | "botania:ding" | "botania:diva_charm" | "botania:divination_rod" | "botania:doit" | "botania:drum" | "botania:enchanter_enchant" | "botania:enchanter_fade" | "botania:enchanter_form" | "botania:ender_air_throw" | "botania:endoflame" | "botania:entropinnyum_angry" | "botania:entropinnyum_happy" | "botania:equip_bauble" | "botania:equip_elementium" | "botania:equip_manasteel" | "botania:equip_manaweave" | "botania:equip_terrasteel" | "botania:fire_rod" | "botania:flare_chakram_throw" | "botania:flugel_eye_bind" | "botania:flugel_eye_teleport" | "botania:gaia_death" | "botania:gaia_summon" | "botania:gaia_teleport" | "botania:gaia_trap" | "botania:holy_cloak" | "botania:horn_doot" | "botania:labellia" | "botania:laputa_start" | "botania:lexicon_open" | "botania:light_relay" | "botania:mana_blaster" | "botania:mana_blaster_cycle" | "botania:mana_blaster_misfire" | "botania:mana_pool_craft" | "botania:missile" | "botania:missile_funny" | "botania:music.gaia1" | "botania:music.gaia2" | "botania:narslimmus_eat_big" | "botania:narslimmus_eat_small" | "botania:orechid" | "botania:pinkinator" | "botania:potion_create" | "botania:prism_add_lens" | "botania:prism_remove_lens" | "botania:red_string_interceptor_click" | "botania:rune_altar_craft" | "botania:rune_altar_start" | "botania:shulk_me_not" | "botania:smelt_rod" | "botania:smelt_rod_extra_no_subtitle" | "botania:smelt_rod_simmer" | "botania:spreader_add_lens" | "botania:spreader_cover" | "botania:spreader_fire" | "botania:spreader_remove_lens" | "botania:spreader_scaffold" | "botania:spreader_un_scaffold" | "botania:spreader_uncover" | "botania:starcaller" | "botania:temperance_stone_configure" | "botania:terra_pick_mode" | "botania:terrablade" | "botania:terraform_rod" | "botania:terrasteel_craft" | "botania:thermalily" | "botania:thorn_chakram_throw" | "botania:tigerseye_pacify" | "botania:unholy_cloak" | "botania:vine_ball_throw" | "botania:virus_infect" | "botania:way" | "botania:world_seed_teleport" | "create:blaze_munch" | "create:chiff" | "create:cogs" | "create:confirm" | "create:contraption_assemble" | "create:contraption_assemble_compounded_1" | "create:contraption_disassemble" | "create:controller_click" | "create:controller_put" | "create:controller_take" | "create:copper_armor_equip" | "create:crafter_click" | "create:crafter_click_compounded_1" | "create:crafter_craft" | "create:cranking" | "create:cranking_compounded_1" | "create:crushing_1" | "create:crushing_2" | "create:crushing_3" | "create:deny" | "create:depot_plop" | "create:depot_slide" | "create:funnel_flap" | "create:funnel_flap_compounded_1" | "create:fwoomp" | "create:haunted_bell_convert" | "create:haunted_bell_use" | "create:mechanical_press_activation" | "create:mechanical_press_activation_belt" | "create:mechanical_press_activation_belt_compounded_1" | "create:mechanical_press_activation_compounded_1" | "create:mixing" | "create:mixing_compounded_1" | "create:peculiar_bell_use" | "create:potato_hit" | "create:potato_hit_compounded_1" | "create:sanding_long" | "create:sanding_short" | "create:saw_activate_stone" | "create:saw_activate_wood" | "create:schematicannon_finish" | "create:schematicannon_launch_block" | "create:scroll_value" | "create:slime_added" | "create:steam" | "create:train" | "create:train2" | "create:train3" | "create:whistle" | "create:whistle_high" | "create:whistle_low" | "create:whistle_train" | "create:whistle_train_low" | "create:whistle_train_manual" | "create:whistle_train_manual_end" | "create:whistle_train_manual_low" | "create:whistle_train_manual_low_end" | "create:worldshaper_place" | "create:wrench_remove" | "create:wrench_remove_compounded_1" | "create:wrench_rotate" | "ambient.basalt_deltas.additions" | "minecraft:ambient.basalt_deltas.additions" | "ambient.basalt_deltas.loop" | "minecraft:ambient.basalt_deltas.loop" | "ambient.basalt_deltas.mood" | "minecraft:ambient.basalt_deltas.mood" | "ambient.cave" | "minecraft:ambient.cave" | "ambient.crimson_forest.additions" | "minecraft:ambient.crimson_forest.additions" | "ambient.crimson_forest.loop" | "minecraft:ambient.crimson_forest.loop" | "ambient.crimson_forest.mood" | "minecraft:ambient.crimson_forest.mood" | "ambient.nether_wastes.additions" | "minecraft:ambient.nether_wastes.additions" | "ambient.nether_wastes.loop" | "minecraft:ambient.nether_wastes.loop" | "ambient.nether_wastes.mood" | "minecraft:ambient.nether_wastes.mood" | "ambient.soul_sand_valley.additions" | "minecraft:ambient.soul_sand_valley.additions" | "ambient.soul_sand_valley.loop" | "minecraft:ambient.soul_sand_valley.loop" | "ambient.soul_sand_valley.mood" | "minecraft:ambient.soul_sand_valley.mood" | "ambient.underwater.enter" | "minecraft:ambient.underwater.enter" | "ambient.underwater.exit" | "minecraft:ambient.underwater.exit" | "ambient.underwater.loop" | "minecraft:ambient.underwater.loop" | "ambient.underwater.loop.additions" | "minecraft:ambient.underwater.loop.additions" | "ambient.underwater.loop.additions.rare" | "minecraft:ambient.underwater.loop.additions.rare" | "ambient.underwater.loop.additions.ultra_rare" | "minecraft:ambient.underwater.loop.additions.ultra_rare" | "ambient.warped_forest.additions" | "minecraft:ambient.warped_forest.additions" | "ambient.warped_forest.loop" | "minecraft:ambient.warped_forest.loop" | "ambient.warped_forest.mood" | "minecraft:ambient.warped_forest.mood" | "block.amethyst_block.break" | "minecraft:block.amethyst_block.break" | "block.amethyst_block.chime" | "minecraft:block.amethyst_block.chime" | "block.amethyst_block.fall" | "minecraft:block.amethyst_block.fall" | "block.amethyst_block.hit" | "minecraft:block.amethyst_block.hit" | "block.amethyst_block.place" | "minecraft:block.amethyst_block.place" | "block.amethyst_block.step" | "minecraft:block.amethyst_block.step" | "block.amethyst_cluster.break" | "minecraft:block.amethyst_cluster.break" | "block.amethyst_cluster.fall" | "minecraft:block.amethyst_cluster.fall" | "block.amethyst_cluster.hit" | "minecraft:block.amethyst_cluster.hit" | "block.amethyst_cluster.place" | "minecraft:block.amethyst_cluster.place" | "block.amethyst_cluster.step" | "minecraft:block.amethyst_cluster.step" | "block.ancient_debris.break" | "minecraft:block.ancient_debris.break" | "block.ancient_debris.fall" | "minecraft:block.ancient_debris.fall" | "block.ancient_debris.hit" | "minecraft:block.ancient_debris.hit" | "block.ancient_debris.place" | "minecraft:block.ancient_debris.place" | "block.ancient_debris.step" | "minecraft:block.ancient_debris.step" | "block.anvil.break" | "minecraft:block.anvil.break" | "block.anvil.destroy" | "minecraft:block.anvil.destroy" | "block.anvil.fall" | "minecraft:block.anvil.fall" | "block.anvil.hit" | "minecraft:block.anvil.hit" | "block.anvil.land" | "minecraft:block.anvil.land" | "block.anvil.place" | "minecraft:block.anvil.place" | "block.anvil.step" | "minecraft:block.anvil.step" | "block.anvil.use" | "minecraft:block.anvil.use" | "block.azalea.break" | "minecraft:block.azalea.break" | "block.azalea.fall" | "minecraft:block.azalea.fall" | "block.azalea.hit" | "minecraft:block.azalea.hit" | "block.azalea.place" | "minecraft:block.azalea.place" | "block.azalea.step" | "minecraft:block.azalea.step" | "block.azalea_leaves.break" | "minecraft:block.azalea_leaves.break" | "block.azalea_leaves.fall" | "minecraft:block.azalea_leaves.fall" | "block.azalea_leaves.hit" | "minecraft:block.azalea_leaves.hit" | "block.azalea_leaves.place" | "minecraft:block.azalea_leaves.place" | "block.azalea_leaves.step" | "minecraft:block.azalea_leaves.step" | "block.bamboo.break" | "minecraft:block.bamboo.break" | "block.bamboo.fall" | "minecraft:block.bamboo.fall" | "block.bamboo.hit" | "minecraft:block.bamboo.hit" | "block.bamboo.place" | "minecraft:block.bamboo.place" | "block.bamboo.step" | "minecraft:block.bamboo.step" | "block.bamboo_sapling.break" | "minecraft:block.bamboo_sapling.break" | "block.bamboo_sapling.hit" | "minecraft:block.bamboo_sapling.hit" | "block.bamboo_sapling.place" | "minecraft:block.bamboo_sapling.place" | "block.barrel.close" | "minecraft:block.barrel.close" | "block.barrel.open" | "minecraft:block.barrel.open" | "block.basalt.break" | "minecraft:block.basalt.break" | "block.basalt.fall" | "minecraft:block.basalt.fall" | "block.basalt.hit" | "minecraft:block.basalt.hit" | "block.basalt.place" | "minecraft:block.basalt.place" | "block.basalt.step" | "minecraft:block.basalt.step" | "block.beacon.activate" | "minecraft:block.beacon.activate" | "block.beacon.ambient" | "minecraft:block.beacon.ambient" | "block.beacon.deactivate" | "minecraft:block.beacon.deactivate" | "block.beacon.power_select" | "minecraft:block.beacon.power_select" | "block.beehive.drip" | "minecraft:block.beehive.drip" | "block.beehive.enter" | "minecraft:block.beehive.enter" | "block.beehive.exit" | "minecraft:block.beehive.exit" | "block.beehive.shear" | "minecraft:block.beehive.shear" | "block.beehive.work" | "minecraft:block.beehive.work" | "block.bell.resonate" | "minecraft:block.bell.resonate" | "block.bell.use" | "minecraft:block.bell.use" | "block.big_dripleaf.break" | "minecraft:block.big_dripleaf.break" | "block.big_dripleaf.fall" | "minecraft:block.big_dripleaf.fall" | "block.big_dripleaf.hit" | "minecraft:block.big_dripleaf.hit" | "block.big_dripleaf.place" | "minecraft:block.big_dripleaf.place" | "block.big_dripleaf.step" | "minecraft:block.big_dripleaf.step" | "block.big_dripleaf.tilt_down" | "minecraft:block.big_dripleaf.tilt_down" | "block.big_dripleaf.tilt_up" | "minecraft:block.big_dripleaf.tilt_up" | "block.blastfurnace.fire_crackle" | "minecraft:block.blastfurnace.fire_crackle" | "block.bone_block.break" | "minecraft:block.bone_block.break" | "block.bone_block.fall" | "minecraft:block.bone_block.fall" | "block.bone_block.hit" | "minecraft:block.bone_block.hit" | "block.bone_block.place" | "minecraft:block.bone_block.place" | "block.bone_block.step" | "minecraft:block.bone_block.step" | "block.brewing_stand.brew" | "minecraft:block.brewing_stand.brew" | "block.bubble_column.bubble_pop" | "minecraft:block.bubble_column.bubble_pop" | "block.bubble_column.upwards_ambient" | "minecraft:block.bubble_column.upwards_ambient" | "block.bubble_column.upwards_inside" | "minecraft:block.bubble_column.upwards_inside" | "block.bubble_column.whirlpool_ambient" | "minecraft:block.bubble_column.whirlpool_ambient" | "block.bubble_column.whirlpool_inside" | "minecraft:block.bubble_column.whirlpool_inside" | "block.cake.add_candle" | "minecraft:block.cake.add_candle" | "block.calcite.break" | "minecraft:block.calcite.break" | "block.calcite.fall" | "minecraft:block.calcite.fall" | "block.calcite.hit" | "minecraft:block.calcite.hit" | "block.calcite.place" | "minecraft:block.calcite.place" | "block.calcite.step" | "minecraft:block.calcite.step" | "block.campfire.crackle" | "minecraft:block.campfire.crackle" | "block.candle.ambient" | "minecraft:block.candle.ambient" | "block.candle.break" | "minecraft:block.candle.break" | "block.candle.extinguish" | "minecraft:block.candle.extinguish" | "block.candle.fall" | "minecraft:block.candle.fall" | "block.candle.hit" | "minecraft:block.candle.hit" | "block.candle.place" | "minecraft:block.candle.place" | "block.candle.step" | "minecraft:block.candle.step" | "block.cave_vines.break" | "minecraft:block.cave_vines.break" | "block.cave_vines.fall" | "minecraft:block.cave_vines.fall" | "block.cave_vines.hit" | "minecraft:block.cave_vines.hit" | "block.cave_vines.pick_berries" | "minecraft:block.cave_vines.pick_berries" | "block.cave_vines.place" | "minecraft:block.cave_vines.place" | "block.cave_vines.step" | "minecraft:block.cave_vines.step" | "block.chain.break" | "minecraft:block.chain.break" | "block.chain.fall" | "minecraft:block.chain.fall" | "block.chain.hit" | "minecraft:block.chain.hit" | "block.chain.place" | "minecraft:block.chain.place" | "block.chain.step" | "minecraft:block.chain.step" | "block.chest.close" | "minecraft:block.chest.close" | "block.chest.locked" | "minecraft:block.chest.locked" | "block.chest.open" | "minecraft:block.chest.open" | "block.chorus_flower.death" | "minecraft:block.chorus_flower.death" | "block.chorus_flower.grow" | "minecraft:block.chorus_flower.grow" | "block.comparator.click" | "minecraft:block.comparator.click" | "block.composter.empty" | "minecraft:block.composter.empty" | "block.composter.fill" | "minecraft:block.composter.fill" | "block.composter.fill_success" | "minecraft:block.composter.fill_success" | "block.composter.ready" | "minecraft:block.composter.ready" | "block.conduit.activate" | "minecraft:block.conduit.activate" | "block.conduit.ambient" | "minecraft:block.conduit.ambient" | "block.conduit.ambient.short" | "minecraft:block.conduit.ambient.short" | "block.conduit.attack.target" | "minecraft:block.conduit.attack.target" | "block.conduit.deactivate" | "minecraft:block.conduit.deactivate" | "block.copper.break" | "minecraft:block.copper.break" | "block.copper.fall" | "minecraft:block.copper.fall" | "block.copper.hit" | "minecraft:block.copper.hit" | "block.copper.place" | "minecraft:block.copper.place" | "block.copper.step" | "minecraft:block.copper.step" | "block.coral_block.break" | "minecraft:block.coral_block.break" | "block.coral_block.fall" | "minecraft:block.coral_block.fall" | "block.coral_block.hit" | "minecraft:block.coral_block.hit" | "block.coral_block.place" | "minecraft:block.coral_block.place" | "block.coral_block.step" | "minecraft:block.coral_block.step" | "block.crop.break" | "minecraft:block.crop.break" | "block.deepslate.break" | "minecraft:block.deepslate.break" | "block.deepslate.fall" | "minecraft:block.deepslate.fall" | "block.deepslate.hit" | "minecraft:block.deepslate.hit" | "block.deepslate.place" | "minecraft:block.deepslate.place" | "block.deepslate.step" | "minecraft:block.deepslate.step" | "block.deepslate_bricks.break" | "minecraft:block.deepslate_bricks.break" | "block.deepslate_bricks.fall" | "minecraft:block.deepslate_bricks.fall" | "block.deepslate_bricks.hit" | "minecraft:block.deepslate_bricks.hit" | "block.deepslate_bricks.place" | "minecraft:block.deepslate_bricks.place" | "block.deepslate_bricks.step" | "minecraft:block.deepslate_bricks.step" | "block.deepslate_tiles.break" | "minecraft:block.deepslate_tiles.break" | "block.deepslate_tiles.fall" | "minecraft:block.deepslate_tiles.fall" | "block.deepslate_tiles.hit" | "minecraft:block.deepslate_tiles.hit" | "block.deepslate_tiles.place" | "minecraft:block.deepslate_tiles.place" | "block.deepslate_tiles.step" | "minecraft:block.deepslate_tiles.step" | "block.dispenser.dispense" | "minecraft:block.dispenser.dispense" | "block.dispenser.fail" | "minecraft:block.dispenser.fail" | "block.dispenser.launch" | "minecraft:block.dispenser.launch" | "block.dripstone_block.break" | "minecraft:block.dripstone_block.break" | "block.dripstone_block.fall" | "minecraft:block.dripstone_block.fall" | "block.dripstone_block.hit" | "minecraft:block.dripstone_block.hit" | "block.dripstone_block.place" | "minecraft:block.dripstone_block.place" | "block.dripstone_block.step" | "minecraft:block.dripstone_block.step" | "block.enchantment_table.use" | "minecraft:block.enchantment_table.use" | "block.end_gateway.spawn" | "minecraft:block.end_gateway.spawn" | "block.end_portal.spawn" | "minecraft:block.end_portal.spawn" | "block.end_portal_frame.fill" | "minecraft:block.end_portal_frame.fill" | "block.ender_chest.close" | "minecraft:block.ender_chest.close" | "block.ender_chest.open" | "minecraft:block.ender_chest.open" | "block.fence_gate.close" | "minecraft:block.fence_gate.close" | "block.fence_gate.open" | "minecraft:block.fence_gate.open" | "block.fire.ambient" | "minecraft:block.fire.ambient" | "block.fire.extinguish" | "minecraft:block.fire.extinguish" | "block.flowering_azalea.break" | "minecraft:block.flowering_azalea.break" | "block.flowering_azalea.fall" | "minecraft:block.flowering_azalea.fall" | "block.flowering_azalea.hit" | "minecraft:block.flowering_azalea.hit" | "block.flowering_azalea.place" | "minecraft:block.flowering_azalea.place" | "block.flowering_azalea.step" | "minecraft:block.flowering_azalea.step" | "block.fungus.break" | "minecraft:block.fungus.break" | "block.fungus.fall" | "minecraft:block.fungus.fall" | "block.fungus.hit" | "minecraft:block.fungus.hit" | "block.fungus.place" | "minecraft:block.fungus.place" | "block.fungus.step" | "minecraft:block.fungus.step" | "block.furnace.fire_crackle" | "minecraft:block.furnace.fire_crackle" | "block.gilded_blackstone.break" | "minecraft:block.gilded_blackstone.break" | "block.gilded_blackstone.fall" | "minecraft:block.gilded_blackstone.fall" | "block.gilded_blackstone.hit" | "minecraft:block.gilded_blackstone.hit" | "block.gilded_blackstone.place" | "minecraft:block.gilded_blackstone.place" | "block.gilded_blackstone.step" | "minecraft:block.gilded_blackstone.step" | "block.glass.break" | "minecraft:block.glass.break" | "block.glass.fall" | "minecraft:block.glass.fall" | "block.glass.hit" | "minecraft:block.glass.hit" | "block.glass.place" | "minecraft:block.glass.place" | "block.glass.step" | "minecraft:block.glass.step" | "block.grass.break" | "minecraft:block.grass.break" | "block.grass.fall" | "minecraft:block.grass.fall" | "block.grass.hit" | "minecraft:block.grass.hit" | "block.grass.place" | "minecraft:block.grass.place" | "block.grass.step" | "minecraft:block.grass.step" | "block.gravel.break" | "minecraft:block.gravel.break" | "block.gravel.fall" | "minecraft:block.gravel.fall" | "block.gravel.hit" | "minecraft:block.gravel.hit" | "block.gravel.place" | "minecraft:block.gravel.place" | "block.gravel.step" | "minecraft:block.gravel.step" | "block.grindstone.use" | "minecraft:block.grindstone.use" | "block.growing_plant.crop" | "minecraft:block.growing_plant.crop" | "block.hanging_roots.break" | "minecraft:block.hanging_roots.break" | "block.hanging_roots.fall" | "minecraft:block.hanging_roots.fall" | "block.hanging_roots.hit" | "minecraft:block.hanging_roots.hit" | "block.hanging_roots.place" | "minecraft:block.hanging_roots.place" | "block.hanging_roots.step" | "minecraft:block.hanging_roots.step" | "block.honey_block.break" | "minecraft:block.honey_block.break" | "block.honey_block.fall" | "minecraft:block.honey_block.fall" | "block.honey_block.hit" | "minecraft:block.honey_block.hit" | "block.honey_block.place" | "minecraft:block.honey_block.place" | "block.honey_block.slide" | "minecraft:block.honey_block.slide" | "block.honey_block.step" | "minecraft:block.honey_block.step" | "block.iron_door.close" | "minecraft:block.iron_door.close" | "block.iron_door.open" | "minecraft:block.iron_door.open" | "block.iron_trapdoor.close" | "minecraft:block.iron_trapdoor.close" | "block.iron_trapdoor.open" | "minecraft:block.iron_trapdoor.open" | "block.ladder.break" | "minecraft:block.ladder.break" | "block.ladder.fall" | "minecraft:block.ladder.fall" | "block.ladder.hit" | "minecraft:block.ladder.hit" | "block.ladder.place" | "minecraft:block.ladder.place" | "block.ladder.step" | "minecraft:block.ladder.step" | "block.lantern.break" | "minecraft:block.lantern.break" | "block.lantern.fall" | "minecraft:block.lantern.fall" | "block.lantern.hit" | "minecraft:block.lantern.hit" | "block.lantern.place" | "minecraft:block.lantern.place" | "block.lantern.step" | "minecraft:block.lantern.step" | "block.large_amethyst_bud.break" | "minecraft:block.large_amethyst_bud.break" | "block.large_amethyst_bud.place" | "minecraft:block.large_amethyst_bud.place" | "block.lava.ambient" | "minecraft:block.lava.ambient" | "block.lava.extinguish" | "minecraft:block.lava.extinguish" | "block.lava.pop" | "minecraft:block.lava.pop" | "block.lever.click" | "minecraft:block.lever.click" | "block.lily_pad.place" | "minecraft:block.lily_pad.place" | "block.lodestone.break" | "minecraft:block.lodestone.break" | "block.lodestone.fall" | "minecraft:block.lodestone.fall" | "block.lodestone.hit" | "minecraft:block.lodestone.hit" | "block.lodestone.place" | "minecraft:block.lodestone.place" | "block.lodestone.step" | "minecraft:block.lodestone.step" | "block.medium_amethyst_bud.break" | "minecraft:block.medium_amethyst_bud.break" | "block.medium_amethyst_bud.place" | "minecraft:block.medium_amethyst_bud.place" | "block.metal.break" | "minecraft:block.metal.break" | "block.metal.fall" | "minecraft:block.metal.fall" | "block.metal.hit" | "minecraft:block.metal.hit" | "block.metal.place" | "minecraft:block.metal.place" | "block.metal.step" | "minecraft:block.metal.step" | "block.metal_pressure_plate.click_off" | "minecraft:block.metal_pressure_plate.click_off" | "block.metal_pressure_plate.click_on" | "minecraft:block.metal_pressure_plate.click_on" | "block.moss.break" | "minecraft:block.moss.break" | "block.moss.fall" | "minecraft:block.moss.fall" | "block.moss.hit" | "minecraft:block.moss.hit" | "block.moss.place" | "minecraft:block.moss.place" | "block.moss.step" | "minecraft:block.moss.step" | "block.moss_carpet.break" | "minecraft:block.moss_carpet.break" | "block.moss_carpet.fall" | "minecraft:block.moss_carpet.fall" | "block.moss_carpet.hit" | "minecraft:block.moss_carpet.hit" | "block.moss_carpet.place" | "minecraft:block.moss_carpet.place" | "block.moss_carpet.step" | "minecraft:block.moss_carpet.step" | "block.nether_bricks.break" | "minecraft:block.nether_bricks.break" | "block.nether_bricks.fall" | "minecraft:block.nether_bricks.fall" | "block.nether_bricks.hit" | "minecraft:block.nether_bricks.hit" | "block.nether_bricks.place" | "minecraft:block.nether_bricks.place" | "block.nether_bricks.step" | "minecraft:block.nether_bricks.step" | "block.nether_gold_ore.break" | "minecraft:block.nether_gold_ore.break" | "block.nether_gold_ore.fall" | "minecraft:block.nether_gold_ore.fall" | "block.nether_gold_ore.hit" | "minecraft:block.nether_gold_ore.hit" | "block.nether_gold_ore.place" | "minecraft:block.nether_gold_ore.place" | "block.nether_gold_ore.step" | "minecraft:block.nether_gold_ore.step" | "block.nether_ore.break" | "minecraft:block.nether_ore.break" | "block.nether_ore.fall" | "minecraft:block.nether_ore.fall" | "block.nether_ore.hit" | "minecraft:block.nether_ore.hit" | "block.nether_ore.place" | "minecraft:block.nether_ore.place" | "block.nether_ore.step" | "minecraft:block.nether_ore.step" | "block.nether_sprouts.break" | "minecraft:block.nether_sprouts.break" | "block.nether_sprouts.fall" | "minecraft:block.nether_sprouts.fall" | "block.nether_sprouts.hit" | "minecraft:block.nether_sprouts.hit" | "block.nether_sprouts.place" | "minecraft:block.nether_sprouts.place" | "block.nether_sprouts.step" | "minecraft:block.nether_sprouts.step" | "block.nether_wart.break" | "minecraft:block.nether_wart.break" | "block.netherite_block.break" | "minecraft:block.netherite_block.break" | "block.netherite_block.fall" | "minecraft:block.netherite_block.fall" | "block.netherite_block.hit" | "minecraft:block.netherite_block.hit" | "block.netherite_block.place" | "minecraft:block.netherite_block.place" | "block.netherite_block.step" | "minecraft:block.netherite_block.step" | "block.netherrack.break" | "minecraft:block.netherrack.break" | "block.netherrack.fall" | "minecraft:block.netherrack.fall" | "block.netherrack.hit" | "minecraft:block.netherrack.hit" | "block.netherrack.place" | "minecraft:block.netherrack.place" | "block.netherrack.step" | "minecraft:block.netherrack.step" | "block.note_block.banjo" | "minecraft:block.note_block.banjo" | "block.note_block.basedrum" | "minecraft:block.note_block.basedrum" | "block.note_block.bass" | "minecraft:block.note_block.bass" | "block.note_block.bell" | "minecraft:block.note_block.bell" | "block.note_block.bit" | "minecraft:block.note_block.bit" | "block.note_block.chime" | "minecraft:block.note_block.chime" | "block.note_block.cow_bell" | "minecraft:block.note_block.cow_bell" | "block.note_block.didgeridoo" | "minecraft:block.note_block.didgeridoo" | "block.note_block.flute" | "minecraft:block.note_block.flute" | "block.note_block.guitar" | "minecraft:block.note_block.guitar" | "block.note_block.harp" | "minecraft:block.note_block.harp" | "block.note_block.hat" | "minecraft:block.note_block.hat" | "block.note_block.iron_xylophone" | "minecraft:block.note_block.iron_xylophone" | "block.note_block.pling" | "minecraft:block.note_block.pling" | "block.note_block.snare" | "minecraft:block.note_block.snare" | "block.note_block.xylophone" | "minecraft:block.note_block.xylophone" | "block.nylium.break" | "minecraft:block.nylium.break" | "block.nylium.fall" | "minecraft:block.nylium.fall" | "block.nylium.hit" | "minecraft:block.nylium.hit" | "block.nylium.place" | "minecraft:block.nylium.place" | "block.nylium.step" | "minecraft:block.nylium.step" | "block.piston.contract" | "minecraft:block.piston.contract" | "block.piston.extend" | "minecraft:block.piston.extend" | "block.pointed_dripstone.break" | "minecraft:block.pointed_dripstone.break" | "block.pointed_dripstone.drip_lava" | "minecraft:block.pointed_dripstone.drip_lava" | "block.pointed_dripstone.drip_lava_into_cauldron" | "minecraft:block.pointed_dripstone.drip_lava_into_cauldron" | "block.pointed_dripstone.drip_water" | "minecraft:block.pointed_dripstone.drip_water" | "block.pointed_dripstone.drip_water_into_cauldron" | "minecraft:block.pointed_dripstone.drip_water_into_cauldron" | "block.pointed_dripstone.fall" | "minecraft:block.pointed_dripstone.fall" | "block.pointed_dripstone.hit" | "minecraft:block.pointed_dripstone.hit" | "block.pointed_dripstone.land" | "minecraft:block.pointed_dripstone.land" | "block.pointed_dripstone.place" | "minecraft:block.pointed_dripstone.place" | "block.pointed_dripstone.step" | "minecraft:block.pointed_dripstone.step" | "block.polished_deepslate.break" | "minecraft:block.polished_deepslate.break" | "block.polished_deepslate.fall" | "minecraft:block.polished_deepslate.fall" | "block.polished_deepslate.hit" | "minecraft:block.polished_deepslate.hit" | "block.polished_deepslate.place" | "minecraft:block.polished_deepslate.place" | "block.polished_deepslate.step" | "minecraft:block.polished_deepslate.step" | "block.portal.ambient" | "minecraft:block.portal.ambient" | "block.portal.travel" | "minecraft:block.portal.travel" | "block.portal.trigger" | "minecraft:block.portal.trigger" | "block.powder_snow.break" | "minecraft:block.powder_snow.break" | "block.powder_snow.fall" | "minecraft:block.powder_snow.fall" | "block.powder_snow.hit" | "minecraft:block.powder_snow.hit" | "block.powder_snow.place" | "minecraft:block.powder_snow.place" | "block.powder_snow.step" | "minecraft:block.powder_snow.step" | "block.pumpkin.carve" | "minecraft:block.pumpkin.carve" | "block.redstone_torch.burnout" | "minecraft:block.redstone_torch.burnout" | "block.respawn_anchor.ambient" | "minecraft:block.respawn_anchor.ambient" | "block.respawn_anchor.charge" | "minecraft:block.respawn_anchor.charge" | "block.respawn_anchor.deplete" | "minecraft:block.respawn_anchor.deplete" | "block.respawn_anchor.set_spawn" | "minecraft:block.respawn_anchor.set_spawn" | "block.rooted_dirt.break" | "minecraft:block.rooted_dirt.break" | "block.rooted_dirt.fall" | "minecraft:block.rooted_dirt.fall" | "block.rooted_dirt.hit" | "minecraft:block.rooted_dirt.hit" | "block.rooted_dirt.place" | "minecraft:block.rooted_dirt.place" | "block.rooted_dirt.step" | "minecraft:block.rooted_dirt.step" | "block.roots.break" | "minecraft:block.roots.break" | "block.roots.fall" | "minecraft:block.roots.fall" | "block.roots.hit" | "minecraft:block.roots.hit" | "block.roots.place" | "minecraft:block.roots.place" | "block.roots.step" | "minecraft:block.roots.step" | "block.sand.break" | "minecraft:block.sand.break" | "block.sand.fall" | "minecraft:block.sand.fall" | "block.sand.hit" | "minecraft:block.sand.hit" | "block.sand.place" | "minecraft:block.sand.place" | "block.sand.step" | "minecraft:block.sand.step" | "block.scaffolding.break" | "minecraft:block.scaffolding.break" | "block.scaffolding.fall" | "minecraft:block.scaffolding.fall" | "block.scaffolding.hit" | "minecraft:block.scaffolding.hit" | "block.scaffolding.place" | "minecraft:block.scaffolding.place" | "block.scaffolding.step" | "minecraft:block.scaffolding.step" | "block.sculk_sensor.break" | "minecraft:block.sculk_sensor.break" | "block.sculk_sensor.clicking" | "minecraft:block.sculk_sensor.clicking" | "block.sculk_sensor.clicking_stop" | "minecraft:block.sculk_sensor.clicking_stop" | "block.sculk_sensor.fall" | "minecraft:block.sculk_sensor.fall" | "block.sculk_sensor.hit" | "minecraft:block.sculk_sensor.hit" | "block.sculk_sensor.place" | "minecraft:block.sculk_sensor.place" | "block.sculk_sensor.step" | "minecraft:block.sculk_sensor.step" | "block.shroomlight.break" | "minecraft:block.shroomlight.break" | "block.shroomlight.fall" | "minecraft:block.shroomlight.fall" | "block.shroomlight.hit" | "minecraft:block.shroomlight.hit" | "block.shroomlight.place" | "minecraft:block.shroomlight.place" | "block.shroomlight.step" | "minecraft:block.shroomlight.step" | "block.shulker_box.close" | "minecraft:block.shulker_box.close" | "block.shulker_box.open" | "minecraft:block.shulker_box.open" | "block.slime_block.break" | "minecraft:block.slime_block.break" | "block.slime_block.fall" | "minecraft:block.slime_block.fall" | "block.slime_block.hit" | "minecraft:block.slime_block.hit" | "block.slime_block.place" | "minecraft:block.slime_block.place" | "block.slime_block.step" | "minecraft:block.slime_block.step" | "block.small_amethyst_bud.break" | "minecraft:block.small_amethyst_bud.break" | "block.small_amethyst_bud.place" | "minecraft:block.small_amethyst_bud.place" | "block.small_dripleaf.break" | "minecraft:block.small_dripleaf.break" | "block.small_dripleaf.fall" | "minecraft:block.small_dripleaf.fall" | "block.small_dripleaf.hit" | "minecraft:block.small_dripleaf.hit" | "block.small_dripleaf.place" | "minecraft:block.small_dripleaf.place" | "block.small_dripleaf.step" | "minecraft:block.small_dripleaf.step" | "block.smithing_table.use" | "minecraft:block.smithing_table.use" | "block.smoker.smoke" | "minecraft:block.smoker.smoke" | "block.snow.break" | "minecraft:block.snow.break" | "block.snow.fall" | "minecraft:block.snow.fall" | "block.snow.hit" | "minecraft:block.snow.hit" | "block.snow.place" | "minecraft:block.snow.place" | "block.snow.step" | "minecraft:block.snow.step" | "block.soul_sand.break" | "minecraft:block.soul_sand.break" | "block.soul_sand.fall" | "minecraft:block.soul_sand.fall" | "block.soul_sand.hit" | "minecraft:block.soul_sand.hit" | "block.soul_sand.place" | "minecraft:block.soul_sand.place" | "block.soul_sand.step" | "minecraft:block.soul_sand.step" | "block.soul_soil.break" | "minecraft:block.soul_soil.break" | "block.soul_soil.fall" | "minecraft:block.soul_soil.fall" | "block.soul_soil.hit" | "minecraft:block.soul_soil.hit" | "block.soul_soil.place" | "minecraft:block.soul_soil.place" | "block.soul_soil.step" | "minecraft:block.soul_soil.step" | "block.spore_blossom.break" | "minecraft:block.spore_blossom.break" | "block.spore_blossom.fall" | "minecraft:block.spore_blossom.fall" | "block.spore_blossom.hit" | "minecraft:block.spore_blossom.hit" | "block.spore_blossom.place" | "minecraft:block.spore_blossom.place" | "block.spore_blossom.step" | "minecraft:block.spore_blossom.step" | "block.stem.break" | "minecraft:block.stem.break" | "block.stem.fall" | "minecraft:block.stem.fall" | "block.stem.hit" | "minecraft:block.stem.hit" | "block.stem.place" | "minecraft:block.stem.place" | "block.stem.step" | "minecraft:block.stem.step" | "block.stone.break" | "minecraft:block.stone.break" | "block.stone.fall" | "minecraft:block.stone.fall" | "block.stone.hit" | "minecraft:block.stone.hit" | "block.stone.place" | "minecraft:block.stone.place" | "block.stone.step" | "minecraft:block.stone.step" | "block.stone_button.click_off" | "minecraft:block.stone_button.click_off" | "block.stone_button.click_on" | "minecraft:block.stone_button.click_on" | "block.stone_pressure_plate.click_off" | "minecraft:block.stone_pressure_plate.click_off" | "block.stone_pressure_plate.click_on" | "minecraft:block.stone_pressure_plate.click_on" | "block.sweet_berry_bush.break" | "minecraft:block.sweet_berry_bush.break" | "block.sweet_berry_bush.pick_berries" | "minecraft:block.sweet_berry_bush.pick_berries" | "block.sweet_berry_bush.place" | "minecraft:block.sweet_berry_bush.place" | "block.tripwire.attach" | "minecraft:block.tripwire.attach" | "block.tripwire.click_off" | "minecraft:block.tripwire.click_off" | "block.tripwire.click_on" | "minecraft:block.tripwire.click_on" | "block.tripwire.detach" | "minecraft:block.tripwire.detach" | "block.tuff.break" | "minecraft:block.tuff.break" | "block.tuff.fall" | "minecraft:block.tuff.fall" | "block.tuff.hit" | "minecraft:block.tuff.hit" | "block.tuff.place" | "minecraft:block.tuff.place" | "block.tuff.step" | "minecraft:block.tuff.step" | "block.vine.break" | "minecraft:block.vine.break" | "block.vine.fall" | "minecraft:block.vine.fall" | "block.vine.hit" | "minecraft:block.vine.hit" | "block.vine.place" | "minecraft:block.vine.place" | "block.vine.step" | "minecraft:block.vine.step" | "block.wart_block.break" | "minecraft:block.wart_block.break" | "block.wart_block.fall" | "minecraft:block.wart_block.fall" | "block.wart_block.hit" | "minecraft:block.wart_block.hit" | "block.wart_block.place" | "minecraft:block.wart_block.place" | "block.wart_block.step" | "minecraft:block.wart_block.step" | "block.water.ambient" | "minecraft:block.water.ambient" | "block.weeping_vines.break" | "minecraft:block.weeping_vines.break" | "block.weeping_vines.fall" | "minecraft:block.weeping_vines.fall" | "block.weeping_vines.hit" | "minecraft:block.weeping_vines.hit" | "block.weeping_vines.place" | "minecraft:block.weeping_vines.place" | "block.weeping_vines.step" | "minecraft:block.weeping_vines.step" | "block.wet_grass.break" | "minecraft:block.wet_grass.break" | "block.wet_grass.fall" | "minecraft:block.wet_grass.fall" | "block.wet_grass.hit" | "minecraft:block.wet_grass.hit" | "block.wet_grass.place" | "minecraft:block.wet_grass.place" | "block.wet_grass.step" | "minecraft:block.wet_grass.step" | "block.wood.break" | "minecraft:block.wood.break" | "block.wood.fall" | "minecraft:block.wood.fall" | "block.wood.hit" | "minecraft:block.wood.hit" | "block.wood.place" | "minecraft:block.wood.place" | "block.wood.step" | "minecraft:block.wood.step" | "block.wooden_button.click_off" | "minecraft:block.wooden_button.click_off" | "block.wooden_button.click_on" | "minecraft:block.wooden_button.click_on" | "block.wooden_door.close" | "minecraft:block.wooden_door.close" | "block.wooden_door.open" | "minecraft:block.wooden_door.open" | "block.wooden_pressure_plate.click_off" | "minecraft:block.wooden_pressure_plate.click_off" | "block.wooden_pressure_plate.click_on" | "minecraft:block.wooden_pressure_plate.click_on" | "block.wooden_trapdoor.close" | "minecraft:block.wooden_trapdoor.close" | "block.wooden_trapdoor.open" | "minecraft:block.wooden_trapdoor.open" | "block.wool.break" | "minecraft:block.wool.break" | "block.wool.fall" | "minecraft:block.wool.fall" | "block.wool.hit" | "minecraft:block.wool.hit" | "block.wool.place" | "minecraft:block.wool.place" | "block.wool.step" | "minecraft:block.wool.step" | "enchant.thorns.hit" | "minecraft:enchant.thorns.hit" | "entity.armor_stand.break" | "minecraft:entity.armor_stand.break" | "entity.armor_stand.fall" | "minecraft:entity.armor_stand.fall" | "entity.armor_stand.hit" | "minecraft:entity.armor_stand.hit" | "entity.armor_stand.place" | "minecraft:entity.armor_stand.place" | "entity.arrow.hit" | "minecraft:entity.arrow.hit" | "entity.arrow.hit_player" | "minecraft:entity.arrow.hit_player" | "entity.arrow.shoot" | "minecraft:entity.arrow.shoot" | "entity.axolotl.attack" | "minecraft:entity.axolotl.attack" | "entity.axolotl.death" | "minecraft:entity.axolotl.death" | "entity.axolotl.hurt" | "minecraft:entity.axolotl.hurt" | "entity.axolotl.idle_air" | "minecraft:entity.axolotl.idle_air" | "entity.axolotl.idle_water" | "minecraft:entity.axolotl.idle_water" | "entity.axolotl.splash" | "minecraft:entity.axolotl.splash" | "entity.axolotl.swim" | "minecraft:entity.axolotl.swim" | "entity.bat.ambient" | "minecraft:entity.bat.ambient" | "entity.bat.death" | "minecraft:entity.bat.death" | "entity.bat.hurt" | "minecraft:entity.bat.hurt" | "entity.bat.loop" | "minecraft:entity.bat.loop" | "entity.bat.takeoff" | "minecraft:entity.bat.takeoff" | "entity.bee.death" | "minecraft:entity.bee.death" | "entity.bee.hurt" | "minecraft:entity.bee.hurt" | "entity.bee.loop" | "minecraft:entity.bee.loop" | "entity.bee.loop_aggressive" | "minecraft:entity.bee.loop_aggressive" | "entity.bee.pollinate" | "minecraft:entity.bee.pollinate" | "entity.bee.sting" | "minecraft:entity.bee.sting" | "entity.blaze.ambient" | "minecraft:entity.blaze.ambient" | "entity.blaze.burn" | "minecraft:entity.blaze.burn" | "entity.blaze.death" | "minecraft:entity.blaze.death" | "entity.blaze.hurt" | "minecraft:entity.blaze.hurt" | "entity.blaze.shoot" | "minecraft:entity.blaze.shoot" | "entity.boat.paddle_land" | "minecraft:entity.boat.paddle_land" | "entity.boat.paddle_water" | "minecraft:entity.boat.paddle_water" | "entity.cat.ambient" | "minecraft:entity.cat.ambient" | "entity.cat.beg_for_food" | "minecraft:entity.cat.beg_for_food" | "entity.cat.death" | "minecraft:entity.cat.death" | "entity.cat.eat" | "minecraft:entity.cat.eat" | "entity.cat.hiss" | "minecraft:entity.cat.hiss" | "entity.cat.hurt" | "minecraft:entity.cat.hurt" | "entity.cat.purr" | "minecraft:entity.cat.purr" | "entity.cat.purreow" | "minecraft:entity.cat.purreow" | "entity.cat.stray_ambient" | "minecraft:entity.cat.stray_ambient" | "entity.chicken.ambient" | "minecraft:entity.chicken.ambient" | "entity.chicken.death" | "minecraft:entity.chicken.death" | "entity.chicken.egg" | "minecraft:entity.chicken.egg" | "entity.chicken.hurt" | "minecraft:entity.chicken.hurt" | "entity.chicken.step" | "minecraft:entity.chicken.step" | "entity.cod.ambient" | "minecraft:entity.cod.ambient" | "entity.cod.death" | "minecraft:entity.cod.death" | "entity.cod.flop" | "minecraft:entity.cod.flop" | "entity.cod.hurt" | "minecraft:entity.cod.hurt" | "entity.cow.ambient" | "minecraft:entity.cow.ambient" | "entity.cow.death" | "minecraft:entity.cow.death" | "entity.cow.hurt" | "minecraft:entity.cow.hurt" | "entity.cow.milk" | "minecraft:entity.cow.milk" | "entity.cow.step" | "minecraft:entity.cow.step" | "entity.creeper.death" | "minecraft:entity.creeper.death" | "entity.creeper.hurt" | "minecraft:entity.creeper.hurt" | "entity.creeper.primed" | "minecraft:entity.creeper.primed" | "entity.dolphin.ambient" | "minecraft:entity.dolphin.ambient" | "entity.dolphin.ambient_water" | "minecraft:entity.dolphin.ambient_water" | "entity.dolphin.attack" | "minecraft:entity.dolphin.attack" | "entity.dolphin.death" | "minecraft:entity.dolphin.death" | "entity.dolphin.eat" | "minecraft:entity.dolphin.eat" | "entity.dolphin.hurt" | "minecraft:entity.dolphin.hurt" | "entity.dolphin.jump" | "minecraft:entity.dolphin.jump" | "entity.dolphin.play" | "minecraft:entity.dolphin.play" | "entity.dolphin.splash" | "minecraft:entity.dolphin.splash" | "entity.dolphin.swim" | "minecraft:entity.dolphin.swim" | "entity.donkey.ambient" | "minecraft:entity.donkey.ambient" | "entity.donkey.angry" | "minecraft:entity.donkey.angry" | "entity.donkey.chest" | "minecraft:entity.donkey.chest" | "entity.donkey.death" | "minecraft:entity.donkey.death" | "entity.donkey.eat" | "minecraft:entity.donkey.eat" | "entity.donkey.hurt" | "minecraft:entity.donkey.hurt" | "entity.dragon_fireball.explode" | "minecraft:entity.dragon_fireball.explode" | "entity.drowned.ambient" | "minecraft:entity.drowned.ambient" | "entity.drowned.ambient_water" | "minecraft:entity.drowned.ambient_water" | "entity.drowned.death" | "minecraft:entity.drowned.death" | "entity.drowned.death_water" | "minecraft:entity.drowned.death_water" | "entity.drowned.hurt" | "minecraft:entity.drowned.hurt" | "entity.drowned.hurt_water" | "minecraft:entity.drowned.hurt_water" | "entity.drowned.shoot" | "minecraft:entity.drowned.shoot" | "entity.drowned.step" | "minecraft:entity.drowned.step" | "entity.drowned.swim" | "minecraft:entity.drowned.swim" | "entity.egg.throw" | "minecraft:entity.egg.throw" | "entity.elder_guardian.ambient" | "minecraft:entity.elder_guardian.ambient" | "entity.elder_guardian.ambient_land" | "minecraft:entity.elder_guardian.ambient_land" | "entity.elder_guardian.curse" | "minecraft:entity.elder_guardian.curse" | "entity.elder_guardian.death" | "minecraft:entity.elder_guardian.death" | "entity.elder_guardian.death_land" | "minecraft:entity.elder_guardian.death_land" | "entity.elder_guardian.flop" | "minecraft:entity.elder_guardian.flop" | "entity.elder_guardian.hurt" | "minecraft:entity.elder_guardian.hurt" | "entity.elder_guardian.hurt_land" | "minecraft:entity.elder_guardian.hurt_land" | "entity.ender_dragon.ambient" | "minecraft:entity.ender_dragon.ambient" | "entity.ender_dragon.death" | "minecraft:entity.ender_dragon.death" | "entity.ender_dragon.flap" | "minecraft:entity.ender_dragon.flap" | "entity.ender_dragon.growl" | "minecraft:entity.ender_dragon.growl" | "entity.ender_dragon.hurt" | "minecraft:entity.ender_dragon.hurt" | "entity.ender_dragon.shoot" | "minecraft:entity.ender_dragon.shoot" | "entity.ender_eye.death" | "minecraft:entity.ender_eye.death" | "entity.ender_eye.launch" | "minecraft:entity.ender_eye.launch" | "entity.ender_pearl.throw" | "minecraft:entity.ender_pearl.throw" | "entity.enderman.ambient" | "minecraft:entity.enderman.ambient" | "entity.enderman.death" | "minecraft:entity.enderman.death" | "entity.enderman.hurt" | "minecraft:entity.enderman.hurt" | "entity.enderman.scream" | "minecraft:entity.enderman.scream" | "entity.enderman.stare" | "minecraft:entity.enderman.stare" | "entity.enderman.teleport" | "minecraft:entity.enderman.teleport" | "entity.endermite.ambient" | "minecraft:entity.endermite.ambient" | "entity.endermite.death" | "minecraft:entity.endermite.death" | "entity.endermite.hurt" | "minecraft:entity.endermite.hurt" | "entity.endermite.step" | "minecraft:entity.endermite.step" | "entity.evoker.ambient" | "minecraft:entity.evoker.ambient" | "entity.evoker.cast_spell" | "minecraft:entity.evoker.cast_spell" | "entity.evoker.celebrate" | "minecraft:entity.evoker.celebrate" | "entity.evoker.death" | "minecraft:entity.evoker.death" | "entity.evoker.hurt" | "minecraft:entity.evoker.hurt" | "entity.evoker.prepare_attack" | "minecraft:entity.evoker.prepare_attack" | "entity.evoker.prepare_summon" | "minecraft:entity.evoker.prepare_summon" | "entity.evoker.prepare_wololo" | "minecraft:entity.evoker.prepare_wololo" | "entity.evoker_fangs.attack" | "minecraft:entity.evoker_fangs.attack" | "entity.experience_bottle.throw" | "minecraft:entity.experience_bottle.throw" | "entity.experience_orb.pickup" | "minecraft:entity.experience_orb.pickup" | "entity.firework_rocket.blast" | "minecraft:entity.firework_rocket.blast" | "entity.firework_rocket.blast_far" | "minecraft:entity.firework_rocket.blast_far" | "entity.firework_rocket.large_blast" | "minecraft:entity.firework_rocket.large_blast" | "entity.firework_rocket.large_blast_far" | "minecraft:entity.firework_rocket.large_blast_far" | "entity.firework_rocket.launch" | "minecraft:entity.firework_rocket.launch" | "entity.firework_rocket.shoot" | "minecraft:entity.firework_rocket.shoot" | "entity.firework_rocket.twinkle" | "minecraft:entity.firework_rocket.twinkle" | "entity.firework_rocket.twinkle_far" | "minecraft:entity.firework_rocket.twinkle_far" | "entity.fish.swim" | "minecraft:entity.fish.swim" | "entity.fishing_bobber.retrieve" | "minecraft:entity.fishing_bobber.retrieve" | "entity.fishing_bobber.splash" | "minecraft:entity.fishing_bobber.splash" | "entity.fishing_bobber.throw" | "minecraft:entity.fishing_bobber.throw" | "entity.fox.aggro" | "minecraft:entity.fox.aggro" | "entity.fox.ambient" | "minecraft:entity.fox.ambient" | "entity.fox.bite" | "minecraft:entity.fox.bite" | "entity.fox.death" | "minecraft:entity.fox.death" | "entity.fox.eat" | "minecraft:entity.fox.eat" | "entity.fox.hurt" | "minecraft:entity.fox.hurt" | "entity.fox.screech" | "minecraft:entity.fox.screech" | "entity.fox.sleep" | "minecraft:entity.fox.sleep" | "entity.fox.sniff" | "minecraft:entity.fox.sniff" | "entity.fox.spit" | "minecraft:entity.fox.spit" | "entity.fox.teleport" | "minecraft:entity.fox.teleport" | "entity.generic.big_fall" | "minecraft:entity.generic.big_fall" | "entity.generic.burn" | "minecraft:entity.generic.burn" | "entity.generic.death" | "minecraft:entity.generic.death" | "entity.generic.drink" | "minecraft:entity.generic.drink" | "entity.generic.eat" | "minecraft:entity.generic.eat" | "entity.generic.explode" | "minecraft:entity.generic.explode" | "entity.generic.extinguish_fire" | "minecraft:entity.generic.extinguish_fire" | "entity.generic.hurt" | "minecraft:entity.generic.hurt" | "entity.generic.small_fall" | "minecraft:entity.generic.small_fall" | "entity.generic.splash" | "minecraft:entity.generic.splash" | "entity.generic.swim" | "minecraft:entity.generic.swim" | "entity.ghast.ambient" | "minecraft:entity.ghast.ambient" | "entity.ghast.death" | "minecraft:entity.ghast.death" | "entity.ghast.hurt" | "minecraft:entity.ghast.hurt" | "entity.ghast.scream" | "minecraft:entity.ghast.scream" | "entity.ghast.shoot" | "minecraft:entity.ghast.shoot" | "entity.ghast.warn" | "minecraft:entity.ghast.warn" | "entity.glow_item_frame.add_item" | "minecraft:entity.glow_item_frame.add_item" | "entity.glow_item_frame.break" | "minecraft:entity.glow_item_frame.break" | "entity.glow_item_frame.place" | "minecraft:entity.glow_item_frame.place" | "entity.glow_item_frame.remove_item" | "minecraft:entity.glow_item_frame.remove_item" | "entity.glow_item_frame.rotate_item" | "minecraft:entity.glow_item_frame.rotate_item" | "entity.glow_squid.ambient" | "minecraft:entity.glow_squid.ambient" | "entity.glow_squid.death" | "minecraft:entity.glow_squid.death" | "entity.glow_squid.hurt" | "minecraft:entity.glow_squid.hurt" | "entity.glow_squid.squirt" | "minecraft:entity.glow_squid.squirt" | "entity.goat.ambient" | "minecraft:entity.goat.ambient" | "entity.goat.death" | "minecraft:entity.goat.death" | "entity.goat.eat" | "minecraft:entity.goat.eat" | "entity.goat.hurt" | "minecraft:entity.goat.hurt" | "entity.goat.long_jump" | "minecraft:entity.goat.long_jump" | "entity.goat.milk" | "minecraft:entity.goat.milk" | "entity.goat.prepare_ram" | "minecraft:entity.goat.prepare_ram" | "entity.goat.ram_impact" | "minecraft:entity.goat.ram_impact" | "entity.goat.screaming.ambient" | "minecraft:entity.goat.screaming.ambient" | "entity.goat.screaming.death" | "minecraft:entity.goat.screaming.death" | "entity.goat.screaming.eat" | "minecraft:entity.goat.screaming.eat" | "entity.goat.screaming.hurt" | "minecraft:entity.goat.screaming.hurt" | "entity.goat.screaming.long_jump" | "minecraft:entity.goat.screaming.long_jump" | "entity.goat.screaming.milk" | "minecraft:entity.goat.screaming.milk" | "entity.goat.screaming.prepare_ram" | "minecraft:entity.goat.screaming.prepare_ram" | "entity.goat.screaming.ram_impact" | "minecraft:entity.goat.screaming.ram_impact" | "entity.goat.step" | "minecraft:entity.goat.step" | "entity.guardian.ambient" | "minecraft:entity.guardian.ambient" | "entity.guardian.ambient_land" | "minecraft:entity.guardian.ambient_land" | "entity.guardian.attack" | "minecraft:entity.guardian.attack" | "entity.guardian.death" | "minecraft:entity.guardian.death" | "entity.guardian.death_land" | "minecraft:entity.guardian.death_land" | "entity.guardian.flop" | "minecraft:entity.guardian.flop" | "entity.guardian.hurt" | "minecraft:entity.guardian.hurt" | "entity.guardian.hurt_land" | "minecraft:entity.guardian.hurt_land" | "entity.hoglin.ambient" | "minecraft:entity.hoglin.ambient" | "entity.hoglin.angry" | "minecraft:entity.hoglin.angry" | "entity.hoglin.attack" | "minecraft:entity.hoglin.attack" | "entity.hoglin.converted_to_zombified" | "minecraft:entity.hoglin.converted_to_zombified" | "entity.hoglin.death" | "minecraft:entity.hoglin.death" | "entity.hoglin.hurt" | "minecraft:entity.hoglin.hurt" | "entity.hoglin.retreat" | "minecraft:entity.hoglin.retreat" | "entity.hoglin.step" | "minecraft:entity.hoglin.step" | "entity.horse.ambient" | "minecraft:entity.horse.ambient" | "entity.horse.angry" | "minecraft:entity.horse.angry" | "entity.horse.armor" | "minecraft:entity.horse.armor" | "entity.horse.breathe" | "minecraft:entity.horse.breathe" | "entity.horse.death" | "minecraft:entity.horse.death" | "entity.horse.eat" | "minecraft:entity.horse.eat" | "entity.horse.gallop" | "minecraft:entity.horse.gallop" | "entity.horse.hurt" | "minecraft:entity.horse.hurt" | "entity.horse.jump" | "minecraft:entity.horse.jump" | "entity.horse.land" | "minecraft:entity.horse.land" | "entity.horse.saddle" | "minecraft:entity.horse.saddle" | "entity.horse.step" | "minecraft:entity.horse.step" | "entity.horse.step_wood" | "minecraft:entity.horse.step_wood" | "entity.hostile.big_fall" | "minecraft:entity.hostile.big_fall" | "entity.hostile.death" | "minecraft:entity.hostile.death" | "entity.hostile.hurt" | "minecraft:entity.hostile.hurt" | "entity.hostile.small_fall" | "minecraft:entity.hostile.small_fall" | "entity.hostile.splash" | "minecraft:entity.hostile.splash" | "entity.hostile.swim" | "minecraft:entity.hostile.swim" | "entity.husk.ambient" | "minecraft:entity.husk.ambient" | "entity.husk.converted_to_zombie" | "minecraft:entity.husk.converted_to_zombie" | "entity.husk.death" | "minecraft:entity.husk.death" | "entity.husk.hurt" | "minecraft:entity.husk.hurt" | "entity.husk.step" | "minecraft:entity.husk.step" | "entity.illusioner.ambient" | "minecraft:entity.illusioner.ambient" | "entity.illusioner.cast_spell" | "minecraft:entity.illusioner.cast_spell" | "entity.illusioner.death" | "minecraft:entity.illusioner.death" | "entity.illusioner.hurt" | "minecraft:entity.illusioner.hurt" | "entity.illusioner.mirror_move" | "minecraft:entity.illusioner.mirror_move" | "entity.illusioner.prepare_blindness" | "minecraft:entity.illusioner.prepare_blindness" | "entity.illusioner.prepare_mirror" | "minecraft:entity.illusioner.prepare_mirror" | "entity.iron_golem.attack" | "minecraft:entity.iron_golem.attack" | "entity.iron_golem.damage" | "minecraft:entity.iron_golem.damage" | "entity.iron_golem.death" | "minecraft:entity.iron_golem.death" | "entity.iron_golem.hurt" | "minecraft:entity.iron_golem.hurt" | "entity.iron_golem.repair" | "minecraft:entity.iron_golem.repair" | "entity.iron_golem.step" | "minecraft:entity.iron_golem.step" | "entity.item.break" | "minecraft:entity.item.break" | "entity.item.pickup" | "minecraft:entity.item.pickup" | "entity.item_frame.add_item" | "minecraft:entity.item_frame.add_item" | "entity.item_frame.break" | "minecraft:entity.item_frame.break" | "entity.item_frame.place" | "minecraft:entity.item_frame.place" | "entity.item_frame.remove_item" | "minecraft:entity.item_frame.remove_item" | "entity.item_frame.rotate_item" | "minecraft:entity.item_frame.rotate_item" | "entity.leash_knot.break" | "minecraft:entity.leash_knot.break" | "entity.leash_knot.place" | "minecraft:entity.leash_knot.place" | "entity.lightning_bolt.impact" | "minecraft:entity.lightning_bolt.impact" | "entity.lightning_bolt.thunder" | "minecraft:entity.lightning_bolt.thunder" | "entity.lingering_potion.throw" | "minecraft:entity.lingering_potion.throw" | "entity.llama.ambient" | "minecraft:entity.llama.ambient" | "entity.llama.angry" | "minecraft:entity.llama.angry" | "entity.llama.chest" | "minecraft:entity.llama.chest" | "entity.llama.death" | "minecraft:entity.llama.death" | "entity.llama.eat" | "minecraft:entity.llama.eat" | "entity.llama.hurt" | "minecraft:entity.llama.hurt" | "entity.llama.spit" | "minecraft:entity.llama.spit" | "entity.llama.step" | "minecraft:entity.llama.step" | "entity.llama.swag" | "minecraft:entity.llama.swag" | "entity.magma_cube.death" | "minecraft:entity.magma_cube.death" | "entity.magma_cube.death_small" | "minecraft:entity.magma_cube.death_small" | "entity.magma_cube.hurt" | "minecraft:entity.magma_cube.hurt" | "entity.magma_cube.hurt_small" | "minecraft:entity.magma_cube.hurt_small" | "entity.magma_cube.jump" | "minecraft:entity.magma_cube.jump" | "entity.magma_cube.squish" | "minecraft:entity.magma_cube.squish" | "entity.magma_cube.squish_small" | "minecraft:entity.magma_cube.squish_small" | "entity.minecart.inside" | "minecraft:entity.minecart.inside" | "entity.minecart.inside.underwater" | "minecraft:entity.minecart.inside.underwater" | "entity.minecart.riding" | "minecraft:entity.minecart.riding" | "entity.mooshroom.convert" | "minecraft:entity.mooshroom.convert" | "entity.mooshroom.eat" | "minecraft:entity.mooshroom.eat" | "entity.mooshroom.milk" | "minecraft:entity.mooshroom.milk" | "entity.mooshroom.shear" | "minecraft:entity.mooshroom.shear" | "entity.mooshroom.suspicious_milk" | "minecraft:entity.mooshroom.suspicious_milk" | "entity.mule.ambient" | "minecraft:entity.mule.ambient" | "entity.mule.angry" | "minecraft:entity.mule.angry" | "entity.mule.chest" | "minecraft:entity.mule.chest" | "entity.mule.death" | "minecraft:entity.mule.death" | "entity.mule.eat" | "minecraft:entity.mule.eat" | "entity.mule.hurt" | "minecraft:entity.mule.hurt" | "entity.ocelot.ambient" | "minecraft:entity.ocelot.ambient" | "entity.ocelot.death" | "minecraft:entity.ocelot.death" | "entity.ocelot.hurt" | "minecraft:entity.ocelot.hurt" | "entity.painting.break" | "minecraft:entity.painting.break" | "entity.painting.place" | "minecraft:entity.painting.place" | "entity.panda.aggressive_ambient" | "minecraft:entity.panda.aggressive_ambient" | "entity.panda.ambient" | "minecraft:entity.panda.ambient" | "entity.panda.bite" | "minecraft:entity.panda.bite" | "entity.panda.cant_breed" | "minecraft:entity.panda.cant_breed" | "entity.panda.death" | "minecraft:entity.panda.death" | "entity.panda.eat" | "minecraft:entity.panda.eat" | "entity.panda.hurt" | "minecraft:entity.panda.hurt" | "entity.panda.pre_sneeze" | "minecraft:entity.panda.pre_sneeze" | "entity.panda.sneeze" | "minecraft:entity.panda.sneeze" | "entity.panda.step" | "minecraft:entity.panda.step" | "entity.panda.worried_ambient" | "minecraft:entity.panda.worried_ambient" | "entity.parrot.ambient" | "minecraft:entity.parrot.ambient" | "entity.parrot.death" | "minecraft:entity.parrot.death" | "entity.parrot.eat" | "minecraft:entity.parrot.eat" | "entity.parrot.fly" | "minecraft:entity.parrot.fly" | "entity.parrot.hurt" | "minecraft:entity.parrot.hurt" | "entity.parrot.imitate.blaze" | "minecraft:entity.parrot.imitate.blaze" | "entity.parrot.imitate.creeper" | "minecraft:entity.parrot.imitate.creeper" | "entity.parrot.imitate.drowned" | "minecraft:entity.parrot.imitate.drowned" | "entity.parrot.imitate.elder_guardian" | "minecraft:entity.parrot.imitate.elder_guardian" | "entity.parrot.imitate.ender_dragon" | "minecraft:entity.parrot.imitate.ender_dragon" | "entity.parrot.imitate.endermite" | "minecraft:entity.parrot.imitate.endermite" | "entity.parrot.imitate.evoker" | "minecraft:entity.parrot.imitate.evoker" | "entity.parrot.imitate.ghast" | "minecraft:entity.parrot.imitate.ghast" | "entity.parrot.imitate.guardian" | "minecraft:entity.parrot.imitate.guardian" | "entity.parrot.imitate.hoglin" | "minecraft:entity.parrot.imitate.hoglin" | "entity.parrot.imitate.husk" | "minecraft:entity.parrot.imitate.husk" | "entity.parrot.imitate.illusioner" | "minecraft:entity.parrot.imitate.illusioner" | "entity.parrot.imitate.magma_cube" | "minecraft:entity.parrot.imitate.magma_cube" | "entity.parrot.imitate.phantom" | "minecraft:entity.parrot.imitate.phantom" | "entity.parrot.imitate.piglin" | "minecraft:entity.parrot.imitate.piglin" | "entity.parrot.imitate.piglin_brute" | "minecraft:entity.parrot.imitate.piglin_brute" | "entity.parrot.imitate.pillager" | "minecraft:entity.parrot.imitate.pillager" | "entity.parrot.imitate.ravager" | "minecraft:entity.parrot.imitate.ravager" | "entity.parrot.imitate.shulker" | "minecraft:entity.parrot.imitate.shulker" | "entity.parrot.imitate.silverfish" | "minecraft:entity.parrot.imitate.silverfish" | "entity.parrot.imitate.skeleton" | "minecraft:entity.parrot.imitate.skeleton" | "entity.parrot.imitate.slime" | "minecraft:entity.parrot.imitate.slime" | "entity.parrot.imitate.spider" | "minecraft:entity.parrot.imitate.spider" | "entity.parrot.imitate.stray" | "minecraft:entity.parrot.imitate.stray" | "entity.parrot.imitate.vex" | "minecraft:entity.parrot.imitate.vex" | "entity.parrot.imitate.vindicator" | "minecraft:entity.parrot.imitate.vindicator" | "entity.parrot.imitate.witch" | "minecraft:entity.parrot.imitate.witch" | "entity.parrot.imitate.wither" | "minecraft:entity.parrot.imitate.wither" | "entity.parrot.imitate.wither_skeleton" | "minecraft:entity.parrot.imitate.wither_skeleton" | "entity.parrot.imitate.zoglin" | "minecraft:entity.parrot.imitate.zoglin" | "entity.parrot.imitate.zombie" | "minecraft:entity.parrot.imitate.zombie" | "entity.parrot.imitate.zombie_villager" | "minecraft:entity.parrot.imitate.zombie_villager" | "entity.parrot.step" | "minecraft:entity.parrot.step" | "entity.phantom.ambient" | "minecraft:entity.phantom.ambient" | "entity.phantom.bite" | "minecraft:entity.phantom.bite" | "entity.phantom.death" | "minecraft:entity.phantom.death" | "entity.phantom.flap" | "minecraft:entity.phantom.flap" | "entity.phantom.hurt" | "minecraft:entity.phantom.hurt" | "entity.phantom.swoop" | "minecraft:entity.phantom.swoop" | "entity.pig.ambient" | "minecraft:entity.pig.ambient" | "entity.pig.death" | "minecraft:entity.pig.death" | "entity.pig.hurt" | "minecraft:entity.pig.hurt" | "entity.pig.saddle" | "minecraft:entity.pig.saddle" | "entity.pig.step" | "minecraft:entity.pig.step" | "entity.piglin.admiring_item" | "minecraft:entity.piglin.admiring_item" | "entity.piglin.ambient" | "minecraft:entity.piglin.ambient" | "entity.piglin.angry" | "minecraft:entity.piglin.angry" | "entity.piglin.celebrate" | "minecraft:entity.piglin.celebrate" | "entity.piglin.converted_to_zombified" | "minecraft:entity.piglin.converted_to_zombified" | "entity.piglin.death" | "minecraft:entity.piglin.death" | "entity.piglin.hurt" | "minecraft:entity.piglin.hurt" | "entity.piglin.jealous" | "minecraft:entity.piglin.jealous" | "entity.piglin.retreat" | "minecraft:entity.piglin.retreat" | "entity.piglin.step" | "minecraft:entity.piglin.step" | "entity.piglin_brute.ambient" | "minecraft:entity.piglin_brute.ambient" | "entity.piglin_brute.angry" | "minecraft:entity.piglin_brute.angry" | "entity.piglin_brute.converted_to_zombified" | "minecraft:entity.piglin_brute.converted_to_zombified" | "entity.piglin_brute.death" | "minecraft:entity.piglin_brute.death" | "entity.piglin_brute.hurt" | "minecraft:entity.piglin_brute.hurt" | "entity.piglin_brute.step" | "minecraft:entity.piglin_brute.step" | "entity.pillager.ambient" | "minecraft:entity.pillager.ambient" | "entity.pillager.celebrate" | "minecraft:entity.pillager.celebrate" | "entity.pillager.death" | "minecraft:entity.pillager.death" | "entity.pillager.hurt" | "minecraft:entity.pillager.hurt" | "entity.player.attack.crit" | "minecraft:entity.player.attack.crit" | "entity.player.attack.knockback" | "minecraft:entity.player.attack.knockback" | "entity.player.attack.nodamage" | "minecraft:entity.player.attack.nodamage" | "entity.player.attack.strong" | "minecraft:entity.player.attack.strong" | "entity.player.attack.sweep" | "minecraft:entity.player.attack.sweep" | "entity.player.attack.weak" | "minecraft:entity.player.attack.weak" | "entity.player.big_fall" | "minecraft:entity.player.big_fall" | "entity.player.breath" | "minecraft:entity.player.breath" | "entity.player.burp" | "minecraft:entity.player.burp" | "entity.player.death" | "minecraft:entity.player.death" | "entity.player.hurt" | "minecraft:entity.player.hurt" | "entity.player.hurt_drown" | "minecraft:entity.player.hurt_drown" | "entity.player.hurt_freeze" | "minecraft:entity.player.hurt_freeze" | "entity.player.hurt_on_fire" | "minecraft:entity.player.hurt_on_fire" | "entity.player.hurt_sweet_berry_bush" | "minecraft:entity.player.hurt_sweet_berry_bush" | "entity.player.levelup" | "minecraft:entity.player.levelup" | "entity.player.small_fall" | "minecraft:entity.player.small_fall" | "entity.player.splash" | "minecraft:entity.player.splash" | "entity.player.splash.high_speed" | "minecraft:entity.player.splash.high_speed" | "entity.player.swim" | "minecraft:entity.player.swim" | "entity.polar_bear.ambient" | "minecraft:entity.polar_bear.ambient" | "entity.polar_bear.ambient_baby" | "minecraft:entity.polar_bear.ambient_baby" | "entity.polar_bear.death" | "minecraft:entity.polar_bear.death" | "entity.polar_bear.hurt" | "minecraft:entity.polar_bear.hurt" | "entity.polar_bear.step" | "minecraft:entity.polar_bear.step" | "entity.polar_bear.warning" | "minecraft:entity.polar_bear.warning" | "entity.puffer_fish.ambient" | "minecraft:entity.puffer_fish.ambient" | "entity.puffer_fish.blow_out" | "minecraft:entity.puffer_fish.blow_out" | "entity.puffer_fish.blow_up" | "minecraft:entity.puffer_fish.blow_up" | "entity.puffer_fish.death" | "minecraft:entity.puffer_fish.death" | "entity.puffer_fish.flop" | "minecraft:entity.puffer_fish.flop" | "entity.puffer_fish.hurt" | "minecraft:entity.puffer_fish.hurt" | "entity.puffer_fish.sting" | "minecraft:entity.puffer_fish.sting" | "entity.rabbit.ambient" | "minecraft:entity.rabbit.ambient" | "entity.rabbit.attack" | "minecraft:entity.rabbit.attack" | "entity.rabbit.death" | "minecraft:entity.rabbit.death" | "entity.rabbit.hurt" | "minecraft:entity.rabbit.hurt" | "entity.rabbit.jump" | "minecraft:entity.rabbit.jump" | "entity.ravager.ambient" | "minecraft:entity.ravager.ambient" | "entity.ravager.attack" | "minecraft:entity.ravager.attack" | "entity.ravager.celebrate" | "minecraft:entity.ravager.celebrate" | "entity.ravager.death" | "minecraft:entity.ravager.death" | "entity.ravager.hurt" | "minecraft:entity.ravager.hurt" | "entity.ravager.roar" | "minecraft:entity.ravager.roar" | "entity.ravager.step" | "minecraft:entity.ravager.step" | "entity.ravager.stunned" | "minecraft:entity.ravager.stunned" | "entity.salmon.ambient" | "minecraft:entity.salmon.ambient" | "entity.salmon.death" | "minecraft:entity.salmon.death" | "entity.salmon.flop" | "minecraft:entity.salmon.flop" | "entity.salmon.hurt" | "minecraft:entity.salmon.hurt" | "entity.sheep.ambient" | "minecraft:entity.sheep.ambient" | "entity.sheep.death" | "minecraft:entity.sheep.death" | "entity.sheep.hurt" | "minecraft:entity.sheep.hurt" | "entity.sheep.shear" | "minecraft:entity.sheep.shear" | "entity.sheep.step" | "minecraft:entity.sheep.step" | "entity.shulker.ambient" | "minecraft:entity.shulker.ambient" | "entity.shulker.close" | "minecraft:entity.shulker.close" | "entity.shulker.death" | "minecraft:entity.shulker.death" | "entity.shulker.hurt" | "minecraft:entity.shulker.hurt" | "entity.shulker.hurt_closed" | "minecraft:entity.shulker.hurt_closed" | "entity.shulker.open" | "minecraft:entity.shulker.open" | "entity.shulker.shoot" | "minecraft:entity.shulker.shoot" | "entity.shulker.teleport" | "minecraft:entity.shulker.teleport" | "entity.shulker_bullet.hit" | "minecraft:entity.shulker_bullet.hit" | "entity.shulker_bullet.hurt" | "minecraft:entity.shulker_bullet.hurt" | "entity.silverfish.ambient" | "minecraft:entity.silverfish.ambient" | "entity.silverfish.death" | "minecraft:entity.silverfish.death" | "entity.silverfish.hurt" | "minecraft:entity.silverfish.hurt" | "entity.silverfish.step" | "minecraft:entity.silverfish.step" | "entity.skeleton.ambient" | "minecraft:entity.skeleton.ambient" | "entity.skeleton.converted_to_stray" | "minecraft:entity.skeleton.converted_to_stray" | "entity.skeleton.death" | "minecraft:entity.skeleton.death" | "entity.skeleton.hurt" | "minecraft:entity.skeleton.hurt" | "entity.skeleton.shoot" | "minecraft:entity.skeleton.shoot" | "entity.skeleton.step" | "minecraft:entity.skeleton.step" | "entity.skeleton_horse.ambient" | "minecraft:entity.skeleton_horse.ambient" | "entity.skeleton_horse.ambient_water" | "minecraft:entity.skeleton_horse.ambient_water" | "entity.skeleton_horse.death" | "minecraft:entity.skeleton_horse.death" | "entity.skeleton_horse.gallop_water" | "minecraft:entity.skeleton_horse.gallop_water" | "entity.skeleton_horse.hurt" | "minecraft:entity.skeleton_horse.hurt" | "entity.skeleton_horse.jump_water" | "minecraft:entity.skeleton_horse.jump_water" | "entity.skeleton_horse.step_water" | "minecraft:entity.skeleton_horse.step_water" | "entity.skeleton_horse.swim" | "minecraft:entity.skeleton_horse.swim" | "entity.slime.attack" | "minecraft:entity.slime.attack" | "entity.slime.death" | "minecraft:entity.slime.death" | "entity.slime.death_small" | "minecraft:entity.slime.death_small" | "entity.slime.hurt" | "minecraft:entity.slime.hurt" | "entity.slime.hurt_small" | "minecraft:entity.slime.hurt_small" | "entity.slime.jump" | "minecraft:entity.slime.jump" | "entity.slime.jump_small" | "minecraft:entity.slime.jump_small" | "entity.slime.squish" | "minecraft:entity.slime.squish" | "entity.slime.squish_small" | "minecraft:entity.slime.squish_small" | "entity.snow_golem.ambient" | "minecraft:entity.snow_golem.ambient" | "entity.snow_golem.death" | "minecraft:entity.snow_golem.death" | "entity.snow_golem.hurt" | "minecraft:entity.snow_golem.hurt" | "entity.snow_golem.shear" | "minecraft:entity.snow_golem.shear" | "entity.snow_golem.shoot" | "minecraft:entity.snow_golem.shoot" | "entity.snowball.throw" | "minecraft:entity.snowball.throw" | "entity.spider.ambient" | "minecraft:entity.spider.ambient" | "entity.spider.death" | "minecraft:entity.spider.death" | "entity.spider.hurt" | "minecraft:entity.spider.hurt" | "entity.spider.step" | "minecraft:entity.spider.step" | "entity.splash_potion.break" | "minecraft:entity.splash_potion.break" | "entity.splash_potion.throw" | "minecraft:entity.splash_potion.throw" | "entity.squid.ambient" | "minecraft:entity.squid.ambient" | "entity.squid.death" | "minecraft:entity.squid.death" | "entity.squid.hurt" | "minecraft:entity.squid.hurt" | "entity.squid.squirt" | "minecraft:entity.squid.squirt" | "entity.stray.ambient" | "minecraft:entity.stray.ambient" | "entity.stray.death" | "minecraft:entity.stray.death" | "entity.stray.hurt" | "minecraft:entity.stray.hurt" | "entity.stray.step" | "minecraft:entity.stray.step" | "entity.strider.ambient" | "minecraft:entity.strider.ambient" | "entity.strider.death" | "minecraft:entity.strider.death" | "entity.strider.eat" | "minecraft:entity.strider.eat" | "entity.strider.happy" | "minecraft:entity.strider.happy" | "entity.strider.hurt" | "minecraft:entity.strider.hurt" | "entity.strider.retreat" | "minecraft:entity.strider.retreat" | "entity.strider.saddle" | "minecraft:entity.strider.saddle" | "entity.strider.step" | "minecraft:entity.strider.step" | "entity.strider.step_lava" | "minecraft:entity.strider.step_lava" | "entity.tnt.primed" | "minecraft:entity.tnt.primed" | "entity.tropical_fish.ambient" | "minecraft:entity.tropical_fish.ambient" | "entity.tropical_fish.death" | "minecraft:entity.tropical_fish.death" | "entity.tropical_fish.flop" | "minecraft:entity.tropical_fish.flop" | "entity.tropical_fish.hurt" | "minecraft:entity.tropical_fish.hurt" | "entity.turtle.ambient_land" | "minecraft:entity.turtle.ambient_land" | "entity.turtle.death" | "minecraft:entity.turtle.death" | "entity.turtle.death_baby" | "minecraft:entity.turtle.death_baby" | "entity.turtle.egg_break" | "minecraft:entity.turtle.egg_break" | "entity.turtle.egg_crack" | "minecraft:entity.turtle.egg_crack" | "entity.turtle.egg_hatch" | "minecraft:entity.turtle.egg_hatch" | "entity.turtle.hurt" | "minecraft:entity.turtle.hurt" | "entity.turtle.hurt_baby" | "minecraft:entity.turtle.hurt_baby" | "entity.turtle.lay_egg" | "minecraft:entity.turtle.lay_egg" | "entity.turtle.shamble" | "minecraft:entity.turtle.shamble" | "entity.turtle.shamble_baby" | "minecraft:entity.turtle.shamble_baby" | "entity.turtle.swim" | "minecraft:entity.turtle.swim" | "entity.vex.ambient" | "minecraft:entity.vex.ambient" | "entity.vex.charge" | "minecraft:entity.vex.charge" | "entity.vex.death" | "minecraft:entity.vex.death" | "entity.vex.hurt" | "minecraft:entity.vex.hurt" | "entity.villager.ambient" | "minecraft:entity.villager.ambient" | "entity.villager.celebrate" | "minecraft:entity.villager.celebrate" | "entity.villager.death" | "minecraft:entity.villager.death" | "entity.villager.hurt" | "minecraft:entity.villager.hurt" | "entity.villager.no" | "minecraft:entity.villager.no" | "entity.villager.trade" | "minecraft:entity.villager.trade" | "entity.villager.work_armorer" | "minecraft:entity.villager.work_armorer" | "entity.villager.work_butcher" | "minecraft:entity.villager.work_butcher" | "entity.villager.work_cartographer" | "minecraft:entity.villager.work_cartographer" | "entity.villager.work_cleric" | "minecraft:entity.villager.work_cleric" | "entity.villager.work_farmer" | "minecraft:entity.villager.work_farmer" | "entity.villager.work_fisherman" | "minecraft:entity.villager.work_fisherman" | "entity.villager.work_fletcher" | "minecraft:entity.villager.work_fletcher" | "entity.villager.work_leatherworker" | "minecraft:entity.villager.work_leatherworker" | "entity.villager.work_librarian" | "minecraft:entity.villager.work_librarian" | "entity.villager.work_mason" | "minecraft:entity.villager.work_mason" | "entity.villager.work_shepherd" | "minecraft:entity.villager.work_shepherd" | "entity.villager.work_toolsmith" | "minecraft:entity.villager.work_toolsmith" | "entity.villager.work_weaponsmith" | "minecraft:entity.villager.work_weaponsmith" | "entity.villager.yes" | "minecraft:entity.villager.yes" | "entity.vindicator.ambient" | "minecraft:entity.vindicator.ambient" | "entity.vindicator.celebrate" | "minecraft:entity.vindicator.celebrate" | "entity.vindicator.death" | "minecraft:entity.vindicator.death" | "entity.vindicator.hurt" | "minecraft:entity.vindicator.hurt" | "entity.wandering_trader.ambient" | "minecraft:entity.wandering_trader.ambient" | "entity.wandering_trader.death" | "minecraft:entity.wandering_trader.death" | "entity.wandering_trader.disappeared" | "minecraft:entity.wandering_trader.disappeared" | "entity.wandering_trader.drink_milk" | "minecraft:entity.wandering_trader.drink_milk" | "entity.wandering_trader.drink_potion" | "minecraft:entity.wandering_trader.drink_potion" | "entity.wandering_trader.hurt" | "minecraft:entity.wandering_trader.hurt" | "entity.wandering_trader.no" | "minecraft:entity.wandering_trader.no" | "entity.wandering_trader.reappeared" | "minecraft:entity.wandering_trader.reappeared" | "entity.wandering_trader.trade" | "minecraft:entity.wandering_trader.trade" | "entity.wandering_trader.yes" | "minecraft:entity.wandering_trader.yes" | "entity.witch.ambient" | "minecraft:entity.witch.ambient" | "entity.witch.celebrate" | "minecraft:entity.witch.celebrate" | "entity.witch.death" | "minecraft:entity.witch.death" | "entity.witch.drink" | "minecraft:entity.witch.drink" | "entity.witch.hurt" | "minecraft:entity.witch.hurt" | "entity.witch.throw" | "minecraft:entity.witch.throw" | "entity.wither.ambient" | "minecraft:entity.wither.ambient" | "entity.wither.break_block" | "minecraft:entity.wither.break_block" | "entity.wither.death" | "minecraft:entity.wither.death" | "entity.wither.hurt" | "minecraft:entity.wither.hurt" | "entity.wither.shoot" | "minecraft:entity.wither.shoot" | "entity.wither.spawn" | "minecraft:entity.wither.spawn" | "entity.wither_skeleton.ambient" | "minecraft:entity.wither_skeleton.ambient" | "entity.wither_skeleton.death" | "minecraft:entity.wither_skeleton.death" | "entity.wither_skeleton.hurt" | "minecraft:entity.wither_skeleton.hurt" | "entity.wither_skeleton.step" | "minecraft:entity.wither_skeleton.step" | "entity.wolf.ambient" | "minecraft:entity.wolf.ambient" | "entity.wolf.death" | "minecraft:entity.wolf.death" | "entity.wolf.growl" | "minecraft:entity.wolf.growl" | "entity.wolf.howl" | "minecraft:entity.wolf.howl" | "entity.wolf.hurt" | "minecraft:entity.wolf.hurt" | "entity.wolf.pant" | "minecraft:entity.wolf.pant" | "entity.wolf.shake" | "minecraft:entity.wolf.shake" | "entity.wolf.step" | "minecraft:entity.wolf.step" | "entity.wolf.whine" | "minecraft:entity.wolf.whine" | "entity.zoglin.ambient" | "minecraft:entity.zoglin.ambient" | "entity.zoglin.angry" | "minecraft:entity.zoglin.angry" | "entity.zoglin.attack" | "minecraft:entity.zoglin.attack" | "entity.zoglin.death" | "minecraft:entity.zoglin.death" | "entity.zoglin.hurt" | "minecraft:entity.zoglin.hurt" | "entity.zoglin.step" | "minecraft:entity.zoglin.step" | "entity.zombie.ambient" | "minecraft:entity.zombie.ambient" | "entity.zombie.attack_iron_door" | "minecraft:entity.zombie.attack_iron_door" | "entity.zombie.attack_wooden_door" | "minecraft:entity.zombie.attack_wooden_door" | "entity.zombie.break_wooden_door" | "minecraft:entity.zombie.break_wooden_door" | "entity.zombie.converted_to_drowned" | "minecraft:entity.zombie.converted_to_drowned" | "entity.zombie.death" | "minecraft:entity.zombie.death" | "entity.zombie.destroy_egg" | "minecraft:entity.zombie.destroy_egg" | "entity.zombie.hurt" | "minecraft:entity.zombie.hurt" | "entity.zombie.infect" | "minecraft:entity.zombie.infect" | "entity.zombie.step" | "minecraft:entity.zombie.step" | "entity.zombie_horse.ambient" | "minecraft:entity.zombie_horse.ambient" | "entity.zombie_horse.death" | "minecraft:entity.zombie_horse.death" | "entity.zombie_horse.hurt" | "minecraft:entity.zombie_horse.hurt" | "entity.zombie_villager.ambient" | "minecraft:entity.zombie_villager.ambient" | "entity.zombie_villager.converted" | "minecraft:entity.zombie_villager.converted" | "entity.zombie_villager.cure" | "minecraft:entity.zombie_villager.cure" | "entity.zombie_villager.death" | "minecraft:entity.zombie_villager.death" | "entity.zombie_villager.hurt" | "minecraft:entity.zombie_villager.hurt" | "entity.zombie_villager.step" | "minecraft:entity.zombie_villager.step" | "entity.zombified_piglin.ambient" | "minecraft:entity.zombified_piglin.ambient" | "entity.zombified_piglin.angry" | "minecraft:entity.zombified_piglin.angry" | "entity.zombified_piglin.death" | "minecraft:entity.zombified_piglin.death" | "entity.zombified_piglin.hurt" | "minecraft:entity.zombified_piglin.hurt" | "event.raid.horn" | "minecraft:event.raid.horn" | "item.armor.equip_chain" | "minecraft:item.armor.equip_chain" | "item.armor.equip_diamond" | "minecraft:item.armor.equip_diamond" | "item.armor.equip_elytra" | "minecraft:item.armor.equip_elytra" | "item.armor.equip_generic" | "minecraft:item.armor.equip_generic" | "item.armor.equip_gold" | "minecraft:item.armor.equip_gold" | "item.armor.equip_iron" | "minecraft:item.armor.equip_iron" | "item.armor.equip_leather" | "minecraft:item.armor.equip_leather" | "item.armor.equip_netherite" | "minecraft:item.armor.equip_netherite" | "item.armor.equip_turtle" | "minecraft:item.armor.equip_turtle" | "item.axe.scrape" | "minecraft:item.axe.scrape" | "item.axe.strip" | "minecraft:item.axe.strip" | "item.axe.wax_off" | "minecraft:item.axe.wax_off" | "item.bone_meal.use" | "minecraft:item.bone_meal.use" | "item.book.page_turn" | "minecraft:item.book.page_turn" | "item.book.put" | "minecraft:item.book.put" | "item.bottle.empty" | "minecraft:item.bottle.empty" | "item.bottle.fill" | "minecraft:item.bottle.fill" | "item.bottle.fill_dragonbreath" | "minecraft:item.bottle.fill_dragonbreath" | "item.bucket.empty" | "minecraft:item.bucket.empty" | "item.bucket.empty_axolotl" | "minecraft:item.bucket.empty_axolotl" | "item.bucket.empty_fish" | "minecraft:item.bucket.empty_fish" | "item.bucket.empty_lava" | "minecraft:item.bucket.empty_lava" | "item.bucket.empty_powder_snow" | "minecraft:item.bucket.empty_powder_snow" | "item.bucket.fill" | "minecraft:item.bucket.fill" | "item.bucket.fill_axolotl" | "minecraft:item.bucket.fill_axolotl" | "item.bucket.fill_fish" | "minecraft:item.bucket.fill_fish" | "item.bucket.fill_lava" | "minecraft:item.bucket.fill_lava" | "item.bucket.fill_powder_snow" | "minecraft:item.bucket.fill_powder_snow" | "item.bundle.drop_contents" | "minecraft:item.bundle.drop_contents" | "item.bundle.insert" | "minecraft:item.bundle.insert" | "item.bundle.remove_one" | "minecraft:item.bundle.remove_one" | "item.chorus_fruit.teleport" | "minecraft:item.chorus_fruit.teleport" | "item.crop.plant" | "minecraft:item.crop.plant" | "item.crossbow.hit" | "minecraft:item.crossbow.hit" | "item.crossbow.loading_end" | "minecraft:item.crossbow.loading_end" | "item.crossbow.loading_middle" | "minecraft:item.crossbow.loading_middle" | "item.crossbow.loading_start" | "minecraft:item.crossbow.loading_start" | "item.crossbow.quick_charge_1" | "minecraft:item.crossbow.quick_charge_1" | "item.crossbow.quick_charge_2" | "minecraft:item.crossbow.quick_charge_2" | "item.crossbow.quick_charge_3" | "minecraft:item.crossbow.quick_charge_3" | "item.crossbow.shoot" | "minecraft:item.crossbow.shoot" | "item.dye.use" | "minecraft:item.dye.use" | "item.elytra.flying" | "minecraft:item.elytra.flying" | "item.firecharge.use" | "minecraft:item.firecharge.use" | "item.flintandsteel.use" | "minecraft:item.flintandsteel.use" | "item.glow_ink_sac.use" | "minecraft:item.glow_ink_sac.use" | "item.hoe.till" | "minecraft:item.hoe.till" | "item.honey_bottle.drink" | "minecraft:item.honey_bottle.drink" | "item.honeycomb.wax_on" | "minecraft:item.honeycomb.wax_on" | "item.ink_sac.use" | "minecraft:item.ink_sac.use" | "item.lodestone_compass.lock" | "minecraft:item.lodestone_compass.lock" | "item.nether_wart.plant" | "minecraft:item.nether_wart.plant" | "item.shield.block" | "minecraft:item.shield.block" | "item.shield.break" | "minecraft:item.shield.break" | "item.shovel.flatten" | "minecraft:item.shovel.flatten" | "item.spyglass.stop_using" | "minecraft:item.spyglass.stop_using" | "item.spyglass.use" | "minecraft:item.spyglass.use" | "item.totem.use" | "minecraft:item.totem.use" | "item.trident.hit" | "minecraft:item.trident.hit" | "item.trident.hit_ground" | "minecraft:item.trident.hit_ground" | "item.trident.return" | "minecraft:item.trident.return" | "item.trident.riptide_1" | "minecraft:item.trident.riptide_1" | "item.trident.riptide_2" | "minecraft:item.trident.riptide_2" | "item.trident.riptide_3" | "minecraft:item.trident.riptide_3" | "item.trident.throw" | "minecraft:item.trident.throw" | "item.trident.thunder" | "minecraft:item.trident.thunder" | "music.creative" | "minecraft:music.creative" | "music.credits" | "minecraft:music.credits" | "music.dragon" | "minecraft:music.dragon" | "music.end" | "minecraft:music.end" | "music.game" | "minecraft:music.game" | "music.menu" | "minecraft:music.menu" | "music.nether.basalt_deltas" | "minecraft:music.nether.basalt_deltas" | "music.nether.crimson_forest" | "minecraft:music.nether.crimson_forest" | "music.nether.nether_wastes" | "minecraft:music.nether.nether_wastes" | "music.nether.soul_sand_valley" | "minecraft:music.nether.soul_sand_valley" | "music.nether.warped_forest" | "minecraft:music.nether.warped_forest" | "music.overworld.dripstone_caves" | "minecraft:music.overworld.dripstone_caves" | "music.overworld.frozen_peaks" | "minecraft:music.overworld.frozen_peaks" | "music.overworld.grove" | "minecraft:music.overworld.grove" | "music.overworld.jagged_peaks" | "minecraft:music.overworld.jagged_peaks" | "music.overworld.lush_caves" | "minecraft:music.overworld.lush_caves" | "music.overworld.meadow" | "minecraft:music.overworld.meadow" | "music.overworld.snowy_slopes" | "minecraft:music.overworld.snowy_slopes" | "music.overworld.stony_peaks" | "minecraft:music.overworld.stony_peaks" | "music.under_water" | "minecraft:music.under_water" | "music_disc.11" | "minecraft:music_disc.11" | "music_disc.13" | "minecraft:music_disc.13" | "music_disc.blocks" | "minecraft:music_disc.blocks" | "music_disc.cat" | "minecraft:music_disc.cat" | "music_disc.chirp" | "minecraft:music_disc.chirp" | "music_disc.far" | "minecraft:music_disc.far" | "music_disc.mall" | "minecraft:music_disc.mall" | "music_disc.mellohi" | "minecraft:music_disc.mellohi" | "music_disc.otherside" | "minecraft:music_disc.otherside" | "music_disc.pigstep" | "minecraft:music_disc.pigstep" | "music_disc.stal" | "minecraft:music_disc.stal" | "music_disc.strad" | "minecraft:music_disc.strad" | "music_disc.wait" | "minecraft:music_disc.wait" | "music_disc.ward" | "minecraft:music_disc.ward" | "particle.soul_escape" | "minecraft:particle.soul_escape" | "ui.button.click" | "minecraft:ui.button.click" | "ui.cartography_table.take_result" | "minecraft:ui.cartography_table.take_result" | "ui.loom.select_pattern" | "minecraft:ui.loom.select_pattern" | "ui.loom.take_result" | "minecraft:ui.loom.take_result" | "ui.stonecutter.select_recipe" | "minecraft:ui.stonecutter.select_recipe" | "ui.stonecutter.take_result" | "minecraft:ui.stonecutter.take_result" | "ui.toast.challenge_complete" | "minecraft:ui.toast.challenge_complete" | "ui.toast.in" | "minecraft:ui.toast.in" | "ui.toast.out" | "minecraft:ui.toast.out" | "weather.rain" | "minecraft:weather.rain" | "weather.rain.above" | "minecraft:weather.rain.above" | "patchouli:book_flip" | "patchouli:book_open";
    type Fluid = "create:chocolate" | "create:flowing_chocolate" | "create:flowing_honey" | "create:flowing_potion" | "create:flowing_tea" | "create:honey" | "create:potion" | "create:tea" | "empty" | "minecraft:empty" | "flowing_lava" | "minecraft:flowing_lava" | "flowing_milk" | "minecraft:flowing_milk" | "flowing_water" | "minecraft:flowing_water" | "lava" | "minecraft:lava" | "milk" | "minecraft:milk" | "water" | "minecraft:water";
    type MobEffect = "botania:allure" | "botania:bloodthirst" | "botania:clear" | "botania:emptiness" | "botania:feather_feet" | "botania:soul_cross" | "absorption" | "minecraft:absorption" | "bad_omen" | "minecraft:bad_omen" | "blindness" | "minecraft:blindness" | "conduit_power" | "minecraft:conduit_power" | "dolphins_grace" | "minecraft:dolphins_grace" | "fire_resistance" | "minecraft:fire_resistance" | "glowing" | "minecraft:glowing" | "haste" | "minecraft:haste" | "health_boost" | "minecraft:health_boost" | "hero_of_the_village" | "minecraft:hero_of_the_village" | "hunger" | "minecraft:hunger" | "instant_damage" | "minecraft:instant_damage" | "instant_health" | "minecraft:instant_health" | "invisibility" | "minecraft:invisibility" | "jump_boost" | "minecraft:jump_boost" | "levitation" | "minecraft:levitation" | "luck" | "minecraft:luck" | "mining_fatigue" | "minecraft:mining_fatigue" | "nausea" | "minecraft:nausea" | "night_vision" | "minecraft:night_vision" | "poison" | "minecraft:poison" | "regeneration" | "minecraft:regeneration" | "resistance" | "minecraft:resistance" | "saturation" | "minecraft:saturation" | "slow_falling" | "minecraft:slow_falling" | "slowness" | "minecraft:slowness" | "speed" | "minecraft:speed" | "strength" | "minecraft:strength" | "unluck" | "minecraft:unluck" | "water_breathing" | "minecraft:water_breathing" | "weakness" | "minecraft:weakness" | "wither" | "minecraft:wither";
    type Block = "ae2:16k_crafting_storage" | "ae2:1k_crafting_storage" | "ae2:256k_crafting_storage" | "ae2:4k_crafting_storage" | "ae2:64k_crafting_storage" | "ae2:cable_bus" | "ae2:cell_workbench" | "ae2:charger" | "ae2:chest" | "ae2:chiseled_quartz_block" | "ae2:chiseled_quartz_slab" | "ae2:chiseled_quartz_stairs" | "ae2:chiseled_quartz_wall" | "ae2:condenser" | "ae2:controller" | "ae2:crafting_accelerator" | "ae2:crafting_monitor" | "ae2:crafting_unit" | "ae2:creative_energy_cell" | "ae2:debug_chunk_loader" | "ae2:debug_cube_gen" | "ae2:debug_energy_gen" | "ae2:debug_item_gen" | "ae2:debug_phantom_node" | "ae2:deepslate_quartz_ore" | "ae2:dense_energy_cell" | "ae2:drive" | "ae2:energy_acceptor" | "ae2:energy_cell" | "ae2:fluix_block" | "ae2:fluix_slab" | "ae2:fluix_stairs" | "ae2:fluix_wall" | "ae2:inscriber" | "ae2:interface" | "ae2:io_port" | "ae2:light_detector" | "ae2:matrix_frame" | "ae2:molecular_assembler" | "ae2:paint" | "ae2:pattern_provider" | "ae2:quantum_link" | "ae2:quantum_ring" | "ae2:quartz_block" | "ae2:quartz_fixture" | "ae2:quartz_glass" | "ae2:quartz_growth_accelerator" | "ae2:quartz_ore" | "ae2:quartz_pillar" | "ae2:quartz_pillar_slab" | "ae2:quartz_pillar_stairs" | "ae2:quartz_pillar_wall" | "ae2:quartz_slab" | "ae2:quartz_stairs" | "ae2:quartz_vibrant_glass" | "ae2:quartz_wall" | "ae2:security_station" | "ae2:sky_compass" | "ae2:sky_stone_block" | "ae2:sky_stone_brick" | "ae2:sky_stone_brick_slab" | "ae2:sky_stone_brick_stairs" | "ae2:sky_stone_brick_wall" | "ae2:sky_stone_chest" | "ae2:sky_stone_slab" | "ae2:sky_stone_small_brick" | "ae2:sky_stone_small_brick_slab" | "ae2:sky_stone_small_brick_stairs" | "ae2:sky_stone_small_brick_wall" | "ae2:sky_stone_stairs" | "ae2:sky_stone_tank" | "ae2:sky_stone_wall" | "ae2:smooth_sky_stone_block" | "ae2:smooth_sky_stone_chest" | "ae2:smooth_sky_stone_slab" | "ae2:smooth_sky_stone_stairs" | "ae2:smooth_sky_stone_wall" | "ae2:spatial_anchor" | "ae2:spatial_io_port" | "ae2:spatial_pylon" | "ae2:tiny_tnt" | "ae2:vibration_chamber" | "ae2:wireless_access_point" | "botania:abstruse_platform" | "botania:agricarnation" | "botania:agricarnation_chibi" | "botania:alchemy_catalyst" | "botania:alfheim_portal" | "botania:animated_torch" | "botania:apothecary_default" | "botania:apothecary_desert" | "botania:apothecary_forest" | "botania:apothecary_fungal" | "botania:apothecary_mesa" | "botania:apothecary_mossy" | "botania:apothecary_mountain" | "botania:apothecary_plains" | "botania:apothecary_swamp" | "botania:apothecary_taiga" | "botania:avatar" | "botania:azulejo_0" | "botania:azulejo_1" | "botania:azulejo_10" | "botania:azulejo_11" | "botania:azulejo_12" | "botania:azulejo_13" | "botania:azulejo_14" | "botania:azulejo_15" | "botania:azulejo_2" | "botania:azulejo_3" | "botania:azulejo_4" | "botania:azulejo_5" | "botania:azulejo_6" | "botania:azulejo_7" | "botania:azulejo_8" | "botania:azulejo_9" | "botania:bellethorn" | "botania:bellethorn_chibi" | "botania:bellows" | "botania:bergamute" | "botania:bifrost" | "botania:bifrost_pane" | "botania:bifrost_perm" | "botania:black_buried_petals" | "botania:black_double_flower" | "botania:black_floating_flower" | "botania:black_mushroom" | "botania:black_mystical_flower" | "botania:black_pavement" | "botania:black_pavement_slab" | "botania:black_pavement_stairs" | "botania:black_petal_block" | "botania:black_shiny_flower" | "botania:blaze_block" | "botania:blaze_quartz" | "botania:blaze_quartz_pillar" | "botania:blaze_quartz_slab" | "botania:blaze_quartz_stairs" | "botania:blue_buried_petals" | "botania:blue_double_flower" | "botania:blue_floating_flower" | "botania:blue_mushroom" | "botania:blue_mystical_flower" | "botania:blue_pavement" | "botania:blue_pavement_slab" | "botania:blue_pavement_stairs" | "botania:blue_petal_block" | "botania:blue_shiny_flower" | "botania:brewery" | "botania:brown_buried_petals" | "botania:brown_double_flower" | "botania:brown_floating_flower" | "botania:brown_mushroom" | "botania:brown_mystical_flower" | "botania:brown_petal_block" | "botania:brown_shiny_flower" | "botania:bubbell" | "botania:bubbell_chibi" | "botania:cacophonium_block" | "botania:cell_block" | "botania:chiseled_blaze_quartz" | "botania:chiseled_dark_quartz" | "botania:chiseled_elf_quartz" | "botania:chiseled_lavender_quartz" | "botania:chiseled_livingrock_bricks" | "botania:chiseled_mana_quartz" | "botania:chiseled_metamorphic_desert_bricks" | "botania:chiseled_metamorphic_forest_bricks" | "botania:chiseled_metamorphic_fungal_bricks" | "botania:chiseled_metamorphic_mesa_bricks" | "botania:chiseled_metamorphic_mountain_bricks" | "botania:chiseled_metamorphic_plains_bricks" | "botania:chiseled_metamorphic_swamp_bricks" | "botania:chiseled_metamorphic_taiga_bricks" | "botania:chiseled_red_quartz" | "botania:chiseled_sunny_quartz" | "botania:clayconia" | "botania:clayconia_chibi" | "botania:cocoon" | "botania:conjuration_catalyst" | "botania:corporea_block" | "botania:corporea_brick" | "botania:corporea_brick_slab" | "botania:corporea_brick_stairs" | "botania:corporea_brick_wall" | "botania:corporea_crystal_cube" | "botania:corporea_funnel" | "botania:corporea_index" | "botania:corporea_interceptor" | "botania:corporea_retainer" | "botania:corporea_slab" | "botania:corporea_stairs" | "botania:cracked_livingrock_bricks" | "botania:crafty_crate" | "botania:creative_pool" | "botania:cyan_buried_petals" | "botania:cyan_double_flower" | "botania:cyan_floating_flower" | "botania:cyan_mushroom" | "botania:cyan_mystical_flower" | "botania:cyan_petal_block" | "botania:cyan_shiny_flower" | "botania:daffomill" | "botania:dandelifeon" | "botania:dark_quartz" | "botania:dark_quartz_pillar" | "botania:dark_quartz_slab" | "botania:dark_quartz_stairs" | "botania:daybloom_motif" | "botania:detector_light_relay" | "botania:diluted_pool" | "botania:dragonstone_block" | "botania:dreadthorn" | "botania:dreamwood" | "botania:dreamwood_fence" | "botania:dreamwood_fence_gate" | "botania:dreamwood_log" | "botania:dreamwood_planks" | "botania:dreamwood_planks_slab" | "botania:dreamwood_planks_stairs" | "botania:dreamwood_slab" | "botania:dreamwood_stairs" | "botania:dreamwood_wall" | "botania:drum_canopy" | "botania:drum_gathering" | "botania:drum_wild" | "botania:dry_grass" | "botania:elementium_block" | "botania:elf_glass" | "botania:elf_glass_pane" | "botania:elf_quartz" | "botania:elf_quartz_pillar" | "botania:elf_quartz_slab" | "botania:elf_quartz_stairs" | "botania:elven_spreader" | "botania:enchanted_soil" | "botania:enchanter" | "botania:ender_eye_block" | "botania:endoflame" | "botania:entropinnyum" | "botania:exoflame" | "botania:fabulous_pool" | "botania:fake_air" | "botania:fallen_kanade" | "botania:fel_pumpkin" | "botania:floating_agricarnation" | "botania:floating_agricarnation_chibi" | "botania:floating_bellethorn" | "botania:floating_bellethorn_chibi" | "botania:floating_bergamute" | "botania:floating_bubbell" | "botania:floating_bubbell_chibi" | "botania:floating_clayconia" | "botania:floating_clayconia_chibi" | "botania:floating_daffomill" | "botania:floating_dandelifeon" | "botania:floating_dreadthorn" | "botania:floating_endoflame" | "botania:floating_entropinnyum" | "botania:floating_exoflame" | "botania:floating_fallen_kanade" | "botania:floating_gourmaryllis" | "botania:floating_heisei_dream" | "botania:floating_hopperhock" | "botania:floating_hopperhock_chibi" | "botania:floating_hyacidus" | "botania:floating_hydroangeas" | "botania:floating_jaded_amaranthus" | "botania:floating_jiyuulia" | "botania:floating_jiyuulia_chibi" | "botania:floating_kekimurus" | "botania:floating_labellia" | "botania:floating_loonium" | "botania:floating_manastar" | "botania:floating_marimorphosis" | "botania:floating_marimorphosis_chibi" | "botania:floating_medumone" | "botania:floating_munchdew" | "botania:floating_narslimmus" | "botania:floating_orechid" | "botania:floating_orechid_ignem" | "botania:floating_pollidisiac" | "botania:floating_pure_daisy" | "botania:floating_rafflowsia" | "botania:floating_rannuncarpus" | "botania:floating_rannuncarpus_chibi" | "botania:floating_rosa_arcana" | "botania:floating_shulk_me_not" | "botania:floating_solegnolia" | "botania:floating_solegnolia_chibi" | "botania:floating_spectranthemum" | "botania:floating_spectrolus" | "botania:floating_tangleberrie" | "botania:floating_tangleberrie_chibi" | "botania:floating_thermalily" | "botania:floating_tigerseye" | "botania:floating_vinculotus" | "botania:forest_eye" | "botania:fork_light_relay" | "botania:framed_dreamwood" | "botania:framed_livingwood" | "botania:gaia_head" | "botania:gaia_pylon" | "botania:gaia_spreader" | "botania:gaia_wall_head" | "botania:ghost_rail" | "botania:glimmering_dreamwood" | "botania:glimmering_dreamwood_log" | "botania:glimmering_livingwood" | "botania:glimmering_livingwood_log" | "botania:glimmering_stripped_dreamwood" | "botania:glimmering_stripped_dreamwood_log" | "botania:glimmering_stripped_livingwood" | "botania:glimmering_stripped_livingwood_log" | "botania:golden_grass" | "botania:gourmaryllis" | "botania:gray_buried_petals" | "botania:gray_double_flower" | "botania:gray_floating_flower" | "botania:gray_mushroom" | "botania:gray_mystical_flower" | "botania:gray_petal_block" | "botania:gray_shiny_flower" | "botania:green_buried_petals" | "botania:green_double_flower" | "botania:green_floating_flower" | "botania:green_mushroom" | "botania:green_mystical_flower" | "botania:green_pavement" | "botania:green_pavement_slab" | "botania:green_pavement_stairs" | "botania:green_petal_block" | "botania:green_shiny_flower" | "botania:heisei_dream" | "botania:hopperhock" | "botania:hopperhock_chibi" | "botania:hourglass" | "botania:hyacidus" | "botania:hydroangeas" | "botania:hydroangeas_motif" | "botania:incense_plate" | "botania:infrangible_platform" | "botania:infused_grass" | "botania:jaded_amaranthus" | "botania:jiyuulia" | "botania:jiyuulia_chibi" | "botania:kekimurus" | "botania:labellia" | "botania:lavender_quartz" | "botania:lavender_quartz_pillar" | "botania:lavender_quartz_slab" | "botania:lavender_quartz_stairs" | "botania:light_blue_buried_petals" | "botania:light_blue_double_flower" | "botania:light_blue_floating_flower" | "botania:light_blue_mushroom" | "botania:light_blue_mystical_flower" | "botania:light_blue_petal_block" | "botania:light_blue_shiny_flower" | "botania:light_gray_buried_petals" | "botania:light_gray_double_flower" | "botania:light_gray_floating_flower" | "botania:light_gray_mushroom" | "botania:light_gray_mystical_flower" | "botania:light_gray_petal_block" | "botania:light_gray_shiny_flower" | "botania:light_launcher" | "botania:light_relay" | "botania:lime_buried_petals" | "botania:lime_double_flower" | "botania:lime_floating_flower" | "botania:lime_mushroom" | "botania:lime_mystical_flower" | "botania:lime_petal_block" | "botania:lime_shiny_flower" | "botania:livingrock" | "botania:livingrock_bricks" | "botania:livingrock_bricks_slab" | "botania:livingrock_bricks_stairs" | "botania:livingrock_bricks_wall" | "botania:livingrock_slab" | "botania:livingrock_stairs" | "botania:livingrock_wall" | "botania:livingwood" | "botania:livingwood_fence" | "botania:livingwood_fence_gate" | "botania:livingwood_log" | "botania:livingwood_planks" | "botania:livingwood_planks_slab" | "botania:livingwood_planks_stairs" | "botania:livingwood_slab" | "botania:livingwood_stairs" | "botania:livingwood_wall" | "botania:loonium" | "botania:magenta_buried_petals" | "botania:magenta_double_flower" | "botania:magenta_floating_flower" | "botania:magenta_mushroom" | "botania:magenta_mystical_flower" | "botania:magenta_petal_block" | "botania:magenta_shiny_flower" | "botania:mana_bomb" | "botania:mana_detector" | "botania:mana_diamond_block" | "botania:mana_distributor" | "botania:mana_flame" | "botania:mana_fluxfield" | "botania:mana_glass" | "botania:mana_glass_pane" | "botania:mana_pool" | "botania:mana_pylon" | "botania:mana_quartz" | "botania:mana_quartz_pillar" | "botania:mana_quartz_slab" | "botania:mana_quartz_stairs" | "botania:mana_spreader" | "botania:mana_void" | "botania:manastar" | "botania:manasteel_block" | "botania:marimorphosis" | "botania:marimorphosis_chibi" | "botania:medumone" | "botania:metamorphic_desert_bricks" | "botania:metamorphic_desert_bricks_slab" | "botania:metamorphic_desert_bricks_stairs" | "botania:metamorphic_desert_bricks_wall" | "botania:metamorphic_desert_cobblestone" | "botania:metamorphic_desert_cobblestone_slab" | "botania:metamorphic_desert_cobblestone_stairs" | "botania:metamorphic_desert_cobblestone_wall" | "botania:metamorphic_desert_stone" | "botania:metamorphic_desert_stone_slab" | "botania:metamorphic_desert_stone_stairs" | "botania:metamorphic_desert_stone_wall" | "botania:metamorphic_forest_bricks" | "botania:metamorphic_forest_bricks_slab" | "botania:metamorphic_forest_bricks_stairs" | "botania:metamorphic_forest_bricks_wall" | "botania:metamorphic_forest_cobblestone" | "botania:metamorphic_forest_cobblestone_slab" | "botania:metamorphic_forest_cobblestone_stairs" | "botania:metamorphic_forest_cobblestone_wall" | "botania:metamorphic_forest_stone" | "botania:metamorphic_forest_stone_slab" | "botania:metamorphic_forest_stone_stairs" | "botania:metamorphic_forest_stone_wall" | "botania:metamorphic_fungal_bricks" | "botania:metamorphic_fungal_bricks_slab" | "botania:metamorphic_fungal_bricks_stairs" | "botania:metamorphic_fungal_bricks_wall" | "botania:metamorphic_fungal_cobblestone" | "botania:metamorphic_fungal_cobblestone_slab" | "botania:metamorphic_fungal_cobblestone_stairs" | "botania:metamorphic_fungal_cobblestone_wall" | "botania:metamorphic_fungal_stone" | "botania:metamorphic_fungal_stone_slab" | "botania:metamorphic_fungal_stone_stairs" | "botania:metamorphic_fungal_stone_wall" | "botania:metamorphic_mesa_bricks" | "botania:metamorphic_mesa_bricks_slab" | "botania:metamorphic_mesa_bricks_stairs" | "botania:metamorphic_mesa_bricks_wall" | "botania:metamorphic_mesa_cobblestone" | "botania:metamorphic_mesa_cobblestone_slab" | "botania:metamorphic_mesa_cobblestone_stairs" | "botania:metamorphic_mesa_cobblestone_wall" | "botania:metamorphic_mesa_stone" | "botania:metamorphic_mesa_stone_slab" | "botania:metamorphic_mesa_stone_stairs" | "botania:metamorphic_mesa_stone_wall" | "botania:metamorphic_mountain_bricks" | "botania:metamorphic_mountain_bricks_slab" | "botania:metamorphic_mountain_bricks_stairs" | "botania:metamorphic_mountain_bricks_wall" | "botania:metamorphic_mountain_cobblestone" | "botania:metamorphic_mountain_cobblestone_slab" | "botania:metamorphic_mountain_cobblestone_stairs" | "botania:metamorphic_mountain_cobblestone_wall" | "botania:metamorphic_mountain_stone" | "botania:metamorphic_mountain_stone_slab" | "botania:metamorphic_mountain_stone_stairs" | "botania:metamorphic_mountain_stone_wall" | "botania:metamorphic_plains_bricks" | "botania:metamorphic_plains_bricks_slab" | "botania:metamorphic_plains_bricks_stairs" | "botania:metamorphic_plains_bricks_wall" | "botania:metamorphic_plains_cobblestone" | "botania:metamorphic_plains_cobblestone_slab" | "botania:metamorphic_plains_cobblestone_stairs" | "botania:metamorphic_plains_cobblestone_wall" | "botania:metamorphic_plains_stone" | "botania:metamorphic_plains_stone_slab" | "botania:metamorphic_plains_stone_stairs" | "botania:metamorphic_plains_stone_wall" | "botania:metamorphic_swamp_bricks" | "botania:metamorphic_swamp_bricks_slab" | "botania:metamorphic_swamp_bricks_stairs" | "botania:metamorphic_swamp_bricks_wall" | "botania:metamorphic_swamp_cobblestone" | "botania:metamorphic_swamp_cobblestone_slab" | "botania:metamorphic_swamp_cobblestone_stairs" | "botania:metamorphic_swamp_cobblestone_wall" | "botania:metamorphic_swamp_stone" | "botania:metamorphic_swamp_stone_slab" | "botania:metamorphic_swamp_stone_stairs" | "botania:metamorphic_swamp_stone_wall" | "botania:metamorphic_taiga_bricks" | "botania:metamorphic_taiga_bricks_slab" | "botania:metamorphic_taiga_bricks_stairs" | "botania:metamorphic_taiga_bricks_wall" | "botania:metamorphic_taiga_cobblestone" | "botania:metamorphic_taiga_cobblestone_slab" | "botania:metamorphic_taiga_cobblestone_stairs" | "botania:metamorphic_taiga_cobblestone_wall" | "botania:metamorphic_taiga_stone" | "botania:metamorphic_taiga_stone_slab" | "botania:metamorphic_taiga_stone_stairs" | "botania:metamorphic_taiga_stone_wall" | "botania:mossy_dreamwood_planks" | "botania:mossy_livingrock_bricks" | "botania:mossy_livingrock_bricks_slab" | "botania:mossy_livingrock_bricks_stairs" | "botania:mossy_livingrock_bricks_wall" | "botania:mossy_livingwood_planks" | "botania:munchdew" | "botania:mutated_grass" | "botania:narslimmus" | "botania:natura_pylon" | "botania:nightshade_motif" | "botania:open_crate" | "botania:orange_buried_petals" | "botania:orange_double_flower" | "botania:orange_floating_flower" | "botania:orange_mushroom" | "botania:orange_mystical_flower" | "botania:orange_petal_block" | "botania:orange_shiny_flower" | "botania:orechid" | "botania:orechid_ignem" | "botania:pattern_framed_dreamwood" | "botania:pattern_framed_livingwood" | "botania:pink_buried_petals" | "botania:pink_double_flower" | "botania:pink_floating_flower" | "botania:pink_mushroom" | "botania:pink_mystical_flower" | "botania:pink_petal_block" | "botania:pink_shiny_flower" | "botania:piston_relay" | "botania:pollidisiac" | "botania:prism" | "botania:pump" | "botania:pure_daisy" | "botania:purple_buried_petals" | "botania:purple_double_flower" | "botania:purple_floating_flower" | "botania:purple_mushroom" | "botania:purple_mystical_flower" | "botania:purple_petal_block" | "botania:purple_shiny_flower" | "botania:rafflowsia" | "botania:rannuncarpus" | "botania:rannuncarpus_chibi" | "botania:red_buried_petals" | "botania:red_double_flower" | "botania:red_floating_flower" | "botania:red_mushroom" | "botania:red_mystical_flower" | "botania:red_pavement" | "botania:red_pavement_slab" | "botania:red_pavement_stairs" | "botania:red_petal_block" | "botania:red_quartz" | "botania:red_quartz_pillar" | "botania:red_quartz_slab" | "botania:red_quartz_stairs" | "botania:red_shiny_flower" | "botania:red_string_comparator" | "botania:red_string_container" | "botania:red_string_dispenser" | "botania:red_string_fertilizer" | "botania:red_string_interceptor" | "botania:red_string_relay" | "botania:redstone_spreader" | "botania:root" | "botania:rosa_arcana" | "botania:runic_altar" | "botania:scorched_grass" | "botania:shimmerrock" | "botania:shimmerrock_slab" | "botania:shimmerrock_stairs" | "botania:shimmerwood_planks" | "botania:shimmerwood_planks_slab" | "botania:shimmerwood_planks_stairs" | "botania:shulk_me_not" | "botania:solegnolia" | "botania:solegnolia_chibi" | "botania:solid_vine" | "botania:spark_changer" | "botania:spawner_claw" | "botania:spectral_platform" | "botania:spectranthemum" | "botania:spectrolus" | "botania:starfield" | "botania:stripped_dreamwood" | "botania:stripped_dreamwood_log" | "botania:stripped_dreamwood_slab" | "botania:stripped_dreamwood_stairs" | "botania:stripped_dreamwood_wall" | "botania:stripped_livingwood" | "botania:stripped_livingwood_log" | "botania:stripped_livingwood_slab" | "botania:stripped_livingwood_stairs" | "botania:stripped_livingwood_wall" | "botania:sunny_quartz" | "botania:sunny_quartz_pillar" | "botania:sunny_quartz_slab" | "botania:sunny_quartz_stairs" | "botania:tangleberrie" | "botania:tangleberrie_chibi" | "botania:terra_plate" | "botania:terrasteel_block" | "botania:teru_teru_bozu" | "botania:thermalily" | "botania:tigerseye" | "botania:tiny_planet_block" | "botania:tiny_potato" | "botania:toggle_light_relay" | "botania:turntable" | "botania:vinculotus" | "botania:vivid_grass" | "botania:white_buried_petals" | "botania:white_double_flower" | "botania:white_floating_flower" | "botania:white_mushroom" | "botania:white_mystical_flower" | "botania:white_pavement" | "botania:white_pavement_slab" | "botania:white_pavement_stairs" | "botania:white_petal_block" | "botania:white_shiny_flower" | "botania:yellow_buried_petals" | "botania:yellow_double_flower" | "botania:yellow_floating_flower" | "botania:yellow_mushroom" | "botania:yellow_mystical_flower" | "botania:yellow_pavement" | "botania:yellow_pavement_slab" | "botania:yellow_pavement_stairs" | "botania:yellow_petal_block" | "botania:yellow_shiny_flower" | "create:acacia_window" | "create:acacia_window_pane" | "create:adjustable_chain_gearshift" | "create:analog_lever" | "create:andesite_belt_funnel" | "create:andesite_casing" | "create:andesite_encased_cogwheel" | "create:andesite_encased_large_cogwheel" | "create:andesite_encased_shaft" | "create:andesite_funnel" | "create:andesite_ladder" | "create:andesite_pillar" | "create:andesite_tunnel" | "create:asurine" | "create:asurine_pillar" | "create:basin" | "create:belt" | "create:birch_window" | "create:birch_window_pane" | "create:black_nixie_tube" | "create:black_sail" | "create:black_seat" | "create:black_toolbox" | "create:black_valve_handle" | "create:blaze_burner" | "create:blue_nixie_tube" | "create:blue_sail" | "create:blue_seat" | "create:blue_toolbox" | "create:blue_valve_handle" | "create:brass_belt_funnel" | "create:brass_block" | "create:brass_casing" | "create:brass_encased_cogwheel" | "create:brass_encased_large_cogwheel" | "create:brass_encased_shaft" | "create:brass_funnel" | "create:brass_ladder" | "create:brass_tunnel" | "create:brown_nixie_tube" | "create:brown_sail" | "create:brown_seat" | "create:brown_toolbox" | "create:brown_valve_handle" | "create:calcite_pillar" | "create:cart_assembler" | "create:chocolate" | "create:chute" | "create:clockwork_bearing" | "create:clutch" | "create:cogwheel" | "create:content_observer" | "create:controller_rail" | "create:controls" | "create:copper_backtank" | "create:copper_casing" | "create:copper_ladder" | "create:copper_shingle_slab" | "create:copper_shingle_stairs" | "create:copper_shingles" | "create:copper_tile_slab" | "create:copper_tile_stairs" | "create:copper_tiles" | "create:copper_valve_handle" | "create:creative_crate" | "create:creative_fluid_tank" | "create:creative_motor" | "create:crimsite" | "create:crimsite_pillar" | "create:crimson_window" | "create:crimson_window_pane" | "create:crushing_wheel" | "create:crushing_wheel_controller" | "create:cuckoo_clock" | "create:cut_andesite" | "create:cut_andesite_brick_slab" | "create:cut_andesite_brick_stairs" | "create:cut_andesite_brick_wall" | "create:cut_andesite_bricks" | "create:cut_andesite_slab" | "create:cut_andesite_stairs" | "create:cut_andesite_wall" | "create:cut_asurine" | "create:cut_asurine_brick_slab" | "create:cut_asurine_brick_stairs" | "create:cut_asurine_brick_wall" | "create:cut_asurine_bricks" | "create:cut_asurine_slab" | "create:cut_asurine_stairs" | "create:cut_asurine_wall" | "create:cut_calcite" | "create:cut_calcite_brick_slab" | "create:cut_calcite_brick_stairs" | "create:cut_calcite_brick_wall" | "create:cut_calcite_bricks" | "create:cut_calcite_slab" | "create:cut_calcite_stairs" | "create:cut_calcite_wall" | "create:cut_crimsite" | "create:cut_crimsite_brick_slab" | "create:cut_crimsite_brick_stairs" | "create:cut_crimsite_brick_wall" | "create:cut_crimsite_bricks" | "create:cut_crimsite_slab" | "create:cut_crimsite_stairs" | "create:cut_crimsite_wall" | "create:cut_deepslate" | "create:cut_deepslate_brick_slab" | "create:cut_deepslate_brick_stairs" | "create:cut_deepslate_brick_wall" | "create:cut_deepslate_bricks" | "create:cut_deepslate_slab" | "create:cut_deepslate_stairs" | "create:cut_deepslate_wall" | "create:cut_diorite" | "create:cut_diorite_brick_slab" | "create:cut_diorite_brick_stairs" | "create:cut_diorite_brick_wall" | "create:cut_diorite_bricks" | "create:cut_diorite_slab" | "create:cut_diorite_stairs" | "create:cut_diorite_wall" | "create:cut_dripstone" | "create:cut_dripstone_brick_slab" | "create:cut_dripstone_brick_stairs" | "create:cut_dripstone_brick_wall" | "create:cut_dripstone_bricks" | "create:cut_dripstone_slab" | "create:cut_dripstone_stairs" | "create:cut_dripstone_wall" | "create:cut_granite" | "create:cut_granite_brick_slab" | "create:cut_granite_brick_stairs" | "create:cut_granite_brick_wall" | "create:cut_granite_bricks" | "create:cut_granite_slab" | "create:cut_granite_stairs" | "create:cut_granite_wall" | "create:cut_limestone" | "create:cut_limestone_brick_slab" | "create:cut_limestone_brick_stairs" | "create:cut_limestone_brick_wall" | "create:cut_limestone_bricks" | "create:cut_limestone_slab" | "create:cut_limestone_stairs" | "create:cut_limestone_wall" | "create:cut_ochrum" | "create:cut_ochrum_brick_slab" | "create:cut_ochrum_brick_stairs" | "create:cut_ochrum_brick_wall" | "create:cut_ochrum_bricks" | "create:cut_ochrum_slab" | "create:cut_ochrum_stairs" | "create:cut_ochrum_wall" | "create:cut_scorchia" | "create:cut_scorchia_brick_slab" | "create:cut_scorchia_brick_stairs" | "create:cut_scorchia_brick_wall" | "create:cut_scorchia_bricks" | "create:cut_scorchia_slab" | "create:cut_scorchia_stairs" | "create:cut_scorchia_wall" | "create:cut_scoria" | "create:cut_scoria_brick_slab" | "create:cut_scoria_brick_stairs" | "create:cut_scoria_brick_wall" | "create:cut_scoria_bricks" | "create:cut_scoria_slab" | "create:cut_scoria_stairs" | "create:cut_scoria_wall" | "create:cut_tuff" | "create:cut_tuff_brick_slab" | "create:cut_tuff_brick_stairs" | "create:cut_tuff_brick_wall" | "create:cut_tuff_bricks" | "create:cut_tuff_slab" | "create:cut_tuff_stairs" | "create:cut_tuff_wall" | "create:cut_veridium" | "create:cut_veridium_brick_slab" | "create:cut_veridium_brick_stairs" | "create:cut_veridium_brick_wall" | "create:cut_veridium_bricks" | "create:cut_veridium_slab" | "create:cut_veridium_stairs" | "create:cut_veridium_wall" | "create:cyan_nixie_tube" | "create:cyan_sail" | "create:cyan_seat" | "create:cyan_toolbox" | "create:cyan_valve_handle" | "create:dark_oak_window" | "create:dark_oak_window_pane" | "create:deepslate_pillar" | "create:deepslate_zinc_ore" | "create:deployer" | "create:depot" | "create:diorite_pillar" | "create:display_board" | "create:display_link" | "create:dripstone_pillar" | "create:encased_chain_drive" | "create:encased_fan" | "create:encased_fluid_pipe" | "create:exposed_copper_shingle_slab" | "create:exposed_copper_shingle_stairs" | "create:exposed_copper_shingles" | "create:exposed_copper_tile_slab" | "create:exposed_copper_tile_stairs" | "create:exposed_copper_tiles" | "create:fake_track" | "create:fluid_pipe" | "create:fluid_tank" | "create:fluid_valve" | "create:flywheel" | "create:framed_glass" | "create:framed_glass_door" | "create:framed_glass_pane" | "create:framed_glass_trapdoor" | "create:gantry_carriage" | "create:gantry_shaft" | "create:gearbox" | "create:gearshift" | "create:glass_fluid_pipe" | "create:granite_pillar" | "create:gray_nixie_tube" | "create:gray_sail" | "create:gray_seat" | "create:gray_toolbox" | "create:gray_valve_handle" | "create:green_nixie_tube" | "create:green_sail" | "create:green_seat" | "create:green_toolbox" | "create:green_valve_handle" | "create:hand_crank" | "create:haunted_bell" | "create:honey" | "create:horizontal_framed_glass" | "create:horizontal_framed_glass_pane" | "create:hose_pulley" | "create:item_drain" | "create:item_vault" | "create:jungle_window" | "create:jungle_window_pane" | "create:large_bogey" | "create:large_cogwheel" | "create:layered_andesite" | "create:layered_asurine" | "create:layered_calcite" | "create:layered_crimsite" | "create:layered_deepslate" | "create:layered_diorite" | "create:layered_dripstone" | "create:layered_granite" | "create:layered_limestone" | "create:layered_ochrum" | "create:layered_scorchia" | "create:layered_scoria" | "create:layered_tuff" | "create:layered_veridium" | "create:lectern_controller" | "create:light_blue_nixie_tube" | "create:light_blue_sail" | "create:light_blue_seat" | "create:light_blue_toolbox" | "create:light_blue_valve_handle" | "create:light_gray_nixie_tube" | "create:light_gray_sail" | "create:light_gray_seat" | "create:light_gray_toolbox" | "create:light_gray_valve_handle" | "create:lime_nixie_tube" | "create:lime_sail" | "create:lime_seat" | "create:lime_toolbox" | "create:lime_valve_handle" | "create:limestone" | "create:limestone_pillar" | "create:linear_chassis" | "create:lit_blaze_burner" | "create:magenta_nixie_tube" | "create:magenta_sail" | "create:magenta_seat" | "create:magenta_toolbox" | "create:magenta_valve_handle" | "create:mechanical_arm" | "create:mechanical_bearing" | "create:mechanical_crafter" | "create:mechanical_drill" | "create:mechanical_harvester" | "create:mechanical_mixer" | "create:mechanical_piston" | "create:mechanical_piston_head" | "create:mechanical_plough" | "create:mechanical_press" | "create:mechanical_pump" | "create:mechanical_saw" | "create:metal_bracket" | "create:metal_girder" | "create:metal_girder_encased_shaft" | "create:millstone" | "create:minecart_anchor" | "create:mysterious_cuckoo_clock" | "create:nixie_tube" | "create:nozzle" | "create:oak_window" | "create:oak_window_pane" | "create:ochrum" | "create:ochrum_pillar" | "create:orange_sail" | "create:orange_seat" | "create:orange_toolbox" | "create:orange_valve_handle" | "create:ornate_iron_window" | "create:ornate_iron_window_pane" | "create:oxidized_copper_shingle_slab" | "create:oxidized_copper_shingle_stairs" | "create:oxidized_copper_shingles" | "create:oxidized_copper_tile_slab" | "create:oxidized_copper_tile_stairs" | "create:oxidized_copper_tiles" | "create:peculiar_bell" | "create:pink_nixie_tube" | "create:pink_sail" | "create:pink_seat" | "create:pink_toolbox" | "create:pink_valve_handle" | "create:piston_extension_pole" | "create:placard" | "create:polished_cut_andesite" | "create:polished_cut_andesite_slab" | "create:polished_cut_andesite_stairs" | "create:polished_cut_andesite_wall" | "create:polished_cut_asurine" | "create:polished_cut_asurine_slab" | "create:polished_cut_asurine_stairs" | "create:polished_cut_asurine_wall" | "create:polished_cut_calcite" | "create:polished_cut_calcite_slab" | "create:polished_cut_calcite_stairs" | "create:polished_cut_calcite_wall" | "create:polished_cut_crimsite" | "create:polished_cut_crimsite_slab" | "create:polished_cut_crimsite_stairs" | "create:polished_cut_crimsite_wall" | "create:polished_cut_deepslate" | "create:polished_cut_deepslate_slab" | "create:polished_cut_deepslate_stairs" | "create:polished_cut_deepslate_wall" | "create:polished_cut_diorite" | "create:polished_cut_diorite_slab" | "create:polished_cut_diorite_stairs" | "create:polished_cut_diorite_wall" | "create:polished_cut_dripstone" | "create:polished_cut_dripstone_slab" | "create:polished_cut_dripstone_stairs" | "create:polished_cut_dripstone_wall" | "create:polished_cut_granite" | "create:polished_cut_granite_slab" | "create:polished_cut_granite_stairs" | "create:polished_cut_granite_wall" | "create:polished_cut_limestone" | "create:polished_cut_limestone_slab" | "create:polished_cut_limestone_stairs" | "create:polished_cut_limestone_wall" | "create:polished_cut_ochrum" | "create:polished_cut_ochrum_slab" | "create:polished_cut_ochrum_stairs" | "create:polished_cut_ochrum_wall" | "create:polished_cut_scorchia" | "create:polished_cut_scorchia_slab" | "create:polished_cut_scorchia_stairs" | "create:polished_cut_scorchia_wall" | "create:polished_cut_scoria" | "create:polished_cut_scoria_slab" | "create:polished_cut_scoria_stairs" | "create:polished_cut_scoria_wall" | "create:polished_cut_tuff" | "create:polished_cut_tuff_slab" | "create:polished_cut_tuff_stairs" | "create:polished_cut_tuff_wall" | "create:polished_cut_veridium" | "create:polished_cut_veridium_slab" | "create:polished_cut_veridium_stairs" | "create:polished_cut_veridium_wall" | "create:portable_fluid_interface" | "create:portable_storage_interface" | "create:powered_latch" | "create:powered_shaft" | "create:powered_toggle_latch" | "create:pulley_magnet" | "create:pulse_extender" | "create:pulse_repeater" | "create:purple_nixie_tube" | "create:purple_sail" | "create:purple_seat" | "create:purple_toolbox" | "create:purple_valve_handle" | "create:radial_chassis" | "create:railway_casing" | "create:raw_zinc_block" | "create:red_nixie_tube" | "create:red_sail" | "create:red_seat" | "create:red_toolbox" | "create:red_valve_handle" | "create:redstone_contact" | "create:redstone_link" | "create:refined_radiance_casing" | "create:rope" | "create:rope_pulley" | "create:rose_quartz_block" | "create:rose_quartz_lamp" | "create:rose_quartz_tiles" | "create:rotation_speed_controller" | "create:sail_frame" | "create:schematic_table" | "create:schematicannon" | "create:scorchia" | "create:scorchia_pillar" | "create:scoria" | "create:scoria_pillar" | "create:secondary_linear_chassis" | "create:sequenced_gearshift" | "create:shadow_steel_casing" | "create:shaft" | "create:small_andesite_brick_slab" | "create:small_andesite_brick_stairs" | "create:small_andesite_brick_wall" | "create:small_andesite_bricks" | "create:small_asurine_brick_slab" | "create:small_asurine_brick_stairs" | "create:small_asurine_brick_wall" | "create:small_asurine_bricks" | "create:small_bogey" | "create:small_calcite_brick_slab" | "create:small_calcite_brick_stairs" | "create:small_calcite_brick_wall" | "create:small_calcite_bricks" | "create:small_crimsite_brick_slab" | "create:small_crimsite_brick_stairs" | "create:small_crimsite_brick_wall" | "create:small_crimsite_bricks" | "create:small_deepslate_brick_slab" | "create:small_deepslate_brick_stairs" | "create:small_deepslate_brick_wall" | "create:small_deepslate_bricks" | "create:small_diorite_brick_slab" | "create:small_diorite_brick_stairs" | "create:small_diorite_brick_wall" | "create:small_diorite_bricks" | "create:small_dripstone_brick_slab" | "create:small_dripstone_brick_stairs" | "create:small_dripstone_brick_wall" | "create:small_dripstone_bricks" | "create:small_granite_brick_slab" | "create:small_granite_brick_stairs" | "create:small_granite_brick_wall" | "create:small_granite_bricks" | "create:small_limestone_brick_slab" | "create:small_limestone_brick_stairs" | "create:small_limestone_brick_wall" | "create:small_limestone_bricks" | "create:small_ochrum_brick_slab" | "create:small_ochrum_brick_stairs" | "create:small_ochrum_brick_wall" | "create:small_ochrum_bricks" | "create:small_rose_quartz_tiles" | "create:small_scorchia_brick_slab" | "create:small_scorchia_brick_stairs" | "create:small_scorchia_brick_wall" | "create:small_scorchia_bricks" | "create:small_scoria_brick_slab" | "create:small_scoria_brick_stairs" | "create:small_scoria_brick_wall" | "create:small_scoria_bricks" | "create:small_tuff_brick_slab" | "create:small_tuff_brick_stairs" | "create:small_tuff_brick_wall" | "create:small_tuff_bricks" | "create:small_veridium_brick_slab" | "create:small_veridium_brick_stairs" | "create:small_veridium_brick_wall" | "create:small_veridium_bricks" | "create:smart_chute" | "create:smart_fluid_pipe" | "create:speedometer" | "create:spout" | "create:spruce_window" | "create:spruce_window_pane" | "create:steam_engine" | "create:steam_whistle" | "create:steam_whistle_extension" | "create:sticker" | "create:sticky_mechanical_piston" | "create:stockpile_switch" | "create:stressometer" | "create:tiled_glass" | "create:tiled_glass_pane" | "create:track" | "create:track_observer" | "create:track_signal" | "create:track_station" | "create:train_door" | "create:train_trapdoor" | "create:tuff_pillar" | "create:turntable" | "create:veridium" | "create:veridium_pillar" | "create:vertical_framed_glass" | "create:vertical_framed_glass_pane" | "create:warped_window" | "create:warped_window_pane" | "create:water_wheel" | "create:waxed_copper_shingle_slab" | "create:waxed_copper_shingle_stairs" | "create:waxed_copper_shingles" | "create:waxed_copper_tile_slab" | "create:waxed_copper_tile_stairs" | "create:waxed_copper_tiles" | "create:waxed_exposed_copper_shingle_slab" | "create:waxed_exposed_copper_shingle_stairs" | "create:waxed_exposed_copper_shingles" | "create:waxed_exposed_copper_tile_slab" | "create:waxed_exposed_copper_tile_stairs" | "create:waxed_exposed_copper_tiles" | "create:waxed_oxidized_copper_shingle_slab" | "create:waxed_oxidized_copper_shingle_stairs" | "create:waxed_oxidized_copper_shingles" | "create:waxed_oxidized_copper_tile_slab" | "create:waxed_oxidized_copper_tile_stairs" | "create:waxed_oxidized_copper_tiles" | "create:waxed_weathered_copper_shingle_slab" | "create:waxed_weathered_copper_shingle_stairs" | "create:waxed_weathered_copper_shingles" | "create:waxed_weathered_copper_tile_slab" | "create:waxed_weathered_copper_tile_stairs" | "create:waxed_weathered_copper_tiles" | "create:weathered_copper_shingle_slab" | "create:weathered_copper_shingle_stairs" | "create:weathered_copper_shingles" | "create:weathered_copper_tile_slab" | "create:weathered_copper_tile_stairs" | "create:weathered_copper_tiles" | "create:weighted_ejector" | "create:white_nixie_tube" | "create:white_sail" | "create:white_seat" | "create:white_toolbox" | "create:white_valve_handle" | "create:windmill_bearing" | "create:wooden_bracket" | "create:yellow_nixie_tube" | "create:yellow_sail" | "create:yellow_seat" | "create:yellow_toolbox" | "create:yellow_valve_handle" | "create:zinc_block" | "create:zinc_ore" | "enderstorage:ender_chest" | "enderstorage:ender_tank" | "ftbquests:barrier" | "ftbquests:detector" | "ftbquests:stage_barrier" | "kubejs:livingrock_casing" | "lootr:lootr_barrel" | "lootr:lootr_chest" | "lootr:lootr_inventory" | "lootr:lootr_shulker" | "lootr:lootr_trapped_chest" | "lootr:trophy" | "acacia_button" | "minecraft:acacia_button" | "acacia_door" | "minecraft:acacia_door" | "acacia_fence" | "minecraft:acacia_fence" | "acacia_fence_gate" | "minecraft:acacia_fence_gate" | "acacia_leaves" | "minecraft:acacia_leaves" | "acacia_log" | "minecraft:acacia_log" | "acacia_planks" | "minecraft:acacia_planks" | "acacia_pressure_plate" | "minecraft:acacia_pressure_plate" | "acacia_sapling" | "minecraft:acacia_sapling" | "acacia_sign" | "minecraft:acacia_sign" | "acacia_slab" | "minecraft:acacia_slab" | "acacia_stairs" | "minecraft:acacia_stairs" | "acacia_trapdoor" | "minecraft:acacia_trapdoor" | "acacia_wall_sign" | "minecraft:acacia_wall_sign" | "acacia_wood" | "minecraft:acacia_wood" | "activator_rail" | "minecraft:activator_rail" | "air" | "minecraft:air" | "allium" | "minecraft:allium" | "amethyst_block" | "minecraft:amethyst_block" | "amethyst_cluster" | "minecraft:amethyst_cluster" | "ancient_debris" | "minecraft:ancient_debris" | "andesite" | "minecraft:andesite" | "andesite_slab" | "minecraft:andesite_slab" | "andesite_stairs" | "minecraft:andesite_stairs" | "andesite_wall" | "minecraft:andesite_wall" | "anvil" | "minecraft:anvil" | "attached_melon_stem" | "minecraft:attached_melon_stem" | "attached_pumpkin_stem" | "minecraft:attached_pumpkin_stem" | "azalea" | "minecraft:azalea" | "azalea_leaves" | "minecraft:azalea_leaves" | "azure_bluet" | "minecraft:azure_bluet" | "bamboo" | "minecraft:bamboo" | "bamboo_sapling" | "minecraft:bamboo_sapling" | "barrel" | "minecraft:barrel" | "barrier" | "minecraft:barrier" | "basalt" | "minecraft:basalt" | "beacon" | "minecraft:beacon" | "bedrock" | "minecraft:bedrock" | "bee_nest" | "minecraft:bee_nest" | "beehive" | "minecraft:beehive" | "beetroots" | "minecraft:beetroots" | "bell" | "minecraft:bell" | "big_dripleaf" | "minecraft:big_dripleaf" | "big_dripleaf_stem" | "minecraft:big_dripleaf_stem" | "birch_button" | "minecraft:birch_button" | "birch_door" | "minecraft:birch_door" | "birch_fence" | "minecraft:birch_fence" | "birch_fence_gate" | "minecraft:birch_fence_gate" | "birch_leaves" | "minecraft:birch_leaves" | "birch_log" | "minecraft:birch_log" | "birch_planks" | "minecraft:birch_planks" | "birch_pressure_plate" | "minecraft:birch_pressure_plate" | "birch_sapling" | "minecraft:birch_sapling" | "birch_sign" | "minecraft:birch_sign" | "birch_slab" | "minecraft:birch_slab" | "birch_stairs" | "minecraft:birch_stairs" | "birch_trapdoor" | "minecraft:birch_trapdoor" | "birch_wall_sign" | "minecraft:birch_wall_sign" | "birch_wood" | "minecraft:birch_wood" | "black_banner" | "minecraft:black_banner" | "black_bed" | "minecraft:black_bed" | "black_candle" | "minecraft:black_candle" | "black_candle_cake" | "minecraft:black_candle_cake" | "black_carpet" | "minecraft:black_carpet" | "black_concrete" | "minecraft:black_concrete" | "black_concrete_powder" | "minecraft:black_concrete_powder" | "black_glazed_terracotta" | "minecraft:black_glazed_terracotta" | "black_shulker_box" | "minecraft:black_shulker_box" | "black_stained_glass" | "minecraft:black_stained_glass" | "black_stained_glass_pane" | "minecraft:black_stained_glass_pane" | "black_terracotta" | "minecraft:black_terracotta" | "black_wall_banner" | "minecraft:black_wall_banner" | "black_wool" | "minecraft:black_wool" | "blackstone" | "minecraft:blackstone" | "blackstone_slab" | "minecraft:blackstone_slab" | "blackstone_stairs" | "minecraft:blackstone_stairs" | "blackstone_wall" | "minecraft:blackstone_wall" | "blast_furnace" | "minecraft:blast_furnace" | "blue_banner" | "minecraft:blue_banner" | "blue_bed" | "minecraft:blue_bed" | "blue_candle" | "minecraft:blue_candle" | "blue_candle_cake" | "minecraft:blue_candle_cake" | "blue_carpet" | "minecraft:blue_carpet" | "blue_concrete" | "minecraft:blue_concrete" | "blue_concrete_powder" | "minecraft:blue_concrete_powder" | "blue_glazed_terracotta" | "minecraft:blue_glazed_terracotta" | "blue_ice" | "minecraft:blue_ice" | "blue_orchid" | "minecraft:blue_orchid" | "blue_shulker_box" | "minecraft:blue_shulker_box" | "blue_stained_glass" | "minecraft:blue_stained_glass" | "blue_stained_glass_pane" | "minecraft:blue_stained_glass_pane" | "blue_terracotta" | "minecraft:blue_terracotta" | "blue_wall_banner" | "minecraft:blue_wall_banner" | "blue_wool" | "minecraft:blue_wool" | "bone_block" | "minecraft:bone_block" | "bookshelf" | "minecraft:bookshelf" | "brain_coral" | "minecraft:brain_coral" | "brain_coral_block" | "minecraft:brain_coral_block" | "brain_coral_fan" | "minecraft:brain_coral_fan" | "brain_coral_wall_fan" | "minecraft:brain_coral_wall_fan" | "brewing_stand" | "minecraft:brewing_stand" | "brick_slab" | "minecraft:brick_slab" | "brick_stairs" | "minecraft:brick_stairs" | "brick_wall" | "minecraft:brick_wall" | "bricks" | "minecraft:bricks" | "brown_banner" | "minecraft:brown_banner" | "brown_bed" | "minecraft:brown_bed" | "brown_candle" | "minecraft:brown_candle" | "brown_candle_cake" | "minecraft:brown_candle_cake" | "brown_carpet" | "minecraft:brown_carpet" | "brown_concrete" | "minecraft:brown_concrete" | "brown_concrete_powder" | "minecraft:brown_concrete_powder" | "brown_glazed_terracotta" | "minecraft:brown_glazed_terracotta" | "brown_mushroom" | "minecraft:brown_mushroom" | "brown_mushroom_block" | "minecraft:brown_mushroom_block" | "brown_shulker_box" | "minecraft:brown_shulker_box" | "brown_stained_glass" | "minecraft:brown_stained_glass" | "brown_stained_glass_pane" | "minecraft:brown_stained_glass_pane" | "brown_terracotta" | "minecraft:brown_terracotta" | "brown_wall_banner" | "minecraft:brown_wall_banner" | "brown_wool" | "minecraft:brown_wool" | "bubble_column" | "minecraft:bubble_column" | "bubble_coral" | "minecraft:bubble_coral" | "bubble_coral_block" | "minecraft:bubble_coral_block" | "bubble_coral_fan" | "minecraft:bubble_coral_fan" | "bubble_coral_wall_fan" | "minecraft:bubble_coral_wall_fan" | "budding_amethyst" | "minecraft:budding_amethyst" | "cactus" | "minecraft:cactus" | "cake" | "minecraft:cake" | "calcite" | "minecraft:calcite" | "campfire" | "minecraft:campfire" | "candle" | "minecraft:candle" | "candle_cake" | "minecraft:candle_cake" | "carrots" | "minecraft:carrots" | "cartography_table" | "minecraft:cartography_table" | "carved_pumpkin" | "minecraft:carved_pumpkin" | "cauldron" | "minecraft:cauldron" | "cave_air" | "minecraft:cave_air" | "cave_vines" | "minecraft:cave_vines" | "cave_vines_plant" | "minecraft:cave_vines_plant" | "chain" | "minecraft:chain" | "chain_command_block" | "minecraft:chain_command_block" | "chest" | "minecraft:chest" | "chipped_anvil" | "minecraft:chipped_anvil" | "chiseled_deepslate" | "minecraft:chiseled_deepslate" | "chiseled_nether_bricks" | "minecraft:chiseled_nether_bricks" | "chiseled_polished_blackstone" | "minecraft:chiseled_polished_blackstone" | "chiseled_quartz_block" | "minecraft:chiseled_quartz_block" | "chiseled_red_sandstone" | "minecraft:chiseled_red_sandstone" | "chiseled_sandstone" | "minecraft:chiseled_sandstone" | "chiseled_stone_bricks" | "minecraft:chiseled_stone_bricks" | "chorus_flower" | "minecraft:chorus_flower" | "chorus_plant" | "minecraft:chorus_plant" | "clay" | "minecraft:clay" | "coal_block" | "minecraft:coal_block" | "coal_ore" | "minecraft:coal_ore" | "coarse_dirt" | "minecraft:coarse_dirt" | "cobbled_deepslate" | "minecraft:cobbled_deepslate" | "cobbled_deepslate_slab" | "minecraft:cobbled_deepslate_slab" | "cobbled_deepslate_stairs" | "minecraft:cobbled_deepslate_stairs" | "cobbled_deepslate_wall" | "minecraft:cobbled_deepslate_wall" | "cobblestone" | "minecraft:cobblestone" | "cobblestone_slab" | "minecraft:cobblestone_slab" | "cobblestone_stairs" | "minecraft:cobblestone_stairs" | "cobblestone_wall" | "minecraft:cobblestone_wall" | "cobweb" | "minecraft:cobweb" | "cocoa" | "minecraft:cocoa" | "command_block" | "minecraft:command_block" | "comparator" | "minecraft:comparator" | "composter" | "minecraft:composter" | "conduit" | "minecraft:conduit" | "copper_block" | "minecraft:copper_block" | "copper_ore" | "minecraft:copper_ore" | "cornflower" | "minecraft:cornflower" | "cracked_deepslate_bricks" | "minecraft:cracked_deepslate_bricks" | "cracked_deepslate_tiles" | "minecraft:cracked_deepslate_tiles" | "cracked_nether_bricks" | "minecraft:cracked_nether_bricks" | "cracked_polished_blackstone_bricks" | "minecraft:cracked_polished_blackstone_bricks" | "cracked_stone_bricks" | "minecraft:cracked_stone_bricks" | "crafting_table" | "minecraft:crafting_table" | "creeper_head" | "minecraft:creeper_head" | "creeper_wall_head" | "minecraft:creeper_wall_head" | "crimson_button" | "minecraft:crimson_button" | "crimson_door" | "minecraft:crimson_door" | "crimson_fence" | "minecraft:crimson_fence" | "crimson_fence_gate" | "minecraft:crimson_fence_gate" | "crimson_fungus" | "minecraft:crimson_fungus" | "crimson_hyphae" | "minecraft:crimson_hyphae" | "crimson_nylium" | "minecraft:crimson_nylium" | "crimson_planks" | "minecraft:crimson_planks" | "crimson_pressure_plate" | "minecraft:crimson_pressure_plate" | "crimson_roots" | "minecraft:crimson_roots" | "crimson_sign" | "minecraft:crimson_sign" | "crimson_slab" | "minecraft:crimson_slab" | "crimson_stairs" | "minecraft:crimson_stairs" | "crimson_stem" | "minecraft:crimson_stem" | "crimson_trapdoor" | "minecraft:crimson_trapdoor" | "crimson_wall_sign" | "minecraft:crimson_wall_sign" | "crying_obsidian" | "minecraft:crying_obsidian" | "cut_copper" | "minecraft:cut_copper" | "cut_copper_slab" | "minecraft:cut_copper_slab" | "cut_copper_stairs" | "minecraft:cut_copper_stairs" | "cut_red_sandstone" | "minecraft:cut_red_sandstone" | "cut_red_sandstone_slab" | "minecraft:cut_red_sandstone_slab" | "cut_sandstone" | "minecraft:cut_sandstone" | "cut_sandstone_slab" | "minecraft:cut_sandstone_slab" | "cyan_banner" | "minecraft:cyan_banner" | "cyan_bed" | "minecraft:cyan_bed" | "cyan_candle" | "minecraft:cyan_candle" | "cyan_candle_cake" | "minecraft:cyan_candle_cake" | "cyan_carpet" | "minecraft:cyan_carpet" | "cyan_concrete" | "minecraft:cyan_concrete" | "cyan_concrete_powder" | "minecraft:cyan_concrete_powder" | "cyan_glazed_terracotta" | "minecraft:cyan_glazed_terracotta" | "cyan_shulker_box" | "minecraft:cyan_shulker_box" | "cyan_stained_glass" | "minecraft:cyan_stained_glass" | "cyan_stained_glass_pane" | "minecraft:cyan_stained_glass_pane" | "cyan_terracotta" | "minecraft:cyan_terracotta" | "cyan_wall_banner" | "minecraft:cyan_wall_banner" | "cyan_wool" | "minecraft:cyan_wool" | "damaged_anvil" | "minecraft:damaged_anvil" | "dandelion" | "minecraft:dandelion" | "dark_oak_button" | "minecraft:dark_oak_button" | "dark_oak_door" | "minecraft:dark_oak_door" | "dark_oak_fence" | "minecraft:dark_oak_fence" | "dark_oak_fence_gate" | "minecraft:dark_oak_fence_gate" | "dark_oak_leaves" | "minecraft:dark_oak_leaves" | "dark_oak_log" | "minecraft:dark_oak_log" | "dark_oak_planks" | "minecraft:dark_oak_planks" | "dark_oak_pressure_plate" | "minecraft:dark_oak_pressure_plate" | "dark_oak_sapling" | "minecraft:dark_oak_sapling" | "dark_oak_sign" | "minecraft:dark_oak_sign" | "dark_oak_slab" | "minecraft:dark_oak_slab" | "dark_oak_stairs" | "minecraft:dark_oak_stairs" | "dark_oak_trapdoor" | "minecraft:dark_oak_trapdoor" | "dark_oak_wall_sign" | "minecraft:dark_oak_wall_sign" | "dark_oak_wood" | "minecraft:dark_oak_wood" | "dark_prismarine" | "minecraft:dark_prismarine" | "dark_prismarine_slab" | "minecraft:dark_prismarine_slab" | "dark_prismarine_stairs" | "minecraft:dark_prismarine_stairs" | "daylight_detector" | "minecraft:daylight_detector" | "dead_brain_coral" | "minecraft:dead_brain_coral" | "dead_brain_coral_block" | "minecraft:dead_brain_coral_block" | "dead_brain_coral_fan" | "minecraft:dead_brain_coral_fan" | "dead_brain_coral_wall_fan" | "minecraft:dead_brain_coral_wall_fan" | "dead_bubble_coral" | "minecraft:dead_bubble_coral" | "dead_bubble_coral_block" | "minecraft:dead_bubble_coral_block" | "dead_bubble_coral_fan" | "minecraft:dead_bubble_coral_fan" | "dead_bubble_coral_wall_fan" | "minecraft:dead_bubble_coral_wall_fan" | "dead_bush" | "minecraft:dead_bush" | "dead_fire_coral" | "minecraft:dead_fire_coral" | "dead_fire_coral_block" | "minecraft:dead_fire_coral_block" | "dead_fire_coral_fan" | "minecraft:dead_fire_coral_fan" | "dead_fire_coral_wall_fan" | "minecraft:dead_fire_coral_wall_fan" | "dead_horn_coral" | "minecraft:dead_horn_coral" | "dead_horn_coral_block" | "minecraft:dead_horn_coral_block" | "dead_horn_coral_fan" | "minecraft:dead_horn_coral_fan" | "dead_horn_coral_wall_fan" | "minecraft:dead_horn_coral_wall_fan" | "dead_tube_coral" | "minecraft:dead_tube_coral" | "dead_tube_coral_block" | "minecraft:dead_tube_coral_block" | "dead_tube_coral_fan" | "minecraft:dead_tube_coral_fan" | "dead_tube_coral_wall_fan" | "minecraft:dead_tube_coral_wall_fan" | "deepslate" | "minecraft:deepslate" | "deepslate_brick_slab" | "minecraft:deepslate_brick_slab" | "deepslate_brick_stairs" | "minecraft:deepslate_brick_stairs" | "deepslate_brick_wall" | "minecraft:deepslate_brick_wall" | "deepslate_bricks" | "minecraft:deepslate_bricks" | "deepslate_coal_ore" | "minecraft:deepslate_coal_ore" | "deepslate_copper_ore" | "minecraft:deepslate_copper_ore" | "deepslate_diamond_ore" | "minecraft:deepslate_diamond_ore" | "deepslate_emerald_ore" | "minecraft:deepslate_emerald_ore" | "deepslate_gold_ore" | "minecraft:deepslate_gold_ore" | "deepslate_iron_ore" | "minecraft:deepslate_iron_ore" | "deepslate_lapis_ore" | "minecraft:deepslate_lapis_ore" | "deepslate_redstone_ore" | "minecraft:deepslate_redstone_ore" | "deepslate_tile_slab" | "minecraft:deepslate_tile_slab" | "deepslate_tile_stairs" | "minecraft:deepslate_tile_stairs" | "deepslate_tile_wall" | "minecraft:deepslate_tile_wall" | "deepslate_tiles" | "minecraft:deepslate_tiles" | "detector_rail" | "minecraft:detector_rail" | "diamond_block" | "minecraft:diamond_block" | "diamond_ore" | "minecraft:diamond_ore" | "diorite" | "minecraft:diorite" | "diorite_slab" | "minecraft:diorite_slab" | "diorite_stairs" | "minecraft:diorite_stairs" | "diorite_wall" | "minecraft:diorite_wall" | "dirt" | "minecraft:dirt" | "dirt_path" | "minecraft:dirt_path" | "dispenser" | "minecraft:dispenser" | "dragon_egg" | "minecraft:dragon_egg" | "dragon_head" | "minecraft:dragon_head" | "dragon_wall_head" | "minecraft:dragon_wall_head" | "dried_kelp_block" | "minecraft:dried_kelp_block" | "dripstone_block" | "minecraft:dripstone_block" | "dropper" | "minecraft:dropper" | "emerald_block" | "minecraft:emerald_block" | "emerald_ore" | "minecraft:emerald_ore" | "enchanting_table" | "minecraft:enchanting_table" | "end_gateway" | "minecraft:end_gateway" | "end_portal" | "minecraft:end_portal" | "end_portal_frame" | "minecraft:end_portal_frame" | "end_rod" | "minecraft:end_rod" | "end_stone" | "minecraft:end_stone" | "end_stone_brick_slab" | "minecraft:end_stone_brick_slab" | "end_stone_brick_stairs" | "minecraft:end_stone_brick_stairs" | "end_stone_brick_wall" | "minecraft:end_stone_brick_wall" | "end_stone_bricks" | "minecraft:end_stone_bricks" | "ender_chest" | "minecraft:ender_chest" | "exposed_copper" | "minecraft:exposed_copper" | "exposed_cut_copper" | "minecraft:exposed_cut_copper" | "exposed_cut_copper_slab" | "minecraft:exposed_cut_copper_slab" | "exposed_cut_copper_stairs" | "minecraft:exposed_cut_copper_stairs" | "farmland" | "minecraft:farmland" | "fern" | "minecraft:fern" | "fire" | "minecraft:fire" | "fire_coral" | "minecraft:fire_coral" | "fire_coral_block" | "minecraft:fire_coral_block" | "fire_coral_fan" | "minecraft:fire_coral_fan" | "fire_coral_wall_fan" | "minecraft:fire_coral_wall_fan" | "fletching_table" | "minecraft:fletching_table" | "flower_pot" | "minecraft:flower_pot" | "flowering_azalea" | "minecraft:flowering_azalea" | "flowering_azalea_leaves" | "minecraft:flowering_azalea_leaves" | "frosted_ice" | "minecraft:frosted_ice" | "furnace" | "minecraft:furnace" | "gilded_blackstone" | "minecraft:gilded_blackstone" | "glass" | "minecraft:glass" | "glass_pane" | "minecraft:glass_pane" | "glow_lichen" | "minecraft:glow_lichen" | "glowstone" | "minecraft:glowstone" | "gold_block" | "minecraft:gold_block" | "gold_ore" | "minecraft:gold_ore" | "granite" | "minecraft:granite" | "granite_slab" | "minecraft:granite_slab" | "granite_stairs" | "minecraft:granite_stairs" | "granite_wall" | "minecraft:granite_wall" | "grass" | "minecraft:grass" | "grass_block" | "minecraft:grass_block" | "gravel" | "minecraft:gravel" | "gray_banner" | "minecraft:gray_banner" | "gray_bed" | "minecraft:gray_bed" | "gray_candle" | "minecraft:gray_candle" | "gray_candle_cake" | "minecraft:gray_candle_cake" | "gray_carpet" | "minecraft:gray_carpet" | "gray_concrete" | "minecraft:gray_concrete" | "gray_concrete_powder" | "minecraft:gray_concrete_powder" | "gray_glazed_terracotta" | "minecraft:gray_glazed_terracotta" | "gray_shulker_box" | "minecraft:gray_shulker_box" | "gray_stained_glass" | "minecraft:gray_stained_glass" | "gray_stained_glass_pane" | "minecraft:gray_stained_glass_pane" | "gray_terracotta" | "minecraft:gray_terracotta" | "gray_wall_banner" | "minecraft:gray_wall_banner" | "gray_wool" | "minecraft:gray_wool" | "green_banner" | "minecraft:green_banner" | "green_bed" | "minecraft:green_bed" | "green_candle" | "minecraft:green_candle" | "green_candle_cake" | "minecraft:green_candle_cake" | "green_carpet" | "minecraft:green_carpet" | "green_concrete" | "minecraft:green_concrete" | "green_concrete_powder" | "minecraft:green_concrete_powder" | "green_glazed_terracotta" | "minecraft:green_glazed_terracotta" | "green_shulker_box" | "minecraft:green_shulker_box" | "green_stained_glass" | "minecraft:green_stained_glass" | "green_stained_glass_pane" | "minecraft:green_stained_glass_pane" | "green_terracotta" | "minecraft:green_terracotta" | "green_wall_banner" | "minecraft:green_wall_banner" | "green_wool" | "minecraft:green_wool" | "grindstone" | "minecraft:grindstone" | "hanging_roots" | "minecraft:hanging_roots" | "hay_block" | "minecraft:hay_block" | "heavy_weighted_pressure_plate" | "minecraft:heavy_weighted_pressure_plate" | "honey_block" | "minecraft:honey_block" | "honeycomb_block" | "minecraft:honeycomb_block" | "hopper" | "minecraft:hopper" | "horn_coral" | "minecraft:horn_coral" | "horn_coral_block" | "minecraft:horn_coral_block" | "horn_coral_fan" | "minecraft:horn_coral_fan" | "horn_coral_wall_fan" | "minecraft:horn_coral_wall_fan" | "ice" | "minecraft:ice" | "infested_chiseled_stone_bricks" | "minecraft:infested_chiseled_stone_bricks" | "infested_cobblestone" | "minecraft:infested_cobblestone" | "infested_cracked_stone_bricks" | "minecraft:infested_cracked_stone_bricks" | "infested_deepslate" | "minecraft:infested_deepslate" | "infested_mossy_stone_bricks" | "minecraft:infested_mossy_stone_bricks" | "infested_stone" | "minecraft:infested_stone" | "infested_stone_bricks" | "minecraft:infested_stone_bricks" | "iron_bars" | "minecraft:iron_bars" | "iron_block" | "minecraft:iron_block" | "iron_door" | "minecraft:iron_door" | "iron_ore" | "minecraft:iron_ore" | "iron_trapdoor" | "minecraft:iron_trapdoor" | "jack_o_lantern" | "minecraft:jack_o_lantern" | "jigsaw" | "minecraft:jigsaw" | "jukebox" | "minecraft:jukebox" | "jungle_button" | "minecraft:jungle_button" | "jungle_door" | "minecraft:jungle_door" | "jungle_fence" | "minecraft:jungle_fence" | "jungle_fence_gate" | "minecraft:jungle_fence_gate" | "jungle_leaves" | "minecraft:jungle_leaves" | "jungle_log" | "minecraft:jungle_log" | "jungle_planks" | "minecraft:jungle_planks" | "jungle_pressure_plate" | "minecraft:jungle_pressure_plate" | "jungle_sapling" | "minecraft:jungle_sapling" | "jungle_sign" | "minecraft:jungle_sign" | "jungle_slab" | "minecraft:jungle_slab" | "jungle_stairs" | "minecraft:jungle_stairs" | "jungle_trapdoor" | "minecraft:jungle_trapdoor" | "jungle_wall_sign" | "minecraft:jungle_wall_sign" | "jungle_wood" | "minecraft:jungle_wood" | "kelp" | "minecraft:kelp" | "kelp_plant" | "minecraft:kelp_plant" | "ladder" | "minecraft:ladder" | "lantern" | "minecraft:lantern" | "lapis_block" | "minecraft:lapis_block" | "lapis_ore" | "minecraft:lapis_ore" | "large_amethyst_bud" | "minecraft:large_amethyst_bud" | "large_fern" | "minecraft:large_fern" | "lava" | "minecraft:lava" | "lava_cauldron" | "minecraft:lava_cauldron" | "lectern" | "minecraft:lectern" | "lever" | "minecraft:lever" | "light" | "minecraft:light" | "light_blue_banner" | "minecraft:light_blue_banner" | "light_blue_bed" | "minecraft:light_blue_bed" | "light_blue_candle" | "minecraft:light_blue_candle" | "light_blue_candle_cake" | "minecraft:light_blue_candle_cake" | "light_blue_carpet" | "minecraft:light_blue_carpet" | "light_blue_concrete" | "minecraft:light_blue_concrete" | "light_blue_concrete_powder" | "minecraft:light_blue_concrete_powder" | "light_blue_glazed_terracotta" | "minecraft:light_blue_glazed_terracotta" | "light_blue_shulker_box" | "minecraft:light_blue_shulker_box" | "light_blue_stained_glass" | "minecraft:light_blue_stained_glass" | "light_blue_stained_glass_pane" | "minecraft:light_blue_stained_glass_pane" | "light_blue_terracotta" | "minecraft:light_blue_terracotta" | "light_blue_wall_banner" | "minecraft:light_blue_wall_banner" | "light_blue_wool" | "minecraft:light_blue_wool" | "light_gray_banner" | "minecraft:light_gray_banner" | "light_gray_bed" | "minecraft:light_gray_bed" | "light_gray_candle" | "minecraft:light_gray_candle" | "light_gray_candle_cake" | "minecraft:light_gray_candle_cake" | "light_gray_carpet" | "minecraft:light_gray_carpet" | "light_gray_concrete" | "minecraft:light_gray_concrete" | "light_gray_concrete_powder" | "minecraft:light_gray_concrete_powder" | "light_gray_glazed_terracotta" | "minecraft:light_gray_glazed_terracotta" | "light_gray_shulker_box" | "minecraft:light_gray_shulker_box" | "light_gray_stained_glass" | "minecraft:light_gray_stained_glass" | "light_gray_stained_glass_pane" | "minecraft:light_gray_stained_glass_pane" | "light_gray_terracotta" | "minecraft:light_gray_terracotta" | "light_gray_wall_banner" | "minecraft:light_gray_wall_banner" | "light_gray_wool" | "minecraft:light_gray_wool" | "light_weighted_pressure_plate" | "minecraft:light_weighted_pressure_plate" | "lightning_rod" | "minecraft:lightning_rod" | "lilac" | "minecraft:lilac" | "lily_of_the_valley" | "minecraft:lily_of_the_valley" | "lily_pad" | "minecraft:lily_pad" | "lime_banner" | "minecraft:lime_banner" | "lime_bed" | "minecraft:lime_bed" | "lime_candle" | "minecraft:lime_candle" | "lime_candle_cake" | "minecraft:lime_candle_cake" | "lime_carpet" | "minecraft:lime_carpet" | "lime_concrete" | "minecraft:lime_concrete" | "lime_concrete_powder" | "minecraft:lime_concrete_powder" | "lime_glazed_terracotta" | "minecraft:lime_glazed_terracotta" | "lime_shulker_box" | "minecraft:lime_shulker_box" | "lime_stained_glass" | "minecraft:lime_stained_glass" | "lime_stained_glass_pane" | "minecraft:lime_stained_glass_pane" | "lime_terracotta" | "minecraft:lime_terracotta" | "lime_wall_banner" | "minecraft:lime_wall_banner" | "lime_wool" | "minecraft:lime_wool" | "lodestone" | "minecraft:lodestone" | "loom" | "minecraft:loom" | "magenta_banner" | "minecraft:magenta_banner" | "magenta_bed" | "minecraft:magenta_bed" | "magenta_candle" | "minecraft:magenta_candle" | "magenta_candle_cake" | "minecraft:magenta_candle_cake" | "magenta_carpet" | "minecraft:magenta_carpet" | "magenta_concrete" | "minecraft:magenta_concrete" | "magenta_concrete_powder" | "minecraft:magenta_concrete_powder" | "magenta_glazed_terracotta" | "minecraft:magenta_glazed_terracotta" | "magenta_shulker_box" | "minecraft:magenta_shulker_box" | "magenta_stained_glass" | "minecraft:magenta_stained_glass" | "magenta_stained_glass_pane" | "minecraft:magenta_stained_glass_pane" | "magenta_terracotta" | "minecraft:magenta_terracotta" | "magenta_wall_banner" | "minecraft:magenta_wall_banner" | "magenta_wool" | "minecraft:magenta_wool" | "magma_block" | "minecraft:magma_block" | "medium_amethyst_bud" | "minecraft:medium_amethyst_bud" | "melon" | "minecraft:melon" | "melon_stem" | "minecraft:melon_stem" | "moss_block" | "minecraft:moss_block" | "moss_carpet" | "minecraft:moss_carpet" | "mossy_cobblestone" | "minecraft:mossy_cobblestone" | "mossy_cobblestone_slab" | "minecraft:mossy_cobblestone_slab" | "mossy_cobblestone_stairs" | "minecraft:mossy_cobblestone_stairs" | "mossy_cobblestone_wall" | "minecraft:mossy_cobblestone_wall" | "mossy_stone_brick_slab" | "minecraft:mossy_stone_brick_slab" | "mossy_stone_brick_stairs" | "minecraft:mossy_stone_brick_stairs" | "mossy_stone_brick_wall" | "minecraft:mossy_stone_brick_wall" | "mossy_stone_bricks" | "minecraft:mossy_stone_bricks" | "moving_piston" | "minecraft:moving_piston" | "mushroom_stem" | "minecraft:mushroom_stem" | "mycelium" | "minecraft:mycelium" | "nether_brick_fence" | "minecraft:nether_brick_fence" | "nether_brick_slab" | "minecraft:nether_brick_slab" | "nether_brick_stairs" | "minecraft:nether_brick_stairs" | "nether_brick_wall" | "minecraft:nether_brick_wall" | "nether_bricks" | "minecraft:nether_bricks" | "nether_gold_ore" | "minecraft:nether_gold_ore" | "nether_portal" | "minecraft:nether_portal" | "nether_quartz_ore" | "minecraft:nether_quartz_ore" | "nether_sprouts" | "minecraft:nether_sprouts" | "nether_wart" | "minecraft:nether_wart" | "nether_wart_block" | "minecraft:nether_wart_block" | "netherite_block" | "minecraft:netherite_block" | "netherrack" | "minecraft:netherrack" | "note_block" | "minecraft:note_block" | "oak_button" | "minecraft:oak_button" | "oak_door" | "minecraft:oak_door" | "oak_fence" | "minecraft:oak_fence" | "oak_fence_gate" | "minecraft:oak_fence_gate" | "oak_leaves" | "minecraft:oak_leaves" | "oak_log" | "minecraft:oak_log" | "oak_planks" | "minecraft:oak_planks" | "oak_pressure_plate" | "minecraft:oak_pressure_plate" | "oak_sapling" | "minecraft:oak_sapling" | "oak_sign" | "minecraft:oak_sign" | "oak_slab" | "minecraft:oak_slab" | "oak_stairs" | "minecraft:oak_stairs" | "oak_trapdoor" | "minecraft:oak_trapdoor" | "oak_wall_sign" | "minecraft:oak_wall_sign" | "oak_wood" | "minecraft:oak_wood" | "observer" | "minecraft:observer" | "obsidian" | "minecraft:obsidian" | "orange_banner" | "minecraft:orange_banner" | "orange_bed" | "minecraft:orange_bed" | "orange_candle" | "minecraft:orange_candle" | "orange_candle_cake" | "minecraft:orange_candle_cake" | "orange_carpet" | "minecraft:orange_carpet" | "orange_concrete" | "minecraft:orange_concrete" | "orange_concrete_powder" | "minecraft:orange_concrete_powder" | "orange_glazed_terracotta" | "minecraft:orange_glazed_terracotta" | "orange_shulker_box" | "minecraft:orange_shulker_box" | "orange_stained_glass" | "minecraft:orange_stained_glass" | "orange_stained_glass_pane" | "minecraft:orange_stained_glass_pane" | "orange_terracotta" | "minecraft:orange_terracotta" | "orange_tulip" | "minecraft:orange_tulip" | "orange_wall_banner" | "minecraft:orange_wall_banner" | "orange_wool" | "minecraft:orange_wool" | "oxeye_daisy" | "minecraft:oxeye_daisy" | "oxidized_copper" | "minecraft:oxidized_copper" | "oxidized_cut_copper" | "minecraft:oxidized_cut_copper" | "oxidized_cut_copper_slab" | "minecraft:oxidized_cut_copper_slab" | "oxidized_cut_copper_stairs" | "minecraft:oxidized_cut_copper_stairs" | "packed_ice" | "minecraft:packed_ice" | "peony" | "minecraft:peony" | "petrified_oak_slab" | "minecraft:petrified_oak_slab" | "pink_banner" | "minecraft:pink_banner" | "pink_bed" | "minecraft:pink_bed" | "pink_candle" | "minecraft:pink_candle" | "pink_candle_cake" | "minecraft:pink_candle_cake" | "pink_carpet" | "minecraft:pink_carpet" | "pink_concrete" | "minecraft:pink_concrete" | "pink_concrete_powder" | "minecraft:pink_concrete_powder" | "pink_glazed_terracotta" | "minecraft:pink_glazed_terracotta" | "pink_shulker_box" | "minecraft:pink_shulker_box" | "pink_stained_glass" | "minecraft:pink_stained_glass" | "pink_stained_glass_pane" | "minecraft:pink_stained_glass_pane" | "pink_terracotta" | "minecraft:pink_terracotta" | "pink_tulip" | "minecraft:pink_tulip" | "pink_wall_banner" | "minecraft:pink_wall_banner" | "pink_wool" | "minecraft:pink_wool" | "piston" | "minecraft:piston" | "piston_head" | "minecraft:piston_head" | "player_head" | "minecraft:player_head" | "player_wall_head" | "minecraft:player_wall_head" | "podzol" | "minecraft:podzol" | "pointed_dripstone" | "minecraft:pointed_dripstone" | "polished_andesite" | "minecraft:polished_andesite" | "polished_andesite_slab" | "minecraft:polished_andesite_slab" | "polished_andesite_stairs" | "minecraft:polished_andesite_stairs" | "polished_basalt" | "minecraft:polished_basalt" | "polished_blackstone" | "minecraft:polished_blackstone" | "polished_blackstone_brick_slab" | "minecraft:polished_blackstone_brick_slab" | "polished_blackstone_brick_stairs" | "minecraft:polished_blackstone_brick_stairs" | "polished_blackstone_brick_wall" | "minecraft:polished_blackstone_brick_wall" | "polished_blackstone_bricks" | "minecraft:polished_blackstone_bricks" | "polished_blackstone_button" | "minecraft:polished_blackstone_button" | "polished_blackstone_pressure_plate" | "minecraft:polished_blackstone_pressure_plate" | "polished_blackstone_slab" | "minecraft:polished_blackstone_slab" | "polished_blackstone_stairs" | "minecraft:polished_blackstone_stairs" | "polished_blackstone_wall" | "minecraft:polished_blackstone_wall" | "polished_deepslate" | "minecraft:polished_deepslate" | "polished_deepslate_slab" | "minecraft:polished_deepslate_slab" | "polished_deepslate_stairs" | "minecraft:polished_deepslate_stairs" | "polished_deepslate_wall" | "minecraft:polished_deepslate_wall" | "polished_diorite" | "minecraft:polished_diorite" | "polished_diorite_slab" | "minecraft:polished_diorite_slab" | "polished_diorite_stairs" | "minecraft:polished_diorite_stairs" | "polished_granite" | "minecraft:polished_granite" | "polished_granite_slab" | "minecraft:polished_granite_slab" | "polished_granite_stairs" | "minecraft:polished_granite_stairs" | "poppy" | "minecraft:poppy" | "potatoes" | "minecraft:potatoes" | "potted_acacia_sapling" | "minecraft:potted_acacia_sapling" | "potted_allium" | "minecraft:potted_allium" | "potted_azalea_bush" | "minecraft:potted_azalea_bush" | "potted_azure_bluet" | "minecraft:potted_azure_bluet" | "potted_bamboo" | "minecraft:potted_bamboo" | "potted_birch_sapling" | "minecraft:potted_birch_sapling" | "potted_blue_orchid" | "minecraft:potted_blue_orchid" | "potted_brown_mushroom" | "minecraft:potted_brown_mushroom" | "potted_cactus" | "minecraft:potted_cactus" | "potted_cornflower" | "minecraft:potted_cornflower" | "potted_crimson_fungus" | "minecraft:potted_crimson_fungus" | "potted_crimson_roots" | "minecraft:potted_crimson_roots" | "potted_dandelion" | "minecraft:potted_dandelion" | "potted_dark_oak_sapling" | "minecraft:potted_dark_oak_sapling" | "potted_dead_bush" | "minecraft:potted_dead_bush" | "potted_fern" | "minecraft:potted_fern" | "potted_flowering_azalea_bush" | "minecraft:potted_flowering_azalea_bush" | "potted_jungle_sapling" | "minecraft:potted_jungle_sapling" | "potted_lily_of_the_valley" | "minecraft:potted_lily_of_the_valley" | "potted_oak_sapling" | "minecraft:potted_oak_sapling" | "potted_orange_tulip" | "minecraft:potted_orange_tulip" | "potted_oxeye_daisy" | "minecraft:potted_oxeye_daisy" | "potted_pink_tulip" | "minecraft:potted_pink_tulip" | "potted_poppy" | "minecraft:potted_poppy" | "potted_red_mushroom" | "minecraft:potted_red_mushroom" | "potted_red_tulip" | "minecraft:potted_red_tulip" | "potted_spruce_sapling" | "minecraft:potted_spruce_sapling" | "potted_warped_fungus" | "minecraft:potted_warped_fungus" | "potted_warped_roots" | "minecraft:potted_warped_roots" | "potted_white_tulip" | "minecraft:potted_white_tulip" | "potted_wither_rose" | "minecraft:potted_wither_rose" | "powder_snow" | "minecraft:powder_snow" | "powder_snow_cauldron" | "minecraft:powder_snow_cauldron" | "powered_rail" | "minecraft:powered_rail" | "prismarine" | "minecraft:prismarine" | "prismarine_brick_slab" | "minecraft:prismarine_brick_slab" | "prismarine_brick_stairs" | "minecraft:prismarine_brick_stairs" | "prismarine_bricks" | "minecraft:prismarine_bricks" | "prismarine_slab" | "minecraft:prismarine_slab" | "prismarine_stairs" | "minecraft:prismarine_stairs" | "prismarine_wall" | "minecraft:prismarine_wall" | "pumpkin" | "minecraft:pumpkin" | "pumpkin_stem" | "minecraft:pumpkin_stem" | "purple_banner" | "minecraft:purple_banner" | "purple_bed" | "minecraft:purple_bed" | "purple_candle" | "minecraft:purple_candle" | "purple_candle_cake" | "minecraft:purple_candle_cake" | "purple_carpet" | "minecraft:purple_carpet" | "purple_concrete" | "minecraft:purple_concrete" | "purple_concrete_powder" | "minecraft:purple_concrete_powder" | "purple_glazed_terracotta" | "minecraft:purple_glazed_terracotta" | "purple_shulker_box" | "minecraft:purple_shulker_box" | "purple_stained_glass" | "minecraft:purple_stained_glass" | "purple_stained_glass_pane" | "minecraft:purple_stained_glass_pane" | "purple_terracotta" | "minecraft:purple_terracotta" | "purple_wall_banner" | "minecraft:purple_wall_banner" | "purple_wool" | "minecraft:purple_wool" | "purpur_block" | "minecraft:purpur_block" | "purpur_pillar" | "minecraft:purpur_pillar" | "purpur_slab" | "minecraft:purpur_slab" | "purpur_stairs" | "minecraft:purpur_stairs" | "quartz_block" | "minecraft:quartz_block" | "quartz_bricks" | "minecraft:quartz_bricks" | "quartz_pillar" | "minecraft:quartz_pillar" | "quartz_slab" | "minecraft:quartz_slab" | "quartz_stairs" | "minecraft:quartz_stairs" | "rail" | "minecraft:rail" | "raw_copper_block" | "minecraft:raw_copper_block" | "raw_gold_block" | "minecraft:raw_gold_block" | "raw_iron_block" | "minecraft:raw_iron_block" | "red_banner" | "minecraft:red_banner" | "red_bed" | "minecraft:red_bed" | "red_candle" | "minecraft:red_candle" | "red_candle_cake" | "minecraft:red_candle_cake" | "red_carpet" | "minecraft:red_carpet" | "red_concrete" | "minecraft:red_concrete" | "red_concrete_powder" | "minecraft:red_concrete_powder" | "red_glazed_terracotta" | "minecraft:red_glazed_terracotta" | "red_mushroom" | "minecraft:red_mushroom" | "red_mushroom_block" | "minecraft:red_mushroom_block" | "red_nether_brick_slab" | "minecraft:red_nether_brick_slab" | "red_nether_brick_stairs" | "minecraft:red_nether_brick_stairs" | "red_nether_brick_wall" | "minecraft:red_nether_brick_wall" | "red_nether_bricks" | "minecraft:red_nether_bricks" | "red_sand" | "minecraft:red_sand" | "red_sandstone" | "minecraft:red_sandstone" | "red_sandstone_slab" | "minecraft:red_sandstone_slab" | "red_sandstone_stairs" | "minecraft:red_sandstone_stairs" | "red_sandstone_wall" | "minecraft:red_sandstone_wall" | "red_shulker_box" | "minecraft:red_shulker_box" | "red_stained_glass" | "minecraft:red_stained_glass" | "red_stained_glass_pane" | "minecraft:red_stained_glass_pane" | "red_terracotta" | "minecraft:red_terracotta" | "red_tulip" | "minecraft:red_tulip" | "red_wall_banner" | "minecraft:red_wall_banner" | "red_wool" | "minecraft:red_wool" | "redstone_block" | "minecraft:redstone_block" | "redstone_lamp" | "minecraft:redstone_lamp" | "redstone_ore" | "minecraft:redstone_ore" | "redstone_torch" | "minecraft:redstone_torch" | "redstone_wall_torch" | "minecraft:redstone_wall_torch" | "redstone_wire" | "minecraft:redstone_wire" | "repeater" | "minecraft:repeater" | "repeating_command_block" | "minecraft:repeating_command_block" | "respawn_anchor" | "minecraft:respawn_anchor" | "rooted_dirt" | "minecraft:rooted_dirt" | "rose_bush" | "minecraft:rose_bush" | "sand" | "minecraft:sand" | "sandstone" | "minecraft:sandstone" | "sandstone_slab" | "minecraft:sandstone_slab" | "sandstone_stairs" | "minecraft:sandstone_stairs" | "sandstone_wall" | "minecraft:sandstone_wall" | "scaffolding" | "minecraft:scaffolding" | "sculk_sensor" | "minecraft:sculk_sensor" | "sea_lantern" | "minecraft:sea_lantern" | "sea_pickle" | "minecraft:sea_pickle" | "seagrass" | "minecraft:seagrass" | "shroomlight" | "minecraft:shroomlight" | "shulker_box" | "minecraft:shulker_box" | "skeleton_skull" | "minecraft:skeleton_skull" | "skeleton_wall_skull" | "minecraft:skeleton_wall_skull" | "slime_block" | "minecraft:slime_block" | "small_amethyst_bud" | "minecraft:small_amethyst_bud" | "small_dripleaf" | "minecraft:small_dripleaf" | "smithing_table" | "minecraft:smithing_table" | "smoker" | "minecraft:smoker" | "smooth_basalt" | "minecraft:smooth_basalt" | "smooth_quartz" | "minecraft:smooth_quartz" | "smooth_quartz_slab" | "minecraft:smooth_quartz_slab" | "smooth_quartz_stairs" | "minecraft:smooth_quartz_stairs" | "smooth_red_sandstone" | "minecraft:smooth_red_sandstone" | "smooth_red_sandstone_slab" | "minecraft:smooth_red_sandstone_slab" | "smooth_red_sandstone_stairs" | "minecraft:smooth_red_sandstone_stairs" | "smooth_sandstone" | "minecraft:smooth_sandstone" | "smooth_sandstone_slab" | "minecraft:smooth_sandstone_slab" | "smooth_sandstone_stairs" | "minecraft:smooth_sandstone_stairs" | "smooth_stone" | "minecraft:smooth_stone" | "smooth_stone_slab" | "minecraft:smooth_stone_slab" | "snow" | "minecraft:snow" | "snow_block" | "minecraft:snow_block" | "soul_campfire" | "minecraft:soul_campfire" | "soul_fire" | "minecraft:soul_fire" | "soul_lantern" | "minecraft:soul_lantern" | "soul_sand" | "minecraft:soul_sand" | "soul_soil" | "minecraft:soul_soil" | "soul_torch" | "minecraft:soul_torch" | "soul_wall_torch" | "minecraft:soul_wall_torch" | "spawner" | "minecraft:spawner" | "sponge" | "minecraft:sponge" | "spore_blossom" | "minecraft:spore_blossom" | "spruce_button" | "minecraft:spruce_button" | "spruce_door" | "minecraft:spruce_door" | "spruce_fence" | "minecraft:spruce_fence" | "spruce_fence_gate" | "minecraft:spruce_fence_gate" | "spruce_leaves" | "minecraft:spruce_leaves" | "spruce_log" | "minecraft:spruce_log" | "spruce_planks" | "minecraft:spruce_planks" | "spruce_pressure_plate" | "minecraft:spruce_pressure_plate" | "spruce_sapling" | "minecraft:spruce_sapling" | "spruce_sign" | "minecraft:spruce_sign" | "spruce_slab" | "minecraft:spruce_slab" | "spruce_stairs" | "minecraft:spruce_stairs" | "spruce_trapdoor" | "minecraft:spruce_trapdoor" | "spruce_wall_sign" | "minecraft:spruce_wall_sign" | "spruce_wood" | "minecraft:spruce_wood" | "sticky_piston" | "minecraft:sticky_piston" | "stone" | "minecraft:stone" | "stone_brick_slab" | "minecraft:stone_brick_slab" | "stone_brick_stairs" | "minecraft:stone_brick_stairs" | "stone_brick_wall" | "minecraft:stone_brick_wall" | "stone_bricks" | "minecraft:stone_bricks" | "stone_button" | "minecraft:stone_button" | "stone_pressure_plate" | "minecraft:stone_pressure_plate" | "stone_slab" | "minecraft:stone_slab" | "stone_stairs" | "minecraft:stone_stairs" | "stonecutter" | "minecraft:stonecutter" | "stripped_acacia_log" | "minecraft:stripped_acacia_log" | "stripped_acacia_wood" | "minecraft:stripped_acacia_wood" | "stripped_birch_log" | "minecraft:stripped_birch_log" | "stripped_birch_wood" | "minecraft:stripped_birch_wood" | "stripped_crimson_hyphae" | "minecraft:stripped_crimson_hyphae" | "stripped_crimson_stem" | "minecraft:stripped_crimson_stem" | "stripped_dark_oak_log" | "minecraft:stripped_dark_oak_log" | "stripped_dark_oak_wood" | "minecraft:stripped_dark_oak_wood" | "stripped_jungle_log" | "minecraft:stripped_jungle_log" | "stripped_jungle_wood" | "minecraft:stripped_jungle_wood" | "stripped_oak_log" | "minecraft:stripped_oak_log" | "stripped_oak_wood" | "minecraft:stripped_oak_wood" | "stripped_spruce_log" | "minecraft:stripped_spruce_log" | "stripped_spruce_wood" | "minecraft:stripped_spruce_wood" | "stripped_warped_hyphae" | "minecraft:stripped_warped_hyphae" | "stripped_warped_stem" | "minecraft:stripped_warped_stem" | "structure_block" | "minecraft:structure_block" | "structure_void" | "minecraft:structure_void" | "sugar_cane" | "minecraft:sugar_cane" | "sunflower" | "minecraft:sunflower" | "sweet_berry_bush" | "minecraft:sweet_berry_bush" | "tall_grass" | "minecraft:tall_grass" | "tall_seagrass" | "minecraft:tall_seagrass" | "target" | "minecraft:target" | "terracotta" | "minecraft:terracotta" | "tinted_glass" | "minecraft:tinted_glass" | "tnt" | "minecraft:tnt" | "torch" | "minecraft:torch" | "trapped_chest" | "minecraft:trapped_chest" | "tripwire" | "minecraft:tripwire" | "tripwire_hook" | "minecraft:tripwire_hook" | "tube_coral" | "minecraft:tube_coral" | "tube_coral_block" | "minecraft:tube_coral_block" | "tube_coral_fan" | "minecraft:tube_coral_fan" | "tube_coral_wall_fan" | "minecraft:tube_coral_wall_fan" | "tuff" | "minecraft:tuff" | "turtle_egg" | "minecraft:turtle_egg" | "twisting_vines" | "minecraft:twisting_vines" | "twisting_vines_plant" | "minecraft:twisting_vines_plant" | "vine" | "minecraft:vine" | "void_air" | "minecraft:void_air" | "wall_torch" | "minecraft:wall_torch" | "warped_button" | "minecraft:warped_button" | "warped_door" | "minecraft:warped_door" | "warped_fence" | "minecraft:warped_fence" | "warped_fence_gate" | "minecraft:warped_fence_gate" | "warped_fungus" | "minecraft:warped_fungus" | "warped_hyphae" | "minecraft:warped_hyphae" | "warped_nylium" | "minecraft:warped_nylium" | "warped_planks" | "minecraft:warped_planks" | "warped_pressure_plate" | "minecraft:warped_pressure_plate" | "warped_roots" | "minecraft:warped_roots" | "warped_sign" | "minecraft:warped_sign" | "warped_slab" | "minecraft:warped_slab" | "warped_stairs" | "minecraft:warped_stairs" | "warped_stem" | "minecraft:warped_stem" | "warped_trapdoor" | "minecraft:warped_trapdoor" | "warped_wall_sign" | "minecraft:warped_wall_sign" | "warped_wart_block" | "minecraft:warped_wart_block" | "water" | "minecraft:water" | "water_cauldron" | "minecraft:water_cauldron" | "waxed_copper_block" | "minecraft:waxed_copper_block" | "waxed_cut_copper" | "minecraft:waxed_cut_copper" | "waxed_cut_copper_slab" | "minecraft:waxed_cut_copper_slab" | "waxed_cut_copper_stairs" | "minecraft:waxed_cut_copper_stairs" | "waxed_exposed_copper" | "minecraft:waxed_exposed_copper" | "waxed_exposed_cut_copper" | "minecraft:waxed_exposed_cut_copper" | "waxed_exposed_cut_copper_slab" | "minecraft:waxed_exposed_cut_copper_slab" | "waxed_exposed_cut_copper_stairs" | "minecraft:waxed_exposed_cut_copper_stairs" | "waxed_oxidized_copper" | "minecraft:waxed_oxidized_copper" | "waxed_oxidized_cut_copper" | "minecraft:waxed_oxidized_cut_copper" | "waxed_oxidized_cut_copper_slab" | "minecraft:waxed_oxidized_cut_copper_slab" | "waxed_oxidized_cut_copper_stairs" | "minecraft:waxed_oxidized_cut_copper_stairs" | "waxed_weathered_copper" | "minecraft:waxed_weathered_copper" | "waxed_weathered_cut_copper" | "minecraft:waxed_weathered_cut_copper" | "waxed_weathered_cut_copper_slab" | "minecraft:waxed_weathered_cut_copper_slab" | "waxed_weathered_cut_copper_stairs" | "minecraft:waxed_weathered_cut_copper_stairs" | "weathered_copper" | "minecraft:weathered_copper" | "weathered_cut_copper" | "minecraft:weathered_cut_copper" | "weathered_cut_copper_slab" | "minecraft:weathered_cut_copper_slab" | "weathered_cut_copper_stairs" | "minecraft:weathered_cut_copper_stairs" | "weeping_vines" | "minecraft:weeping_vines" | "weeping_vines_plant" | "minecraft:weeping_vines_plant" | "wet_sponge" | "minecraft:wet_sponge" | "wheat" | "minecraft:wheat" | "white_banner" | "minecraft:white_banner" | "white_bed" | "minecraft:white_bed" | "white_candle" | "minecraft:white_candle" | "white_candle_cake" | "minecraft:white_candle_cake" | "white_carpet" | "minecraft:white_carpet" | "white_concrete" | "minecraft:white_concrete" | "white_concrete_powder" | "minecraft:white_concrete_powder" | "white_glazed_terracotta" | "minecraft:white_glazed_terracotta" | "white_shulker_box" | "minecraft:white_shulker_box" | "white_stained_glass" | "minecraft:white_stained_glass" | "white_stained_glass_pane" | "minecraft:white_stained_glass_pane" | "white_terracotta" | "minecraft:white_terracotta" | "white_tulip" | "minecraft:white_tulip" | "white_wall_banner" | "minecraft:white_wall_banner" | "white_wool" | "minecraft:white_wool" | "wither_rose" | "minecraft:wither_rose" | "wither_skeleton_skull" | "minecraft:wither_skeleton_skull" | "wither_skeleton_wall_skull" | "minecraft:wither_skeleton_wall_skull" | "yellow_banner" | "minecraft:yellow_banner" | "yellow_bed" | "minecraft:yellow_bed" | "yellow_candle" | "minecraft:yellow_candle" | "yellow_candle_cake" | "minecraft:yellow_candle_cake" | "yellow_carpet" | "minecraft:yellow_carpet" | "yellow_concrete" | "minecraft:yellow_concrete" | "yellow_concrete_powder" | "minecraft:yellow_concrete_powder" | "yellow_glazed_terracotta" | "minecraft:yellow_glazed_terracotta" | "yellow_shulker_box" | "minecraft:yellow_shulker_box" | "yellow_stained_glass" | "minecraft:yellow_stained_glass" | "yellow_stained_glass_pane" | "minecraft:yellow_stained_glass_pane" | "yellow_terracotta" | "minecraft:yellow_terracotta" | "yellow_wall_banner" | "minecraft:yellow_wall_banner" | "yellow_wool" | "minecraft:yellow_wool" | "zombie_head" | "minecraft:zombie_head" | "zombie_wall_head" | "minecraft:zombie_wall_head" | "custommachinery:custom_machine_block";
    type Enchantment = "create:capacity" | "create:potato_recovery" | "aqua_affinity" | "minecraft:aqua_affinity" | "bane_of_arthropods" | "minecraft:bane_of_arthropods" | "binding_curse" | "minecraft:binding_curse" | "blast_protection" | "minecraft:blast_protection" | "channeling" | "minecraft:channeling" | "depth_strider" | "minecraft:depth_strider" | "efficiency" | "minecraft:efficiency" | "feather_falling" | "minecraft:feather_falling" | "fire_aspect" | "minecraft:fire_aspect" | "fire_protection" | "minecraft:fire_protection" | "flame" | "minecraft:flame" | "fortune" | "minecraft:fortune" | "frost_walker" | "minecraft:frost_walker" | "impaling" | "minecraft:impaling" | "infinity" | "minecraft:infinity" | "knockback" | "minecraft:knockback" | "looting" | "minecraft:looting" | "loyalty" | "minecraft:loyalty" | "luck_of_the_sea" | "minecraft:luck_of_the_sea" | "lure" | "minecraft:lure" | "mending" | "minecraft:mending" | "multishot" | "minecraft:multishot" | "piercing" | "minecraft:piercing" | "power" | "minecraft:power" | "projectile_protection" | "minecraft:projectile_protection" | "protection" | "minecraft:protection" | "punch" | "minecraft:punch" | "quick_charge" | "minecraft:quick_charge" | "respiration" | "minecraft:respiration" | "riptide" | "minecraft:riptide" | "sharpness" | "minecraft:sharpness" | "silk_touch" | "minecraft:silk_touch" | "smite" | "minecraft:smite" | "soul_speed" | "minecraft:soul_speed" | "sweeping" | "minecraft:sweeping" | "thorns" | "minecraft:thorns" | "unbreaking" | "minecraft:unbreaking" | "vanishing_curse" | "minecraft:vanishing_curse";
    type EntityType = "ae2:charged_quartz" | "ae2:growing_crystal" | "ae2:singularity" | "ae2:tiny_tnt_primed" | "botania:babylon_weapon" | "botania:corporea_spark" | "botania:doppleganger" | "botania:ender_air" | "botania:ender_air_bottle" | "botania:falling_star" | "botania:flame_ring" | "botania:magic_landmine" | "botania:magic_missile" | "botania:mana_burst" | "botania:mana_storm" | "botania:pink_wither" | "botania:pixie" | "botania:player_mover" | "botania:pool_minecart" | "botania:spark" | "botania:thorn_chakram" | "botania:thrown_item" | "botania:vine_ball" | "create:carriage_contraption" | "create:contraption" | "create:crafting_blueprint" | "create:gantry_contraption" | "create:potato_projectile" | "create:seat" | "create:stationary_contraption" | "create:super_glue" | "lootr:lootr_minecart" | "area_effect_cloud" | "minecraft:area_effect_cloud" | "armor_stand" | "minecraft:armor_stand" | "arrow" | "minecraft:arrow" | "axolotl" | "minecraft:axolotl" | "bat" | "minecraft:bat" | "bee" | "minecraft:bee" | "blaze" | "minecraft:blaze" | "boat" | "minecraft:boat" | "cat" | "minecraft:cat" | "cave_spider" | "minecraft:cave_spider" | "chest_minecart" | "minecraft:chest_minecart" | "chicken" | "minecraft:chicken" | "cod" | "minecraft:cod" | "command_block_minecart" | "minecraft:command_block_minecart" | "cow" | "minecraft:cow" | "creeper" | "minecraft:creeper" | "dolphin" | "minecraft:dolphin" | "donkey" | "minecraft:donkey" | "dragon_fireball" | "minecraft:dragon_fireball" | "drowned" | "minecraft:drowned" | "egg" | "minecraft:egg" | "elder_guardian" | "minecraft:elder_guardian" | "end_crystal" | "minecraft:end_crystal" | "ender_dragon" | "minecraft:ender_dragon" | "ender_pearl" | "minecraft:ender_pearl" | "enderman" | "minecraft:enderman" | "endermite" | "minecraft:endermite" | "evoker" | "minecraft:evoker" | "evoker_fangs" | "minecraft:evoker_fangs" | "experience_bottle" | "minecraft:experience_bottle" | "experience_orb" | "minecraft:experience_orb" | "eye_of_ender" | "minecraft:eye_of_ender" | "falling_block" | "minecraft:falling_block" | "fireball" | "minecraft:fireball" | "firework_rocket" | "minecraft:firework_rocket" | "fishing_bobber" | "minecraft:fishing_bobber" | "fox" | "minecraft:fox" | "furnace_minecart" | "minecraft:furnace_minecart" | "ghast" | "minecraft:ghast" | "giant" | "minecraft:giant" | "glow_item_frame" | "minecraft:glow_item_frame" | "glow_squid" | "minecraft:glow_squid" | "goat" | "minecraft:goat" | "guardian" | "minecraft:guardian" | "hoglin" | "minecraft:hoglin" | "hopper_minecart" | "minecraft:hopper_minecart" | "horse" | "minecraft:horse" | "husk" | "minecraft:husk" | "illusioner" | "minecraft:illusioner" | "iron_golem" | "minecraft:iron_golem" | "item" | "minecraft:item" | "item_frame" | "minecraft:item_frame" | "leash_knot" | "minecraft:leash_knot" | "lightning_bolt" | "minecraft:lightning_bolt" | "llama" | "minecraft:llama" | "llama_spit" | "minecraft:llama_spit" | "magma_cube" | "minecraft:magma_cube" | "marker" | "minecraft:marker" | "minecart" | "minecraft:minecart" | "mooshroom" | "minecraft:mooshroom" | "mule" | "minecraft:mule" | "ocelot" | "minecraft:ocelot" | "painting" | "minecraft:painting" | "panda" | "minecraft:panda" | "parrot" | "minecraft:parrot" | "phantom" | "minecraft:phantom" | "pig" | "minecraft:pig" | "piglin" | "minecraft:piglin" | "piglin_brute" | "minecraft:piglin_brute" | "pillager" | "minecraft:pillager" | "player" | "minecraft:player" | "polar_bear" | "minecraft:polar_bear" | "potion" | "minecraft:potion" | "pufferfish" | "minecraft:pufferfish" | "rabbit" | "minecraft:rabbit" | "ravager" | "minecraft:ravager" | "salmon" | "minecraft:salmon" | "sheep" | "minecraft:sheep" | "shulker" | "minecraft:shulker" | "shulker_bullet" | "minecraft:shulker_bullet" | "silverfish" | "minecraft:silverfish" | "skeleton" | "minecraft:skeleton" | "skeleton_horse" | "minecraft:skeleton_horse" | "slime" | "minecraft:slime" | "small_fireball" | "minecraft:small_fireball" | "snow_golem" | "minecraft:snow_golem" | "snowball" | "minecraft:snowball" | "spawner_minecart" | "minecraft:spawner_minecart" | "spectral_arrow" | "minecraft:spectral_arrow" | "spider" | "minecraft:spider" | "squid" | "minecraft:squid" | "stray" | "minecraft:stray" | "strider" | "minecraft:strider" | "tnt" | "minecraft:tnt" | "tnt_minecart" | "minecraft:tnt_minecart" | "trader_llama" | "minecraft:trader_llama" | "trident" | "minecraft:trident" | "tropical_fish" | "minecraft:tropical_fish" | "turtle" | "minecraft:turtle" | "vex" | "minecraft:vex" | "villager" | "minecraft:villager" | "vindicator" | "minecraft:vindicator" | "wandering_trader" | "minecraft:wandering_trader" | "witch" | "minecraft:witch" | "wither" | "minecraft:wither" | "wither_skeleton" | "minecraft:wither_skeleton" | "wither_skull" | "minecraft:wither_skull" | "wolf" | "minecraft:wolf" | "zoglin" | "minecraft:zoglin" | "zombie" | "minecraft:zombie" | "zombie_horse" | "minecraft:zombie_horse" | "zombie_villager" | "minecraft:zombie_villager" | "zombified_piglin" | "minecraft:zombified_piglin" | "tiab:time_accelerator_entity_type";
    type Item = "ae2:16k_crafting_storage" | "ae2:1k_crafting_storage" | "ae2:256k_crafting_storage" | "ae2:4k_crafting_storage" | "ae2:64k_crafting_storage" | "ae2:advanced_card" | "ae2:annihilation_core" | "ae2:annihilation_plane" | "ae2:basic_card" | "ae2:biometric_card" | "ae2:black_covered_cable" | "ae2:black_covered_dense_cable" | "ae2:black_glass_cable" | "ae2:black_lumen_paint_ball" | "ae2:black_paint_ball" | "ae2:black_smart_cable" | "ae2:black_smart_dense_cable" | "ae2:blank_pattern" | "ae2:blue_covered_cable" | "ae2:blue_covered_dense_cable" | "ae2:blue_glass_cable" | "ae2:blue_lumen_paint_ball" | "ae2:blue_paint_ball" | "ae2:blue_smart_cable" | "ae2:blue_smart_dense_cable" | "ae2:brown_covered_cable" | "ae2:brown_covered_dense_cable" | "ae2:brown_glass_cable" | "ae2:brown_lumen_paint_ball" | "ae2:brown_paint_ball" | "ae2:brown_smart_cable" | "ae2:brown_smart_dense_cable" | "ae2:cable_anchor" | "ae2:cable_bus" | "ae2:cable_energy_acceptor" | "ae2:cable_interface" | "ae2:cable_pattern_provider" | "ae2:calculation_processor" | "ae2:calculation_processor_press" | "ae2:capacity_card" | "ae2:cell_component_16k" | "ae2:cell_component_1k" | "ae2:cell_component_256k" | "ae2:cell_component_4k" | "ae2:cell_component_64k" | "ae2:cell_workbench" | "ae2:certus_crystal_seed" | "ae2:certus_quartz_axe" | "ae2:certus_quartz_crystal" | "ae2:certus_quartz_cutting_knife" | "ae2:certus_quartz_dust" | "ae2:certus_quartz_hoe" | "ae2:certus_quartz_pickaxe" | "ae2:certus_quartz_shovel" | "ae2:certus_quartz_sword" | "ae2:certus_quartz_wrench" | "ae2:charged_certus_quartz_crystal" | "ae2:charged_staff" | "ae2:charger" | "ae2:chest" | "ae2:chiseled_quartz_block" | "ae2:chiseled_quartz_slab" | "ae2:chiseled_quartz_stairs" | "ae2:chiseled_quartz_wall" | "ae2:color_applicator" | "ae2:condenser" | "ae2:controller" | "ae2:conversion_monitor" | "ae2:crafting_accelerator" | "ae2:crafting_card" | "ae2:crafting_monitor" | "ae2:crafting_pattern" | "ae2:crafting_terminal" | "ae2:crafting_unit" | "ae2:creative_energy_cell" | "ae2:creative_fluid_cell" | "ae2:creative_item_cell" | "ae2:cyan_covered_cable" | "ae2:cyan_covered_dense_cable" | "ae2:cyan_glass_cable" | "ae2:cyan_lumen_paint_ball" | "ae2:cyan_paint_ball" | "ae2:cyan_smart_cable" | "ae2:cyan_smart_dense_cable" | "ae2:dark_monitor" | "ae2:debug_card" | "ae2:debug_chunk_loader" | "ae2:debug_cube_gen" | "ae2:debug_energy_gen" | "ae2:debug_eraser" | "ae2:debug_item_gen" | "ae2:debug_meteorite_placer" | "ae2:debug_phantom_node" | "ae2:debug_replicator_card" | "ae2:deepslate_quartz_ore" | "ae2:dense_energy_cell" | "ae2:drive" | "ae2:ender_dust" | "ae2:energy_acceptor" | "ae2:energy_card" | "ae2:energy_cell" | "ae2:energy_level_emitter" | "ae2:engineering_processor" | "ae2:engineering_processor_press" | "ae2:entropy_manipulator" | "ae2:equal_distribution_card" | "ae2:export_bus" | "ae2:facade" | "ae2:fe_p2p_tunnel" | "ae2:fluid_cell_housing" | "ae2:fluid_p2p_tunnel" | "ae2:fluid_storage_cell_16k" | "ae2:fluid_storage_cell_1k" | "ae2:fluid_storage_cell_256k" | "ae2:fluid_storage_cell_4k" | "ae2:fluid_storage_cell_64k" | "ae2:fluix_axe" | "ae2:fluix_block" | "ae2:fluix_covered_cable" | "ae2:fluix_covered_dense_cable" | "ae2:fluix_crystal" | "ae2:fluix_crystal_seed" | "ae2:fluix_dust" | "ae2:fluix_glass_cable" | "ae2:fluix_hoe" | "ae2:fluix_pearl" | "ae2:fluix_pickaxe" | "ae2:fluix_shovel" | "ae2:fluix_slab" | "ae2:fluix_smart_cable" | "ae2:fluix_smart_dense_cable" | "ae2:fluix_stairs" | "ae2:fluix_sword" | "ae2:fluix_wall" | "ae2:formation_core" | "ae2:formation_plane" | "ae2:fuzzy_card" | "ae2:gray_covered_cable" | "ae2:gray_covered_dense_cable" | "ae2:gray_glass_cable" | "ae2:gray_lumen_paint_ball" | "ae2:gray_paint_ball" | "ae2:gray_smart_cable" | "ae2:gray_smart_dense_cable" | "ae2:green_covered_cable" | "ae2:green_covered_dense_cable" | "ae2:green_glass_cable" | "ae2:green_lumen_paint_ball" | "ae2:green_paint_ball" | "ae2:green_smart_cable" | "ae2:green_smart_dense_cable" | "ae2:identity_annihilation_plane" | "ae2:import_bus" | "ae2:inscriber" | "ae2:interface" | "ae2:inverted_toggle_bus" | "ae2:inverter_card" | "ae2:io_port" | "ae2:item_cell_housing" | "ae2:item_p2p_tunnel" | "ae2:item_storage_cell_16k" | "ae2:item_storage_cell_1k" | "ae2:item_storage_cell_256k" | "ae2:item_storage_cell_4k" | "ae2:item_storage_cell_64k" | "ae2:level_emitter" | "ae2:light_blue_covered_cable" | "ae2:light_blue_covered_dense_cable" | "ae2:light_blue_glass_cable" | "ae2:light_blue_lumen_paint_ball" | "ae2:light_blue_paint_ball" | "ae2:light_blue_smart_cable" | "ae2:light_blue_smart_dense_cable" | "ae2:light_detector" | "ae2:light_gray_covered_cable" | "ae2:light_gray_covered_dense_cable" | "ae2:light_gray_glass_cable" | "ae2:light_gray_lumen_paint_ball" | "ae2:light_gray_paint_ball" | "ae2:light_gray_smart_cable" | "ae2:light_gray_smart_dense_cable" | "ae2:light_p2p_tunnel" | "ae2:lime_covered_cable" | "ae2:lime_covered_dense_cable" | "ae2:lime_glass_cable" | "ae2:lime_lumen_paint_ball" | "ae2:lime_paint_ball" | "ae2:lime_smart_cable" | "ae2:lime_smart_dense_cable" | "ae2:logic_processor" | "ae2:logic_processor_press" | "ae2:magenta_covered_cable" | "ae2:magenta_covered_dense_cable" | "ae2:magenta_glass_cable" | "ae2:magenta_lumen_paint_ball" | "ae2:magenta_paint_ball" | "ae2:magenta_smart_cable" | "ae2:magenta_smart_dense_cable" | "ae2:matrix_frame" | "ae2:matter_ball" | "ae2:matter_cannon" | "ae2:me_p2p_tunnel" | "ae2:memory_card" | "ae2:memory_card_black" | "ae2:memory_card_blue" | "ae2:memory_card_brown" | "ae2:memory_card_cyan" | "ae2:memory_card_gray" | "ae2:memory_card_green" | "ae2:memory_card_light_blue" | "ae2:memory_card_light_gray" | "ae2:memory_card_lime" | "ae2:memory_card_magenta" | "ae2:memory_card_orange" | "ae2:memory_card_pink" | "ae2:memory_card_purple" | "ae2:memory_card_red" | "ae2:memory_card_white" | "ae2:memory_card_yellow" | "ae2:molecular_assembler" | "ae2:monitor" | "ae2:name_press" | "ae2:nether_quartz_axe" | "ae2:nether_quartz_cutting_knife" | "ae2:nether_quartz_hoe" | "ae2:nether_quartz_pickaxe" | "ae2:nether_quartz_shovel" | "ae2:nether_quartz_sword" | "ae2:nether_quartz_wrench" | "ae2:network_tool" | "ae2:orange_covered_cable" | "ae2:orange_covered_dense_cable" | "ae2:orange_glass_cable" | "ae2:orange_lumen_paint_ball" | "ae2:orange_paint_ball" | "ae2:orange_smart_cable" | "ae2:orange_smart_dense_cable" | "ae2:paint" | "ae2:pattern_access_terminal" | "ae2:pattern_encoding_terminal" | "ae2:pattern_provider" | "ae2:pink_covered_cable" | "ae2:pink_covered_dense_cable" | "ae2:pink_glass_cable" | "ae2:pink_lumen_paint_ball" | "ae2:pink_paint_ball" | "ae2:pink_smart_cable" | "ae2:pink_smart_dense_cable" | "ae2:portable_fluid_cell_16k" | "ae2:portable_fluid_cell_1k" | "ae2:portable_fluid_cell_256k" | "ae2:portable_fluid_cell_4k" | "ae2:portable_fluid_cell_64k" | "ae2:portable_item_cell_16k" | "ae2:portable_item_cell_1k" | "ae2:portable_item_cell_256k" | "ae2:portable_item_cell_4k" | "ae2:portable_item_cell_64k" | "ae2:printed_calculation_processor" | "ae2:printed_engineering_processor" | "ae2:printed_logic_processor" | "ae2:printed_silicon" | "ae2:processing_pattern" | "ae2:purple_covered_cable" | "ae2:purple_covered_dense_cable" | "ae2:purple_glass_cable" | "ae2:purple_lumen_paint_ball" | "ae2:purple_paint_ball" | "ae2:purple_smart_cable" | "ae2:purple_smart_dense_cable" | "ae2:quantum_entangled_singularity" | "ae2:quantum_link" | "ae2:quantum_ring" | "ae2:quartz_block" | "ae2:quartz_fiber" | "ae2:quartz_fixture" | "ae2:quartz_glass" | "ae2:quartz_growth_accelerator" | "ae2:quartz_ore" | "ae2:quartz_pillar" | "ae2:quartz_pillar_slab" | "ae2:quartz_pillar_stairs" | "ae2:quartz_pillar_wall" | "ae2:quartz_slab" | "ae2:quartz_stairs" | "ae2:quartz_vibrant_glass" | "ae2:quartz_wall" | "ae2:red_covered_cable" | "ae2:red_covered_dense_cable" | "ae2:red_glass_cable" | "ae2:red_lumen_paint_ball" | "ae2:red_paint_ball" | "ae2:red_smart_cable" | "ae2:red_smart_dense_cable" | "ae2:redstone_card" | "ae2:redstone_p2p_tunnel" | "ae2:security_station" | "ae2:semi_dark_monitor" | "ae2:silicon" | "ae2:silicon_press" | "ae2:singularity" | "ae2:sky_compass" | "ae2:sky_dust" | "ae2:sky_stone_block" | "ae2:sky_stone_brick" | "ae2:sky_stone_brick_slab" | "ae2:sky_stone_brick_stairs" | "ae2:sky_stone_brick_wall" | "ae2:sky_stone_chest" | "ae2:sky_stone_slab" | "ae2:sky_stone_small_brick" | "ae2:sky_stone_small_brick_slab" | "ae2:sky_stone_small_brick_stairs" | "ae2:sky_stone_small_brick_wall" | "ae2:sky_stone_stairs" | "ae2:sky_stone_tank" | "ae2:sky_stone_wall" | "ae2:smooth_sky_stone_block" | "ae2:smooth_sky_stone_chest" | "ae2:smooth_sky_stone_slab" | "ae2:smooth_sky_stone_stairs" | "ae2:smooth_sky_stone_wall" | "ae2:spatial_anchor" | "ae2:spatial_cell_component_128" | "ae2:spatial_cell_component_16" | "ae2:spatial_cell_component_2" | "ae2:spatial_io_port" | "ae2:spatial_pylon" | "ae2:spatial_storage_cell_128" | "ae2:spatial_storage_cell_16" | "ae2:spatial_storage_cell_2" | "ae2:speed_card" | "ae2:storage_bus" | "ae2:storage_monitor" | "ae2:terminal" | "ae2:tiny_tnt" | "ae2:toggle_bus" | "ae2:vibration_chamber" | "ae2:view_cell" | "ae2:void_card" | "ae2:white_covered_cable" | "ae2:white_covered_dense_cable" | "ae2:white_glass_cable" | "ae2:white_lumen_paint_ball" | "ae2:white_paint_ball" | "ae2:white_smart_cable" | "ae2:white_smart_dense_cable" | "ae2:wireless_access_point" | "ae2:wireless_booster" | "ae2:wireless_crafting_terminal" | "ae2:wireless_receiver" | "ae2:wireless_terminal" | "ae2:wrapped_generic_stack" | "ae2:yellow_covered_cable" | "ae2:yellow_covered_dense_cable" | "ae2:yellow_glass_cable" | "ae2:yellow_lumen_paint_ball" | "ae2:yellow_paint_ball" | "ae2:yellow_smart_cable" | "ae2:yellow_smart_dense_cable" | "appbot:mana_p2p_tunnel" | "botania:abstruse_platform" | "botania:agricarnation" | "botania:agricarnation_chibi" | "botania:alchemy_catalyst" | "botania:alfheim_portal" | "botania:ancient_will_ahrim" | "botania:ancient_will_dharok" | "botania:ancient_will_guthan" | "botania:ancient_will_karil" | "botania:ancient_will_torag" | "botania:ancient_will_verac" | "botania:animated_torch" | "botania:apothecary_default" | "botania:apothecary_desert" | "botania:apothecary_forest" | "botania:apothecary_fungal" | "botania:apothecary_mesa" | "botania:apothecary_mossy" | "botania:apothecary_mountain" | "botania:apothecary_plains" | "botania:apothecary_swamp" | "botania:apothecary_taiga" | "botania:astrolabe" | "botania:aura_ring" | "botania:aura_ring_greater" | "botania:auto_crafting_halo" | "botania:avatar" | "botania:azulejo_0" | "botania:azulejo_1" | "botania:azulejo_10" | "botania:azulejo_11" | "botania:azulejo_12" | "botania:azulejo_13" | "botania:azulejo_14" | "botania:azulejo_15" | "botania:azulejo_2" | "botania:azulejo_3" | "botania:azulejo_4" | "botania:azulejo_5" | "botania:azulejo_6" | "botania:azulejo_7" | "botania:azulejo_8" | "botania:azulejo_9" | "botania:balance_cloak" | "botania:bauble_box" | "botania:bellethorn" | "botania:bellethorn_chibi" | "botania:bellows" | "botania:bergamute" | "botania:bifrost_pane" | "botania:bifrost_perm" | "botania:black_double_flower" | "botania:black_floating_flower" | "botania:black_hole_talisman" | "botania:black_lotus" | "botania:black_mushroom" | "botania:black_mystical_flower" | "botania:black_pavement" | "botania:black_pavement_slab" | "botania:black_pavement_stairs" | "botania:black_petal" | "botania:black_petal_block" | "botania:black_shiny_flower" | "botania:blacker_lotus" | "botania:blaze_block" | "botania:blaze_quartz" | "botania:blaze_quartz_pillar" | "botania:blaze_quartz_slab" | "botania:blaze_quartz_stairs" | "botania:blood_pendant" | "botania:blue_double_flower" | "botania:blue_floating_flower" | "botania:blue_mushroom" | "botania:blue_mystical_flower" | "botania:blue_pavement" | "botania:blue_pavement_slab" | "botania:blue_pavement_stairs" | "botania:blue_petal" | "botania:blue_petal_block" | "botania:blue_shiny_flower" | "botania:brew_flask" | "botania:brew_vial" | "botania:brewery" | "botania:brown_double_flower" | "botania:brown_floating_flower" | "botania:brown_mushroom" | "botania:brown_mystical_flower" | "botania:brown_petal" | "botania:brown_petal_block" | "botania:brown_shiny_flower" | "botania:bubbell" | "botania:bubbell_chibi" | "botania:cacophonium" | "botania:cacophonium_block" | "botania:cell_block" | "botania:chiseled_blaze_quartz" | "botania:chiseled_dark_quartz" | "botania:chiseled_elf_quartz" | "botania:chiseled_lavender_quartz" | "botania:chiseled_livingrock_bricks" | "botania:chiseled_mana_quartz" | "botania:chiseled_metamorphic_desert_bricks" | "botania:chiseled_metamorphic_forest_bricks" | "botania:chiseled_metamorphic_fungal_bricks" | "botania:chiseled_metamorphic_mesa_bricks" | "botania:chiseled_metamorphic_mountain_bricks" | "botania:chiseled_metamorphic_plains_bricks" | "botania:chiseled_metamorphic_swamp_bricks" | "botania:chiseled_metamorphic_taiga_bricks" | "botania:chiseled_red_quartz" | "botania:chiseled_sunny_quartz" | "botania:clayconia" | "botania:clayconia_chibi" | "botania:clip" | "botania:cloud_pendant" | "botania:cobble_rod" | "botania:cocoon" | "botania:conjuration_catalyst" | "botania:corporea_block" | "botania:corporea_brick" | "botania:corporea_brick_slab" | "botania:corporea_brick_stairs" | "botania:corporea_brick_wall" | "botania:corporea_crystal_cube" | "botania:corporea_funnel" | "botania:corporea_index" | "botania:corporea_interceptor" | "botania:corporea_retainer" | "botania:corporea_slab" | "botania:corporea_spark" | "botania:corporea_spark_creative" | "botania:corporea_spark_master" | "botania:corporea_stairs" | "botania:cosmetic_alien_antenna" | "botania:cosmetic_anaglyph_glasses" | "botania:cosmetic_ancient_mask" | "botania:cosmetic_black_bowtie" | "botania:cosmetic_black_tie" | "botania:cosmetic_blue_butterfly" | "botania:cosmetic_botanist_emblem" | "botania:cosmetic_cat_ears" | "botania:cosmetic_clock_eye" | "botania:cosmetic_devil_horns" | "botania:cosmetic_devil_tail" | "botania:cosmetic_eerie_mask" | "botania:cosmetic_engineer_goggles" | "botania:cosmetic_eyepatch" | "botania:cosmetic_four_leaf_clover" | "botania:cosmetic_googly_eyes" | "botania:cosmetic_groucho_glasses" | "botania:cosmetic_hyper_plus" | "botania:cosmetic_kamui_eye" | "botania:cosmetic_lusitanic_shield" | "botania:cosmetic_orange_shades" | "botania:cosmetic_pink_flower_bud" | "botania:cosmetic_polka_dotted_bows" | "botania:cosmetic_puffy_scarf" | "botania:cosmetic_questgiver_mark" | "botania:cosmetic_red_glasses" | "botania:cosmetic_red_ribbons" | "botania:cosmetic_thick_eyebrows" | "botania:cosmetic_thinking_hand" | "botania:cosmetic_tiny_potato_mask" | "botania:cosmetic_unicorn_horn" | "botania:cosmetic_wicked_eyepatch" | "botania:cosmetic_witch_pin" | "botania:cracked_livingrock_bricks" | "botania:crafting_halo" | "botania:crafty_crate" | "botania:creative_pool" | "botania:crystal_bow" | "botania:cyan_double_flower" | "botania:cyan_floating_flower" | "botania:cyan_mushroom" | "botania:cyan_mystical_flower" | "botania:cyan_petal" | "botania:cyan_petal_block" | "botania:cyan_shiny_flower" | "botania:daffomill" | "botania:dandelifeon" | "botania:dark_quartz" | "botania:dark_quartz_pillar" | "botania:dark_quartz_slab" | "botania:dark_quartz_stairs" | "botania:daybloom_motif" | "botania:detector_light_relay" | "botania:dice" | "botania:diluted_pool" | "botania:dirt_rod" | "botania:diva_charm" | "botania:divining_rod" | "botania:dodge_ring" | "botania:dragonstone" | "botania:dragonstone_block" | "botania:dreadthorn" | "botania:dreamwood" | "botania:dreamwood_fence" | "botania:dreamwood_fence_gate" | "botania:dreamwood_log" | "botania:dreamwood_planks" | "botania:dreamwood_planks_slab" | "botania:dreamwood_planks_stairs" | "botania:dreamwood_slab" | "botania:dreamwood_stairs" | "botania:dreamwood_twig" | "botania:dreamwood_wall" | "botania:dreamwood_wand" | "botania:drum_canopy" | "botania:drum_gathering" | "botania:drum_wild" | "botania:dry_grass" | "botania:dry_seeds" | "botania:elementium_axe" | "botania:elementium_block" | "botania:elementium_boots" | "botania:elementium_chestplate" | "botania:elementium_helmet" | "botania:elementium_hoe" | "botania:elementium_ingot" | "botania:elementium_leggings" | "botania:elementium_nugget" | "botania:elementium_pickaxe" | "botania:elementium_shears" | "botania:elementium_shovel" | "botania:elementium_sword" | "botania:elf_glass" | "botania:elf_glass_pane" | "botania:elf_quartz" | "botania:elf_quartz_pillar" | "botania:elf_quartz_slab" | "botania:elf_quartz_stairs" | "botania:elven_spreader" | "botania:enchanted_soil" | "botania:enchanter" | "botania:ender_air_bottle" | "botania:ender_dagger" | "botania:ender_eye_block" | "botania:ender_hand" | "botania:endoflame" | "botania:entropinnyum" | "botania:exchange_rod" | "botania:exoflame" | "botania:fabulous_pool" | "botania:fallen_kanade" | "botania:fel_pumpkin" | "botania:fertilizer" | "botania:fire_rod" | "botania:flare_chakram" | "botania:flask" | "botania:flight_tiara" | "botania:floating_agricarnation" | "botania:floating_agricarnation_chibi" | "botania:floating_bellethorn" | "botania:floating_bellethorn_chibi" | "botania:floating_bergamute" | "botania:floating_bubbell" | "botania:floating_bubbell_chibi" | "botania:floating_clayconia" | "botania:floating_clayconia_chibi" | "botania:floating_daffomill" | "botania:floating_dandelifeon" | "botania:floating_dreadthorn" | "botania:floating_endoflame" | "botania:floating_entropinnyum" | "botania:floating_exoflame" | "botania:floating_fallen_kanade" | "botania:floating_gourmaryllis" | "botania:floating_heisei_dream" | "botania:floating_hopperhock" | "botania:floating_hopperhock_chibi" | "botania:floating_hyacidus" | "botania:floating_hydroangeas" | "botania:floating_jaded_amaranthus" | "botania:floating_jiyuulia" | "botania:floating_jiyuulia_chibi" | "botania:floating_kekimurus" | "botania:floating_labellia" | "botania:floating_loonium" | "botania:floating_manastar" | "botania:floating_marimorphosis" | "botania:floating_marimorphosis_chibi" | "botania:floating_medumone" | "botania:floating_munchdew" | "botania:floating_narslimmus" | "botania:floating_orechid" | "botania:floating_orechid_ignem" | "botania:floating_pollidisiac" | "botania:floating_pure_daisy" | "botania:floating_rafflowsia" | "botania:floating_rannuncarpus" | "botania:floating_rannuncarpus_chibi" | "botania:floating_rosa_arcana" | "botania:floating_shulk_me_not" | "botania:floating_solegnolia" | "botania:floating_solegnolia_chibi" | "botania:floating_spectranthemum" | "botania:floating_spectrolus" | "botania:floating_tangleberrie" | "botania:floating_tangleberrie_chibi" | "botania:floating_thermalily" | "botania:floating_tigerseye" | "botania:floating_vinculotus" | "botania:flower_bag" | "botania:flugel_eye" | "botania:forest_eye" | "botania:fork_light_relay" | "botania:framed_dreamwood" | "botania:framed_livingwood" | "botania:gaia_head" | "botania:gaia_ingot" | "botania:gaia_pylon" | "botania:gaia_spreader" | "botania:ghost_rail" | "botania:glass_pickaxe" | "botania:glimmering_dreamwood" | "botania:glimmering_dreamwood_log" | "botania:glimmering_livingwood" | "botania:glimmering_livingwood_log" | "botania:glimmering_stripped_dreamwood" | "botania:glimmering_stripped_dreamwood_log" | "botania:glimmering_stripped_livingwood" | "botania:glimmering_stripped_livingwood_log" | "botania:goddess_charm" | "botania:golden_grass" | "botania:golden_seeds" | "botania:gourmaryllis" | "botania:grass_seeds" | "botania:gravity_rod" | "botania:gray_double_flower" | "botania:gray_floating_flower" | "botania:gray_mushroom" | "botania:gray_mystical_flower" | "botania:gray_petal" | "botania:gray_petal_block" | "botania:gray_shiny_flower" | "botania:green_double_flower" | "botania:green_floating_flower" | "botania:green_mushroom" | "botania:green_mystical_flower" | "botania:green_pavement" | "botania:green_pavement_slab" | "botania:green_pavement_stairs" | "botania:green_petal" | "botania:green_petal_block" | "botania:green_shiny_flower" | "botania:heisei_dream" | "botania:holy_cloak" | "botania:hopperhock" | "botania:hopperhock_chibi" | "botania:horn_grass" | "botania:horn_leaves" | "botania:horn_snow" | "botania:hourglass" | "botania:hyacidus" | "botania:hydroangeas" | "botania:hydroangeas_motif" | "botania:ice_pendant" | "botania:incense_plate" | "botania:incense_stick" | "botania:infinite_fruit" | "botania:infrangible_platform" | "botania:infused_grass" | "botania:infused_seeds" | "botania:invisibility_cloak" | "botania:itemfinder" | "botania:jaded_amaranthus" | "botania:jiyuulia" | "botania:jiyuulia_chibi" | "botania:keep_ivy" | "botania:kekimurus" | "botania:king_key" | "botania:knockback_belt" | "botania:labellia" | "botania:laputa_shard" | "botania:lava_pendant" | "botania:lavender_quartz" | "botania:lavender_quartz_pillar" | "botania:lavender_quartz_slab" | "botania:lavender_quartz_stairs" | "botania:lens_bounce" | "botania:lens_damage" | "botania:lens_efficiency" | "botania:lens_explosive" | "botania:lens_fire" | "botania:lens_firework" | "botania:lens_flare" | "botania:lens_gravity" | "botania:lens_influence" | "botania:lens_light" | "botania:lens_magnet" | "botania:lens_messenger" | "botania:lens_mine" | "botania:lens_normal" | "botania:lens_paint" | "botania:lens_phantom" | "botania:lens_piston" | "botania:lens_power" | "botania:lens_redirect" | "botania:lens_speed" | "botania:lens_storm" | "botania:lens_time" | "botania:lens_tripwire" | "botania:lens_warp" | "botania:lens_weight" | "botania:lexicon" | "botania:life_essence" | "botania:light_blue_double_flower" | "botania:light_blue_floating_flower" | "botania:light_blue_mushroom" | "botania:light_blue_mystical_flower" | "botania:light_blue_petal" | "botania:light_blue_petal_block" | "botania:light_blue_shiny_flower" | "botania:light_gray_double_flower" | "botania:light_gray_floating_flower" | "botania:light_gray_mushroom" | "botania:light_gray_mystical_flower" | "botania:light_gray_petal" | "botania:light_gray_petal_block" | "botania:light_gray_shiny_flower" | "botania:light_launcher" | "botania:light_relay" | "botania:lime_double_flower" | "botania:lime_floating_flower" | "botania:lime_mushroom" | "botania:lime_mystical_flower" | "botania:lime_petal" | "botania:lime_petal_block" | "botania:lime_shiny_flower" | "botania:living_root" | "botania:livingrock" | "botania:livingrock_bricks" | "botania:livingrock_bricks_slab" | "botania:livingrock_bricks_stairs" | "botania:livingrock_bricks_wall" | "botania:livingrock_slab" | "botania:livingrock_stairs" | "botania:livingrock_wall" | "botania:livingwood" | "botania:livingwood_bow" | "botania:livingwood_fence" | "botania:livingwood_fence_gate" | "botania:livingwood_log" | "botania:livingwood_planks" | "botania:livingwood_planks_slab" | "botania:livingwood_planks_stairs" | "botania:livingwood_slab" | "botania:livingwood_stairs" | "botania:livingwood_twig" | "botania:livingwood_wall" | "botania:loki_ring" | "botania:loonium" | "botania:magenta_double_flower" | "botania:magenta_floating_flower" | "botania:magenta_mushroom" | "botania:magenta_mystical_flower" | "botania:magenta_petal" | "botania:magenta_petal_block" | "botania:magenta_shiny_flower" | "botania:magnet_ring" | "botania:magnet_ring_greater" | "botania:mana_bomb" | "botania:mana_bottle" | "botania:mana_cookie" | "botania:mana_detector" | "botania:mana_diamond" | "botania:mana_diamond_block" | "botania:mana_distributor" | "botania:mana_fluxfield" | "botania:mana_glass" | "botania:mana_glass_pane" | "botania:mana_gun" | "botania:mana_mirror" | "botania:mana_pearl" | "botania:mana_pool" | "botania:mana_powder" | "botania:mana_pylon" | "botania:mana_quartz" | "botania:mana_quartz_pillar" | "botania:mana_quartz_slab" | "botania:mana_quartz_stairs" | "botania:mana_ring" | "botania:mana_ring_greater" | "botania:mana_spreader" | "botania:mana_string" | "botania:mana_tablet" | "botania:mana_void" | "botania:manastar" | "botania:manasteel_axe" | "botania:manasteel_block" | "botania:manasteel_boots" | "botania:manasteel_chestplate" | "botania:manasteel_helmet" | "botania:manasteel_hoe" | "botania:manasteel_ingot" | "botania:manasteel_leggings" | "botania:manasteel_nugget" | "botania:manasteel_pick" | "botania:manasteel_shears" | "botania:manasteel_shovel" | "botania:manasteel_sword" | "botania:manaweave_boots" | "botania:manaweave_chestplate" | "botania:manaweave_cloth" | "botania:manaweave_helmet" | "botania:manaweave_leggings" | "botania:marimorphosis" | "botania:marimorphosis_chibi" | "botania:medumone" | "botania:metamorphic_desert_bricks" | "botania:metamorphic_desert_bricks_slab" | "botania:metamorphic_desert_bricks_stairs" | "botania:metamorphic_desert_bricks_wall" | "botania:metamorphic_desert_cobblestone" | "botania:metamorphic_desert_cobblestone_slab" | "botania:metamorphic_desert_cobblestone_stairs" | "botania:metamorphic_desert_cobblestone_wall" | "botania:metamorphic_desert_stone" | "botania:metamorphic_desert_stone_slab" | "botania:metamorphic_desert_stone_stairs" | "botania:metamorphic_desert_stone_wall" | "botania:metamorphic_forest_bricks" | "botania:metamorphic_forest_bricks_slab" | "botania:metamorphic_forest_bricks_stairs" | "botania:metamorphic_forest_bricks_wall" | "botania:metamorphic_forest_cobblestone" | "botania:metamorphic_forest_cobblestone_slab" | "botania:metamorphic_forest_cobblestone_stairs" | "botania:metamorphic_forest_cobblestone_wall" | "botania:metamorphic_forest_stone" | "botania:metamorphic_forest_stone_slab" | "botania:metamorphic_forest_stone_stairs" | "botania:metamorphic_forest_stone_wall" | "botania:metamorphic_fungal_bricks" | "botania:metamorphic_fungal_bricks_slab" | "botania:metamorphic_fungal_bricks_stairs" | "botania:metamorphic_fungal_bricks_wall" | "botania:metamorphic_fungal_cobblestone" | "botania:metamorphic_fungal_cobblestone_slab" | "botania:metamorphic_fungal_cobblestone_stairs" | "botania:metamorphic_fungal_cobblestone_wall" | "botania:metamorphic_fungal_stone" | "botania:metamorphic_fungal_stone_slab" | "botania:metamorphic_fungal_stone_stairs" | "botania:metamorphic_fungal_stone_wall" | "botania:metamorphic_mesa_bricks" | "botania:metamorphic_mesa_bricks_slab" | "botania:metamorphic_mesa_bricks_stairs" | "botania:metamorphic_mesa_bricks_wall" | "botania:metamorphic_mesa_cobblestone" | "botania:metamorphic_mesa_cobblestone_slab" | "botania:metamorphic_mesa_cobblestone_stairs" | "botania:metamorphic_mesa_cobblestone_wall" | "botania:metamorphic_mesa_stone" | "botania:metamorphic_mesa_stone_slab" | "botania:metamorphic_mesa_stone_stairs" | "botania:metamorphic_mesa_stone_wall" | "botania:metamorphic_mountain_bricks" | "botania:metamorphic_mountain_bricks_slab" | "botania:metamorphic_mountain_bricks_stairs" | "botania:metamorphic_mountain_bricks_wall" | "botania:metamorphic_mountain_cobblestone" | "botania:metamorphic_mountain_cobblestone_slab" | "botania:metamorphic_mountain_cobblestone_stairs" | "botania:metamorphic_mountain_cobblestone_wall" | "botania:metamorphic_mountain_stone" | "botania:metamorphic_mountain_stone_slab" | "botania:metamorphic_mountain_stone_stairs" | "botania:metamorphic_mountain_stone_wall" | "botania:metamorphic_plains_bricks" | "botania:metamorphic_plains_bricks_slab" | "botania:metamorphic_plains_bricks_stairs" | "botania:metamorphic_plains_bricks_wall" | "botania:metamorphic_plains_cobblestone" | "botania:metamorphic_plains_cobblestone_slab" | "botania:metamorphic_plains_cobblestone_stairs" | "botania:metamorphic_plains_cobblestone_wall" | "botania:metamorphic_plains_stone" | "botania:metamorphic_plains_stone_slab" | "botania:metamorphic_plains_stone_stairs" | "botania:metamorphic_plains_stone_wall" | "botania:metamorphic_swamp_bricks" | "botania:metamorphic_swamp_bricks_slab" | "botania:metamorphic_swamp_bricks_stairs" | "botania:metamorphic_swamp_bricks_wall" | "botania:metamorphic_swamp_cobblestone" | "botania:metamorphic_swamp_cobblestone_slab" | "botania:metamorphic_swamp_cobblestone_stairs" | "botania:metamorphic_swamp_cobblestone_wall" | "botania:metamorphic_swamp_stone" | "botania:metamorphic_swamp_stone_slab" | "botania:metamorphic_swamp_stone_stairs" | "botania:metamorphic_swamp_stone_wall" | "botania:metamorphic_taiga_bricks" | "botania:metamorphic_taiga_bricks_slab" | "botania:metamorphic_taiga_bricks_stairs" | "botania:metamorphic_taiga_bricks_wall" | "botania:metamorphic_taiga_cobblestone" | "botania:metamorphic_taiga_cobblestone_slab" | "botania:metamorphic_taiga_cobblestone_stairs" | "botania:metamorphic_taiga_cobblestone_wall" | "botania:metamorphic_taiga_stone" | "botania:metamorphic_taiga_stone_slab" | "botania:metamorphic_taiga_stone_stairs" | "botania:metamorphic_taiga_stone_wall" | "botania:mining_ring" | "botania:missile_rod" | "botania:monocle" | "botania:mossy_dreamwood_planks" | "botania:mossy_livingrock_bricks" | "botania:mossy_livingrock_bricks_slab" | "botania:mossy_livingrock_bricks_stairs" | "botania:mossy_livingrock_bricks_wall" | "botania:mossy_livingwood_planks" | "botania:munchdew" | "botania:mutated_grass" | "botania:mutated_seeds" | "botania:mycelium_seeds" | "botania:narslimmus" | "botania:natura_pylon" | "botania:nightshade_motif" | "botania:obedience_stick" | "botania:odin_ring" | "botania:open_bucket" | "botania:open_crate" | "botania:orange_double_flower" | "botania:orange_floating_flower" | "botania:orange_mushroom" | "botania:orange_mystical_flower" | "botania:orange_petal" | "botania:orange_petal_block" | "botania:orange_shiny_flower" | "botania:orechid" | "botania:orechid_ignem" | "botania:overgrowth_seed" | "botania:pattern_1_1" | "botania:pattern_1_2" | "botania:pattern_1_3" | "botania:pattern_2_1" | "botania:pattern_2_2" | "botania:pattern_2_3" | "botania:pattern_3_1" | "botania:pattern_3_2" | "botania:pattern_donut" | "botania:pattern_framed_dreamwood" | "botania:pattern_framed_livingwood" | "botania:pebble" | "botania:phantom_ink" | "botania:pink_double_flower" | "botania:pink_floating_flower" | "botania:pink_mushroom" | "botania:pink_mystical_flower" | "botania:pink_petal" | "botania:pink_petal_block" | "botania:pink_shiny_flower" | "botania:pinkinator" | "botania:piston_relay" | "botania:pixie_dust" | "botania:pixie_ring" | "botania:placeholder" | "botania:podzol_seeds" | "botania:pollidisiac" | "botania:pool_minecart" | "botania:prism" | "botania:pump" | "botania:pure_daisy" | "botania:purple_double_flower" | "botania:purple_floating_flower" | "botania:purple_mushroom" | "botania:purple_mystical_flower" | "botania:purple_petal" | "botania:purple_petal_block" | "botania:purple_shiny_flower" | "botania:quartz_blaze" | "botania:quartz_dark" | "botania:quartz_elven" | "botania:quartz_lavender" | "botania:quartz_mana" | "botania:quartz_red" | "botania:quartz_sunny" | "botania:rafflowsia" | "botania:rainbow_rod" | "botania:rannuncarpus" | "botania:rannuncarpus_chibi" | "botania:reach_ring" | "botania:record_gaia_1" | "botania:record_gaia_2" | "botania:red_double_flower" | "botania:red_floating_flower" | "botania:red_mushroom" | "botania:red_mystical_flower" | "botania:red_pavement" | "botania:red_pavement_slab" | "botania:red_pavement_stairs" | "botania:red_petal" | "botania:red_petal_block" | "botania:red_quartz" | "botania:red_quartz_pillar" | "botania:red_quartz_slab" | "botania:red_quartz_stairs" | "botania:red_shiny_flower" | "botania:red_string" | "botania:red_string_comparator" | "botania:red_string_container" | "botania:red_string_dispenser" | "botania:red_string_fertilizer" | "botania:red_string_interceptor" | "botania:red_string_relay" | "botania:redstone_root" | "botania:redstone_spreader" | "botania:root" | "botania:rosa_arcana" | "botania:rune_air" | "botania:rune_autumn" | "botania:rune_earth" | "botania:rune_envy" | "botania:rune_fire" | "botania:rune_gluttony" | "botania:rune_greed" | "botania:rune_lust" | "botania:rune_mana" | "botania:rune_pride" | "botania:rune_sloth" | "botania:rune_spring" | "botania:rune_summer" | "botania:rune_water" | "botania:rune_winter" | "botania:rune_wrath" | "botania:runic_altar" | "botania:scorched_grass" | "botania:scorched_seeds" | "botania:sextant" | "botania:shimmerrock" | "botania:shimmerrock_slab" | "botania:shimmerrock_stairs" | "botania:shimmerwood_planks" | "botania:shimmerwood_planks_slab" | "botania:shimmerwood_planks_stairs" | "botania:shulk_me_not" | "botania:skydirt_rod" | "botania:slime_bottle" | "botania:slingshot" | "botania:smelt_rod" | "botania:solegnolia" | "botania:solegnolia_chibi" | "botania:spark" | "botania:spark_changer" | "botania:spark_upgrade_dispersive" | "botania:spark_upgrade_dominant" | "botania:spark_upgrade_isolated" | "botania:spark_upgrade_recessive" | "botania:spawner_claw" | "botania:spawner_mover" | "botania:spectral_platform" | "botania:spectranthemum" | "botania:spectrolus" | "botania:speed_up_belt" | "botania:spell_cloth" | "botania:star_sword" | "botania:starfield" | "botania:stripped_dreamwood" | "botania:stripped_dreamwood_log" | "botania:stripped_dreamwood_slab" | "botania:stripped_dreamwood_stairs" | "botania:stripped_dreamwood_wall" | "botania:stripped_livingwood" | "botania:stripped_livingwood_log" | "botania:stripped_livingwood_slab" | "botania:stripped_livingwood_stairs" | "botania:stripped_livingwood_wall" | "botania:sunny_quartz" | "botania:sunny_quartz_pillar" | "botania:sunny_quartz_slab" | "botania:sunny_quartz_stairs" | "botania:super_cloud_pendant" | "botania:super_lava_pendant" | "botania:super_travel_belt" | "botania:swap_ring" | "botania:tangleberrie" | "botania:tangleberrie_chibi" | "botania:temperance_stone" | "botania:terra_axe" | "botania:terra_pick" | "botania:terra_plate" | "botania:terra_sword" | "botania:terraform_rod" | "botania:terrasteel_block" | "botania:terrasteel_boots" | "botania:terrasteel_chestplate" | "botania:terrasteel_helmet" | "botania:terrasteel_ingot" | "botania:terrasteel_leggings" | "botania:terrasteel_nugget" | "botania:teru_teru_bozu" | "botania:thermalily" | "botania:third_eye" | "botania:thor_ring" | "botania:thorn_chakram" | "botania:thunder_sword" | "botania:tigerseye" | "botania:tiny_planet" | "botania:tiny_planet_block" | "botania:tiny_potato" | "botania:toggle_light_relay" | "botania:tornado_rod" | "botania:travel_belt" | "botania:turntable" | "botania:twig_wand" | "botania:unholy_cloak" | "botania:vial" | "botania:vinculotus" | "botania:vine_ball" | "botania:virus_necrodermal" | "botania:virus_nullodermal" | "botania:vivid_grass" | "botania:vivid_seeds" | "botania:water_bowl" | "botania:water_ring" | "botania:water_rod" | "botania:white_double_flower" | "botania:white_floating_flower" | "botania:white_mushroom" | "botania:white_mystical_flower" | "botania:white_pavement" | "botania:white_pavement_slab" | "botania:white_pavement_stairs" | "botania:white_petal" | "botania:white_petal_block" | "botania:white_shiny_flower" | "botania:world_seed" | "botania:yellow_double_flower" | "botania:yellow_floating_flower" | "botania:yellow_mushroom" | "botania:yellow_mystical_flower" | "botania:yellow_pavement" | "botania:yellow_pavement_slab" | "botania:yellow_pavement_stairs" | "botania:yellow_petal" | "botania:yellow_petal_block" | "botania:yellow_shiny_flower" | "create:acacia_window" | "create:acacia_window_pane" | "create:adjustable_chain_gearshift" | "create:analog_lever" | "create:andesite_alloy" | "create:andesite_casing" | "create:andesite_encased_cogwheel" | "create:andesite_encased_large_cogwheel" | "create:andesite_encased_shaft" | "create:andesite_funnel" | "create:andesite_ladder" | "create:andesite_pillar" | "create:andesite_tunnel" | "create:asurine" | "create:asurine_pillar" | "create:attribute_filter" | "create:bar_of_chocolate" | "create:basin" | "create:belt_connector" | "create:birch_window" | "create:birch_window_pane" | "create:black_seat" | "create:black_toolbox" | "create:black_valve_handle" | "create:blaze_burner" | "create:blaze_cake" | "create:blaze_cake_base" | "create:blue_seat" | "create:blue_toolbox" | "create:blue_valve_handle" | "create:brass_block" | "create:brass_casing" | "create:brass_encased_cogwheel" | "create:brass_encased_large_cogwheel" | "create:brass_encased_shaft" | "create:brass_funnel" | "create:brass_hand" | "create:brass_ingot" | "create:brass_ladder" | "create:brass_nugget" | "create:brass_sheet" | "create:brass_tunnel" | "create:brown_seat" | "create:brown_toolbox" | "create:brown_valve_handle" | "create:builders_tea" | "create:calcite_pillar" | "create:cart_assembler" | "create:chest_minecart_contraption" | "create:chocolate_bucket" | "create:chocolate_glazed_berries" | "create:chromatic_compound" | "create:chute" | "create:cinder_flour" | "create:clockwork_bearing" | "create:clutch" | "create:cogwheel" | "create:content_observer" | "create:controller_rail" | "create:controls" | "create:copper_backtank" | "create:copper_backtank_placeable" | "create:copper_casing" | "create:copper_ladder" | "create:copper_nugget" | "create:copper_sheet" | "create:copper_shingle_slab" | "create:copper_shingle_stairs" | "create:copper_shingles" | "create:copper_tile_slab" | "create:copper_tile_stairs" | "create:copper_tiles" | "create:copper_valve_handle" | "create:crafter_slot_cover" | "create:crafting_blueprint" | "create:creative_blaze_cake" | "create:creative_crate" | "create:creative_fluid_tank" | "create:creative_motor" | "create:crimsite" | "create:crimsite_pillar" | "create:crimson_window" | "create:crimson_window_pane" | "create:crushed_aluminum_ore" | "create:crushed_copper_ore" | "create:crushed_gold_ore" | "create:crushed_iron_ore" | "create:crushed_lead_ore" | "create:crushed_nickel_ore" | "create:crushed_osmium_ore" | "create:crushed_platinum_ore" | "create:crushed_quicksilver_ore" | "create:crushed_silver_ore" | "create:crushed_tin_ore" | "create:crushed_uranium_ore" | "create:crushed_zinc_ore" | "create:crushing_wheel" | "create:cuckoo_clock" | "create:cut_andesite" | "create:cut_andesite_brick_slab" | "create:cut_andesite_brick_stairs" | "create:cut_andesite_brick_wall" | "create:cut_andesite_bricks" | "create:cut_andesite_slab" | "create:cut_andesite_stairs" | "create:cut_andesite_wall" | "create:cut_asurine" | "create:cut_asurine_brick_slab" | "create:cut_asurine_brick_stairs" | "create:cut_asurine_brick_wall" | "create:cut_asurine_bricks" | "create:cut_asurine_slab" | "create:cut_asurine_stairs" | "create:cut_asurine_wall" | "create:cut_calcite" | "create:cut_calcite_brick_slab" | "create:cut_calcite_brick_stairs" | "create:cut_calcite_brick_wall" | "create:cut_calcite_bricks" | "create:cut_calcite_slab" | "create:cut_calcite_stairs" | "create:cut_calcite_wall" | "create:cut_crimsite" | "create:cut_crimsite_brick_slab" | "create:cut_crimsite_brick_stairs" | "create:cut_crimsite_brick_wall" | "create:cut_crimsite_bricks" | "create:cut_crimsite_slab" | "create:cut_crimsite_stairs" | "create:cut_crimsite_wall" | "create:cut_deepslate" | "create:cut_deepslate_brick_slab" | "create:cut_deepslate_brick_stairs" | "create:cut_deepslate_brick_wall" | "create:cut_deepslate_bricks" | "create:cut_deepslate_slab" | "create:cut_deepslate_stairs" | "create:cut_deepslate_wall" | "create:cut_diorite" | "create:cut_diorite_brick_slab" | "create:cut_diorite_brick_stairs" | "create:cut_diorite_brick_wall" | "create:cut_diorite_bricks" | "create:cut_diorite_slab" | "create:cut_diorite_stairs" | "create:cut_diorite_wall" | "create:cut_dripstone" | "create:cut_dripstone_brick_slab" | "create:cut_dripstone_brick_stairs" | "create:cut_dripstone_brick_wall" | "create:cut_dripstone_bricks" | "create:cut_dripstone_slab" | "create:cut_dripstone_stairs" | "create:cut_dripstone_wall" | "create:cut_granite" | "create:cut_granite_brick_slab" | "create:cut_granite_brick_stairs" | "create:cut_granite_brick_wall" | "create:cut_granite_bricks" | "create:cut_granite_slab" | "create:cut_granite_stairs" | "create:cut_granite_wall" | "create:cut_limestone" | "create:cut_limestone_brick_slab" | "create:cut_limestone_brick_stairs" | "create:cut_limestone_brick_wall" | "create:cut_limestone_bricks" | "create:cut_limestone_slab" | "create:cut_limestone_stairs" | "create:cut_limestone_wall" | "create:cut_ochrum" | "create:cut_ochrum_brick_slab" | "create:cut_ochrum_brick_stairs" | "create:cut_ochrum_brick_wall" | "create:cut_ochrum_bricks" | "create:cut_ochrum_slab" | "create:cut_ochrum_stairs" | "create:cut_ochrum_wall" | "create:cut_scorchia" | "create:cut_scorchia_brick_slab" | "create:cut_scorchia_brick_stairs" | "create:cut_scorchia_brick_wall" | "create:cut_scorchia_bricks" | "create:cut_scorchia_slab" | "create:cut_scorchia_stairs" | "create:cut_scorchia_wall" | "create:cut_scoria" | "create:cut_scoria_brick_slab" | "create:cut_scoria_brick_stairs" | "create:cut_scoria_brick_wall" | "create:cut_scoria_bricks" | "create:cut_scoria_slab" | "create:cut_scoria_stairs" | "create:cut_scoria_wall" | "create:cut_tuff" | "create:cut_tuff_brick_slab" | "create:cut_tuff_brick_stairs" | "create:cut_tuff_brick_wall" | "create:cut_tuff_bricks" | "create:cut_tuff_slab" | "create:cut_tuff_stairs" | "create:cut_tuff_wall" | "create:cut_veridium" | "create:cut_veridium_brick_slab" | "create:cut_veridium_brick_stairs" | "create:cut_veridium_brick_wall" | "create:cut_veridium_bricks" | "create:cut_veridium_slab" | "create:cut_veridium_stairs" | "create:cut_veridium_wall" | "create:cyan_seat" | "create:cyan_toolbox" | "create:cyan_valve_handle" | "create:dark_oak_window" | "create:dark_oak_window_pane" | "create:deepslate_pillar" | "create:deepslate_zinc_ore" | "create:deployer" | "create:depot" | "create:diorite_pillar" | "create:display_board" | "create:display_link" | "create:diving_boots" | "create:diving_helmet" | "create:dough" | "create:dripstone_pillar" | "create:electron_tube" | "create:empty_blaze_burner" | "create:empty_schematic" | "create:encased_chain_drive" | "create:encased_fan" | "create:experience_nugget" | "create:exposed_copper_shingle_slab" | "create:exposed_copper_shingle_stairs" | "create:exposed_copper_shingles" | "create:exposed_copper_tile_slab" | "create:exposed_copper_tile_stairs" | "create:exposed_copper_tiles" | "create:extendo_grip" | "create:filter" | "create:fluid_pipe" | "create:fluid_tank" | "create:fluid_valve" | "create:flywheel" | "create:framed_glass" | "create:framed_glass_door" | "create:framed_glass_pane" | "create:framed_glass_trapdoor" | "create:furnace_minecart_contraption" | "create:gantry_carriage" | "create:gantry_shaft" | "create:gearbox" | "create:gearshift" | "create:goggles" | "create:golden_sheet" | "create:granite_pillar" | "create:gray_seat" | "create:gray_toolbox" | "create:gray_valve_handle" | "create:green_seat" | "create:green_toolbox" | "create:green_valve_handle" | "create:hand_crank" | "create:handheld_worldshaper" | "create:haunted_bell" | "create:honey_bucket" | "create:honeyed_apple" | "create:horizontal_framed_glass" | "create:horizontal_framed_glass_pane" | "create:hose_pulley" | "create:incomplete_precision_mechanism" | "create:incomplete_track" | "create:iron_sheet" | "create:item_drain" | "create:item_vault" | "create:jungle_window" | "create:jungle_window_pane" | "create:large_cogwheel" | "create:layered_andesite" | "create:layered_asurine" | "create:layered_calcite" | "create:layered_crimsite" | "create:layered_deepslate" | "create:layered_diorite" | "create:layered_dripstone" | "create:layered_granite" | "create:layered_limestone" | "create:layered_ochrum" | "create:layered_scorchia" | "create:layered_scoria" | "create:layered_tuff" | "create:layered_veridium" | "create:light_blue_seat" | "create:light_blue_toolbox" | "create:light_blue_valve_handle" | "create:light_gray_seat" | "create:light_gray_toolbox" | "create:light_gray_valve_handle" | "create:lime_seat" | "create:lime_toolbox" | "create:lime_valve_handle" | "create:limestone" | "create:limestone_pillar" | "create:linear_chassis" | "create:linked_controller" | "create:magenta_seat" | "create:magenta_toolbox" | "create:magenta_valve_handle" | "create:mechanical_arm" | "create:mechanical_bearing" | "create:mechanical_crafter" | "create:mechanical_drill" | "create:mechanical_harvester" | "create:mechanical_mixer" | "create:mechanical_piston" | "create:mechanical_plough" | "create:mechanical_press" | "create:mechanical_pump" | "create:mechanical_saw" | "create:metal_bracket" | "create:metal_girder" | "create:millstone" | "create:minecart_contraption" | "create:minecart_coupling" | "create:mysterious_cuckoo_clock" | "create:nixie_tube" | "create:nozzle" | "create:oak_window" | "create:oak_window_pane" | "create:ochrum" | "create:ochrum_pillar" | "create:orange_seat" | "create:orange_toolbox" | "create:orange_valve_handle" | "create:ornate_iron_window" | "create:ornate_iron_window_pane" | "create:oxidized_copper_shingle_slab" | "create:oxidized_copper_shingle_stairs" | "create:oxidized_copper_shingles" | "create:oxidized_copper_tile_slab" | "create:oxidized_copper_tile_stairs" | "create:oxidized_copper_tiles" | "create:peculiar_bell" | "create:pink_seat" | "create:pink_toolbox" | "create:pink_valve_handle" | "create:piston_extension_pole" | "create:placard" | "create:polished_cut_andesite" | "create:polished_cut_andesite_slab" | "create:polished_cut_andesite_stairs" | "create:polished_cut_andesite_wall" | "create:polished_cut_asurine" | "create:polished_cut_asurine_slab" | "create:polished_cut_asurine_stairs" | "create:polished_cut_asurine_wall" | "create:polished_cut_calcite" | "create:polished_cut_calcite_slab" | "create:polished_cut_calcite_stairs" | "create:polished_cut_calcite_wall" | "create:polished_cut_crimsite" | "create:polished_cut_crimsite_slab" | "create:polished_cut_crimsite_stairs" | "create:polished_cut_crimsite_wall" | "create:polished_cut_deepslate" | "create:polished_cut_deepslate_slab" | "create:polished_cut_deepslate_stairs" | "create:polished_cut_deepslate_wall" | "create:polished_cut_diorite" | "create:polished_cut_diorite_slab" | "create:polished_cut_diorite_stairs" | "create:polished_cut_diorite_wall" | "create:polished_cut_dripstone" | "create:polished_cut_dripstone_slab" | "create:polished_cut_dripstone_stairs" | "create:polished_cut_dripstone_wall" | "create:polished_cut_granite" | "create:polished_cut_granite_slab" | "create:polished_cut_granite_stairs" | "create:polished_cut_granite_wall" | "create:polished_cut_limestone" | "create:polished_cut_limestone_slab" | "create:polished_cut_limestone_stairs" | "create:polished_cut_limestone_wall" | "create:polished_cut_ochrum" | "create:polished_cut_ochrum_slab" | "create:polished_cut_ochrum_stairs" | "create:polished_cut_ochrum_wall" | "create:polished_cut_scorchia" | "create:polished_cut_scorchia_slab" | "create:polished_cut_scorchia_stairs" | "create:polished_cut_scorchia_wall" | "create:polished_cut_scoria" | "create:polished_cut_scoria_slab" | "create:polished_cut_scoria_stairs" | "create:polished_cut_scoria_wall" | "create:polished_cut_tuff" | "create:polished_cut_tuff_slab" | "create:polished_cut_tuff_stairs" | "create:polished_cut_tuff_wall" | "create:polished_cut_veridium" | "create:polished_cut_veridium_slab" | "create:polished_cut_veridium_stairs" | "create:polished_cut_veridium_wall" | "create:polished_rose_quartz" | "create:portable_fluid_interface" | "create:portable_storage_interface" | "create:potato_cannon" | "create:powdered_obsidian" | "create:powered_latch" | "create:powered_toggle_latch" | "create:precision_mechanism" | "create:propeller" | "create:pulse_extender" | "create:pulse_repeater" | "create:purple_seat" | "create:purple_toolbox" | "create:purple_valve_handle" | "create:radial_chassis" | "create:railway_casing" | "create:raw_zinc" | "create:raw_zinc_block" | "create:red_sand_paper" | "create:red_seat" | "create:red_toolbox" | "create:red_valve_handle" | "create:redstone_contact" | "create:redstone_link" | "create:refined_radiance" | "create:refined_radiance_casing" | "create:rope_pulley" | "create:rose_quartz" | "create:rose_quartz_block" | "create:rose_quartz_lamp" | "create:rose_quartz_tiles" | "create:rotation_speed_controller" | "create:sail_frame" | "create:sand_paper" | "create:schedule" | "create:schematic" | "create:schematic_and_quill" | "create:schematic_table" | "create:schematicannon" | "create:scorchia" | "create:scorchia_pillar" | "create:scoria" | "create:scoria_pillar" | "create:secondary_linear_chassis" | "create:sequenced_gearshift" | "create:shadow_steel" | "create:shadow_steel_casing" | "create:shaft" | "create:small_andesite_brick_slab" | "create:small_andesite_brick_stairs" | "create:small_andesite_brick_wall" | "create:small_andesite_bricks" | "create:small_asurine_brick_slab" | "create:small_asurine_brick_stairs" | "create:small_asurine_brick_wall" | "create:small_asurine_bricks" | "create:small_calcite_brick_slab" | "create:small_calcite_brick_stairs" | "create:small_calcite_brick_wall" | "create:small_calcite_bricks" | "create:small_crimsite_brick_slab" | "create:small_crimsite_brick_stairs" | "create:small_crimsite_brick_wall" | "create:small_crimsite_bricks" | "create:small_deepslate_brick_slab" | "create:small_deepslate_brick_stairs" | "create:small_deepslate_brick_wall" | "create:small_deepslate_bricks" | "create:small_diorite_brick_slab" | "create:small_diorite_brick_stairs" | "create:small_diorite_brick_wall" | "create:small_diorite_bricks" | "create:small_dripstone_brick_slab" | "create:small_dripstone_brick_stairs" | "create:small_dripstone_brick_wall" | "create:small_dripstone_bricks" | "create:small_granite_brick_slab" | "create:small_granite_brick_stairs" | "create:small_granite_brick_wall" | "create:small_granite_bricks" | "create:small_limestone_brick_slab" | "create:small_limestone_brick_stairs" | "create:small_limestone_brick_wall" | "create:small_limestone_bricks" | "create:small_ochrum_brick_slab" | "create:small_ochrum_brick_stairs" | "create:small_ochrum_brick_wall" | "create:small_ochrum_bricks" | "create:small_rose_quartz_tiles" | "create:small_scorchia_brick_slab" | "create:small_scorchia_brick_stairs" | "create:small_scorchia_brick_wall" | "create:small_scorchia_bricks" | "create:small_scoria_brick_slab" | "create:small_scoria_brick_stairs" | "create:small_scoria_brick_wall" | "create:small_scoria_bricks" | "create:small_tuff_brick_slab" | "create:small_tuff_brick_stairs" | "create:small_tuff_brick_wall" | "create:small_tuff_bricks" | "create:small_veridium_brick_slab" | "create:small_veridium_brick_stairs" | "create:small_veridium_brick_wall" | "create:small_veridium_bricks" | "create:smart_chute" | "create:smart_fluid_pipe" | "create:speedometer" | "create:spout" | "create:spruce_window" | "create:spruce_window_pane" | "create:steam_engine" | "create:steam_whistle" | "create:sticker" | "create:sticky_mechanical_piston" | "create:stockpile_switch" | "create:stressometer" | "create:sturdy_sheet" | "create:super_glue" | "create:sweet_roll" | "create:tiled_glass" | "create:tiled_glass_pane" | "create:track" | "create:track_observer" | "create:track_signal" | "create:track_station" | "create:train_door" | "create:train_trapdoor" | "create:tree_fertilizer" | "create:tuff_pillar" | "create:turntable" | "create:unprocessed_obsidian_sheet" | "create:veridium" | "create:veridium_pillar" | "create:vertical_framed_glass" | "create:vertical_framed_glass_pane" | "create:vertical_gearbox" | "create:wand_of_symmetry" | "create:warped_window" | "create:warped_window_pane" | "create:water_wheel" | "create:waxed_copper_shingle_slab" | "create:waxed_copper_shingle_stairs" | "create:waxed_copper_shingles" | "create:waxed_copper_tile_slab" | "create:waxed_copper_tile_stairs" | "create:waxed_copper_tiles" | "create:waxed_exposed_copper_shingle_slab" | "create:waxed_exposed_copper_shingle_stairs" | "create:waxed_exposed_copper_shingles" | "create:waxed_exposed_copper_tile_slab" | "create:waxed_exposed_copper_tile_stairs" | "create:waxed_exposed_copper_tiles" | "create:waxed_oxidized_copper_shingle_slab" | "create:waxed_oxidized_copper_shingle_stairs" | "create:waxed_oxidized_copper_shingles" | "create:waxed_oxidized_copper_tile_slab" | "create:waxed_oxidized_copper_tile_stairs" | "create:waxed_oxidized_copper_tiles" | "create:waxed_weathered_copper_shingle_slab" | "create:waxed_weathered_copper_shingle_stairs" | "create:waxed_weathered_copper_shingles" | "create:waxed_weathered_copper_tile_slab" | "create:waxed_weathered_copper_tile_stairs" | "create:waxed_weathered_copper_tiles" | "create:weathered_copper_shingle_slab" | "create:weathered_copper_shingle_stairs" | "create:weathered_copper_shingles" | "create:weathered_copper_tile_slab" | "create:weathered_copper_tile_stairs" | "create:weathered_copper_tiles" | "create:weighted_ejector" | "create:wheat_flour" | "create:whisk" | "create:white_sail" | "create:white_seat" | "create:white_toolbox" | "create:white_valve_handle" | "create:windmill_bearing" | "create:wooden_bracket" | "create:wrench" | "create:yellow_seat" | "create:yellow_toolbox" | "create:yellow_valve_handle" | "create:zinc_block" | "create:zinc_ingot" | "create:zinc_nugget" | "create:zinc_ore" | "enderstorage:ender_chest" | "enderstorage:ender_pouch" | "enderstorage:ender_tank" | "ftbquests:barrier" | "ftbquests:book" | "ftbquests:custom_icon" | "ftbquests:detector" | "ftbquests:lootcrate" | "ftbquests:missing_item" | "ftbquests:stage_barrier" | "itemfilters:always_false" | "itemfilters:always_true" | "itemfilters:and" | "itemfilters:block" | "itemfilters:custom" | "itemfilters:damage" | "itemfilters:id_regex" | "itemfilters:item_group" | "itemfilters:max_count" | "itemfilters:mod" | "itemfilters:not" | "itemfilters:or" | "itemfilters:strong_nbt" | "itemfilters:tag" | "itemfilters:weak_nbt" | "itemfilters:xor" | "kubejs:copper_coin" | "kubejs:gold_coin" | "kubejs:livingrock_casing" | "kubejs:silver_coin" | "lootr:lootr_barrel" | "lootr:lootr_chest" | "lootr:lootr_inventory" | "lootr:lootr_shulker" | "lootr:lootr_trapped_chest" | "lootr:trophy" | "acacia_boat" | "minecraft:acacia_boat" | "acacia_button" | "minecraft:acacia_button" | "acacia_door" | "minecraft:acacia_door" | "acacia_fence" | "minecraft:acacia_fence" | "acacia_fence_gate" | "minecraft:acacia_fence_gate" | "acacia_leaves" | "minecraft:acacia_leaves" | "acacia_log" | "minecraft:acacia_log" | "acacia_planks" | "minecraft:acacia_planks" | "acacia_pressure_plate" | "minecraft:acacia_pressure_plate" | "acacia_sapling" | "minecraft:acacia_sapling" | "acacia_sign" | "minecraft:acacia_sign" | "acacia_slab" | "minecraft:acacia_slab" | "acacia_stairs" | "minecraft:acacia_stairs" | "acacia_trapdoor" | "minecraft:acacia_trapdoor" | "acacia_wood" | "minecraft:acacia_wood" | "activator_rail" | "minecraft:activator_rail" | "air" | "minecraft:air" | "allium" | "minecraft:allium" | "amethyst_block" | "minecraft:amethyst_block" | "amethyst_cluster" | "minecraft:amethyst_cluster" | "amethyst_shard" | "minecraft:amethyst_shard" | "ancient_debris" | "minecraft:ancient_debris" | "andesite" | "minecraft:andesite" | "andesite_slab" | "minecraft:andesite_slab" | "andesite_stairs" | "minecraft:andesite_stairs" | "andesite_wall" | "minecraft:andesite_wall" | "anvil" | "minecraft:anvil" | "apple" | "minecraft:apple" | "armor_stand" | "minecraft:armor_stand" | "arrow" | "minecraft:arrow" | "axolotl_bucket" | "minecraft:axolotl_bucket" | "axolotl_spawn_egg" | "minecraft:axolotl_spawn_egg" | "azalea" | "minecraft:azalea" | "azalea_leaves" | "minecraft:azalea_leaves" | "azure_bluet" | "minecraft:azure_bluet" | "baked_potato" | "minecraft:baked_potato" | "bamboo" | "minecraft:bamboo" | "barrel" | "minecraft:barrel" | "barrier" | "minecraft:barrier" | "basalt" | "minecraft:basalt" | "bat_spawn_egg" | "minecraft:bat_spawn_egg" | "beacon" | "minecraft:beacon" | "bedrock" | "minecraft:bedrock" | "bee_nest" | "minecraft:bee_nest" | "bee_spawn_egg" | "minecraft:bee_spawn_egg" | "beef" | "minecraft:beef" | "beehive" | "minecraft:beehive" | "beetroot" | "minecraft:beetroot" | "beetroot_seeds" | "minecraft:beetroot_seeds" | "beetroot_soup" | "minecraft:beetroot_soup" | "bell" | "minecraft:bell" | "big_dripleaf" | "minecraft:big_dripleaf" | "birch_boat" | "minecraft:birch_boat" | "birch_button" | "minecraft:birch_button" | "birch_door" | "minecraft:birch_door" | "birch_fence" | "minecraft:birch_fence" | "birch_fence_gate" | "minecraft:birch_fence_gate" | "birch_leaves" | "minecraft:birch_leaves" | "birch_log" | "minecraft:birch_log" | "birch_planks" | "minecraft:birch_planks" | "birch_pressure_plate" | "minecraft:birch_pressure_plate" | "birch_sapling" | "minecraft:birch_sapling" | "birch_sign" | "minecraft:birch_sign" | "birch_slab" | "minecraft:birch_slab" | "birch_stairs" | "minecraft:birch_stairs" | "birch_trapdoor" | "minecraft:birch_trapdoor" | "birch_wood" | "minecraft:birch_wood" | "black_banner" | "minecraft:black_banner" | "black_bed" | "minecraft:black_bed" | "black_candle" | "minecraft:black_candle" | "black_carpet" | "minecraft:black_carpet" | "black_concrete" | "minecraft:black_concrete" | "black_concrete_powder" | "minecraft:black_concrete_powder" | "black_dye" | "minecraft:black_dye" | "black_glazed_terracotta" | "minecraft:black_glazed_terracotta" | "black_shulker_box" | "minecraft:black_shulker_box" | "black_stained_glass" | "minecraft:black_stained_glass" | "black_stained_glass_pane" | "minecraft:black_stained_glass_pane" | "black_terracotta" | "minecraft:black_terracotta" | "black_wool" | "minecraft:black_wool" | "blackstone" | "minecraft:blackstone" | "blackstone_slab" | "minecraft:blackstone_slab" | "blackstone_stairs" | "minecraft:blackstone_stairs" | "blackstone_wall" | "minecraft:blackstone_wall" | "blast_furnace" | "minecraft:blast_furnace" | "blaze_powder" | "minecraft:blaze_powder" | "blaze_rod" | "minecraft:blaze_rod" | "blaze_spawn_egg" | "minecraft:blaze_spawn_egg" | "blue_banner" | "minecraft:blue_banner" | "blue_bed" | "minecraft:blue_bed" | "blue_candle" | "minecraft:blue_candle" | "blue_carpet" | "minecraft:blue_carpet" | "blue_concrete" | "minecraft:blue_concrete" | "blue_concrete_powder" | "minecraft:blue_concrete_powder" | "blue_dye" | "minecraft:blue_dye" | "blue_glazed_terracotta" | "minecraft:blue_glazed_terracotta" | "blue_ice" | "minecraft:blue_ice" | "blue_orchid" | "minecraft:blue_orchid" | "blue_shulker_box" | "minecraft:blue_shulker_box" | "blue_stained_glass" | "minecraft:blue_stained_glass" | "blue_stained_glass_pane" | "minecraft:blue_stained_glass_pane" | "blue_terracotta" | "minecraft:blue_terracotta" | "blue_wool" | "minecraft:blue_wool" | "bone" | "minecraft:bone" | "bone_block" | "minecraft:bone_block" | "bone_meal" | "minecraft:bone_meal" | "book" | "minecraft:book" | "bookshelf" | "minecraft:bookshelf" | "bow" | "minecraft:bow" | "bowl" | "minecraft:bowl" | "brain_coral" | "minecraft:brain_coral" | "brain_coral_block" | "minecraft:brain_coral_block" | "brain_coral_fan" | "minecraft:brain_coral_fan" | "bread" | "minecraft:bread" | "brewing_stand" | "minecraft:brewing_stand" | "brick" | "minecraft:brick" | "brick_slab" | "minecraft:brick_slab" | "brick_stairs" | "minecraft:brick_stairs" | "brick_wall" | "minecraft:brick_wall" | "bricks" | "minecraft:bricks" | "brown_banner" | "minecraft:brown_banner" | "brown_bed" | "minecraft:brown_bed" | "brown_candle" | "minecraft:brown_candle" | "brown_carpet" | "minecraft:brown_carpet" | "brown_concrete" | "minecraft:brown_concrete" | "brown_concrete_powder" | "minecraft:brown_concrete_powder" | "brown_dye" | "minecraft:brown_dye" | "brown_glazed_terracotta" | "minecraft:brown_glazed_terracotta" | "brown_mushroom" | "minecraft:brown_mushroom" | "brown_mushroom_block" | "minecraft:brown_mushroom_block" | "brown_shulker_box" | "minecraft:brown_shulker_box" | "brown_stained_glass" | "minecraft:brown_stained_glass" | "brown_stained_glass_pane" | "minecraft:brown_stained_glass_pane" | "brown_terracotta" | "minecraft:brown_terracotta" | "brown_wool" | "minecraft:brown_wool" | "bubble_coral" | "minecraft:bubble_coral" | "bubble_coral_block" | "minecraft:bubble_coral_block" | "bubble_coral_fan" | "minecraft:bubble_coral_fan" | "bucket" | "minecraft:bucket" | "budding_amethyst" | "minecraft:budding_amethyst" | "bundle" | "minecraft:bundle" | "cactus" | "minecraft:cactus" | "cake" | "minecraft:cake" | "calcite" | "minecraft:calcite" | "campfire" | "minecraft:campfire" | "candle" | "minecraft:candle" | "carrot" | "minecraft:carrot" | "carrot_on_a_stick" | "minecraft:carrot_on_a_stick" | "cartography_table" | "minecraft:cartography_table" | "carved_pumpkin" | "minecraft:carved_pumpkin" | "cat_spawn_egg" | "minecraft:cat_spawn_egg" | "cauldron" | "minecraft:cauldron" | "cave_spider_spawn_egg" | "minecraft:cave_spider_spawn_egg" | "chain" | "minecraft:chain" | "chain_command_block" | "minecraft:chain_command_block" | "chainmail_boots" | "minecraft:chainmail_boots" | "chainmail_chestplate" | "minecraft:chainmail_chestplate" | "chainmail_helmet" | "minecraft:chainmail_helmet" | "chainmail_leggings" | "minecraft:chainmail_leggings" | "charcoal" | "minecraft:charcoal" | "chest" | "minecraft:chest" | "chest_minecart" | "minecraft:chest_minecart" | "chicken" | "minecraft:chicken" | "chicken_spawn_egg" | "minecraft:chicken_spawn_egg" | "chipped_anvil" | "minecraft:chipped_anvil" | "chiseled_deepslate" | "minecraft:chiseled_deepslate" | "chiseled_nether_bricks" | "minecraft:chiseled_nether_bricks" | "chiseled_polished_blackstone" | "minecraft:chiseled_polished_blackstone" | "chiseled_quartz_block" | "minecraft:chiseled_quartz_block" | "chiseled_red_sandstone" | "minecraft:chiseled_red_sandstone" | "chiseled_sandstone" | "minecraft:chiseled_sandstone" | "chiseled_stone_bricks" | "minecraft:chiseled_stone_bricks" | "chorus_flower" | "minecraft:chorus_flower" | "chorus_fruit" | "minecraft:chorus_fruit" | "chorus_plant" | "minecraft:chorus_plant" | "clay" | "minecraft:clay" | "clay_ball" | "minecraft:clay_ball" | "clock" | "minecraft:clock" | "coal" | "minecraft:coal" | "coal_block" | "minecraft:coal_block" | "coal_ore" | "minecraft:coal_ore" | "coarse_dirt" | "minecraft:coarse_dirt" | "cobbled_deepslate" | "minecraft:cobbled_deepslate" | "cobbled_deepslate_slab" | "minecraft:cobbled_deepslate_slab" | "cobbled_deepslate_stairs" | "minecraft:cobbled_deepslate_stairs" | "cobbled_deepslate_wall" | "minecraft:cobbled_deepslate_wall" | "cobblestone" | "minecraft:cobblestone" | "cobblestone_slab" | "minecraft:cobblestone_slab" | "cobblestone_stairs" | "minecraft:cobblestone_stairs" | "cobblestone_wall" | "minecraft:cobblestone_wall" | "cobweb" | "minecraft:cobweb" | "cocoa_beans" | "minecraft:cocoa_beans" | "cod" | "minecraft:cod" | "cod_bucket" | "minecraft:cod_bucket" | "cod_spawn_egg" | "minecraft:cod_spawn_egg" | "command_block" | "minecraft:command_block" | "command_block_minecart" | "minecraft:command_block_minecart" | "comparator" | "minecraft:comparator" | "compass" | "minecraft:compass" | "composter" | "minecraft:composter" | "conduit" | "minecraft:conduit" | "cooked_beef" | "minecraft:cooked_beef" | "cooked_chicken" | "minecraft:cooked_chicken" | "cooked_cod" | "minecraft:cooked_cod" | "cooked_mutton" | "minecraft:cooked_mutton" | "cooked_porkchop" | "minecraft:cooked_porkchop" | "cooked_rabbit" | "minecraft:cooked_rabbit" | "cooked_salmon" | "minecraft:cooked_salmon" | "cookie" | "minecraft:cookie" | "copper_block" | "minecraft:copper_block" | "copper_ingot" | "minecraft:copper_ingot" | "copper_ore" | "minecraft:copper_ore" | "cornflower" | "minecraft:cornflower" | "cow_spawn_egg" | "minecraft:cow_spawn_egg" | "cracked_deepslate_bricks" | "minecraft:cracked_deepslate_bricks" | "cracked_deepslate_tiles" | "minecraft:cracked_deepslate_tiles" | "cracked_nether_bricks" | "minecraft:cracked_nether_bricks" | "cracked_polished_blackstone_bricks" | "minecraft:cracked_polished_blackstone_bricks" | "cracked_stone_bricks" | "minecraft:cracked_stone_bricks" | "crafting_table" | "minecraft:crafting_table" | "creeper_banner_pattern" | "minecraft:creeper_banner_pattern" | "creeper_head" | "minecraft:creeper_head" | "creeper_spawn_egg" | "minecraft:creeper_spawn_egg" | "crimson_button" | "minecraft:crimson_button" | "crimson_door" | "minecraft:crimson_door" | "crimson_fence" | "minecraft:crimson_fence" | "crimson_fence_gate" | "minecraft:crimson_fence_gate" | "crimson_fungus" | "minecraft:crimson_fungus" | "crimson_hyphae" | "minecraft:crimson_hyphae" | "crimson_nylium" | "minecraft:crimson_nylium" | "crimson_planks" | "minecraft:crimson_planks" | "crimson_pressure_plate" | "minecraft:crimson_pressure_plate" | "crimson_roots" | "minecraft:crimson_roots" | "crimson_sign" | "minecraft:crimson_sign" | "crimson_slab" | "minecraft:crimson_slab" | "crimson_stairs" | "minecraft:crimson_stairs" | "crimson_stem" | "minecraft:crimson_stem" | "crimson_trapdoor" | "minecraft:crimson_trapdoor" | "crossbow" | "minecraft:crossbow" | "crying_obsidian" | "minecraft:crying_obsidian" | "cut_copper" | "minecraft:cut_copper" | "cut_copper_slab" | "minecraft:cut_copper_slab" | "cut_copper_stairs" | "minecraft:cut_copper_stairs" | "cut_red_sandstone" | "minecraft:cut_red_sandstone" | "cut_red_sandstone_slab" | "minecraft:cut_red_sandstone_slab" | "cut_sandstone" | "minecraft:cut_sandstone" | "cut_sandstone_slab" | "minecraft:cut_sandstone_slab" | "cyan_banner" | "minecraft:cyan_banner" | "cyan_bed" | "minecraft:cyan_bed" | "cyan_candle" | "minecraft:cyan_candle" | "cyan_carpet" | "minecraft:cyan_carpet" | "cyan_concrete" | "minecraft:cyan_concrete" | "cyan_concrete_powder" | "minecraft:cyan_concrete_powder" | "cyan_dye" | "minecraft:cyan_dye" | "cyan_glazed_terracotta" | "minecraft:cyan_glazed_terracotta" | "cyan_shulker_box" | "minecraft:cyan_shulker_box" | "cyan_stained_glass" | "minecraft:cyan_stained_glass" | "cyan_stained_glass_pane" | "minecraft:cyan_stained_glass_pane" | "cyan_terracotta" | "minecraft:cyan_terracotta" | "cyan_wool" | "minecraft:cyan_wool" | "damaged_anvil" | "minecraft:damaged_anvil" | "dandelion" | "minecraft:dandelion" | "dark_oak_boat" | "minecraft:dark_oak_boat" | "dark_oak_button" | "minecraft:dark_oak_button" | "dark_oak_door" | "minecraft:dark_oak_door" | "dark_oak_fence" | "minecraft:dark_oak_fence" | "dark_oak_fence_gate" | "minecraft:dark_oak_fence_gate" | "dark_oak_leaves" | "minecraft:dark_oak_leaves" | "dark_oak_log" | "minecraft:dark_oak_log" | "dark_oak_planks" | "minecraft:dark_oak_planks" | "dark_oak_pressure_plate" | "minecraft:dark_oak_pressure_plate" | "dark_oak_sapling" | "minecraft:dark_oak_sapling" | "dark_oak_sign" | "minecraft:dark_oak_sign" | "dark_oak_slab" | "minecraft:dark_oak_slab" | "dark_oak_stairs" | "minecraft:dark_oak_stairs" | "dark_oak_trapdoor" | "minecraft:dark_oak_trapdoor" | "dark_oak_wood" | "minecraft:dark_oak_wood" | "dark_prismarine" | "minecraft:dark_prismarine" | "dark_prismarine_slab" | "minecraft:dark_prismarine_slab" | "dark_prismarine_stairs" | "minecraft:dark_prismarine_stairs" | "daylight_detector" | "minecraft:daylight_detector" | "dead_brain_coral" | "minecraft:dead_brain_coral" | "dead_brain_coral_block" | "minecraft:dead_brain_coral_block" | "dead_brain_coral_fan" | "minecraft:dead_brain_coral_fan" | "dead_bubble_coral" | "minecraft:dead_bubble_coral" | "dead_bubble_coral_block" | "minecraft:dead_bubble_coral_block" | "dead_bubble_coral_fan" | "minecraft:dead_bubble_coral_fan" | "dead_bush" | "minecraft:dead_bush" | "dead_fire_coral" | "minecraft:dead_fire_coral" | "dead_fire_coral_block" | "minecraft:dead_fire_coral_block" | "dead_fire_coral_fan" | "minecraft:dead_fire_coral_fan" | "dead_horn_coral" | "minecraft:dead_horn_coral" | "dead_horn_coral_block" | "minecraft:dead_horn_coral_block" | "dead_horn_coral_fan" | "minecraft:dead_horn_coral_fan" | "dead_tube_coral" | "minecraft:dead_tube_coral" | "dead_tube_coral_block" | "minecraft:dead_tube_coral_block" | "dead_tube_coral_fan" | "minecraft:dead_tube_coral_fan" | "debug_stick" | "minecraft:debug_stick" | "deepslate" | "minecraft:deepslate" | "deepslate_brick_slab" | "minecraft:deepslate_brick_slab" | "deepslate_brick_stairs" | "minecraft:deepslate_brick_stairs" | "deepslate_brick_wall" | "minecraft:deepslate_brick_wall" | "deepslate_bricks" | "minecraft:deepslate_bricks" | "deepslate_coal_ore" | "minecraft:deepslate_coal_ore" | "deepslate_copper_ore" | "minecraft:deepslate_copper_ore" | "deepslate_diamond_ore" | "minecraft:deepslate_diamond_ore" | "deepslate_emerald_ore" | "minecraft:deepslate_emerald_ore" | "deepslate_gold_ore" | "minecraft:deepslate_gold_ore" | "deepslate_iron_ore" | "minecraft:deepslate_iron_ore" | "deepslate_lapis_ore" | "minecraft:deepslate_lapis_ore" | "deepslate_redstone_ore" | "minecraft:deepslate_redstone_ore" | "deepslate_tile_slab" | "minecraft:deepslate_tile_slab" | "deepslate_tile_stairs" | "minecraft:deepslate_tile_stairs" | "deepslate_tile_wall" | "minecraft:deepslate_tile_wall" | "deepslate_tiles" | "minecraft:deepslate_tiles" | "detector_rail" | "minecraft:detector_rail" | "diamond" | "minecraft:diamond" | "diamond_axe" | "minecraft:diamond_axe" | "diamond_block" | "minecraft:diamond_block" | "diamond_boots" | "minecraft:diamond_boots" | "diamond_chestplate" | "minecraft:diamond_chestplate" | "diamond_helmet" | "minecraft:diamond_helmet" | "diamond_hoe" | "minecraft:diamond_hoe" | "diamond_horse_armor" | "minecraft:diamond_horse_armor" | "diamond_leggings" | "minecraft:diamond_leggings" | "diamond_ore" | "minecraft:diamond_ore" | "diamond_pickaxe" | "minecraft:diamond_pickaxe" | "diamond_shovel" | "minecraft:diamond_shovel" | "diamond_sword" | "minecraft:diamond_sword" | "diorite" | "minecraft:diorite" | "diorite_slab" | "minecraft:diorite_slab" | "diorite_stairs" | "minecraft:diorite_stairs" | "diorite_wall" | "minecraft:diorite_wall" | "dirt" | "minecraft:dirt" | "dirt_path" | "minecraft:dirt_path" | "dispenser" | "minecraft:dispenser" | "dolphin_spawn_egg" | "minecraft:dolphin_spawn_egg" | "donkey_spawn_egg" | "minecraft:donkey_spawn_egg" | "dragon_breath" | "minecraft:dragon_breath" | "dragon_egg" | "minecraft:dragon_egg" | "dragon_head" | "minecraft:dragon_head" | "dried_kelp" | "minecraft:dried_kelp" | "dried_kelp_block" | "minecraft:dried_kelp_block" | "dripstone_block" | "minecraft:dripstone_block" | "dropper" | "minecraft:dropper" | "drowned_spawn_egg" | "minecraft:drowned_spawn_egg" | "egg" | "minecraft:egg" | "elder_guardian_spawn_egg" | "minecraft:elder_guardian_spawn_egg" | "elytra" | "minecraft:elytra" | "emerald" | "minecraft:emerald" | "emerald_block" | "minecraft:emerald_block" | "emerald_ore" | "minecraft:emerald_ore" | "enchanted_book" | "minecraft:enchanted_book" | "enchanted_golden_apple" | "minecraft:enchanted_golden_apple" | "enchanting_table" | "minecraft:enchanting_table" | "end_crystal" | "minecraft:end_crystal" | "end_portal_frame" | "minecraft:end_portal_frame" | "end_rod" | "minecraft:end_rod" | "end_stone" | "minecraft:end_stone" | "end_stone_brick_slab" | "minecraft:end_stone_brick_slab" | "end_stone_brick_stairs" | "minecraft:end_stone_brick_stairs" | "end_stone_brick_wall" | "minecraft:end_stone_brick_wall" | "end_stone_bricks" | "minecraft:end_stone_bricks" | "ender_chest" | "minecraft:ender_chest" | "ender_eye" | "minecraft:ender_eye" | "ender_pearl" | "minecraft:ender_pearl" | "enderman_spawn_egg" | "minecraft:enderman_spawn_egg" | "endermite_spawn_egg" | "minecraft:endermite_spawn_egg" | "evoker_spawn_egg" | "minecraft:evoker_spawn_egg" | "experience_bottle" | "minecraft:experience_bottle" | "exposed_copper" | "minecraft:exposed_copper" | "exposed_cut_copper" | "minecraft:exposed_cut_copper" | "exposed_cut_copper_slab" | "minecraft:exposed_cut_copper_slab" | "exposed_cut_copper_stairs" | "minecraft:exposed_cut_copper_stairs" | "farmland" | "minecraft:farmland" | "feather" | "minecraft:feather" | "fermented_spider_eye" | "minecraft:fermented_spider_eye" | "fern" | "minecraft:fern" | "filled_map" | "minecraft:filled_map" | "fire_charge" | "minecraft:fire_charge" | "fire_coral" | "minecraft:fire_coral" | "fire_coral_block" | "minecraft:fire_coral_block" | "fire_coral_fan" | "minecraft:fire_coral_fan" | "firework_rocket" | "minecraft:firework_rocket" | "firework_star" | "minecraft:firework_star" | "fishing_rod" | "minecraft:fishing_rod" | "fletching_table" | "minecraft:fletching_table" | "flint" | "minecraft:flint" | "flint_and_steel" | "minecraft:flint_and_steel" | "flower_banner_pattern" | "minecraft:flower_banner_pattern" | "flower_pot" | "minecraft:flower_pot" | "flowering_azalea" | "minecraft:flowering_azalea" | "flowering_azalea_leaves" | "minecraft:flowering_azalea_leaves" | "fox_spawn_egg" | "minecraft:fox_spawn_egg" | "furnace" | "minecraft:furnace" | "furnace_minecart" | "minecraft:furnace_minecart" | "ghast_spawn_egg" | "minecraft:ghast_spawn_egg" | "ghast_tear" | "minecraft:ghast_tear" | "gilded_blackstone" | "minecraft:gilded_blackstone" | "glass" | "minecraft:glass" | "glass_bottle" | "minecraft:glass_bottle" | "glass_pane" | "minecraft:glass_pane" | "glistering_melon_slice" | "minecraft:glistering_melon_slice" | "globe_banner_pattern" | "minecraft:globe_banner_pattern" | "glow_berries" | "minecraft:glow_berries" | "glow_ink_sac" | "minecraft:glow_ink_sac" | "glow_item_frame" | "minecraft:glow_item_frame" | "glow_lichen" | "minecraft:glow_lichen" | "glow_squid_spawn_egg" | "minecraft:glow_squid_spawn_egg" | "glowstone" | "minecraft:glowstone" | "glowstone_dust" | "minecraft:glowstone_dust" | "goat_spawn_egg" | "minecraft:goat_spawn_egg" | "gold_block" | "minecraft:gold_block" | "gold_ingot" | "minecraft:gold_ingot" | "gold_nugget" | "minecraft:gold_nugget" | "gold_ore" | "minecraft:gold_ore" | "golden_apple" | "minecraft:golden_apple" | "golden_axe" | "minecraft:golden_axe" | "golden_boots" | "minecraft:golden_boots" | "golden_carrot" | "minecraft:golden_carrot" | "golden_chestplate" | "minecraft:golden_chestplate" | "golden_helmet" | "minecraft:golden_helmet" | "golden_hoe" | "minecraft:golden_hoe" | "golden_horse_armor" | "minecraft:golden_horse_armor" | "golden_leggings" | "minecraft:golden_leggings" | "golden_pickaxe" | "minecraft:golden_pickaxe" | "golden_shovel" | "minecraft:golden_shovel" | "golden_sword" | "minecraft:golden_sword" | "granite" | "minecraft:granite" | "granite_slab" | "minecraft:granite_slab" | "granite_stairs" | "minecraft:granite_stairs" | "granite_wall" | "minecraft:granite_wall" | "grass" | "minecraft:grass" | "grass_block" | "minecraft:grass_block" | "gravel" | "minecraft:gravel" | "gray_banner" | "minecraft:gray_banner" | "gray_bed" | "minecraft:gray_bed" | "gray_candle" | "minecraft:gray_candle" | "gray_carpet" | "minecraft:gray_carpet" | "gray_concrete" | "minecraft:gray_concrete" | "gray_concrete_powder" | "minecraft:gray_concrete_powder" | "gray_dye" | "minecraft:gray_dye" | "gray_glazed_terracotta" | "minecraft:gray_glazed_terracotta" | "gray_shulker_box" | "minecraft:gray_shulker_box" | "gray_stained_glass" | "minecraft:gray_stained_glass" | "gray_stained_glass_pane" | "minecraft:gray_stained_glass_pane" | "gray_terracotta" | "minecraft:gray_terracotta" | "gray_wool" | "minecraft:gray_wool" | "green_banner" | "minecraft:green_banner" | "green_bed" | "minecraft:green_bed" | "green_candle" | "minecraft:green_candle" | "green_carpet" | "minecraft:green_carpet" | "green_concrete" | "minecraft:green_concrete" | "green_concrete_powder" | "minecraft:green_concrete_powder" | "green_dye" | "minecraft:green_dye" | "green_glazed_terracotta" | "minecraft:green_glazed_terracotta" | "green_shulker_box" | "minecraft:green_shulker_box" | "green_stained_glass" | "minecraft:green_stained_glass" | "green_stained_glass_pane" | "minecraft:green_stained_glass_pane" | "green_terracotta" | "minecraft:green_terracotta" | "green_wool" | "minecraft:green_wool" | "grindstone" | "minecraft:grindstone" | "guardian_spawn_egg" | "minecraft:guardian_spawn_egg" | "gunpowder" | "minecraft:gunpowder" | "hanging_roots" | "minecraft:hanging_roots" | "hay_block" | "minecraft:hay_block" | "heart_of_the_sea" | "minecraft:heart_of_the_sea" | "heavy_weighted_pressure_plate" | "minecraft:heavy_weighted_pressure_plate" | "hoglin_spawn_egg" | "minecraft:hoglin_spawn_egg" | "honey_block" | "minecraft:honey_block" | "honey_bottle" | "minecraft:honey_bottle" | "honeycomb" | "minecraft:honeycomb" | "honeycomb_block" | "minecraft:honeycomb_block" | "hopper" | "minecraft:hopper" | "hopper_minecart" | "minecraft:hopper_minecart" | "horn_coral" | "minecraft:horn_coral" | "horn_coral_block" | "minecraft:horn_coral_block" | "horn_coral_fan" | "minecraft:horn_coral_fan" | "horse_spawn_egg" | "minecraft:horse_spawn_egg" | "husk_spawn_egg" | "minecraft:husk_spawn_egg" | "ice" | "minecraft:ice" | "infested_chiseled_stone_bricks" | "minecraft:infested_chiseled_stone_bricks" | "infested_cobblestone" | "minecraft:infested_cobblestone" | "infested_cracked_stone_bricks" | "minecraft:infested_cracked_stone_bricks" | "infested_deepslate" | "minecraft:infested_deepslate" | "infested_mossy_stone_bricks" | "minecraft:infested_mossy_stone_bricks" | "infested_stone" | "minecraft:infested_stone" | "infested_stone_bricks" | "minecraft:infested_stone_bricks" | "ink_sac" | "minecraft:ink_sac" | "iron_axe" | "minecraft:iron_axe" | "iron_bars" | "minecraft:iron_bars" | "iron_block" | "minecraft:iron_block" | "iron_boots" | "minecraft:iron_boots" | "iron_chestplate" | "minecraft:iron_chestplate" | "iron_door" | "minecraft:iron_door" | "iron_helmet" | "minecraft:iron_helmet" | "iron_hoe" | "minecraft:iron_hoe" | "iron_horse_armor" | "minecraft:iron_horse_armor" | "iron_ingot" | "minecraft:iron_ingot" | "iron_leggings" | "minecraft:iron_leggings" | "iron_nugget" | "minecraft:iron_nugget" | "iron_ore" | "minecraft:iron_ore" | "iron_pickaxe" | "minecraft:iron_pickaxe" | "iron_shovel" | "minecraft:iron_shovel" | "iron_sword" | "minecraft:iron_sword" | "iron_trapdoor" | "minecraft:iron_trapdoor" | "item_frame" | "minecraft:item_frame" | "jack_o_lantern" | "minecraft:jack_o_lantern" | "jigsaw" | "minecraft:jigsaw" | "jukebox" | "minecraft:jukebox" | "jungle_boat" | "minecraft:jungle_boat" | "jungle_button" | "minecraft:jungle_button" | "jungle_door" | "minecraft:jungle_door" | "jungle_fence" | "minecraft:jungle_fence" | "jungle_fence_gate" | "minecraft:jungle_fence_gate" | "jungle_leaves" | "minecraft:jungle_leaves" | "jungle_log" | "minecraft:jungle_log" | "jungle_planks" | "minecraft:jungle_planks" | "jungle_pressure_plate" | "minecraft:jungle_pressure_plate" | "jungle_sapling" | "minecraft:jungle_sapling" | "jungle_sign" | "minecraft:jungle_sign" | "jungle_slab" | "minecraft:jungle_slab" | "jungle_stairs" | "minecraft:jungle_stairs" | "jungle_trapdoor" | "minecraft:jungle_trapdoor" | "jungle_wood" | "minecraft:jungle_wood" | "kelp" | "minecraft:kelp" | "knowledge_book" | "minecraft:knowledge_book" | "ladder" | "minecraft:ladder" | "lantern" | "minecraft:lantern" | "lapis_block" | "minecraft:lapis_block" | "lapis_lazuli" | "minecraft:lapis_lazuli" | "lapis_ore" | "minecraft:lapis_ore" | "large_amethyst_bud" | "minecraft:large_amethyst_bud" | "large_fern" | "minecraft:large_fern" | "lava_bucket" | "minecraft:lava_bucket" | "lead" | "minecraft:lead" | "leather" | "minecraft:leather" | "leather_boots" | "minecraft:leather_boots" | "leather_chestplate" | "minecraft:leather_chestplate" | "leather_helmet" | "minecraft:leather_helmet" | "leather_horse_armor" | "minecraft:leather_horse_armor" | "leather_leggings" | "minecraft:leather_leggings" | "lectern" | "minecraft:lectern" | "lever" | "minecraft:lever" | "light" | "minecraft:light" | "light_blue_banner" | "minecraft:light_blue_banner" | "light_blue_bed" | "minecraft:light_blue_bed" | "light_blue_candle" | "minecraft:light_blue_candle" | "light_blue_carpet" | "minecraft:light_blue_carpet" | "light_blue_concrete" | "minecraft:light_blue_concrete" | "light_blue_concrete_powder" | "minecraft:light_blue_concrete_powder" | "light_blue_dye" | "minecraft:light_blue_dye" | "light_blue_glazed_terracotta" | "minecraft:light_blue_glazed_terracotta" | "light_blue_shulker_box" | "minecraft:light_blue_shulker_box" | "light_blue_stained_glass" | "minecraft:light_blue_stained_glass" | "light_blue_stained_glass_pane" | "minecraft:light_blue_stained_glass_pane" | "light_blue_terracotta" | "minecraft:light_blue_terracotta" | "light_blue_wool" | "minecraft:light_blue_wool" | "light_gray_banner" | "minecraft:light_gray_banner" | "light_gray_bed" | "minecraft:light_gray_bed" | "light_gray_candle" | "minecraft:light_gray_candle" | "light_gray_carpet" | "minecraft:light_gray_carpet" | "light_gray_concrete" | "minecraft:light_gray_concrete" | "light_gray_concrete_powder" | "minecraft:light_gray_concrete_powder" | "light_gray_dye" | "minecraft:light_gray_dye" | "light_gray_glazed_terracotta" | "minecraft:light_gray_glazed_terracotta" | "light_gray_shulker_box" | "minecraft:light_gray_shulker_box" | "light_gray_stained_glass" | "minecraft:light_gray_stained_glass" | "light_gray_stained_glass_pane" | "minecraft:light_gray_stained_glass_pane" | "light_gray_terracotta" | "minecraft:light_gray_terracotta" | "light_gray_wool" | "minecraft:light_gray_wool" | "light_weighted_pressure_plate" | "minecraft:light_weighted_pressure_plate" | "lightning_rod" | "minecraft:lightning_rod" | "lilac" | "minecraft:lilac" | "lily_of_the_valley" | "minecraft:lily_of_the_valley" | "lily_pad" | "minecraft:lily_pad" | "lime_banner" | "minecraft:lime_banner" | "lime_bed" | "minecraft:lime_bed" | "lime_candle" | "minecraft:lime_candle" | "lime_carpet" | "minecraft:lime_carpet" | "lime_concrete" | "minecraft:lime_concrete" | "lime_concrete_powder" | "minecraft:lime_concrete_powder" | "lime_dye" | "minecraft:lime_dye" | "lime_glazed_terracotta" | "minecraft:lime_glazed_terracotta" | "lime_shulker_box" | "minecraft:lime_shulker_box" | "lime_stained_glass" | "minecraft:lime_stained_glass" | "lime_stained_glass_pane" | "minecraft:lime_stained_glass_pane" | "lime_terracotta" | "minecraft:lime_terracotta" | "lime_wool" | "minecraft:lime_wool" | "lingering_potion" | "minecraft:lingering_potion" | "llama_spawn_egg" | "minecraft:llama_spawn_egg" | "lodestone" | "minecraft:lodestone" | "loom" | "minecraft:loom" | "magenta_banner" | "minecraft:magenta_banner" | "magenta_bed" | "minecraft:magenta_bed" | "magenta_candle" | "minecraft:magenta_candle" | "magenta_carpet" | "minecraft:magenta_carpet" | "magenta_concrete" | "minecraft:magenta_concrete" | "magenta_concrete_powder" | "minecraft:magenta_concrete_powder" | "magenta_dye" | "minecraft:magenta_dye" | "magenta_glazed_terracotta" | "minecraft:magenta_glazed_terracotta" | "magenta_shulker_box" | "minecraft:magenta_shulker_box" | "magenta_stained_glass" | "minecraft:magenta_stained_glass" | "magenta_stained_glass_pane" | "minecraft:magenta_stained_glass_pane" | "magenta_terracotta" | "minecraft:magenta_terracotta" | "magenta_wool" | "minecraft:magenta_wool" | "magma_block" | "minecraft:magma_block" | "magma_cream" | "minecraft:magma_cream" | "magma_cube_spawn_egg" | "minecraft:magma_cube_spawn_egg" | "map" | "minecraft:map" | "medium_amethyst_bud" | "minecraft:medium_amethyst_bud" | "melon" | "minecraft:melon" | "melon_seeds" | "minecraft:melon_seeds" | "melon_slice" | "minecraft:melon_slice" | "milk_bucket" | "minecraft:milk_bucket" | "minecart" | "minecraft:minecart" | "mojang_banner_pattern" | "minecraft:mojang_banner_pattern" | "mooshroom_spawn_egg" | "minecraft:mooshroom_spawn_egg" | "moss_block" | "minecraft:moss_block" | "moss_carpet" | "minecraft:moss_carpet" | "mossy_cobblestone" | "minecraft:mossy_cobblestone" | "mossy_cobblestone_slab" | "minecraft:mossy_cobblestone_slab" | "mossy_cobblestone_stairs" | "minecraft:mossy_cobblestone_stairs" | "mossy_cobblestone_wall" | "minecraft:mossy_cobblestone_wall" | "mossy_stone_brick_slab" | "minecraft:mossy_stone_brick_slab" | "mossy_stone_brick_stairs" | "minecraft:mossy_stone_brick_stairs" | "mossy_stone_brick_wall" | "minecraft:mossy_stone_brick_wall" | "mossy_stone_bricks" | "minecraft:mossy_stone_bricks" | "mule_spawn_egg" | "minecraft:mule_spawn_egg" | "mushroom_stem" | "minecraft:mushroom_stem" | "mushroom_stew" | "minecraft:mushroom_stew" | "music_disc_11" | "minecraft:music_disc_11" | "music_disc_13" | "minecraft:music_disc_13" | "music_disc_blocks" | "minecraft:music_disc_blocks" | "music_disc_cat" | "minecraft:music_disc_cat" | "music_disc_chirp" | "minecraft:music_disc_chirp" | "music_disc_far" | "minecraft:music_disc_far" | "music_disc_mall" | "minecraft:music_disc_mall" | "music_disc_mellohi" | "minecraft:music_disc_mellohi" | "music_disc_otherside" | "minecraft:music_disc_otherside" | "music_disc_pigstep" | "minecraft:music_disc_pigstep" | "music_disc_stal" | "minecraft:music_disc_stal" | "music_disc_strad" | "minecraft:music_disc_strad" | "music_disc_wait" | "minecraft:music_disc_wait" | "music_disc_ward" | "minecraft:music_disc_ward" | "mutton" | "minecraft:mutton" | "mycelium" | "minecraft:mycelium" | "name_tag" | "minecraft:name_tag" | "nautilus_shell" | "minecraft:nautilus_shell" | "nether_brick" | "minecraft:nether_brick" | "nether_brick_fence" | "minecraft:nether_brick_fence" | "nether_brick_slab" | "minecraft:nether_brick_slab" | "nether_brick_stairs" | "minecraft:nether_brick_stairs" | "nether_brick_wall" | "minecraft:nether_brick_wall" | "nether_bricks" | "minecraft:nether_bricks" | "nether_gold_ore" | "minecraft:nether_gold_ore" | "nether_quartz_ore" | "minecraft:nether_quartz_ore" | "nether_sprouts" | "minecraft:nether_sprouts" | "nether_star" | "minecraft:nether_star" | "nether_wart" | "minecraft:nether_wart" | "nether_wart_block" | "minecraft:nether_wart_block" | "netherite_axe" | "minecraft:netherite_axe" | "netherite_block" | "minecraft:netherite_block" | "netherite_boots" | "minecraft:netherite_boots" | "netherite_chestplate" | "minecraft:netherite_chestplate" | "netherite_helmet" | "minecraft:netherite_helmet" | "netherite_hoe" | "minecraft:netherite_hoe" | "netherite_ingot" | "minecraft:netherite_ingot" | "netherite_leggings" | "minecraft:netherite_leggings" | "netherite_pickaxe" | "minecraft:netherite_pickaxe" | "netherite_scrap" | "minecraft:netherite_scrap" | "netherite_shovel" | "minecraft:netherite_shovel" | "netherite_sword" | "minecraft:netherite_sword" | "netherrack" | "minecraft:netherrack" | "note_block" | "minecraft:note_block" | "oak_boat" | "minecraft:oak_boat" | "oak_button" | "minecraft:oak_button" | "oak_door" | "minecraft:oak_door" | "oak_fence" | "minecraft:oak_fence" | "oak_fence_gate" | "minecraft:oak_fence_gate" | "oak_leaves" | "minecraft:oak_leaves" | "oak_log" | "minecraft:oak_log" | "oak_planks" | "minecraft:oak_planks" | "oak_pressure_plate" | "minecraft:oak_pressure_plate" | "oak_sapling" | "minecraft:oak_sapling" | "oak_sign" | "minecraft:oak_sign" | "oak_slab" | "minecraft:oak_slab" | "oak_stairs" | "minecraft:oak_stairs" | "oak_trapdoor" | "minecraft:oak_trapdoor" | "oak_wood" | "minecraft:oak_wood" | "observer" | "minecraft:observer" | "obsidian" | "minecraft:obsidian" | "ocelot_spawn_egg" | "minecraft:ocelot_spawn_egg" | "orange_banner" | "minecraft:orange_banner" | "orange_bed" | "minecraft:orange_bed" | "orange_candle" | "minecraft:orange_candle" | "orange_carpet" | "minecraft:orange_carpet" | "orange_concrete" | "minecraft:orange_concrete" | "orange_concrete_powder" | "minecraft:orange_concrete_powder" | "orange_dye" | "minecraft:orange_dye" | "orange_glazed_terracotta" | "minecraft:orange_glazed_terracotta" | "orange_shulker_box" | "minecraft:orange_shulker_box" | "orange_stained_glass" | "minecraft:orange_stained_glass" | "orange_stained_glass_pane" | "minecraft:orange_stained_glass_pane" | "orange_terracotta" | "minecraft:orange_terracotta" | "orange_tulip" | "minecraft:orange_tulip" | "orange_wool" | "minecraft:orange_wool" | "oxeye_daisy" | "minecraft:oxeye_daisy" | "oxidized_copper" | "minecraft:oxidized_copper" | "oxidized_cut_copper" | "minecraft:oxidized_cut_copper" | "oxidized_cut_copper_slab" | "minecraft:oxidized_cut_copper_slab" | "oxidized_cut_copper_stairs" | "minecraft:oxidized_cut_copper_stairs" | "packed_ice" | "minecraft:packed_ice" | "painting" | "minecraft:painting" | "panda_spawn_egg" | "minecraft:panda_spawn_egg" | "paper" | "minecraft:paper" | "parrot_spawn_egg" | "minecraft:parrot_spawn_egg" | "peony" | "minecraft:peony" | "petrified_oak_slab" | "minecraft:petrified_oak_slab" | "phantom_membrane" | "minecraft:phantom_membrane" | "phantom_spawn_egg" | "minecraft:phantom_spawn_egg" | "pig_spawn_egg" | "minecraft:pig_spawn_egg" | "piglin_banner_pattern" | "minecraft:piglin_banner_pattern" | "piglin_brute_spawn_egg" | "minecraft:piglin_brute_spawn_egg" | "piglin_spawn_egg" | "minecraft:piglin_spawn_egg" | "pillager_spawn_egg" | "minecraft:pillager_spawn_egg" | "pink_banner" | "minecraft:pink_banner" | "pink_bed" | "minecraft:pink_bed" | "pink_candle" | "minecraft:pink_candle" | "pink_carpet" | "minecraft:pink_carpet" | "pink_concrete" | "minecraft:pink_concrete" | "pink_concrete_powder" | "minecraft:pink_concrete_powder" | "pink_dye" | "minecraft:pink_dye" | "pink_glazed_terracotta" | "minecraft:pink_glazed_terracotta" | "pink_shulker_box" | "minecraft:pink_shulker_box" | "pink_stained_glass" | "minecraft:pink_stained_glass" | "pink_stained_glass_pane" | "minecraft:pink_stained_glass_pane" | "pink_terracotta" | "minecraft:pink_terracotta" | "pink_tulip" | "minecraft:pink_tulip" | "pink_wool" | "minecraft:pink_wool" | "piston" | "minecraft:piston" | "player_head" | "minecraft:player_head" | "podzol" | "minecraft:podzol" | "pointed_dripstone" | "minecraft:pointed_dripstone" | "poisonous_potato" | "minecraft:poisonous_potato" | "polar_bear_spawn_egg" | "minecraft:polar_bear_spawn_egg" | "polished_andesite" | "minecraft:polished_andesite" | "polished_andesite_slab" | "minecraft:polished_andesite_slab" | "polished_andesite_stairs" | "minecraft:polished_andesite_stairs" | "polished_basalt" | "minecraft:polished_basalt" | "polished_blackstone" | "minecraft:polished_blackstone" | "polished_blackstone_brick_slab" | "minecraft:polished_blackstone_brick_slab" | "polished_blackstone_brick_stairs" | "minecraft:polished_blackstone_brick_stairs" | "polished_blackstone_brick_wall" | "minecraft:polished_blackstone_brick_wall" | "polished_blackstone_bricks" | "minecraft:polished_blackstone_bricks" | "polished_blackstone_button" | "minecraft:polished_blackstone_button" | "polished_blackstone_pressure_plate" | "minecraft:polished_blackstone_pressure_plate" | "polished_blackstone_slab" | "minecraft:polished_blackstone_slab" | "polished_blackstone_stairs" | "minecraft:polished_blackstone_stairs" | "polished_blackstone_wall" | "minecraft:polished_blackstone_wall" | "polished_deepslate" | "minecraft:polished_deepslate" | "polished_deepslate_slab" | "minecraft:polished_deepslate_slab" | "polished_deepslate_stairs" | "minecraft:polished_deepslate_stairs" | "polished_deepslate_wall" | "minecraft:polished_deepslate_wall" | "polished_diorite" | "minecraft:polished_diorite" | "polished_diorite_slab" | "minecraft:polished_diorite_slab" | "polished_diorite_stairs" | "minecraft:polished_diorite_stairs" | "polished_granite" | "minecraft:polished_granite" | "polished_granite_slab" | "minecraft:polished_granite_slab" | "polished_granite_stairs" | "minecraft:polished_granite_stairs" | "popped_chorus_fruit" | "minecraft:popped_chorus_fruit" | "poppy" | "minecraft:poppy" | "porkchop" | "minecraft:porkchop" | "potato" | "minecraft:potato" | "potion" | "minecraft:potion" | "powder_snow_bucket" | "minecraft:powder_snow_bucket" | "powered_rail" | "minecraft:powered_rail" | "prismarine" | "minecraft:prismarine" | "prismarine_brick_slab" | "minecraft:prismarine_brick_slab" | "prismarine_brick_stairs" | "minecraft:prismarine_brick_stairs" | "prismarine_bricks" | "minecraft:prismarine_bricks" | "prismarine_crystals" | "minecraft:prismarine_crystals" | "prismarine_shard" | "minecraft:prismarine_shard" | "prismarine_slab" | "minecraft:prismarine_slab" | "prismarine_stairs" | "minecraft:prismarine_stairs" | "prismarine_wall" | "minecraft:prismarine_wall" | "pufferfish" | "minecraft:pufferfish" | "pufferfish_bucket" | "minecraft:pufferfish_bucket" | "pufferfish_spawn_egg" | "minecraft:pufferfish_spawn_egg" | "pumpkin" | "minecraft:pumpkin" | "pumpkin_pie" | "minecraft:pumpkin_pie" | "pumpkin_seeds" | "minecraft:pumpkin_seeds" | "purple_banner" | "minecraft:purple_banner" | "purple_bed" | "minecraft:purple_bed" | "purple_candle" | "minecraft:purple_candle" | "purple_carpet" | "minecraft:purple_carpet" | "purple_concrete" | "minecraft:purple_concrete" | "purple_concrete_powder" | "minecraft:purple_concrete_powder" | "purple_dye" | "minecraft:purple_dye" | "purple_glazed_terracotta" | "minecraft:purple_glazed_terracotta" | "purple_shulker_box" | "minecraft:purple_shulker_box" | "purple_stained_glass" | "minecraft:purple_stained_glass" | "purple_stained_glass_pane" | "minecraft:purple_stained_glass_pane" | "purple_terracotta" | "minecraft:purple_terracotta" | "purple_wool" | "minecraft:purple_wool" | "purpur_block" | "minecraft:purpur_block" | "purpur_pillar" | "minecraft:purpur_pillar" | "purpur_slab" | "minecraft:purpur_slab" | "purpur_stairs" | "minecraft:purpur_stairs" | "quartz" | "minecraft:quartz" | "quartz_block" | "minecraft:quartz_block" | "quartz_bricks" | "minecraft:quartz_bricks" | "quartz_pillar" | "minecraft:quartz_pillar" | "quartz_slab" | "minecraft:quartz_slab" | "quartz_stairs" | "minecraft:quartz_stairs" | "rabbit" | "minecraft:rabbit" | "rabbit_foot" | "minecraft:rabbit_foot" | "rabbit_hide" | "minecraft:rabbit_hide" | "rabbit_spawn_egg" | "minecraft:rabbit_spawn_egg" | "rabbit_stew" | "minecraft:rabbit_stew" | "rail" | "minecraft:rail" | "ravager_spawn_egg" | "minecraft:ravager_spawn_egg" | "raw_copper" | "minecraft:raw_copper" | "raw_copper_block" | "minecraft:raw_copper_block" | "raw_gold" | "minecraft:raw_gold" | "raw_gold_block" | "minecraft:raw_gold_block" | "raw_iron" | "minecraft:raw_iron" | "raw_iron_block" | "minecraft:raw_iron_block" | "red_banner" | "minecraft:red_banner" | "red_bed" | "minecraft:red_bed" | "red_candle" | "minecraft:red_candle" | "red_carpet" | "minecraft:red_carpet" | "red_concrete" | "minecraft:red_concrete" | "red_concrete_powder" | "minecraft:red_concrete_powder" | "red_dye" | "minecraft:red_dye" | "red_glazed_terracotta" | "minecraft:red_glazed_terracotta" | "red_mushroom" | "minecraft:red_mushroom" | "red_mushroom_block" | "minecraft:red_mushroom_block" | "red_nether_brick_slab" | "minecraft:red_nether_brick_slab" | "red_nether_brick_stairs" | "minecraft:red_nether_brick_stairs" | "red_nether_brick_wall" | "minecraft:red_nether_brick_wall" | "red_nether_bricks" | "minecraft:red_nether_bricks" | "red_sand" | "minecraft:red_sand" | "red_sandstone" | "minecraft:red_sandstone" | "red_sandstone_slab" | "minecraft:red_sandstone_slab" | "red_sandstone_stairs" | "minecraft:red_sandstone_stairs" | "red_sandstone_wall" | "minecraft:red_sandstone_wall" | "red_shulker_box" | "minecraft:red_shulker_box" | "red_stained_glass" | "minecraft:red_stained_glass" | "red_stained_glass_pane" | "minecraft:red_stained_glass_pane" | "red_terracotta" | "minecraft:red_terracotta" | "red_tulip" | "minecraft:red_tulip" | "red_wool" | "minecraft:red_wool" | "redstone" | "minecraft:redstone" | "redstone_block" | "minecraft:redstone_block" | "redstone_lamp" | "minecraft:redstone_lamp" | "redstone_ore" | "minecraft:redstone_ore" | "redstone_torch" | "minecraft:redstone_torch" | "repeater" | "minecraft:repeater" | "repeating_command_block" | "minecraft:repeating_command_block" | "respawn_anchor" | "minecraft:respawn_anchor" | "rooted_dirt" | "minecraft:rooted_dirt" | "rose_bush" | "minecraft:rose_bush" | "rotten_flesh" | "minecraft:rotten_flesh" | "saddle" | "minecraft:saddle" | "salmon" | "minecraft:salmon" | "salmon_bucket" | "minecraft:salmon_bucket" | "salmon_spawn_egg" | "minecraft:salmon_spawn_egg" | "sand" | "minecraft:sand" | "sandstone" | "minecraft:sandstone" | "sandstone_slab" | "minecraft:sandstone_slab" | "sandstone_stairs" | "minecraft:sandstone_stairs" | "sandstone_wall" | "minecraft:sandstone_wall" | "scaffolding" | "minecraft:scaffolding" | "sculk_sensor" | "minecraft:sculk_sensor" | "scute" | "minecraft:scute" | "sea_lantern" | "minecraft:sea_lantern" | "sea_pickle" | "minecraft:sea_pickle" | "seagrass" | "minecraft:seagrass" | "shears" | "minecraft:shears" | "sheep_spawn_egg" | "minecraft:sheep_spawn_egg" | "shield" | "minecraft:shield" | "shroomlight" | "minecraft:shroomlight" | "shulker_box" | "minecraft:shulker_box" | "shulker_shell" | "minecraft:shulker_shell" | "shulker_spawn_egg" | "minecraft:shulker_spawn_egg" | "silverfish_spawn_egg" | "minecraft:silverfish_spawn_egg" | "skeleton_horse_spawn_egg" | "minecraft:skeleton_horse_spawn_egg" | "skeleton_skull" | "minecraft:skeleton_skull" | "skeleton_spawn_egg" | "minecraft:skeleton_spawn_egg" | "skull_banner_pattern" | "minecraft:skull_banner_pattern" | "slime_ball" | "minecraft:slime_ball" | "slime_block" | "minecraft:slime_block" | "slime_spawn_egg" | "minecraft:slime_spawn_egg" | "small_amethyst_bud" | "minecraft:small_amethyst_bud" | "small_dripleaf" | "minecraft:small_dripleaf" | "smithing_table" | "minecraft:smithing_table" | "smoker" | "minecraft:smoker" | "smooth_basalt" | "minecraft:smooth_basalt" | "smooth_quartz" | "minecraft:smooth_quartz" | "smooth_quartz_slab" | "minecraft:smooth_quartz_slab" | "smooth_quartz_stairs" | "minecraft:smooth_quartz_stairs" | "smooth_red_sandstone" | "minecraft:smooth_red_sandstone" | "smooth_red_sandstone_slab" | "minecraft:smooth_red_sandstone_slab" | "smooth_red_sandstone_stairs" | "minecraft:smooth_red_sandstone_stairs" | "smooth_sandstone" | "minecraft:smooth_sandstone" | "smooth_sandstone_slab" | "minecraft:smooth_sandstone_slab" | "smooth_sandstone_stairs" | "minecraft:smooth_sandstone_stairs" | "smooth_stone" | "minecraft:smooth_stone" | "smooth_stone_slab" | "minecraft:smooth_stone_slab" | "snow" | "minecraft:snow" | "snow_block" | "minecraft:snow_block" | "snowball" | "minecraft:snowball" | "soul_campfire" | "minecraft:soul_campfire" | "soul_lantern" | "minecraft:soul_lantern" | "soul_sand" | "minecraft:soul_sand" | "soul_soil" | "minecraft:soul_soil" | "soul_torch" | "minecraft:soul_torch" | "spawner" | "minecraft:spawner" | "spectral_arrow" | "minecraft:spectral_arrow" | "spider_eye" | "minecraft:spider_eye" | "spider_spawn_egg" | "minecraft:spider_spawn_egg" | "splash_potion" | "minecraft:splash_potion" | "sponge" | "minecraft:sponge" | "spore_blossom" | "minecraft:spore_blossom" | "spruce_boat" | "minecraft:spruce_boat" | "spruce_button" | "minecraft:spruce_button" | "spruce_door" | "minecraft:spruce_door" | "spruce_fence" | "minecraft:spruce_fence" | "spruce_fence_gate" | "minecraft:spruce_fence_gate" | "spruce_leaves" | "minecraft:spruce_leaves" | "spruce_log" | "minecraft:spruce_log" | "spruce_planks" | "minecraft:spruce_planks" | "spruce_pressure_plate" | "minecraft:spruce_pressure_plate" | "spruce_sapling" | "minecraft:spruce_sapling" | "spruce_sign" | "minecraft:spruce_sign" | "spruce_slab" | "minecraft:spruce_slab" | "spruce_stairs" | "minecraft:spruce_stairs" | "spruce_trapdoor" | "minecraft:spruce_trapdoor" | "spruce_wood" | "minecraft:spruce_wood" | "spyglass" | "minecraft:spyglass" | "squid_spawn_egg" | "minecraft:squid_spawn_egg" | "stick" | "minecraft:stick" | "sticky_piston" | "minecraft:sticky_piston" | "stone" | "minecraft:stone" | "stone_axe" | "minecraft:stone_axe" | "stone_brick_slab" | "minecraft:stone_brick_slab" | "stone_brick_stairs" | "minecraft:stone_brick_stairs" | "stone_brick_wall" | "minecraft:stone_brick_wall" | "stone_bricks" | "minecraft:stone_bricks" | "stone_button" | "minecraft:stone_button" | "stone_hoe" | "minecraft:stone_hoe" | "stone_pickaxe" | "minecraft:stone_pickaxe" | "stone_pressure_plate" | "minecraft:stone_pressure_plate" | "stone_shovel" | "minecraft:stone_shovel" | "stone_slab" | "minecraft:stone_slab" | "stone_stairs" | "minecraft:stone_stairs" | "stone_sword" | "minecraft:stone_sword" | "stonecutter" | "minecraft:stonecutter" | "stray_spawn_egg" | "minecraft:stray_spawn_egg" | "strider_spawn_egg" | "minecraft:strider_spawn_egg" | "string" | "minecraft:string" | "stripped_acacia_log" | "minecraft:stripped_acacia_log" | "stripped_acacia_wood" | "minecraft:stripped_acacia_wood" | "stripped_birch_log" | "minecraft:stripped_birch_log" | "stripped_birch_wood" | "minecraft:stripped_birch_wood" | "stripped_crimson_hyphae" | "minecraft:stripped_crimson_hyphae" | "stripped_crimson_stem" | "minecraft:stripped_crimson_stem" | "stripped_dark_oak_log" | "minecraft:stripped_dark_oak_log" | "stripped_dark_oak_wood" | "minecraft:stripped_dark_oak_wood" | "stripped_jungle_log" | "minecraft:stripped_jungle_log" | "stripped_jungle_wood" | "minecraft:stripped_jungle_wood" | "stripped_oak_log" | "minecraft:stripped_oak_log" | "stripped_oak_wood" | "minecraft:stripped_oak_wood" | "stripped_spruce_log" | "minecraft:stripped_spruce_log" | "stripped_spruce_wood" | "minecraft:stripped_spruce_wood" | "stripped_warped_hyphae" | "minecraft:stripped_warped_hyphae" | "stripped_warped_stem" | "minecraft:stripped_warped_stem" | "structure_block" | "minecraft:structure_block" | "structure_void" | "minecraft:structure_void" | "sugar" | "minecraft:sugar" | "sugar_cane" | "minecraft:sugar_cane" | "sunflower" | "minecraft:sunflower" | "suspicious_stew" | "minecraft:suspicious_stew" | "sweet_berries" | "minecraft:sweet_berries" | "tall_grass" | "minecraft:tall_grass" | "target" | "minecraft:target" | "terracotta" | "minecraft:terracotta" | "tinted_glass" | "minecraft:tinted_glass" | "tipped_arrow" | "minecraft:tipped_arrow" | "tnt" | "minecraft:tnt" | "tnt_minecart" | "minecraft:tnt_minecart" | "torch" | "minecraft:torch" | "totem_of_undying" | "minecraft:totem_of_undying" | "trader_llama_spawn_egg" | "minecraft:trader_llama_spawn_egg" | "trapped_chest" | "minecraft:trapped_chest" | "trident" | "minecraft:trident" | "tripwire_hook" | "minecraft:tripwire_hook" | "tropical_fish" | "minecraft:tropical_fish" | "tropical_fish_bucket" | "minecraft:tropical_fish_bucket" | "tropical_fish_spawn_egg" | "minecraft:tropical_fish_spawn_egg" | "tube_coral" | "minecraft:tube_coral" | "tube_coral_block" | "minecraft:tube_coral_block" | "tube_coral_fan" | "minecraft:tube_coral_fan" | "tuff" | "minecraft:tuff" | "turtle_egg" | "minecraft:turtle_egg" | "turtle_helmet" | "minecraft:turtle_helmet" | "turtle_spawn_egg" | "minecraft:turtle_spawn_egg" | "twisting_vines" | "minecraft:twisting_vines" | "vex_spawn_egg" | "minecraft:vex_spawn_egg" | "villager_spawn_egg" | "minecraft:villager_spawn_egg" | "vindicator_spawn_egg" | "minecraft:vindicator_spawn_egg" | "vine" | "minecraft:vine" | "wandering_trader_spawn_egg" | "minecraft:wandering_trader_spawn_egg" | "warped_button" | "minecraft:warped_button" | "warped_door" | "minecraft:warped_door" | "warped_fence" | "minecraft:warped_fence" | "warped_fence_gate" | "minecraft:warped_fence_gate" | "warped_fungus" | "minecraft:warped_fungus" | "warped_fungus_on_a_stick" | "minecraft:warped_fungus_on_a_stick" | "warped_hyphae" | "minecraft:warped_hyphae" | "warped_nylium" | "minecraft:warped_nylium" | "warped_planks" | "minecraft:warped_planks" | "warped_pressure_plate" | "minecraft:warped_pressure_plate" | "warped_roots" | "minecraft:warped_roots" | "warped_sign" | "minecraft:warped_sign" | "warped_slab" | "minecraft:warped_slab" | "warped_stairs" | "minecraft:warped_stairs" | "warped_stem" | "minecraft:warped_stem" | "warped_trapdoor" | "minecraft:warped_trapdoor" | "warped_wart_block" | "minecraft:warped_wart_block" | "water_bucket" | "minecraft:water_bucket" | "waxed_copper_block" | "minecraft:waxed_copper_block" | "waxed_cut_copper" | "minecraft:waxed_cut_copper" | "waxed_cut_copper_slab" | "minecraft:waxed_cut_copper_slab" | "waxed_cut_copper_stairs" | "minecraft:waxed_cut_copper_stairs" | "waxed_exposed_copper" | "minecraft:waxed_exposed_copper" | "waxed_exposed_cut_copper" | "minecraft:waxed_exposed_cut_copper" | "waxed_exposed_cut_copper_slab" | "minecraft:waxed_exposed_cut_copper_slab" | "waxed_exposed_cut_copper_stairs" | "minecraft:waxed_exposed_cut_copper_stairs" | "waxed_oxidized_copper" | "minecraft:waxed_oxidized_copper" | "waxed_oxidized_cut_copper" | "minecraft:waxed_oxidized_cut_copper" | "waxed_oxidized_cut_copper_slab" | "minecraft:waxed_oxidized_cut_copper_slab" | "waxed_oxidized_cut_copper_stairs" | "minecraft:waxed_oxidized_cut_copper_stairs" | "waxed_weathered_copper" | "minecraft:waxed_weathered_copper" | "waxed_weathered_cut_copper" | "minecraft:waxed_weathered_cut_copper" | "waxed_weathered_cut_copper_slab" | "minecraft:waxed_weathered_cut_copper_slab" | "waxed_weathered_cut_copper_stairs" | "minecraft:waxed_weathered_cut_copper_stairs" | "weathered_copper" | "minecraft:weathered_copper" | "weathered_cut_copper" | "minecraft:weathered_cut_copper" | "weathered_cut_copper_slab" | "minecraft:weathered_cut_copper_slab" | "weathered_cut_copper_stairs" | "minecraft:weathered_cut_copper_stairs" | "weeping_vines" | "minecraft:weeping_vines" | "wet_sponge" | "minecraft:wet_sponge" | "wheat" | "minecraft:wheat" | "wheat_seeds" | "minecraft:wheat_seeds" | "white_banner" | "minecraft:white_banner" | "white_bed" | "minecraft:white_bed" | "white_candle" | "minecraft:white_candle" | "white_carpet" | "minecraft:white_carpet" | "white_concrete" | "minecraft:white_concrete" | "white_concrete_powder" | "minecraft:white_concrete_powder" | "white_dye" | "minecraft:white_dye" | "white_glazed_terracotta" | "minecraft:white_glazed_terracotta" | "white_shulker_box" | "minecraft:white_shulker_box" | "white_stained_glass" | "minecraft:white_stained_glass" | "white_stained_glass_pane" | "minecraft:white_stained_glass_pane" | "white_terracotta" | "minecraft:white_terracotta" | "white_tulip" | "minecraft:white_tulip" | "white_wool" | "minecraft:white_wool" | "witch_spawn_egg" | "minecraft:witch_spawn_egg" | "wither_rose" | "minecraft:wither_rose" | "wither_skeleton_skull" | "minecraft:wither_skeleton_skull" | "wither_skeleton_spawn_egg" | "minecraft:wither_skeleton_spawn_egg" | "wolf_spawn_egg" | "minecraft:wolf_spawn_egg" | "wooden_axe" | "minecraft:wooden_axe" | "wooden_hoe" | "minecraft:wooden_hoe" | "wooden_pickaxe" | "minecraft:wooden_pickaxe" | "wooden_shovel" | "minecraft:wooden_shovel" | "wooden_sword" | "minecraft:wooden_sword" | "writable_book" | "minecraft:writable_book" | "written_book" | "minecraft:written_book" | "yellow_banner" | "minecraft:yellow_banner" | "yellow_bed" | "minecraft:yellow_bed" | "yellow_candle" | "minecraft:yellow_candle" | "yellow_carpet" | "minecraft:yellow_carpet" | "yellow_concrete" | "minecraft:yellow_concrete" | "yellow_concrete_powder" | "minecraft:yellow_concrete_powder" | "yellow_dye" | "minecraft:yellow_dye" | "yellow_glazed_terracotta" | "minecraft:yellow_glazed_terracotta" | "yellow_shulker_box" | "minecraft:yellow_shulker_box" | "yellow_stained_glass" | "minecraft:yellow_stained_glass" | "yellow_stained_glass_pane" | "minecraft:yellow_stained_glass_pane" | "yellow_terracotta" | "minecraft:yellow_terracotta" | "yellow_wool" | "minecraft:yellow_wool" | "zoglin_spawn_egg" | "minecraft:zoglin_spawn_egg" | "zombie_head" | "minecraft:zombie_head" | "zombie_horse_spawn_egg" | "minecraft:zombie_horse_spawn_egg" | "zombie_spawn_egg" | "minecraft:zombie_spawn_egg" | "zombie_villager_spawn_egg" | "minecraft:zombie_villager_spawn_egg" | "zombified_piglin_spawn_egg" | "minecraft:zombified_piglin_spawn_egg" | "naturescompass:naturescompass" | "patchouli:guide_book" | "tiab:time_in_a_bottle";
    type Potion = "awkward" | "minecraft:awkward" | "empty" | "minecraft:empty" | "fire_resistance" | "minecraft:fire_resistance" | "harming" | "minecraft:harming" | "healing" | "minecraft:healing" | "invisibility" | "minecraft:invisibility" | "leaping" | "minecraft:leaping" | "long_fire_resistance" | "minecraft:long_fire_resistance" | "long_invisibility" | "minecraft:long_invisibility" | "long_leaping" | "minecraft:long_leaping" | "long_night_vision" | "minecraft:long_night_vision" | "long_poison" | "minecraft:long_poison" | "long_regeneration" | "minecraft:long_regeneration" | "long_slow_falling" | "minecraft:long_slow_falling" | "long_slowness" | "minecraft:long_slowness" | "long_strength" | "minecraft:long_strength" | "long_swiftness" | "minecraft:long_swiftness" | "long_turtle_master" | "minecraft:long_turtle_master" | "long_water_breathing" | "minecraft:long_water_breathing" | "long_weakness" | "minecraft:long_weakness" | "luck" | "minecraft:luck" | "mundane" | "minecraft:mundane" | "night_vision" | "minecraft:night_vision" | "poison" | "minecraft:poison" | "regeneration" | "minecraft:regeneration" | "slow_falling" | "minecraft:slow_falling" | "slowness" | "minecraft:slowness" | "strength" | "minecraft:strength" | "strong_harming" | "minecraft:strong_harming" | "strong_healing" | "minecraft:strong_healing" | "strong_leaping" | "minecraft:strong_leaping" | "strong_poison" | "minecraft:strong_poison" | "strong_regeneration" | "minecraft:strong_regeneration" | "strong_slowness" | "minecraft:strong_slowness" | "strong_strength" | "minecraft:strong_strength" | "strong_swiftness" | "minecraft:strong_swiftness" | "strong_turtle_master" | "minecraft:strong_turtle_master" | "swiftness" | "minecraft:swiftness" | "thick" | "minecraft:thick" | "turtle_master" | "minecraft:turtle_master" | "water" | "minecraft:water" | "water_breathing" | "minecraft:water_breathing" | "weakness" | "minecraft:weakness";
    type ParticleType = "ambient_entity_effect" | "minecraft:ambient_entity_effect" | "angry_villager" | "minecraft:angry_villager" | "block" | "minecraft:block" | "block_marker" | "minecraft:block_marker" | "bubble" | "minecraft:bubble" | "cloud" | "minecraft:cloud" | "crit" | "minecraft:crit" | "damage_indicator" | "minecraft:damage_indicator" | "dragon_breath" | "minecraft:dragon_breath" | "dripping_lava" | "minecraft:dripping_lava" | "falling_lava" | "minecraft:falling_lava" | "landing_lava" | "minecraft:landing_lava" | "dripping_water" | "minecraft:dripping_water" | "falling_water" | "minecraft:falling_water" | "dust" | "minecraft:dust" | "dust_color_transition" | "minecraft:dust_color_transition" | "effect" | "minecraft:effect" | "elder_guardian" | "minecraft:elder_guardian" | "enchanted_hit" | "minecraft:enchanted_hit" | "enchant" | "minecraft:enchant" | "end_rod" | "minecraft:end_rod" | "entity_effect" | "minecraft:entity_effect" | "explosion_emitter" | "minecraft:explosion_emitter" | "explosion" | "minecraft:explosion" | "falling_dust" | "minecraft:falling_dust" | "firework" | "minecraft:firework" | "fishing" | "minecraft:fishing" | "flame" | "minecraft:flame" | "soul_fire_flame" | "minecraft:soul_fire_flame" | "soul" | "minecraft:soul" | "flash" | "minecraft:flash" | "happy_villager" | "minecraft:happy_villager" | "composter" | "minecraft:composter" | "heart" | "minecraft:heart" | "instant_effect" | "minecraft:instant_effect" | "item" | "minecraft:item" | "vibration" | "minecraft:vibration" | "item_slime" | "minecraft:item_slime" | "item_snowball" | "minecraft:item_snowball" | "large_smoke" | "minecraft:large_smoke" | "lava" | "minecraft:lava" | "mycelium" | "minecraft:mycelium" | "note" | "minecraft:note" | "poof" | "minecraft:poof" | "portal" | "minecraft:portal" | "rain" | "minecraft:rain" | "smoke" | "minecraft:smoke" | "sneeze" | "minecraft:sneeze" | "spit" | "minecraft:spit" | "squid_ink" | "minecraft:squid_ink" | "sweep_attack" | "minecraft:sweep_attack" | "totem_of_undying" | "minecraft:totem_of_undying" | "underwater" | "minecraft:underwater" | "splash" | "minecraft:splash" | "witch" | "minecraft:witch" | "bubble_pop" | "minecraft:bubble_pop" | "current_down" | "minecraft:current_down" | "bubble_column_up" | "minecraft:bubble_column_up" | "nautilus" | "minecraft:nautilus" | "dolphin" | "minecraft:dolphin" | "campfire_cosy_smoke" | "minecraft:campfire_cosy_smoke" | "campfire_signal_smoke" | "minecraft:campfire_signal_smoke" | "dripping_honey" | "minecraft:dripping_honey" | "falling_honey" | "minecraft:falling_honey" | "landing_honey" | "minecraft:landing_honey" | "falling_nectar" | "minecraft:falling_nectar" | "falling_spore_blossom" | "minecraft:falling_spore_blossom" | "ash" | "minecraft:ash" | "crimson_spore" | "minecraft:crimson_spore" | "warped_spore" | "minecraft:warped_spore" | "spore_blossom_air" | "minecraft:spore_blossom_air" | "dripping_obsidian_tear" | "minecraft:dripping_obsidian_tear" | "falling_obsidian_tear" | "minecraft:falling_obsidian_tear" | "landing_obsidian_tear" | "minecraft:landing_obsidian_tear" | "reverse_portal" | "minecraft:reverse_portal" | "white_ash" | "minecraft:white_ash" | "small_flame" | "minecraft:small_flame" | "snowflake" | "minecraft:snowflake" | "dripping_dripstone_lava" | "minecraft:dripping_dripstone_lava" | "falling_dripstone_lava" | "minecraft:falling_dripstone_lava" | "dripping_dripstone_water" | "minecraft:dripping_dripstone_water" | "falling_dripstone_water" | "minecraft:falling_dripstone_water" | "glow_squid_ink" | "minecraft:glow_squid_ink" | "glow" | "minecraft:glow" | "wax_on" | "minecraft:wax_on" | "wax_off" | "minecraft:wax_off" | "electric_spark" | "minecraft:electric_spark" | "scrape" | "minecraft:scrape" | "ae2:crafting_fx" | "ae2:energy_fx" | "ae2:lightning_arc_fx" | "ae2:lightning_fx" | "ae2:matter_cannon_fx" | "ae2:vibrant_fx" | "botania:wisp" | "botania:sparkle" | "create:rotation_indicator" | "create:air_flow" | "create:air" | "create:steam_jet" | "create:heater_particle" | "create:cube" | "create:fluid_particle" | "create:basin_fluid" | "create:fluid_drip" | "create:soul" | "create:soul_base" | "create:soul_perimeter" | "create:soul_expanding_perimeter";
    type BlockEntityType = "furnace" | "minecraft:furnace" | "chest" | "minecraft:chest" | "trapped_chest" | "minecraft:trapped_chest" | "ender_chest" | "minecraft:ender_chest" | "jukebox" | "minecraft:jukebox" | "dispenser" | "minecraft:dispenser" | "dropper" | "minecraft:dropper" | "sign" | "minecraft:sign" | "mob_spawner" | "minecraft:mob_spawner" | "piston" | "minecraft:piston" | "brewing_stand" | "minecraft:brewing_stand" | "enchanting_table" | "minecraft:enchanting_table" | "end_portal" | "minecraft:end_portal" | "beacon" | "minecraft:beacon" | "skull" | "minecraft:skull" | "daylight_detector" | "minecraft:daylight_detector" | "hopper" | "minecraft:hopper" | "comparator" | "minecraft:comparator" | "banner" | "minecraft:banner" | "structure_block" | "minecraft:structure_block" | "end_gateway" | "minecraft:end_gateway" | "command_block" | "minecraft:command_block" | "shulker_box" | "minecraft:shulker_box" | "bed" | "minecraft:bed" | "conduit" | "minecraft:conduit" | "barrel" | "minecraft:barrel" | "smoker" | "minecraft:smoker" | "blast_furnace" | "minecraft:blast_furnace" | "lectern" | "minecraft:lectern" | "bell" | "minecraft:bell" | "jigsaw" | "minecraft:jigsaw" | "campfire" | "minecraft:campfire" | "beehive" | "minecraft:beehive" | "sculk_sensor" | "minecraft:sculk_sensor" | "ae2:sky_tank" | "ae2:inscriber" | "ae2:debug_energy_gen" | "ae2:light_detector" | "ae2:interface" | "ae2:creative_energy_cell" | "ae2:charger" | "ae2:quantum_ring" | "ae2:crafting_unit" | "ae2:sky_compass" | "ae2:sky_chest" | "ae2:cable_bus" | "ae2:spatial_anchor" | "ae2:paint" | "ae2:security_station" | "ae2:drive" | "ae2:io_port" | "ae2:debug_cube_gen" | "ae2:debug_chunk_loader" | "ae2:crafting_storage" | "ae2:debug_phantom_node" | "ae2:cell_workbench" | "ae2:chest" | "ae2:crafting_monitor" | "ae2:molecular_assembler" | "ae2:controller" | "ae2:energy_cell" | "ae2:spatial_pylon" | "ae2:debug_item_gen" | "ae2:energy_acceptor" | "ae2:spatial_io_port" | "ae2:quartz_growth_accelerator" | "ae2:pattern_provider" | "ae2:condenser" | "ae2:dense_energy_cell" | "ae2:wireless_access_point" | "ae2:vibration_chamber" | "botania:tiny_potato" | "botania:spawner_claw" | "botania:mana_distributor" | "botania:mana_fluxfield" | "botania:alfheim_portal" | "botania:corporea_index" | "botania:mana_pool" | "botania:prism" | "botania:open_crate" | "botania:red_string_container" | "botania:forest_eye" | "botania:corporea_retainer" | "botania:cell_block" | "botania:turntable" | "botania:pump" | "botania:red_string_fertilizer" | "botania:cacophonium_block" | "botania:runic_altar" | "botania:enchanter" | "botania:brewery" | "botania:bifrost" | "botania:corporea_interceptor" | "botania:red_string_interceptor" | "botania:avatar" | "botania:spark_changer" | "botania:corporea_crystal_cube" | "botania:starfield" | "botania:red_string_comparator" | "botania:altar" | "botania:terra_plate" | "botania:ender_eye_block" | "botania:mana_spreader" | "botania:mana_flame" | "botania:crafty_crate" | "botania:cocoon" | "botania:light_relay" | "botania:teru_teru_bozu" | "botania:mini_island" | "botania:fake_air" | "botania:hourglass" | "botania:tiny_planet_block" | "botania:platform" | "botania:corporea_funnel" | "botania:mana_pylon" | "botania:red_string_dispenser" | "botania:red_string_relay" | "botania:animated_torch" | "botania:bellows" | "botania:incense_plate" | "botania:gaia_head" | "botania:pure_daisy" | "botania:manastar" | "botania:hydroangeas" | "botania:endoflame" | "botania:thermalily" | "botania:rosa_arcana" | "botania:munchdew" | "botania:entropinnyum" | "botania:kekimurus" | "botania:gourmaryllis" | "botania:narslimmus" | "botania:spectrolus" | "botania:dandelifeon" | "botania:rafflowsia" | "botania:shulk_me_not" | "botania:bellethorn" | "botania:bellethorn_chibi" | "botania:bergamute" | "botania:dreadthorn" | "botania:heisei_dream" | "botania:tigerseye" | "botania:jaded_amaranthus" | "botania:orechid" | "botania:fallen_kanade" | "botania:exoflame" | "botania:agricarnation" | "botania:agricarnation_chibi" | "botania:hopperhock" | "botania:hopperhock_chibi" | "botania:tangleberrie" | "botania:tangleberrie_chibi" | "botania:jiyuulia" | "botania:jiyuulia_chibi" | "botania:rannuncarpus" | "botania:rannuncarpus_chibi" | "botania:hyacidus" | "botania:pollidisiac" | "botania:clayconia" | "botania:clayconia_chibi" | "botania:loonium" | "botania:daffomill" | "botania:vinculotus" | "botania:spectranthemum" | "botania:medumone" | "botania:marimorphosis" | "botania:marimorphosis_chibi" | "botania:bubbell" | "botania:bubbell_chibi" | "botania:solegnolia" | "botania:solegnolia_chibi" | "botania:orechid_ignem" | "botania:labellia" | "create:schematicannon" | "create:schematic_table" | "create:gearbox" | "create:clutch" | "create:gearshift" | "create:belt" | "create:water_wheel" | "create:encased_fan" | "create:nozzle" | "create:turntable" | "create:hand_crank" | "create:cuckoo_clock" | "create:millstone" | "create:crushing_wheel" | "create:crushing_wheel_controller" | "create:mechanical_press" | "create:mechanical_mixer" | "create:basin" | "create:depot" | "create:weighted_ejector" | "create:chute" | "create:smart_chute" | "create:speedometer" | "create:stressometer" | "create:fluid_pipe" | "create:encased_fluid_pipe" | "create:glass_fluid_pipe" | "create:mechanical_pump" | "create:smart_fluid_pipe" | "create:fluid_valve" | "create:fluid_tank" | "create:creative_fluid_tank" | "create:hose_pulley" | "create:item_drain" | "create:spout" | "create:portable_fluid_interface" | "create:steam_engine" | "create:steam_whistle" | "create:powered_shaft" | "create:mechanical_piston" | "create:gantry_shaft" | "create:windmill_bearing" | "create:mechanical_bearing" | "create:clockwork_bearing" | "create:rope_pulley" | "create:cart_assembler" | "create:sticker" | "create:deployer" | "create:portable_storage_interface" | "create:mechanical_crafter" | "create:sequenced_gearshift" | "create:flywheel" | "create:rotation_speed_controller" | "create:mechanical_arm" | "create:track" | "create:fake_track" | "create:track_station" | "create:track_signal" | "create:track_observer" | "create:item_vault" | "create:andesite_tunnel" | "create:brass_tunnel" | "create:content_observer" | "create:stockpile_switch" | "create:creative_crate" | "create:display_link" | "create:nixie_tube" | "create:redstone_link" | "create:analog_lever" | "create:placard" | "create:pulse_repeater" | "create:pulse_extender" | "create:lectern_controller" | "create:copper_backtank" | "create:peculiar_bell" | "create:toolbox" | "create:simple_kinetic" | "create:motor" | "create:encased_shaft" | "create:encased_cogwheel" | "create:encased_large_cogwheel" | "create:adjustable_pulley" | "create:gantry_pinion" | "create:chassis" | "create:drill" | "create:saw" | "create:harvester" | "create:blaze_heater" | "create:funnel" | "create:cursed_bell" | "create:bogey" | "create:sliding_door" | "create:flap_display" | "lootr:special_loot_chest" | "lootr:special_trapped_loot_chest" | "lootr:special_loot_barrel" | "lootr:special_loot_inventory" | "lootr:special_loot_shulker" | "ftbquests:barrier" | "ftbquests:stage_barrier" | "ftbquests:detector" | "enderstorage:ender_chest" | "enderstorage:ender_tank";
    type Motive = "alban" | "minecraft:alban" | "aztec" | "minecraft:aztec" | "aztec2" | "minecraft:aztec2" | "bomb" | "minecraft:bomb" | "burning_skull" | "minecraft:burning_skull" | "bust" | "minecraft:bust" | "courbet" | "minecraft:courbet" | "creebet" | "minecraft:creebet" | "donkey_kong" | "minecraft:donkey_kong" | "fighters" | "minecraft:fighters" | "graham" | "minecraft:graham" | "kebab" | "minecraft:kebab" | "match" | "minecraft:match" | "pigscene" | "minecraft:pigscene" | "plant" | "minecraft:plant" | "pointer" | "minecraft:pointer" | "pool" | "minecraft:pool" | "sea" | "minecraft:sea" | "skeleton" | "minecraft:skeleton" | "skull_and_roses" | "minecraft:skull_and_roses" | "stage" | "minecraft:stage" | "sunset" | "minecraft:sunset" | "void" | "minecraft:void" | "wanderer" | "minecraft:wanderer" | "wasteland" | "minecraft:wasteland" | "wither" | "minecraft:wither";
    type ChunkStatus = "empty" | "minecraft:empty" | "structure_starts" | "minecraft:structure_starts" | "structure_references" | "minecraft:structure_references" | "biomes" | "minecraft:biomes" | "noise" | "minecraft:noise" | "surface" | "minecraft:surface" | "carvers" | "minecraft:carvers" | "liquid_carvers" | "minecraft:liquid_carvers" | "features" | "minecraft:features" | "light" | "minecraft:light" | "spawn" | "minecraft:spawn" | "heightmaps" | "minecraft:heightmaps" | "full" | "minecraft:full";
    type RuleTestType = "tag_match" | "minecraft:tag_match" | "blockstate_match" | "minecraft:blockstate_match" | "always_true" | "minecraft:always_true" | "block_match" | "minecraft:block_match" | "kubejs:invert" | "kubejs:always_false" | "random_blockstate_match" | "minecraft:random_blockstate_match" | "random_block_match" | "minecraft:random_block_match" | "kubejs:any_match" | "kubejs:all_match";
    type PosRuleTestType = "linear_pos" | "minecraft:linear_pos" | "axis_aligned_linear_pos" | "minecraft:axis_aligned_linear_pos" | "always_true" | "minecraft:always_true";
    type MenuType = "generic_9x1" | "minecraft:generic_9x1" | "generic_9x2" | "minecraft:generic_9x2" | "generic_9x3" | "minecraft:generic_9x3" | "generic_9x4" | "minecraft:generic_9x4" | "generic_9x5" | "minecraft:generic_9x5" | "generic_9x6" | "minecraft:generic_9x6" | "generic_3x3" | "minecraft:generic_3x3" | "anvil" | "minecraft:anvil" | "beacon" | "minecraft:beacon" | "blast_furnace" | "minecraft:blast_furnace" | "brewing_stand" | "minecraft:brewing_stand" | "crafting" | "minecraft:crafting" | "enchantment" | "minecraft:enchantment" | "furnace" | "minecraft:furnace" | "grindstone" | "minecraft:grindstone" | "hopper" | "minecraft:hopper" | "lectern" | "minecraft:lectern" | "loom" | "minecraft:loom" | "merchant" | "minecraft:merchant" | "shulker_box" | "minecraft:shulker_box" | "smithing" | "minecraft:smithing" | "smoker" | "minecraft:smoker" | "cartography_table" | "minecraft:cartography_table" | "stonecutter" | "minecraft:stonecutter" | "ae2:cellworkbench" | "ae2:chest" | "ae2:condenser" | "ae2:craftamount" | "ae2:craftconfirm" | "ae2:craftingcpu" | "ae2:craftingstatus" | "ae2:craftingterm" | "ae2:drive" | "ae2:energy_level_emitter" | "ae2:formationplane" | "ae2:export_bus" | "ae2:import_bus" | "ae2:ioport" | "ae2:inscriber" | "ae2:interface" | "ae2:interfaceterminal" | "item_terminal" | "minecraft:item_terminal" | "portable_fluid_cell" | "minecraft:portable_fluid_cell" | "portable_item_cell" | "minecraft:portable_item_cell" | "wirelessterm" | "minecraft:wirelessterm" | "ae2:molecular_assembler" | "ae2:networkstatus" | "ae2:networktool" | "ae2:pattern_provider" | "ae2:patternterm" | "ae2:priority" | "ae2:qnb" | "ae2:quartzknife" | "ae2:securitystation" | "ae2:set_stock_amount" | "ae2:skychest" | "ae2:spatialanchor" | "ae2:spatialioport" | "ae2:storagebus" | "ae2:storage_level_emitter" | "ae2:vibrationchamber" | "ae2:wirelesscraftingterm" | "ae2:wireless" | "botania:bauble_box" | "botania:flower_bag" | "curios:curios_container" | "create:schematicannon" | "create:schematic_table" | "create:crafting_blueprint" | "create:linked_controller" | "create:filter" | "create:attribute_filter" | "create:schedule" | "create:toolbox" | "itemfilters:inventory_filter" | "enderstorage:ender_item_storage";
    type RecipeType = "stonecutting" | "minecraft:stonecutting" | "ae2:inscriber" | "create:item_application" | "create:mixing" | "botania:brew" | "botania:terra_plate" | "create:compacting" | "botania:orechid" | "botania:elven_trade" | "smithing" | "minecraft:smithing" | "botania:mana_infusion" | "botania:pure_daisy" | "create:conversion" | "smoking" | "minecraft:smoking" | "create:filling" | "create:basin" | "create:crushing" | "create:emptying" | "smelting" | "minecraft:smelting" | "create:cutting" | "create:splashing" | "create:deploying" | "botania:runic_altar" | "blasting" | "minecraft:blasting" | "create:milling" | "create:mechanical_crafting" | "crafting" | "minecraft:crafting" | "ae2:matter_cannon" | "create:sequenced_assembly" | "ae2:entropy" | "botania:orechid_ignem" | "botania:marimorphosis" | "create:haunting" | "botania:petal_apothecary" | "create:sandpaper_polishing" | "campfire_cooking" | "minecraft:campfire_cooking" | "create:pressing";
    type RecipeSerializer = "crafting_shaped" | "minecraft:crafting_shaped" | "crafting_shapeless" | "minecraft:crafting_shapeless" | "crafting_special_armordye" | "minecraft:crafting_special_armordye" | "crafting_special_bookcloning" | "minecraft:crafting_special_bookcloning" | "crafting_special_mapcloning" | "minecraft:crafting_special_mapcloning" | "crafting_special_mapextending" | "minecraft:crafting_special_mapextending" | "crafting_special_firework_rocket" | "minecraft:crafting_special_firework_rocket" | "crafting_special_firework_star" | "minecraft:crafting_special_firework_star" | "crafting_special_firework_star_fade" | "minecraft:crafting_special_firework_star_fade" | "crafting_special_tippedarrow" | "minecraft:crafting_special_tippedarrow" | "crafting_special_bannerduplicate" | "minecraft:crafting_special_bannerduplicate" | "crafting_special_shielddecoration" | "minecraft:crafting_special_shielddecoration" | "crafting_special_shulkerboxcoloring" | "minecraft:crafting_special_shulkerboxcoloring" | "crafting_special_suspiciousstew" | "minecraft:crafting_special_suspiciousstew" | "crafting_special_repairitem" | "minecraft:crafting_special_repairitem" | "smelting" | "minecraft:smelting" | "blasting" | "minecraft:blasting" | "smoking" | "minecraft:smoking" | "campfire_cooking" | "minecraft:campfire_cooking" | "stonecutting" | "minecraft:stonecutting" | "smithing" | "minecraft:smithing" | "ae2:inscriber" | "ae2:facade" | "ae2:entropy" | "ae2:matter_cannon" | "botania:ancient_will_attach" | "botania:armor_upgrade" | "botania:black_hole_talisman_extract" | "botania:composite_lens" | "botania:cosmetic_attach" | "botania:cosmetic_remove" | "botania:gog_alternation" | "botania:keep_ivy" | "botania:laputa_shard_upgrade" | "botania:lens_dye" | "botania:mana_gun_add_clip" | "botania:mana_gun_add_lens" | "botania:mana_gun_remove_lens" | "botania:mana_upgrade" | "botania:mana_upgrade_shapeless" | "botania:merge_vial" | "botania:nbt_output_wrapper" | "botania:phantom_ink_apply" | "botania:spell_cloth_apply" | "botania:split_lens" | "botania:terra_pick_tipping" | "botania:twig_wand" | "botania:water_bottle_matching_shaped" | "botania:elven_trade" | "botania:elven_trade_lexicon" | "botania:mana_infusion" | "botania:pure_daisy" | "botania:state_copying_pure_daisy" | "botania:brew" | "botania:petal_apothecary" | "botania:runic_altar" | "botania:runic_altar_head" | "botania:terra_plate" | "botania:orechid" | "botania:orechid_ignem" | "botania:marimorphosis" | "patchouli:shaped_book_recipe" | "patchouli:shapeless_book_recipe" | "create:conversion" | "create:crushing" | "create:cutting" | "create:milling" | "create:basin" | "create:mixing" | "create:compacting" | "create:pressing" | "create:sandpaper_polishing" | "create:splashing" | "create:haunting" | "create:deploying" | "create:filling" | "create:emptying" | "create:item_application" | "create:mechanical_crafting" | "create:sequenced_assembly" | "create:toolbox_dyeing" | "kubejs:shaped" | "kubejs:shapeless" | "forge:conditional" | "enderstorage:create_recipe" | "enderstorage:recolour_recipe";
    type Attribute = "generic.max_health" | "minecraft:generic.max_health" | "generic.follow_range" | "minecraft:generic.follow_range" | "generic.knockback_resistance" | "minecraft:generic.knockback_resistance" | "generic.movement_speed" | "minecraft:generic.movement_speed" | "generic.flying_speed" | "minecraft:generic.flying_speed" | "generic.attack_damage" | "minecraft:generic.attack_damage" | "generic.attack_knockback" | "minecraft:generic.attack_knockback" | "generic.attack_speed" | "minecraft:generic.attack_speed" | "generic.armor" | "minecraft:generic.armor" | "generic.armor_toughness" | "minecraft:generic.armor_toughness" | "generic.luck" | "minecraft:generic.luck" | "zombie.spawn_reinforcements" | "minecraft:zombie.spawn_reinforcements" | "horse.jump_strength" | "minecraft:horse.jump_strength" | "botania:pixie_spawn_chance" | "forge:swim_speed" | "forge:nametag_distance" | "forge:entity_gravity" | "forge:reach_distance" | "forge:attack_range" | "forge:step_height_addition";
    type GameEvent = "block_destroy" | "minecraft:block_destroy" | "container_close" | "minecraft:container_close" | "shear" | "minecraft:shear" | "wolf_shaking" | "minecraft:wolf_shaking" | "lightning_strike" | "minecraft:lightning_strike" | "block_place" | "minecraft:block_place" | "entity_killed" | "minecraft:entity_killed" | "ravager_roar" | "minecraft:ravager_roar" | "entity_place" | "minecraft:entity_place" | "prime_fuse" | "minecraft:prime_fuse" | "hit_ground" | "minecraft:hit_ground" | "shulker_close" | "minecraft:shulker_close" | "block_open" | "minecraft:block_open" | "entity_damaged" | "minecraft:entity_damaged" | "shulker_open" | "minecraft:shulker_open" | "block_unswitch" | "minecraft:block_unswitch" | "block_change" | "minecraft:block_change" | "block_press" | "minecraft:block_press" | "drinking_finish" | "minecraft:drinking_finish" | "fishing_rod_reel_in" | "minecraft:fishing_rod_reel_in" | "eat" | "minecraft:eat" | "elytra_free_fall" | "minecraft:elytra_free_fall" | "ring_bell" | "minecraft:ring_bell" | "explode" | "minecraft:explode" | "dispense_fail" | "minecraft:dispense_fail" | "piston_extend" | "minecraft:piston_extend" | "block_attach" | "minecraft:block_attach" | "projectile_shoot" | "minecraft:projectile_shoot" | "mob_interact" | "minecraft:mob_interact" | "flap" | "minecraft:flap" | "block_detach" | "minecraft:block_detach" | "projectile_land" | "minecraft:projectile_land" | "block_close" | "minecraft:block_close" | "minecart_moving" | "minecraft:minecart_moving" | "splash" | "minecraft:splash" | "fluid_place" | "minecraft:fluid_place" | "container_open" | "minecraft:container_open" | "fluid_pickup" | "minecraft:fluid_pickup" | "equip" | "minecraft:equip" | "block_unpress" | "minecraft:block_unpress" | "step" | "minecraft:step" | "fishing_rod_cast" | "minecraft:fishing_rod_cast" | "swim" | "minecraft:swim" | "block_switch" | "minecraft:block_switch" | "piston_contract" | "minecraft:piston_contract";
    type PositionSourceType = "block" | "minecraft:block" | "entity" | "minecraft:entity";
    type StatType = "broken" | "minecraft:broken" | "crafted" | "minecraft:crafted" | "custom" | "minecraft:custom" | "dropped" | "minecraft:dropped" | "killed" | "minecraft:killed" | "killed_by" | "minecraft:killed_by" | "mined" | "minecraft:mined" | "picked_up" | "minecraft:picked_up" | "used" | "minecraft:used";
    type VillagerType = "snow" | "minecraft:snow" | "desert" | "minecraft:desert" | "plains" | "minecraft:plains" | "jungle" | "minecraft:jungle" | "taiga" | "minecraft:taiga" | "savanna" | "minecraft:savanna" | "swamp" | "minecraft:swamp";
    type VillagerProfession = "armorer" | "minecraft:armorer" | "butcher" | "minecraft:butcher" | "cartographer" | "minecraft:cartographer" | "cleric" | "minecraft:cleric" | "farmer" | "minecraft:farmer" | "fisherman" | "minecraft:fisherman" | "fletcher" | "minecraft:fletcher" | "leatherworker" | "minecraft:leatherworker" | "librarian" | "minecraft:librarian" | "mason" | "minecraft:mason" | "nitwit" | "minecraft:nitwit" | "none" | "minecraft:none" | "shepherd" | "minecraft:shepherd" | "toolsmith" | "minecraft:toolsmith" | "weaponsmith" | "minecraft:weaponsmith" | "spacecatcustomprofessions:engineer" | "spacecatcustomprofessions:petal_apothecary";
    type PoiType = "armorer" | "minecraft:armorer" | "bee_nest" | "minecraft:bee_nest" | "beehive" | "minecraft:beehive" | "butcher" | "minecraft:butcher" | "cartographer" | "minecraft:cartographer" | "cleric" | "minecraft:cleric" | "farmer" | "minecraft:farmer" | "fisherman" | "minecraft:fisherman" | "fletcher" | "minecraft:fletcher" | "home" | "minecraft:home" | "leatherworker" | "minecraft:leatherworker" | "librarian" | "minecraft:librarian" | "lightning_rod" | "minecraft:lightning_rod" | "lodestone" | "minecraft:lodestone" | "mason" | "minecraft:mason" | "meeting" | "minecraft:meeting" | "nether_portal" | "minecraft:nether_portal" | "nitwit" | "minecraft:nitwit" | "shepherd" | "minecraft:shepherd" | "toolsmith" | "minecraft:toolsmith" | "unemployed" | "minecraft:unemployed" | "weaponsmith" | "minecraft:weaponsmith" | "spacecatcustomprofessions:engineer_poi" | "spacecatcustomprofessions:petal_apothecary_poi";
    type MemoryModuleType = "admiring_disabled" | "minecraft:admiring_disabled" | "admiring_item" | "minecraft:admiring_item" | "angry_at" | "minecraft:angry_at" | "ate_recently" | "minecraft:ate_recently" | "attack_cooling_down" | "minecraft:attack_cooling_down" | "attack_target" | "minecraft:attack_target" | "avoid_target" | "minecraft:avoid_target" | "breed_target" | "minecraft:breed_target" | "cant_reach_walk_target_since" | "minecraft:cant_reach_walk_target_since" | "celebrate_location" | "minecraft:celebrate_location" | "dancing" | "minecraft:dancing" | "disable_walk_to_admire_item" | "minecraft:disable_walk_to_admire_item" | "doors_to_close" | "minecraft:doors_to_close" | "dummy" | "minecraft:dummy" | "golem_detected_recently" | "minecraft:golem_detected_recently" | "has_hunting_cooldown" | "minecraft:has_hunting_cooldown" | "heard_bell_time" | "minecraft:heard_bell_time" | "hiding_place" | "minecraft:hiding_place" | "home" | "minecraft:home" | "hunted_recently" | "minecraft:hunted_recently" | "hurt_by" | "minecraft:hurt_by" | "hurt_by_entity" | "minecraft:hurt_by_entity" | "interactable_doors" | "minecraft:interactable_doors" | "interaction_target" | "minecraft:interaction_target" | "is_tempted" | "minecraft:is_tempted" | "job_site" | "minecraft:job_site" | "last_slept" | "minecraft:last_slept" | "last_woken" | "minecraft:last_woken" | "last_worked_at_poi" | "minecraft:last_worked_at_poi" | "long_jump_cooling_down" | "minecraft:long_jump_cooling_down" | "long_jump_mid_jump" | "minecraft:long_jump_mid_jump" | "look_target" | "minecraft:look_target" | "meeting_point" | "minecraft:meeting_point" | "mobs" | "minecraft:mobs" | "nearby_adult_piglins" | "minecraft:nearby_adult_piglins" | "nearest_attackable" | "minecraft:nearest_attackable" | "nearest_bed" | "minecraft:nearest_bed" | "nearest_hostile" | "minecraft:nearest_hostile" | "nearest_player_holding_wanted_item" | "minecraft:nearest_player_holding_wanted_item" | "nearest_players" | "minecraft:nearest_players" | "nearest_repellent" | "minecraft:nearest_repellent" | "nearest_targetable_player_not_wearing_gold" | "minecraft:nearest_targetable_player_not_wearing_gold" | "nearest_visible_adult" | "minecraft:nearest_visible_adult" | "nearest_visible_adult_hoglins" | "minecraft:nearest_visible_adult_hoglins" | "nearest_visible_adult_piglin" | "minecraft:nearest_visible_adult_piglin" | "nearest_visible_adult_piglins" | "minecraft:nearest_visible_adult_piglins" | "nearest_visible_baby_hoglin" | "minecraft:nearest_visible_baby_hoglin" | "nearest_visible_huntable_hoglin" | "minecraft:nearest_visible_huntable_hoglin" | "nearest_visible_nemesis" | "minecraft:nearest_visible_nemesis" | "nearest_visible_player" | "minecraft:nearest_visible_player" | "nearest_visible_targetable_player" | "minecraft:nearest_visible_targetable_player" | "nearest_visible_wanted_item" | "minecraft:nearest_visible_wanted_item" | "nearest_visible_zombified" | "minecraft:nearest_visible_zombified" | "pacified" | "minecraft:pacified" | "path" | "minecraft:path" | "play_dead_ticks" | "minecraft:play_dead_ticks" | "potential_job_site" | "minecraft:potential_job_site" | "ram_cooldown_ticks" | "minecraft:ram_cooldown_ticks" | "ram_target" | "minecraft:ram_target" | "ride_target" | "minecraft:ride_target" | "secondary_job_site" | "minecraft:secondary_job_site" | "temptation_cooldown_ticks" | "minecraft:temptation_cooldown_ticks" | "tempting_player" | "minecraft:tempting_player" | "time_trying_to_reach_admire_item" | "minecraft:time_trying_to_reach_admire_item" | "universal_anger" | "minecraft:universal_anger" | "visible_adult_hoglin_count" | "minecraft:visible_adult_hoglin_count" | "visible_adult_piglin_count" | "minecraft:visible_adult_piglin_count" | "visible_mobs" | "minecraft:visible_mobs" | "visible_villager_babies" | "minecraft:visible_villager_babies" | "walk_target" | "minecraft:walk_target";
    type SensorType = "dummy" | "minecraft:dummy" | "nearest_items" | "minecraft:nearest_items" | "nearest_living_entities" | "minecraft:nearest_living_entities" | "nearest_players" | "minecraft:nearest_players" | "nearest_bed" | "minecraft:nearest_bed" | "hurt_by" | "minecraft:hurt_by" | "villager_hostiles" | "minecraft:villager_hostiles" | "villager_babies" | "minecraft:villager_babies" | "secondary_pois" | "minecraft:secondary_pois" | "golem_detected" | "minecraft:golem_detected" | "piglin_specific_sensor" | "minecraft:piglin_specific_sensor" | "piglin_brute_specific_sensor" | "minecraft:piglin_brute_specific_sensor" | "hoglin_specific_sensor" | "minecraft:hoglin_specific_sensor" | "nearest_adult" | "minecraft:nearest_adult" | "axolotl_attackables" | "minecraft:axolotl_attackables" | "axolotl_temptations" | "minecraft:axolotl_temptations" | "goat_temptations" | "minecraft:goat_temptations";
    type Schedule = "empty" | "minecraft:empty" | "simple" | "minecraft:simple" | "villager_baby" | "minecraft:villager_baby" | "villager_default" | "minecraft:villager_default";
    type Activity = "core" | "minecraft:core" | "idle" | "minecraft:idle" | "work" | "minecraft:work" | "play" | "minecraft:play" | "rest" | "minecraft:rest" | "meet" | "minecraft:meet" | "panic" | "minecraft:panic" | "raid" | "minecraft:raid" | "pre_raid" | "minecraft:pre_raid" | "hide" | "minecraft:hide" | "fight" | "minecraft:fight" | "celebrate" | "minecraft:celebrate" | "admire_item" | "minecraft:admire_item" | "avoid" | "minecraft:avoid" | "ride" | "minecraft:ride" | "play_dead" | "minecraft:play_dead" | "long_jump" | "minecraft:long_jump" | "ram" | "minecraft:ram";
    type LootPoolEntryType = "group" | "minecraft:group" | "loot_table" | "minecraft:loot_table" | "empty" | "minecraft:empty" | "item" | "minecraft:item" | "dynamic" | "minecraft:dynamic" | "sequence" | "minecraft:sequence" | "alternatives" | "minecraft:alternatives" | "tag" | "minecraft:tag";
    type LootItemFunctionType = "enchant_with_levels" | "minecraft:enchant_with_levels" | "copy_name" | "minecraft:copy_name" | "furnace_smelt" | "minecraft:furnace_smelt" | "copy_nbt" | "minecraft:copy_nbt" | "set_banner_pattern" | "minecraft:set_banner_pattern" | "set_lore" | "minecraft:set_lore" | "apply_bonus" | "minecraft:apply_bonus" | "fill_player_head" | "minecraft:fill_player_head" | "set_name" | "minecraft:set_name" | "set_count" | "minecraft:set_count" | "copy_state" | "minecraft:copy_state" | "curios:set_curio_attributes" | "set_stew_effect" | "minecraft:set_stew_effect" | "botania:bind_uuid" | "set_attributes" | "minecraft:set_attributes" | "set_damage" | "minecraft:set_damage" | "set_loot_table" | "minecraft:set_loot_table" | "set_nbt" | "minecraft:set_nbt" | "explosion_decay" | "minecraft:explosion_decay" | "exploration_map" | "minecraft:exploration_map" | "looting_enchant" | "minecraft:looting_enchant" | "enchant_randomly" | "minecraft:enchant_randomly" | "set_enchantments" | "minecraft:set_enchantments" | "set_potion" | "minecraft:set_potion" | "set_contents" | "minecraft:set_contents" | "limit_count" | "minecraft:limit_count";
    type LootItemConditionType = "value_check" | "minecraft:value_check" | "random_chance" | "minecraft:random_chance" | "killed_by_player" | "minecraft:killed_by_player" | "survives_explosion" | "minecraft:survives_explosion" | "table_bonus" | "minecraft:table_bonus" | "location_check" | "minecraft:location_check" | "damage_source_properties" | "minecraft:damage_source_properties" | "random_chance_with_looting" | "minecraft:random_chance_with_looting" | "botania:true_guardian_killer" | "entity_properties" | "minecraft:entity_properties" | "entity_scores" | "minecraft:entity_scores" | "botania:enable_relics" | "inverted" | "minecraft:inverted" | "block_state_property" | "minecraft:block_state_property" | "reference" | "minecraft:reference" | "lootr:loot_count" | "alternative" | "minecraft:alternative" | "time_check" | "minecraft:time_check" | "botania:killed_by_player" | "weather_check" | "minecraft:weather_check" | "forge:loot_table_id" | "ae2:needs_press" | "match_tool" | "minecraft:match_tool" | "forge:can_tool_perform_action";
    type LootNumberProviderType = "uniform" | "minecraft:uniform" | "score" | "minecraft:score" | "binomial" | "minecraft:binomial" | "constant" | "minecraft:constant";
    type LootNbtProviderType = "context" | "minecraft:context" | "storage" | "minecraft:storage";
    type LootScoreProviderType = "fixed" | "minecraft:fixed" | "context" | "minecraft:context";
    type DimensionType = never;
    type Level = never;
    type LevelStem = never;
    type FloatProviderType = "uniform" | "minecraft:uniform" | "clamped_normal" | "minecraft:clamped_normal" | "trapezoid" | "minecraft:trapezoid" | "constant" | "minecraft:constant";
    type IntProviderType = "uniform" | "minecraft:uniform" | "biased_to_bottom" | "minecraft:biased_to_bottom" | "clamped" | "minecraft:clamped" | "clamped_normal" | "minecraft:clamped_normal" | "constant" | "minecraft:constant" | "weighted_list" | "minecraft:weighted_list";
    type HeightProviderType = "uniform" | "minecraft:uniform" | "biased_to_bottom" | "minecraft:biased_to_bottom" | "very_biased_to_bottom" | "minecraft:very_biased_to_bottom" | "trapezoid" | "minecraft:trapezoid" | "constant" | "minecraft:constant" | "weighted_list" | "minecraft:weighted_list";
    type BlockPredicateType = "any_of" | "minecraft:any_of" | "all_of" | "minecraft:all_of" | "not" | "minecraft:not" | "matching_fluids" | "minecraft:matching_fluids" | "would_survive" | "minecraft:would_survive" | "inside_world_bounds" | "minecraft:inside_world_bounds" | "true" | "minecraft:true" | "solid" | "minecraft:solid" | "matching_blocks" | "minecraft:matching_blocks" | "replaceable" | "minecraft:replaceable" | "matching_block_tag" | "minecraft:matching_block_tag" | "has_sturdy_face" | "minecraft:has_sturdy_face";
    type NoiseGeneratorSettings = "nether" | "minecraft:nether" | "floating_islands" | "minecraft:floating_islands" | "overworld" | "minecraft:overworld" | "amplified" | "minecraft:amplified" | "caves" | "minecraft:caves" | "end" | "minecraft:end" | "large_biomes" | "minecraft:large_biomes";
    type ConfiguredWorldCarver = "canyon" | "minecraft:canyon" | "cave_extra_underground" | "minecraft:cave_extra_underground" | "nether_cave" | "minecraft:nether_cave" | "cave" | "minecraft:cave";
    type ConfiguredFeature = "lake_lava" | "minecraft:lake_lava" | "azalea_tree" | "minecraft:azalea_tree" | "fancy_oak_bees_002" | "minecraft:fancy_oak_bees_002" | "disk_sand" | "minecraft:disk_sand" | "spring_nether_open" | "minecraft:spring_nether_open" | "patch_large_fern" | "minecraft:patch_large_fern" | "fancy_oak_bees_005" | "minecraft:fancy_oak_bees_005" | "trees_old_growth_pine_taiga" | "minecraft:trees_old_growth_pine_taiga" | "cave_vine" | "minecraft:cave_vine" | "flower_meadow" | "minecraft:flower_meadow" | "patch_red_mushroom" | "minecraft:patch_red_mushroom" | "ore_lapis" | "minecraft:ore_lapis" | "blue_ice" | "minecraft:blue_ice" | "sea_pickle" | "minecraft:sea_pickle" | "end_gateway_delayed" | "minecraft:end_gateway_delayed" | "blackstone_blobs" | "minecraft:blackstone_blobs" | "huge_brown_mushroom" | "minecraft:huge_brown_mushroom" | "iceberg_blue" | "minecraft:iceberg_blue" | "patch_crimson_roots" | "minecraft:patch_crimson_roots" | "clay_with_dripleaves" | "minecraft:clay_with_dripleaves" | "ore_magma" | "minecraft:ore_magma" | "end_island" | "minecraft:end_island" | "bamboo_no_podzol" | "minecraft:bamboo_no_podzol" | "trees_water" | "minecraft:trees_water" | "patch_tall_grass" | "minecraft:patch_tall_grass" | "freeze_top_layer" | "minecraft:freeze_top_layer" | "ore_diorite" | "minecraft:ore_diorite" | "trees_jungle" | "minecraft:trees_jungle" | "seagrass_short" | "minecraft:seagrass_short" | "amethyst_geode" | "minecraft:amethyst_geode" | "ore_copper_large" | "minecraft:ore_copper_large" | "ore_soul_sand" | "minecraft:ore_soul_sand" | "fancy_oak_bees_0002" | "minecraft:fancy_oak_bees_0002" | "spore_blossom" | "minecraft:spore_blossom" | "flower_default" | "minecraft:flower_default" | "end_spike" | "minecraft:end_spike" | "seagrass_mid" | "minecraft:seagrass_mid" | "meadow_trees" | "minecraft:meadow_trees" | "patch_cactus" | "minecraft:patch_cactus" | "oak_bees_005" | "minecraft:oak_bees_005" | "ore_lapis_buried" | "minecraft:ore_lapis_buried" | "patch_grass" | "minecraft:patch_grass" | "trees_savanna" | "minecraft:trees_savanna" | "patch_sunflower" | "minecraft:patch_sunflower" | "trees_flower_forest" | "minecraft:trees_flower_forest" | "spring_lava_overworld" | "minecraft:spring_lava_overworld" | "bamboo_vegetation" | "minecraft:bamboo_vegetation" | "birch" | "minecraft:birch" | "oak_bees_002" | "minecraft:oak_bees_002" | "glowstone_extra" | "minecraft:glowstone_extra" | "seagrass_tall" | "minecraft:seagrass_tall" | "ice_patch" | "minecraft:ice_patch" | "pile_hay" | "minecraft:pile_hay" | "fossil_coal" | "minecraft:fossil_coal" | "basalt_pillar" | "minecraft:basalt_pillar" | "dripleaf" | "minecraft:dripleaf" | "monster_room" | "minecraft:monster_room" | "ore_andesite" | "minecraft:ore_andesite" | "jungle_tree" | "minecraft:jungle_tree" | "basalt_blobs" | "minecraft:basalt_blobs" | "trees_windswept_hills" | "minecraft:trees_windswept_hills" | "ore_ancient_debris_small" | "minecraft:ore_ancient_debris_small" | "moss_patch_bonemeal" | "minecraft:moss_patch_bonemeal" | "patch_soul_fire" | "minecraft:patch_soul_fire" | "botania:mystical_mushrooms" | "huge_red_mushroom" | "minecraft:huge_red_mushroom" | "spruce" | "minecraft:spruce" | "crimson_forest_vegetation" | "minecraft:crimson_forest_vegetation" | "forest_rock" | "minecraft:forest_rock" | "warped_forest_vegetation_bonemeal" | "minecraft:warped_forest_vegetation_bonemeal" | "pointed_dripstone" | "minecraft:pointed_dripstone" | "moss_patch_ceiling" | "minecraft:moss_patch_ceiling" | "disk_clay" | "minecraft:disk_clay" | "underwater_magma" | "minecraft:underwater_magma" | "jungle_bush" | "minecraft:jungle_bush" | "birch_bees_002" | "minecraft:birch_bees_002" | "birch_bees_005" | "minecraft:birch_bees_005" | "ore_gold_buried" | "minecraft:ore_gold_buried" | "weeping_vines" | "minecraft:weeping_vines" | "large_dripstone" | "minecraft:large_dripstone" | "jungle_tree_no_vine" | "minecraft:jungle_tree_no_vine" | "flower_flower_forest" | "minecraft:flower_flower_forest" | "lush_caves_clay" | "minecraft:lush_caves_clay" | "void_start_platform" | "minecraft:void_start_platform" | "spring_nether_closed" | "minecraft:spring_nether_closed" | "nether_sprouts_bonemeal" | "minecraft:nether_sprouts_bonemeal" | "moss_patch" | "minecraft:moss_patch" | "spring_water" | "minecraft:spring_water" | "ore_tuff" | "minecraft:ore_tuff" | "ore_diamond_small" | "minecraft:ore_diamond_small" | "ore_blackstone" | "minecraft:ore_blackstone" | "fossil_diamonds" | "minecraft:fossil_diamonds" | "birch_tall" | "minecraft:birch_tall" | "mega_jungle_tree" | "minecraft:mega_jungle_tree" | "spring_lava_nether" | "minecraft:spring_lava_nether" | "end_gateway_return" | "minecraft:end_gateway_return" | "small_basalt_columns" | "minecraft:small_basalt_columns" | "crimson_fungus" | "minecraft:crimson_fungus" | "trees_birch_and_oak" | "minecraft:trees_birch_and_oak" | "botania:mystical_flowers" | "trees_old_growth_spruce_taiga" | "minecraft:trees_old_growth_spruce_taiga" | "chorus_plant" | "minecraft:chorus_plant" | "patch_pumpkin" | "minecraft:patch_pumpkin" | "forest_flowers" | "minecraft:forest_flowers" | "ore_dirt" | "minecraft:ore_dirt" | "desert_well" | "minecraft:desert_well" | "seagrass_slightly_less_short" | "minecraft:seagrass_slightly_less_short" | "spring_lava_frozen" | "minecraft:spring_lava_frozen" | "patch_fire" | "minecraft:patch_fire" | "fancy_oak_bees" | "minecraft:fancy_oak_bees" | "disk_gravel" | "minecraft:disk_gravel" | "nether_sprouts" | "minecraft:nether_sprouts" | "oak" | "minecraft:oak" | "birch_bees_0002" | "minecraft:birch_bees_0002" | "warped_fungus_planted" | "minecraft:warped_fungus_planted" | "dark_oak" | "minecraft:dark_oak" | "create:striated_ores_nether" | "warm_ocean_vegetation" | "minecraft:warm_ocean_vegetation" | "swamp_oak" | "minecraft:swamp_oak" | "super_birch_bees" | "minecraft:super_birch_bees" | "twisting_vines_bonemeal" | "minecraft:twisting_vines_bonemeal" | "seagrass_simple" | "minecraft:seagrass_simple" | "crimson_fungus_planted" | "minecraft:crimson_fungus_planted" | "ore_nether_gold" | "minecraft:ore_nether_gold" | "create:striated_ores_overworld" | "trees_taiga" | "minecraft:trees_taiga" | "delta" | "minecraft:delta" | "create:zinc_ore" | "ore_granite" | "minecraft:ore_granite" | "ore_ancient_debris_large" | "minecraft:ore_ancient_debris_large" | "ore_clay" | "minecraft:ore_clay" | "ore_gold" | "minecraft:ore_gold" | "flower_swamp" | "minecraft:flower_swamp" | "mega_spruce" | "minecraft:mega_spruce" | "trees_plains" | "minecraft:trees_plains" | "patch_taiga_grass" | "minecraft:patch_taiga_grass" | "large_basalt_columns" | "minecraft:large_basalt_columns" | "single_piece_of_grass" | "minecraft:single_piece_of_grass" | "ice_spike" | "minecraft:ice_spike" | "bamboo_some_podzol" | "minecraft:bamboo_some_podzol" | "warped_forest_vegetation" | "minecraft:warped_forest_vegetation" | "acacia" | "minecraft:acacia" | "pile_pumpkin" | "minecraft:pile_pumpkin" | "ore_diamond_large" | "minecraft:ore_diamond_large" | "dripstone_cluster" | "minecraft:dripstone_cluster" | "pile_ice" | "minecraft:pile_ice" | "trees_grove" | "minecraft:trees_grove" | "ore_infested" | "minecraft:ore_infested" | "twisting_vines" | "minecraft:twisting_vines" | "ore_copper_small" | "minecraft:ore_copper_small" | "cave_vine_in_moss" | "minecraft:cave_vine_in_moss" | "super_birch_bees_0002" | "minecraft:super_birch_bees_0002" | "patch_waterlily" | "minecraft:patch_waterlily" | "ore_iron" | "minecraft:ore_iron" | "dark_forest_vegetation" | "minecraft:dark_forest_vegetation" | "flower_plain" | "minecraft:flower_plain" | "fancy_oak" | "minecraft:fancy_oak" | "patch_sugar_cane" | "minecraft:patch_sugar_cane" | "iceberg_packed" | "minecraft:iceberg_packed" | "ore_quartz" | "minecraft:ore_quartz" | "kelp" | "minecraft:kelp" | "clay_pool_with_dripleaves" | "minecraft:clay_pool_with_dripleaves" | "ore_iron_small" | "minecraft:ore_iron_small" | "ore_gravel" | "minecraft:ore_gravel" | "patch_grass_jungle" | "minecraft:patch_grass_jungle" | "mushroom_island_vegetation" | "minecraft:mushroom_island_vegetation" | "ore_diamond_buried" | "minecraft:ore_diamond_buried" | "ore_emerald" | "minecraft:ore_emerald" | "trees_sparse_jungle" | "minecraft:trees_sparse_jungle" | "rooted_azalea_tree" | "minecraft:rooted_azalea_tree" | "pine" | "minecraft:pine" | "bonus_chest" | "minecraft:bonus_chest" | "warped_fungus" | "minecraft:warped_fungus" | "oak_bees_0002" | "minecraft:oak_bees_0002" | "moss_vegetation" | "minecraft:moss_vegetation" | "glow_lichen" | "minecraft:glow_lichen" | "pile_snow" | "minecraft:pile_snow" | "ore_gravel_nether" | "minecraft:ore_gravel_nether" | "patch_dead_bush" | "minecraft:patch_dead_bush" | "mega_pine" | "minecraft:mega_pine" | "patch_melon" | "minecraft:patch_melon" | "ore_coal_buried" | "minecraft:ore_coal_buried" | "ore_coal" | "minecraft:ore_coal" | "patch_brown_mushroom" | "minecraft:patch_brown_mushroom" | "crimson_forest_vegetation_bonemeal" | "minecraft:crimson_forest_vegetation_bonemeal" | "ore_redstone" | "minecraft:ore_redstone" | "pile_melon" | "minecraft:pile_melon" | "vines" | "minecraft:vines" | "patch_berry_bush" | "minecraft:patch_berry_bush" | "ae2:quartz_ore";
    type PlacedFeature = "disk_sand" | "minecraft:disk_sand" | "spruce_checked" | "minecraft:spruce_checked" | "patch_large_fern" | "minecraft:patch_large_fern" | "trees_old_growth_pine_taiga" | "minecraft:trees_old_growth_pine_taiga" | "spring_open" | "minecraft:spring_open" | "flower_meadow" | "minecraft:flower_meadow" | "patch_grass_taiga" | "minecraft:patch_grass_taiga" | "blue_ice" | "minecraft:blue_ice" | "sea_pickle" | "minecraft:sea_pickle" | "blackstone_blobs" | "minecraft:blackstone_blobs" | "ore_granite_lower" | "minecraft:ore_granite_lower" | "patch_crimson_roots" | "minecraft:patch_crimson_roots" | "ore_copper" | "minecraft:ore_copper" | "patch_tall_grass" | "minecraft:patch_tall_grass" | "trees_jungle" | "minecraft:trees_jungle" | "amethyst_geode" | "minecraft:amethyst_geode" | "ore_copper_large" | "minecraft:ore_copper_large" | "monster_room_deep" | "minecraft:monster_room_deep" | "lush_caves_ceiling_vegetation" | "minecraft:lush_caves_ceiling_vegetation" | "ore_soul_sand" | "minecraft:ore_soul_sand" | "fancy_oak_bees_0002" | "minecraft:fancy_oak_bees_0002" | "flower_default" | "minecraft:flower_default" | "trees_meadow" | "minecraft:trees_meadow" | "patch_berry_rare" | "minecraft:patch_berry_rare" | "patch_cactus" | "minecraft:patch_cactus" | "birch_checked" | "minecraft:birch_checked" | "trees_savanna" | "minecraft:trees_savanna" | "patch_sunflower" | "minecraft:patch_sunflower" | "trees_flower_forest" | "minecraft:trees_flower_forest" | "red_mushroom_taiga" | "minecraft:red_mushroom_taiga" | "bamboo_vegetation" | "minecraft:bamboo_vegetation" | "end_island_decorated" | "minecraft:end_island_decorated" | "ice_patch" | "minecraft:ice_patch" | "red_mushroom_normal" | "minecraft:red_mushroom_normal" | "basalt_blobs" | "minecraft:basalt_blobs" | "patch_cactus_desert" | "minecraft:patch_cactus_desert" | "red_mushroom_nether" | "minecraft:red_mushroom_nether" | "ore_coal_lower" | "minecraft:ore_coal_lower" | "crimson_forest_vegetation" | "minecraft:crimson_forest_vegetation" | "crimson_fungi" | "minecraft:crimson_fungi" | "forest_rock" | "minecraft:forest_rock" | "ore_gold_nether" | "minecraft:ore_gold_nether" | "pointed_dripstone" | "minecraft:pointed_dripstone" | "patch_grass_savanna" | "minecraft:patch_grass_savanna" | "disk_clay" | "minecraft:disk_clay" | "ore_quartz_deltas" | "minecraft:ore_quartz_deltas" | "jungle_bush" | "minecraft:jungle_bush" | "underwater_magma" | "minecraft:underwater_magma" | "birch_bees_002" | "minecraft:birch_bees_002" | "patch_grass_badlands" | "minecraft:patch_grass_badlands" | "large_dripstone" | "minecraft:large_dripstone" | "flower_flower_forest" | "minecraft:flower_flower_forest" | "lush_caves_clay" | "minecraft:lush_caves_clay" | "void_start_platform" | "minecraft:void_start_platform" | "classic_vines_cave_feature" | "minecraft:classic_vines_cave_feature" | "trees_badlands" | "minecraft:trees_badlands" | "kelp_cold" | "minecraft:kelp_cold" | "spring_water" | "minecraft:spring_water" | "ore_debris_small" | "minecraft:ore_debris_small" | "ore_blackstone" | "minecraft:ore_blackstone" | "birch_tall" | "minecraft:birch_tall" | "brown_mushroom_swamp" | "minecraft:brown_mushroom_swamp" | "fossil_lower" | "minecraft:fossil_lower" | "oak_checked" | "minecraft:oak_checked" | "patch_pumpkin" | "minecraft:patch_pumpkin" | "forest_flowers" | "minecraft:forest_flowers" | "seagrass_swamp" | "minecraft:seagrass_swamp" | "ore_diamond" | "minecraft:ore_diamond" | "spruce_on_snow" | "minecraft:spruce_on_snow" | "trees_snowy" | "minecraft:trees_snowy" | "spring_lava_frozen" | "minecraft:spring_lava_frozen" | "disk_gravel" | "minecraft:disk_gravel" | "patch_dead_bush_2" | "minecraft:patch_dead_bush_2" | "nether_sprouts" | "minecraft:nether_sprouts" | "birch_bees_0002" | "minecraft:birch_bees_0002" | "oak" | "minecraft:oak" | "dark_oak_checked" | "minecraft:dark_oak_checked" | "glowstone" | "minecraft:glowstone" | "super_birch_bees" | "minecraft:super_birch_bees" | "seagrass_simple" | "minecraft:seagrass_simple" | "create:striated_ores_overworld" | "trees_taiga" | "minecraft:trees_taiga" | "ore_clay" | "minecraft:ore_clay" | "ore_gold" | "minecraft:ore_gold" | "seagrass_warm" | "minecraft:seagrass_warm" | "ice_spike" | "minecraft:ice_spike" | "patch_sugar_cane_badlands" | "minecraft:patch_sugar_cane_badlands" | "acacia" | "minecraft:acacia" | "ore_diamond_large" | "minecraft:ore_diamond_large" | "dripstone_cluster" | "minecraft:dripstone_cluster" | "trees_grove" | "minecraft:trees_grove" | "pile_ice" | "minecraft:pile_ice" | "ore_infested" | "minecraft:ore_infested" | "super_birch_bees_0002" | "minecraft:super_birch_bees_0002" | "patch_cactus_decorated" | "minecraft:patch_cactus_decorated" | "flower_plain" | "minecraft:flower_plain" | "ore_gold_deltas" | "minecraft:ore_gold_deltas" | "patch_melon_sparse" | "minecraft:patch_melon_sparse" | "spring_closed_double" | "minecraft:spring_closed_double" | "ore_iron_small" | "minecraft:ore_iron_small" | "ore_gravel" | "minecraft:ore_gravel" | "cave_vines" | "minecraft:cave_vines" | "brown_mushroom_taiga" | "minecraft:brown_mushroom_taiga" | "bamboo_light" | "minecraft:bamboo_light" | "brown_mushroom_normal" | "minecraft:brown_mushroom_normal" | "patch_grass_jungle" | "minecraft:patch_grass_jungle" | "ore_diamond_buried" | "minecraft:ore_diamond_buried" | "spring_lava" | "minecraft:spring_lava" | "trees_birch" | "minecraft:trees_birch" | "pile_snow" | "minecraft:pile_snow" | "ore_gravel_nether" | "minecraft:ore_gravel_nether" | "patch_sugar_cane_desert" | "minecraft:patch_sugar_cane_desert" | "patch_melon" | "minecraft:patch_melon" | "pine_checked" | "minecraft:pine_checked" | "flower_plains" | "minecraft:flower_plains" | "mega_jungle_tree_checked" | "minecraft:mega_jungle_tree_checked" | "vines" | "minecraft:vines" | "seagrass_deep" | "minecraft:seagrass_deep" | "fancy_oak_bees_002" | "minecraft:fancy_oak_bees_002" | "patch_berry_common" | "minecraft:patch_berry_common" | "ore_lapis" | "minecraft:ore_lapis" | "seagrass_cold" | "minecraft:seagrass_cold" | "iceberg_blue" | "minecraft:iceberg_blue" | "ore_magma" | "minecraft:ore_magma" | "trees_water" | "minecraft:trees_water" | "freeze_top_layer" | "minecraft:freeze_top_layer" | "red_mushroom_old_growth" | "minecraft:red_mushroom_old_growth" | "ore_iron_middle" | "minecraft:ore_iron_middle" | "fancy_oak_checked" | "minecraft:fancy_oak_checked" | "spore_blossom" | "minecraft:spore_blossom" | "grass_bonemeal" | "minecraft:grass_bonemeal" | "ore_gold_extra" | "minecraft:ore_gold_extra" | "end_spike" | "minecraft:end_spike" | "ore_lapis_buried" | "minecraft:ore_lapis_buried" | "trees_swamp" | "minecraft:trees_swamp" | "ore_granite_upper" | "minecraft:ore_granite_upper" | "oak_bees_002" | "minecraft:oak_bees_002" | "glowstone_extra" | "minecraft:glowstone_extra" | "seagrass_river" | "minecraft:seagrass_river" | "flower_warm" | "minecraft:flower_warm" | "lush_caves_vegetation" | "minecraft:lush_caves_vegetation" | "pile_hay" | "minecraft:pile_hay" | "basalt_pillar" | "minecraft:basalt_pillar" | "monster_room" | "minecraft:monster_room" | "jungle_tree" | "minecraft:jungle_tree" | "trees_windswept_hills" | "minecraft:trees_windswept_hills" | "patch_grass_forest" | "minecraft:patch_grass_forest" | "patch_soul_fire" | "minecraft:patch_soul_fire" | "botania:mystical_mushrooms" | "spruce" | "minecraft:spruce" | "seagrass_deep_cold" | "minecraft:seagrass_deep_cold" | "ore_andesite_upper" | "minecraft:ore_andesite_upper" | "fossil_upper" | "minecraft:fossil_upper" | "lake_lava_surface" | "minecraft:lake_lava_surface" | "ore_iron_upper" | "minecraft:ore_iron_upper" | "weeping_vines" | "minecraft:weeping_vines" | "trees_windswept_forest" | "minecraft:trees_windswept_forest" | "ore_tuff" | "minecraft:ore_tuff" | "patch_dead_bush_badlands" | "minecraft:patch_dead_bush_badlands" | "ore_coal_upper" | "minecraft:ore_coal_upper" | "mega_pine_checked" | "minecraft:mega_pine_checked" | "end_gateway_return" | "minecraft:end_gateway_return" | "small_basalt_columns" | "minecraft:small_basalt_columns" | "trees_birch_and_oak" | "minecraft:trees_birch_and_oak" | "botania:mystical_flowers" | "trees_old_growth_spruce_taiga" | "minecraft:trees_old_growth_spruce_taiga" | "chorus_plant" | "minecraft:chorus_plant" | "ore_dirt" | "minecraft:ore_dirt" | "desert_well" | "minecraft:desert_well" | "ore_diorite_upper" | "minecraft:ore_diorite_upper" | "patch_grass_plain" | "minecraft:patch_grass_plain" | "warped_fungi" | "minecraft:warped_fungi" | "patch_fire" | "minecraft:patch_fire" | "patch_tall_grass_2" | "minecraft:patch_tall_grass_2" | "acacia_checked" | "minecraft:acacia_checked" | "fancy_oak_bees" | "minecraft:fancy_oak_bees" | "create:striated_ores_nether" | "warm_ocean_vegetation" | "minecraft:warm_ocean_vegetation" | "flower_forest_flowers" | "minecraft:flower_forest_flowers" | "trees_windswept_savanna" | "minecraft:trees_windswept_savanna" | "delta" | "minecraft:delta" | "create:zinc_ore" | "ore_ancient_debris_large" | "minecraft:ore_ancient_debris_large" | "ore_diorite_lower" | "minecraft:ore_diorite_lower" | "flower_swamp" | "minecraft:flower_swamp" | "trees_plains" | "minecraft:trees_plains" | "patch_taiga_grass" | "minecraft:patch_taiga_grass" | "spring_closed" | "minecraft:spring_closed" | "ore_andesite_lower" | "minecraft:ore_andesite_lower" | "large_basalt_columns" | "minecraft:large_basalt_columns" | "mega_spruce_checked" | "minecraft:mega_spruce_checked" | "warped_forest_vegetation" | "minecraft:warped_forest_vegetation" | "patch_grass_normal" | "minecraft:patch_grass_normal" | "ore_quartz_nether" | "minecraft:ore_quartz_nether" | "pile_pumpkin" | "minecraft:pile_pumpkin" | "brown_mushroom_nether" | "minecraft:brown_mushroom_nether" | "twisting_vines" | "minecraft:twisting_vines" | "patch_waterlily" | "minecraft:patch_waterlily" | "dark_forest_vegetation" | "minecraft:dark_forest_vegetation" | "kelp_warm" | "minecraft:kelp_warm" | "patch_sugar_cane" | "minecraft:patch_sugar_cane" | "iceberg_packed" | "minecraft:iceberg_packed" | "patch_grass_taiga_2" | "minecraft:patch_grass_taiga_2" | "brown_mushroom_old_growth" | "minecraft:brown_mushroom_old_growth" | "seagrass_normal" | "minecraft:seagrass_normal" | "spring_delta" | "minecraft:spring_delta" | "ore_gold_lower" | "minecraft:ore_gold_lower" | "mushroom_island_vegetation" | "minecraft:mushroom_island_vegetation" | "ore_emerald" | "minecraft:ore_emerald" | "patch_sugar_cane_swamp" | "minecraft:patch_sugar_cane_swamp" | "trees_sparse_jungle" | "minecraft:trees_sparse_jungle" | "seagrass_deep_warm" | "minecraft:seagrass_deep_warm" | "rooted_azalea_tree" | "minecraft:rooted_azalea_tree" | "pine" | "minecraft:pine" | "oak_bees_0002" | "minecraft:oak_bees_0002" | "pine_on_snow" | "minecraft:pine_on_snow" | "glow_lichen" | "minecraft:glow_lichen" | "patch_dead_bush" | "minecraft:patch_dead_bush" | "bamboo" | "minecraft:bamboo" | "ore_redstone_lower" | "minecraft:ore_redstone_lower" | "red_mushroom_swamp" | "minecraft:red_mushroom_swamp" | "ore_redstone" | "minecraft:ore_redstone" | "pile_melon" | "minecraft:pile_melon" | "patch_berry_bush" | "minecraft:patch_berry_bush" | "ae2:quartz_ore" | "lake_lava_underground" | "minecraft:lake_lava_underground";
    type ConfiguredStructureFeature = "desert_pyramid" | "minecraft:desert_pyramid" | "village_taiga" | "minecraft:village_taiga" | "ruined_portal_swamp" | "minecraft:ruined_portal_swamp" | "ae2:meteorite" | "nether_fossil" | "minecraft:nether_fossil" | "bastion_remnant" | "minecraft:bastion_remnant" | "pillager_outpost" | "minecraft:pillager_outpost" | "shipwreck" | "minecraft:shipwreck" | "mineshaft_mesa" | "minecraft:mineshaft_mesa" | "jungle_pyramid" | "minecraft:jungle_pyramid" | "ruined_portal_jungle" | "minecraft:ruined_portal_jungle" | "swamp_hut" | "minecraft:swamp_hut" | "ocean_ruin_warm" | "minecraft:ocean_ruin_warm" | "village_plains" | "minecraft:village_plains" | "ruined_portal" | "minecraft:ruined_portal" | "buried_treasure" | "minecraft:buried_treasure" | "mansion" | "minecraft:mansion" | "ruined_portal_desert" | "minecraft:ruined_portal_desert" | "end_city" | "minecraft:end_city" | "mineshaft" | "minecraft:mineshaft" | "monument" | "minecraft:monument" | "igloo" | "minecraft:igloo" | "ruined_portal_ocean" | "minecraft:ruined_portal_ocean" | "ruined_portal_mountain" | "minecraft:ruined_portal_mountain" | "fortress" | "minecraft:fortress" | "village_savanna" | "minecraft:village_savanna" | "ruined_portal_nether" | "minecraft:ruined_portal_nether" | "shipwreck_beached" | "minecraft:shipwreck_beached" | "stronghold" | "minecraft:stronghold" | "village_desert" | "minecraft:village_desert" | "ocean_ruin_cold" | "minecraft:ocean_ruin_cold" | "village_snowy" | "minecraft:village_snowy";
    type StructureSet = "igloos" | "minecraft:igloos" | "desert_pyramids" | "minecraft:desert_pyramids" | "end_cities" | "minecraft:end_cities" | "ae2:meteorite" | "ocean_ruins" | "minecraft:ocean_ruins" | "shipwrecks" | "minecraft:shipwrecks" | "woodland_mansions" | "minecraft:woodland_mansions" | "buried_treasures" | "minecraft:buried_treasures" | "villages" | "minecraft:villages" | "nether_complexes" | "minecraft:nether_complexes" | "ocean_monuments" | "minecraft:ocean_monuments" | "jungle_temples" | "minecraft:jungle_temples" | "nether_fossils" | "minecraft:nether_fossils" | "swamp_huts" | "minecraft:swamp_huts" | "pillager_outposts" | "minecraft:pillager_outposts" | "mineshafts" | "minecraft:mineshafts" | "strongholds" | "minecraft:strongholds" | "ruined_portals" | "minecraft:ruined_portals";
    type StructureProcessorList = "zombie_snowy" | "minecraft:zombie_snowy" | "roof" | "minecraft:roof" | "bottom_rampart" | "minecraft:bottom_rampart" | "entrance_replacement" | "minecraft:entrance_replacement" | "treasure_rooms" | "minecraft:treasure_rooms" | "farm_desert" | "minecraft:farm_desert" | "zombie_plains" | "minecraft:zombie_plains" | "outpost_rot" | "minecraft:outpost_rot" | "fossil_rot" | "minecraft:fossil_rot" | "zombie_desert" | "minecraft:zombie_desert" | "farm_plains" | "minecraft:farm_plains" | "fossil_coal" | "minecraft:fossil_coal" | "rampart_degradation" | "minecraft:rampart_degradation" | "empty" | "minecraft:empty" | "mossify_70_percent" | "minecraft:mossify_70_percent" | "high_rampart" | "minecraft:high_rampart" | "bastion_generic_degradation" | "minecraft:bastion_generic_degradation" | "mossify_10_percent" | "minecraft:mossify_10_percent" | "street_snowy_or_taiga" | "minecraft:street_snowy_or_taiga" | "farm_taiga" | "minecraft:farm_taiga" | "stable_degradation" | "minecraft:stable_degradation" | "zombie_taiga" | "minecraft:zombie_taiga" | "street_plains" | "minecraft:street_plains" | "street_savanna" | "minecraft:street_savanna" | "mossify_20_percent" | "minecraft:mossify_20_percent" | "zombie_savanna" | "minecraft:zombie_savanna" | "farm_snowy" | "minecraft:farm_snowy" | "farm_savanna" | "minecraft:farm_savanna" | "fossil_diamonds" | "minecraft:fossil_diamonds" | "housing" | "minecraft:housing" | "side_wall_degradation" | "minecraft:side_wall_degradation" | "bridge" | "minecraft:bridge" | "high_wall" | "minecraft:high_wall";
    type StructureTemplatePool = "village/desert/streets" | "minecraft:village/desert/streets" | "bastion/hoglin_stable/connectors" | "minecraft:bastion/hoglin_stable/connectors" | "bastion/treasure/brains" | "minecraft:bastion/treasure/brains" | "bastion/blocks/gold" | "minecraft:bastion/blocks/gold" | "village/savanna/houses" | "minecraft:village/savanna/houses" | "village/common/sheep" | "minecraft:village/common/sheep" | "village/snowy/terminators" | "minecraft:village/snowy/terminators" | "bastion/units/rampart_plates" | "minecraft:bastion/units/rampart_plates" | "bastion/treasure/roofs" | "minecraft:bastion/treasure/roofs" | "village/taiga/town_centers" | "minecraft:village/taiga/town_centers" | "bastion/treasure/corners/top" | "minecraft:bastion/treasure/corners/top" | "village/common/well_bottoms" | "minecraft:village/common/well_bottoms" | "village/snowy/zombie/villagers" | "minecraft:village/snowy/zombie/villagers" | "village/desert/zombie/decor" | "minecraft:village/desert/zombie/decor" | "village/savanna/zombie/villagers" | "minecraft:village/savanna/zombie/villagers" | "bastion/mobs/hoglin" | "minecraft:bastion/mobs/hoglin" | "village/snowy/streets" | "minecraft:village/snowy/streets" | "village/savanna/town_centers" | "minecraft:village/savanna/town_centers" | "village/taiga/streets" | "minecraft:village/taiga/streets" | "bastion/bridge/legs" | "minecraft:bastion/bridge/legs" | "village/taiga/terminators" | "minecraft:village/taiga/terminators" | "bastion/hoglin_stable/small_stables/outer" | "minecraft:bastion/hoglin_stable/small_stables/outer" | "bastion/treasure/extensions/houses" | "minecraft:bastion/treasure/extensions/houses" | "bastion/units/stages/stage_1" | "minecraft:bastion/units/stages/stage_1" | "bastion/units/stages/stage_2" | "minecraft:bastion/units/stages/stage_2" | "bastion/units/stages/stage_3" | "minecraft:bastion/units/stages/stage_3" | "bastion/hoglin_stable/stairs" | "minecraft:bastion/hoglin_stable/stairs" | "village/snowy/town_centers" | "minecraft:village/snowy/town_centers" | "bastion/hoglin_stable/wall_bases" | "minecraft:bastion/hoglin_stable/wall_bases" | "village/taiga/zombie/decor" | "minecraft:village/taiga/zombie/decor" | "bastion/treasure/extensions/small_pool" | "minecraft:bastion/treasure/extensions/small_pool" | "bastion/treasure/walls/bottom" | "minecraft:bastion/treasure/walls/bottom" | "village/desert/zombie/houses" | "minecraft:village/desert/zombie/houses" | "village/common/cats" | "minecraft:village/common/cats" | "bastion/units/stages/stage_0" | "minecraft:bastion/units/stages/stage_0" | "pillager_outpost/feature_plates" | "minecraft:pillager_outpost/feature_plates" | "village/desert/zombie/terminators" | "minecraft:village/desert/zombie/terminators" | "bastion/hoglin_stable/posts" | "minecraft:bastion/hoglin_stable/posts" | "pillager_outpost/towers" | "minecraft:pillager_outpost/towers" | "bastion/treasure/walls/mid" | "minecraft:bastion/treasure/walls/mid" | "village/common/butcher_animals" | "minecraft:village/common/butcher_animals" | "bastion/hoglin_stable/starting_pieces" | "minecraft:bastion/hoglin_stable/starting_pieces" | "village/savanna/decor" | "minecraft:village/savanna/decor" | "bastion/units/pathways" | "minecraft:bastion/units/pathways" | "village/plains/trees" | "minecraft:village/plains/trees" | "village/taiga/decor" | "minecraft:village/taiga/decor" | "bastion/treasure/ramparts" | "minecraft:bastion/treasure/ramparts" | "village/plains/streets" | "minecraft:village/plains/streets" | "empty" | "minecraft:empty" | "bastion/treasure/bases/centers" | "minecraft:bastion/treasure/bases/centers" | "village/desert/decor" | "minecraft:village/desert/decor" | "bastion/bridge/starting_pieces" | "minecraft:bastion/bridge/starting_pieces" | "bastion/treasure/corners/middle" | "minecraft:bastion/treasure/corners/middle" | "village/common/iron_golem" | "minecraft:village/common/iron_golem" | "pillager_outpost/features" | "minecraft:pillager_outpost/features" | "village/taiga/zombie/villagers" | "minecraft:village/taiga/zombie/villagers" | "bastion/hoglin_stable/large_stables/outer" | "minecraft:bastion/hoglin_stable/large_stables/outer" | "bastion/units/wall_units" | "minecraft:bastion/units/wall_units" | "bastion/treasure/corners/edges" | "minecraft:bastion/treasure/corners/edges" | "bastion/bridge/ramparts" | "minecraft:bastion/bridge/ramparts" | "village/desert/zombie/streets" | "minecraft:village/desert/zombie/streets" | "village/savanna/villagers" | "minecraft:village/savanna/villagers" | "bastion/treasure/stairs" | "minecraft:bastion/treasure/stairs" | "village/plains/decor" | "minecraft:village/plains/decor" | "village/snowy/trees" | "minecraft:village/snowy/trees" | "village/savanna/zombie/decor" | "minecraft:village/savanna/zombie/decor" | "bastion/bridge/connectors" | "minecraft:bastion/bridge/connectors" | "village/snowy/zombie/streets" | "minecraft:village/snowy/zombie/streets" | "bastion/units/edge_wall_units" | "minecraft:bastion/units/edge_wall_units" | "bastion/units/walls/wall_bases" | "minecraft:bastion/units/walls/wall_bases" | "village/desert/villagers" | "minecraft:village/desert/villagers" | "village/savanna/trees" | "minecraft:village/savanna/trees" | "bastion/treasure/bases" | "minecraft:bastion/treasure/bases" | "village/plains/zombie/decor" | "minecraft:village/plains/zombie/decor" | "bastion/mobs/piglin_melee" | "minecraft:bastion/mobs/piglin_melee" | "village/savanna/terminators" | "minecraft:village/savanna/terminators" | "bastion/hoglin_stable/walls" | "minecraft:bastion/hoglin_stable/walls" | "village/snowy/decor" | "minecraft:village/snowy/decor" | "village/snowy/villagers" | "minecraft:village/snowy/villagers" | "village/plains/terminators" | "minecraft:village/plains/terminators" | "bastion/units/edges" | "minecraft:bastion/units/edges" | "village/desert/terminators" | "minecraft:village/desert/terminators" | "pillager_outpost/base_plates" | "minecraft:pillager_outpost/base_plates" | "bastion/hoglin_stable/rampart_plates" | "minecraft:bastion/hoglin_stable/rampart_plates" | "village/plains/houses" | "minecraft:village/plains/houses" | "village/taiga/villagers" | "minecraft:village/taiga/villagers" | "bastion/units/fillers/stage_0" | "minecraft:bastion/units/fillers/stage_0" | "village/plains/town_centers" | "minecraft:village/plains/town_centers" | "bastion/treasure/walls/top" | "minecraft:bastion/treasure/walls/top" | "village/taiga/zombie/houses" | "minecraft:village/taiga/zombie/houses" | "bastion/treasure/entrances" | "minecraft:bastion/treasure/entrances" | "village/plains/zombie/streets" | "minecraft:village/plains/zombie/streets" | "bastion/hoglin_stable/small_stables/inner" | "minecraft:bastion/hoglin_stable/small_stables/inner" | "village/snowy/zombie/decor" | "minecraft:village/snowy/zombie/decor" | "bastion/treasure/corners/bottom" | "minecraft:bastion/treasure/corners/bottom" | "bastion/units/large_ramparts" | "minecraft:bastion/units/large_ramparts" | "village/plains/villagers" | "minecraft:village/plains/villagers" | "bastion/units/stages/rot/stage_1" | "minecraft:bastion/units/stages/rot/stage_1" | "bastion/units/ramparts" | "minecraft:bastion/units/ramparts" | "bastion/bridge/rampart_plates" | "minecraft:bastion/bridge/rampart_plates" | "bastion/treasure/connectors" | "minecraft:bastion/treasure/connectors" | "village/savanna/streets" | "minecraft:village/savanna/streets" | "bastion/units/center_pieces" | "minecraft:bastion/units/center_pieces" | "bastion/bridge/bridge_pieces" | "minecraft:bastion/bridge/bridge_pieces" | "village/plains/zombie/houses" | "minecraft:village/plains/zombie/houses" | "village/taiga/houses" | "minecraft:village/taiga/houses" | "bastion/hoglin_stable/mirrored_starting_pieces" | "minecraft:bastion/hoglin_stable/mirrored_starting_pieces" | "bastion/mobs/piglin" | "minecraft:bastion/mobs/piglin" | "village/desert/zombie/villagers" | "minecraft:village/desert/zombie/villagers" | "bastion/treasure/walls/outer" | "minecraft:bastion/treasure/walls/outer" | "village/plains/zombie/villagers" | "minecraft:village/plains/zombie/villagers" | "bastion/treasure/extensions/large_pool" | "minecraft:bastion/treasure/extensions/large_pool" | "village/desert/houses" | "minecraft:village/desert/houses" | "bastion/starts" | "minecraft:bastion/starts" | "village/common/animals" | "minecraft:village/common/animals" | "bastion/hoglin_stable/large_stables/inner" | "minecraft:bastion/hoglin_stable/large_stables/inner" | "bastion/bridge/walls" | "minecraft:bastion/bridge/walls" | "village/taiga/zombie/streets" | "minecraft:village/taiga/zombie/streets" | "village/savanna/zombie/streets" | "minecraft:village/savanna/zombie/streets" | "bastion/treasure/walls" | "minecraft:bastion/treasure/walls" | "village/snowy/houses" | "minecraft:village/snowy/houses" | "village/savanna/zombie/terminators" | "minecraft:village/savanna/zombie/terminators" | "village/desert/town_centers" | "minecraft:village/desert/town_centers" | "bastion/hoglin_stable/ramparts" | "minecraft:bastion/hoglin_stable/ramparts" | "village/snowy/zombie/houses" | "minecraft:village/snowy/zombie/houses" | "village/savanna/zombie/houses" | "minecraft:village/savanna/zombie/houses";
    type Biome = "ae2:spatial_storage" | "badlands" | "minecraft:badlands" | "bamboo_jungle" | "minecraft:bamboo_jungle" | "basalt_deltas" | "minecraft:basalt_deltas" | "beach" | "minecraft:beach" | "birch_forest" | "minecraft:birch_forest" | "cold_ocean" | "minecraft:cold_ocean" | "crimson_forest" | "minecraft:crimson_forest" | "dark_forest" | "minecraft:dark_forest" | "deep_cold_ocean" | "minecraft:deep_cold_ocean" | "deep_frozen_ocean" | "minecraft:deep_frozen_ocean" | "deep_lukewarm_ocean" | "minecraft:deep_lukewarm_ocean" | "deep_ocean" | "minecraft:deep_ocean" | "desert" | "minecraft:desert" | "dripstone_caves" | "minecraft:dripstone_caves" | "end_barrens" | "minecraft:end_barrens" | "end_highlands" | "minecraft:end_highlands" | "end_midlands" | "minecraft:end_midlands" | "eroded_badlands" | "minecraft:eroded_badlands" | "flower_forest" | "minecraft:flower_forest" | "forest" | "minecraft:forest" | "frozen_ocean" | "minecraft:frozen_ocean" | "frozen_peaks" | "minecraft:frozen_peaks" | "frozen_river" | "minecraft:frozen_river" | "grove" | "minecraft:grove" | "ice_spikes" | "minecraft:ice_spikes" | "jagged_peaks" | "minecraft:jagged_peaks" | "jungle" | "minecraft:jungle" | "lukewarm_ocean" | "minecraft:lukewarm_ocean" | "lush_caves" | "minecraft:lush_caves" | "meadow" | "minecraft:meadow" | "mushroom_fields" | "minecraft:mushroom_fields" | "nether_wastes" | "minecraft:nether_wastes" | "ocean" | "minecraft:ocean" | "old_growth_birch_forest" | "minecraft:old_growth_birch_forest" | "old_growth_pine_taiga" | "minecraft:old_growth_pine_taiga" | "old_growth_spruce_taiga" | "minecraft:old_growth_spruce_taiga" | "plains" | "minecraft:plains" | "river" | "minecraft:river" | "savanna" | "minecraft:savanna" | "savanna_plateau" | "minecraft:savanna_plateau" | "small_end_islands" | "minecraft:small_end_islands" | "snowy_beach" | "minecraft:snowy_beach" | "snowy_plains" | "minecraft:snowy_plains" | "snowy_slopes" | "minecraft:snowy_slopes" | "snowy_taiga" | "minecraft:snowy_taiga" | "soul_sand_valley" | "minecraft:soul_sand_valley" | "sparse_jungle" | "minecraft:sparse_jungle" | "stony_peaks" | "minecraft:stony_peaks" | "stony_shore" | "minecraft:stony_shore" | "sunflower_plains" | "minecraft:sunflower_plains" | "swamp" | "minecraft:swamp" | "taiga" | "minecraft:taiga" | "the_end" | "minecraft:the_end" | "the_void" | "minecraft:the_void" | "warm_ocean" | "minecraft:warm_ocean" | "warped_forest" | "minecraft:warped_forest" | "windswept_forest" | "minecraft:windswept_forest" | "windswept_gravelly_hills" | "minecraft:windswept_gravelly_hills" | "windswept_hills" | "minecraft:windswept_hills" | "windswept_savanna" | "minecraft:windswept_savanna" | "wooded_badlands" | "minecraft:wooded_badlands";
    type NormalNoise$NoiseParameters = "packed_ice" | "minecraft:packed_ice" | "soul_sand_layer" | "minecraft:soul_sand_layer" | "ore_gap" | "minecraft:ore_gap" | "temperature_large" | "minecraft:temperature_large" | "erosion" | "minecraft:erosion" | "offset" | "minecraft:offset" | "cave_layer" | "minecraft:cave_layer" | "patch" | "minecraft:patch" | "jagged" | "minecraft:jagged" | "noodle" | "minecraft:noodle" | "continentalness" | "minecraft:continentalness" | "calcite" | "minecraft:calcite" | "temperature" | "minecraft:temperature" | "vegetation" | "minecraft:vegetation" | "nether_state_selector" | "minecraft:nether_state_selector" | "surface_secondary" | "minecraft:surface_secondary" | "erosion_large" | "minecraft:erosion_large" | "spaghetti_2d" | "minecraft:spaghetti_2d" | "ice" | "minecraft:ice" | "noodle_thickness" | "minecraft:noodle_thickness" | "spaghetti_3d_thickness" | "minecraft:spaghetti_3d_thickness" | "badlands_pillar_roof" | "minecraft:badlands_pillar_roof" | "spaghetti_2d_modulator" | "minecraft:spaghetti_2d_modulator" | "badlands_surface" | "minecraft:badlands_surface" | "iceberg_pillar" | "minecraft:iceberg_pillar" | "surface_swamp" | "minecraft:surface_swamp" | "gravel_layer" | "minecraft:gravel_layer" | "ore_veininess" | "minecraft:ore_veininess" | "spaghetti_2d_thickness" | "minecraft:spaghetti_2d_thickness" | "aquifer_fluid_level_floodedness" | "minecraft:aquifer_fluid_level_floodedness" | "pillar_thickness" | "minecraft:pillar_thickness" | "spaghetti_2d_elevation" | "minecraft:spaghetti_2d_elevation" | "clay_bands_offset" | "minecraft:clay_bands_offset" | "badlands_pillar" | "minecraft:badlands_pillar" | "spaghetti_3d_1" | "minecraft:spaghetti_3d_1" | "spaghetti_3d_2" | "minecraft:spaghetti_3d_2" | "spaghetti_3d_rarity" | "minecraft:spaghetti_3d_rarity" | "continentalness_large" | "minecraft:continentalness_large" | "ridge" | "minecraft:ridge" | "spaghetti_roughness_modulator" | "minecraft:spaghetti_roughness_modulator" | "nether_wart" | "minecraft:nether_wart" | "cave_entrance" | "minecraft:cave_entrance" | "ore_vein_b" | "minecraft:ore_vein_b" | "ore_vein_a" | "minecraft:ore_vein_a" | "aquifer_barrier" | "minecraft:aquifer_barrier" | "netherrack" | "minecraft:netherrack" | "vegetation_large" | "minecraft:vegetation_large" | "noodle_ridge_a" | "minecraft:noodle_ridge_a" | "noodle_ridge_b" | "minecraft:noodle_ridge_b" | "pillar_rareness" | "minecraft:pillar_rareness" | "iceberg_pillar_roof" | "minecraft:iceberg_pillar_roof" | "gravel" | "minecraft:gravel" | "pillar" | "minecraft:pillar" | "powder_snow" | "minecraft:powder_snow" | "aquifer_lava" | "minecraft:aquifer_lava" | "aquifer_fluid_level_spread" | "minecraft:aquifer_fluid_level_spread" | "surface" | "minecraft:surface" | "cave_cheese" | "minecraft:cave_cheese" | "iceberg_surface" | "minecraft:iceberg_surface" | "spaghetti_roughness" | "minecraft:spaghetti_roughness";
    type DensityFunction = "overworld_large_biomes/erosion" | "minecraft:overworld_large_biomes/erosion" | "shift_x" | "minecraft:shift_x" | "overworld/caves/spaghetti_2d" | "minecraft:overworld/caves/spaghetti_2d" | "overworld/caves/noodle" | "minecraft:overworld/caves/noodle" | "overworld_large_biomes/factor" | "minecraft:overworld_large_biomes/factor" | "overworld/depth" | "minecraft:overworld/depth" | "overworld/continents" | "minecraft:overworld/continents" | "zero" | "minecraft:zero" | "overworld/base_3d_noise" | "minecraft:overworld/base_3d_noise" | "overworld/caves/pillars" | "minecraft:overworld/caves/pillars" | "overworld_large_biomes/continents" | "minecraft:overworld_large_biomes/continents" | "overworld_large_biomes/sloped_cheese" | "minecraft:overworld_large_biomes/sloped_cheese" | "overworld/caves/spaghetti_2d_thickness_modulator" | "minecraft:overworld/caves/spaghetti_2d_thickness_modulator" | "overworld_large_biomes/depth" | "minecraft:overworld_large_biomes/depth" | "overworld/erosion" | "minecraft:overworld/erosion" | "overworld/sloped_cheese" | "minecraft:overworld/sloped_cheese" | "overworld/factor" | "minecraft:overworld/factor" | "overworld/ridges" | "minecraft:overworld/ridges" | "end/sloped_cheese" | "minecraft:end/sloped_cheese" | "overworld/caves/spaghetti_roughness_function" | "minecraft:overworld/caves/spaghetti_roughness_function" | "overworld/caves/entrances" | "minecraft:overworld/caves/entrances" | "y" | "minecraft:y" | "shift_z" | "minecraft:shift_z";
    type WorldCarver = "cave" | "minecraft:cave" | "nether_cave" | "minecraft:nether_cave" | "canyon" | "minecraft:canyon";
    type Feature = "no_op" | "minecraft:no_op" | "tree" | "minecraft:tree" | "flower" | "minecraft:flower" | "no_bonemeal_flower" | "minecraft:no_bonemeal_flower" | "random_patch" | "minecraft:random_patch" | "block_pile" | "minecraft:block_pile" | "spring_feature" | "minecraft:spring_feature" | "chorus_plant" | "minecraft:chorus_plant" | "replace_single_block" | "minecraft:replace_single_block" | "void_start_platform" | "minecraft:void_start_platform" | "desert_well" | "minecraft:desert_well" | "fossil" | "minecraft:fossil" | "huge_red_mushroom" | "minecraft:huge_red_mushroom" | "huge_brown_mushroom" | "minecraft:huge_brown_mushroom" | "ice_spike" | "minecraft:ice_spike" | "glowstone_blob" | "minecraft:glowstone_blob" | "freeze_top_layer" | "minecraft:freeze_top_layer" | "vines" | "minecraft:vines" | "block_column" | "minecraft:block_column" | "vegetation_patch" | "minecraft:vegetation_patch" | "waterlogged_vegetation_patch" | "minecraft:waterlogged_vegetation_patch" | "root_system" | "minecraft:root_system" | "glow_lichen" | "minecraft:glow_lichen" | "underwater_magma" | "minecraft:underwater_magma" | "monster_room" | "minecraft:monster_room" | "blue_ice" | "minecraft:blue_ice" | "iceberg" | "minecraft:iceberg" | "forest_rock" | "minecraft:forest_rock" | "disk" | "minecraft:disk" | "ice_patch" | "minecraft:ice_patch" | "lake" | "minecraft:lake" | "ore" | "minecraft:ore" | "end_spike" | "minecraft:end_spike" | "end_island" | "minecraft:end_island" | "end_gateway" | "minecraft:end_gateway" | "seagrass" | "minecraft:seagrass" | "kelp" | "minecraft:kelp" | "coral_tree" | "minecraft:coral_tree" | "coral_mushroom" | "minecraft:coral_mushroom" | "coral_claw" | "minecraft:coral_claw" | "sea_pickle" | "minecraft:sea_pickle" | "simple_block" | "minecraft:simple_block" | "bamboo" | "minecraft:bamboo" | "huge_fungus" | "minecraft:huge_fungus" | "nether_forest_vegetation" | "minecraft:nether_forest_vegetation" | "weeping_vines" | "minecraft:weeping_vines" | "twisting_vines" | "minecraft:twisting_vines" | "basalt_columns" | "minecraft:basalt_columns" | "delta_feature" | "minecraft:delta_feature" | "netherrack_replace_blobs" | "minecraft:netherrack_replace_blobs" | "fill_layer" | "minecraft:fill_layer" | "bonus_chest" | "minecraft:bonus_chest" | "basalt_pillar" | "minecraft:basalt_pillar" | "scattered_ore" | "minecraft:scattered_ore" | "random_selector" | "minecraft:random_selector" | "simple_random_selector" | "minecraft:simple_random_selector" | "random_boolean_selector" | "minecraft:random_boolean_selector" | "geode" | "minecraft:geode" | "dripstone_cluster" | "minecraft:dripstone_cluster" | "large_dripstone" | "minecraft:large_dripstone" | "pointed_dripstone" | "minecraft:pointed_dripstone" | "botania:mystical_flowers" | "botania:mystical_mushrooms" | "create:standard_ore" | "create:layered_ore";
    type StructureFeature = "pillager_outpost" | "minecraft:pillager_outpost" | "mineshaft" | "minecraft:mineshaft" | "mansion" | "minecraft:mansion" | "jungle_pyramid" | "minecraft:jungle_pyramid" | "desert_pyramid" | "minecraft:desert_pyramid" | "igloo" | "minecraft:igloo" | "ruined_portal" | "minecraft:ruined_portal" | "shipwreck" | "minecraft:shipwreck" | "swamp_hut" | "minecraft:swamp_hut" | "stronghold" | "minecraft:stronghold" | "monument" | "minecraft:monument" | "ocean_ruin" | "minecraft:ocean_ruin" | "fortress" | "minecraft:fortress" | "endcity" | "minecraft:endcity" | "buried_treasure" | "minecraft:buried_treasure" | "village" | "minecraft:village" | "nether_fossil" | "minecraft:nether_fossil" | "bastion_remnant" | "minecraft:bastion_remnant" | "ae2:meteorite";
    type StructurePlacementType = "concentric_rings" | "minecraft:concentric_rings" | "random_spread" | "minecraft:random_spread";
    type StructurePieceType = "nescsc" | "minecraft:nescsc" | "shli" | "minecraft:shli" | "btp" | "minecraft:btp" | "shph" | "minecraft:shph" | "msstairs" | "minecraft:msstairs" | "shpr" | "minecraft:shpr" | "ompenthouse" | "minecraft:ompenthouse" | "omdxr" | "minecraft:omdxr" | "omdxyr" | "minecraft:omdxyr" | "nemt" | "minecraft:nemt" | "shlt" | "minecraft:shlt" | "iglu" | "minecraft:iglu" | "wmp" | "minecraft:wmp" | "nerc" | "minecraft:nerc" | "nebcr" | "minecraft:nebcr" | "nefos" | "minecraft:nefos" | "omwr" | "minecraft:omwr" | "msroom" | "minecraft:msroom" | "omentry" | "minecraft:omentry" | "omsimple" | "minecraft:omsimple" | "orp" | "minecraft:orp" | "omdyzr" | "minecraft:omdyzr" | "tedp" | "minecraft:tedp" | "nesc" | "minecraft:nesc" | "shrc" | "minecraft:shrc" | "mscorridor" | "minecraft:mscorridor" | "nebs" | "minecraft:nebs" | "shfc" | "minecraft:shfc" | "omcr" | "minecraft:omcr" | "nece" | "minecraft:nece" | "nesclt" | "minecraft:nesclt" | "nesr" | "minecraft:nesr" | "shrt" | "minecraft:shrt" | "necsr" | "minecraft:necsr" | "nebef" | "minecraft:nebef" | "sh5c" | "minecraft:sh5c" | "omdzr" | "minecraft:omdzr" | "shipwreck" | "minecraft:shipwreck" | "shssd" | "minecraft:shssd" | "ecp" | "minecraft:ecp" | "mscrossing" | "minecraft:mscrossing" | "nestart" | "minecraft:nestart" | "shsd" | "minecraft:shsd" | "shstart" | "minecraft:shstart" | "neccs" | "minecraft:neccs" | "nectb" | "minecraft:nectb" | "shs" | "minecraft:shs" | "omb" | "minecraft:omb" | "tejp" | "minecraft:tejp" | "shcc" | "minecraft:shcc" | "ae2mtrt" | "minecraft:ae2mtrt" | "omdyr" | "minecraft:omdyr" | "rupo" | "minecraft:rupo" | "nescrt" | "minecraft:nescrt" | "omsimplet" | "minecraft:omsimplet" | "tesh" | "minecraft:tesh" | "jigsaw" | "minecraft:jigsaw";
    type PlacementModifierType = "block_predicate_filter" | "minecraft:block_predicate_filter" | "random_offset" | "minecraft:random_offset" | "noise_based_count" | "minecraft:noise_based_count" | "height_range" | "minecraft:height_range" | "rarity_filter" | "minecraft:rarity_filter" | "noise_threshold_count" | "minecraft:noise_threshold_count" | "environment_scan" | "minecraft:environment_scan" | "in_square" | "minecraft:in_square" | "surface_water_depth_filter" | "minecraft:surface_water_depth_filter" | "surface_relative_threshold_filter" | "minecraft:surface_relative_threshold_filter" | "count_on_every_layer" | "minecraft:count_on_every_layer" | "biome" | "minecraft:biome" | "count" | "minecraft:count" | "create:config_driven" | "carving_mask" | "minecraft:carving_mask" | "heightmap" | "minecraft:heightmap";
    type BlockStateProviderType = "simple_state_provider" | "minecraft:simple_state_provider" | "weighted_state_provider" | "minecraft:weighted_state_provider" | "noise_threshold_provider" | "minecraft:noise_threshold_provider" | "noise_provider" | "minecraft:noise_provider" | "dual_noise_provider" | "minecraft:dual_noise_provider" | "rotated_block_provider" | "minecraft:rotated_block_provider" | "randomized_int_state_provider" | "minecraft:randomized_int_state_provider";
    type FoliagePlacerType = "blob_foliage_placer" | "minecraft:blob_foliage_placer" | "spruce_foliage_placer" | "minecraft:spruce_foliage_placer" | "pine_foliage_placer" | "minecraft:pine_foliage_placer" | "acacia_foliage_placer" | "minecraft:acacia_foliage_placer" | "bush_foliage_placer" | "minecraft:bush_foliage_placer" | "fancy_foliage_placer" | "minecraft:fancy_foliage_placer" | "jungle_foliage_placer" | "minecraft:jungle_foliage_placer" | "mega_pine_foliage_placer" | "minecraft:mega_pine_foliage_placer" | "dark_oak_foliage_placer" | "minecraft:dark_oak_foliage_placer" | "random_spread_foliage_placer" | "minecraft:random_spread_foliage_placer";
    type TrunkPlacerType = "straight_trunk_placer" | "minecraft:straight_trunk_placer" | "giant_trunk_placer" | "minecraft:giant_trunk_placer" | "bending_trunk_placer" | "minecraft:bending_trunk_placer" | "fancy_trunk_placer" | "minecraft:fancy_trunk_placer" | "forking_trunk_placer" | "minecraft:forking_trunk_placer" | "dark_oak_trunk_placer" | "minecraft:dark_oak_trunk_placer" | "mega_jungle_trunk_placer" | "minecraft:mega_jungle_trunk_placer";
    type TreeDecoratorType = "trunk_vine" | "minecraft:trunk_vine" | "leave_vine" | "minecraft:leave_vine" | "cocoa" | "minecraft:cocoa" | "beehive" | "minecraft:beehive" | "alter_ground" | "minecraft:alter_ground";
    type FeatureSizeType = "three_layers_feature_size" | "minecraft:three_layers_feature_size" | "two_layers_feature_size" | "minecraft:two_layers_feature_size";
    type StructureProcessorType = "nop" | "minecraft:nop" | "lava_submerged_block" | "minecraft:lava_submerged_block" | "block_ignore" | "minecraft:block_ignore" | "create:schematic" | "jigsaw_replacement" | "minecraft:jigsaw_replacement" | "block_age" | "minecraft:block_age" | "gravity" | "minecraft:gravity" | "rule" | "minecraft:rule" | "blackstone_replace" | "minecraft:blackstone_replace" | "block_rot" | "minecraft:block_rot" | "protected_blocks" | "minecraft:protected_blocks";
    type StructurePoolElementType = "empty_pool_element" | "minecraft:empty_pool_element" | "list_pool_element" | "minecraft:list_pool_element" | "legacy_single_pool_element" | "minecraft:legacy_single_pool_element" | "single_pool_element" | "minecraft:single_pool_element" | "feature_pool_element" | "minecraft:feature_pool_element";
}
declare namespace TSDoc {
    
    type Root = { visible?: boolean }
    type ScreenObject = {
        x?: number | string,
        y?: number | string,
        z?: number | string,
        w?: number | string,
        h?: number | string,
        moveX?: number | string,
        moveY?: number | string,
        expandW?: number | string,
        expandH?: number | string,
        alignx?: "left" | "center" | "right",
        alignY?: "top" | "center" | "bottom",
        draw?: "ingame" | "gui" | "always"
    } & Root
    type RectangleObject = {
        type: "rectangle",
        color?: Internal.Color,
        texture?: ResourceLocation_,
        u0?: number | string,
        v0?: number | string,
        u1?: number | string,
        v1?: number | string
    } & ScreenObject
    type GradientObject = {
        type: "gradient",
        color?: Internal.Color,
        texture?: ResourceLocation_,
        u0?: number | string,
        v0?: number | string,
        u1?: number | string,
        v1?: number | string,
        colorT?: Internal.Color,
        colorB?: Internal.Color,
        colorL?: Internal.Color,
        colorTL?: Internal.Color,
        colorTR?: Internal.Color,
        colorBL?: Internal.Color,
        colorBR?: Internal.Color,
    } & ScreenObject
    type TextObject = {
        type: "text",
        text?: Text_,
        shadow?: boolean,
        scale?: number,
        color?: Internal.Color,
        centered?: boolean
    } & ScreenObject
    
    type Paintable = TextObject | GradientObject | RectangleObject
    type JSMap<K, V> = Map<K, V>;
    type JSSet<E> = Set<E>;
    type JSArray<T> = Array<T>;
    type JavaClass<T> = T;
    type JavaInterface<T> = T;
}
